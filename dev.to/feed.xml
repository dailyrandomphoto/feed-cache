<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Laravel Livewire pour Django? Dite bonjour √† Unicorn!</title>
      <author> Eric Le Codeur</author>
      <pubDate>Sun, 13 Jun 2021 07:35:10 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/laravel-livewire-pour-django-dite-bonjour-a-unicorn-4eie</link>
      <guid>https://dev.to/ericlecodeur/laravel-livewire-pour-django-dite-bonjour-a-unicorn-4eie</guid>
      <description>&lt;p&gt;Si vous d√©sirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;

&lt;br&gt;
Bonjour la communaut√© Django ! &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aujourd'hui je suis tr√®s excit√© car j'ai une nouvelle extra pour les amoureux de Django.&lt;/p&gt;

&lt;p&gt;Un nouvel outil Django est disponible depuis peu et il s'appelle Unicorn&lt;/p&gt;

&lt;h2&gt;Qu'est-ce que Unicorn ?&lt;/h2&gt;

&lt;p&gt;Unicorn est √† Django ce que Livewire est √† Laravel : un framework full stack qui permet de cr√©er une interface utilisateur r√©active riche en fonctionnalit√©s sans API et sans javascript uniquement en Django et python.&lt;/p&gt;

&lt;p&gt;En passant, je ne suis en aucun cas associ√© √† Unicorn. Je suis juste fan de leur travail.&lt;/p&gt;

&lt;h2&gt;Exemple de l'utilisation de Unicorn&lt;/h2&gt;

&lt;p&gt;Supposons que vous souhaitiez cr√©er une liste de t√¢ches mais que vous ne souhaitiez pas rafraichir le navigateur lors de l'ajout ou de la suppression d'une t√¢che. &lt;/p&gt;

&lt;p&gt;Normalement, vous utiliserez javascript pour impl√©menter ce type de fonctionnalit√©. Pas avec Unicorn !&lt;/p&gt;

&lt;p&gt;Unicorn permet de cr√©er un mod√®le Django et une vue Django qui peut faire exactement cela.&lt;/p&gt;

&lt;p&gt;Voici un exemple de mod√®le Django :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jinja"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- unicorn/templates/unicorn/todo.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;unicorn:submit.prevent=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;unicorn:model.defer=&lt;/span&gt;&lt;span class="s"&gt;"task"&lt;/span&gt;
      &lt;span class="na"&gt;unicorn:keyup.escape=&lt;/span&gt;&lt;span class="s"&gt;"task=''"&lt;/span&gt;
      &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"New task"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"task"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;unicorn:click=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;unicorn:click=&lt;/span&gt;&lt;span class="s"&gt;"$reset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Clear all tasks&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;tasks&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;tasks&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      No tasks üéâ
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comme vous le voyez, unicorn:model map le input √† la variable task.&lt;/p&gt;

&lt;p&gt;Tandis que unicorn:click="add" appel la fonction 'add' lors du click du bouton&lt;/p&gt;

&lt;p&gt;La fonction add et la variable task se trouve d√©finit dans le composante todo.py:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# unicorn/components/todo.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_unicorn.components&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UnicornView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnicornView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La beaut√© de cette fonction c'est quelle est ex√©cut√© sans rafraichir le navigateur. Seul le contenu qui √† changer sera re-actualis√© dans le navigateur.&lt;/p&gt;

&lt;p&gt;Comme mentionn√© au d√©but du texte, c'est exactement le m√™me principe qu'avec Livewire (Laravel)&lt;/p&gt;

&lt;h2&gt;Excit√©?&lt;/h2&gt;

&lt;p&gt;Mois je le suis! Unicorn peut litt√©ralement changer le spectre de ce que nous pouvons faire avec les templates Django. &lt;/p&gt;

&lt;p&gt;Il offre la puissance d'un SPA sans quitter le confort de Django.&lt;/p&gt;

&lt;p&gt;Si vous voulez plus d'informations, vous pouvez consulter un exemple visuel sur leur site Web :&lt;br&gt;
&lt;a href="https://www.django-unicorn.com/"&gt;https://www.django-unicorn.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vous pouvez √©galement consulter le git hub et attribuer une √©toile au projet pour les encourager √† continuer.&lt;br&gt;
&lt;a href="https://github.com/adamghill/django-unicorn"&gt;https://github.com/adamghill/django-unicorn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>french</category>
      <category>django</category>
      <category>python</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Importing custom font in HTML and CSS</title>
      <author>Sumeet Yadav</author>
      <pubDate>Sun, 13 Jun 2021 07:28:22 +0000</pubDate>
      <link>https://dev.to/sumeet16/importing-custom-font-in-html-and-css-4n86</link>
      <guid>https://dev.to/sumeet16/importing-custom-font-in-html-and-css-4n86</guid>
      <description>&lt;p&gt;There are many web developers who are starting out and don't know how to add custom fonts to their website! I believe you have arrived to the right place. In this blog I am going to explain you how to import custom fonts to your website.&lt;/p&gt;

&lt;p&gt;Adding a unique font to your website is a great way to make your design stand out online.&lt;/p&gt;

&lt;p&gt;In this blog, I will walk you through the step-by-step process for adding any font to your website.&lt;/p&gt;

&lt;p&gt;So, we are going to using Google Font to import custom fonts. So let's quickly go thought the steps of importing the fonts.&lt;/p&gt;

&lt;p&gt;As of April 2021, Google Fonts have 1052 font families, including 89 variable font families.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-1 Go to Google Font site&lt;/strong&gt;&lt;br&gt;
First of all you have to go to the Google Fonts website, The link for the website is here &lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt; .&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RbWQGvNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqxdpuwicz5qnz9mr1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RbWQGvNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqxdpuwicz5qnz9mr1x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-2 Search for the desired font&lt;/strong&gt;&lt;br&gt;
Then you have to type the desire font name in the search box and press enter for search.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMWzEoSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytiemcv16htnoc9f8kqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMWzEoSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytiemcv16htnoc9f8kqo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-3 Select the styles&lt;/strong&gt;&lt;br&gt;
After that you have select the style of the font. (Eg: Thin 100, Extra-Light 200 etc...).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8wfYkf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfxzvpwmiqjtjavum18i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8wfYkf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfxzvpwmiqjtjavum18i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step-4 There are 2 ways to import the font&lt;/strong&gt;&lt;br&gt;
     &lt;strong&gt;1) In HTML file&lt;/strong&gt;&lt;br&gt;
       i) You have to use link tag to import the font in HTML, else you &lt;br&gt;
       can copy the code in the box and paste that code inside you &lt;br&gt;
       html code.&lt;br&gt;
       ii) Now we have successfully added a custom font!! YAYY now we &lt;br&gt;
       just have to use in the CSS property.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpf4os0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp4aphgmlfzhnljy08il.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpf4os0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp4aphgmlfzhnljy08il.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) In CSS file&lt;/strong&gt;&lt;br&gt;
In order to import font only using CSS then you have to click on @import instead of  and copy the code inside it and paste it at the top of your CSS file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4VcAv2SM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfqtr9wwp0eqg2puwfti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4VcAv2SM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfqtr9wwp0eqg2puwfti.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Bonus Tip:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is advise to use link tag to import font in html instead of using @import in css because the html page is the first to load in the browser and so are the link tags, hence the font will load firstm but on the other hand, css file is loaded after the html file, hence decreasing the speed of importing font.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Do visit the community made by me and my friend¬†&lt;a class="mentioned-user" href="https://dev.to/shreyazz"&gt;@shreyazz&lt;/a&gt;
 for more amazing and informative stuff, and if you wanna recommend something or give feedback, feel free to commentüòá!&lt;/p&gt;

&lt;p&gt;CodeBox's handles : &lt;a href="https://linktr.ee/CodeBox"&gt;https://linktr.ee/CodeBox&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>vscode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS for large projects</title>
      <author>Neha Sharma </author>
      <pubDate>Sun, 13 Jun 2021 06:50:19 +0000</pubDate>
      <link>https://dev.to/hellonehha/css-for-large-projects-cmi</link>
      <guid>https://dev.to/hellonehha/css-for-large-projects-cmi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#css-for-large-projects"&gt;
  &lt;/a&gt;
  CSS for large projects
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the content I prepared for my youtube channel's video.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Why CSS Architecture matter?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are the options&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to decide?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explanations&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-css-architecture-matters"&gt;
  &lt;/a&gt;
  Why CSS architecture matters?
&lt;/h2&gt;

&lt;p&gt;Most developers just focus on JavaScript or its family. As a result, they ignore the styling of the application. Yes, logic is important but look-n-feel is also equally important. As a result, developers end up with messy CSS code which is non-maintainable and non-scalable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-options"&gt;
  &lt;/a&gt;
  What are the options?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;tailwind&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://getbootstrap.com/docs/3.4/css/"&gt;Bootstrap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://sass-lang.com/"&gt;SCSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.styled-components.com/"&gt;Styled Components&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://emotion.sh/docs/introduction"&gt;Emotion&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-decide"&gt;
  &lt;/a&gt;
  How to decide?
&lt;/h2&gt;

&lt;p&gt;In the end, all the above options produce CSS at the build time. To explain how to architect the CSS for bigger projects I will skip all the frameworks and libs such as tailwind, bootstrap, etc. otherwise I will end up offending someone :).&lt;/p&gt;

&lt;p&gt;To understand the architecture, I will go with SCSS (as developers can use SCSS in HTML/JS, Angular, React, Vue, anywhere.)&lt;/p&gt;

&lt;p&gt;So, how do decide which way to go? Look for:&lt;/p&gt;

&lt;p&gt;1) Maintainability&lt;/p&gt;

&lt;p&gt;2) Scalability&lt;/p&gt;

&lt;p&gt;3) Reusability&lt;/p&gt;

&lt;p&gt;4) Ease to learn, and setup (basically DX)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prework-before-writing-a-single-line-of-code-or-checklist"&gt;
  &lt;/a&gt;
  Pre-work before writing a single line of code (or checklist):
&lt;/h2&gt;

&lt;p&gt;[ ] Which Naming convention to followed?&lt;/p&gt;

&lt;p&gt;[ ] List of browsers with their version, operating systems, mobile and tablets  with their operating system to support&lt;/p&gt;

&lt;p&gt;[ ] List of breakpoints&lt;/p&gt;

&lt;p&gt;[ ] Which font-units: rem, em, px  to followed?&lt;/p&gt;

&lt;p&gt;[ ] Format of the color code to follow&lt;/p&gt;

&lt;p&gt;[ ] Any 3rd party style to be used for: base.css, or any other modules?&lt;/p&gt;

&lt;p&gt;[ ] What to use - flex, grids, float?&lt;/p&gt;

&lt;p&gt;[ ] How long the class name should be?&lt;/p&gt;

&lt;p&gt;[ ] How deep the SCSS nesting should be?&lt;/p&gt;

&lt;p&gt;[ ] What is the color palettes&lt;/p&gt;

&lt;p&gt;[ ] What is the font-scale&lt;/p&gt;

&lt;p&gt;[ ] What is the space-scale&lt;/p&gt;

&lt;p&gt;[ ] Identify the common patterns/components/modules. Eg: there are 2 types of buttons&lt;/p&gt;

&lt;p&gt;[ ] Identify the reusable patterns/components/modules&lt;/p&gt;

&lt;p&gt;[ ] Identify the pages&lt;/p&gt;

&lt;p&gt;Every decision should be documented and make it part of your team's onboarding process. This will help the new developers to onboard easily and understand the code guidelines.&lt;/p&gt;

&lt;p&gt;This will also give you a clear understanding of the project's UX and will bring consistency to the project. &lt;/p&gt;

&lt;p&gt;Eg: If on one page the font size of a heading is 24px but on another page the same level heading font size is 14px then it is inconsistent. &lt;/p&gt;

&lt;p&gt;Flag this to the UX team to rectify this. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With consistency developers can easily implement reusability.&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How? Let's again go back to the heading example. &lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;Due to the consistency of font size and style of the same level of headings in the application, the developer will write the code once and will reuse it. Also, in the future, if any developer will add the same level of heading the developer doesn't need to add any style code. As the style is already written for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure-of-the-css"&gt;
  &lt;/a&gt;
  Structure of the CSS
&lt;/h2&gt;

&lt;p&gt;Always keep your style files into a dedicated folder - style/css&lt;/p&gt;

&lt;p&gt;Next, is to understand how to organise your style. It is important that instead of writing whole project's code in one file. We should organise it into multiple files (as per the requirements).&lt;/p&gt;

&lt;p&gt;Now, we will get into the details:&lt;/p&gt;

&lt;p&gt;1) Base &lt;/p&gt;

&lt;p&gt;2) variables&lt;/p&gt;

&lt;p&gt;3) mixins&lt;/p&gt;

&lt;p&gt;4) breakpoints&lt;/p&gt;

&lt;p&gt;5) layouts&lt;/p&gt;

&lt;p&gt;3) common components/modules&lt;/p&gt;

&lt;p&gt;4) pages&lt;/p&gt;

&lt;p&gt;5) themes&lt;/p&gt;

&lt;p&gt;6) vendors&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-framework-to-use"&gt;
  &lt;/a&gt;
  Which framework to use?
&lt;/h2&gt;

&lt;p&gt;Well, this depends a lot on the project ( I know you will be annoyed by this answer. But this is the fact). But a few things to consider while selecting framework/lib:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Knowledge of CSS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is your team or you has strong knowledge of CSS. If yes, then you have loads of options. But if you doesn't know CSS then you can go for the any CSS lib. It will be very helpful.&lt;/p&gt;

&lt;p&gt;PS: There are many backend developers who are responsible to make UI too for them going with CSS libs is very useful. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Timeline of project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the timeline is too tight and you are not sure about how the writing CSS form scratch will come out then anyway go with a CSS lib.&lt;/p&gt;

&lt;p&gt;(If you are confident that you can manage writing the project's CSS from scratch in tight timeline. Then go ahead.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Complexity of the project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the project is complex you need to evaluate writing the styles from scratch vs going for CSS libs. A few developers prefer to write the CSS to have total control vs going for the libs/framework. Whereas a  few developers prefer to offload the complexity to the libs/framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Scalability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is the solution you are going to pick is scalable or not and how easy it would be?&lt;/p&gt;

&lt;p&gt;How fast a developer can add new features? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Maintainability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, one needs to consider about maintainability. How the time-expensive it would be for a developer to fix a bug, or adding new line of code. How many files would the developer is going to change for say for adding a theme.&lt;/p&gt;

&lt;p&gt;Also, if you are going with the lib/framework do consider the future upgrades from creators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Compatibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is the Browser, OS, devices, support of libs and frameworks.&lt;/p&gt;

&lt;p&gt;Happy learning!!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Python's Collections Module: Counter </title>
      <author>Kathan Vakharia</author>
      <pubDate>Sun, 13 Jun 2021 06:40:22 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-collections-module-counter-2gn</link>
      <guid>https://dev.to/kathanvakharia/python-collections-module-counter-2gn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A Counter is a &lt;code&gt;dict&lt;/code&gt; subclass for counting &lt;strong&gt;hashable&lt;/strong&gt; objects ‚Üí any object which is not mutable. &lt;/p&gt;

&lt;p&gt;It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#To use it, ofcourse we need to first import it
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-counter"&gt;
  &lt;/a&gt;
  Using Counter
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;

&lt;span class="c1"&gt;# simply pass any iterable
# Counter(iterable) returns a Counter obj
&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#How does a Counter obj look?
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Counter({1: 4, 2: 3, 'k': 2, 3: 2, 'a': 1})
Counter({'o': 3, 'd': 3, 'e': 2, 'C': 1, 'B': 1, 'l': 1})
""""
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üí° As counter is a subclass of dictionary, it has all the methods of the dictionary. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-mostcommonn-endraw-method"&gt;
  &lt;/a&gt;
  &lt;code&gt;most_common(n)&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;most_common(n)&lt;/code&gt; returns a list of n most common objects along with their respective counts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;myList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;

&lt;span class="c1"&gt;# simply pass any iterable
# Counter(iterable) returns a Counter object
&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# If n is omitted or None, most_common()
# returns all elements in the counter.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Counter({1: 4, 2: 3, 'k': 2, 3: 2, 'a': 1})
Counter({'o': 3, 'd': 3, 'e': 2, 'C': 1, 'B': 1, 'l': 1})
[(1, 4), (2, 3)]
[('o', 3), ('d', 3), ('e', 2)]
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#common-patterns-with-raw-counter-endraw-"&gt;
  &lt;/a&gt;
  Common Patterns with &lt;code&gt;Counter&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;For a given &lt;code&gt;Counter&lt;/code&gt; object &lt;code&gt;c&lt;/code&gt;, &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHXxJxrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4a4meg6qwxaaogw16bw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHXxJxrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4a4meg6qwxaaogw16bw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üí° Feel free to fire up your ipython or python shell and try this commands out for better understanding :)&lt;/p&gt;

&lt;p&gt;Let's wrap up this post with a problem where Counter is very helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-most-frequent-word-using-counter-in-a-given-string"&gt;
  &lt;/a&gt;
  Finding most frequent word using Counter in a given string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"string with repeated word Jello So what is Jello Who cares what is Jello anyways but Jello must be repeated Jello number of Jello times"&lt;/span&gt;

&lt;span class="c1"&gt;# You can use re.split() for more complex patterns!
&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;words_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Most Occurring word is"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;words_count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Most Occurring word is [('Jello', 6)]
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ùì if you notice, while printing the Counter object - it doesn't maintain the &lt;strong&gt;order&lt;/strong&gt; of elements present in the iterable passed. Do you know why?&lt;/p&gt;

&lt;p&gt;Try googling or duckduckgoing! I will answer this question in next post üòâ&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Python's Collection Module: Introduction</title>
      <author>Kathan Vakharia</author>
      <pubDate>Sun, 13 Jun 2021 06:12:17 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collection-module-introduction-4c4b</link>
      <guid>https://dev.to/kathanvakharia/python-s-collection-module-introduction-4c4b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://docs.python.org/3/library/collections.html"&gt;module&lt;/a&gt; implements specialized container datatypes providing alternatives to Python‚Äôs general purpose built-in containers, &lt;code&gt;dict, list, set, and tuple.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-types-does-it-offer"&gt;
  &lt;/a&gt;
  What types does it offer?
&lt;/h2&gt;

&lt;p&gt;Following are the  most commonly used special container types of collections module,&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;dict subclass for counting hashable objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OrderedDict&lt;/td&gt;
&lt;td&gt;dict subclass that remembers the order entries were added&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;defaultdict&lt;/td&gt;
&lt;td&gt;dict subclass that calls a factory function to supply missing values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deque&lt;/td&gt;
&lt;td&gt;list-like container with fast appends and pops on either end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;namedtuple&lt;/td&gt;
&lt;td&gt;factory function for creating tuple subclasses with named fields&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#and"&gt;
  &lt;/a&gt;
  And...
&lt;/h2&gt;

&lt;p&gt;We can also implement a custom container type like &lt;code&gt;OrderedCounter&lt;/code&gt; using the container types provided by collections module.&lt;/p&gt;

&lt;p&gt;The next series of posts  will dive deep into the above mentioned container types provided by collections module.&lt;/p&gt;

&lt;p&gt;Stay Tuned !&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>New Features of JavaScript 2021</title>
      <author>Animesh Dhanuk</author>
      <pubDate>Sun, 13 Jun 2021 06:09:35 +0000</pubDate>
      <link>https://dev.to/animeshdhanuk/new-features-of-javascript-2021-4p1k</link>
      <guid>https://dev.to/animeshdhanuk/new-features-of-javascript-2021-4p1k</guid>
      <description>&lt;p&gt;Nowadays we should know about some programming languages like C language, C++, CSS, JavaScript, Python, etc. Today we discuss new features of JavaScript that are very useful for programmers/ coders/ developers.&lt;/p&gt;

&lt;p&gt;JavaScript is the easiest programming language to learn for beginners. You can learn it from the tutorial by yourself.JavaScript is the front-end programming language.JavaScript gives some new features in 2021 that are very helpful for developers/ coders/ programmers. A few of the features of JavaScript given below: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-logical-operators"&gt;
  &lt;/a&gt;
  1. Logical Operators
&lt;/h2&gt;

&lt;p&gt;JavaScript have AND, OR, NOT operators but in new JavaScript updated three new logical operators are as follow: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-ampamp-operator"&gt;
  &lt;/a&gt;
  A. &amp;amp;&amp;amp;= Operator
&lt;/h2&gt;

&lt;p&gt;In the new logical operator if X variable has a specific value, then the variable should be assigned the value of variable Y. That's why we use a console.use(X), now the value of the variable of X is a change from 10 to 15.Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let X = 10;
    let Y = 15;
    X &amp;amp;&amp;amp;= Y;
    console.use(X);
    // Now, the output of variable X is 15.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#b-operator"&gt;
  &lt;/a&gt;
  B. ||= Operator
&lt;/h2&gt;

&lt;p&gt;This operator is the opposite of &amp;amp;&amp;amp;= operator. In this case value of variable X is not change. If variable X has the wrong value then variable X and variable Y will be equal. Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let X = 10;
let Y = 15;
X &amp;amp;&amp;amp;= Y;
console.use(X);
// Now, the output of variable X is 10.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#c-operator"&gt;
  &lt;/a&gt;
  C. ??= Operator
&lt;/h2&gt;

&lt;p&gt;This operator is used to check the value of the variable is NULL or not. Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let X;
    let Y = 15;
    X ??= 10;
    console.use(X);
    // Now, the output of variable X is 10.

Logic of this operator:
    if(X == NULL ||  X == undefined){
    X = 10
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-replaceall-method-using-string"&gt;
  &lt;/a&gt;
  2. replaceAll method using String
&lt;/h2&gt;

&lt;p&gt;We all use replaceAll method using string. The new JavaScript replace method to have a limitation to change the word in a string. It changes only one word at a time.If you want to replace all words at a time you can use the regular expression. Now let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// with regex
let str = "Hello World!, Hello Their;"
console.log(str.replace(/Hello/g, "Hii"));
// Output will be "Hii World!, Hii Their;"

// without regex
let str = "Hello World!, Hello Their;"
console.log(str.replace('Hello', 'Hii'));
// output will be"Hii World!, Hello Their;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-using-underscores-for-integers-as-a-separator"&gt;
  &lt;/a&gt;
  3. Using underscores for integers as a separator
&lt;/h2&gt;

&lt;p&gt;Sometimes Integers are used as a data type in a string and array. It's very difficult to find out the perfect number of elements that are in million or billion.&lt;/p&gt;

&lt;p&gt;But now in the latest JavaScript, we can easily find the number with the help of underscores(_). We can use underscores as separators in the integer. Let see the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let number = 1_000_000; // one million
    console.log(number);
    // output will be 1000000(the number will remain an integer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-promiseany"&gt;
  &lt;/a&gt;
  4. Promise.any()
&lt;/h2&gt;

&lt;p&gt;Promise.any() is a new function in JavaScript.Promise.any() takes an iterable of Promise objects and, as soon as one of the promises in the iterable fulfills, returns a single promise that resolves with the value from that promise. If no promises in the iterable fulfill, then the returned promise is rejected with an AggregateError, a new subclass of Error that groups together individual errors. This method is opposite from promis.all(). Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        const promise1 = Promise.reject(0);
        const promise2 = new Promise((resolve) =&amp;gt; setTimeout(resolve, 25, 'Even'));
        const promise3 = new Promise((resolve) =&amp;gt; setTimeout(resolve, 30, 'Odd'));
        const promises = [promise1, promise2, promise3];
        Promise.any(promises).then((value) =&amp;gt; console.log(value));
        // output will be "Even" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/05/new-features-of-javascript-2021.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Benchmarking Algorithm Speed</title>
      <author>Zach</author>
      <pubDate>Sun, 13 Jun 2021 05:57:07 +0000</pubDate>
      <link>https://dev.to/zbretz/benchmarking-algorithm-speed-2h95</link>
      <guid>https://dev.to/zbretz/benchmarking-algorithm-speed-2h95</guid>
      <description>&lt;p&gt;Learning about Big O notation has helped me to understand just how shallow I've been thinking about my code. Which is fine - you don't know what you don't know. Besides, I haven't worked with humongous data sets or built speed-sensitive applications and so the world of efficient coding hasn't been, or felt, relevant to me. Obviously, that's changing.&lt;/p&gt;

&lt;p&gt;Here's one thing I've learned: searching linearly through an ordered array for a specific item in that array is less efficient than applying a binary search to that problem. The former's performance can be described as O(n), and the latter's O(log n).&lt;/p&gt;

&lt;p&gt;The theory is great. But I always like to see something work, and not just know about it. So I thought it'd be helpful -- and interesting -- to see it in action and so I wrote some very simple benchmarking tests applying two functions, linearSearch() and binarySearch() to the same data sets and comparing their performance (speed).&lt;/p&gt;

&lt;p&gt;Well, it was a big dud. Instead of watching the search time scale linearly in the linearSearch() case, the results appeared exponential. I tried quite a few approaches in debugging. Apparently Javascript's built-in benchmarking tools aren't &lt;a href="https://stackoverflow.com/a/66615742"&gt;terribly consistent&lt;/a&gt; on small time scales, so I made sure to increase the number of tests I ran for every case, and tracked the averages of those large numbers of tests. That only strengthened the exponential trend. I thought maybe the function call itself (the call embedded between the 'start' and 'stop' tools of the benchmark tools) was slowing things down. So I stripped the search down to the bare for-loop and ran that. Same results. &lt;/p&gt;

&lt;p&gt;Hm. Feeling stuck, I thought I'd conduct a sanity check. Here's what I did....&lt;/p&gt;

&lt;p&gt;....&lt;/p&gt;

&lt;p&gt;....&lt;/p&gt;

&lt;p&gt;Ok, I'll be honest here. I went back into the code so that I could copy it and paste it here. And after looking at it, I think the code I was testing was actually scaling exponentially. So maybe I was reading accurate results, and just misinterpreting. I also got some other funky results. And then eventually I got some results that matched my expectations (read: hopes).&lt;/p&gt;

&lt;p&gt;So here it is. Literally just a test to check whether the performance of an extremely bare-bones for-loop will scale linearly with its inputs. Geez I can't even call it a data set. Just the loop count. Ah well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
function sanityCheck(){

    for(let factor = 1; factor&amp;lt;122; factor+=5){
    const t0 = performance.now();
    var timeSum = 0;
    for (let x=1; x&amp;lt;501; x++){
      var zeroInteger = 0;
      for (let i = 0; i&amp;lt;10000*factor; i++){
          zeroInteger +=0;
        }
      const t1 = performance.now();
     timeSum += t1-t0;
    }
    console.log(timeSum/500);
  }
}
sanityCheck();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a reminder we were counting the time required to run through a useless loop several tens of thousands of times. The chart of the averages looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6qhDZ3IJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3tk160k54o6az1b9wcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6qhDZ3IJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3tk160k54o6az1b9wcc.png" alt="results chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks pretty linear to me. 'Looks' probably isn't the most precise term, but after the struggle I had, you look for wins wherever you can get em.&lt;/p&gt;

&lt;p&gt;This was pretty much my entire Saturday. I'd be embarrassed if I didn't expect to improve massively. And on some level I'm sure this moved me forward, as much as it feels like I have been running in place (or backwards) all day.&lt;/p&gt;

&lt;p&gt;I have a few takeaways. Make sure you know what you're testing for and test for that. Carelessness (or stupidity) in testing can really throw you off. It can throw false positives that fool you into thinking you know what you don't know. It can also have you running in loops trying to make sense of results that don't make sense. I think I got a taste of that today. &lt;/p&gt;

&lt;p&gt;Another lesson that I'm digesting as I type is that while all of this prose might be interesting to me, it sure takes up a lot of time. I mean, it might be cool to reflect on someday, but for the sake of productivity, I'm going to try to keep the narrative to myself and commit to posting code and working demonstrations of the things that I've learned.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to use Open Graph</title>
      <author>Kritebh Lagan Bibhakar</author>
      <pubDate>Sun, 13 Jun 2021 05:51:56 +0000</pubDate>
      <link>https://dev.to/kritebh/how-to-use-open-graph-2a1h</link>
      <guid>https://dev.to/kritebh/how-to-use-open-graph-2a1h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKV4sRSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a170echpghkj0p67izy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKV4sRSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a170echpghkj0p67izy.png" alt="Open Graph Tag Comparison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now tell me which one more likely to be clicked by a normal user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2Wf4evHz9Yd7Y8mPNR/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2Wf4evHz9Yd7Y8mPNR/giphy-downsized.gif" alt="One"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First Link, but WHY ??&lt;/p&gt;

&lt;p&gt;Because at first glance I got what's in that link and it is more appealing than the second one.&lt;/p&gt;

&lt;p&gt;Open graph was originally developed by Facebook and now it is used by Twitter, Pinterest and LinkedIn.&lt;/p&gt;

&lt;p&gt;The benefit of Open Graph is simple, it converts any webpage into a social rich object which becomes more attractive on Social Media upon sharing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-graph-meta-tag"&gt;
  &lt;/a&gt;
  Open Graph Meta Tag
&lt;/h3&gt;

&lt;p&gt;Implementing Open Graph is very simple, You just need to write some meta tag in the head section of an HTML document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Open Graph Uses"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"http://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://ogp.me/logo.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:width"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:height"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:alt"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Open Graph logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Open Graph protocol enables any web page to become a rich object in a social graph."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Open Graph&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the meta property with "og" is the Open Graph Tag.&lt;/p&gt;

&lt;p&gt;There are different types of Open Graph Meta Tag which you can use as per your requirement.&lt;/p&gt;

&lt;p&gt;Some of the most commonly used meta tags are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;og:title&lt;/li&gt;
&lt;li&gt;og:image&lt;/li&gt;
&lt;li&gt;og:url&lt;/li&gt;
&lt;li&gt;og:type&lt;/li&gt;
&lt;li&gt;og:description&lt;/li&gt;
&lt;li&gt;og:locale&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whole List of Tags - &lt;a href="https://ogp.me/"&gt;Open Graph Tags&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validate-the-tags"&gt;
  &lt;/a&gt;
  Validate the Tags
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/tools/debug/"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cards-dev.twitter.com/validator"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.pinterest.com/tools/url-debugger/"&gt;Pinterest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you have any suggestions or feedback let me know in the comment.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>programming</category>
    </item>
    <item>
      <title>DEV COMMUNITY BADGE</title>
      <author>Ammar Mukadam</author>
      <pubDate>Sun, 13 Jun 2021 05:35:38 +0000</pubDate>
      <link>https://dev.to/ammarmukadam/dev-community-badge-29n4</link>
      <guid>https://dev.to/ammarmukadam/dev-community-badge-29n4</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ammarmukadam"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQ9x1qu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg" alt="Ammar Mukadam's DEV Community Profile"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>security</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Back to Basic: Should we use Rem, Em or Pixel?</title>
      <author>Theodorus Clarence</author>
      <pubDate>Sun, 13 Jun 2021 05:05:59 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/back-to-basic-should-we-use-rem-em-or-pixel-1hd0</link>
      <guid>https://dev.to/theodorusclarence/back-to-basic-should-we-use-rem-em-or-pixel-1hd0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Using Rem and Em units is better than using px.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we use px, it means that we hardcode the font-size to all of the users. The user can't change the value whatsoever. This actually troubles the user that wants to have a bigger font-size from the default &lt;code&gt;16px&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-rem-works"&gt;
  &lt;/a&gt;
  How do rem works?
&lt;/h2&gt;

&lt;p&gt;Rem and Em is a relative unit that many developers use to preserve accessibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rem (root em) stands for "root element's font-size"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually, the default root font-size is &lt;code&gt;16px&lt;/code&gt;. So, if we see a font-size that is 1rem, we are looking at 16px&lt;/p&gt;

&lt;p&gt;Because Rem means root element's font-size, we can also override the default value by using CSS like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we changed the root font-size, now &lt;code&gt;1rem = 20px&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-we-want-to-use-value-other-than-16px"&gt;
  &lt;/a&gt;
  What if we want to use value other than 16px?
&lt;/h3&gt;

&lt;p&gt;We can get the rem value of a pixels by dividing it with 16px. For example, if we want to use a font-size of 20px, we will write &lt;code&gt;font-size: 1.25rem&lt;/code&gt;. Which is 20/16.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-its-so-annoying-"&gt;
  &lt;/a&gt;
  But it's so annoying ?!
&lt;/h3&gt;

&lt;p&gt;Yep, using rem will make the development process longer because we need to calculate the rem value. But this gives some freedom to the user, and we are not messing with the accessibility.&lt;/p&gt;

&lt;p&gt;They can change the font-size like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OUVToTBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siei13f4x98q0nxpzgun.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUVToTBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siei13f4x98q0nxpzgun.gif" alt="resize-rem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-em-works"&gt;
  &lt;/a&gt;
  How do em works?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Em stands for "parent element's font-size"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because css is &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance"&gt;cascading and inheritable&lt;/a&gt;, em will inherit font-size value from the parent element. For example, we have a parent div, and p tag inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;hi&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;8px&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;??px&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because &lt;code&gt;p&lt;/code&gt; inherit the parent element's font-size, so &lt;code&gt;1em = 8px&lt;/code&gt;. This means, that the &lt;code&gt;p&lt;/code&gt; will have &lt;code&gt;font-size: 8px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That kind of confusing right? That's why using &lt;strong&gt;em for font-size is not recommended&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always use REM for font-size to be consistent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#where-can-we-use-em-unit"&gt;
  &lt;/a&gt;
  Where can we use em unit?
&lt;/h3&gt;

&lt;p&gt;Because of the inheritable, em unit will be helpful for &lt;strong&gt;padding&lt;/strong&gt; and *&lt;em&gt;margin&lt;/em&gt;. By using em, we can make the padding and margin scale proportionately&lt;/p&gt;

&lt;p&gt;For example, we are making a button. The button can have different font-sizes in mobile and desktop view. We can see the difference between &lt;strong&gt;rem&lt;/strong&gt; and &lt;strong&gt;em&lt;/strong&gt; on this codepen:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/theodorus/embed/OJbwPow?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As we can see, by using &lt;strong&gt;em&lt;/strong&gt; the padding stays proportionate to the scaling of font-size. Whereas &lt;strong&gt;rem&lt;/strong&gt; has the same padding value on any font-sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-we-really-cant-use-px-anymore"&gt;
  &lt;/a&gt;
  Do we really can't use px anymore?
&lt;/h2&gt;

&lt;p&gt;For me, usage of rem and em will be very good on the elements that are crucial like font-size, padding, and margin. But, when giving out border-width, I do still use px value because the value we give is so small that it is almost not noticeable if we change the root font-size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There you go. Try to always use rem for font-size. And utilize the benefit of em for the proportionate padding if you need to.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com/?ref=devto"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog?ref=devto"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library?ref=devto"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site üöÄ&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Software development through Kanban</title>
      <author>Menard Maranan</author>
      <pubDate>Sun, 13 Jun 2021 04:51:22 +0000</pubDate>
      <link>https://dev.to/menard_codes/software-development-through-kanban-28d0</link>
      <guid>https://dev.to/menard_codes/software-development-through-kanban-28d0</guid>
      <description>&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#terms-used"&gt;
  &lt;/a&gt;
  Terms used:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Kanban&lt;/strong&gt; - a workflow management method for defining, managing, and improving services that deliver knowledge work. It aims to help you visualize your work, maximize efficiency, and improve continuously. &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Backlog&lt;/strong&gt; - an accumulation of uncompleted work that needs to be dealt with&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Agile&lt;/strong&gt; - In software development, agile practices involve discovering requirements and developing solutions through the collaborative effort of self-organizing and cross-functional teams and their customer/end user. &lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scrum&lt;/strong&gt; - An agile mindset for developing, delivering, and sustaining complex products,mostly defined by sprints and increments. &lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#kanban-in-software-development"&gt;
  &lt;/a&gt;
  Kanban (in software development)
&lt;/h2&gt;

&lt;p&gt;Kanban is a flavor of Agile methodology as an approach to build software.&lt;/p&gt;

&lt;p&gt;This approach have many similarities and overlaps to another popular agile approach to software development called &lt;a href="https://dev.to/menard_codes/a-quick-guide-about-scrum-5485"&gt;Scrum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a nutshell, you break down a project into multiple software requirements which then becomes the product backlog of the Kanban board. The team then plans how to move the backlog into tasks under &lt;strong&gt;To-Do&lt;/strong&gt; column. That's when the team will work on the task until it's defined as &lt;strong&gt;Done&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning"&gt;
  &lt;/a&gt;
  Planning
&lt;/h2&gt;

&lt;p&gt;Kanban is less strict compared to Scrum, because in Scrum, meetings are fixed on the schedule (like the daily scrum, sprint planning, sprint retrospective, etc.). Meanwhile, in kanban, meetings can be held whenever there's capacity, or held meetings in demand, and there can also be meetings on planning for example.&lt;/p&gt;

&lt;p&gt;During the meetings, the team analyzes the backlog and plan the &lt;strong&gt;"To-Do"&lt;/strong&gt; and moves tasks here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cycle-time-and-lead-time"&gt;
  &lt;/a&gt;
  Cycle time and Lead time
&lt;/h2&gt;

&lt;p&gt;In Kanban, we have &lt;strong&gt;Cycle Time&lt;/strong&gt; which measures how long does it take for a task to move from &lt;strong&gt;To-Do status&lt;/strong&gt; to &lt;strong&gt;Done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is similar to &lt;strong&gt;Velocity&lt;/strong&gt; in Scrum.&lt;/p&gt;

&lt;p&gt;This metric tells how efficient a team is on their work. A &lt;em&gt;lower cycle time&lt;/em&gt; tells that the team can finish tasks in a shorter period of time, reflecting their productivity is high.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kanban-board"&gt;
  &lt;/a&gt;
  Kanban Board
&lt;/h2&gt;

&lt;p&gt;The kanban board is perhaps the core of this idea, so to speak. This board is a nice visual representation of the progress of a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZauYou7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zotn71rgy3r1e6fxhji3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZauYou7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zotn71rgy3r1e6fxhji3.jpg" alt="Kanban Board"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Normally, the kanban board consists of the &lt;strong&gt;Backlog&lt;/strong&gt;, the &lt;strong&gt;To-Do&lt;/strong&gt;, &lt;strong&gt;In-progress&lt;/strong&gt;, and &lt;strong&gt;Done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some teams prefer to add or modify the columns depending on their needs, even mixing it with scrum, since it's very similar to the scrum board.&lt;/p&gt;

&lt;p&gt;You might find there columns for blockers, to-verify or to-test, rejected, etc.&lt;/p&gt;

&lt;p&gt;Often, the top priority tasks like those involved directly in the business are placed on top of the board.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limits"&gt;
  &lt;/a&gt;
  Limits
&lt;/h3&gt;

&lt;p&gt;On a Kanban board, teams set limits to columns on the board, such as the &lt;em&gt;Todo&lt;/em&gt; column or &lt;em&gt;To-test&lt;/em&gt; column.&lt;/p&gt;

&lt;p&gt;This is a little different to Scrum where the limit is set for the entire scrum board rather than per column.&lt;/p&gt;

&lt;p&gt;Such limits are placed to meet the team's cycle time, and to also figure out which process gives them a bottleneck where the team needs to discuss how to clean it up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Kanban is a great way to manage your projects, and can also be applicable to other areas outside software development.&lt;/p&gt;

&lt;p&gt;Developers can boost their productivity by dividing the problems into isolated and independent chunks of tasks, while also understanding the progress of their work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-link"&gt;
  &lt;/a&gt;
  My Link:
&lt;/h2&gt;

&lt;p&gt;Follow me on twitter!&lt;br&gt;
&lt;a href="https://twitter.com/menard_codes"&gt;@menard_codes&lt;/a&gt;&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://kanbanize.com/kanban-resources/getting-started/what-is-kanban"&gt;Kanbanize&lt;/a&gt;¬†&lt;a href="#fnref1"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;Agile software development - Wikipedia&lt;/a&gt;¬†&lt;a href="#fnref2"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Scrum_(software_development)"&gt;Scrum - Wikipedia&lt;/a&gt;¬†&lt;a href="#fnref3"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>agile</category>
      <category>webdev</category>
      <category>kanban</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Steps to Create a Mind Blowing (ü§Ø) Portfolio</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 13 Jun 2021 03:46:34 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/steps-to-create-a-mind-blowing-portfolio-4562</link>
      <guid>https://dev.to/ruppysuppy/steps-to-create-a-mind-blowing-portfolio-4562</guid>
      <description>&lt;p&gt;If you have a desire to build your &lt;em&gt;personal brand&lt;/em&gt;, then a website that can promote your work is a must. &lt;strong&gt;Personal Portfolio&lt;/strong&gt; is the go-to place to list out your &lt;em&gt;experience&lt;/em&gt;, &lt;em&gt;achievements&lt;/em&gt;, and any other relevant information. This article will show you the steps to create an amazing portfolio that leaves the viewers spellbound. I would also be sharing the things I discovered along the way of building my own &lt;a href="https://tapajyoti-bose.vercel.app/"&gt;portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5wopylc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cr6ocq4videj46wyssr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5wopylc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cr6ocq4videj46wyssr.PNG" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-design"&gt;
  &lt;/a&gt;
  1. Design
&lt;/h1&gt;

&lt;p&gt;It is definitely a good idea to keep a design (at least a rough one) handy. It is far easier to make changes to a design than revamping an entire website. &lt;a href="https://www.adobe.com/in/products/xd.html"&gt;&lt;strong&gt;Adobe XD&lt;/strong&gt;&lt;/a&gt; or &lt;a href="https://www.figma.com/"&gt;&lt;strong&gt;Figma&lt;/strong&gt;&lt;/a&gt; are the best tools for this purpose. &lt;strong&gt;Figma&lt;/strong&gt; has a free tier for its services and &lt;strong&gt;XD&lt;/strong&gt; is free for students.&lt;/p&gt;

&lt;p&gt;Feel free to look at other people's portfolios and templates for inspiration, but don't copy them. Modify &amp;amp; improvise them to suit your own style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1NqF3z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uduxcg14144x0ygzermc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1NqF3z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uduxcg14144x0ygzermc.PNG" alt="Rough Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-things-to-list-out-on-the-website"&gt;
  &lt;/a&gt;
  2. Things to List out on the Website
&lt;/h1&gt;

&lt;p&gt;Your portfolio is the perfect place for some &lt;strong&gt;shameless self-promotion&lt;/strong&gt;, so don't shy away from mentioning any project, &lt;em&gt;experience&lt;/em&gt;, &lt;em&gt;achievements&lt;/em&gt;, &lt;em&gt;blogs&lt;/em&gt; or any other relevant details about you.&lt;/p&gt;

&lt;p&gt;If you are just starting out, it is a good idea to build out a couple of projects before diving into building a portfolio, or else it will definitely look empty just like my &lt;a href="https://tapajyoti-portfolio.herokuapp.com/"&gt;first portfolio&lt;/a&gt; - which is just a template filled up with my details (looking at this website now makes me cringe).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-what-technology-should-i-use"&gt;
  &lt;/a&gt;
  3. What Technology should I use?
&lt;/h1&gt;

&lt;p&gt;Everyone has their own choice of technology. So use any technology you are comfortable using. The target is &lt;em&gt;smooth&lt;/em&gt; and &lt;em&gt;engaging&lt;/em&gt; &lt;strong&gt;end-user experience&lt;/strong&gt;, people using the website will not be bothered about the technology you build your application with.&lt;/p&gt;

&lt;p&gt;But I definitely would give you a suggestion: if you want your website to be indexed by search engines and plan on building a &lt;strong&gt;Single Page App&lt;/strong&gt; (&lt;code&gt;SPA&lt;/code&gt;), it is a good idea to create a static site using frameworks like &lt;strong&gt;Next.js&lt;/strong&gt;. Usually, &lt;code&gt;SPA&lt;/code&gt; performs poorly at &lt;strong&gt;Search Engine Optimizations&lt;/strong&gt; leading to poor ranking on &lt;strong&gt;Google&lt;/strong&gt; &amp;amp; other search engines.&lt;/p&gt;

&lt;p&gt;The last thing you want to do is having to revamp the complete website just because your site is not ranked well by &lt;strong&gt;Google&lt;/strong&gt; like I did to bring my website to &lt;em&gt;page 1&lt;/em&gt; from &lt;em&gt;page 4&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXwNsc-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ust78g3fc9ibimbjxeru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXwNsc-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ust78g3fc9ibimbjxeru.png" alt="Search Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-developing-the-website"&gt;
  &lt;/a&gt;
  4. Developing the Website
&lt;/h1&gt;

&lt;p&gt;Now it is finally the time to develop the website. This is the time to bring out your inner artistic persona and actually improvise and implement the design you made in &lt;em&gt;step 1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bonus Tip: Add micro-interactions particularly &lt;em&gt;hover effects&lt;/em&gt; to make your website more engaging.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-hosting-the-app"&gt;
  &lt;/a&gt;
  5. Hosting the app
&lt;/h1&gt;

&lt;p&gt;There are hundreds of hosting service providers available, my personal recommendations are &lt;a href="https://firebase.google.com/"&gt;&lt;strong&gt;Firebase&lt;/strong&gt;&lt;/a&gt; or &lt;a href="https://vercel.com/"&gt;&lt;strong&gt;Vercel&lt;/strong&gt;&lt;/a&gt; for simplified hosting as well as getting a professional domain free of cost (&lt;code&gt;&amp;lt;app-name&amp;gt;.web.app&lt;/code&gt; for &lt;strong&gt;Firebase&lt;/strong&gt; and &lt;code&gt;&amp;lt;app-name&amp;gt;.vercel.app&lt;/code&gt; for &lt;strong&gt;Vercel&lt;/strong&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-search-optimizations"&gt;
  &lt;/a&gt;
  6. Search Optimizations
&lt;/h1&gt;

&lt;p&gt;Now that the website is ready, it's time for it to be listed by Search Engines. Submit your website details at &lt;a href="https://search.google.com/search-console"&gt;&lt;strong&gt;Google Search Console&lt;/strong&gt;&lt;/a&gt;. You can generate a &lt;code&gt;sitemap&lt;/code&gt; for your website from sites like &lt;a href="https://www.xml-sitemaps.com/"&gt;&lt;strong&gt;XML Sitemaps&lt;/strong&gt;&lt;/a&gt; which will be required by &lt;strong&gt;Google&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can skip this step if you don't want your website to be visible on &lt;strong&gt;Google Search&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-network-with-other-developers"&gt;
  &lt;/a&gt;
  7. Network with other developers
&lt;/h1&gt;

&lt;p&gt;You might be wondering &lt;em&gt;"How will networking with other developers help me create a portfolio?"&lt;/em&gt; Let me enlighten you. &lt;/p&gt;

&lt;p&gt;I met this amazing guy, &lt;a href="https://dev.to/itsnitinr"&gt;Nitin Ranganath&lt;/a&gt; from whom I took the idea for the circle in and out animation for the dark mode (only for desktop). He also helped me a lot in incorporating this feature.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---0V7vZHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2deev0i5ptgyuscj85km.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0V7vZHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2deev0i5ptgyuscj85km.gif" alt="Dark Mode Toggle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Always ask for help if you need it and don't hold back from helping others in their journey as well :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Hopefully, this article gave you an idea of the steps involved in creating a portfolio website and streamline the things I had to learn through trial and error, and avoid some silly pitfalls.&lt;/p&gt;

&lt;p&gt;Don't be discouraged if the first version of your portfolio doesn't turn out as you wanted it to. Keep making tiny tweaks and improvements and over time, you will develop a jaw-dropping portfolio.&lt;/p&gt;

&lt;p&gt;Now it is your turn to stun the world with your outstanding portfolio website. Best of luck in your endeavor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_zzxv9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn5ga5oud0109544mu1x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_zzxv9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn5ga5oud0109544mu1x.PNG" alt="Best of Luck"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did I miss something? Share your thoughts in the comments below üëá&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a student &amp;amp; freelancer who will soon start off as a Digital Nomad as soon as I graduate. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>ui</category>
      <category>portfolio</category>
    </item>
  </channel>
</rss>
