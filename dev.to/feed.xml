<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Lambda Expressions in Java</title>
      <author>Josh</author>
      <pubDate>Mon, 11 Oct 2021 02:00:16 +0000</pubDate>
      <link>https://dev.to/jryther/lambda-expressions-in-java-5gme</link>
      <guid>https://dev.to/jryther/lambda-expressions-in-java-5gme</guid>
      <description>&lt;p&gt;This week we are going to go over something I have ran across but didn’t really understand until recently, lambda expressions!  Lambda expressions are Java dipping its toes into functional programming.  It takes parameters and applies it to an expression or code block.  Below is a basic example of the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(parameter1, parameter2) =&amp;gt; expression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(parameter1, parameter2) =&amp;gt; {code block}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lambda expressions are extremely limited and must immediately return a value if it isn’t void.  They can’t use keywords such as if or for to maintain simplicity.  If more lines of code are needed then you can use a code block instead.&lt;/p&gt;

&lt;p&gt;Now when implementing lambdas you can’t only use the expression.  Lambdas are implementations of functional interfaces.  A functional interface is an interface that only has one abstract method.  The benefits of lambdas are that they allow you to implement the method without having to implement the interface’s class and instantiate an object.  An example of this is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface FuncInterface
{
    // An abstract function
    void abstractFun(int x);

    // A non-abstract (or default) function
    default void normalFun()
    {
       System.out.println("Hello");
    }
}

class Test
{
    public static void main(String args[])
    {
        // lambda expression to implement above
        // functional interface. This interface
        // by default implements abstractFun()
        FuncInterface fobj = (int x)-&amp;gt;System.out.println(2*x);

        // This calls above lambda expression and prints 10.
        fobj.abstractFun(5);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lambda expressions are often used as parameters to a function.  To increase readability you can also store lambda expressions in a variable as long as the type is an interface that only has one method, the same number of parameters, and the same return type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.ArrayList;
import java.util.function.Consumer;

public class Main {
  public static void main(String[] args) {
    ArrayList&amp;lt;Integer&amp;gt; numbers = new ArrayList&amp;lt;Integer&amp;gt;();
    numbers.add(5);
    numbers.add(9);
    numbers.add(8);
    numbers.add(1);
    Consumer&amp;lt;Integer&amp;gt; method = (n) -&amp;gt; { System.out.println(n); };
    numbers.forEach( method );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A common use for lambdas are creating threads.  Here is an example of implementing a Runnable object with a lambda code block for the thread to execute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Lambda Runnable
Runnable task2 = () -&amp;gt; { System.out.println("Task #2 is running"); };

// start the thread
new Thread(task2).start();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of us as beginners have been taught to program using OOP concepts so it can be a bit jarring to use a different paradigm like functional programming.  I myself am still learning to wrap my head around these concepts.  Anyway, I hope you all were able to learn something today.  If you have more questions or want to deep dive into this topic check out the links below that I used to write this post.  The code examples I pulled are also from there.  Have a great week!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/java/java_lambda.asp"&gt;https://www.w3schools.com/java/java_lambda.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codejava.net/java-core/the-java-language/java-8-lambda-runnable-example"&gt;https://www.codejava.net/java-core/the-java-language/java-8-lambda-runnable-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/lambda-expressions-java-8/"&gt;https://www.geeksforgeeks.org/lambda-expressions-java-8/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.developer.com/microsoft/start-using-java-lambda-expressions/"&gt;https://www.developer.com/microsoft/start-using-java-lambda-expressions/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Card Web Component</title>
      <author>ndesanno</author>
      <pubDate>Mon, 11 Oct 2021 01:33:24 +0000</pubDate>
      <link>https://dev.to/ndesanno/card-web-component-551</link>
      <guid>https://dev.to/ndesanno/card-web-component-551</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0D3wPTPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m16z78rh2o52s2512vhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0D3wPTPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m16z78rh2o52s2512vhv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h1&gt;

&lt;p&gt;My team and I are currently developing a card for websites like the one above. There are many elements that are a part of this card, but for this project we are focusing on four of them. They include icon, banner, scaffold, and the card itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadblocks"&gt;
  &lt;/a&gt;
  Roadblocks
&lt;/h2&gt;

&lt;p&gt;Some potential roadblocks we could face when developing the card with the provided elements is properly designing the styling of the elements to work together. We want the card to be very changeable with the elements working together. We also need to take into account the size of the webpage to be able to have the card properly display the data in a way that makes sense for all web page sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-development"&gt;
  &lt;/a&gt;
  Managing development
&lt;/h2&gt;

&lt;p&gt;When considering working on a team with developers of all skill sets, documentation and communication of coding is key to project success. We will need to learn new skills in css and html to provide something that is workable and looks good.&lt;/p&gt;

&lt;p&gt;repo: &lt;a href="https://github.com/runtimeErrorsMadeEasy/project2"&gt;https://github.com/runtimeErrorsMadeEasy/project2&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Three Protocols you should know as a web developer
</title>
      <author>Mahmoud EL-kariouny</author>
      <pubDate>Mon, 11 Oct 2021 01:02:01 +0000</pubDate>
      <link>https://dev.to/mahmoudessa/three-protocols-you-should-know-as-a-web-developer-270</link>
      <guid>https://dev.to/mahmoudessa/three-protocols-you-should-know-as-a-web-developer-270</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-does-protocol-mean"&gt;
  &lt;/a&gt;
  What Does Protocol Mean?
&lt;/h3&gt;

&lt;p&gt;A protocol is a set of rules and guidelines for communicating data.&lt;/p&gt;

&lt;p&gt;Rules are defined for each step and process during communication between two or more computers.&lt;/p&gt;

&lt;p&gt;Networks have to follow these rules to successfully transmit data.&lt;/p&gt;

&lt;p&gt;1- HTTP:&lt;/p&gt;

&lt;p&gt;The Hypertext Transfer Protocol(HTTP) is used by the browser to tell the host computer what file it wants to retrieve.&lt;/p&gt;

&lt;p&gt;2- IP:&lt;/p&gt;

&lt;p&gt;The Internet Protocol (IP) is used for routing IP packets between logan's computer and the server based on IP addresses. &lt;/p&gt;

&lt;p&gt;3- TCP:&lt;/p&gt;

&lt;p&gt;The Transmission Control Protocol(TCP) is used for making sure the IP packets all arrive correctly and in order.&lt;/p&gt;

&lt;p&gt;Read More:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:web-protocols/a/the-world-wide-web"&gt;The World Wide Web&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:web-protocols/a/domain-name-system-dns"&gt;Domain Name System (DNS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.khanacademy.org/computing/computers-and-internet/xcae6f4a7ff015e7d:the-internet/xcae6f4a7ff015e7d:web-protocols/a/hypertext-transfer-protocol-http"&gt;Hypertext Transfer Protocol (HTTP)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Thoughts on 10x Developers</title>
      <author>Nested Software</author>
      <pubDate>Mon, 11 Oct 2021 00:34:18 +0000</pubDate>
      <link>https://dev.to/nestedsoftware/thoughts-on-10x-developers-1iom</link>
      <guid>https://dev.to/nestedsoftware/thoughts-on-10x-developers-1iom</guid>
      <description>&lt;p&gt;The concept of the 10x developer was popularized by &lt;a href="https://en.wikipedia.org/wiki/Steve_McConnell"&gt;Steve McConnell&lt;/a&gt; in his book, Rapid Development, published in the 1990s. Steve highlighted some research into software engineering that suggested top developers could offer an order-of-magnitude improvement in productivity over average performers. &lt;/p&gt;

&lt;p&gt;It is not easy to draw firm conclusions from this type of research. It is difficult to generalize the meaning of the results beyond the particular tasks associated with a specific study. Nonetheless, I would say these results are roughly consistent with my own anecdotal experience. In any field, there are outliers who can make things look easy that would be very hard for the average practitioner. This is accomplished both by dint of experience and great effort put in over years, but also because some people have the good fortune of being supremely talented. &lt;/p&gt;

&lt;p&gt;Software development is no different from any other field. I've encountered brilliant programmers who would be several times as productive as I can be for many kinds of tasks. Also, such people can solve problems that may be entirely beyond my capabilities. Reasonable people can disagree about the 10x number, but I dare say we can all agree that brilliant people do exist. &lt;/p&gt;

&lt;p&gt;I think the trouble started when "10x developer" increasingly became a buzzword in the tech industry in the 2000s. It became associated with the image of a kind of toxic and abrasive male tech-bro. I believe it also came to be used as justification to dismiss the need for diversification in software engineering. I completely reject this kind of idea. Human potential comes in many forms, and we can nurture and cultivate talent from many different backgrounds. &lt;/p&gt;

&lt;p&gt;However, I do sense something in the zeitgeist that, as part of the rejection of this idea that 10x developers must be arrogant, male, white, Stanford grads, there is this train of thought that 10x developers simply don't exist - or that any apparent increase in productivity comes only from cutting corners. That's also not true, and I believe it does a disservice to the reality of individual differences.&lt;/p&gt;

&lt;p&gt;The simple truth is that there are two axes to consider. On one axis, we have talent level. On the other, there are positive vs. negative personality traits. The two axes  are somewhat independent. Talented (and untalented) jerks exist. But many talented people are also modest and kind. I believe that somehow the myth of the arrogant 10x developer came from some high profile examples - people like John Carmack and Bill Gates in their youth do fit the profile. However, these stereotypes are not representative. We tend to notice these cases because people who are both exceptional and jerks tend to stand out, but that doesn't mean it is something to celebrate or emulate. &lt;/p&gt;

</description>
      <category>10xdeveloper</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Primary Keys in SQL</title>
      <author>Jo</author>
      <pubDate>Mon, 11 Oct 2021 00:19:41 +0000</pubDate>
      <link>https://dev.to/jo_josephs/primary-keys-in-sql-nja</link>
      <guid>https://dev.to/jo_josephs/primary-keys-in-sql-nja</guid>
      <description>&lt;p&gt;We want all our data entries in a table to be uniquely identifiable. A Primary key is a unique identifier on a row. A good example of a primary key is your twitter handle. No 2 twitter handles are the same, and your twitter handle cannot be NULL. You can change your twitter handle, but it always has to be unique (and twitter will not allow the change unless it is unique value).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE unique_students (student_id INT NOT NULL,
name VARCHAR(100),
age INT,
PRIMARY KEY(student_id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The below image will shows us what the above code creates in mysql:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FmM8Jgp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5g3rpbym2qfy97qszf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmM8Jgp7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5g3rpbym2qfy97qszf3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that the primary key is the student_id. However, it would be less efficient in this database to manually create our primary key. We can do this automatically with the auto_increment keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE unique_students (
student_id INT NOT NULL AUTO_INCREMENT,
name VARCHAR(100),
age INT,
PRIMARY KEY(student_id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The auto_increment id will add a 1 each time, so we no longer have to specify it when creating a new entry&lt;br&gt;
In the highlighted section of the graphic below, we can see that we have 2 identical entries except they have different student_id's because they've been auto_incremented.  They are actually 2 separate students who happen to have the same first name and age (which is quite common in a school setting).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a-h4aYh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu7ghh347fuh2ndejlpt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a-h4aYh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu7ghh347fuh2ndejlpt.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The auto_increment now lies in the "Extra" field (use the &lt;strong&gt;DESC&lt;/strong&gt; keyword to show the table's description.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82dKuRFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2v6y5smxza5156xzs97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82dKuRFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2v6y5smxza5156xzs97.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this blog, folks. Thanks for checking it out :)&lt;/p&gt;

</description>
      <category>sql</category>
    </item>
    <item>
      <title>API Project Template, Written in Typescript</title>
      <author>MIftahul Arifin</author>
      <pubDate>Sun, 10 Oct 2021 23:59:52 +0000</pubDate>
      <link>https://dev.to/arifintahu/api-project-template-written-in-typescript-5dmk</link>
      <guid>https://dev.to/arifintahu/api-project-template-written-in-typescript-5dmk</guid>
      <description>&lt;p&gt;Building project with standardized structure could save much our time. We could focus on business process without considering too much on project structure. On the other hand, a good project structure should be clean, nice refactored, and easy to maintain.&lt;/p&gt;

&lt;p&gt;Here's why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your time should be focused on creating something amazing. A project that solves a problem and helps others.&lt;/li&gt;
&lt;li&gt;You shouldn't be doing the same tasks over and over like structuring project&lt;/li&gt;
&lt;li&gt;You should implement dry principles to the rest of your life&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This time, I created complete project template for API written in Typescript which is available in this &lt;a href="https://github.com/arifintahu/project-structure-api"&gt;github&lt;/a&gt;. Of course, no one template will serve all projects since your needs may be different. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built With
&lt;/h3&gt;

&lt;p&gt;This project structure is built using&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sequelize.org/"&gt;Sequelize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;JsonWebToken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.postgresql.org/"&gt;Postgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/supertest"&gt;Supertest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Everything is modular and unit testable&lt;/li&gt;
&lt;li&gt;Typescript everything&lt;/li&gt;
&lt;li&gt;Express API with dependency injected routes, controllers, repositories, middleware, and services&lt;/li&gt;
&lt;li&gt;Centralized configuration loading and validation&lt;/li&gt;
&lt;li&gt;API Documentation using swagger&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── .husky/                     # Pre-commit config for lint staged
├── src/                        # All application source
├──── @types/                   # Type definition
|
├──── api/                       
├────── controllers/            # Define all controllers
├────── helpers/                # Define all helpers
├────── lib/                    
├──────── logger.ts             # Define logger
├────── middlewares/
├──────── authorization.ts      # Define authorization using JWT
├──────── morgan.ts             # Define morgan   
├────── models/                 # Define all schema models
├────── repositories/           # Define all repositories
├────── routes/                 
├──────── v1/                   # Define all v1 routes
├────── services/               # Define all services
├────── validations/            # Define all controller validations
|
├──── config/
├────── swagger/                # Define swagger configuration
├────── database.ts             # Define postgres database connection
├────── express.ts              # Define express configuration
|
├──── constants/                # Define all constants                   
├──── server.ts                 # Create express config
├──── index.ts                  # ENTRYPOINT - Start server
|
├── test/                       # End-to-end test
|
└── Lots of random build-related files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See full project &lt;a href="https://github.com/arifintahu/project-structure-api"&gt;here&lt;/a&gt;. Let me know if you have any suggestions😄.&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>SEO-ing my JAMstack site</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Sun, 10 Oct 2021 23:25:58 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/seo-ing-my-jamstack-site-1mik</link>
      <guid>https://dev.to/jasonleowsg/seo-ing-my-jamstack-site-1mik</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-i-optimised-my-jamstack-site-for-search-engines"&gt;
  &lt;/a&gt;
  &lt;em&gt;How I optimised my JAMstack site for search engines&lt;/em&gt;
&lt;/h2&gt;




&lt;p&gt;SEO isn’t my strongest suit, so I decided to learn more about it by optimising my JAMstack site &lt;a href="https://sweetjamsites.com"&gt;Sweet Jam Sites&lt;/a&gt;. I’m usually more familiar with content marketing. I write daily on &lt;a href="https://golifelog.com"&gt;Lifelog&lt;/a&gt;, and coming up with content isn’t difficult. But my worry is that writing out content might be an abortive exercise, as I’m still experimenting with my target audience for Sweet Jam Sites. I know JAMstack is great, but it’s a key to unlock a door that I’m still searching for. So when Martins Sulcs from Uprankd.com offered a free SEO audit consultation on Indie Hackers, I took it. I seriously didn’t know what to expect. I didn’t even know if I have the development skill to fix any of the suggested recommendations. But I’m pleasantly surprised at the depth and breadth of the report, and Martins was really helpful, even checking back to see if I had any problems fixing my site. &lt;/p&gt;

&lt;p&gt;So after an SEO day, my Lighthouse score went from the 60-70 range to the &lt;strong&gt;90s range&lt;/strong&gt;! So awesome! Here’s what I did:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meta-tags"&gt;
  &lt;/a&gt;
  Meta tags
&lt;/h3&gt;

&lt;p&gt;I added meta tags some time ago, but canonical tag was something recommended in the report. Which is true because I had many different landing pages for different audiences, and much of the content overlapped. So telling search engines which is the main home page is important. And a word about JAMstack – it’s not immediately clear where to inject the meta tags in Gatsby because of the file structure. Initially I did it via via gatsby-ssr file, but later on discovered a simpler solution - via the snippet feature in Netlify itself. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nofollow-outgoing-links"&gt;
  &lt;/a&gt;
  Nofollow outgoing links
&lt;/h3&gt;

&lt;p&gt;I changed relevant outgoing links to “nofollow”, so that Google wouldn’t penalise me too much. In fact, before starting this, I didn’t think I had many outgoing links to start with, but I ended up spending the most time on this as there were a lot more outgoing links than I realised. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#added-seojs-component-for-seo-on-all-blog-posts"&gt;
  &lt;/a&gt;
  Added SEO.js component for SEO on all blog posts
&lt;/h3&gt;

&lt;p&gt;The thing about adding meta tags in point #1 is that it adds it globally to the site. But I want specific meta tags for my blog posts. So adding this piece of Javascript code is important. I followed this tutorial since I used a Stackbit site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#added-a-sitemap"&gt;
  &lt;/a&gt;
  Added a sitemap
&lt;/h3&gt;

&lt;p&gt;I wasn’t sure how to create a sitemap. The Stackbit tutorial recommended using a Gatsby plugin, but it involves using the command line (which is a hassle, and for non-technical folks, just plain scary). Initially I went with the old school way – just creating a xml file and uploading it directly to my root folder (which is the /static folder in Stackbit sites). I googled for a sitemap generator site, keyed in my site’s URL, and then download the auto-generated sitemap file. I proceeded to upload the sitemap into my Github repository, and was happy with it as a short term hack (the problem is that you need to manually update the xml file whenever you updated your file, which is a pain). But later on when I was experimenting with Netlify Build plugins, I found plugins for sitemaps! The plugins would auto-generate a new sitemap on each build on Netlify, and another plugin auto-submitted to search engines. Just. Freaking. Amazing. So impressed with Netlify.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-search-console"&gt;
  &lt;/a&gt;
  Google Search Console
&lt;/h3&gt;

&lt;p&gt;I submitted my domain and sitemap to Google Search Console so that Google would start indexing my site properly. But subsequently, because of the sitemap plugins on Netlify, I probably no longer need to manually update anything on Google Search Console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netlify-build-plugins"&gt;
  &lt;/a&gt;
  Netlify Build plugins
&lt;/h3&gt;

&lt;p&gt;Lastly, I went into Netlify UI and installed Netlify Build plugins for optimisation of images, inline source, font loading, sitemap generation and submission. Netlify also has native features for CSS, JS bundling and more image optimisation, which I switched on. There’s also a Gatsby Cache plugin to persist the cache in between builds, so that build times are shorter. And do you know they are all free?! Amazing! &lt;/p&gt;

&lt;p&gt;There’s still loads of recommendation in the SEO audit report that I had yet to touch. Using new image formats is another thing I’m keen to work on. But after a hard day’s work on it, a Lighthouse score in the 90s is pretty motivating!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What other SEO hacks and tips would you recommend?&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>seo</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>The 7 software testing principles</title>
      <author>Lucas Andrade</author>
      <pubDate>Sun, 10 Oct 2021 21:19:41 +0000</pubDate>
      <link>https://dev.to/lucashdoa/the-7-software-testing-principles-hlc</link>
      <guid>https://dev.to/lucashdoa/the-7-software-testing-principles-hlc</guid>
      <description>&lt;p&gt;Hello there! 👋 &lt;/p&gt;

&lt;p&gt;I'm Lucas, a brazilian QA engineer, and this is Another QA Content nobody asked for (but i made it anyway 😂). My goal with this blog is to talk about things related to the QA world in my own way, giving my opinion and point of view. If you like it, follow me for more posts like this one!&lt;/p&gt;

&lt;p&gt;Today i want to talk about a subject that is covered at the first chapter of the CTFL syllabus. The seven &lt;del&gt;commandments&lt;/del&gt; principles of software testing. (This was a Moses pun if you didn't get it). No more puns &lt;del&gt;for now&lt;/del&gt;, let's open this ocean of knowlegde!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6Mm6r7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0adzng72s3gcnca7vkrh.gif" alt="Alt Text"&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#testing-shows-the-presence-of-defects-not-their-absence"&gt;
  &lt;/a&gt;
  1️⃣ Testing shows the presence of defects, not their absence
&lt;/h2&gt;

&lt;p&gt;Many QA engineers may have been in a situation like the following before: The product owner or even the client says your job is to guarantee the sprint deliverable is bug free.&lt;/p&gt;

&lt;p&gt;Testing is a destructive activity, it's goal is to make the software fail. When a tester write a test case, it is meant to find a bug, not to prove there is none.&lt;/p&gt;

&lt;p&gt;So, this principle states that it's impossible to guarantee that a testing object is defect free.&lt;/p&gt;

&lt;p&gt;Some points to be aware: Maybe a non-QA person will misunderstood this principle as an excuse for a QA that isn't good at his job. And on the other hand, it can be misused by a QA to justify not catching a bug that should have been found easily. I personally think this principle isn't meant to justify a bug that has got into production, i think it's meant to avoid creating false expectation on the product and the QA job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exhaustive-testing-is-impossible"&gt;
  &lt;/a&gt;
  2️⃣ Exhaustive testing is impossible
&lt;/h2&gt;

&lt;p&gt;As a QA, you will probably never have the time to test every possible scenario of a software. &lt;/p&gt;

&lt;p&gt;Imagine a small form with 3 select fields, every field has 10 options. To test every possible scenario, it would take you 10³ = 1000 test cases.&lt;/p&gt;

&lt;p&gt;We can use a black box testing technique called equivalent partitioning. Briefly explaining, it consists of dividing test data into partitions in such a way that all the members of a given partition are expected to be processed in the same way.&lt;/p&gt;

&lt;p&gt;There can even be a situation in wich time is a concern. In this case it's more recomended to perform a risk analysis, and prioritize tests based on the higher risks for the business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#early-testing-saves-time-and-money"&gt;
  &lt;/a&gt;
  3️⃣ Early testing saves time and money
&lt;/h2&gt;

&lt;p&gt;This principle is probably the parent of the trending shift-left testing approach. It states that the testing activities should start as soon as possible in a project.&lt;/p&gt;

&lt;p&gt;Testing activities are not limited to execute or automate E2E tests when a feature is ready. A tester can also review documentation and requisits, to prevent errors and mistakes from advancing to later stages of the software development life cycle. Remember, the later you find a problem, the more it will cost to fix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defects-cluster-together"&gt;
  &lt;/a&gt;
  4️⃣ Defects cluster together
&lt;/h2&gt;

&lt;p&gt;This principle is an application of the Pareto Principle. Maybe you don't know it by its name, but you might have heard about it somewhere. Here is a brief about it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For many outcomes, roughly 80% of consequences come from 20% of causes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In software testing, there's a high probability that 80% of the problems can be found at 20% of the modules/components. So be aware when you find a bug, for there can be more, hiding on the same feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beware-of-the-pesticide-paradox"&gt;
  &lt;/a&gt;
  5️⃣ Beware of the pesticide paradox
&lt;/h2&gt;

&lt;p&gt;To explain this one i'll borrow a paragraph from a Guru99 article about the 7 principles of testing (you can find the link bellow in the references section).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Repetitive use of the same pesticide mix to eradicate insects during farming will over time lead to the insects developing resistance to the pesticide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if you repeat the same test case again and again, chances are it will become less effective (consider an effective test case one that has a higher probability of finding bugs). Because of that, as a QA you need to review your testing techniques and test cases frequently. In an Agile project where requisits change very often, this is even more crucial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-is-context-dependent"&gt;
  &lt;/a&gt;
  6️⃣ Testing is context dependent
&lt;/h2&gt;

&lt;p&gt;This principle talks about how different contexts may influence the test in different ways.&lt;/p&gt;

&lt;p&gt;Testing in an agile project is done differently than it's done in waterfall, due to the differences in release periodicity.&lt;/p&gt;

&lt;p&gt;Testing an e-commerce is done differently than testing an internet banking system, due to the different risks involved.&lt;/p&gt;

&lt;p&gt;The correct tool for automating regression tests depends heavily on the context too. As you get more experienced, the more you get to understand the context you're incerted, and plan your QA job to fit it well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#absenceoferrors-is-a-falacy"&gt;
  &lt;/a&gt;
  7️⃣ Absence-of-errors is a falacy
&lt;/h2&gt;

&lt;p&gt;Like we have seen in principle number 2, testing shows the presence of defects and not their absence. What this principle states is that no matter how much effort you or your team put on testing activities, the tests alone can never guarantee an error-free software.&lt;/p&gt;

&lt;p&gt;A software isn't considered to have an error only when something doesn't work as expected. A system that is overcomplicated for the user (bad usability) or doesn't fullfil the user needs (bad modeling) is also considered to have errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  💰Bonus
&lt;/h2&gt;

&lt;p&gt;To test your understanding of the seven testing principles presented above, try to solve this question from the CTFL 2018 sample exam:&lt;/p&gt;

&lt;p&gt;🤔&lt;b&gt;(Sample Exam C, Question 4)&lt;/b&gt;: A product owner says that your role as a tester on an Agile team is to catch all the bugs before the end of each iteration. Which of the following is a testing principle that could be used to respond to this (false) statement?&lt;/p&gt;

&lt;p&gt;a) Defect clustering&lt;br&gt;
b) Testing shows the presence of defects&lt;br&gt;
c) Absence of error fallacy&lt;br&gt;
d) Root cause analysis&lt;/p&gt;

&lt;p&gt;The answer is below.&lt;/p&gt;




&lt;p&gt;If you've read this far, i hope the content has added something for you. If not, remember: &lt;em&gt;This is just another ordinary QA content&lt;/em&gt; 😬.&lt;/p&gt;

&lt;p&gt;🍀 See ya!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-question-answer"&gt;
  &lt;/a&gt;
  ❗ Bonus question answer
&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;b&lt;/b&gt; is correct. Testing can show the presence of defects but cannot prove their absence, which makes it impossible to know if you have caught all the bugs. Further, the impossibility of exhaustive testing makes it impossible for you to catch all the bugs&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  🔍 References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.istqb.org/downloads/category/2-foundation-level-documents.html"&gt;CTFL Syllabus 2018&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.guru99.com/software-testing-seven-principles.html"&gt;Guru99&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.geeksforgeeks.org/software-engineering-seven-principles-of-software-testing/"&gt;Geek for Geeks&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-chat"&gt;
  &lt;/a&gt;
  😁 Let's chat!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/lucashdoa"&gt;Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/lucashdoa/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ctfl</category>
      <category>testing</category>
      <category>qa</category>
      <category>test</category>
    </item>
    <item>
      <title>✅ Tell Me About A Time You Had To Handle Pressure | Facebook Behavioral Interview (Jedi) Series 🔥</title>
      <author>The Interview Sage</author>
      <pubDate>Sun, 10 Oct 2021 21:12:10 +0000</pubDate>
      <link>https://dev.to/theinterviewsage/tell-me-about-a-time-you-had-to-handle-pressure-facebook-behavioral-interview-jedi-series-mj9</link>
      <guid>https://dev.to/theinterviewsage/tell-me-about-a-time-you-had-to-handle-pressure-facebook-behavioral-interview-jedi-series-mj9</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LO_e3CDkPmM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before we discuss this question, let us recap what the Behavioral Interview Round at Facebook is.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Behavioral Interview Round is also known as the Jedi Interview round at Facebook.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is about you and your history, your résumé, and your motivation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The purpose of this interview is to assess whether the candidate will thrive in Facebook's peer-to-peer, minimal process, and unstructured engineering organization.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Software Engineers, the behavioral interview is actually part behavioral and part coding. The coding part is a shorter version of the usual coding interviews and is included to supplement the other two coding interviews to get an additional coding signal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-amp-tricks-to-effectively-prepare-for-behavioral-interviews"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" alt="Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews" title="Behavioral Interview Tips &amp;amp; Tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Know yourself! Take the time to review your résumé, as the interviewer will almost certainly ask about key events in your work history.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have concrete examples or anecdotes to support each of the questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Familiarize yourself with Facebook's mission statement and its five core values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be Bold&lt;/li&gt;
&lt;li&gt;Focus on Impact&lt;/li&gt;
&lt;li&gt;Move Fast&lt;/li&gt;
&lt;li&gt;Be Open&lt;/li&gt;
&lt;li&gt;Build Social Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be yourself! Be open and honest about your successes and failures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be humble and focus on teamwork, leadership, and mentorship qualities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let us review how to effectively answer this question.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-tell-me-about-a-time-you-had-to-handle-pressure"&gt;
  &lt;/a&gt;
  Question: Tell Me About A Time You Had To Handle Pressure
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7614MME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzsfuu4aupr90rm67i4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7614MME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzsfuu4aupr90rm67i4j.png" alt="Tell Me About A Time You Had To Handle Pressure" title="Tell Me About A Time You Had To Handle Pressure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=53s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Never Worked Under Pressure".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Handling work pressure and stressful situations is a crucial part of everyone's career journey. Interviewers often ask candidates to tell about a time they had to handle pressure at their workplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TkzFVgbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ysjci4cyntgfv1p6z3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TkzFVgbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ysjci4cyntgfv1p6z3r.png" alt="Evaluation Criteria for Tell Me About A Time You Had To Handle Pressure" title="Evaluation Criteria for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke0R6l2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3t26r3449d1cumhyao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke0R6l2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3t26r3449d1cumhyao.png" alt="Evaluation Criteria for Tell Me About A Time You Had To Handle Pressure" title="Evaluation Criteria for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everyone faces stressful situations and comes under pressure once in a while at their jobs. Through this question, the interviewer's goal is to assess whether you can perform in challenging situations or unstructured environments and distinguish between the urgent and the important.&lt;/p&gt;

&lt;p&gt;They are trying to understand if you can stay calm, exercise judgment, and act responsibly in such unexpected high-pressure scenarios. They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication,&lt;/li&gt;
&lt;li&gt;Time management,&lt;/li&gt;
&lt;li&gt;Problem-solving, and&lt;/li&gt;
&lt;li&gt;Decision-making skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Employers want to know if you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handle competing priorities,&lt;/li&gt;
&lt;li&gt;Shift gears when needed, and&lt;/li&gt;
&lt;li&gt;Understand the implications of missing deadlines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are looking to see if your coworkers can rely on you to get the work done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#response-framework"&gt;
  &lt;/a&gt;
  Response Framework
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YI-pyOs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmt1nvw5z0m9zk6494y4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YI-pyOs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmt1nvw5z0m9zk6494y4.png" alt="Response Framework for Tell Me About A Time You Had To Handle Pressure" title="Response Framework for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our advice is to pick a compelling and honest story that can articulate a real-life experience where you had to manage a high-pressure situation at your workplace.&lt;/p&gt;

&lt;p&gt;Describe the situation, the events that occurred, and explain how it became challenging while working on a particular project. For example, it can be any of the following scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A few of your colleagues working with you on the project unexpectedly left the team or the company, and you were left short-staffed to complete it within the deadline.&lt;/li&gt;
&lt;li&gt;Your manager or coworker might hand you a last-minute request that is of higher priority.&lt;/li&gt;
&lt;li&gt;Something genuinely urgent comes up, like a production issue, for which you had to drop everything else.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain to the interviewer how you evaluated and decided your plan of action. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You worked with your manager or technical lead to redefine your current OKRs and deprioritize a few optional tasks so that you can deliver the necessary features on time.&lt;/li&gt;
&lt;li&gt;Describe how you were creative and resourceful to get additional help from your own or another team to deliver the project within the deadline.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, elaborate on how you communicated about this shift with your manager, coworkers, and other stakeholders.&lt;/p&gt;

&lt;p&gt;Finally, express how the outcome and the impact were beneficial to the company or team. Also, explain the learnings you took from this challenging situation and how they helped you become a better engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEftAEMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f0nol2we68fhjkwpvjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEftAEMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f0nol2we68fhjkwpvjg.png" alt="Tips and Tricks for Tell Me About A Time You Had To Handle Pressure" title="Tips &amp;amp; Tricks for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some tips and tricks that will help you effectively prepare this question for the behavioral interview.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use a compelling story that is honest and believable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is most desirable to describe a real-life example to the interviewer to show that you have actually faced such a situation in your career and not just talk about a generic strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always remain calm, composed, and confident while answering this question.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not sugarcoat your answer with irrelevant details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spend more time talking about the actions you took to handle the challenging situation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show that you proactively communicated about the shifting priorities to all the stakeholders to keep them well informed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on the business impact that you had on your company or team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The biggest way to mess up answering this question is by simply saying that you have never worked under pressure at your workplace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead, explain your strategies for dealing with stress in your day-to-day life.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare the response for this question beforehand, as it will be tough to structure your answer on the spot during the interview.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not memorize the answer as it should come naturally, and you should sound confident to the interviewer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#sample-answer-example"&gt;
  &lt;/a&gt;
  Sample Answer (Example)
&lt;/h2&gt;

&lt;p&gt;Here is Chandler. He is currently working as a tech lead at an internet startup. He is interviewing for the role of Staff Software Engineer at Facebook.&lt;/p&gt;

&lt;p&gt;🎧 Listen to his response to this question in this &lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=287s"&gt;YouTube Video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-case-never-worked-under-pressure"&gt;
  &lt;/a&gt;
  Special Case: Never Worked Under Pressure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJXo4NCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfdkozfzw58zwu7t2oim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJXo4NCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfdkozfzw58zwu7t2oim.png" alt="Special Case: Never Worked Under Pressure" title="Special Case: Never Worked Under Pressure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may be the case that you never had to work in a challenging and stressful situation at your workplace. New Grads and entry-level software engineers may fall under this category.&lt;/p&gt;

&lt;p&gt;If you are in such a situation, do not end your answer by simply saying that you have never worked under pressure. Instead, try to use a real experience from your college or day-to-day life. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling multiple courses and projects, dividing the time between your part-time job and coursework, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will help the interviewer evaluate you on the following attributes mentioned earlier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How you manage your time,&lt;/li&gt;
&lt;li&gt;Stay calm in stressful situations,&lt;/li&gt;
&lt;li&gt;Exercise judgment,&lt;/li&gt;
&lt;li&gt;Communicate, and&lt;/li&gt;
&lt;li&gt;Shift gears when needed.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#preparation-material"&gt;
  &lt;/a&gt;
  Preparation Material
&lt;/h1&gt;

&lt;p&gt;Learn more about the Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, and Sample Answers (Examples) to effectively prepare and answer these top questions asked in the Behavioral Interviews at Facebook. Certain special cases are also discussed which are usually faced by the candidates during these interviews.&lt;/p&gt;

&lt;p&gt;⬇️ &lt;a href="https://www.buymeacoffee.com/interviewsage/e/40678"&gt;Detailed Notes on Top Facebook Behavioral Interview Questions - Part 2&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-behavioral-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook Behavioral Interview
&lt;/h1&gt;

&lt;p&gt;If you have not read our first article on Top Facebook Behavioral Interview Questions, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-behavioral-interview-questions-part-1-2a0o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;✅ Top Facebook Behavioral Interview Questions (Part 1) | Facebook Jedi Interview Round 🔥&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage ・ May 15 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-system-design-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook System Design Interview
&lt;/h1&gt;

&lt;p&gt;In case if you have not read our series on Cracking the Facebook System Design Interview, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-system-design-interview-questions-31np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Facebook System Design Interview Questions (Part 1) | Facebook Pirate Interview Round&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage ・ Jan 4 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h1&gt;

&lt;p&gt;✅ &lt;a href="https://bit.ly/Educative-Unlimited"&gt;Educative.io Unlimited Plan [💰 10% off for first 100 users]&lt;/a&gt;&lt;br&gt;
✅ &lt;a href="https://bit.ly/Try-Exponent"&gt;TryExponent.com Membership [💰 Limited Time 10% offer]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👩‍💻 &lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=KQZl"&gt;Best System Design Interview Course&lt;/a&gt;&lt;br&gt;
🚀 &lt;a href="https://bit.ly/SWE-Interview-Course"&gt;Complete SWE Interview Course [💰 Limited Time 10% offer]&lt;/a&gt;&lt;br&gt;
🙋‍♀️ &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Behavioral Interview Guide [💰 Special Discount]&lt;/a&gt;&lt;br&gt;
📚 &lt;a href="https://smarturl.it/InterviewPrepBook"&gt;Recommended Interview Preparation Book (on Amazon)&lt;/a&gt;&lt;/p&gt;




&lt;center&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--121vjxPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2l00b1bt3nl8fdfb0nn.png" alt="Buy Me a Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ Buy us a Coffee at &lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;BuyMeACoffee.com/InterviewSage&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;




&lt;center&gt;

&lt;p&gt;To stay updated about new posts, Subscribe &amp;amp; Follow Us!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://www.youtube.com/TheInterviewSage?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRCmz2gQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uqifmelnuenxiik8pwx.png" alt="Subscribe to our YouTube channel" title="Subscribe to our YouTube channel"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.instagram.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OADCpudp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovhcxjpg0v5z2tidtydk.png" alt="Follow us on Instagram" title="Follow us on Instagram"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.facebook.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zohyoISu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyy3kyo44tmv645vvrqw.png" alt="Like &amp;amp; Follow us on Facebook" title="Like &amp;amp; Follow us on Facebook"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="http://twitter.com/intent/follow?source=followbutton&amp;amp;variant=1.0&amp;amp;screen_name=InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoV_1sI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwcu44k00a0a8hpfbmf.png" alt="Follow us on Twitter" title="Follow us on Twitter"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.linkedin.com/in/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QaEiEG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcrwzwc9tnv0q3zmkih8.png" alt="Follow &amp;amp; Connect on LinkedIn" title="Follow &amp;amp; Connect on LinkedIn"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;/center&gt;



&lt;blockquote&gt;
&lt;p&gt;This article is part of the series on Behavioral Interviews at Facebook. So, follow us to get notified when our next article in this series is published. Thanks for reading! &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__553012"&gt;
  
    .ltag__user__id__553012 .follow-action-button {
      background-color: #3b49df !important;
      color: #f9fafa !important;
      border-color: #3b49df !important;
    }
  
    &lt;a href="/theinterviewsage" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/theinterviewsage"&gt;The Interview Sage&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/theinterviewsage"&gt;Our goal is to create Software Eng Interview tutorials to help you get a job at companies like Facebook, Google, Apple, &amp;amp; Amazon. We will deep-dive into System Design, Coding, &amp;amp; Behavioral interviews.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;📸 Some images used are from free&lt;span&gt;pik&lt;/span&gt;.com: Freepik, pch.vector, vectorjuice, pikisuperstar, raw&lt;span&gt;pixel&lt;/span&gt;.com, slidesgo, stories, Upklyak, jcomp, macrovector_official, syarifahbrit, redgreystock&lt;/p&gt;

&lt;p&gt;&lt;a href="https://disclosureanddisclaimer.theinterviewsage.com/"&gt;Full Disclosure &amp;amp; Disclaimer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>How to make Rock Paper Scissors in Javascript </title>
      <author>Abhi-Develops</author>
      <pubDate>Sun, 10 Oct 2021 20:31:19 +0000</pubDate>
      <link>https://dev.to/abhidevelops/how-to-make-rock-paper-scissors-in-javascript-47ef</link>
      <guid>https://dev.to/abhidevelops/how-to-make-rock-paper-scissors-in-javascript-47ef</guid>
      <description>&lt;p&gt;Hi Everyone! &lt;br&gt;
In this post, I will show you how to make Rock Paper Scissors in HTML, CSS, and Javascript. Follow me for more projects. Let's get started!&lt;/p&gt;

&lt;p&gt;This will be the basic HTML User Interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Rock Paper Scissor Game&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--Fontawesome--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--Google Font--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"scores"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Computer : 
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"computer_score"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                You :
                &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"user_score"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"weapons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"checker('rock')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"far fa-hand-rock"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"checker('paper')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"far fa-hand-paper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"checker('scissor')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"far fa-hand-scissors"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"details"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"user_choice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comp_choice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--linking the javascript file--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's style it to make it look better:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="m"&gt;135deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#ffcf1b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#ff8b1b&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.scores&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.weapons&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.weapons&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffd51b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.details&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.scores&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;.details&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#result&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#user_choice&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#computer_choice&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, let's add the Javascript to make it functional:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;computer_score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;user_score&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result_ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;choices_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rock&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rock&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;draw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scissor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;win&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scissor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rock&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scissor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;draw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;win&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rock&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;win&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scissor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;draw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;paper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scissor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comp_choice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="s2"&gt;` Computer choose &amp;lt;span&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/span&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_choice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="s2"&gt;` You choose &amp;lt;span&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/span&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;computer_choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choices_object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;computer_choice&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;win&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;result_ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color: #cefdce; color: #689f38&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;result_ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOU WIN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;user_score&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;result_ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color: #ffdde0; color: #d32f2f&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;result_ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOU LOSE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;computer_score&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;result_ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color: #e5e5e5; color: #808080&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;result_ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DRAW&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;computer_score&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computer_score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_score&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user_score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! You have now created Rock Paper Scissors in HTML, CSS, and Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abhinav-gupta-w3.w3spaces.com/rock_paper.html"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Abhi-Develops/rock-paper-scissors"&gt;Full Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rockpaperscissors</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Spring Boot CRUD - Mongo DB + Docker</title>
      <author>Atharva Siddhabhatti</author>
      <pubDate>Sun, 10 Oct 2021 20:23:46 +0000</pubDate>
      <link>https://dev.to/atharvasiddhabhatti/spring-boot-crud-mongo-db-docker-jop</link>
      <guid>https://dev.to/atharvasiddhabhatti/spring-boot-crud-mongo-db-docker-jop</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vVi-FP-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igvgik6fdo6f72dkz6aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVi-FP-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igvgik6fdo6f72dkz6aw.png" alt="Alt Mongo DB + Docker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CRUD Operations using Spring Boot and MYSQL Database using docker-compose.&lt;/p&gt;

&lt;p&gt;Docker is required to be install on the machine. Install Docker from &lt;a href="https://docs.docker.com/engine/install/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;1) Clone the Repo from here &lt;a href="https://github.com/atharvasiddhabhatti/Springboot-Playground/tree/main/springboot-demo-mongodb-crud"&gt;Click Here&lt;/a&gt; &amp;amp; run the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Endpoint&lt;/th&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Body&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://localhost:8080/products"&gt;http://localhost:8080/products&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Fetch all products&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://localhost:8080/products/%7Bid%7D"&gt;http://localhost:8080/products/{id}&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Find Product by Id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://localhost:8080/products"&gt;http://localhost:8080/products&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;{ "id":"1", "name":"Mobile", "Description":"Samsung Mobile." }&lt;/td&gt;
&lt;td&gt;To Add product to the DB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://localhost:8080/products"&gt;http://localhost:8080/products&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;{ "id":"1", "name":"Apple Iphone", "Description":"Apple" }&lt;/td&gt;
&lt;td&gt;To update existing record.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://localhost:8080/products/%7Bid%7D"&gt;http://localhost:8080/products/{id}&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Delete the record be Id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#productrepositoryjava"&gt;
  &lt;/a&gt;
  ProductRepository.java
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Repository&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ProductRepository&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;MongoRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#applicationproperties"&gt;
  &lt;/a&gt;
  application.properties
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mongo_db&lt;/span&gt;
&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;27017&lt;/span&gt;
&lt;span class="n"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mydb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercomposeyml"&gt;
  &lt;/a&gt;
  docker-compose.yml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="nl"&gt;version:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;

&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="cp"&gt;#service 1: definition of mongo database
&lt;/span&gt;    &lt;span class="n"&gt;mongo_db&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mongo&lt;/span&gt;
      &lt;span class="n"&gt;container_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mongoDB&lt;/span&gt;  
      &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
      &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27017&lt;/span&gt;


    &lt;span class="cp"&gt;#service 2: definition of your spring-boot app 
&lt;/span&gt;    &lt;span class="n"&gt;productservice&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                        &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;               &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;dockerfile&lt;/span&gt; &lt;span class="n"&gt;executes&lt;/span&gt;
      &lt;span class="n"&gt;container_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;
      &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;                          &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dockerfile&lt;/span&gt;              &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
      &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"8080:8080"&lt;/span&gt;                       &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;containter&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;
      &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;  
      &lt;span class="n"&gt;depends_on&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                           &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mongo_db&lt;/span&gt;                                &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;earlier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  Dockerfile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;openjdk&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mysqldoc&lt;/span&gt;
&lt;span class="n"&gt;EXPOSE&lt;/span&gt; &lt;span class="mi"&gt;8084&lt;/span&gt;
&lt;span class="n"&gt;WORKDIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="cp"&gt;# Copy maven executable to the image
&lt;/span&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="n"&gt;mvnw&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mvn&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mvn&lt;/span&gt;

&lt;span class="cp"&gt;# Copy the pom.xml file
&lt;/span&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="n"&gt;pom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="cp"&gt;# Copy the project source
&lt;/span&gt;&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;
&lt;span class="n"&gt;COPY&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;

&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mi"&gt;755&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mvnw&lt;/span&gt;

&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mvnw&lt;/span&gt; &lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;offline&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;

&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mvnw&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DskipTests&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;al&lt;/span&gt;
&lt;span class="n"&gt;ENTRYPOINT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"java"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-jar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"target/springboot-demo-mysql-0.0.1-SNAPSHOT.jar"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>docker</category>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Analysis of Building a Web Component</title>
      <author>Nick Alico</author>
      <pubDate>Sun, 10 Oct 2021 19:39:42 +0000</pubDate>
      <link>https://dev.to/nro337/analysis-of-building-a-web-component-1nbe</link>
      <guid>https://dev.to/nro337/analysis-of-building-a-web-component-1nbe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#design-build-extend"&gt;
  &lt;/a&gt;
  Design, Build, Extend
&lt;/h2&gt;

&lt;p&gt;I like to approach the idea of designing and building a web component similar to how I have been trained to approach UX Design: following the Design Thinking Method. For those of you who are unfamiliar, the Design Thinking Method is a design approach which incentivises considering all potential aspects and perspectives of design, and applies an iterative approach to discover design components, user requirements, and refine implementation decisions. The 5 part system consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Empathize&lt;/li&gt;
&lt;li&gt;Define&lt;/li&gt;
&lt;li&gt;Ideate&lt;/li&gt;
&lt;li&gt;Prototype&lt;/li&gt;
&lt;li&gt;Test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Courtesy of the Hasso-Plattner Institute of Design at Stanford&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's break down how these 5 steps dictated my considerations and approach when building a web component and developing on its API.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Empathize&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We do this innately, but in the form of web components it's important to think about the type of component you will be developing and the people that will be using it. What is the background of the people who will likely use the component? Are there any usability and/or accessibility considerations that you will need to prioritize to meet the needs of your stakeholders? The goal is to try to paint a representative picture of the types of people who could use your component, and the types of ways they may try to use it. What if you component was used in a fashion or application other than what it was intended for? Would it be able to support that user's or that developer's intentions? Becasue web components are meant to be reused and extensible, it is important to keep these concepts in mind so that you avoid developing such a restricted component that it impossible to have it apply to other needs and use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defining the web component and its API can be one of the most challenging parts of building a component as it is one of the most crucial parts of the entire development process. If your empathize phase has clarified a base need or functionality, this will likely indicate that your need is aligned with a base behavior that is similar to a simple HTML element or well-known component that exists on the web today. For my first web component project, I knew I was building a CTA button which immediately meant I would need to include some type of &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to complete the click and action-based events that are performed when a user clicks on a CTA button. You are then able to think about the bounds of your component. What use cases do you want to design for and support natively, and what considerations are not as crucial to your component? Maybe responsiveness for an array of different devices is crucial, but the level of animation or "flashiness" is not a huge concern because you are aiming for a minimalistic component. Situating this stance will allow you to better identify where to focus your efforts and how to plan your building process.
&lt;/li&gt;
&lt;li&gt;It is at this stage, once you have defined the bounds of your component, that you also need to consider the component's and associated element's APIs. What are the states that you need to design and implement for your component? What happens when you hover over it, or click on a button or icon? What happens when you use your keyboard to navigate to it? Is that behavior consistent with your hover behavior? Considering the states of your component will give you a better idea of the breadth required in building out the properties of you components. See the next section "Ideate" for further details on this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ideate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is one of my favorite parts of designing and developing software, the ability to have free reign over iterations of the design and structure of a project or component. The goal of ideating is to creatively and iteratively enact your plan for your component, and to specifically come up with variations and styles that you think would serve as interesting approachng to your component design. As mentioned above, the properties of you component come into play between the define and ideate stages. Think about the elements of your component, considering how the could change both with a change in your component's state or to meet the design needs of another developer. For the CTA button I worked on, my team and I considered aspects such as the button icon, title, whether the button was disabled, and theme properties such as dark or high contrast mode. Using these properties for the criteria to inform how you should develop CSS variations for you component will allow you to easily "reflect" certain properties within each implementation of your component. You can think of it almost as turning on or off a lightswitch: All a developer has to do is pass a value to that property on the component and they will be able to leverage a different design or theme. The reward of ideation emerges in the implementing and use phase, but it is a crucial step in driving the flexibility and use case support of your web component.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prototype&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here is the step where you are actually building out base versions of your component in an iterative fashion. At this period of the building process, it is important to understand that there are really no "bad" approaches: this is the point where you want to build elements into your component and style them in diverse ways from what you may initially think to be the correct approach. For example, I started out my CTA button using no animations because I thought it would be distracting from the button's functioning itself. However, our team ended up implmenting a fade-to-transparent transition on our button background that looks very smooth and is still fully accessible. Try using CSS variable to make this process easier on yourself, this way you can change the text color or font in one location in code, and see this change persist throughout your entire component. This is the best way to approach using themes, as you can simply overwrite the traditional component style with a themed style simply by checking the value of a reflected property on the component in HTML. Prototyping is meant for quick and dirty development in the beginning, and wil turn into a refinement process as you develop. This is done on purpose, and allows you to focus on more intricate logic and stylistic edge cases as your prototypes become more refined and situated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our final and often most disliked component of software development: testing. Testing is so crucial for any web component, as they are specifically designed to be reusable and adaptive components of code to allow for a wide array of applications and use cases. Testing for responsive design, accessibility, state management, navicability, etc. can be a nightmare as your components become more complex and add more elements into them. This is why I highly recommend using CSS variables for quick design manipulation, as well as the use of Storybook. Storybook functions as a customizable design library which easily lets developers implement and test different states, formats, and styles of their component side-by-side in one compact demo platform. It acts more as a visual testing platform, but allows for easy iteration and design management in later steps of the component development process.&lt;/li&gt;
&lt;li&gt;It is also crucial to write programming logic tests yourself as well. I won't go into this much, but it is crucial to understand whether certain content or data types will impact the functionality of your component. Most of this testing comes down to logic handling and edge-case recognition to see long-term benefits, but writing tests for your components will assure you are supporting a consistent experience across different states and use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#component-breakdown"&gt;
  &lt;/a&gt;
  Component Breakdown
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Naturally, your component will need to be broken down into its constituent parts based on the modularity and flexibility that your design requirements specify, as well as based on the actual HTML structure of your component. The more complex your component, and the higher number of nested HTML tags, the all the more crucial it is to scaffold out a clear structure of how each element behaves. For example, my first web component involved designing a CTA button. This button consisted of a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag with an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag wrapped around it. The purpose of wrapping the button instead of using only a button tag was to allow the CTA button to function as a button that acts more as a hyperlink than a traditional button. The use case dictated that the button needed to open a completely new URL in a new browser tab, so it made more sense to nest the button tag so that the href used for the hyperlink could be attached across the entire button as well as any other elements that needed to be added to the button. If you wanted to add other clickable elements to the button in the future, it is as simple as nesting those elements at the same level as the button inside the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;The point of this example is to show that the way you structure and nest elements plays a huge role in the complexity of your CSS and the readability of your code. Poor element structuring can lead to messy CSS with dense logic to control different states, whereas a structured component like my CTA button allows for very simple implementation and customization as necessary by anyone intending to use the component.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;Another component I am now working on consists of building a card web component. What is unique about the card compared to the initial button component I worked on is the fact that a card is a container of smaller elements. These smaller elements include a banner, content body, and an extensible icon. Our team was provided with a starter component that includes a basic scaffold of a card containing text and images, and demos a few different examples of the card's scaffolding to depict how the use of the &lt;em&gt;type&lt;/em&gt; keyword can allow for matching of card CSS styles to a specific card tag itself. The component is expected to use the button I have assisted in developing previously as a devDependency to demo interactivity of the card component. The component will utilize LitElement properties and Lifecycle functions to keep track of updating the behavior of the card based on each state and property value.&lt;/li&gt;
&lt;li&gt;For this component, it will be crucial to consider how each of these element's designs and dimensions will be leveraged together to allow for a cohesive stylistic experience when interacting with the card. For example, accessibility when users navigate with a keyboard through each of the elements is paramount, as we will need to be sure that a logical tab path allows for interaction with any actionable elements on the card. Another example would be the behavior of the card when a user clicks an item within the bounds of the component. We play to support a sliding card with hidden content behind the front pane, so it will be important in our scaffolding implementation to assure that selection of content inside the card will bubble up content and focus to the front pane of the card after click event occurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1alcVf57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8hqppzwshsv4f5ui3zu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1alcVf57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8hqppzwshsv4f5ui3zu.png" alt="Basic Card Scaffolding Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#provided-card-example"&gt;
  &lt;/a&gt;
  &lt;em&gt;Provided Card Example&lt;/em&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#expected-difficulties"&gt;
  &lt;/a&gt;
  Expected Difficulties
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Building web components is hard: there I said it. Handling the vast number of states, properties, design edge cases, logic edge cases, and behaviors while supporting the extensibility that you desire for your component means much of your time will be spent writing specific CSS and monitoring how you pass properties into your component. One of the greatest challenges I faced was structuring my CSS in a way that targeted specific states without overwriting other states or thematic behavior.  If you have a poorly scaffolded component in the define and ideate stages, you will really struggle to reflect the visual aspects you want to have on your component behave the way it should in a readable manner. &lt;/li&gt;
&lt;li&gt;Another difficulty I faced was with deciding when my prototype was "complete". I would argue that a web component is never really complete, perhaps by design, but it can be hard to know when it is ready to ship as a usable component. I found myself considering more complex state logic and subsequent stylistic behavior of my CSS button, but realized these ideas were more than I needed to support given the purpose of the CTA button in the first place. This doesn't mean you shouldn't extend and update your components, or at least build in support for this customization, but that you should take this into account during ideation so you minimize the risk of scope creep.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reflection-on-my-first-experience"&gt;
  &lt;/a&gt;
  Reflection on my First Experience
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Overall, my first experience developing a web component was an incredibly rewarding learning experience. I didn't really realize the complexity of considerations that went into designing something as "simple" as a button, so it gives me a great deal of respect for the designers and developers responsible for building our entire design systems and libraries at larger companies. These guides can become thousands of components and states as use cases become more precise, so having the forethought to look into how to ideate early while keeping a component's scalability in mind was a really valuable perspective to adopt as I continue into my professional career. It really comes down to motivation and consistency. The future of the web is component-based, and I think it is a highly valuable skill to bring component knowledge to your place of work as a front-end engineer. The modularity of web components really is the future of the web, and I think this will allow for a more simplistic customization process in the future of web design.&lt;/li&gt;
&lt;li&gt;It became easier for me to understand how components can relate to larger components within a webpage, and how explicit component-based design can make it very easy to support additional requirements and use cases within a system later on. Compared to a "one-and-done" UI development approach, web components make this experience of designing for the future night-and-day.&lt;/li&gt;
&lt;li&gt;Finally, I recommend working with partners when you are developing a component or set of components. You are really limited to your own mental model, which greatly restricts the use cases and value you may place on certain development decisions of a web component. Collaborating with others lets you test ideas more quickly, promotes your group to experiment and make mistakes, and will ultimately make you aware of more features and nuances of the platform you are using, whether that be LitElement or a JS framework such as React or Vue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please take a look into building your first web component! It's a fun and rewarding experience that creates a more customizable and inclusive internet for all.&lt;/p&gt;

&lt;p&gt;Here's my group's button if you're interested: &lt;a href="https://www.npmjs.com/package/@table-in-the-corner/invisi-button"&gt;https://www.npmjs.com/package/@table-in-the-corner/invisi-button&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webcomponents</category>
      <category>lit</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
