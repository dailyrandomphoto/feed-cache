<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Promises 101</title>
      <author>Dalibor Belic</author>
      <pubDate>Sun, 25 Apr 2021 10:44:06 +0000</pubDate>
      <link>https://dev.to/daliboru/javascript-promises-101-3h56</link>
      <guid>https://dev.to/daliboru/javascript-promises-101-3h56</guid>
      <description>&lt;p&gt;Hey there! Are you new to JavaScript? Well, this post is right for you! Mastering promises is a must if you want to become a JavaScript developer!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Promise represents a value that's unknown now that may become known in the future; in other words an asynchronous value.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N0lGXjyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0lGXjyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" alt="alt text" title="promise"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Promise is always in one of these states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pending: initial state, neither fulfilled nor rejected.&lt;/li&gt;
&lt;li&gt;fulfilled: meaning that the operation was completed successfully.&lt;/li&gt;
&lt;li&gt;rejected: meaning that the operation failed.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Now, let's imagine you're hungry (I am now actually) and you're about to order food using a delivery app. You open the app. You find what you want and click order. At that moment, the restaurant/app makes a &lt;code&gt;Promise&lt;/code&gt; that they will deliver you food. While you're waiting, the delivery is &lt;code&gt;pending&lt;/code&gt;. In the future, if everything goes according to plan the restaurant/app will &lt;code&gt;resolve&lt;/code&gt; to deliver you food at which point your order has been &lt;code&gt;fulfilled&lt;/code&gt;. But in some cases, the restaurant/app might &lt;code&gt;reject&lt;/code&gt; your order in which case you'll have to order something else. Either way, the original request is finally settled.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-technical-explanation"&gt;
  &lt;/a&gt;
  More technical explanation
&lt;/h3&gt;

&lt;p&gt;Now, let's explain it in a more technical language. As a developer, you create a Promise to represent an asynchronous value. But, what you'll actually do more often is consuming promises to use the result of an asynchronous operation in your code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-create-a-promise"&gt;
  &lt;/a&gt;
  Let's create a Promise.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                               &lt;span class="c1"&gt;//‚òùÔ∏è*&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delivered&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;food delivered ü•ò&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// resolve fulfills promise with passed value&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;you're still starving... üò≠&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// reject triggers when operation fails&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*üëâ executor, f-on that resolves a value or rejects (error)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#now-lets-consume-the-promise"&gt;
  &lt;/a&gt;
  Now let's consume the Promise.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;food&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// food delivered ü•ò&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// you're still starving... üò≠&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all settled!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;then&lt;/code&gt; is a function that handles fulfilment. &lt;code&gt;catch&lt;/code&gt; handles rejection; catches the error. And finally, &lt;code&gt;finally&lt;/code&gt; is there if you want to run some code no matter what.&lt;/p&gt;




&lt;p&gt;I hope this helped you get the basic knowledge, an overview of JavaScript Promises :) &lt;/p&gt;

&lt;p&gt;As always, any feedback is greatly appreciated!&lt;/p&gt;

&lt;p&gt;Have a great one,&lt;br&gt;
Dalibor&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>LINQ: Beware of deferred execution</title>
      <author>Sam Walpole</author>
      <pubDate>Sun, 25 Apr 2021 10:30:00 +0000</pubDate>
      <link>https://dev.to/dr_sam_walpole/linq-beware-of-deferred-execution-59db</link>
      <guid>https://dev.to/dr_sam_walpole/linq-beware-of-deferred-execution-59db</guid>
      <description>&lt;p&gt;If you've spent much time around C# and .NET, it's likely that you will have come across &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/"&gt;LINQ (Language-Integrated Query)&lt;/a&gt;, which allows you to use a range of powerful querying capabilities directly in the C# language.&lt;/p&gt;

&lt;p&gt;The example below demonstrate a couple of common features of LINQ (note that I am using the extension method syntax rather than LINQ expressions). In the example, we have a list of people and want to obtain a list of names of the adults in that list. We will then iterate over those names twice (this will be useful to demonstrate the differences between immediate and deferred execution). &lt;/p&gt;

&lt;p&gt;Using LINQ, we can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Filter by age using &lt;code&gt;Where&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Map from a Person object to the name string using &lt;code&gt;Select&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Evaluate the query to a list using &lt;code&gt;ToList&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Sam"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Suzie"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Harry"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Filtering by age..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Writeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Writeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* output
Filtering by age
Filltering by age
Filtering by age
Sam
Harry
Sam
Harry
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that in the above example, we explicitly convert the query to a list. This immediately executes the query to give a new list containing only the adult names, which we can then iterate over.&lt;/p&gt;

&lt;p&gt;So what happens if we leave off the &lt;code&gt;ToList&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Filtering by age..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Writeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Writeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* output
Filtering by age
Sam
Filtering by age
Filtering by age
Harry
Filtering by age
Sam
Filtering by age
Filtering by age
Harry
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the output looks quite different. Instead of doing all the filtering first, then iterating over the adult names, the filtering for each item is now happening immediately before we evaluate that item. Importantly, the filtering is also happening every time we iterate over the items. This is known as deferred execution, since we wait until we actually need the values to evaluate the query.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#benefits-of-deferred-execution"&gt;
  &lt;/a&gt;
  Benefits of Deferred Execution
&lt;/h1&gt;

&lt;p&gt;It looks like deferred execution is the default behaviour of LINQ, unless you explicitly tell it to evaluate immediately (using ToList, ToDictionary etc.). So there must be some benefit to doing this, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-better-performance"&gt;
  &lt;/a&gt;
  1. Better Performance
&lt;/h2&gt;

&lt;p&gt;In most cases it is expected that deferred execution will result in better performance, since you don't have to execute the query on the whole data set at once. Instead, you perform the query on one item at a time as you are already iterating over it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-query-construction"&gt;
  &lt;/a&gt;
  2. Query Construction
&lt;/h2&gt;

&lt;p&gt;Since the query does not need to be immediately executed, you can build it up in several steps, perhaps passing through additional conditional logic. This gives you additional power to create more complex queries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;onlyAdults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AsEnumerable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onlyAdults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// only add this filter when onlyAdults is true&lt;/span&gt;
        &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-always-revaluated"&gt;
  &lt;/a&gt;
  3. Always revaluated
&lt;/h2&gt;

&lt;p&gt;Since the query is always revaluated on every enumeration, you can add/remove/change elements of you collection after the query has been constructed and the query will know about these changes. In this way, you know that you are always iterating over the most up to date data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Sam"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Suzie"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Harry"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Sally"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adultNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* output
Sam
Harry
Sam
Harry
Sally
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.amazon.co.uk/LINQ-Pocket-Reference-OReilly/dp/0596519249?dchild=1&amp;amp;keywords=linq&amp;amp;qid=1619346295&amp;amp;sr=8-3&amp;amp;linkCode=li2&amp;amp;tag=samwalpole-21&amp;amp;linkId=1fcd555f841d025e10f9ccc6b650dbc0&amp;amp;language=en_GB&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0596519249&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=samwalpole-21&amp;amp;language=en_GB"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcJ9vvCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3D0596519249" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcJ9vvCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3D0596519249" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-pitfalls-of-deferred-execution"&gt;
  &lt;/a&gt;
  The pitfalls of deferred execution
&lt;/h1&gt;

&lt;p&gt;Despite so far singing the praises of LINQs deferred execution, this post was inspired by some of the issues I've been experiencing using it. One of it's benefits is also a pitfall if you do not take enough care when writing your code - the query is always revaluated.&lt;/p&gt;

&lt;p&gt;Although deferred execution is seen as a performance benefit generally, there can be cases where it can actually dramatically slow down your application if you're not careful. Any time that you know you will need to repeated iterate over the same collection numerous times (for example a nested for/foreach loop), make sure you call to list first. Otherwise, you will be evaluating the whole collection every single time, which will dramatically reduce performance. This is especially true if the source collection is particularly large since, even if your query does a lot of filtering, the query will be applied every time to the whole source collection.&lt;/p&gt;

&lt;p&gt;The final pitfall to mention is using &lt;code&gt;Select&lt;/code&gt; to run a collection of tasks. I've seen arguments to say that this is something that you shouldn't do at all, but I've seen it enough in codebases to know that it's something that people do do and something you should be aware of. Imagine the below scenario:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;listOfIds&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listOfIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WhenAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the GetAsync method is actually executed twice for every ID, once when it is first declared, and a second time when the query is evaluated using &lt;code&gt;ToList&lt;/code&gt;. Not only does this have a massive impact on performance by performing expensive operations multiple times, but also, since the task is re-executed, its not guaranteed to be completed when you actually come to evaluate it. As you might imagine, it is also particularly dangerous if the task you are running is actually a create or update operation (yes I have seen this too). To do the get safely, you need to immediately evaluate the query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var tasks = listOfIds.Select(id =&amp;gt; _repository.GetAsync(id)).ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article I have introduced deferred execution in the context of .NETs LINQ. I have shown some of its features and why it can be beneficial compared to immediate execution. Finally, I have discussed some common pitfalls to looks out for when using LINQ and deffered execution.&lt;/p&gt;

&lt;p&gt;I post mostly about full stack .NET and Vue web development. To make sure that you don't miss out on any posts, please follow this blog and &lt;a href="https://samwalpole.com"&gt;subscribe to my newsletter&lt;/a&gt;. If you found this post helpful, please like it and share it. You can also find me on &lt;a href="https://twitter.com/dr_sam_walpole"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>dotnetcore</category>
      <category>csharp</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Most Famous Coding Interview Question</title>
      <author>Apoorv Tyagi</author>
      <pubDate>Sun, 25 Apr 2021 10:21:45 +0000</pubDate>
      <link>https://dev.to/apoorvtyagi/the-most-famous-coding-interview-question-4m1j</link>
      <guid>https://dev.to/apoorvtyagi/the-most-famous-coding-interview-question-4m1j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-the-most-famous-interview-question"&gt;
  &lt;/a&gt;
  What is the most famous interview question?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;FizzBuzz&lt;/strong&gt; is the most popular coding problem, and perhaps also one of the easiest.&lt;/p&gt;

&lt;p&gt;For those of you who don't know, here's the problem statement :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Write a short program that prints each number from 1 to 100 on a new line. For each multiple of 3, print "Fizz" instead of the number. For each multiple of 5, print "Buzz" instead of the number. For numbers that are multiples of both 3 and 5, print "FizzBuzz" instead of the number&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb3hi81g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618742745312/l5np6e9FD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb3hi81g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618742745312/l5np6e9FD.png" alt="1\_Vv4VHvLEvo9NEFxcn80Wfw.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems easy right?, BUT &lt;strong&gt;the way you approach this reveals a lot about your programming skills&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For most engineers, like myself, FizzBuzz is among the first coding problem that we solved, but why is it still used as an interview problem even in companies like Google?&lt;/p&gt;

&lt;p&gt;Answer: &lt;strong&gt;Solving FizzBuzz shows interviewers much more than your programming skills&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your solution to this easy problem determines if you are just a code monkey or an experienced engineer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;According to &lt;a href="https://wiki.c2.com/?FizzBuzzTest"&gt;wiki.c2.com&lt;/a&gt;, the ‚ÄúFizz-Buzz test‚Äù is an interview question designed to help filter out the 99.5% of programming job candidates who can‚Äôt seem to program their way out of a wet paper bag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It requires you to understand the problem, apply logic to come up with a solution, and then translate this into code.&lt;/p&gt;

&lt;p&gt;Sometimes, even the simplest problem can become tricky. That is the case for the FizzBuzz interview question.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h1&gt;

&lt;p&gt;The idea of these simple questions is to check your programming style not to check the complexity or anything else.&lt;/p&gt;

&lt;p&gt;Like every other coding problem, the solution for this particular problem are many, but not all are considered as good and optimal solutions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also don't think about complexity since you're only looping from 1 to 100&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So what's the best possible answer?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before moving any further I want you to show the possible solutions I got when I asked this question on &lt;a href="https://twitter.com/apoorv__tyagi/status/1308114075583311872"&gt;Twitter&lt;/a&gt; a few months ago üîΩ&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5R3F_Knf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1355898757078986753/lFZgYe5z_normal.jpg" alt="Riiiiiii‚ú® profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Riiiiiii‚ú®
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @craazyplatelady
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/apoorv__tyagi"&gt;@apoorv__tyagi&lt;/a&gt; If( n%3==0 and n%5==0):&lt;br&gt;Print (fizzbuzz)&lt;br&gt;Elif(n%3==0):&lt;br&gt;Print(fizz)&lt;br&gt;Elif(n%5==0):&lt;br&gt;Print(buzz)&lt;br&gt;&lt;br&gt;(Idk what solution makes most sense, curious to find out in the comments or from you)
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:26 AM - 22 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1308276403821977600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1308276403821977600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1308276403821977600" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TvbxKSJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1252590041785790465/CLpaYNTK_normal.jpg" alt="Tanvesh Sarve profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tanvesh Sarve
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/sarve___tanvesh"&gt;@sarve___tanvesh&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/apoorv__tyagi"&gt;@apoorv__tyagi&lt;/a&gt; If divisible by 3 then print "Fizz", after that if divisible by 5 then print "____Buzz" ( _ means a space here). If the number was divisible by 5 and 3, then both the conditions will be true, and it will print, "FizzBuzz". &lt;br&gt;&lt;br&gt;Typing all of this on phone was a nightmare btw.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:25 PM - 21 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1308140380244684800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1308140380244684800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1308140380244684800" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UKF2Cky6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1271452426705547264/qNletcga_normal.jpg" alt="Abdel P√©rez profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Abdel P√©rez
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @abdelperez11
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/apoorv__tyagi"&gt;@apoorv__tyagi&lt;/a&gt; JS:&lt;br&gt;return `${n % 3 === 0 ? 'Fizz' : '' }${n % 5 === 0 ? 'Buzz' : ''}`
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:32 AM - 22 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1308308070083239942" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1308308070083239942" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1308308070083239942" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6t6DEoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/857617800390733824/Rn1Oqgv3_normal.jpg" alt="Harekrishna Jena profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Harekrishna Jena
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dev_hkjena
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/apoorv__tyagi"&gt;@apoorv__tyagi&lt;/a&gt; let print = console.log&lt;br&gt;for(let i=1;i&amp;lt;101;i++){&lt;br&gt;  i%15==0 ? print("FizzBuzz") : i%3==0 ? print("Fizz") : &lt;br&gt;  i%5==0 ? print("Buzz") : print(i)&lt;br&gt;}
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:34 AM - 22 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1308353973569552384" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1308353973569552384" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1308353973569552384" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;strong&gt;All solutions I got were giving the expected result. Only difference was the way they were written&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, Here's My approachüëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EajeQvP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618744589267/jV4nb3MU1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EajeQvP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618744589267/jV4nb3MU1.png" alt="1\_6oYdTqkTTk-cg3Z_Q02hIg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most intuitive solution which comes to mind is this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for var in range(1,101):
    if i%3==0 and i%5==0:
        print('FizzBuzz')
    elif i%3==0:
        print('Fizz')
    elif i%5==0:
        print('Buzz')
    else:
        print(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;But can you find how can this be improved??&lt;/p&gt;

&lt;p&gt;Let's suppose the interviewer says that instead of 5 print buzz when no. is divisible by 7 then you need to go &amp;amp; change all 5s in your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a small code like this, it doesn't seem a big challenge but for a large codebase you need to take care of the changes that might come&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While coding you should always think about what might change later &amp;amp; how will your code adapt to it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Going back and change multiple lines of code just to fit another condition is not a good practice.&lt;/p&gt;

&lt;p&gt;So what we can do here is tweak our code a little like this :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for var in range(1,101):
    output=""
    if i%3==0:
        output+='Fizz'
    if i%5==0:
        output+='Buzz'

    print(var if output=="" else output)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;OR even simpler:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in range(1,101):
    fizz = 'Fizz' if i%3==0 else ''
    buzz = 'Buzz' if i%5==0 else ''
    print(f'{fizz}{buzz}' or i)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;em&gt;In this, we are storing the final String value in a variable called output.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If the output is empty it means no condition passed above hence just print the value of &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This looks more clean/readable &amp;amp; is way better for us to change if an extra condition comes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now even if we have to change the condition from 5 to 7 we just need to go to the single line where 5 is &amp;amp; alter it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Also if another condition comes, For instance, if we add a new condition for 2 (Let's suppose when the number is multiple of 2, we will print 'Tizz' and will print 'TizzFizzBuzz' when the number is divisible by 2,3 and 5). We will just add it without affecting our code's cleanliness &amp;amp; readability  -&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for variable in range(1,101):
    output=""
   if i%2==0:  #Adding new condition
        output+='Tizz'
    if i%3==0:
        output+='Fizz'
    if i%5==0:
        output+='Buzz'

    print(variable if output=="" else output)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There's always room for improvements and we can further go into improving our code since currently there are so many &lt;code&gt;IF&lt;/code&gt; statements and we can try to replace them with &lt;code&gt;SWITCH&lt;/code&gt; or even use &lt;code&gt;Spread Operator&lt;/code&gt; or &lt;code&gt;Map Method&lt;/code&gt;(In Javascript etc.) to replace the loop altogether but that we will keep for some other day.&lt;/p&gt;

&lt;p&gt;For now, our aim is to know that If such questions are asked in the interview just &lt;strong&gt;don't focus on solving for the correct answer&lt;/strong&gt;, instead &lt;strong&gt;we should also try to think in terms of maintainability, testability, and safety of our code&lt;/strong&gt;. Make sure you follow the basic programming principles like &lt;code&gt;KISS&lt;/code&gt;, &lt;code&gt;DRY&lt;/code&gt;, and &lt;code&gt;YAGNI&lt;/code&gt; and apply them wherever possible.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Fizzbuzz isn‚Äôt a silver bullet question that determines whether the candidate is a perfect fit or not. As a side note: &lt;strong&gt;I have always had a mixed feeling about some coding interviews questions for filtering out candidates and how effective they really are&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But as we saw, We can learn a lot about a programmer while they're approaching that simple problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Does the candidate care about &lt;strong&gt;clean code&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;  Does the candidate thinking about &lt;strong&gt;Maintainability&lt;/strong&gt; of the code?&lt;/li&gt;
&lt;li&gt;  Does the candidate approaches the solution keeping &lt;strong&gt;Scalability&lt;/strong&gt; factor in mind?&lt;/li&gt;
&lt;li&gt;  Does the candidate care about &lt;strong&gt;Modularity&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you have any questions or doubts, Let me know in the comments below. I'd be happy to answer your queries!&lt;/p&gt;

&lt;p&gt;Thank you for reading :)&lt;/p&gt;




&lt;p&gt;&lt;em&gt;"If you enjoyed what you read &amp;amp; want to show some support&lt;/em&gt; üíô, &lt;em&gt;you can do so by&lt;/em&gt; &lt;strong&gt;buying me a coffee‚òï&lt;/strong&gt;"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/apoorvtyagi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PD28--a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Can you hack this? #2</title>
      <author>Alfredo Salzillo üê∫</author>
      <pubDate>Sun, 25 Apr 2021 10:02:21 +0000</pubDate>
      <link>https://dev.to/alfredosalzillo/can-you-hack-this-2-1ia8</link>
      <guid>https://dev.to/alfredosalzillo/can-you-hack-this-2-1ia8</guid>
      <description>&lt;p&gt;Write an &lt;code&gt;isEven&lt;/code&gt; function to check if a number is &lt;code&gt;even&lt;/code&gt; without using the &lt;code&gt;modulus&lt;/code&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true &lt;/span&gt;
&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;127&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false&lt;/span&gt;
&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12abc2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; false &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>challenge</category>
      <category>fun</category>
      <category>javascript</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / value vs reference</title>
      <author>Nikita Kozlov</author>
      <pubDate>Sun, 25 Apr 2021 09:39:26 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-value-vs-reference-5a8k</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-value-vs-reference-5a8k</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
Explain passed by value and passed by reference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
In JavaScript, all primitive values are passed by value, but all non-primitive types are passed by reference. This means you can change params and this change will be isolated (with no side-effects).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
So the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;primitive types in JavaScript&lt;/a&gt; are &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, and others.&lt;/p&gt;

&lt;p&gt;Structural types (non-primitive) are &lt;code&gt;Object&lt;/code&gt; and &lt;code&gt;Function&lt;/code&gt;. Needed to mention that arrays and other structures have an &lt;code&gt;Object&lt;/code&gt; type too.&lt;/p&gt;

&lt;p&gt;This means when you pass some value to the function its behavior will depend on its type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9egSrKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gd8km98kc719jcs8e1xg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9egSrKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gd8km98kc719jcs8e1xg.png" alt="carbon (4)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life example:&lt;/strong&gt;&lt;br&gt;
In real-life apps, you need to be extra careful when changing any of provided function params, because debugging issues like this can be super tricky and time-consuming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NWfV38G3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nt2efdrs9o0ycmpmbke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NWfV38G3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nt2efdrs9o0ycmpmbke.png" alt="carbon (5)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how you can fix this issue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wI76NEEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi961w4bhmyyo047livu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wI76NEEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi961w4bhmyyo047livu.png" alt="carbon (3)"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;Other things to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-vs-1f58"&gt;JS interview in 2 minutes / == vs ===&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt; let's be friends üëã&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>6 Amazing Javascript Animation Libraries </title>
      <author>Pawan Bhayde</author>
      <pubDate>Sun, 25 Apr 2021 09:31:19 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/6-amazing-javascript-animation-libraries-27g8</link>
      <guid>https://dev.to/pawanbhayde/6-amazing-javascript-animation-libraries-27g8</guid>
      <description>&lt;p&gt;6 Amazing Javascript Animation Libraries &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scrollrevealjs"&gt;
  &lt;/a&gt;
  Scrollrevealjs
&lt;/h1&gt;

&lt;p&gt;ScrollReveal is a JavaScript library for easily animating elements as they enter/leave the viewport. It was designed to be robust and flexible, but hopefully you‚Äôll be surprised below at how easy it is to pick up.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_pzUAyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/732mh72qq9r7unb15rhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_pzUAyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/732mh72qq9r7unb15rhv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#lottiejs"&gt;
  &lt;/a&gt;
  Lottiejs
&lt;/h1&gt;

&lt;p&gt;This repo is the home of the unified Lottie docs hosted at &lt;a href="http://airbnb.io/lottie"&gt;http://airbnb.io/lottie&lt;/a&gt;. This repo is NOT the place to contribute to or report issues on any of the players or the After Effects plugin.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W91kCwlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1puv4zv1bgzv08pzdupi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W91kCwlh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1puv4zv1bgzv08pzdupi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#anijs"&gt;
  &lt;/a&gt;
  Anijs
&lt;/h1&gt;

&lt;p&gt;A Library to Raise your Web Design without Coding.&lt;/p&gt;

&lt;p&gt;The most easy and quick way to Raise your web!!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OKUpgEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obw0tcowk8v3my1gaj8h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OKUpgEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obw0tcowk8v3my1gaj8h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#popmotion-pure"&gt;
  &lt;/a&gt;
  Popmotion Pure
&lt;/h1&gt;

&lt;p&gt;Popmotion is a low-level, functional JavaScript motion library.&lt;/p&gt;

&lt;p&gt;It allows developers to animate in any JavaScript environment (browser, Node), to any render target (CSS, SVG, Three.js, canvas, etc).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lYGghvn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3i52aom44m63vne5uge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lYGghvn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3i52aom44m63vne5uge.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#mojs"&gt;
  &lt;/a&gt;
  Mojs
&lt;/h1&gt;

&lt;p&gt;mo ¬∑ js is a javascript motion graphics library that is a fast, retina ready, modular and open source. In comparison to other libraries, it has a different syntax and code animation structure approach. The declarative API provides you a complete control over the animation, making it customizable with ease.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Zp1apYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdh6ns26q7rholh48izq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Zp1apYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdh6ns26q7rholh48izq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#vivus"&gt;
  &lt;/a&gt;
  Vivus
&lt;/h1&gt;

&lt;p&gt;Demo available on &lt;a href="http://maxwellito.github.io/vivus"&gt;http://maxwellito.github.io/vivus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Play with it on Vivus Instant&lt;/p&gt;

&lt;p&gt;Vivus is a lightweight JavaScript class (with no dependencies) that allows you to animate SVGs, giving them the appearance of being drawn. There are a variety of different animations available, as well as the option to create a custom script to draw your SVG in whatever way you like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1gWJlxWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mmg1j9fp525xc940l5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1gWJlxWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mmg1j9fp525xc940l5v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#did-you-find-it-helpful"&gt;
  &lt;/a&gt;
  Did You Find it Helpful?
&lt;/h1&gt;

&lt;p&gt;let me know your thoughts in the comments below!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpN1Nik7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9JCEgIY5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619463/7a66f3fc-82cb-499b-a22b-9b346123f937.png" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/10-awesome-404-page-not-found-page-designs-5ig" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Awesome 404 Page Not Found Page Designs&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde „Éª Apr 24 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>html</category>
    </item>
    <item>
      <title>5 days 5 blogposts - the summary of the Arkademy.dev blogging challenge</title>
      <author>Andrzej Krzywda</author>
      <pubDate>Sun, 25 Apr 2021 09:09:46 +0000</pubDate>
      <link>https://dev.to/andrzejkrzywda/5-days-5-blogposts-the-summary-of-the-arkademy-dev-blogging-challenge-2nh5</link>
      <guid>https://dev.to/andrzejkrzywda/5-days-5-blogposts-the-summary-of-the-arkademy-dev-blogging-challenge-2nh5</guid>
      <description>&lt;p&gt;5 days 5 blogposts was an idea for a challenge that appeared in my head some time ago. I never remember where ideas come from - was it my idea, someone told me about it? I don't really care - I'm fascinated by ideas regardless of the author.&lt;/p&gt;

&lt;p&gt;Anyway, I disgress here. Which is a common problem in blogging, btw. You sit down and want to write about something and then, BAM, 100 new connections appears and you want to blog about all of them in one blogpost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I believe in blogging as making the world a better place.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I see blogging as a way of documenting what you know, sharing what your learnt. Sometimes, just 3 sentences can "click" in someone's mind. &lt;/p&gt;

&lt;p&gt;I don't buy the counter-argument - "there are too many blogposts already". &lt;/p&gt;

&lt;p&gt;Nope, people are unique. The way I think (and blog) about something is unique too. There are certain people with whom my writing resonates. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I don't blog to make millions of people happy, I blog to those 20 people who get inspired/educated from my writing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The 5 days 5 blogposts challenge was this idea that we can encourage each other to unblock in blogging. The sense of community and the bond is important here too. That's why it all became easier to organise, once Arkademy has started. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://arkademy.dev/"&gt;Arkademy&lt;/a&gt; is this community of programmers, both very very senior and also very very junior. It includes many Ruby programmers, but is not limited to any special technology. We are a welcoming community and the goal is to create a university-like environment of learning/supporting each other. &lt;/p&gt;

&lt;p&gt;One part of Arkademy is courses (including 2 blogging courses), The other part is communication - also via Discord.&lt;/p&gt;

&lt;p&gt;When Arkademy started - it was possible to start the blogging challenge. The community is already big enough that targeting 5-10 people was a realisting goal. At the same time it's still not too crowdy and it's easy to recognize people by their nicknames.&lt;/p&gt;

&lt;p&gt;The first thing was a blogging conference. This consisted of 4 talks and was like a preludium to the actual challenge. The Arkency bloggers + &lt;a href="http://lingocv.com/"&gt;Mira&lt;/a&gt; (English expert) shared their tips during online talks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xf78DVZsMP4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's worth wathing this talk if you're worried about your English.&lt;/p&gt;

&lt;p&gt;After the conference, we have started the challenge.&lt;/p&gt;

&lt;p&gt;During the first day, I was a bit worried - what if no one joins?&lt;/p&gt;

&lt;p&gt;It was a great relief to see the first "submissions". We've used one "Blogging" Discord channel. My goal was to review and motivate in the first days of the challenge. Somehow it happened that I joined the actual challenge too. It was nice to see also that Pawe≈Ç from Arkency has joined the challenge too.&lt;/p&gt;

&lt;p&gt;You can see all/most blogposts grouped here: &lt;a href="http://5days5blogposts.arkademy.dev/"&gt;http://5days5blogposts.arkademy.dev/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most of the people who joined the challenge are people who either never blogged or tried but got stuck and didn't blog for a long time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was so nice to see how they unblock in writing. It was also very motivating how they overcome all the possible problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I hate my writing&lt;/li&gt;
&lt;li&gt;noone is going to read this&lt;/li&gt;
&lt;li&gt;I'm tired, I blogged already yesterday&lt;/li&gt;
&lt;li&gt;I have nothing to write about&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But somehom most of us stayed till the end.&lt;/p&gt;

&lt;p&gt;As you can see, the format of the blogposts was varying a lot.&lt;/p&gt;

&lt;p&gt;Some of my lessons here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's hard to write a tutorial-like high-quality blogpost every day. &lt;/li&gt;
&lt;li&gt;Perfectionism is a hard opponent&lt;/li&gt;
&lt;li&gt;Showing code makes blogging much easier&lt;/li&gt;
&lt;li&gt;Sharing opinons may be controversial but is easy to write as you stay true to yourself&lt;/li&gt;
&lt;li&gt;Maintaing the persona of who you write for helps&lt;/li&gt;
&lt;li&gt;Keeping a backlog of blogging ideas helps people&lt;/li&gt;
&lt;li&gt;Trying to use my strengths (somehow simulated by for example Gallup talents) is a good idea, as it helps me with focus&lt;/li&gt;
&lt;li&gt;People like reading my opinions&lt;/li&gt;
&lt;li&gt;A little clickbait in the title can help&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What helped me the most, though was the "team effort".&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm an indivudual but I love being part of the team where we can support each other. That's why the success of the &lt;a href="http://blog.arkency.com/"&gt;Arkency blog&lt;/a&gt; (listed as top-10 ruby blogs in the world) - we help each other, we trust each other, we embrace our differences.&lt;/p&gt;

&lt;p&gt;During the challenge, at first I wasn't sure if the "team effect" could help that much. We didn't really know each other that well. &lt;/p&gt;

&lt;p&gt;In the end, it's the group that helped me finish the challenge. In the moments where I wanted to give up it was motivating to see Discord notifications that Miko≈Çaj, Anna, Piotr, Manuel and others have posted their blogposts. &lt;/p&gt;

&lt;p&gt;My Gallup's Maximizer (the talent to see a true potential in other people) is very happy. I've seen people transitioning from not bloggging at all to be almost addicted to blogging after only 5 days. &lt;/p&gt;

&lt;p&gt;This is the kind of challenge I dreamt of.&lt;/p&gt;

&lt;p&gt;Thank you to all the people who started the Arkademy Blogging Challenge. You're great.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I'm already motivated to prepare and organize other such challenges at Arkademy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;work on a fresh Rails app for 5 days&lt;/li&gt;
&lt;li&gt;implementing typical ecommerce challenge as a programming kata&lt;/li&gt;
&lt;li&gt;designing a good architecture for existing systems - architectural kata&lt;/li&gt;
&lt;li&gt;React component a day&lt;/li&gt;
&lt;li&gt;Improving test coverage via mutation testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But that's a topic for another blogpost. &lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>5days5blogposts</category>
      <category>watercooler</category>
      <category>writing</category>
      <category>arkademy</category>
    </item>
    <item>
      <title>Binding CSS and JavaScript with HTML data-attributes</title>
      <author>Kevin Pennekamp</author>
      <pubDate>Sun, 25 Apr 2021 09:02:53 +0000</pubDate>
      <link>https://dev.to/crinkle/binding-css-and-javascript-with-html-data-attributes-1pl0</link>
      <guid>https://dev.to/crinkle/binding-css-and-javascript-with-html-data-attributes-1pl0</guid>
      <description>&lt;p&gt;My &lt;a href="https://dev.to/crinkle/css-methodology-and-architecture-3b34"&gt;CSS architecture&lt;/a&gt; is based on &lt;a href="https://cube.fyi"&gt;CUBE CSS&lt;/a&gt;. One of the layers of CUBE CSS describes &lt;em&gt;exceptions&lt;/em&gt;. Although I see exceptions as an integral part of the &lt;em&gt;block&lt;/em&gt; layer, they are important nonetheless. Exceptions are often captured by targeting semantic HTML attributes or &lt;code&gt;data-*&lt;/code&gt; attributes in your CSS selectors. But what do these attributes enable you to do in CSS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-html-raw-data-endraw-attributes"&gt;
  &lt;/a&gt;
  Introducing HTML &lt;code&gt;data-*&lt;/code&gt; attributes
&lt;/h2&gt;

&lt;p&gt;HTML 5 was designed with extensibility in mind. On the data level, this is achieved with &lt;code&gt;data-*&lt;/code&gt; attributes. They allow you to define your attributes on HTML elements. By using the &lt;code&gt;data-&lt;/code&gt; prefix you cannot define non-existing attributes, or override attributes with non-valid values. If you did, you would invalidate your HTML. But with the &lt;code&gt;data-*&lt;/code&gt; attributes you are free to add whatever your heart desires. Let's take a closer look at how this looks in HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we added the &lt;code&gt;data-type&lt;/code&gt; attribute to a button, with the value &lt;code&gt;primary&lt;/code&gt;. All UIs have multiple types of buttons. Most CSS implementations choose to create a base &lt;code&gt;.btn&lt;/code&gt; class. On top of this class, we define the &lt;a href="http://getbem.com/naming/"&gt;modifier from the BEM notation&lt;/a&gt;. In this case, &lt;code&gt;.btn--primary&lt;/code&gt;. Should be enough, right?&lt;/p&gt;

&lt;p&gt;Now assume the case where you use an existing UI library for your buttons. Most of these come with a predefined set of button types. But now you want to create another type? Though luck. The library does not allow for defining button types and their styles yourself. You are not able to extend the stylesheet with a style definition for your &lt;code&gt;newtype&lt;/code&gt; button, extending the &lt;code&gt;.ui-btn&lt;/code&gt; class of the library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.ui-btn&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'newtype'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This definition has a higher specificity compared to the &lt;code&gt;.ui-btn&lt;/code&gt;. It will override any styles defined in the default &lt;code&gt;.ui-btn&lt;/code&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#linking-javascript-and-css"&gt;
  &lt;/a&gt;
  Linking JavaScript and CSS
&lt;/h2&gt;

&lt;p&gt;Although defined in HTML, &lt;code&gt;data-*&lt;/code&gt; attributes play a very important part in linking JavaScript with CSS. Many front-end developers tend to use JavaScript to define what CSS classes should be applied to an element. Modern JavaScript frameworks like React make this very easy. Although nothing is wrong with this approach, your code can become unmaintainable quickly. You often go to string manipulations to determine the modifier class it needs to apply.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`ui-btn ui-btn--&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you forget to define the default value of a property, you apply &lt;code&gt;ui-btn ui-btn--undefined&lt;/code&gt; to your element. What happens when there is more than one type of modifier that can be applied to your element? Your code became a lot less maintainable. By utilizing &lt;code&gt;data-*&lt;/code&gt; attributes you can avoid this. It allows you to minimize the amount of JavaScript required to determine which styles need to be applied.&lt;/p&gt;

&lt;p&gt;On the other hand, it powers up your CSS. The &lt;code&gt;data-*&lt;/code&gt; attributes allow you the apply pattern matching as well. 'Contains' (&lt;code&gt;*=&lt;/code&gt;), 'starts with' (&lt;code&gt;^=&lt;/code&gt;), or 'part of list' (&lt;code&gt;~=&lt;/code&gt;) are just some pattern matching examples. You can even apply matching using a case insensitive query using &lt;code&gt;[data-type='primary' i]&lt;/code&gt; in your CSS. But when would you match patterns? Is this not a too complex feature for CSS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-raw-data-endraw-for-reallife-scenarios"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;data-*&lt;/code&gt; for real-life scenarios
&lt;/h2&gt;

&lt;p&gt;Let's take a look at an example to show why it can be of value. Everybody &lt;em&gt;loves&lt;/em&gt; creating tables in Excel. You add some bold font to the header cells, as they indicate what information is present in the columns. And the same goes for the first column, as those cells indicate what is in the rows. Maybe you go exotic and apply even more styling next to some bold fonts. Something similar can be created using &lt;code&gt;data-*&lt;/code&gt;. Look at the partial code-snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"data-grid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell"&lt;/span&gt; &lt;span class="na"&gt;data-type=&lt;/span&gt;&lt;span class="s"&gt;"first-row first-column"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cell"&lt;/span&gt; &lt;span class="na"&gt;data-type=&lt;/span&gt;&lt;span class="s"&gt;"first-column"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code below, we can target both cells with the displayed CSS selector. As both cells have a different &lt;code&gt;data-type&lt;/code&gt; we cannot apply one-on-one pattern matching. But with the &lt;code&gt;~=&lt;/code&gt; operator, we can search if the value is present in a 'space separated list'. So with the CSS selector below, we can target both cells with one definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;targets&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nt"&gt;cells&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;first&lt;/span&gt; &lt;span class="nt"&gt;column&lt;/span&gt;
&lt;span class="nc"&gt;.cell&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-type&lt;/span&gt;&lt;span class="o"&gt;~=&lt;/span&gt;&lt;span class="s2"&gt;'first-column'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#state-machines"&gt;
  &lt;/a&gt;
  State machines
&lt;/h2&gt;

&lt;p&gt;But one of the biggest advantages of &lt;code&gt;data-*&lt;/code&gt; has not yet been discussed: state machines! State machines are upcoming in front-end development but are an old concept. As outlined in &lt;a href="https://www.smashingmagazine.com/2018/01/rise-state-machines/"&gt;this&lt;/a&gt; article on CSS-tricks, state machines allow you to simplify your code by mitigating side-effects (e.g. in fetch requests). It is a powerful method to define complex logic. If an element requires different styling based on the state, &lt;code&gt;data-*&lt;/code&gt; are here to help you out! It is as simple as the snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.my-element&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'init'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A state machine is a machine that can be in one state at any given time. The machine can change from one state to another, based on transitions. A statechart allows for nesting, delays, automatic transitions, and parallel regions in state machines. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;State machines have a lot of value in complex state management. In those cases, styling is often not impacted. Parts of the DOM tree are disregarded based on the current state. Although this could also be achieved with CSS (&lt;code&gt;display: none&lt;/code&gt;), it is not the main strength of combining CSS and state machines. I have listed more practical use cases below. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Disabling interactive elements (e.g. buttons) based on the loading state of fetch requests, and provide visual guidance. &lt;/li&gt;
&lt;li&gt;Different visualization of checkboxes (checked, unchecked, semi-checked). &lt;/li&gt;
&lt;li&gt;Different combinations of (un-)selected, hovering, and active. &lt;/li&gt;
&lt;li&gt;CSS animations based on statecharts with timers (e.g. fly-out animation). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By combining semantic HTML, HTML-attributes and &lt;code&gt;data-*&lt;/code&gt; attributes, styling based on states can be made possible. It allows you to reduce the amount of JavaScript and use CSS what it is intended for in the first place: layout and styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Good use of semantic HTML attributes make it possible to link CSS to JavaScript. As we have seen, the &lt;code&gt;data-*&lt;/code&gt; attributes allow the creation of generic UI components that are styling less. Instead of imposing an opinionated style, they allow developers to override every aspect. When combined with semantic HTML-attributes, styling for state machines can be implemented, as in line with &lt;a href="https://cube.fyi"&gt;CUBE CSS&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>600 People Have Answered: Coding is hard but ______ is harder.</title>
      <author>Eleftheria Batsou</author>
      <pubDate>Sun, 25 Apr 2021 08:47:13 +0000</pubDate>
      <link>https://dev.to/eleftheriabatsou/600-people-have-answered-coding-is-hard-but--is-harder-557a</link>
      <guid>https://dev.to/eleftheriabatsou/600-people-have-answered-coding-is-hard-but--is-harder-557a</guid>
      <description>&lt;p&gt;A few days ago I asked on Twitter what is harder than coding. My answer would be poverty, raising children (although I'm not a parent), communication, etc.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;"Coding is hard but ____________ is harder"&lt;br&gt;&lt;br&gt;Fill the blank&lt;a href="https://twitter.com/hashtag/DEVCommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#CodeNewbies&lt;/a&gt;&lt;/p&gt;‚Äî Eleftheria Batsou (@BatsouElef) &lt;a href="https://twitter.com/BatsouElef/status/1384422081656406017?ref_src=twsrc%5Etfw"&gt;April 20, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Let's see how other people felt.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#life-coding-is-hard-but"&gt;
  &lt;/a&gt;
  Life - coding is hard but...
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a4J7dLZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619338353274/w-olrx9sr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a4J7dLZq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619338353274/w-olrx9sr.jpeg" alt="codingKids.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Poverty / Being broke is harder.&lt;/li&gt;
&lt;li&gt;Raising kids/ Raising teenagers / The parenthood.&lt;/li&gt;
&lt;li&gt;Giving birth is harder.&lt;/li&gt;
&lt;li&gt;Adulting.&lt;/li&gt;
&lt;li&gt;Human interaction.&lt;/li&gt;
&lt;li&gt;Dealing with idiots online / Dealing with people / Dealing with clients.&lt;/li&gt;
&lt;li&gt;Trusting people.&lt;/li&gt;
&lt;li&gt;Building an actual product is harder.&lt;/li&gt;
&lt;li&gt;The amount of things you need to learn to become good enough to get a job.&lt;/li&gt;
&lt;li&gt;Finding a job is / Landing a job (&amp;lt;- I got many answers like this).&lt;/li&gt;
&lt;li&gt;Giving up.&lt;/li&gt;
&lt;li&gt;Bricklaying is one of those jobs that looks so easy but is actually very difficult.&lt;/li&gt;
&lt;li&gt;Life is harder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#work-coding-is-hard-but"&gt;
  &lt;/a&gt;
  Work- coding is hard but...
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l5pC1C7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619338380685/LlNAdD35W.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l5pC1C7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619338380685/LlNAdD35W.jpeg" alt="codingCommunication.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem-solving is harder&lt;/li&gt;
&lt;li&gt;Coding is hard but scrum daily is harder.&lt;/li&gt;
&lt;li&gt;Deployment / Documenting / Designing / Testing (&amp;lt;- I got many answers for these).&lt;/li&gt;
&lt;li&gt;Algorithms/maths.&lt;/li&gt;
&lt;li&gt;Explaining something that sounds super obvious and simple to you as an experienced dev, to a newbie who's just starting out in the field.&lt;/li&gt;
&lt;li&gt;Reading others‚Äô codes.&lt;/li&gt;
&lt;li&gt;Finding error when code compiles successfully.&lt;/li&gt;
&lt;li&gt;Thinking about how my portfolio design will be is harder.&lt;/li&gt;
&lt;li&gt;Getting really damn good in it is harder / Quality coding is harder.&lt;/li&gt;
&lt;li&gt;Clean Coding.&lt;/li&gt;
&lt;li&gt;Resolving merge conflicts.&lt;/li&gt;
&lt;li&gt;Refactoring (&amp;lt;- I got many answers like this).&lt;/li&gt;
&lt;li&gt;Not coding (&amp;lt;- I got many answers like this).&lt;/li&gt;
&lt;li&gt;Debugging / Debugging other's code (&amp;lt;- I got many answers like this).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#fun-coding-is-hard-but"&gt;
  &lt;/a&gt;
  Fun - coding is hard but...
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C8ui0iAS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619338514072/JLX9qJgNL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C8ui0iAS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619338514072/JLX9qJgNL.jpeg" alt="Codingdating.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finding a girl who is good at programming, sarcasm and watches anime!!&lt;/li&gt;
&lt;li&gt;Finding a partner / Dating.&lt;/li&gt;
&lt;li&gt;Convincing people that you cannot hack into their ex's account- is harder (&amp;lt;- ok, that made me laugh!).&lt;/li&gt;
&lt;li&gt;Watching your crush's boyfriend code.&lt;/li&gt;
&lt;li&gt;Coding is hard but filling the blank is harder...&lt;/li&gt;
&lt;li&gt;Trying to talk to literally anyone in my fam about coding.&lt;/li&gt;
&lt;li&gt;Maintaining social life while coding as a profession is harder ( &amp;lt;- well, I'm not sure if this is actually fun or not!)&lt;/li&gt;
&lt;li&gt;Naming methods / variables.&lt;/li&gt;
&lt;li&gt;Not getting coding-related jokes is harder.&lt;/li&gt;
&lt;li&gt;Learning Russian.&lt;/li&gt;
&lt;li&gt;Trying to sleep without solving the problem.&lt;/li&gt;
&lt;li&gt;Painting every room in your house.&lt;/li&gt;
&lt;li&gt;Watching Sebastian Vettel on a podium in 2021.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm afraid I couldn't include all the answers as more than 600 people answered me (thank you), but I tried to include the most common answers. Feel free to check the rest of them on  &lt;a href="https://twitter.com/BatsouElef/status/1384422081656406017"&gt;Twitter&lt;/a&gt;. Thank you everyone for participating :).&lt;/p&gt;

&lt;p&gt;If you want to take part in these questions make sure to follow me on  &lt;a href="https://twitter.com/BatsouElef"&gt;Twitter&lt;/a&gt; or on &lt;a href="https://www.instagram.com/elef_in_tech"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;üëãHello, I'm Eleftheria, a developer, public speaker, and chocolate lover.&lt;/p&gt;

&lt;p&gt;ü•∞If you liked this post please share.&lt;/p&gt;

&lt;p&gt;üç©Would you care about buying me a coffee? You can do it &lt;a href="https://www.buymeacoffee.com/elef/"&gt;here&lt;/a&gt; but If you can't that's ok too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.paypal.com/paypalme/eleftheriabatsou"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QXiTcCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616336641314/ycZgZ44G3.gif" alt="cofGif.gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;üôèIt would be nice to subscribe to my &lt;a href="https://www.youtube.com/c/EleftheriaBatsou"&gt;Youtube&lt;/a&gt; channel. It‚Äôs free and it helps to create more content.&lt;/p&gt;

&lt;p&gt;üåà&lt;a href="https://www.youtube.com/c/EleftheriaBatsou"&gt;Youtube&lt;/a&gt; | &lt;a href="https://codepen.io/EleftheriaBatsou"&gt;Codepen&lt;/a&gt; | &lt;a href="https://github.com/EleftheriaBatsou"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/BatsouElef"&gt;Twitter&lt;/a&gt; | &lt;a href="http://eleftheriabatsou.com/"&gt;Site&lt;/a&gt; | &lt;a href="https://www.instagram.com/elef_in_tech"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>learning</category>
    </item>
    <item>
      <title>Creating a follow and unfollow system in Django | python</title>
      <author>vinayak</author>
      <pubDate>Sun, 25 Apr 2021 08:38:48 +0000</pubDate>
      <link>https://dev.to/itsvinayak/creating-a-follow-and-unfollow-system-in-django-python-39gg</link>
      <guid>https://dev.to/itsvinayak/creating-a-follow-and-unfollow-system-in-django-python-39gg</guid>
      <description>&lt;p&gt;Social Media giants like Instagram, Twitter, Facebook, and Github have one thing in common, that is it follow/unfollow feature. which allows the user to follow each other.&lt;/p&gt;

&lt;p&gt;Here, in this post, we have tried to mimic this feature.&lt;br&gt;
*Basic knowledge of Django is required&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Modules required :

&lt;ul&gt;
&lt;li&gt;Django :
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install Django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic setup :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Command to make a project - here, the name of the project is named as "blog"
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   django-admin startproject blog 
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In blog folder create an app - here, the name of the app is  named as  "author"&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   python manage.py startapp author
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;code

&lt;ul&gt;
&lt;li&gt;After creating the author app, open the models.py file in the author
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    following = models.ManyToManyField(
        "self", blank=True, related_name="followers", symmetrical=False
    )
    bio = models.TextField(max_length=200, blank=True, default="Bio")
    website = models.URLField(max_length=200, blank=True)


    def __str__(self):
          return f"{self.username} Profile"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the ManyToMany field will help us create a followings field as a user can follow many other users and many users can follow him.&lt;br&gt;
 &lt;a href="https://docs.djangoproject.com/en/3.2/topics/db/examples/many_to_many/"&gt;Docs on ManyTOManyField&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After creating models and running migrations, we need to work on views.py
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.shortcuts import render
from django.http import HttpResponseRedirect
from django.urls import reverse
from author.models import User


def profile(request, username):
    userProfile = User.objects.get(username=username)

    data = {
        "author": userProfile,
    }
    return render(request, "author/profile.html", data)


def followToggle(request, author):
    authorObj = User.objects.get(username=author)
    currentUserObj = User.objects.get(username=request.user.username)
    following = authorObj.following.all()

    if author != currentUserObj.username:
        if currentUserObj in following:
            authorObj.following.remove(currentUserObj.id)
        else:
            authorObj.following.add(currentUserObj.id)

    return HttpResponseRedirect(reverse(profile, args=[authorObj.username]))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;we have to functions here: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;profile() - this function handle user profile by accepting username as an argument&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;followToggle() - this function handle follow/unfollow system for a user. This function takes a username as an argument, which our current user wants to follow/unfollow.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Now time to work on urls.py to connect views
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path
from author import views

urlpatterns = [
    path("profile/&amp;lt;str:username&amp;gt;/", views.profile, name="profile"),
    path("followToggle/&amp;lt;str:author&amp;gt;/",views.followToggle, name="followToggle")
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create a templates folder inside the templates folder, create an author/profile.html template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*I have use bootstrap for my project. so, please ignore classes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% extends "base.html" %}
{% load static %}
{% block header %}
{% endblock header %}

{% block content %}

&amp;lt;div class="pt-5 mt-5 pb-5 mb-5"&amp;gt;
  &amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="main-body"&amp;gt;
      &amp;lt;div class="row gutters-sm"&amp;gt;
        &amp;lt;div class="col-md-4 mb-3"&amp;gt;
          &amp;lt;div class="card"&amp;gt;
            &amp;lt;div class="card-body"&amp;gt;
              &amp;lt;div class="d-flex flex-column align-items-center text-center"&amp;gt;
                &amp;lt;img src="{{ author.image.url }}" alt="{{ author.username }}" class="rounded-circle" width="150" /&amp;gt;
                &amp;lt;div class="mt-3"&amp;gt;
                  &amp;lt;h4&amp;gt;{{ author.username }}&amp;lt;/h4&amp;gt;
                  &amp;lt;div class="row"&amp;gt;
                    &amp;lt;b&amp;gt; following : &amp;lt;/b&amp;gt;
                    &amp;lt;p class="text-muted"&amp;gt; {{ author.following.count }} &amp;lt;/p&amp;gt;
                    &amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;
                    &amp;lt;b&amp;gt; followers : &amp;lt;/b&amp;gt;
                    &amp;lt;p class="text-muted"&amp;gt; {{ author.followers.count }} &amp;lt;/p&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;h6 class="text-muted font-size-sm"&amp;gt;
                    {{ author.bio }}
                  &amp;lt;/h6&amp;gt;
                  {% if user.is_authenticated %}
                    {% if user in author.following.all %}
                        &amp;lt;a href="{% url 'followToggle' author=author.username  %}" class="btn btn-primary"&amp;gt;Unfollow&amp;lt;/a&amp;gt;
                      {% else %}
                        &amp;lt;a  href="{% url 'followToggle' author=author.username  %}" class="btn btn-primary"&amp;gt; Follow &amp;lt;/a&amp;gt;
                    {% endif %}
                      &amp;lt;button class="btn btn-outline-primary"&amp;gt;Message&amp;lt;/button&amp;gt;
                  {% else %}
                    &amp;lt;p class="text-muted"&amp;gt; please, login to follow &amp;lt;/p&amp;gt;
                  {% endif %}
                &amp;lt;/div&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;

          &amp;lt;div class="card mt-3"&amp;gt;
            &amp;lt;ul class="list-group list-group-flush"&amp;gt;
              {% if author.website %}
              &amp;lt;li class="list-group-item d-flex justify-content-between align-items-center flex-wrap"&amp;gt;
                &amp;lt;h6 class="mb-0"&amp;gt;
                  &amp;lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="feather feather-globe mr-2 icon-inline"&amp;gt;
                    &amp;lt;circle cx="12" cy="12" r="10"&amp;gt;&amp;lt;/circle&amp;gt;
                    &amp;lt;line x1="2" y1="12" x2="22" y2="12"&amp;gt;&amp;lt;/line&amp;gt;
                    &amp;lt;path
                      d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"&amp;gt;
                    &amp;lt;/path&amp;gt;
                  &amp;lt;/svg&amp;gt;Website
                &amp;lt;/h6&amp;gt;
                &amp;lt;span class="text-secondary"&amp;gt;{{ author.website }}&amp;lt;/span&amp;gt;
              &amp;lt;/li&amp;gt;
              {% endif %}
            &amp;lt;/div&amp;gt;

          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;


{% endblock content %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is the profile page for the author we want to follow/unfollow, we get this page by passing "username" to &lt;strong&gt;profile views&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
here, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;{{ author.following.count }}&lt;/code&gt; : this tag represents the count of users following the current user &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{{ author.followers.count }}&lt;/code&gt;: this tag represents the count of users followed by the current user, this type of relationship tag is called reverse or backward relationship &lt;a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#many-to-many-relationships"&gt; docs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To follow/unfollow this user we are using &lt;code&gt;{% url 'followToggle' author=author.username  %}&lt;/code&gt; this URL tag. follow and unfollow text on the button is represented by looking if the user exits in the author following list&lt;/p&gt;

&lt;p&gt;That's it. hope, you like it. &lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Premium Tools for Developers (Free Deals)  </title>
      <author>GoOnlineTools</author>
      <pubDate>Sun, 25 Apr 2021 08:33:54 +0000</pubDate>
      <link>https://dev.to/goonlinetools/premium-tools-for-developers-free-deals-9b3</link>
      <guid>https://dev.to/goonlinetools/premium-tools-for-developers-free-deals-9b3</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I am back with the new update on GoOnlineTools :)&lt;/p&gt;

&lt;p&gt;Today I collected some of the best tools which I use in GoOnlineTools.&lt;/p&gt;

&lt;p&gt;You can check all tools on &lt;a href="https://goonlinetools.com/deals/"&gt;GoOnlineTools Deals&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlUveSTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukrcyx5zohaz1c0srhsn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlUveSTX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukrcyx5zohaz1c0srhsn.jpg" alt="GoOnlineTools Deals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want any tool then click on the grab deal button to get an offer on that tool.&lt;/p&gt;

&lt;p&gt;I hope this is helpful :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Data Structures: Trees</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 25 Apr 2021 08:27:18 +0000</pubDate>
      <link>https://dev.to/tamerlang/data-structures-trees-48p2</link>
      <guid>https://dev.to/tamerlang/data-structures-trees-48p2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Trees are the longest living organisms on Earth, and never die of old age&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a completely interesting but meaningless fact, the reason why I'm saying this is because today in our data structures series we will learn about trees.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today you will learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are trees and their use cases.&lt;/li&gt;
&lt;li&gt;Types of trees&lt;/li&gt;
&lt;li&gt;Basic python implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#1"&gt;What is a tree?&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;&lt;a href="#2"&gt;Common terminologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Types of trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Tree applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#5"&gt;Binary Tree Implementation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#6"&gt;Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-tree"&gt;
  &lt;/a&gt;
  What is a tree? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P7TxqhFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yawft470g762kapim0b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P7TxqhFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yawft470g762kapim0b2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A tree is a non-linear data structure that is used to represent hierarchical data.&lt;/p&gt;

&lt;p&gt;Examples of hierarchical data may include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Company's chain of command&lt;/li&gt;
&lt;li&gt;E-Commerce categories&lt;/li&gt;
&lt;li&gt;Mafia's chain of command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take the company chain of command example, the structure may look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GiJ9JzuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1ccpljwbib0mx0t0aup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GiJ9JzuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1ccpljwbib0mx0t0aup.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This kind of data would be ideal for trees, but before we move on to code, we first gotta understand some key terms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-terminologies"&gt;
  &lt;/a&gt;
  Common terminologies &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HbrAyAdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9bxyzlflpm4facq2tfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HbrAyAdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9bxyzlflpm4facq2tfj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node&lt;/strong&gt; - Element in a tree&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Root&lt;/strong&gt; ‚àí The node at the top of the tree is called root. There is only one root per tree and one path from the root node to any node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parent&lt;/strong&gt; ‚àí Any node except the root node has one edge upward to a node called the parent.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Child&lt;/strong&gt; ‚àí The node below a given node connected by its edge downward is called its child node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Leaf&lt;/strong&gt; ‚àí The node which does not have any child node is called the leaf node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subtree&lt;/strong&gt; ‚àí Subtree represents the descendants of a node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Visiting&lt;/strong&gt; ‚àí Visiting refers to checking the value of a node when control is on the node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Traversing&lt;/strong&gt; ‚àí Traversing means passing through nodes in a specific order.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Levels&lt;/strong&gt; ‚àí The Level of a node represents the generation of a node. If the root node is at level 0, then its next child node is at level 1, its grandchild is at level 2, and so on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keys&lt;/strong&gt; ‚àí Key represents a value of a node based on which a search operation is to be carried out for a node.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#types-of-trees"&gt;
  &lt;/a&gt;
  Types of Trees &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Below are the types of trees in a data structure:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A tree without any constraints, a node may have infinite children.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tt8-nr-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rn6jgda0zlqm6a251y3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tt8-nr-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rn6jgda0zlqm6a251y3c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binary Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The binary tree is the kind of tree in which most two children can be found for each parent. The kids are known as the left child and right child. This is the most popular type of tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0D1WvoeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0qw3iuf1cj8jjaeibez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0D1WvoeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0qw3iuf1cj8jjaeibez.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Binary Search Tree is basically a binary tree but with additional constraints. The left child value of a node should in BST be less than or equal to the parent value, and the right child value should always be greater than or equal to the parent‚Äôs value. This Binary Search Tree property makes it ideal for search operations since we can accurately determine at each node whether the value is in the left or right sub-tree. This is why the Search Tree is named.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thnHO8un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3mb0v45jtl3sea238y4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thnHO8un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3mb0v45jtl3sea238y4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Named after their inventor Adelson, Velski &amp;amp; Landis, AVL trees are height-balancing binary search trees. AVL tree checks the height of the left and the right sub-trees and assures that the difference is not more than 1. This difference is called the Balance Factor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lx5_OdJO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4z8kpttuq12zetz1nad0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lx5_OdJO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4z8kpttuq12zetz1nad0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red-Black Trees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A red-black tree is a kind of self-balancing binary search tree where each node has an extra bit, and that bit is often interpreted as the colour (red or black). These colours are used to ensure that the tree remains balanced during insertions and deletions. Although the balance of the tree is not perfect, it is good enough to reduce the searching time and maintain it around O(log n) time, where n is the total number of elements in the tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wpB5LCLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt7wj46klgm67pke74lj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wpB5LCLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt7wj46klgm67pke74lj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spanning Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A spanning tree is a subset of Graph G, which has all the vertices covered with the minimum possible number of edges. Hence, a spanning tree does not have cycles and it cannot be disconnected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v5Bm0GzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tysc2qeyq5afklfl4ow2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v5Bm0GzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tysc2qeyq5afklfl4ow2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heap Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Heap is a special Tree-based data structure in which the tree is a complete binary tree. Generally, Heaps can be of two types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Max-Heap&lt;/strong&gt;: In a Max-Heap the key present at the root node must be greatest among
the keys present at all of it‚Äôs children. The same property must be
recursively true for all sub-trees in that Binary Tree.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Min-Heap&lt;/strong&gt;: In a Min-Heap the key present at the root node must be minimum among
the keys present at all of its children. The same property must be
recursively true for all sub-trees in that Binary Tree.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uEWAopQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xln150qahklsz80yjlug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEWAopQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xln150qahklsz80yjlug.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tree-applications"&gt;
  &lt;/a&gt;
  Tree applications &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Store hierarchical data, like folder structure, organization structure, XML/HTML data.&lt;/li&gt;
&lt;li&gt;A Binary Search Tree is a tree that allows fast search, insert, delete on a sorted data. It also allows finding the closest item.&lt;/li&gt;
&lt;li&gt;Heap tree is a tree data structure that is implemented using arrays and used to implement priority queues.&lt;/li&gt;
&lt;li&gt;B-Tree and B+ Tree: They are used to implement indexing in databases.&lt;/li&gt;
&lt;li&gt;Syntax Tree: Used in Compilers.&lt;/li&gt;
&lt;li&gt;K-D Tree: A space partitioning tree used to organize points in K dimensional space.&lt;/li&gt;
&lt;li&gt;Trie: Used to implement dictionaries with prefix lookup.&lt;/li&gt;
&lt;li&gt;Suffix Tree: For quick pattern searching in a fixed text.&lt;/li&gt;
&lt;li&gt;Spanning Tree and shortest-path trees are used in routers and bridges respectively in computer networks&lt;/li&gt;
&lt;li&gt;As a workflow for compositing digital images for visual effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#binary-tree-implementation"&gt;
  &lt;/a&gt;
  Binary Tree Implementation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We are gonna implement a binary tree because it's the most popular tree, and it's the base for many other trees. For this implementation, we will use linked lists because it's simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#node"&gt;
  &lt;/a&gt;
  Node &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tree"&gt;
  &lt;/a&gt;
  Tree &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinaryTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transplant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transplant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;succ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transplant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
                &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transplant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
            &lt;span class="n"&gt;succ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;succ&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;That's it, I know I haven't gone deeper into trees. This is just an introductory post, but I would recommend reading other great articles on the internet. I hope you learned something today, and if you got any questions feel free to leave them down in the comments.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>
