<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Authentication and Authorisation 101</title>
      <author>Charlotte Fereday</author>
      <pubDate>Sat, 16 Jan 2021 18:18:39 +0000</pubDate>
      <link>https://dev.to/charlottebrf_99/authentication-and-authorisation-101-143e</link>
      <guid>https://dev.to/charlottebrf_99/authentication-and-authorisation-101-143e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AsQfslLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k3er9yend19vj5sxhttu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AsQfslLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k3er9yend19vj5sxhttu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This blog post was originally published in Tes Engineering blog &lt;a href="https://engineering.tes.com/post/authentication-and-authorisation"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year I gave a talk at a &lt;a href="https://nodegirls.com/"&gt;Node Girls&lt;/a&gt; and &lt;a href="https://wearetechwomen.com/wosec-women-of-security/"&gt;Women of Security&lt;/a&gt;&lt;br&gt;
meetup to share a few things I have learned about authentication and authorisation since joining our &lt;a href="https://engineering.tes.com/post/tes-eng-sec-team/"&gt;Security Engineering team at Tes&lt;/a&gt;.&lt;br&gt;
You can see the video of this talk &lt;a href="https://youtu.be/dF19VrneJGo"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post summarises some of the key points made during the talk, alongside some sketch notes and code snippets from &lt;a href="https://github.com/cfereday/pet-shop/tree/master/shop"&gt;an example app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Authentication and authorisation both relate to the concept of identity. Though the words are similar their meanings are different. Let’s explore how...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication" class="anchor"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;At the most basic level, we can say that authentication is the process of checking the identity of a user: &lt;em&gt;are you who you say you are?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CCcKRzRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fhj9yddsyl8unrfkzpej.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CCcKRzRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fhj9yddsyl8unrfkzpej.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most common place that authentication is used is the Login Page of an application. During login user entered credentials are checked against what we have stored in the database. This allows us to verify that we know and trust a user is who they say they are, via, for example, a username and a password.&lt;/p&gt;

&lt;p&gt;Although the concept of authentication is straightforward, the technical process of its implementation is typically complex, because it’s absolutely vital to keep users’ data secure. For this reason, many companies opt to use a third party company, for example Google or Auth0, to handle the authentication process for them.&lt;/p&gt;

&lt;p&gt;Some companies choose to implement authentication themselves. Here are a couple of golden rules if you go down this route.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rule-1-only-a-customer-should-know-their-password" class="anchor"&gt;
  &lt;/a&gt;
  Rule 1: Only a customer should know their password
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cY1geEFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lfxxydyv4bm8uw7z0h3y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cY1geEFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lfxxydyv4bm8uw7z0h3y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keeping secret data secure is vitally important for any company to protect their users and their reputation. We want to mitigate against the risk that even if a bad actor got access to a database, they would never get a plain text password. The safest strategy to prevent this is to not store the plain text password at all.&lt;/p&gt;

&lt;p&gt;One solution is to hash passwords to carry out a ‘one way’ transformation which turns turns a plain text password into an unrecognisable string. We can use one way encryption to verify the password whilst making it very difficult for a bad actor to transform it to its original plain text value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIo-AtpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hj5r38k6gbecpxf2l3st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIo-AtpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hj5r38k6gbecpxf2l3st.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can safely hash passwords by using well maintained and recognised open source libraries, such as &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;bcrypt library&lt;/a&gt;. Here’s an example code snippet using the &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;bcrypt library&lt;/a&gt; to hash a password before storing it, to keep user credentials safe.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rule-2-always-validate-user-input-before-using-it" class="anchor"&gt;
  &lt;/a&gt;
  Rule 2: Always validate user input before using it
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmtBYrQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/db1hktzyvnulrzushn1y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmtBYrQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/db1hktzyvnulrzushn1y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most common places for an attack on an application is the Login page. Injection or hijacking attacks can aim to make our code do something we did not tell it to do, by sending an instruction where we would expect some user-entered data or credentials.&lt;/p&gt;

&lt;p&gt;Never trust the user input to safeguard applications, but rather always validate and transform data before using it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jN1BFSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3aqb1h0mnllgzynb8fon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jN1BFSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3aqb1h0mnllgzynb8fon.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again a widely used open source validation library like &lt;a href="https://github.com/hapijs/joi"&gt;Joi&lt;/a&gt; can help you easily create schemas and transform the data into safe objects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authorisation" class="anchor"&gt;
  &lt;/a&gt;
  Authorisation
&lt;/h3&gt;

&lt;p&gt;After a user has been authenticated, we can move onto checking what resource they are authorised to access. It's important to control who-can-access-what to protect data, reputation and revenue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HMO_bNEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l2jvf3sopq5p5ujydqts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMO_bNEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l2jvf3sopq5p5ujydqts.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can use roles to indicate whether or not a user should have access to a resource. For instance, only an administrator should be able to access the admin page, or only a particular client has access to a specific endpoint.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#json-web-tokensjwt" class="anchor"&gt;
  &lt;/a&gt;
  JSON Web Tokens(JWT)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://jwt.io/"&gt;Json Web Tokens (JWT)&lt;/a&gt; help to implement authorisation.&lt;br&gt;
JWT is an open standard that defines a way to securely transmit information between parties as a JSON object. &lt;/p&gt;

&lt;p&gt;We can trust this information because it is digitally signed and verified by server-side code.&lt;br&gt;
It helps authorisation systems scale, to ensure only those authorised have access to particular resources, and protect private personal data.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sign" class="anchor"&gt;
  &lt;/a&gt;
  Sign
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bxpVQohx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdkvc1pdx6y1abto8uur.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bxpVQohx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdkvc1pdx6y1abto8uur.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A JWT is digitally signed with a secret or a public/private key pair that is only known to an application. This means an application can ensure that the JWT was signed from a trusted source (via said secret or corresponding public key) and prevents it from being secretly tampered with.&lt;/p&gt;

&lt;p&gt;Here’s an example of using the &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken library&lt;/a&gt; to sign a JWT where it is then added to a cookie.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VY2q_w5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qk8p5lmavxhn1s3os8vp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VY2q_w5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qk8p5lmavxhn1s3os8vp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Role data is included as part of the JWT, for instance in this example if the username is ‘admin’ then this user gets an ‘admin’ role. Clearly this management of roles is a hack for a toy project, in a real secure system there will be more sophisticated ways of managing admins.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#verify" class="anchor"&gt;
  &lt;/a&gt;
  Verify
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFVCzlr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73wnxk3vqpwa3shz06gn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFVCzlr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73wnxk3vqpwa3shz06gn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have a JWT, we can verify that the token is valid on our servers, and only trust it if the JWT hasn’t been tampered with or expired.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVwgGkq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lggtypka2yhta4kvg5ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVwgGkq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lggtypka2yhta4kvg5ba.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken library&lt;/a&gt; allows us to digitally verify a user or client and effectively manage whether they should have access to a particular resource.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Aside from learning more about authentication and authorisation, the aim of this blog is to show that as engineers we can learn a few good security practices and have access to many open source libraries to help us build more secure applications.&lt;/p&gt;

&lt;p&gt;Writing secure code is absolutely critical for our users - you don’t need to be a security expert to get started.&lt;/p&gt;

&lt;p&gt;If you’d like to learn more about some of the topics touched on here, I've listed below some articles that I found useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-reading" class="anchor"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#passwords" class="anchor"&gt;
  &lt;/a&gt;
  Passwords
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theguardian.com/technology/2016/dec/15/passwords-hacking-hashing-salting-sha-2"&gt;Passwords and Jargon: The Guardian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"&gt;OWASP Password storage cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/bcrypt"&gt;Bcrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#validation" class="anchor"&gt;
  &lt;/a&gt;
  Validation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/about/appsecurity/learning/xss/index.html"&gt;Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0"&gt;The most common XSS in React JS applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@hapi/joi"&gt;Hapi/joi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#json-web-token" class="anchor"&gt;
  &lt;/a&gt;
  JSON web token
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc7519"&gt;Open Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jwt.io/introduction/"&gt;JWT&lt;/a&gt; and &lt;a href="https://thehftguy.com/2020/02/18/jwt-is-awesome-heres-why/amp/"&gt;JWT is awesome&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#cookies" class="anchor"&gt;
  &lt;/a&gt;
  Cookies
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;Mozilla&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/cookies/Cookie"&gt;Cookie Flags&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/controls/SecureFlag"&gt;OWASP Secure Cookie Flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/HttpOnly"&gt;Http Only Flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.allaboutcookies.org/cookies/cookies-the-same.html"&gt;Session vs Persistent Cookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>security</category>
    </item>
    <item>
      <title>The 7 JavaScript Skills You Need For React (+ Practical Examples)</title>
      <author>Reed Barger</author>
      <pubDate>Sat, 16 Jan 2021 15:41:53 +0000</pubDate>
      <link>https://dev.to/reedbarger/the-7-javascript-skills-you-need-for-react-practical-examples-1ida</link>
      <guid>https://dev.to/reedbarger/the-7-javascript-skills-you-need-for-react-practical-examples-1ida</guid>
      <description>&lt;p&gt;One of the most important things to understand about React is that &lt;em&gt;it is fundamentally JavaScript&lt;/em&gt;. This means that the better you are at JavaScript, the more successful you will be with React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's break down the 7 essential concepts that you should know about JavaScript to master React.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And when I say these concepts are essential--they are used in every single application that a React developer makes, with little to no exceptions.&lt;/p&gt;

&lt;p&gt;Learning these concepts is one of the most valuable things you can do to accelerate your ability to make React projects and become a skilled React developer, so let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-your-own-copy-of-this-guide%E2%80%AC" class="anchor"&gt;
  &lt;/a&gt;
  Want Your Own Copy of this Guide?‬
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://bit.ly/7-js-skills-for-react"&gt;&lt;strong&gt;Download the cheatsheet in PDF format here&lt;/strong&gt;&lt;/a&gt; (it takes 5 seconds).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-function-declarations-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  1. Function Declarations and Arrow Functions
&lt;/h2&gt;

&lt;p&gt;The basis of any React application is the &lt;strong&gt;component&lt;/strong&gt;. In React, components are defined with both JavaScript functions and classes. But unlike JavaScript functions, React components return JSX elements that are used to structure our application interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript function: returns any valid JavaScript type&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;javascriptFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// React function component: returns JSX&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note the different casing between the names of JavaScript functions and React function components. JavaScript functions are named in camel casing, while React function components are written with pascal casing (in which all words are capitalized).&lt;/p&gt;

&lt;p&gt;There are two different ways to write a function in JavaScript. The traditional way, using the &lt;code&gt;function&lt;/code&gt; keyword, called a &lt;strong&gt;function declaration&lt;/strong&gt;. And as an &lt;strong&gt;arrow function&lt;/strong&gt;, which was introduced in ES6.&lt;/p&gt;

&lt;p&gt;Either function declarations or arrow functions can be used to write function components in React. The primary benefit of arrow functions is their succinctness. We can use several shorthands in order to write our functions to remove unnecessary boilerplate, such that we can even write it all on a single line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function declaration syntax&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax (shorthand)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
&lt;span class="cm"&gt;/*
In the last example we are using several shorthands that arrow functions allow:

1. No parentheses around a single parameter
2. Implicit return (as compared to using the "return" keyword)
3. No curly braces for function body
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One small benefit of using function declarations over arrow functions is that you don't have to worry about problems with &lt;strong&gt;hoisting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Due to the JavaScript behavior of hoisting, you can use multiple function components made with function declarations in a single file in whichever order you like. Function components made with arrow functions, however, cannot be ordered whichever way you like. Because JavaScript variables are hoisted, arrow function components must be declared before they are used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Valid! FunctionDeclaration is hoisted */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FunctionDeclaration&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Invalid! ArrowFunction is NOT hoisted. Therefore, it must be declared before it is used */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArrowFunction&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FunctionDeclaration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ArrowFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;again&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another small difference between using the function declaration syntax is that you can immediately export a component from a file using &lt;code&gt;export default&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt; before the function is declared. You can only use the &lt;code&gt;export&lt;/code&gt; keyword before arrow functions (default exports must be placed on a line below the component).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function declaration syntax can be immediately exported with export default or export&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax must use export only&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-template-literals" class="anchor"&gt;
  &lt;/a&gt;
  2. Template Literals
&lt;/h2&gt;

&lt;p&gt;JavaScript has a clumsy history of working with strings, particularly if you want to &lt;strong&gt;concatenate&lt;/strong&gt; or connect multiple strings together. Before the arrival of ES6, to add strings together, you needed to use the &lt;code&gt;+&lt;/code&gt; operator to add each string segment to one another.&lt;/p&gt;

&lt;p&gt;With the addition of ES6, we were given a newer form of string called a &lt;strong&gt;template literal&lt;/strong&gt;, which consists of two back ticks instead of single or double quotes. Instead of having to use the &lt;code&gt;+&lt;/code&gt;operator, we can connect strings by putting a JavaScript expressions (such as a variable), within a special &lt;code&gt;${}&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Concatenating strings prior to ES6.
Notice the awkward space after the word Hello?
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello React!&lt;/span&gt;

&lt;span class="cm"&gt;/*
Concatenating strings using template literals.
See how much more readable and predictable this code is?
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHelloAgain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello again, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sayHelloAgain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello again, React!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's powerful about template literals is its ability to use any JavaScript expression (that is, anything in JavaScript that resolves to a value) within the &lt;code&gt;${}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;We can even include conditional logic using the ternary operator, which is perfect for conditionally adding or removing a class or style rule to a given JSX element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isRedColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRedColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setRedColor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isRedColor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isRedColor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In short, template literals are great for React whenever we need to dynamically create strings. For example, when we use string values that can change in our head or body elements in our site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Shows site name (i.e. Reed Barger) at end of page title&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | Reed Barger`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-short-conditionals-ampamp-ternary-operator" class="anchor"&gt;
  &lt;/a&gt;
  3. Short Conditionals: &amp;amp;&amp;amp;, ||, Ternary Operator
&lt;/h2&gt;

&lt;p&gt;Considering React is just JavaScript, it is very easy to conditionally show (or hide) JSX elements using simple if statements and sometimes switch statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Who&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the help of some essential JavaScript operators, we cut down on repetition and make our code more concise. We can transform the if statement above in to the following, using the &lt;strong&gt;ternary operator.&lt;/strong&gt; The ternary operator functions exactly the same as an if-statement, but it is shorter, is an expression (not a statement), and can be inserted within JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt; : &amp;lt;div&amp;gt;Who are you&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ternary operators can also be used inside curly braces (again, since it is an expression):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome back!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Who are you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we were to change the example above and only wanted to show text if the user was logged in (if &lt;code&gt;isLoggedIn&lt;/code&gt; is true), this would be a great use case for the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and) operator.&lt;/p&gt;

&lt;p&gt;If the first value (&lt;strong&gt;operand&lt;/strong&gt;) in the conditional is true, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator displays the second operand. Otherwise it returns the first operand. And since it is &lt;strong&gt;falsy&lt;/strong&gt; (is a value automatically converted to the boolean &lt;code&gt;false&lt;/code&gt; by JavaScript), it is not rendered by JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// If true: Welcome back!, if false: nothing&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome back!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's say that we want the reverse of what we're doing now: to only say "Who are you?" if &lt;code&gt;isLoggedIn&lt;/code&gt; is false. If it's true, we won't show anything.&lt;/p&gt;

&lt;p&gt;For this logic, we can use the &lt;code&gt;||&lt;/code&gt; (or) operator. It essentially works opposite to the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator. If the first operand is true, the first (falsy) operand is returned. If the first operand is false, the second operand is returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// If true: nothing, if false: Who are you?&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Who are you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-three-array-methods-map-filter-reduce" class="anchor"&gt;
  &lt;/a&gt;
  4. Three Array Methods: .map(), .filter(), .reduce()
&lt;/h2&gt;

&lt;p&gt;Inserting primitive values into JSX elements is easy, just use curly braces.&lt;/p&gt;

&lt;p&gt;We can insert any valid expressions, including variables that contain primitive values (strings, numbers, booleans, etc) as well as object properties that contain primitive values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;years&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Speaks&lt;/span&gt; &lt;span class="nx"&gt;English&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What if we have an array and we want to iterate over that array to show each array element within an individual JSX element?&lt;/p&gt;

&lt;p&gt;For this, we can use the &lt;strong&gt;&lt;code&gt;.map()&lt;/code&gt;&lt;/strong&gt; method. It allows us to transform each element in our array in the way we specify with the inner function.&lt;/p&gt;

&lt;p&gt;Note that it is especially concise when used in combination with an arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Note that this isn't exactly the same as the normal JavaScript .map() method, but is very similar. */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are other flavors of the .map() method that perform related tasks and are important to know because they can be chained in combination with one another.&lt;/p&gt;

&lt;p&gt;Why? Because &lt;code&gt;.map()&lt;/code&gt;, like many array methods returns a shallow copy of the array that it has iterated over, which enables it's returned array to be passed onto the next method in the chain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;.filter()&lt;/code&gt;&lt;/strong&gt;, as its name indicates, allows us to filter certain elements out of our array. For example, if we wanted to remove all names of programmers that started with "J", we could do so with &lt;code&gt;.filter()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Returns 'Reed' */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;J&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's important to understand that both &lt;code&gt;.map()&lt;/code&gt; and &lt;code&gt;.filter()&lt;/code&gt; are just different variations of the &lt;strong&gt;&lt;code&gt;.reduce()&lt;/code&gt;&lt;/strong&gt; array method, which is capable of transforming array values into virtually any data type, even non-array values.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;.reduce()&lt;/code&gt; performing the same operation as our &lt;code&gt;.filter()&lt;/code&gt; method above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Returns 'Reed' */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;J&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-object-tricks-property-shorthand-destructuring-spread-operator" class="anchor"&gt;
  &lt;/a&gt;
  5. Object Tricks: Property Shorthand, Destructuring, Spread Operator
&lt;/h2&gt;

&lt;p&gt;Like arrays, objects are a data structure that you need to be comfortable with when using React.&lt;/p&gt;

&lt;p&gt;Since objects exist for the sake of organized key-value storage, unlike arrays, you're going to need to be very comfortable accessing and manipulating object properties.&lt;/p&gt;

&lt;p&gt;To add properties to an object as you create it, you name the property and it's corresponding value. One very simple shorthand to remember is that if the property name is the same as the value, you only have to list the property name.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;object property shorthand&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of name: name, we can use...&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Reed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The standard way to access properties from an object is using the dot notation. An even more convenient approach, however, is &lt;strong&gt;object destructuring&lt;/strong&gt;. It allows us to extract properties as individual variables of the same name from a given object.&lt;/p&gt;

&lt;p&gt;It looks somewhat like you're writing an object in reverse, which is what makes the process intuitive. It's much nicer to use than having to use the object name multiple times to access each time you want to grab a value from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Dot property access&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Object destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;knowsEnglish&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Use ':' to rename a value as you destructure it&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;knowsEnglish&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now if you want to create objects from existing ones, you could list properties one-by-one, but that can get very repetitive.&lt;/p&gt;

&lt;p&gt;Instead of copying properties manually, you can spread all of an object's properties into another object (as you create it) using the &lt;strong&gt;object spread operator&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Copy all of user's properties into secondUser&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What is great about the object spread is that you can spread in as many objects into a new one as you like, and you can order them like properties. But be aware that properties that come later with the same name will overwrite previous properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moreUserInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Copy all of user's properties into secondUser&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;moreUserInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MacBook Pro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { name: "Reed", age: 70, country: "USA", computer: "Macbook Pro" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-promises-asyncawait-syntax" class="anchor"&gt;
  &lt;/a&gt;
  6: Promises + Async/Await Syntax
&lt;/h2&gt;

&lt;p&gt;Virtually every React application consists of &lt;strong&gt;asynchronous code&lt;/strong&gt;--code that takes a indefinite amount of time to be executed. Particularly if you need to get or change data from an external API using browser features like the &lt;strong&gt;Fetch API&lt;/strong&gt; or the third-party library &lt;strong&gt;axios&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Promises are used to resolve asynchronous code to make it resolve like normal, synchronous code, which we can read from top to bottom. Promises traditionally use callbacks to resolve our asynchronous code. We use the &lt;code&gt;.then()&lt;/code&gt; callback to resolve successfully resolved promises, while we use the &lt;code&gt;.catch()&lt;/code&gt; callback to resolve promises that respond with an error.&lt;/p&gt;

&lt;p&gt;Here is a real example of using React to fetch data from my Github API using the Fetch API to show my profile image. The data is resolved using promises:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*
      The first .then() let's us get JSON data from the response.
      The second .then() gets the url to my avatar and puts it in state.
    */&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/users/reedbarger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching data: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Instead of always needing to use callbacks to resolve our data from a promise, we can use a cleaned syntax that looks identical to synchronous code, called the &lt;strong&gt;async/await syntax&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The async and await keywords are only used with functions (normal JavaScript functions, not React function components. To use them, we need to make sure our asynchronous code is in a function prepended with the keyword &lt;code&gt;async&lt;/code&gt;. Any promise's value can then be resolved by placing the keyword &lt;code&gt;await&lt;/code&gt; before it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*
    Note that because the function passed to useEffect cannot be async, we must create a separate function for our promise to be resolved in (fetchAvatar)
    */&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/users/reedbarger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;.catch()&lt;/code&gt; callback to handle errors within traditional promises, but how do you catch errors with async/await?&lt;/p&gt;

&lt;p&gt;We still use &lt;code&gt;.catch()&lt;/code&gt; and when we hit an error, such as when we have a response from our API that is in the 200 or 300 status range:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/* Using an invalid user to create a 404 (not found) error */&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/users/reedbarge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`An error has occured: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cm"&gt;/* In development, you'll see this error message displayed on your screen */&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-es-modules-import-export-syntax" class="anchor"&gt;
  &lt;/a&gt;
  7. ES Modules + Import / Export syntax
&lt;/h2&gt;

&lt;p&gt;ES6 gave us the ability to easily share code between our own JavaScript files as well as third-party libraries using &lt;strong&gt;ES modules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, when we leverage tools like Webpack, we can import assets like images and svgs, as well as CSS files and use them as dynamic values in our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* We're bringing into our file a library (React), a png image, and CSS styles */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../img/site-logo.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/app.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Site logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The idea behind ES modules is to be able to split up our JavaScript code into different files, to make it modular or reusable across our app.&lt;/p&gt;

&lt;p&gt;As far as JavaScript code goes, we can import and export variables and functions. There are two ways of importing and exporting, as &lt;strong&gt;named imports/exports&lt;/strong&gt; and as &lt;strong&gt;default imports/exports&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There can only be one thing we make a default import or export per file and we can make as many things named imports/export as we like. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="c1"&gt;// Notice that named exports are imported between curly braces&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can also write all of the exports at the end of the file instead of next to each variable or function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also alias or rename what you are importing using the &lt;code&gt;as&lt;/code&gt; keyword for named imports. The benefit of default exports is that they can be named to whatever you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getMyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMyName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-the-time-it-takes-to-watch-your-favorite-tv-show-you-can-start-a-100000-year-career-with-react" class="anchor"&gt;
  &lt;/a&gt;
  In the time it takes to watch your favorite TV show, you can start a $100,000 / year career with React.
&lt;/h3&gt;

&lt;p&gt;In this premium React training course, you can unlock the knowledge, skills, and confidence that deliver life-changing results in real dollars.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when the course opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Secure JWT in a Single-Page Application</title>
      <author>Nilanth</author>
      <pubDate>Sat, 16 Jan 2021 13:31:35 +0000</pubDate>
      <link>https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko</link>
      <guid>https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko</guid>
      <description>&lt;p&gt;Securely make JWT based authentication in React Application.&lt;/p&gt;

&lt;p&gt;In this article, we will see how to securely store the JWT token in a single page app for authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-all-the-options-we-have-to-store-the-token-in-the-browser" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are all the options we have to store the token in the browser?&lt;/strong&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Local storage&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-local-storage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Local Storage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Is local storage is secure to store a token? Let see now, Local storage is accessible from client-side only, so your API provider will set the JWT in the API response Authorization header as a bearer token in login or Register API if the status success. In React, we will get the JWT and store it in the local storage as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odFXOQo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201583916/BySZXl1Q-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odFXOQo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201583916/BySZXl1Q-.png" alt="image_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPYqqfuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201607785/o-kO4i1HJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPYqqfuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201607785/o-kO4i1HJ.png" alt="image_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for the subsequent request made from the react app, the JWT is taken from local storage and set in the API request Authorization header to maintain the user session&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mf-omBW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201616626/-6pHlUeoE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mf-omBW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201616626/-6pHlUeoE.png" alt="image_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Values in local storage are accessible by javascript, so any cross-site script can get the JWT from local storage and gain your account access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doTCApD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201625400/nMy_EhpMS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doTCApD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201625400/nMy_EhpMS.png" alt="image_4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we should &lt;strong&gt;not use local storage for storing&lt;/strong&gt; JWT if you are using, Please update your authentication architecture as local storage is not secure to store a token. Next, let's move to memory&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-memory-react-state" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Memory (React State)&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;React state variables will be assigned to default values when the app is refreshed or opened in a new tab, so if the default values are null, when the app is refreshed or opened in a new tab it will be set to null, so when we set the JWT in state variable it will disappear, so the user need to log in each time the app is refreshed or opened in a new tab or the app is closed, it will be poor User Experience. So we cannot store the JWT in the state variable.&lt;/p&gt;

&lt;p&gt;Before moving to &lt;strong&gt;JWT in cookie&lt;/strong&gt;, Let’s see about what is a cookie and its major attributes&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cookie" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cookie&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie is another storage option available in a browser which has a expire time also, cookie also have some useful attributes to secure it from cross-site scripting (XSS) attacks. Let see what are they in detail&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#httponly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HttpOnly&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with HttpOnly attribute is not accessible by Javascript, so we cannot get the cookie as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let cookie= document.cookie; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HttpOnly&lt;/strong&gt; cookie can be set and accessed only by the server-side script. This attribute helps to prevent cross-site scripting(XSS) attacks if it’s set with &lt;strong&gt;SameSite=strict&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#secure" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Secure&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with &lt;strong&gt;Secure&lt;/strong&gt; attribute will be sent to the server only over the HTTPS request, not in an HTTP request. The &lt;strong&gt;Secure&lt;/strong&gt; cookie is encrypted in request and response, so &lt;strong&gt;Man-in-the-middle&lt;/strong&gt; attack is prevented by using Secure attribute with &lt;strong&gt;HttpOnly&lt;/strong&gt; and &lt;strong&gt;SameSite=strict&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#samesite" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SameSite&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with &lt;strong&gt;SameSite=strict&lt;/strong&gt; mentions that the cookie is available only for same site origin request not for cross-site request. Now let see how to use the cookie to store JWT.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-cookie" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Cookie&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie can be set from the server-side and also in client-side, First we can see how to set and get the JWT from the cookie in the React and using the browser console.&lt;/p&gt;

&lt;p&gt;The server set the JWT as a Bearer token in the Authorization response header, In client-side, the script has access to the token present in the header, we get the token from response header and set in the cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJDxpZLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201653012/obo0gzlkY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJDxpZLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201653012/obo0gzlkY.png" alt="image_5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUbMh4OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201662218/I9lcm_i7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUbMh4OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201662218/I9lcm_i7i.png" alt="image_6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cookie is set to the current domain by default and expiry date is set to 1st Jan 2021. The expiry date is based on the token validity so the token will be removed from browser cookie once the expiry date reaches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oT1e_6xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201672163/EBazPMiSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oT1e_6xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201672163/EBazPMiSL.png" alt="image_7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cookie needs to send as a bearer token in API request header on every request made from the client. So, for that, we can get it from the cookie using &lt;strong&gt;document.cookie&lt;/strong&gt; property as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mY_qc52H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201679706/RD0LxcIUd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY_qc52H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201679706/RD0LxcIUd.png" alt="image_8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;document.cookie will return all cookies present against the domain, so we can use  &lt;a href="https://github.com/reactivestack/cookies/tree/master/packages/react-cookie"&gt;react-cookie&lt;/a&gt;  package to get a specific cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwlmtGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201736323/WwLy9vpn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwlmtGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201736323/WwLy9vpn3.png" alt="image_9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see that the token is set and get using the script, so we could conclude that handling JWT in the react will lead to XSS (Cross-Site Scripting) attacks same as we saw before while using local storage, but we saw two attributes earlier &lt;strong&gt;HttpOnly&lt;/strong&gt; and &lt;strong&gt;Secure&lt;/strong&gt;, by setting these attributes will avoid these attacks. But javascript has no access to &lt;strong&gt;HttpOnly&lt;/strong&gt; attribute, Only server-side script can access &lt;strong&gt;HttpOnly&lt;/strong&gt; attributes. Let see how we can set the JWT from Server Side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As previous examples, we saw that JWT is set as Bearer token in authorization header, But handling cookie in server-side we need set the cookie in &lt;strong&gt;Set-Cookie&lt;/strong&gt; header and not required to mention the token type as &lt;strong&gt;Bearer&lt;/strong&gt;, we can set the JWT directly in &lt;strong&gt;Set-Cookie&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here I am using Express.js to set JWT in the cookie from the server and we have set &lt;strong&gt;secure&lt;/strong&gt; and &lt;strong&gt;HttpOnly&lt;/strong&gt; as &lt;strong&gt;true&lt;/strong&gt; to restrict the javascript access of JWT in the cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jNQjHZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201767558/mmy3KhwL5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jNQjHZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201767558/mmy3KhwL5.png" alt="image_10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The token in API response &lt;strong&gt;Set-Cookie&lt;/strong&gt; header will be saved to browser cookies like in below image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEsMFAIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201775244/hjnVvFaA6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEsMFAIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201775244/hjnVvFaA6.png" alt="image_11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1X1gjoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201802381/mi0YCETcW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1X1gjoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201802381/mi0YCETcW.png" alt="image_12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JWT stored in the cookie will be appended in every API request headers automatically as below images&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J42vjG_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201843110/EhyEAmcZe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J42vjG_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201843110/EhyEAmcZe.png" alt="image_13.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBfiUh8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201851434/fqtg_d22v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBfiUh8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201851434/fqtg_d22v.png" alt="image_14.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But remember that this approach only works if the React app and the BackEnd server hosted in &lt;strong&gt;same domain.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now your app is secured from Cross-Site Scripting (XSS) attacks.&lt;/p&gt;

</description>
      <category>react</category>
      <category>security</category>
      <category>cookies</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Have you ever managed a team?</title>
      <author>Madza</author>
      <pubDate>Sat, 16 Jan 2021 12:56:07 +0000</pubDate>
      <link>https://dev.to/madza/have-you-ever-managed-a-team-436n</link>
      <guid>https://dev.to/madza/have-you-ever-managed-a-team-436n</guid>
      <description>&lt;p&gt;Great team management is one of the main cornerstones of any successful business. Without it, it can be difficult to rally your employees to work toward common goals and perform at their best.&lt;/p&gt;

&lt;p&gt;Have you ever been in charge of managing a team?&lt;/p&gt;

&lt;p&gt;If so, what are some notable lessons you have learned from your personal experience? What are some of the most important skills to have?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>business</category>
      <category>management</category>
    </item>
    <item>
      <title>Why I switched to Pop_OS?</title>
      <author>Krishnakanth Alagiri</author>
      <pubDate>Sat, 16 Jan 2021 11:53:36 +0000</pubDate>
      <link>https://dev.to/bearlike/why-i-switched-to-popos-16b8</link>
      <guid>https://dev.to/bearlike/why-i-switched-to-popos-16b8</guid>
      <description>&lt;p&gt;As of 2020, Windows is still the dominant desktop OS comprising nearly 90% of it's demographic and I was in it for over 14 years. It was initially fast but as time progressed, the Windows updates stacked up along with previously installed softwares. Adding gasoline to the fire, Windows decided to bake advertisements and even more telementary services right into the operating system.&lt;/p&gt;

&lt;p&gt;Then one day, I wanted to print a theatre ticket in a rush and turned on my computer only to see...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-Iw4sS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/AwkKfb9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-Iw4sS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/AwkKfb9.gif" alt="windows-updating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I finally chose to migrate to Linux and after careful experimentations with various distros and DEs, I came across &lt;a href="https://pop.system76.com/"&gt;&lt;em&gt;Pop!_OS&lt;/em&gt;&lt;/a&gt; by &lt;em&gt;System76&lt;/em&gt; and loved it straight out of the box.&lt;/p&gt;

&lt;p&gt;So why do I have so much love for a Ubuntu based distribution? Well, let me explain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-linux-is-free-and-thats-a-great-price" class="anchor"&gt;
  &lt;/a&gt;
  1. Linux is free and that's a great price!
&lt;/h2&gt;

&lt;p&gt;This is true not only for the operating system and the kernel but also for all the software that comes bundled with it. Also in most cases, there will be an open-source alternative for any paid application in Windows like the LibreOffice Suite instead of Microsoft Office.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXys5udS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/PcCGN1T.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXys5udS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/PcCGN1T.gif" alt="free-real-estate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-popos-is-beautiful-and-functional" class="anchor"&gt;
  &lt;/a&gt;
  2. Pop!_OS is beautiful and functional.
&lt;/h2&gt;

&lt;p&gt;Now to the fun part. Pop!_OS is undoubtedly one of the best-looking desktop environments I have ever used. I would suppose it is tied with Elementary OS, Deepin and Budgie DE. While it's Gnome desktop environment, has its fair share of criticisms, it does hold true to its values of getting out of your way to get work done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3XEAskV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/overall.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3XEAskV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/overall.jpg" alt="kk-popos"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;GNOME has no active task management, no desktop icons, no application menu, no dock or taskbar. Activities are an easy concept but coming from Windows, I took a while to get used to switching windows through the activities or the keyboard. &lt;/p&gt;

&lt;p&gt;However, if the default design and working are not up to your fondness, then you can customize and tweak it however you want using the GNOME Tweak Tool. You can even make it to look and behave like macOS or Windows complete with a start menu. &lt;/p&gt;

&lt;p&gt;As far as functionality goes, if you are used to GNOME then you will feel at home in Pop!_OS. You boot straight to your desktop, and the system tray is pretty minimal by default helping you focus on whatever you're onto. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automatic-window-tiling" class="anchor"&gt;
  &lt;/a&gt;
  Automatic Window Tiling
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAyDyGrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/window_tile.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAyDyGrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/window_tile.jpg" alt="Automatic Window Tiling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As of Pop!_OS 20.04, it has released an automatic window tiling manager. This enables you to tile and arranges all open windows at the click of a button which is remarkably helpful when multitasking.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#popos-makes-life-easier-for-developers" class="anchor"&gt;
  &lt;/a&gt;
  Pop!_OS makes life easier for Developers.
&lt;/h4&gt;

&lt;p&gt;Pop!_OS can do everything Ubuntu can do. But its dedicated tools, attractive looks, and refined work flow provide a smooth Development. It supports tons of programming languages and useful programming tools natively. Nvidia drivers with CUDA support comes preinstalled which enables developers to speed up compute-intensive applications.&lt;/p&gt;

&lt;p&gt;There are features like the New Keyboard shortcuts, Increased Compatibility, New App launcher and even more that you shoud take a look at. Overall, The Pop!_OS is smooth, functional, and melts right into the background just as it was intended to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-popstore-has-everything" class="anchor"&gt;
  &lt;/a&gt;
  3. Pop!_Store has Everything.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPWaANli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/Popshop.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPWaANli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/Popshop.jpg" alt="Pop Shop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pop!_Shop is a software store for Pop!_OS as to Play Store is for Android. Here, you can search and install any package with just a click of a button. To add more power to the store, Pop 20.04 brings Flatpak support to Pop Shop. This implies that if you want to download any application, you can now also pull packages from the Flathub repository along with Pop!_OS and Ubuntu repo.&lt;/p&gt;

&lt;p&gt;Flatpak/Flathub is a widely recognised universal package management tool and store that contains a number of applications. &lt;strong&gt;&lt;a href="https://thekrishna.in/blogs/blog/linux-packages/"&gt;You can learn more about Flatpaks in my previous post&lt;/a&gt;&lt;/strong&gt;. Hence, you now have access to more packaged applications with high privacy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-nvidia-driver-situation" class="anchor"&gt;
  &lt;/a&gt;
  4. The "Nvidia Driver" Situation.
&lt;/h2&gt;

&lt;p&gt;Nearly all major Linux distributions have come a long way in the past 2 years in making the proprietary Nvidia driver available to their users. Here again, there’s a subtle yet a functional difference in the way Pop!_OS handles Nvidia drivers compared to its alternatives that hybrid graphics laptop users like me would especially appreciate.&lt;/p&gt;

&lt;p&gt;When you download the Nvidia version of the Pop!_OS ISO, the Nvidia graphics driver is active during the OS installation process, not merely “available” to install. That means no risk of perplexing black screens which is more common with the open-source “Nouveau” driver for Nvidia hardware. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qk9mhl58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/assets/img/blogs/pop-os/Hybrid.jpg%3Ftr%3Dh-440" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qk9mhl58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/assets/img/blogs/pop-os/Hybrid.jpg%3Ftr%3Dh-440" alt="kk-hybrid-graphics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hybrid-graphics" class="anchor"&gt;
  &lt;/a&gt;
  Hybrid Graphics
&lt;/h4&gt;

&lt;p&gt;Pop!_OS supports hybrid graphics straight out of the box. It includes the &lt;code&gt;system76-power&lt;/code&gt; package, which includes the ability to switch between integrated, NVIDIA, and hybrid graphics modes.&lt;br&gt;
This means once you launch your application in Hybrid Graphics mode with a dedicated Graphics card, your laptop runs on the battery-saving Intel GPU and only uses the NVIDIA GPU for applications running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-privacy-control-and-support" class="anchor"&gt;
  &lt;/a&gt;
  5. Privacy, Control and Support
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#privacy-and-security" class="anchor"&gt;
  &lt;/a&gt;
  Privacy and Security
&lt;/h4&gt;

&lt;p&gt;While no operating system is absolutely risk-free, Windows is a big target for viruses and malware due to its majority market share. With Linux as a whole, you only need to be smart, stick to trusted software repositories, and avoid using risky programs such as Adobe Flash or free_ram.sh. Linux is more secure than Windows primarily because of the way it's designed and handles user permissions. This is one reason why most of the web runs on Linux. Since most packages you install would be open-source, their codebase is public and would have been reviewed by more developers for bugs and security vulnerabilities.&lt;/p&gt;

&lt;p&gt;Speaking of security, Pop!_OS is so far the only Linux distribution that enables pre-installed full-disk encryption out of the box. Moreover, you can use the ‘Refresh install’ feature to reset your operating system while preserving the files in your Home folder.&lt;br&gt;
Windows chooses when to install updates, and it displays a message declaring that your computer is going to be rebooted. While with most linux distros, you get to decide when those updates are installed, and in most cases, the updates are installed without rebooting the system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#control" class="anchor"&gt;
  &lt;/a&gt;
  Control
&lt;/h4&gt;

&lt;p&gt;Compared to Windows or macOS, Linux support is easier to find, and there are dozens of forums, subreddits, chat rooms, and even more websites committed to helping people receive and understand Linux. Unlike Microsoft support, which is mostly from an employee, Linux support usually comes from enthusiasts and developers.&lt;/p&gt;

&lt;p&gt;Every single part of your Distribution can be adjusted if you have the time, will and support. KDE Fan? Remove GNOME from Pop!_OS and install KDE Instead. System services slowing your boot? Disable and mask them. In fact, you can even write your own scripts and packages if you have the time and effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-recommendations" class="anchor"&gt;
  &lt;/a&gt;
  Personal Recommendations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-install-refind-boot-manager" class="anchor"&gt;
  &lt;/a&gt;
  1. Install rEFInd Boot Manager
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Visit &lt;a href="https://www.rodsbooks.com/refind/"&gt;rEFInd Documentation&lt;/a&gt; for Installation and theming instructions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W_auGRn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/refind.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W_auGRn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/refind.jpg" alt="kk-refind-boot-manager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're Dual Booting Windows and Pop!_OS, I highly recommend you to use rEFInd Boot Manager instead/on-top of the systemd-bootloader. I had to manually adjust both GRUB and systemd-boot configurations every time Windows had a major update, while rEFInd scans for kernels on every boot and is more adaptive and is less reliant on configuration files. Plus rEFInd has more eye candy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-bridging-gaps-between-oses-in-a-system" class="anchor"&gt;
  &lt;/a&gt;
  2. Bridging gaps between OSes in a system
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#21-why-didnt-i-delete-windows-for-good" class="anchor"&gt;
  &lt;/a&gt;
  2.1 Why didn't I delete Windows for good?
&lt;/h4&gt;

&lt;p&gt;Despite Linux growing better every day, there are still a lot of programs, softwares and hardware that are exclusively made for Windows due to majority market share and the open-source alternatives are not essentially good enough. Adobe Photoshop, Microsoft Office and Epic Games Stores are a great example of it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#22-create-a-common-partition" class="anchor"&gt;
  &lt;/a&gt;
  2.2 Create a common partition
&lt;/h4&gt;

&lt;p&gt;If you're dual-booting Windows and any other Linux Distibution(s), I strongly advice to &lt;strong&gt;turn off Fast Startup&lt;/strong&gt; in Windows as they make all accessible filesystem read-only in Linux until you fully shut down you Windows. Create an extra NTFS partition for all your OSes to coexist and share common files peacefully.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#23-install-wine-and-create-a-windows-virtual-machine" class="anchor"&gt;
  &lt;/a&gt;
  2.3 Install WINE and create a Windows Virtual Machine
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_MLkobs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/win10-vm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_MLkobs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-1366/assets/img/blogs/pop-os/win10-vm.jpg" alt="kk-vm-win10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not every Windows Program has it's equal Open-Source Linux Alternative so if you're lucky (or savvy) enough, your program might run using Wine on Linux. &lt;a href="https://appdb.winehq.org/"&gt;You can check your application's compatibility on Wine here&lt;/a&gt;. Platforms like &lt;a href="https://lutris.net/"&gt;Lutris&lt;/a&gt; can even install and launch games so you can start playing without the hassle of setting up your games with Wine Linux powered machine. If you can't find your program on the database, give it a shot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oY1c6XBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-580/assets/img/blogs/pop-os/lutris.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oY1c6XBs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/kk57/tr:w-580/assets/img/blogs/pop-os/lutris.jpg" alt="lutris"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Popular programs like Microsoft Office still doesn't have great compatibility with Wine. So if Wine doesn't work for your program, create a small Windows Virtual Machine and run on it. I created mine using &lt;strong&gt;&lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/"&gt;Windows 10 Development Virtual Machines provided by Microsoft&lt;/a&gt;&lt;/strong&gt;. However, power-demanding programs like Adobe Photoshop still don't well on Virtual Machines and here's is where you have no other option than to boot into your Windows Host.&lt;/p&gt;

</description>
      <category>popos</category>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Decoding Developer Relations in a Blog</title>
      <author>Manbir Singh Marwah</author>
      <pubDate>Sat, 16 Jan 2021 11:21:05 +0000</pubDate>
      <link>https://dev.to/manbir/decoding-developer-relations-in-a-blog-5823</link>
      <guid>https://dev.to/manbir/decoding-developer-relations-in-a-blog-5823</guid>
      <description>&lt;p&gt;If you're working in the software industry as an engineer or a CxO, or a student majoring in a technical program, or even if you're actively indulged on the social space, chances are that you've come across the DevRel hype by now (and it's totally cool if you haven't, yet). But what exactly is it, and why is it there anyway? This very piece of text aims to introduce you to the &lt;em&gt;'what', 'why' and 'how'&lt;/em&gt; of DevRel along with a few extra bits. So, as &lt;em&gt;Ed Sheeran&lt;/em&gt; says, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"...just dive right in, and follow my lead!"&lt;/em&gt; 🎶&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlUfYeai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRJbNnx-fUvIHLytmI-RW5GkCL7sma6ymPNrA%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlUfYeai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRJbNnx-fUvIHLytmI-RW5GkCL7sma6ymPNrA%26usqp%3DCAU" width="80%"&gt;&lt;/a&gt;&lt;/p&gt;
DevRelCon London 2018






&lt;h2&gt;
  &lt;a href="#the-what" class="anchor"&gt;
  &lt;/a&gt;
  The 'What'
&lt;/h2&gt;

&lt;p&gt;Developer Relations or DevRel is a domain that revolves mostly around software and incorporates people who work as a bridge (and sometimes a router, switch, or gateway 👀 &lt;em&gt;&lt;a href="https://www.geeksforgeeks.org/network-devices-hub-repeater-bridge-switch-router-gateways/"&gt;ref:networking&lt;/a&gt;&lt;/em&gt;) between &lt;strong&gt;products&lt;/strong&gt; (such as APIs, developer platforms or open-source projects) and &lt;strong&gt;developers&lt;/strong&gt;, the backbone of software industry. There are dedicated Developer Relations teams at startups and corporations as they consist of engineers themselves who understand the software ecosystem and developer psychology as a whole so as to serve like a support system. In simpler terms, they make the flow of tech easy while ensuring a mutual growth of people and the business through an intersection, that is 'community'. Sounds cool? Let's intensify.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-why" class="anchor"&gt;
  &lt;/a&gt;
  The 'Why'
&lt;/h2&gt;

&lt;p&gt;Developer Relations rely on three core pillars: &lt;strong&gt;Code&lt;/strong&gt;, &lt;strong&gt;Content&lt;/strong&gt; and &lt;strong&gt;Community&lt;/strong&gt;—popularly known as &lt;em&gt;The 3C Architecture&lt;/em&gt;. So DevRel folks perform a bit of tech, research, marketing, community management and entrepreneurship (some even being CxOs themselves), providing a sense of &lt;em&gt;belongingness&lt;/em&gt; to people around a product. This is done to achieve (but not limited to) the following goals:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Empower people to build products and nurture innovation&lt;/li&gt;
&lt;li&gt;Educate not just developers, but anyone and everyone to learn and stay updated with a technology &lt;/li&gt;
&lt;li&gt;Build trust, which in turn helps in building long-term relationships&lt;/li&gt;
&lt;li&gt;Create a communication loop to drive feedback from users (developers/engineers) to the internal teams behind a product&lt;/li&gt;
&lt;li&gt;Work directly/indirectly with the PMs and stakeholders to define and iterate on KPIs for the product's success&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-how" class="anchor"&gt;
  &lt;/a&gt;
  The 'How'
&lt;/h2&gt;

&lt;p&gt;Now that we know what exactly DevRel is and why it's there, let's take a look at everything these superheroes do. Even though it's tough to sum-up everything in a list, the day-to-day work of a DevRel may include:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating content, such as code samples, blogs, articles, video tutorials, documentation, podcasts, etc depending on various use cases&lt;/li&gt;
&lt;li&gt;Presenting wherever developers are; be it virtual or in-person conferences, workshops, meetups or tech-conclaves. They literally fly across the globe, just for people! :')&lt;/li&gt;
&lt;li&gt;Mentoring and judging at hackathons and ideathons&lt;/li&gt;
&lt;li&gt;Staying updated with major technological changes in the industry &lt;/li&gt;
&lt;li&gt;Engaging with people, managing resources and logistics, being a social influencer and thought leader &lt;/li&gt;
&lt;li&gt;Amplifying the voices of developers; this includes any work such as projects, blogs, call for contributions, event CFPs, etc.
&lt;/li&gt;
&lt;li&gt;Coming up with &lt;em&gt;'jugaad'&lt;/em&gt; (an Indian word translating to 'a non resource-intensive hack') for modern (read: unconventional 👀) software development. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZVLHdUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/kwEmwFUWO5Ety/giphy.gif%3Fcid%3D82a1493bffdx78lef76gmyoev0zry2viy6tbp6pbz2ffysge%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZVLHdUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/kwEmwFUWO5Ety/giphy.gif%3Fcid%3D82a1493bffdx78lef76gmyoev0zry2viy6tbp6pbz2ffysge%26rid%3Dgiphy.gif" width="70%/"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#roles-associated-to-developer-relations" class="anchor"&gt;
  &lt;/a&gt;
  Roles associated to Developer Relations
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer Advocates&lt;/strong&gt; are those who have some sort of technical background, whether a CS/IT degree, experience in coding either professionally or through working on projects and contributing to the developer communities through content and events. They understand how a product could fit in various use-cases and hold the magic to make people fall in love with the product. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tech Community Managers&lt;/strong&gt; are the folks who may or may not have a coding experience, but are passionate about the tech space and helping people as a whole. They are pro-communicators and have a great understanding on how to influence people for good while ensuring active engagements from the community members and handling the logistics involved. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Developer Evangelists&lt;/strong&gt; are the true ambassadors or Chief Tech Facilitators (CTF - did I just coin a new term there? 👀) aka people with a mic, having a deeper understanding about a product and the wizards who make complex things feel easy. They preach exactly about all the value and goodness that a product provides. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Product / Program Managers&lt;/strong&gt; are the leaders who understand the tech + business perspective of a product inside out. By working directly with the engineering teams, they define the success metrics while understanding the dynamics of shaping a product, and empower people to turn ideas into reality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Growth Hackers and Marketers&lt;/strong&gt; are those creative heads who drive the graphs of product adoption and build a living, breathing, loyal user base. This is done through marketing and outreach strategies (that often build a 'hype' in the industry) via social channels, emails, blogs and newsletters. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Fun fact: Long time back, someone in the DevRel space had a hard time pronouncing 'Developer Advocate' and ended up pronouncing it as 'Developer Avocado' instead, resulting in the popular reference of avocado (hence the emoji) with advocates and eventually, DevRel professionals.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpstMJHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/TZ2oBnEvY9iMgJWuRS/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpstMJHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/TZ2oBnEvY9iMgJWuRS/giphy.webp" width="50%/"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-business-model" class="anchor"&gt;
  &lt;/a&gt;
  The Business Model
&lt;/h2&gt;

&lt;p&gt;Different companies have different ways of approaching the developer community. Consider it as a coin with these two sides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Developers-first&lt;/em&gt;: These are the organizations that work on a B2D model (Business to Developer), and the product itself is purely oriented towards developers. For example, Twilio, GitHub, Atlassian, Stripe and Postman.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Developers-plus&lt;/em&gt;: These are the companies or products whose primary focus is not developers, and thus follow a B2B (Business to Business) or B2C (Business to Consumer) model. For example, Spotify, Slack, Twitter and PayPal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the Dev-first sector continues to grow rapidly, most of the organizations doing DevRel at this point follow a Dev-plus model. In some companies, the DevRel team(s) report to the engineering department, while in some, they report to product or marketing. In a very few, they even report directly to the sales. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-whats-in-there-for-the-devrel-folks" class="anchor"&gt;
  &lt;/a&gt;
  But what's in there for the DevRel folks?
&lt;/h2&gt;

&lt;p&gt;Now you might be wondering, what makes this profession so unique? Why does everyone wants to get into this? Why do DevRel professionals feel so good doing all this and for what?  &lt;/p&gt;

&lt;p&gt;The answer is: &lt;strong&gt;impact&lt;/strong&gt;.✨&lt;/p&gt;

&lt;p&gt;We put people before technology, and we love to help them grow in any and every capacity we can. We love to solve their common (and sometimes not-so-common) issues, and when they appreciate our work in their own way, it just makes our day. It makes us smile our heart out when we see corporations and startups using our products to build and scale their own, young students coming up with interesting ideas and solutions at hackathons, and when they say our work inspires them to do more—that impact is exactly what we live for. &lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;To sum it all, DevRel as a domain is so broad that it's a mess. A beautiful mess with an immense learning, leadership and growth opportunity. People expect us to be 'know-it-all' folks, but we're not. No one really is. We too are learning along the way. Being in DevRel is tough and you'll constantly have to thrive and juggle between a diverse set of tasks along with staying updated as things move quick, but that's exactly what makes it all the way more exciting.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If all this sounds intriguing, I hope to see you in this space sometime in the future. Cheers! &lt;/p&gt;




&lt;p&gt;✍️ &lt;em&gt;with&lt;/em&gt; ❤️ &lt;em&gt;by &lt;a href="https://twitter.com/manbirmarwah"&gt;Manbir&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>community</category>
      <category>technology</category>
      <category>entrepreneurship</category>
    </item>
    <item>
      <title>Building a secure/sandboxed environment for executing untrusted code</title>
      <author>Narasimha Prasanna HN</author>
      <pubDate>Sat, 16 Jan 2021 08:58:04 +0000</pubDate>
      <link>https://dev.to/narasimha1997/building-a-secure-sandboxed-environment-for-executing-untrusted-code-7e8</link>
      <guid>https://dev.to/narasimha1997/building-a-secure-sandboxed-environment-for-executing-untrusted-code-7e8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-a-sandbox" class="anchor"&gt;
  &lt;/a&gt;
  What is a Sandbox?
&lt;/h3&gt;

&lt;p&gt;Let's try to understand the meaning of the term &lt;em&gt;sandbox&lt;/em&gt; first, before learning how to build one. &lt;em&gt;Sandbox&lt;/em&gt; is a like a container that isolates the environment in which the software is run. In other words, a sandbox provides a secure environment which restricts the software inside the sandbox from accessing the resources of the host, the resources can be a file-system, network, some set of kernel system-calls etc. The application of sandbox is obvious, you can execute the code which you don't trust without worrying about security much. Here are some examples that will help you understanding sandbox better:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sandboxing is built into modern browsers, this restricts malicious websites from stealing your sensitive data or damaging the client machine, because the code runs inside a sandbox and the sandbox restricts the code from calling any host-level functions.&lt;/li&gt;
&lt;li&gt;Most of the online coding tutorials that allow remote code execution are powered by sandboxing tools, these tools provide a separate isolated environment for you, thus restricting you from accessing the server resources or files belonging to other users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this tutorial, we will be building a simple sandbox solution. Note that this is not the perfect one (Many companies have worked years together on security), but still it manages to give you an idea of building your own sandbox. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-will-be-the-consequences-if-you-dont-use-a-sandbox" class="anchor"&gt;
  &lt;/a&gt;
  What will be the consequences if you don't use a sandbox?
&lt;/h3&gt;

&lt;p&gt;Imagine a scenario where your browser did not provide any security/isolation, in such case anyone good at JavaScript/C++ can somehow manage to access your file-system from the browser itself without even notifying you, this will allow attackers to steal your private content and use them for blackmailing you. Imagine an online code-editing tool without a sandbox, you as the user can write a code that deletes the files on their server, rendering the server useless, you can also use server's resources to mine bitcoins or attack others, you can also delete the files of other users using the tool. These are very critical consequences and any developer who thinks about building a browser, code-editing tool or any software that allows remote-code-execution should consider building a sandbox and securing his/her system from attackers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-sandbox-must-provide" class="anchor"&gt;
  &lt;/a&gt;
  What sandbox must provide:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The sandbox should hide the host file-system from the untrusted code which runs inside the sandbox.&lt;/li&gt;
&lt;li&gt;It should block the code inside the sandbox from making system-calls directly on the host-kernel which can be dangerous.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites-of-this-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites of this tutorial:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Basic knowledge of containers and docker.&lt;/li&gt;
&lt;li&gt;Basic knowledge of creating and deploying software as containers.&lt;/li&gt;
&lt;li&gt;Basic knowledge of Linux and System-Calls.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#solution1-using-containers-with-docker" class="anchor"&gt;
  &lt;/a&gt;
  Solution-1 : Using Containers with Docker
&lt;/h3&gt;

&lt;p&gt;If you are into software development you must be aware of containers. Containers provide an isolated environment where the software can run with all its dependencies. Containers provide their own file-system, so the app that runs inside the container cannot access the host's original file-system. So let's build a simple program to demonstrate this. I will be using C, you can use any language of your choice. &lt;/p&gt;

&lt;p&gt;This program just lists all the files from the root &lt;code&gt;/&lt;/code&gt; and exits. (&lt;code&gt;list_files.c&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ls /"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a simple program and should work without any issues if you are any linux machine. Let's compile this, we will compile this a static binary so that we don't need &lt;code&gt;libc&lt;/code&gt; support in our container. But wait, we will first run on the host directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gcc list_files.c -static -static-libgcc -static-libstdc++ -o list_files
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If compilation is successful, this should produce a binary by name &lt;code&gt;list_files&lt;/code&gt;, we will make sure this is static executable and does not depend on &lt;code&gt;libc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ldd list_files
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will output something similar if it is a static binary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;not a dynamic executable
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's run this, note that we are running directly on the host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./list_files
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will output all the files under root &lt;code&gt;/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin    dev   initrd.img      lib64   mnt   root  snap      sys  var
boot   etc   initrd.img.old  lost+found  opt   run   srv       tmp  vmlinuz
cdrom  home  lib         media   proc  sbin  swapfile  usr  vmlinuz.old
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since we ran the code directly on the host machine, we are able to see the contents of the root file-system. The code has exclusive access to our file-system and other resources. So it is not recommended to run untrusted code directly. Now let's containerize it and see how we can provide basic restrictions. We will use &lt;code&gt;busybox&lt;/code&gt; a minimal container image. We don't have to install anything specific, remember why we built static executable. This is how our &lt;code&gt;Dockerfile&lt;/code&gt; looks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM busybox

COPY ./list_files /list_files
WORKDIR /
ENTRYPOINT ["/list_files"]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, that's it, we will copy the &lt;code&gt;list_files&lt;/code&gt; binary and run it on the start of container. Let's build and run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build . -t sandbox_test
docker run --rm -ti sandbox_test
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, it should produce the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin         etc         list_files  root        tmp         var
dev         home        proc        sys         usr
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that the &lt;code&gt;/&lt;/code&gt; has changed. It is the file-system of &lt;code&gt;busybox&lt;/code&gt; our application is seeing, not our host file-system. Containers also provide process-isolation, network isolation etc so our application is somehow isolated. Hurray! We built a simple sandbox (This is not the final solution, read till the end)&lt;/p&gt;

&lt;p&gt;Let's refine our work further, till now we manually packaged every application we built as a container image, which is lot of work. So, let's build a generic sandbox container that can run any binary inside the container environment without packing them explicitly. To build this, we follow the steps as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We create a small C program that starts inside the container.&lt;/li&gt;
&lt;li&gt;The program reads from &lt;code&gt;stdin&lt;/code&gt; and writes the contents of &lt;code&gt;stdin&lt;/code&gt; to a file inside the container.&lt;/li&gt;
&lt;li&gt;It then executes the file it created.&lt;/li&gt;
&lt;li&gt;Returns the output back to the host as a string.(writes to &lt;code&gt;stdout&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's build this! I am using C, you can use GO, Rust or any language that runs on native metal (rather than interpreted like Java/Python etc). Create a file called &lt;code&gt;sandbox.c&lt;/code&gt; and let's write a function called &lt;code&gt;write_stdin_to_file&lt;/code&gt; which reads from &lt;code&gt;stdin&lt;/code&gt; and writes to a file called &lt;code&gt;binary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Includes and some definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdbool.h&amp;gt;
&lt;/span&gt;
&lt;span class="cp"&gt;#define BUFFER_SIZE 4096
#define OUTPUT_BUFFER 1024
&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;uchar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;write_stdin_to_file&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;write_stdin_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;uchar&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;read_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./binary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDWR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0777&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to open the file for writing&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;read_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_bytes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to read binary data, exiting"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_bytes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//EOF&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//write data to the file&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;read_bytes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uchar&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;read_bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="c1"&gt;//wrote the file, close it.&lt;/span&gt;
    &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now the main function, &lt;code&gt;main&lt;/code&gt; calls &lt;code&gt;write_stdin_to_file&lt;/code&gt; and then executes it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fread_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;output_buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_BUFFER&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;write_stdin_to_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Empty binary file, discarding&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;process_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./binary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process_fd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to execute the binary&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Executing binary inside the sandbox&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//read the data as buffers and stream it to stdout&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fread_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uchar&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uchar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;OUTPUT_BUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;process_fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fread_bytes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//EOF&lt;/span&gt;
            &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process_fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fread_bytes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//Error &lt;/span&gt;
            &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Failed to read the output"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;output_buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fread_bytes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'\0'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's compile this as static executable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gcc src/sandbox.c -static -static-libgcc -static-libstdc++ -o sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, lets containerize it using docker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM busybox

COPY ./sandbox /sandbox
WORKDIR /
ENTRYPOINT ["/sandbox"]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's build it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build . -t sandbox:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After the build is complete, we can run it. But before running, keep this in mind, the entrypoint is &lt;code&gt;sandbox&lt;/code&gt; binary, this binary listens of &lt;code&gt;stdin&lt;/code&gt;, so we need to pass the binary we need to execute as &lt;code&gt;stdin&lt;/code&gt; so that the &lt;code&gt;sandbox&lt;/code&gt; binary can execute it inside the container environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat list_files | docker run --rm -i sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a simple command, we are using &lt;code&gt;cat&lt;/code&gt; to read the binary from host system, after reading, it pipes the output to &lt;code&gt;sandbox&lt;/code&gt; program which runs inside the docker. The &lt;code&gt;sandbox&lt;/code&gt; executes it inside the container environment and then emits the output as &lt;code&gt;stdout&lt;/code&gt;, since &lt;code&gt;stdout&lt;/code&gt; is the terminal, the output will be printed on the screen, we can see that below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Executing binary inside the sandbox
bin
binary
dev
etc
home
proc
root
sandbox
sys
tmp
usr
var
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! We have created a container image called &lt;code&gt;sandbox&lt;/code&gt; which we can use it to run any binary inside the container environment. But is this the end?? Of course, not!! This approach is still unprotected. Let's see why and how we can address this issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problems-with-using-containers-alone-as-sandbox" class="anchor"&gt;
  &lt;/a&gt;
  Problems with using containers alone as sandbox
&lt;/h3&gt;

&lt;p&gt;We somehow managed to provide network and file-system isolation, but still we are not safe. That's because of the nature of containers. Containers do not provide kernel-level isolation, in other words, eventhough the containers are isolated, they still use host-kernel for their functionality, i.e any system call made by the application inside the container will execute some host-kernel function which is not secure, that means, any clever programmer can write an application that combines multiple system-calls and escape the container isolation to get into the host environment, then he can do anything. But we can solve this as well. Using &lt;em&gt;Userspace kernels&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#userspace-kernel-with-gvisor" class="anchor"&gt;
  &lt;/a&gt;
  Userspace Kernel with gVisor:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/google/gvisor"&gt;gVisor&lt;/a&gt; by Google is a userspace application kernel written in Go. Userspace kernel is a software that runs completely in user-mode and has less privilege (since it runs in user-mode). It also acts as a kernel emulation layer, that means, it can act as a fake kernel and can receive and process system-calls, thus hiding the host kernel. gVisor is compatible with OCI and provides a OCI runtime called &lt;a href="https://github.com/google/gvisor/tree/master/runsc"&gt;runsc&lt;/a&gt; that can be used by container management tool like docker as the underlying runtime. (docker uses &lt;a href="https://github.com/opencontainers/runc"&gt;runc&lt;/a&gt; as the default runtime). &lt;/p&gt;

&lt;p&gt;You can install &lt;code&gt;gVisor&lt;/code&gt; by following the guide &lt;a href="https://gvisor.dev/docs/user_guide/install/"&gt;here&lt;/a&gt;. Once installed, make sure you have registered &lt;code&gt;runsc&lt;/code&gt; as one of the possible runtimes for docker. Check the file &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;, it should contain an entry like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"runtimes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"runsc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/runsc"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can then restart the docker daemon to ensure the changes are applied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! We can now run our binaries inside a sandbox with complete isolation. Here is how we can include &lt;code&gt;gVisor&lt;/code&gt; in our execution command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat list_files | docker run --runtime=runsc --rm -i sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see &lt;code&gt;--runtime=runsc&lt;/code&gt; added, which means we are telling the docker to use &lt;code&gt;gVisor&lt;/code&gt; (&lt;code&gt;runsc&lt;/code&gt;) instead of &lt;code&gt;runc&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-wrote-this" class="anchor"&gt;
  &lt;/a&gt;
  Why I wrote this?
&lt;/h3&gt;

&lt;p&gt;Recently I was building a clone of &lt;a href="https://play.golang.org/"&gt;Go playground&lt;/a&gt; as a weekend project, a tool for running go programs online. Folks who developed Go playground were aware of security and they used &lt;code&gt;NaCL&lt;/code&gt; sandbox initially. You can read the blog on this &lt;a href="https://blog.golang.org/playground"&gt;here&lt;/a&gt;. After the deprecation of &lt;code&gt;NaCL&lt;/code&gt;, the developers shifted to this approach to provide security. While I was scratching my head over security for my hobby project, I got a chance to read original playground's source code and found a solution very similar to this. I thought of adding this to my project and also write a blog on this. To learn more, you can follow these repositories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/google/gvisor"&gt;Original Playground&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Narasimha1997/gopg"&gt;My clone of Playground&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also consider using MircoVM projects as an alternative to &lt;code&gt;gVisor&lt;/code&gt;, like :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/firecracker-microvm/firecracker"&gt;AWS Firecracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kata-containers/runtime"&gt;Kata Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do, please let me know in the comments.&lt;br&gt;
Thanks for spending your precious time in reading this post. Do let me know your opinions and better options in comments.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>security</category>
      <category>cloudskills</category>
      <category>docker</category>
    </item>
    <item>
      <title>Handy Git Commands and practices to improve your workflow</title>
      <author>Ted Ngeene</author>
      <pubDate>Sat, 16 Jan 2021 07:57:07 +0000</pubDate>
      <link>https://dev.to/tngeene/handy-git-commands-and-practices-to-improve-your-workflow-4j5p</link>
      <guid>https://dev.to/tngeene/handy-git-commands-and-practices-to-improve-your-workflow-4j5p</guid>
      <description>&lt;p&gt;I have been in active software development for the better part of the last year and a half. For the majority of that period, I've come to appreciate the power of git, especially since the onset of the pandemic, where I've been working remotely 90% of the time, the technology has been very crucial in the development of my career. &lt;br&gt;
The aim of this post is to highlight some of the common git commands that I use on a daily, which I'm sure most of you reading this will apply at some point or do also apply. The post is also meant to deconstruct the notion that git is complicated. Hopefully, you'll gain new insights into it. Let's dive in...&lt;/p&gt;

&lt;p&gt;This article is divided into three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#definition-of-terms"&gt;Definition of terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commands"&gt;Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#best-practices"&gt;Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;*Disclosure: I only recommend products I would use myself and all opinions expressed here are my own. This post may contain affiliate links that at no additional cost to you, I may earn a small commission. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#definition-of-terms" class="anchor"&gt;
  &lt;/a&gt;
  Definition of terms
&lt;/h1&gt;

&lt;p&gt;Before we move to the commands, it's important to familiarise ourselves with common terms used in the git world. &lt;br&gt;
Let's have a look at some of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; - it is a distributed &lt;a href="https://en.wikipedia.org/wiki/Distributed_version_control"&gt;version control&lt;/a&gt; system for tracking any set of files, for coordination among developers. Basically put, it is like a savings program for your project. It enables tracking and logging the changes you make to your file or file sets over time, a version-control system gives you the power to review or even restore earlier versions by taking snapshots of every revision in your project. You can access these versions to compare and revise them when the need arises.&lt;/li&gt;
&lt;li&gt;Git repository hosting service - these are third-party web applications that wrap and enhance a version control system. An example of popular ones are; Github, Bitbucket, Gitlab. Many people confuse these to be one and the same thing with git. However, they are completely different. So, are they much more closely connected than Java and JavaScript? Yes, git is the underlying technology that platforms such as Github use to manage repositories. For a more detailed explanation on this, check out &lt;a href="https://blog.devmountain.com/git-vs-github-whats-the-difference/#:~:text=Simply%20put%2C%20Git%20is%20a,help%20you%20better%20manage%20them."&gt;this article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell"&gt;Git branch&lt;/a&gt; - a branch represents an independent line of development on a project. For example, if you're working on a feature that involves creating an admin dashboard, you may choose to create a branch called &lt;code&gt;dashboard&lt;/code&gt; in which you work on all the dashboard logic.&lt;/li&gt;
&lt;li&gt;HEAD - When working with Git, only one branch can be checked out at a time - and this is what's called the "HEAD" branch. Often, this is also referred to as the "active" or "current" branch. Git makes note of this current branch in a file located inside the Git repository, in .git/HEAD. (This is an internal file, so it should not be manually manipulated!). By now you may have noticed that the tree is the symbolic representation in git 😄.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#commands" class="anchor"&gt;
  &lt;/a&gt;
  Commands
&lt;/h1&gt;

&lt;p&gt;-&lt;code&gt;git init&lt;/code&gt; - This command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository.&lt;br&gt;
-&lt;code&gt;git remote add origin {remote_url}&lt;/code&gt; - connects a repo to a remote git URL. An example is;&lt;br&gt;
 &lt;code&gt;git remote add origin https://github.com/tngeene/Dadjokes-app.git&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git remote -v&lt;/code&gt; - checks the remote URLs set on a particular repo. A repo can have more than one remote, say for example you're pushing the code to two platforms such as Github and Bitbucket&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git remote remove origin&lt;/code&gt; or &lt;code&gt;git remote rm origin&lt;/code&gt; - removes a remote

&lt;ul&gt;
&lt;li&gt;alternatively, you can use &lt;code&gt;git remote set-url origin {new.url.here}&lt;/code&gt; this command automatically removes the old remote and assigns the new one.
In our example above, you might realize you've made a mistake and set the wrong origin, using the second approach of removing an origin, (I won't delve into the first one since it's pretty straightforward), you can run this command &lt;code&gt;git remote set-url https://github.com/tngeene/Bakery-template.git&lt;/code&gt; and this will remove the previously specified url and set the new one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git rm -r --cached .&lt;/code&gt; - this command comes in handy when you want to untrack files, say you realized you would like to add it to the &lt;code&gt;.gitignore&lt;/code&gt; file when it was already tracked.

&lt;ul&gt;
&lt;li&gt;rm : remove command.&lt;/li&gt;
&lt;li&gt;-r : allows recursive removal.&lt;/li&gt;
&lt;li&gt;— cached : will only remove files from the index. Your files will still be there.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.&lt;/code&gt; : untracks all files. You can untrack a specific file by &lt;code&gt;git rm -r --cached {path_to_ file}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git clone&lt;/code&gt; - useful for getting the contents of a remote repo to your local machine. Usually used when you don't initially have the code. Example usage is &lt;code&gt;git clone {url_of_repo}&lt;/code&gt;, for example 
  &lt;code&gt;git clone https://github.com/tngeene/fibonacci-sequence-react.git&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git fetch&lt;/code&gt; - really only downloads new data from a remote repository - but it doesn't integrate any of this new data into your working files. Fetch is great for getting a fresh view of all the things that happened in a remote repository.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; - in contrast, is used with a different goal in mind: to update your current &lt;code&gt;HEAD&lt;/code&gt; branch with the latest changes from the remote server. This means that pull not only downloads new data; it also directly integrates it into your current working copy files. This has a couple of consequences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since &lt;code&gt;git pull&lt;/code&gt; tries to merge remote changes with your local ones, a so-called "merge conflict" can occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#sytntax-to-use" class="anchor"&gt;
  &lt;/a&gt;
  Sytntax to use
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git pull {remote_branch_name} {feature_branch_name}&lt;/code&gt; - for example &lt;strong&gt;&lt;em&gt;git pull origin master&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One can use &lt;code&gt;git pull —set-upstream {remote_branch_name} {feature_branch_name}&lt;/code&gt;. This syntax avoids specifying the remote branch to update every time, for example, &lt;code&gt;git pull —set-upstream origin master&lt;/code&gt; will allow you to just type &lt;code&gt;git pull&lt;/code&gt; once you've checked out in the master branch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git push&lt;/code&gt; - pushing the code that's in your local machine to a remote branch. The syntax is the same as the git pull command highlighted above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A thing to note about this is that for an initial repo, especially if it was initialized with a README file, it might bring in errors such as the remote having contents you do not have. Another one could be that the repo has unrelated histories. So before you push code make sure to first pull from the remote by specifying &lt;code&gt;git pull origin master —allow-unrelated-histories&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git branch&lt;/code&gt; - allows one to create a new branch. The syntax for this is, &lt;code&gt;git branch -f {branch} {start_point}&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch - f updates master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git checkout&lt;/code&gt; The git checkout command lets you navigate between the branches created by the &lt;code&gt;git branch&lt;/code&gt; command. For example, if we would like to navigate to the updates branch created above, we would simply run &lt;code&gt;git checkout updates&lt;/code&gt;.
Something to note when we're checking out is to make sure we've committed the changes we were working on in the branch we're checking out from.

&lt;ul&gt;
&lt;li&gt;Using the &lt;code&gt;git checkout&lt;/code&gt; command, one can also create a new branch and checkout to it immediately, all using one command! So how do we go about this, you might ask. Well, simply type &lt;code&gt;git checkout -b {branch_name}&lt;/code&gt; while in the current working branch. In our case above, &lt;code&gt;git checkout -b updates&lt;/code&gt;. This will automatically merge all the existing changes in your current branch into the newly created branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add&lt;/code&gt; - now that you've finished working on all the cool stuff you've been working on, you'll want to push them to the remote origin we set with the &lt;code&gt;git add remote origin&lt;/code&gt; command. 
The &lt;code&gt;git add&lt;/code&gt; command is part one of that process. This command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit. There are two approaches to adding files that you want to push to the remote.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt; This command adds all the changes you've made to be included when you push them to the remote. The &lt;code&gt;.&lt;/code&gt; at the end signifies that you want to stage all the files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add {path_to_file_you_want_to_stage}&lt;/code&gt; - this command lets you specify which updates you'd like to be staged for commit. For example one might only want to update the settings file, you would only need to type &lt;code&gt;git add ./settings.py&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git commit&lt;/code&gt; - finally that you've added all your changes you will want to save them to be included once you decide to push to the remote repo. This command saves the changes to your local machine. 

&lt;ul&gt;
&lt;li&gt;The syntax for this commit involves including a message to describe what changes you've been working on, for example after working on a bug that fixes the login logic on a form, one might choose to commit it using this &lt;code&gt;git commit -m "fixed email validation on login API"&lt;/code&gt; The -m flag denotes message
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   It is important to write informative commit messages so 
   those other people who are working on the branch know 
   exactly what you were working on(just as it's important to 
   use descriptive variable names 😉).
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git merge&lt;/code&gt; - after working on all the changes in your newly checked out branch, you might want to merge all the changes to the main branch before pushing them to the remote. After making a commit on the feature branch, run the command &lt;code&gt;git checkout {branch_you_want_to_checkout_to}&lt;/code&gt; and then &lt;code&gt;git merge {feature_branch_name}&lt;/code&gt;. In our example above, if we want to merge changes we've made into the main branch, we would go through these steps
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        git checkout main
        git merge updates
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git log&lt;/code&gt; - this command allows you to view information about previous commits. it simply shows the commits that lead up to the current state of the current working branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#reverting-to-a-previous-commit" class="anchor"&gt;
  &lt;/a&gt;
  Reverting to a previous commit.
&lt;/h2&gt;

&lt;p&gt;Often times you may realize that you made a mistake and would like to roll back to a more stable version of the project. Luckily, git offers solutions to this problem. We can choose to either use &lt;code&gt;git revert&lt;/code&gt; or &lt;code&gt;git reset&lt;/code&gt; commands. For the purposes of this guide, I'll go with &lt;code&gt;git revert&lt;/code&gt; as I have more experience using it. However, for in-depth analysis and comparison of both commands, you can have a look at this &lt;a href="https://www.atlassian.com/git/tutorials/undoing-changes/git-revert#:~:text=Summary,in%20regards%20to%20losing%20work"&gt;article from atlassian&lt;/a&gt;.&lt;br&gt;
The first step in rolling back is to identify at which point you'd like to go back. For this, we'll use our friend, &lt;code&gt;git log&lt;/code&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAgqY0Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/i/rjgtbs0zpewphfc8s92k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAgqY0Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/i/rjgtbs0zpewphfc8s92k.png" alt="Git log ngeene"&gt;&lt;/a&gt;&lt;br&gt;
Notice the ordering of the commit history, with the "HEAD" being the first one on the list. If we want to go back to the commit with the message "reverted to ssr", we would run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git revert --no-commit 4eab63b2..HEAD
git commit
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will revert everything from the HEAD back to the commit hash, meaning it will recreate that commit state in the working tree as if every commit after 4eab63b2 had been walked back. You can then commit the current tree, and it will create a brand new commit essentially equivalent to the commit you "reverted" to. &lt;br&gt;
The &lt;code&gt;--no-commit&lt;/code&gt; flag lets git revert all the commits at once. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that we've used the commit hash of the commit above the one we'd like to roll back to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is of course more than one way to revert, but this is what works for me. Feel free to add to the discussion on best practices to revert in the comments.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#best-practices" class="anchor"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h1&gt;

&lt;p&gt;While working with git, it vital to follow some practices, especially working with a team. The practices I'll mention are my personal preference and totally biased towards my own views. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#use-descriptive-commit-messages" class="anchor"&gt;
  &lt;/a&gt;
  Use Descriptive commit messages
&lt;/h4&gt;

&lt;p&gt;It's important to let other developers working on the project on what exactly you've been working on. writing a commit message such as "fixed loader on landing page" instead of "landing page update" goes a long way in informing the code reviewers of what you've worked on.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#make-pull-requests" class="anchor"&gt;
  &lt;/a&gt;
  Make Pull Requests
&lt;/h4&gt;

&lt;p&gt;Once you've pushed your changes to Github if on a feature branch, remember to make a pull request(merge request in GitLab). This will notify project owners of a request to integrate your changes into the main branch and they can do a code review.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#write-an-informative-pull-request-message" class="anchor"&gt;
  &lt;/a&gt;
  Write an informative pull request message.
&lt;/h4&gt;

&lt;p&gt;Still, on the subject of pull requests, it's important to let code reviewers why you'd like your code to be merged into the main branch. An example of a pull request message would along the lines of;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This commit contains updates on the user registration logic
1. Fixed signup form validation by adding error handling
2. Added vee-validate on login and registration forms
3. Updated redirection on successful signup
4. Integrated social auth as a signup option (using google and Facebook)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#keep-commit-revisions-minimal" class="anchor"&gt;
  &lt;/a&gt;
  Keep Commit Revisions minimal
&lt;/h4&gt;

&lt;p&gt;As a minimalist, I believe that it's best to work on bits of the code and push them instead of making revisions on many files and pushing them at once. My case for this argument is that it provides for good tracking in case things break at some point, we can just roll back to the commit and undo the minor mistake made on a couple of files instead of multiple files, which can prove to be a nightmare. &lt;/p&gt;

&lt;p&gt;That covers the end of this article. There's a ton of information on git, but for now, we'll only dive into the shallow end that is the very deep pool of git. I hope this piece helps someone and feel free to drop your thoughts. You can also check out &lt;a href="https://tngeene.com/"&gt;my website&lt;/a&gt; or follow me on &lt;a href="https://twitter.com/Ngeene_kihiu"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#promotions" class="anchor"&gt;
  &lt;/a&gt;
  Promotions
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Do you need a place to host your website or app, &lt;a href="//DigitalOcean%20%E2%80%93%20The%20developer%20cloudwww.digitalocean.com"&gt;Digital ocean&lt;/a&gt;
is just the solution you need, sign up on digital ocean using this &lt;a href="https://m.do.co/c/eaa803fe4d99"&gt;link&lt;/a&gt; and experience the best cloud service provider.&lt;/li&gt;
&lt;li&gt;Every application needs a domain, using &lt;a href="https://porkbun.com/"&gt;Porkbun&lt;/a&gt;, you will get the best domains at a cost-effective price. Kindly signup to the platform using this &lt;a href="//porkbun.com/Ted254"&gt;link&lt;/a&gt; to get a discount for your domain or email hosting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for going through the article. I hope in one way or another, you have a better understanding of git. Cheers!&lt;/p&gt;

</description>
      <category>git</category>
      <category>cloud</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>p5-Svelte: a quick and easy way to use p5 in Svelte! 🕸🧙‍♂️</title>
      <author>Tony Ketcham</author>
      <pubDate>Sat, 16 Jan 2021 06:40:15 +0000</pubDate>
      <link>https://dev.to/tonyketcham/p5-svelte-a-quick-and-easy-way-to-use-p5-in-svelte-3j8f</link>
      <guid>https://dev.to/tonyketcham/p5-svelte-a-quick-and-easy-way-to-use-p5-in-svelte-3j8f</guid>
      <description>&lt;p&gt;Have you ever tried to throw p5 into a Svelte project? It's kinda a pain in the ass! &lt;/p&gt;

&lt;p&gt;So guess what - I've done n made a component for the Svelte and p5 privy or intrigued to savor your sweet, generative teeth on. &lt;/p&gt;

&lt;p&gt;Behold, &lt;strong&gt;&lt;a href="https://github.com/tonyketcham/p5-svelte"&gt;p5-svelte&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  🛴 Usage
&lt;/h2&gt;

&lt;p&gt;Giving it the good ol' ball of yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight postscript"&gt;&lt;code&gt;&lt;span class="nf"&gt;yarn&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="nf"&gt;p5&lt;/span&gt; &lt;span class="nf"&gt;p5-svelte&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;P5&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p5-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;P5/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run that and you should see the sketch we're about to make below 🚣‍♀️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-example" class="anchor"&gt;
  &lt;/a&gt;
  Full Example 🗿
&lt;/h3&gt;

&lt;p&gt;Let's implement the 10print algorithm (in the cover photo) using &lt;a href="https://github.com/tonyketcham/p5-svelte"&gt;p5-svelte&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;P5&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p5-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
  * a peeFive'd 10print algorithm
  * @see {@link https://10print.org/} to learn about it!
  * @param {p5} p5 instance mode
  */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sketch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCanvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.505&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;P5&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;sketch&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Doing &lt;code&gt;npm run dev&lt;/code&gt;, we're left with this beaut (give the gif a second to load if it's not showing up immediately):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5L4QI4B_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ozuet5qpew6t9rup6o4p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5L4QI4B_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ozuet5qpew6t9rup6o4p.gif" alt="10print in p5-svelte"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#p5js-instance-mode" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/processing/p5.js/wiki/Global-and-instance-mode"&gt;p5.js instance mode&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You perhaps noticed it in the example, but Svelte doesn't allow us to globally expose the p5 library by installing it to the &lt;code&gt;window&lt;/code&gt; (which is how p5 is commonly installed in vanilla js projects). Therefore, p5 must be used in &lt;a href="https://github.com/processing/p5.js/wiki/Global-and-instance-mode"&gt;instance mode&lt;/a&gt; with this component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#potential" class="anchor"&gt;
  &lt;/a&gt;
  Potential
&lt;/h2&gt;

&lt;p&gt;With this, you can now use all the cute Svelte stuff to make reactive UIs bound to variables in your p5 sketches. Maybe make an interactive web editor or some weird utility with powerful and intriguing UI interactions??&lt;/p&gt;

&lt;p&gt;I hope some people find some use out of this. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributing" class="anchor"&gt;
  &lt;/a&gt;
  Contributing
&lt;/h2&gt;

&lt;p&gt;I would love some pull requests if anyone finds some areas of improvement and would like to contribute! &lt;br&gt;
Go at it: &lt;a href="https://github.com/tonyketcham/p5-svelte"&gt;p5-svelte repo on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fun fact, this component was made using &lt;a href="https://svelte.dev/tutorial/actions"&gt;Svelte Actions&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>p5</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Python Resources I am using - Beginner to Intermediate</title>
      <author>Amy Chan</author>
      <pubDate>Sat, 16 Jan 2021 03:31:59 +0000</pubDate>
      <link>https://dev.to/amychan331/python-resources-i-am-using-beginner-to-intermediate-4aen</link>
      <guid>https://dev.to/amychan331/python-resources-i-am-using-beginner-to-intermediate-4aen</guid>
      <description>&lt;p&gt;Since I got my full time as a CMS developer about a year ago, I haven't really studied much Python. Once I got back into it, I realized I collected quite a bit of resources over time. It actually took a while for me to review what resources I have: some of them are too basic, some are not really relevant to what I want to do, and some are no longer available. Eventually, I narrowed down to this list of resources that I planned to use or is already using:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#books" class="anchor"&gt;
  &lt;/a&gt;
  Books
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.pearson.com/us/higher-education/program/Summerfield-Programming-in-Python-3-A-Complete-Introduction-to-the-Python-Language-2nd-Edition/PGM156621.html"&gt;Programming in Python3&lt;/a&gt; by Mark Summerfield, when I wanted to use a book instead of staring at the screen. It is well-structured and in-depth. Note that this books stated that it is a tutorial and &lt;strong&gt;reference&lt;/strong&gt; book intended for people with prior programming experience.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://realpython.com/products/python-tricks-book/"&gt;Python Tricks&lt;/a&gt; by Dan Bader, which I got from a Humble Book Bundle. I have been reading one trick per night, on my lovely new Kobo Clara ereader in my bed before I go to sleep.&lt;/li&gt;
&lt;li&gt;Maybe later: Invent Your Own Computer Game with Python by Al Sweigart and Automate the Boring Stuff with Python by Al Sweigart, which I also got from the Humble Book Bundle. They are more for beginners - I had to skip to the middle of the book before I found any useful information for me - but they are interesting topics, so I plan to look more into them later. Great for newbies seeking more practical examples of Python usage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#online-courses-or-videos" class="anchor"&gt;
  &lt;/a&gt;
  Online courses or videos
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://courses.edx.org/courses/course-v1:HarvardX+CS50AI+1T2020/course/"&gt;CS50's Introduction to Artificial Intelligence with Python&lt;/a&gt; by HarvardX hosted on edX: Part of my main use of Python is to practice algorithm and data structures. This course is targeted at AI, but it is actually quite good even if you are just looking to learn algorithm in Python. HarvardX also offer other Python courses that are prerequisite for this. If you are a beginner, I recommend trying the prerequisite first.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.coursera.org/learn/python-classes-inheritance"&gt;Python Classes and Inheritance&lt;/a&gt; by University of Michigan hosted on Coursera: Wanted to brush up on my basic know-how on Python classes and inheritance. This is quite basic and not as advanced as the CS50 above, but this is still intended for people who already know basic Python. UM also provides other basic Python courses, so go for those if you are a total beginner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;: Lot of up-to-date materials in multiple formats (posts, podcast, video, etc). Their lessons range from beginner to advanced. Though it is mainly a paid-membership site, a good number of materials are free, and they have opened more materials for free during Covid, so try them while you can! P.S. They are the creator of the Python Trick I just mentioned, and they had published multiple Python books.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#online-practices" class="anchor"&gt;
  &lt;/a&gt;
  Online Practices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCiNZk05QaxYN0KW_JwnkBAg"&gt;Decode Girl&lt;/a&gt;: YouTube channel focused on solving algorithm and data structure problem in Python. It's quite new - less than a year old - so there are only a few videos, but I like it so far.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.pythonmorsels.com"&gt;Python Morsels&lt;/a&gt;: A weekly exercise service by Trey Hunner, a well-known Python trainer I have followed for a long time. THe format is great for habit-building. The first 5 exercises are free. I think I may actually stick with this one, since the lite plan is only $5 each month, and I get 1 screencast each week - I watched his free screencast back when I first started following him, and let's just say there was a reason I continue to follow him!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Why Tailwind Isn't for Me</title>
      <author>Jared White</author>
      <pubDate>Sat, 16 Jan 2021 00:59:20 +0000</pubDate>
      <link>https://dev.to/jaredcwhite/why-tailwind-isn-t-for-me-5c90</link>
      <guid>https://dev.to/jaredcwhite/why-tailwind-isn-t-for-me-5c90</guid>
      <description>&lt;p&gt;I've gotten into more than one heated argument on the interwebs lately over &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt;. I'm not proud of this. I don't like being at odds with anybody. I think the folks building Tailwind are talented and nice people. But at a pure technical level, I simply don't like Tailwind. Whoever it was built for, &lt;strong&gt;it was not built for me&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And in one sense, that's fine. There are &lt;em&gt;tons&lt;/em&gt; of web technologies out there which I'll never use. Doesn't mean they're bad. There are plenty of groovy tech stacks to go around.&lt;/p&gt;

&lt;p&gt;The problem I keep running into however is this increasing popular sentiment that Tailwind &lt;em&gt;is the future&lt;/em&gt; (man). It's &lt;em&gt;the way things should be done&lt;/em&gt;. In other words, it's opinionated and it inspires a cadre of evangelists. Again, on a certain level, that's fine. Rails is very opinionated, for example, and I love using Rails.&lt;/p&gt;

&lt;p&gt;But Tailwind definitely throws down a gauntlet. I'll quote directly from creator Adam Wathan highlighted right on the Tailwind website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Best practices” don’t actually work.&lt;/p&gt;

&lt;p&gt;I’ve written a few thousand words on why traditional “semantic class names” are the reason CSS is hard to maintain, but the truth is you’re never going to believe me until you actually try it. If you can suppress the urge to retch long enough to give it a chance, I really think you'll wonder how you ever worked with CSS any other way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Challenge accepted.&lt;/p&gt;

&lt;p&gt;I've tried it. And I've used it. A lot. A project one of my largest clients has me developing is built on top of React and Tailwind. So whatever you may come at me with, you can't accuse me of not giving Tailwind the good ol' college try.&lt;/p&gt;

&lt;p&gt;Still not my thing. At all. In fact I have some real concerns about Tailwind, and what I find supremely frustrating is whenever I raise these concerns, I get immediate pushback from die-hard Tailwind fans who accuse me (in so many words) of just being a fucking idiot. As a programmer who has worked full-time in the web industry since the late 90s, that just doesn't sit right with me.&lt;/p&gt;

&lt;p&gt;So since Twitter and Hacker News comments are apparently poor mediums for technical conversations of this magnitude, I will now attempt to outline the very real reasons why Tailwind is not for me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-1-tailwind-promotes-uglyass-html" class="anchor"&gt;
  &lt;/a&gt;
  Reason 1: Tailwind promotes ugly-ass HTML.
&lt;/h3&gt;

&lt;p&gt;This first reason is an aesthetic concern, yet it's intimately related to real technical challenges which I'll outline shortly. But at the very least, I &lt;strong&gt;hate&lt;/strong&gt; the way utility-css-only HTML looks. Hate, hate, hate it. Adam even acknowledges this head on when he begs us to "suppress the urge to retch long enough to give it a chance…". This is a tacit admission that writing markup this way initially seems ugly and weird—but somehow we'll eventually just "get over it" because the benefits are so great.&lt;/p&gt;

&lt;p&gt;After a year of writing Tailwind, I haven't gotten over it. Sorry folks! You'll &lt;em&gt;never&lt;/em&gt; get me to appreciate this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"min-w-0 flex-auto space-y-0.5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-lime-600 dark:text-lime-400 text-sm sm:text-base lg:text-sm xl:text-base font-semibold uppercase"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;abbr&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Episode"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Ep.&lt;span class="nt"&gt;&amp;lt;/abbr&amp;gt;&lt;/span&gt; 128
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-black dark:text-white text-base sm:text-xl lg:text-base xl:text-xl font-semibold truncate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Scaling CSS at Heroku with Utility Classes
  &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-500 dark:text-gray-400 text-base sm:text-lg lg:text-base xl:text-lg font-medium"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Full Stack Radio
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now I already hear many of you screaming at your computer screens to tell me "dude, just use &lt;code&gt;@apply&lt;/code&gt; if you want to keep your HTML clean! Problem solved!" Well, that is a potential solution, and in fact that's what we've done on the aforementioned project. Much of our HTML is oriented around component-scoped class names (fairly close to BEM in concept) and thus we use &lt;code&gt;@apply&lt;/code&gt; extensively. But that brings me to my next concern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-2-raw-apply-endraw-is-fundamentally-incompatible-and-nonstandard-and-largely-unnecessary" class="anchor"&gt;
  &lt;/a&gt;
  Reason 2: &lt;code&gt;@apply&lt;/code&gt; is fundamentally incompatible and non-standard (and largely unnecessary).
&lt;/h3&gt;

&lt;p&gt;This is where a lot of Tailwind fans get tripped up and keep on arguing with me over and over again, so I'll try to explain this as clearly and obviously as possible.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;@apply mt-3&lt;/code&gt; in a CSS file &lt;em&gt;only&lt;/em&gt; works if you use Tailwind. It requires the presence of Tailwind in your build process. If you remove Tailwind from your build process, that statement doesn't work and your CSS is broken.&lt;/li&gt;
&lt;li&gt;While it's true you can take the generated output CSS of a site and use that without Tailwind, it's typically a bundled compilation of dozens if not hundreds of small CSS files scattered around a codebase (if you write CSS-per-component files like we do). It's not something you can count on for source code.&lt;/li&gt;
&lt;li&gt;Therefore, it's simply the truth that CSS files built for Tailwind are non-standard (aka proprietary) and &lt;strong&gt;fundamentally incompatible&lt;/strong&gt; with all other CSS frameworks and tooling. Once you go Tailwind, &lt;em&gt;you can never leave&lt;/em&gt;. (da da dum 😱)&lt;/li&gt;
&lt;li&gt;And as an added bonus, writing all your CSS files with &lt;code&gt;@apply&lt;/code&gt; everywhere basically means you're not learning and authoring CSS. You're authoring Tailwind. No matter how many times you write &lt;code&gt;@apply flex&lt;/code&gt;, that's &lt;strong&gt;not&lt;/strong&gt; the same as writing &lt;code&gt;display: flex&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I realize most of us aren't in the habit of trying to swap out CSS frameworks on projects on a regular basis. But believe me, I have done this! I'm on a client project right now where we're migrating from Foundation to Bulma. While it's true that it requires updating a bunch of HTML and some of the stylesheets in use, rest assured any custom bits of styling we wrote before will work again without hassle, because when you write plain ol' CSS (or even Sass), it just works no matter what.&lt;/p&gt;

&lt;p&gt;And while &lt;code&gt;@apply&lt;/code&gt; seems cool on the face of it, it ends up becoming an enormous crutch. For example, I like the way Tailwind makes writing styles using CSS Grid techniques pretty straightforward. Unfortunately, after having done so, I still don't really understand Grid syntax itself. I remain ignorant of the open CSS standard.&lt;/p&gt;

&lt;p&gt;As for why &lt;code&gt;@apply&lt;/code&gt; in the grand scheme of things is largely unnecessary, that brings me to my third point.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-3-tailwinds-focus-on-design-systems-and-tokens-could-mostly-be-replaced-by-css-custom-properties-aka-variableswhich-is-a-standard" class="anchor"&gt;
  &lt;/a&gt;
  Reason 3: Tailwind's focus on design systems and tokens could mostly be replaced by CSS Custom Properties (aka variables)—which IS a standard.
&lt;/h3&gt;

&lt;p&gt;People initially like Tailwind because it comes out-of-the-box with a nice design system and lots of tokens you can tweak (colors, font sizes, spacing, etc.). It's easy to get good-looking results quickly.&lt;/p&gt;

&lt;p&gt;The problem is that all these tokens are defined…in JavaScript. A CSS framework. Using JavaScript for its design tokens. In 2021.&lt;/p&gt;

&lt;p&gt;I hate to break it to you, but all modern browsers support this thing called CSS Custom Properties. You can define design tokens once at the &lt;code&gt;:root&lt;/code&gt; level as variables, and utilize them &lt;strong&gt;everywhere&lt;/strong&gt;. You can even modify them in real-time while the site is loaded, or overload them in particular parts of the DOM tree. And they work &lt;em&gt;great&lt;/em&gt; with web components. More on that in a moment.&lt;/p&gt;

&lt;p&gt;So for example, in Tailwind you can write &lt;code&gt;class="mb-8"&lt;/code&gt; and you get a &lt;code&gt;margin-bottom: 2rem&lt;/code&gt; style applied. But guess what you could do instead? Define &lt;code&gt;:root { --spacing-8: 2rem }&lt;/code&gt; in your stylesheet, and then write &lt;code&gt;margin-bottom: var(--spacing-8)&lt;/code&gt; anywhere you want. As in literally anywhere: a stylesheet, or a JS component, &lt;em&gt;or even a&lt;/em&gt; &lt;code&gt;style=&lt;/code&gt; &lt;em&gt;attribute directly in HTML!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While the story gets a little murkier once you start looking at how to accommodate responsive breakpoints and so forth, nevertheless the principle here is that Tailwind uses a non-standard JavaScript-based build process for its design system at a time when you can build design systems using syntax that's &lt;em&gt;native&lt;/em&gt; to all modern browsers.&lt;/p&gt;

&lt;p&gt;Speaking of what's native in modern web browsers…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-4-tailwind-forgets-that-web-components-exist" class="anchor"&gt;
  &lt;/a&gt;
  Reason 4: Tailwind forgets that web components exist.
&lt;/h3&gt;

&lt;p&gt;This is perhaps the biggest knock against Tailwind. It seemingly was conceived and promoted in a world where web components don't exist. Tailwind CSS is completely unusable within the Shadow DOM. Some enterprising developers have come up with solutions where select bits of Tailwind styling can get injected into components through a build process, but it's definitely a hack.&lt;/p&gt;

&lt;p&gt;Meanwhile, there are ways to build web component-based design systems today where global theming and component styling via the Shadow DOM (and exposed Parts) all work together. Again, you can do all this based on technology that's built-in and native to all modern browsers. And before you shrug your shoulders and go back to your React or your Vue, bear in mind that web components are not only an integral part of the HTML/CSS/JS spec today but are increasingly at the heart of further advancements to browser technology (for example how advanced customization of form controls might work in the future).&lt;/p&gt;

&lt;p&gt;Tailwind in this respect is no more helpful to you than Bootstrap or Foundation or any other CSS framework written years/decades ago. (Even my beloved Bulma! 😢)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-5-finally-tailwind-encourages-divspantag-soup" class="anchor"&gt;
  &lt;/a&gt;
  Reason 5: Finally, Tailwind encourages div/span-tag soup.
&lt;/h3&gt;

&lt;p&gt;I almost included this in the previous point, but it really bears its own conversation. I have become convinced by now that using &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags everywhere in your markup is an anti-pattern. We live in a world where custom elements (aka &lt;code&gt;&amp;lt;whatever-you-can-dream-of&amp;gt;&lt;/code&gt;) are fully supported and enabled by modern browsers. There's virtually no reason you're forced to write &lt;code&gt;&amp;lt;div class="card"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; when you can write &lt;code&gt;&amp;lt;ui-card&amp;gt;&amp;lt;/ui-card&amp;gt;&lt;/code&gt;. And in fact it's quite possible to use custom attributes along with elements to write &lt;em&gt;extremely expressive markup&lt;/em&gt; that—compared to ye markup of ol'—looks quite futuristic!&lt;/p&gt;

&lt;p&gt;Take the &lt;a href="https://shoelace.style"&gt;Shoelace&lt;/a&gt; web component library for example. Here's a button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sl-button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"small"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;sl-icon&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"prefix"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"gear"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sl-icon&amp;gt;&lt;/span&gt;
  Settings
&lt;span class="nt"&gt;&amp;lt;/sl-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here's a modal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sl-dialog&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Dialog"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--width: 50vw;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum dolor sit amet, consectetur adipiscing elit.
  &lt;span class="nt"&gt;&amp;lt;sl-button&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Close&lt;span class="nt"&gt;&amp;lt;/sl-button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/sl-dialog&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that this isn't JSX. This isn't XML. This isn't some kind of fancy-pants template language you have to convert to ordinary HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is HTML.&lt;/strong&gt; This is what modern markup can look like.&lt;/p&gt;

&lt;p&gt;Compare that to an example from Tailwind's home page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:bg-light-blue-200 hover:text-light-blue-800 group flex items-center rounded-md bg-light-blue-100 text-light-blue-600 text-sm font-medium px-4 py-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  New
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ewwwww. 🤢&lt;/p&gt;

&lt;p&gt;There is a future world of HTML/CSS/JS (and in large part it's here already) where you can write bespoke Grid/Flexbox layouts quickly and easily with vanilla CSS, set up design tokens with CSS variables, utilize a well-architected web component library like Shoelace (or even mix 'n' match two or three), and end up with a website/app that &lt;strong&gt;looks amazing&lt;/strong&gt; and works quite well—all without needing &lt;em&gt;any&lt;/em&gt; of the many megabytes of Tailwind utility classes that you then need to purge to get your performance back down to manageable levels.&lt;/p&gt;

&lt;p&gt;In other words, Tailwind's main selling point (besides rapid prototyping via utility classes) is its attractive design system—yet the way it implements that design system really kind of sucks! (Incompatible with web components by default, only minimally leverages CSS variables, doesn't encourage custom elements/attributes with relevant scoped styling…)&lt;/p&gt;

&lt;p&gt;Which begs the question: how does Tailwind enable us to "build modern websites" exactly? On a pure technical level, I honestly don't see it as being much of an improvement over Bootstrap. And Bootstrap at least provides an open-source component library for free. If you use Tailwind, &lt;a href="https://tailwindui.com"&gt;they ask you to pay for it&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-if-you-like-tailwind-use-it-but-dont-try-to-convince-me-its-the-future" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: If you like Tailwind, use it! But don't try to convince me it's the future.
&lt;/h3&gt;

&lt;p&gt;Listen, we can go back and forth on the relative merits or problems with any technology. There are definitely some benefits to choosing Tailwind, most notably how you can go from blank page to fancy-pants design quickly by simply hammering out a bunch of div tags with utility classes.&lt;/p&gt;

&lt;p&gt;But after over a year of experience with Tailwind and weighing the pros and cons against other approaches to HTML, styling, and component-based web development in general, I'm thoroughly convinced that Tailwind does not represent the direction I wish to see the web head in as a whole. And apologies to all the Tailwind fans out there, but you just don't have a compelling argument that will convince me otherwise.&lt;/p&gt;

&lt;p&gt;And that's why Tailwind isn't for me. YMMV. 🙃&lt;/p&gt;

</description>
      <category>tailwind</category>
      <category>css</category>
      <category>webcomponents</category>
    </item>
    <item>
      <title>New Javascript 2021 features explained with examples and how you can use them today!</title>
      <author>Michael "lampe" Lazarski</author>
      <pubDate>Fri, 15 Jan 2021 21:24:25 +0000</pubDate>
      <link>https://dev.to/lampewebdev/new-javascript-2021-features-explained-with-examples-and-how-you-can-use-them-today-4cm0</link>
      <guid>https://dev.to/lampewebdev/new-javascript-2021-features-explained-with-examples-and-how-you-can-use-them-today-4cm0</guid>
      <description>&lt;p&gt;Every year Javascript comes with a new set of features!&lt;/p&gt;

&lt;p&gt;This year we also have some cool features we can use!&lt;/p&gt;

&lt;p&gt;Learn how to use them with real world examples and how to update your project to use them too!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hxmFYToenxE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can find the link to the code in the video description!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;👋Say Hello!&lt;/strong&gt; &lt;a href="https://www.instagram.com/lampewebdev/"&gt;Instagram&lt;/a&gt; | &lt;a href="https://twitter.com/lampewebdev"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/michael-lazarski-25725a87"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://medium.com/@lampewebdevelopment"&gt;Medium&lt;/a&gt; | &lt;a href="https://dev.to/twitch_live_streams/lampewebdev"&gt;Twitch&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCYCe4Cnracnq91J0CgoyKAQ"&gt;YouTube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
