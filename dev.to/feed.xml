<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Data Structures vs. Algorithms? </title>
      <author>Ahmed Wafik</author>
      <pubDate>Sun, 23 Jan 2022 12:35:59 +0000</pubDate>
      <link>https://dev.to/ahmed_wafik_06f743afef285/data-structures-vs-algorithms-4ic8</link>
      <guid>https://dev.to/ahmed_wafik_06f743afef285/data-structures-vs-algorithms-4ic8</guid>
      <description>&lt;p&gt;If you are a &lt;strong&gt;fresh&lt;/strong&gt; or &lt;strong&gt;junior&lt;/strong&gt; Software engineer, you probably heard a lot about data structures and algorithms. Everyone tells you about their importance or how valuable to learn them. You hear about them together, and sometimes you ask yourself, are they one thing, or do they most come together? So what is data structures and algorithms, or what are data structures vs. algorithms?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGe3HdEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9xezghzd9l6e3qcit0c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGe3HdEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9xezghzd9l6e3qcit0c.jpeg" alt="Think with me" width="625" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-search-on-wikipedia-about-data-structures-you-will-find"&gt;
  &lt;/a&gt;
  If you search on Wikipedia about data structures, you will find:
&lt;/h2&gt;

&lt;p&gt;Data structure is a data organization, management, and storage format that enables efficient access and modification. More precisely, a data structure is a collection of data values, their relationships, and the functions or operations that can be applied to the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-search-on-wikipedia-about-algorithms-you-will-find"&gt;
  &lt;/a&gt;
  If you search on Wikipedia about Algorithms, you will find:
&lt;/h2&gt;

&lt;p&gt;In mathematics and computer science, an algorithm is a finite sequence of well-defined instructions, typically used to solve a class of specific problems or to perform a computation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So that is what the book says about data structures and algorithms, but why do you hear about both of them as a package? What value do you have from learning them?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good learning of data structures and algorithms will help you solve more problems easier. In a world driven by big data and microservices technology, a good understanding of this science is the base you can build on it to develop high-quality software.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAuk2nW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awv0c5rote4tp4xxsyhf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAuk2nW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awv0c5rote4tp4xxsyhf.jpg" alt="Coding" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand more, let me tell you a story. This story is about John. He is a chef in one of the elite restaurants. He is famous for his low-time cocking and high-quality food. We interviewed him to know what is his secrets. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: Hello John, can you tell us what is your secrets?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: hahaha, I don’t have any secrets, I studied data structures and algorithms science in high school, and they were one of my favorite subjects, so when I started working as a chef, I used them in my daily work that my (secret).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: No, explain to me How?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: data structures and algorithms science is not only applied in computer science. It is a way of thinking and mindset that can help you solve any problems, like divide and conquer algorithms. People use it in real-life problems, so machines use it in software issues. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: ok, let me understand more from you. How do Algorithms help you in cocking?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: ok, for me, Algorithm is the set of steps I take to optimize the process of cocking so for example, I can go to the fridge to get one ingredient at a time, which is terrible and waste more time, or I can go one time or two and bring bulk ingredients at a time and save more time. Decisions like this are my Algorithm to cock faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: ok, that’s clever of you, but what about data structures?&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: the ingredient for my meal is like the data for the computer process, so I need to store my ingredients in a structure that makes things easier when cocking, like a computer program stores the data in a particular data structure.&lt;br&gt;
So, for example, I can store onions in a net because their shape is circular to retrieve them faster. That can also be applied for tomato, but it has a different body for cucumber, so I can store it on a flat surface without being worried about it rolling off. That is exactly what you do when you write a program. You choose the data structures that suit your data type, and your problem type is an insertion problem or retrieving problem, for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: thank you for your time, John.&lt;br&gt;
&lt;strong&gt;A&lt;/strong&gt;: That was my pleasure. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Data Structure and algorithms are science that you can apply with any programming language in any software field and even in real-life problems.&lt;br&gt;
A good understanding of this science will help you boost your code quality and build more efficient applications that can handle more load with good performance.&lt;br&gt;
Thanks for reading ❤️❤️&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Feel free to reach out on&lt;/em&gt;&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/ahmedwafik/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/data-structures/#:~:text=A%20data%20structure%20is%20a,using%20the%20array%20data%20structure."&gt;Data Structures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/"&gt;Algorithms&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Engineering leadership; the series</title>
      <author>Jelle Smeets</author>
      <pubDate>Sun, 23 Jan 2022 12:27:12 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/engineering-leadership-the-series-2993</link>
      <guid>https://dev.to/smeetsmeister/engineering-leadership-the-series-2993</guid>
      <description>&lt;p&gt;Welcome to the brand new series on the blog; Engineering leadership. In this series, we will take a look at topics that can help you with your work in an Engineering leadership position.&lt;/p&gt;

&lt;p&gt;The topics in this series will vary in different aspects of running an engineering team or department. I expect to write about building the best teams, how to manage stakeholders, how to achieve technical excellence, how to be a good leader, and many more!&lt;/p&gt;

&lt;p&gt;To not make this series a dry bin of theoretical texts, I came up with the following format for the blog posts. Each blog post will start with a theoretical/technical explanation of the topic. In addition, I will write on how you can use this in practice. From my personal experience or from others. As a result, you can put into practice what you learned right away!&lt;/p&gt;

&lt;p&gt;If you are excited as me for the next post in this series, sign up for the &lt;a href="https://blog.jellesmeets.nl/newsletter-signup/"&gt;newsletter&lt;/a&gt;! In that case, you will not miss the new posts. If you are unable to wait for the next post, you can take a look at the &lt;a href="https://blog.jellesmeets.nl/lists/4-lessons-i-learned-as-a-starting-scrum-master/"&gt;4 lessons I learned as a starting scrum master&lt;/a&gt; blog post.&lt;/p&gt;

&lt;p&gt;I am open to suggestions on topics to add to this series. Are there any topics you would like to see in this series? Let me know in the comments or &lt;a href="https://blog.jellesmeets.nl/contact/"&gt;contact&lt;/a&gt; me!&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>career</category>
      <category>devjournal</category>
      <category>learning</category>
    </item>
    <item>
      <title>Detect crashes in your Kubernetes cluster using kwatch and PagerDuty</title>
      <author>Amgad Ashraf</author>
      <pubDate>Sun, 23 Jan 2022 12:02:17 +0000</pubDate>
      <link>https://dev.to/amgadramses/detect-crashes-in-your-kubernetes-cluster-using-kwatch-and-pagerduty-6p8</link>
      <guid>https://dev.to/amgadramses/detect-crashes-in-your-kubernetes-cluster-using-kwatch-and-pagerduty-6p8</guid>
      <description>&lt;p&gt;In this article you will learn how to setup and deploy &lt;a href="https://github.com/abahmed/kwatch"&gt;kwatch&lt;/a&gt; in your Kubernetes (K8s) cluster to monitor and receive real time crash alerts through PagerDuty&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-pagerduty"&gt;
  &lt;/a&gt;
  Configure PagerDuty
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-1-create-a-new-service"&gt;
  &lt;/a&gt;
  Step 1: Create a new service
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yw6Cjzbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymk6uhptod91yjawtaz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yw6Cjzbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymk6uhptod91yjawtaz9.png" alt="1" width="880" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-give-your-service-a-name-and-a-description"&gt;
  &lt;/a&gt;
  Step 2: Give your service a Name and a Description
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0seyivN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70lmahvi4stprcxmysua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0seyivN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70lmahvi4stprcxmysua.png" alt="2" width="880" height="656"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-add-an-escalation-policy"&gt;
  &lt;/a&gt;
  Step 3: Add an &lt;a href="https://support.pagerduty.com/docs/escalation-policies"&gt;Escalation Policy&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ahRR6X7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2x99eydson9bb793xf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ahRR6X7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2x99eydson9bb793xf7.png" alt="3" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-4-make-sure-to-add-the-events-api-v2-integration"&gt;
  &lt;/a&gt;
  Step 4: Make sure to add the &lt;a href="https://developer.pagerduty.com/api-reference/b3A6Mjc0ODI2Nw-send-an-event-to-pager-duty"&gt;Events API V2&lt;/a&gt; Integration
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s2LP1bR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58gchbqxbjh0wr2961o7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2LP1bR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58gchbqxbjh0wr2961o7.png" alt="4" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-5-navigate-to-your-service-and-copy-the-integration-key"&gt;
  &lt;/a&gt;
  Step 5: Navigate to your service and copy the Integration Key
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Na2lug2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev8u5szwr80d4qbhyd25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Na2lug2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev8u5szwr80d4qbhyd25.png" alt="5" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-kwatch"&gt;
  &lt;/a&gt;
  Configure kwatch
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-1-get-the-configuration-template"&gt;
  &lt;/a&gt;
  Step 1: Get the configuration template
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl  &lt;span class="nt"&gt;-L&lt;/span&gt; https://raw.githubusercontent.com/abahmed/kwatch/v0.3.0/deploy/config.yaml &lt;span class="nt"&gt;-o&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2-edit-raw-configyaml-endraw-file-and-add-the-integration-key"&gt;
  &lt;/a&gt;
  Step 2: Edit &lt;code&gt;config.yaml&lt;/code&gt; file and add the Integration Key
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Namespace&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kwatch&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;config.yaml&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;alert:&lt;/span&gt;
      &lt;span class="s"&gt;pagerduty:&lt;/span&gt;
        &lt;span class="s"&gt;integrationKey: &amp;lt;integration_key&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-3-apply-the-configuration"&gt;
  &lt;/a&gt;
  Step 3: Apply the configuration
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploy-kwatch"&gt;
  &lt;/a&gt;
  Deploy kwatch
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/abahmed/kwatch/v0.3.0/deploy/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You will now start receiving PagerDuty alerts whenever there is a pod crash in your Kubernetes (K8s) cluster!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--baHAaw65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fec0qertafgoazh76n2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--baHAaw65--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fec0qertafgoazh76n2b.png" alt="6" width="880" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find more documentation about kwatch &lt;a href="https://kwatch.dev/docs"&gt;Here&lt;/a&gt;.&lt;br&gt;
If you like kwatch, give it a star on &lt;a href="https://github.com/abahmed/kwatch"&gt;GitHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We are happy to hear feedback from you and if you have any request, or suggestion don’t hesitate to ping us on our channels (&lt;a href="https://discord.com/invite/kzJszdKmJ7"&gt;Discord&lt;/a&gt;, &lt;a href="https://github.com/abahmed/kwatch"&gt;GitHub&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>monitoring</category>
      <category>pagerduty</category>
    </item>
    <item>
      <title>E2E testing: challenges &amp; lessons learned</title>
      <author>Swimm 🤿</author>
      <pubDate>Sun, 23 Jan 2022 11:42:53 +0000</pubDate>
      <link>https://dev.to/swimm_io/e2e-testing-challenges-lessons-learned-35ca</link>
      <guid>https://dev.to/swimm_io/e2e-testing-challenges-lessons-learned-35ca</guid>
      <description>&lt;p&gt;End-to-end testing. The holy grail of all testing types. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2akbzh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxieqmmhs3nnuooppoxo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2akbzh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxieqmmhs3nnuooppoxo.gif" alt="Holy Grail gif" width="240" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's everything we learned regarding the ins and outs of end-to-end testing - lessons, takeaways, mistakes, you name it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-lets-start-out-with-why"&gt;
  &lt;/a&gt;
  So, let's start out with why
&lt;/h2&gt;

&lt;p&gt;Swimm started growing, we added new features, and we found that we simply couldn't keep up with changes. &lt;/p&gt;

&lt;p&gt;We realized that our goal for a testing solution had two parts: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find a solution that allowed us to catch regressions bugs DURING development&lt;/li&gt;
&lt;li&gt;Save manual regression QA time &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;E2E testing seemed to be the right answer to our testing paradigm. &lt;/p&gt;

&lt;p&gt;We ended up choosing Cypress&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Awesome community &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great features: automatic waiting, automatic sreenshots &amp;amp; videos, time travel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cypress is intuitive &amp;amp; easy to set up &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing tests is fun  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using Cypress' API applies for user behavior  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lack of multi-tab support&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Difficulty with iFrames&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Limited browser support (just Chrome-based browsers &amp;amp; firefox) &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#challenges-of-e2e-testing"&gt;
  &lt;/a&gt;
  Challenges of E2E testing
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Wins:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Identified &amp;amp; fixed a lot of bugs &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Saved so much time by not having to repeat manual flows weekly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dramatically increased stability &amp;amp; coverage &lt;br&gt;
&lt;strong&gt;Challenges&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Human vs machine testing &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We had zero experience with e2e tests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Monitoring tests that are less reliable &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It takes more time than you think &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key takeaways
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Appoint an owner for E2E testing&lt;/li&gt;
&lt;li&gt;Patience, patience, patience&lt;/li&gt;
&lt;li&gt;Write stable tests &lt;/li&gt;
&lt;li&gt;Trust. Your. Tests. &lt;/li&gt;
&lt;li&gt;Stable tests = stable product&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://swimm.io/blog/end-to-end-testing-challenges-and-lessons-learned/"&gt;Here's a detailed blog on how we implemented E2E testing. &lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why you need to play with Arduino Uno.</title>
      <author>Cody..!</author>
      <pubDate>Sun, 23 Jan 2022 11:40:43 +0000</pubDate>
      <link>https://dev.to/codedpirater/why-you-need-to-play-with-arduino-uno-odo</link>
      <guid>https://dev.to/codedpirater/why-you-need-to-play-with-arduino-uno-odo</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is this stuff called Arduino ?&lt;/strong&gt; &lt;br&gt;
If you are a programmer and a you are thinking of it, well then it's something you can play with around. Though Arduino is an eloctronic device used in most of the IOT projects but being a programmer you will not just always code and do the stuffs like that whole day... You need something you can play and have fun with ! This is one of the best thing you can play with..&lt;br&gt;
Not only if you are a programmer but anyone can have fun playing it one of the best cool thing to go around...!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;What is Arduino ?🤔&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well this the longest answer I can give you !&lt;/p&gt;

&lt;p&gt;-&amp;gt;Arduino is an open-source electronics platform based on easy-to-use hardware and software. &lt;a href="https://www.arduino.cc/en/Main/Products"&gt;Arduino boards&lt;/a&gt; are able to read inputs light on a sensor, a finger on a button, or a Twitter message and turn it into an output activating a motor, turning on an LED, publishing something online. You can tell your board what to do by sending a set of instructions to the microcontroller on the board. To do so you use the &lt;a href="https://www.arduino.cc/reference/en/"&gt;Arduino programming language&lt;/a&gt; (based on Wiring), and the Arduino Software &lt;a href="https://www.arduino.cc/en/Main/Software"&gt;(IDE)&lt;/a&gt;, based on &lt;a href="https://processing.org/"&gt;Processing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Over the years Arduino has been the brain of thousands of projects, from everyday objects to complex scientific instruments. A worldwide community of makers - students, hobbyists, artists, programmers, and professionals - has gathered around this open-source platform, their contributions have added up to an incredible amount of accessible knowledge that can be of great help to novices and experts alike.&lt;/p&gt;

&lt;p&gt;Arduino was born at the Ivrea Interaction Design Institute as an easy tool for fast prototyping, aimed at students without a background in electronics and programming. As soon as it reached a wider community, the Arduino board started changing to adapt to new needs and challenges, differentiating its offer from simple 8-bit boards to products for IoT applications, wearable, 3D printing, and embedded environments.&lt;/p&gt;




&lt;p&gt;Now one more question arrives in your mind &lt;strong&gt;Why should I play with Arduino ? What's the reason I need to play with this stuff "I'm happy with it I don't need it&amp;gt;!"&lt;/strong&gt; But Let me tell you, You can even have a lot of fun with it in your free time and this one the coolest thing I like to do whenever I'm free. It's your choice you want to play with this stuff or not. But at the end of the day it's cool. &lt;/p&gt;

&lt;p&gt;At the End of the Day last question rises that is...&lt;br&gt;
&lt;strong&gt;How do I use Arduino?&lt;/strong&gt;&lt;br&gt;
Short answer read the arduino uno &lt;a href="https://www.arduino.cc/en/Guide/HomePage"&gt;getting started guide&lt;/a&gt;. If you are looking for inspiration you can find a great variety of Tutorials on &lt;a href="https://create.arduino.cc/projecthub?_gl=1*qh9vtk*_ga*MTE5MTY3MjYwOC4xNjQxODk5ODc4*_ga_NEXN8H46L5*MTY0MjkzNTYxNS41LjEuMTY0MjkzNjA3OS4w"&gt;Arduino Project Hub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading..&lt;/p&gt;




&lt;p&gt;*&lt;em&gt;||Peace'✌&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/codedpirater"&gt;@codedpirater&lt;/a&gt; *&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>arduino</category>
      <category>techtalks</category>
      <category>programming</category>
    </item>
    <item>
      <title>(web-app)Open-Source URL-Shortener built using Python.</title>
      <author>Aswin</author>
      <pubDate>Sun, 23 Jan 2022 11:20:29 +0000</pubDate>
      <link>https://dev.to/iamaswin/web-appopen-source-url-shortner-built-using-python-36e4</link>
      <guid>https://dev.to/iamaswin/web-appopen-source-url-shortner-built-using-python-36e4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-it-started"&gt;
  &lt;/a&gt;
  🧨How it started.
&lt;/h2&gt;



&lt;p&gt;Hey there🤚.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Long story short&lt;/strong&gt; , I recently joined here and I came over a post by &lt;a class="mentioned-user" href="https://dev.to/liyasthomas"&gt;@liyasthomas&lt;/a&gt; where he created a URL-SHORTNER which is open-source. As a person learning web development I was fascinated by it. But the thing that I noticed while going through the GitHub repo was that he have clearly mentioned not to put any sensitive links as all the links are publicly visible. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CHCbrTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkv2gmceg2bfxavyj6lb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CHCbrTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkv2gmceg2bfxavyj6lb.png" alt="Image description" width="880" height="69"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;So I decided to make my own version of it but with some personal touches. &lt;/p&gt;

&lt;p&gt;With my previous experiences in &lt;strong&gt;Python&lt;/strong&gt; I already knew to write a script which can shorten a URL using some Python modules. So I sat down to make it into a web-app using Flask. Hence Small-Heart💖 was born.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1pLwo_Yy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r91k1s97jfr2x55y6g61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1pLwo_Yy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r91k1s97jfr2x55y6g61.png" alt="Image description" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  🎀Demo
&lt;/h2&gt;



&lt;p&gt;Check out a live demo of it here 👇.&lt;br&gt;
&lt;a href="https://small-heart-demo.herokuapp.com"&gt;Small-Heart💖&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#note-the-site-is-hosted-using-herokus-free-version-so-increased-traffic-can-make-the-site-lag-a-bit"&gt;
  &lt;/a&gt;
  Note -- The site is hosted using Heroku's free version so increased traffic can make the site lag a bit.
&lt;/h3&gt;



&lt;h2&gt;
  &lt;a href="#features-"&gt;
  &lt;/a&gt;
  ✨Features :
&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;🔭 Yes it is Open-Source. You can check it out here on &lt;a href="https://github.com/aswinofficial/Small-heart"&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;📺 Simple UI(not the best😅).&lt;/li&gt;
&lt;li&gt;🤖 No account creation or login required.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#cons-"&gt;
  &lt;/a&gt;
  ⭕Cons :
&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;🤍 Currently in its 1st version(as of 1/23/2022).&lt;/li&gt;
&lt;li&gt;🔆 Not a fully responsive web-design.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#behind-the-scenes"&gt;
  &lt;/a&gt;
  🖤Behind the scenes
&lt;/h2&gt;

&lt;p&gt;Small-Heart is created using Flask as mentioned already.&lt;br&gt;
A python module named &lt;a href="https://pypi.org/project/pyshorteners/"&gt;pyshorteners&lt;/a&gt; is used to shorten the URL.&lt;/p&gt;

&lt;p&gt;Last but not least a bit of JavaScript is used in the web page to make it much more user friendly(at least to an extent).&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#i-clearly-want-to-mention-that-the-inspiration-of-this-project-entirely-came-from-liyasthomas-i-surely-recommend-everyone-to-check-out-his-post-as-well"&gt;
  &lt;/a&gt;
  I clearly want to mention that the inspiration of this project entirely came from &lt;a class="mentioned-user" href="https://dev.to/liyasthomas"&gt;@liyasthomas&lt;/a&gt; 🎉. I surely recommend everyone to check out his post as well.
&lt;/h3&gt;




&lt;p&gt;With that said I would love💘 to know all of your suggestions and opinions on this. If you are interested in making any changes or improvements to it , feel free to check out the GitHub repo -- &lt;a href="https://github.com/aswinofficial/Small-heart"&gt;Small-Heart&lt;/a&gt;.Simply star it if you like the idea, it will encourage me to do a lot more of projects. And always &lt;strong&gt;Stay Safe and Keep Coding🎊&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>useReducer Hook+ Context API = A Powerful React Tool</title>
      <author>Abhishek Singh</author>
      <pubDate>Sun, 23 Jan 2022 10:30:51 +0000</pubDate>
      <link>https://dev.to/asingh04/usereducer-hook-context-api-a-powerful-react-tool-32ef</link>
      <guid>https://dev.to/asingh04/usereducer-hook-context-api-a-powerful-react-tool-32ef</guid>
      <description>&lt;p&gt;We are immensely familiar with hooks like &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useRef&lt;/code&gt; a lot which allows us to use class-based components features now in functional components. But React hooks have one more weapon in its arsenal which can be an effective tool to optimise a react application: the &lt;strong&gt;&lt;code&gt;useReducer&lt;/code&gt;&lt;/strong&gt; hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usereducer-a-redux-wannabe"&gt;
  &lt;/a&gt;
  useReducer - a redux wannabe
&lt;/h2&gt;

&lt;p&gt;The best description and example of the &lt;code&gt;useReducer&lt;/code&gt; hook can be found in the &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;Official React docs&lt;/a&gt;. But if I have to explain it in a concise manner: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;useReducer allows your react component to have a redux-like state&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You just need to provide a reducer function and an initial state value. Your component will get a &lt;code&gt;state&lt;/code&gt; and a &lt;code&gt;dispatch&lt;/code&gt; function which can be used to update that &lt;code&gt;state&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It seems similar to &lt;code&gt;useState&lt;/code&gt;, and React specifies some deciding factor that can indicate when &lt;code&gt;useReducer&lt;/code&gt; will be better alternative:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your component state is complex that involves multiple sub-values, and/or&lt;/li&gt;
&lt;li&gt;The next state value depends upon the current state value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So a best example of &lt;code&gt;useReducer&lt;/code&gt; can be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sample Done task #1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sample todo task #2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new_todo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit_todo_task&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todoIdx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todoIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoIdx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle_todo_state&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todoIdx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todoIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todoIdx&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoIdx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoApp&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleStatusChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle_todo_state&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleTaskUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newTaskText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;edit_todo_task&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todoId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTaskText&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createNewTodo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTodoTask&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new_todo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTodoTask&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoList&lt;/span&gt;
            &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onTodoCreate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createNewTodo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onStatusChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleStatusChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;onTaskEdit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleTaskUpdate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-common-and-irritating-use-case-in-react-application"&gt;
  &lt;/a&gt;
  A common and irritating use case in React Application
&lt;/h2&gt;

&lt;p&gt;When using a complex component state like &lt;code&gt;useReducer&lt;/code&gt;, we are likely to run into a scenario where we have to pass down the state updating function or a callback function (wrapping the state updating function) to the children components. If you have a large application, then it may happen that you have to pass those callback functions through intermediate children components until it reaches the actual descendant component which uses them. This can become unmanageable &amp;amp; suboptimal. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution?
&lt;/h2&gt;

&lt;p&gt;Combine the &lt;code&gt;useReducer&lt;/code&gt; state &amp;amp; dispatch with the Context API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Context API&lt;/strong&gt;&lt;br&gt;
Context API have been a key feature of React. If you feel you need to be familiar with it, you can go through the &lt;a href="https://reactjs.org/docs/context.html"&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Both the state and the dispatch function produced by the &lt;code&gt;useReducer&lt;/code&gt; can be fed to separate Context Providers in a parent component. Then any child component, no matter how deep, under the parent, can access them as needed with the use of &lt;code&gt;useContext&lt;/code&gt; or Context Consumer.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TodosDispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodosDispatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Todos.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TodosDispatch.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoItem&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;isDone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddTodoButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TodosDispatch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new_todo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This combination helps to avoid passing down states or update functions through intermediate components.&lt;/p&gt;

&lt;p&gt;Only the components who actually needs the state or the dispatch function can get what they need. &lt;/p&gt;

&lt;p&gt;The intermediate components get to handle lesser props as well and can better handle faster component re-rendering decision when memoized.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;code&gt;useReducer&lt;/code&gt; and &lt;code&gt;useContext&lt;/code&gt; combination actually simulates Redux's state management, and is definitely a better light weight alternative to the PubSub library.&lt;/li&gt;
&lt;li&gt;If your application is already using an application state, and you require another application state(for whole or part of the application), the combination can be used as a 2nd application state &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#caveat"&gt;
  &lt;/a&gt;
  Caveat
&lt;/h2&gt;

&lt;p&gt;This is not a perfect Redux alternative.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redux allows use of custom middlewares for better state management, but this feature is lacking in React's &lt;code&gt;useRecuder&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Async tasks can not be used with &lt;code&gt;useReducer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Just like in Redux, there will be huge boilerplate code in the reducer function, and there are no APIs like Redux Tookkit to use for avoiding this.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Backend: Layered Architecture</title>
      <author>Blind Kai</author>
      <pubDate>Sun, 23 Jan 2022 10:04:45 +0000</pubDate>
      <link>https://dev.to/blindkai/backend-layered-architecture-514h</link>
      <guid>https://dev.to/blindkai/backend-layered-architecture-514h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Choosing the correct architecture for your backend application is an important decision because you will get the most of it in a long shot. This article is written to give Backend Developers an understanding of how to structure the code in order to make it properly incapsulated correspondingly to its purpose. Properly structured code that follows the same rules for each inner domain is easier to be read and maintain for you and other developers that would work with it. Better code you write at the start - less pain you get later when requirements will change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considering-layered-architecture"&gt;
  &lt;/a&gt;
  Considering Layered Architecture
&lt;/h2&gt;

&lt;p&gt;When developers work in the backend, they've mostly worked with data and business logic around that data. No matter if you're dealing with API or if it's CLI - you need to structure your code properly.&lt;/p&gt;

&lt;p&gt;Layered Architecture is a great example of lightweight architecture which is not overwhelmed with redundant abstractions, contracts or boilerplate code.&lt;/p&gt;

&lt;p&gt;In order to implement this architecture correctly, you just need to place your code in a place according to its properties and purpose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-schema"&gt;
  &lt;/a&gt;
  General schema
&lt;/h2&gt;

&lt;p&gt;For example, we need to design REST API architecture. If you're interested in reading more about REST API design, please check &lt;a href="https://dev.to/blindkai/rest-api-design-27j9"&gt;this link&lt;/a&gt;.&lt;br&gt;
The general schema of layers is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----7SGCAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuk9zhfszle8qa4jfzof.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----7SGCAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wuk9zhfszle8qa4jfzof.jpg" alt="General schema for layered architecture" width="484" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have three layers, let's discuss them in detail:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Controller layer&lt;/strong&gt;: Controllers themselves should only be responsible for work delegation. They should not contain any logic or direct data manipulation. The main purpose of a controller is to get the request, then pass it to the service that will process it and then return the response that is given from the service. See controllers like a manager for requests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Service layer&lt;/strong&gt;: Generally services contain information that is related to their domain. For example, if we have "Mail Service" we expect that sending/receiving emails happens there like in a real life. The same is fair for the codebase. Services (and their methods) handle the business logic which means that they are responsible for transforming data, performing additional actions &lt;em&gt;(like asking the repository for additional data or another service for processing some logic for it)&lt;/em&gt;. So if we need to send a mail, the service is responsible for getting the data as parameters, formatting them into the mail itself and sending it thru an external service or saving it thru the repository if it's an internal functionality.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Repository layer&lt;/strong&gt;: If there is code that somehow works with the database here is the place for this code to live. No matter if we're fetching the data from the DB or saving/modifying objects, it's the place where SQL queries or ORM operations should be placed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#detailed-schema"&gt;
  &lt;/a&gt;
  Detailed schema
&lt;/h2&gt;

&lt;p&gt;Let's discuss a few workflows to have a better understanding of how things could work if we're building the REST API for some "Shop orders" domains.&lt;br&gt;
Below you can see a few cases for writing domain code that follows the architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDARQ4Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of739v9cu7namgc9m2am.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDARQ4Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of739v9cu7namgc9m2am.jpg" alt="Image description" width="484" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-a-user-creates-order"&gt;
  &lt;/a&gt;
  Scenario A: User creates order
&lt;/h3&gt;

&lt;p&gt;For example, we have a user that wants to create a new order. The request comes into the controller, the request is validated so we ensure that we're working with valid parameters.&lt;br&gt;
Let's assume that the user also had discounts so we need to apply them in order to get the final price. For example, we have the service &lt;code&gt;UserOrderService&lt;/code&gt; which has the method &lt;code&gt;createOrder(user, order)&lt;/code&gt;. Within this method, we calculate the discount that is available for the user &lt;em&gt;(for example the user has a premium account or have a corporative discount so prices are lower)&lt;/em&gt;. The calculations are the business logic so they live inside a service method &lt;code&gt;calculateFinalPrice(order, discounts)&lt;/code&gt;. After we are done with the logic, we could use &lt;code&gt;UserOrderRepository&lt;/code&gt; with a method &lt;code&gt;createOrder(order)&lt;/code&gt; which contains all fields like orderId, userId, creation date etc. Inside this method, we simply write our "INSERT" statement.&lt;/p&gt;

&lt;p&gt;So we have a controller that passes the data into a service that process it and then the data is saved using the repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-b-confirm-order-choose-to-ship-and-pay-for-the-order"&gt;
  &lt;/a&gt;
  Scenario B: Confirm order, choose to ship and pay for the order
&lt;/h3&gt;

&lt;p&gt;As you already see, here we have several things to work with. We have an order that should be confirmed, shipping options to be configured and money-related operations to be done.&lt;br&gt;
So in practice, we get the request in our controller and pass it to the &lt;code&gt;UserOrderService&lt;/code&gt; which handle logic that checks if the order can be confirmed with those parameters. After that, we're triggering services that have logic to work with external &lt;code&gt;ShippingService&lt;/code&gt; and &lt;code&gt;PaymentService&lt;/code&gt;. Those may contain some additional logic or utility methods that belong to them so we will need to implement some additional features for it. Finally, those services might trigger our repositories because we need to save that we need to pass the order to a shipping company and we know that the order is paid already.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-c-user-creates-a-comment-below-the-bought-product"&gt;
  &lt;/a&gt;
  Scenario C: User creates a comment below the bought product
&lt;/h3&gt;

&lt;p&gt;The user got the order and want to give feedback &lt;em&gt;(or post the comment on the product page)&lt;/em&gt;. In this scenario, there is not much logic to work with the data &lt;em&gt;(if comment moderation is manual. If it's done by AI it could have some logic in &lt;code&gt;CommentService&lt;/code&gt; in method &lt;code&gt;checkComment(comment)&lt;/code&gt;)&lt;/em&gt;. If we have no logic there, we can simply pass the comment into &lt;code&gt;CommentRepository&lt;/code&gt; which has a method called &lt;code&gt;addComment(user, comment)&lt;/code&gt; and that's it. If no service is required you can simply trigger repository functionality from the controller.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Layered architecture is pretty simple and doesn't require developers to have big experience as well as it doesn't force developers to write too much boilerplate or deal with complicated abstractions and structures.&lt;br&gt;
If you need to design MVP or if your project is not that big (yet) consider using layered architecture as a base architecture.&lt;/p&gt;

</description>
      <category>backend</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Python Failed building wheel for backports.zoneinfo on Linux</title>
      <author>Shrikant Dhayje</author>
      <pubDate>Sun, 23 Jan 2022 09:38:53 +0000</pubDate>
      <link>https://dev.to/shriekdj/python-failed-building-wheel-for-backportszoneinfo-on-linux-2mo8</link>
      <guid>https://dev.to/shriekdj/python-failed-building-wheel-for-backportszoneinfo-on-linux-2mo8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Python Failed building wheel for backports.zoneinfo For Operating System Other Than Windows Like Linux Or MacOs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The issue is mostly related to retrieving data from OS About Current Time With IANA And &lt;code&gt;backports.zoneinfo&lt;/code&gt; is pre-builted for Windows And We Have to Build The Package For Linux Or MacOS With Ruby Compiler Or Any Other Language Specified By Error Also.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#first-solution"&gt;
  &lt;/a&gt;
  First Solution
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Upgrade the &lt;code&gt;pip&lt;/code&gt; with &lt;code&gt;wheel&lt;/code&gt; and Try Again Installing.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip wheel

pip &lt;span class="nb"&gt;install &lt;/span&gt;backports.zoneinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#second-solution"&gt;
  &lt;/a&gt;
  Second Solution
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Try Installing the Alternative Package Named &lt;code&gt;tzdata&lt;/code&gt;. ( Worked for My &lt;code&gt;fastapi&lt;/code&gt; project. )&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Package Supports Python 3 But It's Readme Is Not Updated About the Python 2 Support By Dev IDK Why 🤔.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;tzdata
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#third-solution"&gt;
  &lt;/a&gt;
  Third Solution
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Install &lt;code&gt;Ruby Compiler&lt;/code&gt; From Your System Package Manager and Run The pip code again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given Below is for &lt;code&gt;Ubuntu&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;ruby-full

pip &lt;span class="nb"&gt;install &lt;/span&gt;backports.zoneinfo 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give a reaction if any one solutions helped you in any way.&lt;br&gt;
Bye 👋.&lt;/p&gt;

</description>
      <category>python</category>
      <category>linux</category>
      <category>windows</category>
      <category>shriekdj</category>
    </item>
    <item>
      <title>CSS Pseudo-classes: Forms</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 23 Jan 2022 09:14:50 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/css-pseudo-classes-forms-5fjb</link>
      <guid>https://dev.to/dailydevtips1/css-pseudo-classes-forms-5fjb</guid>
      <description>&lt;p&gt;Yesterday we started looking at pseudo-classes that relate to links. In this article, we'll take a look at form-related pseudo-classes.&lt;/p&gt;

&lt;p&gt;I've split this up into a series of four, where this is the second part about form pseudo-states.&lt;/p&gt;

&lt;p&gt;The other parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-pseudo-classes-links/"&gt;Link pseudo-states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Form pseudo-states&lt;/em&gt; (this one 💖)&lt;/li&gt;
&lt;li&gt;Element state selectors (coming soon)&lt;/li&gt;
&lt;li&gt;Other pseudo states (coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#form-pseudostates"&gt;
  &lt;/a&gt;
  Form pseudo-states
&lt;/h2&gt;

&lt;p&gt;Another significant use case for pseudo-classes is forms.&lt;br&gt;
We already had a glimpse at the &lt;code&gt;focus&lt;/code&gt; states, which can also be used on form elements.&lt;/p&gt;

&lt;p&gt;But there are some more we can leverage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:disabled&lt;/code&gt;: Element is disabled&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:enabled&lt;/code&gt;: Element is active. However, is the default case so rarely used&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:checked&lt;/code&gt;: Checkbox/radio is checked&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:indeterminate&lt;/code&gt;: Checkbox/radio is not true or false&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:placeholder-shown&lt;/code&gt;: Placeholder is active and has no value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:valid&lt;/code&gt;: Field is valid&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:invalid&lt;/code&gt;: Field is invalid&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:in-range&lt;/code&gt;: Number field is in range of options&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:required&lt;/code&gt;: Field is required&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:optional&lt;/code&gt;: Field is optional, again a default state so rarely used&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-disabled-endraw-amp-raw-enabled-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:disabled&lt;/code&gt; &amp;amp; &lt;code&gt;:enabled&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As mentioned in the descriptive text for &lt;code&gt;:enabled&lt;/code&gt;, it's also a default state, so it's not often used. As we instead use the main selector to style on.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;:disabled&lt;/code&gt; state to indicate when a form field is disabled, and the user can't change anything in there.&lt;/p&gt;

&lt;p&gt;Let's say we have a button that is disabled until they fill out all fields, for instance.&lt;br&gt;
It's an excellent way to showcase that it's not yet valid to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:disabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lightGray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;not-allowed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the difference in the following CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/QWqzBbW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-checked-endraw-amp-raw-indeterminate-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:checked&lt;/code&gt; &amp;amp; &lt;code&gt;:indeterminate&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The checked and indeterminate pseudo-classes can help style checkboxes and radio buttons.&lt;/p&gt;

&lt;p&gt;The checked class will fire if the element is on, and indeterminate is funny as it targets non-binary states.&lt;/p&gt;

&lt;p&gt;What does that even mean?&lt;br&gt;
A checkbox can be on/off right, but there are rare cases where it can be neither. And that's precisely where indeterminate kicks in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: To be honest never needed for it in my life&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How can we style with the &lt;code&gt;checked&lt;/code&gt; state?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'checkbox'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the box-shadow here as this is one of the view things that work well for checked states.&lt;/p&gt;

&lt;p&gt;If you plan to style the checkbox further, it might be best to opt for a &lt;a href="https://daily-dev-tips.com/posts/css-custom-checkbox/"&gt;custom checkbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for the &lt;code&gt;indeterminate&lt;/code&gt;, it's not worth going into detail here as it's such a niche use-case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/indeterminate-checkboxes/"&gt;CSS-tricks has an excellent article&lt;/a&gt; on it if you wish more information.&lt;/p&gt;

&lt;p&gt;Try it out in this CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/NWaeBGQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-placeholdershown-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:placeholder-shown&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Before, I dedicated a more detailed article about the &lt;a href="https://daily-dev-tips.com/posts/css-placeholder-shown-class/"&gt;CSS &lt;code&gt;:placeholder-shown&lt;/code&gt; pseudo class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It can be used to indicate which fields have their placeholder showing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:placeholder-shown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;teal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which results in this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/mdBajOa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Try and add a value in the bottom input. It should change the appearance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#-raw-valid-endraw-raw-invalid-endraw-amp-raw-inrange-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:valid&lt;/code&gt;, &lt;code&gt;:invalid&lt;/code&gt;, &amp;amp; &lt;code&gt;:in-range&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These are validation classes and can be used to showcase a field that is not valid.&lt;/p&gt;

&lt;p&gt;Let's use an email field. It's the easiest to showcase both the invalid and the valid states.&lt;/p&gt;

&lt;p&gt;We can add a red/green border and shadow based on the validation state like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:invalid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:valid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try it out in the below CodePen by adding a non-email and email value.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;in-range&lt;/code&gt; one is in line with these two and can be used for number fields to determine if they are in the correct range.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:in-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also try this one out, but pick a number between 1 and 10. (Which is the range for the number input)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/poWqZey?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-required-endraw-amp-raw-optional-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:required&lt;/code&gt; &amp;amp; &lt;code&gt;:optional&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This can be used to determine if a field is required or not. The optional state is the default state, so it is unnecessary to state this explicitly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:required&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give all required fields an orange background.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/xxXmJrp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Add Stories to your highlights on Instagram without showing it to stories</title>
      <author>Shaswat Raj</author>
      <pubDate>Sun, 23 Jan 2022 09:04:41 +0000</pubDate>
      <link>https://dev.to/sh20raj/add-stories-to-your-highlights-on-instagram-without-showing-it-to-stories-3g1g</link>
      <guid>https://dev.to/sh20raj/add-stories-to-your-highlights-on-instagram-without-showing-it-to-stories-3g1g</guid>
      <description>&lt;p&gt;Steps :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just upload a story to Instagram.&lt;/li&gt;
&lt;li&gt;Delete it and it will be stored till 30 days in Recently Deleted Section.&lt;/li&gt;
&lt;li&gt;Restore it After 24 hours.&lt;/li&gt;
&lt;li&gt;It will came to your Archive.&lt;/li&gt;
&lt;li&gt;Then Add it to your highlights.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>instagram</category>
      <category>tips</category>
      <category>tricks</category>
      <category>sh20raj</category>
    </item>
    <item>
      <title>Micro Frontends: After one year with Single-SPA</title>
      <author>Samim Pezeshki</author>
      <pubDate>Sun, 23 Jan 2022 09:00:42 +0000</pubDate>
      <link>https://dev.to/psamim/micro-frontends-after-one-year-with-single-spa-1eoo</link>
      <guid>https://dev.to/psamim/micro-frontends-after-one-year-with-single-spa-1eoo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-did-we-choose-micro-frontend-architecture"&gt;
  &lt;/a&gt;
  Why did we choose micro frontend architecture?
&lt;/h2&gt;

&lt;p&gt;We have a codebase that was originally written using AngularJS. After some years and when finally the news about AngularJS end of life came around, we started migrating to Angular (actually hybrid Angular/AngularJS). Finally, two years ago we successfully migrated to Angular (You can read the details in &lt;a href="https://dev.to/psamim/steps-for-upgrading-angularjs-to-angular-9-5508"&gt;another post&lt;/a&gt;) having high hopes that by migrating to it we can leverage a new ecosystem. But after some months it became evident that Angular and AngularJS are so different that we need to rewrite everything, which is not very pleasant. Also, the React ecosystem and talent pool seemed much more vibrant so investing again in Angular for new upcoming features seemed like a non-optimal long-term solution. Over the years there were more experienced React developers in our teams so developing features in React would be much faster than having them in Angular.&lt;/p&gt;

&lt;p&gt;So we were looking for options to be able to keep our current Angular app while being able to add new upcoming features and sections using React or other frameworks. After some search, we found out that micro frontends were the solution we were looking for! Using Single-SPA one can have multiple frameworks, Angular and React, running side by side. Single-SPA is composed of so-called apps each being a SystemJS or ES module. Each app can use a different framework and technology and it only needs to mount itself somewhere on the page. Apps are mounted and unmounted based on the page route. All of this happens client-side. As a side note, I was thinking if we had known about micro frontends, maybe we would never have migrated to hybrid Angular and would have chosen Single-SPA from the beginning.&lt;/p&gt;

&lt;p&gt;Micro frontends are created for various purposes. Mainly it is discussed as a solution for keeping release cycles, deployments, and decisions in each team independent of others, like microservices but for frontend. In our case, we settled on micro frontends to be able to extend the lifetime of a legacy codebase by being able to take advantage of newer frameworks alongside old ones.&lt;/p&gt;

&lt;p&gt;We also assessed some other micro frontend frameworks and solutions, even using iframes and server-side routing, but finally, we decided to go with SignleSPA as it is less opinionated, simple and the best fit for our current codebase. The website is fully static (Angular/AngularJS) and is served from a CDN, so using server-side routing was out of options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;The main benefit was improving the developer experience. Each Single-SPA app is developed separately, so when a developer starts to work on a React app (Single-SPA app) he/she does not need to install all the dependencies for other apps, like Angular, or to know how other apps are configured. Also because each app is small the development cycle of local builds, hot-reloads, and tests are much shorter in time. Developers can build features (Single-SPA apps) truly independently and separately. So now we could use all the experiences of our React developers in our legacy website.&lt;/p&gt;

&lt;p&gt;Each app in single-SPA is bundled separately. Using different apps for different features results in multiple small chunks, instead of a big fat bundle. Splitting the bundle can also be done by configuring Webpack without Single-SPA, but here we got it for free.&lt;/p&gt;

&lt;p&gt;Apart from smaller chunks and bundles we got lazy loading too. Some features are not used frequently, so their bundle can be loaded separately in the background after the initial load.&lt;/p&gt;

&lt;p&gt;As new feature apps are developed using React, even after migration to a whole new framework like NextJS in the future, those parts can be re-used without the need to rewrite everything from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;p&gt;One &lt;a href="https://github.com/angular-microfrontends/navbar/issues/1"&gt;issue&lt;/a&gt; I had was that I could not generate source maps for Angular when it was built as a SystemJS module. I did not dig deep into the issue as it did not have a great impact on the project. But it is was nice to have source maps.&lt;/p&gt;

&lt;p&gt;Another issue was the integration between the apps. We used local storage, global events, and shared modules for this and they all worked pretty well. But deciding on the best option was sometimes challenging.&lt;/p&gt;

&lt;p&gt;Also as the whole concept is new, it took some time for the new developers to learn how to get on track, although this was negligible and even sometimes exciting to learn about new trends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-structure-and-deployment-pipelines"&gt;
  &lt;/a&gt;
  Code structure and deployment pipelines
&lt;/h2&gt;

&lt;p&gt;All Single-SPA apps are put into a single repository. Each app has its own &lt;code&gt;package.json&lt;/code&gt; file and is developed and built separately. There is also the root app which contains the main router responsible for mounting and unmounting other apps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── apps
│   ├── root
│   │   ├── node_modules
│   │   ├── package.json
│   │   └── src
│   │       └── index.html
│   ├── feature-one (Angular)
│   │   ├── node_modules
│   │   └── package.json
│   └── feature-two (React)
│       ├── node_modules
│       └── package.json
└── scripts
    ├── build.sh
    ├── deploy.sh
    └── start.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During deployment, there is a shell script that installs and builds each app and assembles them by copying the built files into a final build directory. Then it uses AWS Cloudformation to create a static website on S3, CloudFront, and Route53.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;ROOT_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4.0-&lt;span class="si"&gt;$(&lt;/span&gt;git log &lt;span class="nt"&gt;-1&lt;/span&gt; &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"%h"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BUILD_NUMBER&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;-&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="nt"&gt;--iso&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;d &lt;span class="k"&gt;in&lt;/span&gt; ./apps/&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" * Installing dependencies for &lt;/span&gt;&lt;span class="nv"&gt;$d&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;echo
    cd&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt;
    npm &lt;span class="nb"&gt;install
    &lt;/span&gt;npm run build
    &lt;span class="nb"&gt;mv &lt;/span&gt;dist &lt;span class="nv"&gt;$ROOT_PATH&lt;/span&gt;/dist/&lt;span class="nv"&gt;$d&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; -
  &lt;span class="k"&gt;fi
done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a single deployment pipeline and repository is used for all the apps, we are not gaining from one of the main benefits of using micro frontends architecture which is independent release cycles for each app. But by putting everything in a single repository we could achieve what we were looking for without dealing with the complexity of managing multiple repositories and deciding on how to update import maps (solutions like &lt;a href="https://github.com/single-spa/import-map-deployer"&gt;import-map-deployer&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-experience"&gt;
  &lt;/a&gt;
  Development Experience
&lt;/h2&gt;

&lt;p&gt;There are two ways to start developing. One is using the single-spa-inspector browser extension. This way the developer opens the fully-deployed live website (not localhost:3000 or any local address) and overrides the import maps to make the live website connect to the Single-SPA app running locally. This way the developer only runs the one feature app he/she is working on while running it inside the live deployed website. It frees the developer from running the whole website locally and even has the side benefit of seeing and developing the feature app in the context of the deployed website connected to the live database. This way of development was personally very unique and new to me, it was amazing.&lt;/p&gt;

&lt;p&gt;Another approach is to start all Single-SPA apps locally. This approach is sometimes needed for debugging the integration between the apps. The below script is used to run all apps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3000

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"⚜    Starting &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;
&lt;span class="nb"&gt;echo
echo&lt;/span&gt; ⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺⎺
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"📡   Listening on https://localhost:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; ⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽⎽
&lt;span class="nb"&gt;echo

echo&lt;/span&gt; &lt;span class="s2"&gt;"⚠    Ignore if the below single-spa apps report about their ports! root app is served on port &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;
&lt;span class="nb"&gt;echo

&lt;/span&gt;npx concurrently &lt;span class="nt"&gt;--names&lt;/span&gt; &lt;span class="s2"&gt;"ROOT,FEATURE1,FEATURE2"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"#E0E0E0,#26C6DA,#FFA726"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s2"&gt;"cd apps/root &amp;amp;&amp;amp; env PORT=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; npm run start:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s2"&gt;"cd apps/feature-one &amp;amp;&amp;amp; env PORT=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;expr&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; + 1&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; npm run start:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s2"&gt;"cd apps/feature-two &amp;amp;&amp;amp; env PORT=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;expr&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; + 2&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; npm run start:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SCRIPT_ENV&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#road-ahead"&gt;
  &lt;/a&gt;
  Road ahead
&lt;/h2&gt;

&lt;p&gt;Adopting micro frontend architecture (Single-SPA) enabled us to further keep our legacy website while utilizing more trendy technologies to deliver new features. Otherwise, we had to rewrite the whole website or stick to what we had. Now that new features are delivered on time and we are on schedule plans can be made to rewrite the whole website without a rush. &lt;/p&gt;

&lt;p&gt;With new trends, frameworks, and ideas popping up in the web development space every day, like server-side rendering, statically generated dynamic content, edge serverless workers, etc., I am not sure if we would again choose Single-SPA for a project creating from scratch. But for our use case, the micro frontend architecture served us well. If you have any framework or architecture in mind to suggest for our next project, please share, I would appreciate it.&lt;/p&gt;

</description>
      <category>singlespa</category>
      <category>microfrontend</category>
      <category>react</category>
      <category>angular</category>
    </item>
  </channel>
</rss>
