<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Bebek Ve Nikah Hediyeliklerinde Güvenilir Adres Hüner Hediyelik</title>
      <author>Hüner Hediyelik Organizasyon</author>
      <pubDate>Mon, 12 Apr 2021 10:07:55 +0000</pubDate>
      <link>https://dev.to/hunerhediyelik/bebek-ve-nikah-hediyeliklerinde-guvenilir-adres-huner-hediyelik-46f2</link>
      <guid>https://dev.to/hunerhediyelik/bebek-ve-nikah-hediyeliklerinde-guvenilir-adres-huner-hediyelik-46f2</guid>
      <description>&lt;p&gt;Firmamız kendi alanında uzman bir konumda hizmet vererek diğer firmalara nazaran %100 başarı oranına sahiptir. Özel günleriniz organizasyon hizmeti sunan kaliteden ödün vermeyerek uzun yıllar hediyelik eşya alanında tercih edilmesi neden haline geldi. Kişiye özel magnetleri, özel isteğinize göre tasarlanmış hediyelik eşyaları, organizasyonu ile uygun fiyatla yüksek kalite ile hizmet vermeye devam ediyor.&lt;br&gt;
Firmamız tüm organizasyon işlerinizde tecrübeli çalışan kadrosu ile sizlerin yanında olmaya ve size kaliteli hizmeti sunmaya devam etmektedir. Sevdiklerinize unutulmayacak anlamlı hediyeler vermek mi istiyorsunuz? Firmamız sizin için en doğru adres olacaktır. İster adınıza özel, ister resimli, isterseniz de tamamen siz değerli müşterilerimizin arzularına göre tasarım ürünlere sahip olmanız Hüner Hediyelik Organizasyon ile artık çok kolay. Firmamız için siz özel ve değerli müşterilerimizin memnuniyeti, anılarına yeni bir anı ekleyebilmek en büyük hedefimiz olmaya devam etmektedir.&lt;/p&gt;

&lt;p&gt;Hüner Hediyelik Organizasyon Ne Gibi Hizmet Veriyor&lt;/p&gt;

&lt;p&gt;Yeni doğan bebekleriniz için hoş geldin bebek magnetlerini &lt;a href="https://www.hunerhediyelik.com/u-k/bebek-sekeri"&gt;https://www.hunerhediyelik.com/u-k/bebek-sekeri&lt;/a&gt; yaptırarak ziyarete gelen sevdiklerinize, mevlit hediyesi olarak ikram edebilirsiniz. Bebeğinizin ismini, tarihini yazdırabileceğiniz gibi isteğinize göre magnetlerinizin üzerine güzel bir anı olarak kalacak sevimli yazılar ekletebilirsiniz. Bebeğinizin cinsiyetine göre farklı figürlerde tasarlanmış magnetleri ucuz fiyata sahip olabilirsiniz. Firmamız bebek magnetleri ile birlikte bebek hediyelikleri içinde farklı tasarım ve sevimli yaratıcı hediyeler hazırlar. Sıradanlaşmış hediyelerin yerine tasarım farklı hediyeler tercih edebilirsiniz. Arzunuza göre hediyelerinizi kişiye özel seçimler yaparak unutulmayacak anlar yaratabilirsiniz. Yeni  doğan bebek, bebek doğum günü, bebek mevlitlerinizde tüm organizasyonlarınızda firmamız sizin yanınızda olmaktan onur duyar.&lt;br&gt;
Sünnet düğünlerinizde, sünnet mevlitlerinizde misafirlerinize hatıra olarak ucuz sünnet hediyelikleri ikram edebilirsiniz. Birçok ürün ve renk seçenekleriyle firmamızla iletişime geçerek uygun fiyata kaliteli hizmetten yararlanabilirsiniz. Anahtarlık, magnet, kalem, mum gibi bir çok hediyelik tasarım ürünleri seçebilirken kaliteli ve trend ürünleri sahip olursunuz. Uygun fiyatla yüksek kaliteli hizmet ile sünnet düğünü ve organizasyonlarınız için Hüner Hediyelik Organizasyonu tercih ederek özel anlarınızı kusursuz hale getirmeniz mümkün hale gelecek.&lt;br&gt;
 Nikâh şekeri yeni evlenecek olan çiftlerin en özel gününde dostlarına, misafirlerine sundukları şükran göstergesidir. Yeni evlenen çiftler en mutlu günlerinin ölümsüz kılınması adına konuklarına hatıra olarak nikah şekeri takdim ederler. Uzun yıllar hatıra olarak saklanabilen nikah şekerlerini dekorasyon gibi kullanarak raflarımızda bir anı olarak saklanabilir.  Nikah şekeri elde tek tek hazırlanan oldukça zahmetli bir iştir. Firmamız tasarım ürünler, kişiye özel ürünlerde bile siz değerli müşterilerimizi düşünerek piyasadaki diğer firma fiyatlarına göre ucuz nikah şekerleri sunar. Müşterilerimizin özel seçimlerine göre ürün ve paketleme malzemelerine, renk seçimlerine göre ürünler hazırlanır. Cam mumluklar, şekerleme ile hazırlanmış cam şişeler ve daha birçok ürün seçenekleri ile firmamız en özel ve mutlu gününüzde sizinle birliktedir.&lt;/p&gt;

</description>
      <category>bebekmagneti</category>
      <category>bebeksekeri</category>
      <category>bebekhediyelikleri</category>
      <category>bebeksusleri</category>
    </item>
    <item>
      <title>Supercharge your blogging efforts with a solid system ⚡</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Mon, 12 Apr 2021 09:59:35 +0000</pubDate>
      <link>https://dev.to/technoglot/supercharge-your-blogging-efforts-with-a-solid-system-3jhf</link>
      <guid>https://dev.to/technoglot/supercharge-your-blogging-efforts-with-a-solid-system-3jhf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@bank_phrom?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Bank Phrom&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/newspaper-printing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Howdy fellow devs! 👋🏻 Warm greetings from Curacao! 😁&lt;/p&gt;

&lt;p&gt;New here? Bon bini! (That's welcome in Papiamentu, the language spoken here on the island 😉) Else, welcome back. 😎&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: Who is this post for? Anyone! But especially for anyone looking to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get better at blogging consistently,&lt;/li&gt;
&lt;li&gt;get started with blogging on the right foot,&lt;/li&gt;
&lt;li&gt;read a fun, light-hearted yet informative post 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, if any of that checks out, you have come to the right place! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#brief-intro"&gt;
  &lt;/a&gt;
  Brief intro ✍🏻
&lt;/h1&gt;

&lt;p&gt;Last week I followed one of the sessions of the Hashnode Bootcamp III. The goal of said "bootcamp" is to help developers build a strong online presence and personal brand. Cool stuff, really! &lt;/p&gt;

&lt;p&gt;The first session facilitated by Sam Julien, DevRel Manager at Auth0 (pronounced Auth zero), really spoke to me. It was titled: "The Counterintuitive Secret to Shipping Better Articles Faster". If you'd like to check out the slides for this talk, you can find them &lt;a href="https://speakerdeck.com/samjulien/the-counterintuitive-secret-to-shipping-better-articles-faster"&gt;here&lt;/a&gt;. In this post, I'll share with you what I have learned form his talk, as well as some blogging tips I've picked up along the way.&lt;/p&gt;

&lt;p&gt;So, without further ado, let's get to it! 🚀&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-system-for-blogging"&gt;
  &lt;/a&gt;
  A system for blogging?! 🤔
&lt;/h1&gt;

&lt;p&gt;Yep. You read that right. But why a system? Many of us may not be huge fans of systems, but let's not deny their benefits. One major benefit of having a system for blogging in place (as described by Sam) is that you stop relying on motivation to get things done. Truth is, motivation is something you are bound to run out of at some point in time. And blogging (or creating any kind of content) only when you feel inspired and motivated, probably means not doing anything at all. Ever.&lt;/p&gt;

&lt;p&gt;Additionally, by having a system for blogging (or for creating content in general), you streamline and speed up the content creation process significantly. How? By always following a set of steps, you are able to produce content (blogs, videos or otherwise) in the same fashion, always maintaining the same quality. Once you have a system, you no longer need to put effort in thinking how and where to start, and that ultimately saves you time. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cool-what-does-that-system-look-like"&gt;
  &lt;/a&gt;
  Cool, what does that system look like? 🔍
&lt;/h1&gt;

&lt;p&gt;Well, the truth is, it can look different for everyone. There is no one-size-fits-all, sorry.  However, here's what Sam proposes: a content creation system with five steps. See the steps below. 👇🏻&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-draft"&gt;
  &lt;/a&gt;
  Step 1️⃣: Draft 📝
&lt;/h4&gt;

&lt;p&gt;In essence, this is the inception of any content you want to create. You typically start off by putting a structure on paper. You come up with an outline for your next article, you do some research and the like. The same principle applies to other forms of content too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-create"&gt;
  &lt;/a&gt;
  Step 2️⃣: Create 💻
&lt;/h4&gt;

&lt;p&gt;In step 2 of the system, you take your draft and start expanding on it. You add images and GIFs, you create diagrams, you write code snippets and so on, until your post is where you want it to be. Ah, and don't forget the grammar and spell check! Might as well get a friend or colleague to proofread your article too, if possible.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-publish"&gt;
  &lt;/a&gt;
  Step 3️⃣: Publish 🔼
&lt;/h4&gt;

&lt;p&gt;This one speaks for itself. This is the step where you finally release your post into the wild. It can be on your personal website, here on DEV.to or wherever else that you are blogging. Cross-posting is highly encouraged, but don't forget your canonical URL! 😉&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-promote"&gt;
  &lt;/a&gt;
  Step 4️⃣: Promote 📣
&lt;/h4&gt;

&lt;p&gt;Perhaps the part that some of us dread the most. Depending on how serious a blogger/content creator you are, you may promote your posts more aggressively across various channels. If you are a casual blogger or content creator, you probably spend zero time in this phase and that is fine too! Stick to whatever you are comfortable with! 😊&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-garden"&gt;
  &lt;/a&gt;
  Step 5️⃣: Garden 👩🏻‍🌾👨🏻‍🌾
&lt;/h4&gt;

&lt;p&gt;In this step you basically groom your content over time so that it ages gracefully. You maintain your posts by revisiting them, updating them wherever necessary and by fixing broken links and the like. Gardening your posts can entail various tasks and can be arduous work, so make sure to go in with a plan.&lt;/p&gt;

&lt;p&gt;For a visual depiction of the whole system, please click &lt;a href="https://speakerdeck.com/samjulien/the-counterintuitive-secret-to-shipping-better-articles-faster?slide=40"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that this five step system can be split in two (2) phases, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;the Creation Phase&lt;/strong&gt;, which entails activities such as drafting and creating, and&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;the Post-Publication Phase&lt;/strong&gt;, which encompasses the remaining three steps; Publish, Promote and Garden.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#you-need-a-toolbox"&gt;
  &lt;/a&gt;
  You need a toolbox 🧰
&lt;/h1&gt;

&lt;p&gt;You've now got a system, or are in the process of crafting one for yourself, but in addition to it, you need a toolbox. To help you in the &lt;strong&gt;Creation Phase&lt;/strong&gt; of your system, Sam suggests you put the following in your toolbox:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;scratchpad&lt;/strong&gt; 📒&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;task manager&lt;/strong&gt; 📝 and&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;knowledge system&lt;/strong&gt; (aka a second brain) 🧠&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of scratchpad tools are &lt;strong&gt;Notepad++&lt;/strong&gt;, &lt;strong&gt;Sublime Text&lt;/strong&gt;, &lt;strong&gt;Google Docs&lt;/strong&gt;, &lt;strong&gt;Drafts&lt;/strong&gt;, or whatever you like to use for quick note taking. When choosing a scratchpad tool, make sure it is fast, easy to use, and supports various export formats.&lt;/p&gt;

&lt;p&gt;Some task manager tools you can use are &lt;strong&gt;OmniFocus&lt;/strong&gt;, &lt;strong&gt;Things&lt;/strong&gt;, &lt;strong&gt;Google Keep&lt;/strong&gt; or, of course, the tool you prefer most. When looking for a task manager (in case you haven't got one), choose for something that works well with your brain. If &lt;strong&gt;Trello&lt;/strong&gt; boards and list formats work wonders for ya, then go for it! You may also want to settle for a tool that allows you to add extra context and tags.&lt;/p&gt;

&lt;p&gt;Lastly, a knowledge system. I'm sure you have heard of &lt;strong&gt;Notion&lt;/strong&gt; at some point. That's nowadays the go-to second brain option for many, many people. But, there's more tools out there, such as &lt;strong&gt;Evernote&lt;/strong&gt;, &lt;strong&gt;Roam&lt;/strong&gt;, &lt;strong&gt;OneNote&lt;/strong&gt;, &lt;strong&gt;Obsidian&lt;/strong&gt; and more... (Yes, the list goes on and on. Welcome to tool hell! 😈) Struggling to choose a tool? No worries, here's what to look for in a second brain kind of tool: various organization formats (collections and the like) and the possibility to add multimedia and other rich content to your notes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-tips"&gt;
  &lt;/a&gt;
  BONUS tips 💡
&lt;/h1&gt;

&lt;p&gt;Before you go, let me give you a few blogging tips as a parting gift. 🎁 I hope you find them helpful!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#start-with-what-you-have"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Start with what you have.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Technical blogs are awesome, but take more time to craft to "perfection". To avoid the early disillusionment, start by sharing some learnings and/or personal experiences that you think may benefit others in the community. Writing from your heart and personal experiences is 10x quicker than writing more complex and technical content (this is by no means discouraged, but do start small and build up from there).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-til-acronym-for-today-i-learned-blogs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Write TIL (acronym for Today I Learned) blogs.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;These are typically small blogs where you share something new that you learned today. These are easier to craft and also serve as a fun way to keep track of what you have learned over time. Here's a TIL format that Sam shared with the audience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;1) Write a short intro&lt;/strong&gt; (2 to 3 sentences) describing the problem you encountered.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2) Write a paragraph or two describing the solution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3) Share the code&lt;/strong&gt; or resources that helped you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;4) Quick 2-sentence recap&lt;/strong&gt; of the problem and solution. Finally, add some social links where people can connect with you.
(Of course you can use your own TIL format, but if you are stuck and don't know where to start, the steps above may be of help.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#be-consistent-yet-realistic"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Be consistent, yet realistic.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;You know your schedule better than anyone else. Working fulltime and blogging/creating content every day, may not be the way to go for most. Whatever you choose to do, be realistic and consistent about it. &lt;/p&gt;

&lt;p&gt;For example, I like to post two blogs every week. Doesn't matter when exactly (I prefer weekdays over weekends), as long as I post two blogs. For me this is doable, so find what works for you and give it your best shot.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#keep-a-list-of-ideas"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Keep a list of ideas.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Pretty obvious one, but really, keep a list. Your brain can't possibly archive all your ideas. Get 'em out of there ASAP! 🧠&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dont-worry-about-the-numbers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Don't worry about the numbers&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;By this I mean, do not measure your success only with number of likes or number of followers. Yes, these can be good metrics to assess what topics your (target) audience likes the best and such, but it says little about your success in general. &lt;/p&gt;

&lt;p&gt;Don't get demotivated if your post doesn't do as well as you hoped it would do. That's totally normal. If I can give you any advice at all (take it or leave it): do it for yourself. The rest will follow. (It is totally acceptable to be ambitious and to want to have a large followers base and the like, but don't lose your sleep over it. Just saying 😉)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's all folks! 🐷
&lt;/h1&gt;

&lt;p&gt;That's it for today's post! If you liked it, let me know in the comments below. 👇🏻 What system do you have in place for blogging or creating content consistently? I'd love to hear from you! &lt;/p&gt;

&lt;p&gt;Remember: stay safe and code on! 👩🏻‍💻👨🏻‍💻 See you soon! &lt;/p&gt;

&lt;p&gt;Sources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/samjulien/the-counterintuitive-secret-to-shipping-better-articles-faster"&gt;Sam's slide deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://samjulien.hashnode.dev/the-counterintuitive-secret-to-shipping-better-articles-faster-ckn4vier40hvlefs19u7h6xan"&gt;A list of resources recommended by Sam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scratchpad tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://notepad-plus-plus.org/"&gt;Notepad++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/"&gt;Google Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getdrafts.com/"&gt;Drafts (iOS &amp;amp; Mac only)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Task Manager tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.omnigroup.com/omnifocus"&gt;OmniFocus (iOS &amp;amp; Mac only, Premium $$)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/things-3/id904237743"&gt;Things (iOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://keep.google.com/"&gt;Google Keep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2nd Brain 🧠 tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://roamresearch.com/"&gt;Roam (Premium $$)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.onenote.com/"&gt;OneNote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>writing</category>
      <category>techtalks</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Access All Videos BEFORE Anyone Else - For 1 coffee a month!</title>
      <author>Davide Benvegnù</author>
      <pubDate>Mon, 12 Apr 2021 09:56:50 +0000</pubDate>
      <link>https://dev.to/n3wt0n/access-all-videos-before-anyone-else-for-1-coffee-a-month-2j52</link>
      <guid>https://dev.to/n3wt0n/access-all-videos-before-anyone-else-for-1-coffee-a-month-2j52</guid>
      <description>&lt;h1&gt;
  &lt;a href="#announcement"&gt;
  &lt;/a&gt;
  📢ANNOUNCEMENT📢
&lt;/h1&gt;

&lt;p&gt;I'm super hyped to announce that we now have the MEMBERSHIPS enabled on the &lt;a href="https://www.youtube.com/c/CoderDave"&gt;CoderDave YouTube channel&lt;/a&gt;... and for &lt;strong&gt;less than 1 coffee a month&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;By being a member, you get &lt;strong&gt;many benefits&lt;/strong&gt;. But the most &lt;strong&gt;important&lt;/strong&gt; ones are:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#early-access-to-all-videos"&gt;
  &lt;/a&gt;
  📼EARLY ACCESS TO ALL VIDEOS
&lt;/h4&gt;

&lt;p&gt;You can see all the videos as soon as they are uploaded. &lt;br&gt;
Usually I upload the videos about a week in advance, and schedule them.&lt;br&gt;
Being a member you can see them straight away!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vh0EMtyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbvc7l3t6rblab59txn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vh0EMtyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbvc7l3t6rblab59txn.png" alt="Memberships"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#access-to-the-discord-server"&gt;
  &lt;/a&gt;
  💌ACCESS TO THE DISCORD SERVER
&lt;/h5&gt;

&lt;p&gt;You get access to CoderDave's community private Discord Server, where you can chat with me and with the other members, via message and audio!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#priority-reply-to-comments"&gt;
  &lt;/a&gt;
  🔂PRIORITY REPLY TO COMMENTS
&lt;/h5&gt;

&lt;p&gt;You'll get your comments to my video replied as soon as I possibly can :)&lt;/p&gt;

&lt;p&gt;✨&lt;strong&gt;AND MUCH MORE!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://www.youtube.com/c/CoderDave/membership"&gt;Membership tab of the channel&lt;/a&gt; to discover more!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>video</category>
      <category>youtube</category>
      <category>news</category>
    </item>
    <item>
      <title>Building a CSS-in-JS library from scratch</title>
      <author>Thomas Cullen</author>
      <pubDate>Mon, 12 Apr 2021 09:28:25 +0000</pubDate>
      <link>https://dev.to/thomascullen/building-a-css-in-js-library-from-scratch-3id5</link>
      <guid>https://dev.to/thomascullen/building-a-css-in-js-library-from-scratch-3id5</guid>
      <description>&lt;p&gt;CSS-in-JS libraries are popping up all over the place at the moment. They are a really powerful way to style apps but how do they actually work?. In this post we are going to build our own CSS-in-JS library.&lt;/p&gt;

&lt;p&gt;Before we dig in it is worth saying that if you are looking for a CSS-in-JS solution, you should probably use one of the existing libraries out there rather then building your own as they are well tested, more performant and have more functionality. This is purely a learning exercise! Let's dive in.&lt;/p&gt;

&lt;p&gt;We are going to create a simple css-in-js library that follows the 'styled' API made popular by &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;. We will only focus on basic functionality so we won't be looking at things like server side rendering or browser prefixing. Most CSS-in-JS libraries work by taking style definitions, generating class names for them and injecting them inside of a style tag in the document head. So let's start by creating this style tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now attach any CSS rules we want to this style tag using the CSSStyleSheet &lt;code&gt;insertRule&lt;/code&gt; method. We can also make use of the &lt;code&gt;cssRules&lt;/code&gt; method to ensure we are always adding the rule to the end of the list by providing the list length as the index we want to insert the rule at.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.red { color: red; }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about the CSSStyleSheet interface &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next thing we need is a function that will take a CSS rule, generate a className, insert a new rule into our style tag and return the generated class name for us to use in our components. For our use case, we can simply use the index to create a unique class name instead of doing any kind of hashing like most libraries do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`css-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; { &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use our &lt;code&gt;css&lt;/code&gt; function to generate class names that we can provide to our components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: red;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is an example&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's great and all but it's far from the API that we want to have. We want to be able to define components using the popular "styled" API like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  color: red;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to achieve this we need to take a quick detour to explore tagged template literals. First we need to know what a template literal is. A template literal is a type of string that allows you to interpolate values inside of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A tagged template literal is a special way of parsing a template literal with a function. This function will be called with an array of all of the string parts as well as any variables provided.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strings: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;args: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thomas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="s2"&gt;`My name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// strings: ["My name is", "!"]&lt;/span&gt;
&lt;span class="c1"&gt;// args: ["Thomas"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we know a template literal can be tagged with a function, we can revisit out css-in-js implementation to achieve the API we want. We need to create a &lt;code&gt;styled&lt;/code&gt; function that takes the type of dom element we want to render and returns a function that we can then use as a tagged template literal to create our react component. Let's keep things simple to start with and just take the styles that we pass in as is so that we can focus on getting the API we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;styledTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// remember that tagged template literals give us the string parts as an&lt;/span&gt;
      &lt;span class="c1"&gt;// array so for now we just pass the first element of the array which will&lt;/span&gt;
      &lt;span class="c1"&gt;// be the entire CSS rule because we aren't passing any variables.&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😦 I know, that's a lot of functions returning functions. Let's walk through it. The &lt;code&gt;styled&lt;/code&gt; function returns the &lt;code&gt;styledTemplate&lt;/code&gt; function. The &lt;code&gt;styledTemplate&lt;/code&gt; function is similar to our &lt;code&gt;greet&lt;/code&gt; function from earlier. We call it as a tagged template literal. This then returns the react component which we can render. So with all of this in place we can do do the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 24px;
  font-weight: 600;
`&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this is finally starting to look like the styled-components API we wanted. But what about things like adapting styles based on component props? Let's say we wanted our Header component to change color based on a &lt;code&gt;color&lt;/code&gt; prop as well as allowing the background-color to be customized with a &lt;code&gt;bg&lt;/code&gt; prop. For that we need to revisit how we are treating the tagged template literal. Remember how our &lt;code&gt;greet&lt;/code&gt; function was given a second array of all of the variables passed into the template literal? Well we can also pass functions into the template literal, which we can then call will our component props at render time. 🤯. Let's create a new function that will process the string literal parts and any functions we provide it into a single CSS rule.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resolveRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;part&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this function we only have one thing left to do which is to update our &lt;code&gt;styled&lt;/code&gt; function to make use of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;styledTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolved&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resolveRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolved&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have it! Our very own CSS-in-JS library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  font-size: 24px;
  font-weight: 600;
  color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bg&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;transparent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@tkh44/writing-a-css-in-js-library-from-scratch-96cd23a017b4"&gt;https://medium.com/@tkh44/writing-a-css-in-js-library-from-scratch-96cd23a017b4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mxstbr.blog/2016/11/styled-components-magic-explained/"&gt;https://mxstbr.blog/2016/11/styled-components-magic-explained/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wesbos.com/tagged-template-literal"&gt;https://wesbos.com/tagged-template-literal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is API testing? Advantages of API testing</title>
      <author> QAble Testlab Private Limited</author>
      <pubDate>Mon, 12 Apr 2021 09:28:20 +0000</pubDate>
      <link>https://dev.to/qablehq/what-is-api-testing-advantages-of-api-testing-p94</link>
      <guid>https://dev.to/qablehq/what-is-api-testing-advantages-of-api-testing-p94</guid>
      <description>&lt;p&gt;Before going for API testing, let’s have a quick look at the brief introduction of API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-api"&gt;
  &lt;/a&gt;
  What is API?
&lt;/h2&gt;

&lt;p&gt;Basically, API is a connecting source that enables the exchange of information between two different applications. In more simplified term, the function of API is to deliver the user’s response to the application, and send application’s response to the user.&lt;/p&gt;

&lt;p&gt;Furthermore, API is a collection of functions that enables applications to interact with the microservices, operating systems and other components of an existing software. &lt;/p&gt;

&lt;p&gt;You can check out this example: We all are quite used to making online payments through various modes like Internet Banking, UPI, Wallets, etc.&lt;/p&gt;

&lt;p&gt;This is an application of Payment Gateway API. Here, you will get to know about the concepts of API testing services, processes, and benefits of API testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-api-testing"&gt;
  &lt;/a&gt;
  What is API Testing:
&lt;/h3&gt;

&lt;p&gt;To validate the performance, reliability, and security of the &lt;a href="https://www.qable.io/api-testing-service/"&gt;Application Programming Interface (API)&lt;/a&gt;, the QA team follows the API testing method.&lt;/p&gt;

&lt;p&gt;Also, the main objective of API testing is to verify the responsiveness and functional behavior of the API under various scenarios. &lt;/p&gt;

&lt;p&gt;During API testing, testers prefer to use software to send calls to the APIs and validates their performance. Also, they make a note of the system’s response.&lt;/p&gt;

&lt;p&gt;Moreover, during the process, the team keeps all the attention on the business logic layer rather than the look &amp;amp; feel, etc. &lt;/p&gt;

&lt;p&gt;Furthermore, to deliver accurate outputs, you must examine the APIs, and hence knowing about the API testing process is a must.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-does-api-testing-need-to-perform"&gt;
  &lt;/a&gt;
  Why does API Testing need to perform?
&lt;/h3&gt;

&lt;p&gt;If you are thinking about the need for API testing, the following section will help you. We are living in a time where users expect everything ready. This is the reason; IT companies are inclining towards the concept of microservices. &lt;/p&gt;

&lt;p&gt;Moreover, microservices facilitate different datastores corresponding to each section of the application that requires different commands for operations.&lt;/p&gt;

&lt;p&gt;Companies prefer to use the concept of microservices because it allows quick deployment which further makes the development process smoother.&lt;/p&gt;

&lt;p&gt;However, we have shared the concept of microservices because APIs play an important role here. Each section of the applications gets commands through the API only. Now you must be able to connect microservices and APIs. &lt;/p&gt;

&lt;p&gt;Hence, API testing is a must to do because it helps to identify the errors or bugs at the very early stage of development.&lt;/p&gt;

&lt;p&gt;Also, through API testing, we get to know whether the API is effectively interacting with all the sections of the code or not? Here, testers validate the response of the API. &lt;/p&gt;

&lt;p&gt;Furthermore, you must have heard, “Sooner is better” and the same goes here. Finding bugs at the earlier stages, always make the application more productive and robust.&lt;/p&gt;

&lt;p&gt;Also, it protects the application from further damages. Because of these important reasons, one should definitely go for the API testing process. Also, the mobile API testing is equally significant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-know-about-api-testing-in-the-test-pyramid"&gt;
  &lt;/a&gt;
  Do you know about API Testing in the test pyramid?
&lt;/h3&gt;

&lt;p&gt;If you are investing more than expected time waiting on the test suite to run? Also, if there is a scenario in which you are rerunning the test suits because it fails every time?&lt;/p&gt;

&lt;p&gt;If you are experiencing these kinds of issues, you are missing the test pyramid.&lt;/p&gt;

&lt;p&gt;Basically, the test pyramid is a framework that helps developers to bring quality to the product. It acts as a guide to make an application robust and fast which further drives them towards the reliable test suite. &lt;/p&gt;

&lt;p&gt;Being a leading API testing company, we always recommend including the test pyramid because it offers immediate feedback to the development team that the updated code will not damage the existing features of the application.&lt;/p&gt;

&lt;p&gt;As a result, the developer takes the decision either to move ahead with the code or not which further helps in saving time and building the robust platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#levels-of-pyramid-testing"&gt;
  &lt;/a&gt;
  Levels of Pyramid Testing
&lt;/h3&gt;

&lt;p&gt;Moreover, the test pyramid consists of three levels. The pyramid name is given because of this structural flow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lowest level: Unit testing.&lt;br&gt;
Middle tier: Integration testing.&lt;br&gt;
Top-level: End-to-end testing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, the implementation of the test pyramid reduces your waiting time that you spend for a test suite to run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-api-testing-services"&gt;
  &lt;/a&gt;
  Advantages of API testing services:
&lt;/h2&gt;

&lt;p&gt;So far, you know about API testing and the reasons why we use it. Now here we will get to know about some concrete advantages of the running API testing process:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-saves-time"&gt;
  &lt;/a&gt;
  1. Saves Time:
&lt;/h3&gt;

&lt;p&gt;Do you think we need to explain the worth of time? In such a competitive time, if you are not smartly optimizing your time, you will be lagging.&lt;/p&gt;

&lt;p&gt;Through &lt;a href="https://www.qable.io/api-testing-service/"&gt;API testing services&lt;/a&gt; testers save time because API testing always takes lesser time as compared to GUI functional testing. &lt;/p&gt;

&lt;p&gt;For instance: If we compare both the concepts practically, we find the worth of API testing. &lt;/p&gt;

&lt;p&gt;Suppose you are running 40,000 automated API tests, it will take only 10-12 hours whereas if you perform the same activity for GUI tests it will take 65 hours approximately.&lt;/p&gt;

&lt;p&gt;Big difference guys, we can do lots of productive tasks such as marketing in the saved hours. Moreover, when API testing is saving time, will automatically save your cost.&lt;/p&gt;

&lt;p&gt;Hence acknowledge API testing benefits and plan the execution accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-no-dependency-on-programming-language"&gt;
  &lt;/a&gt;
  2. No dependency on programming language:
&lt;/h3&gt;

&lt;p&gt;During API testing, the exchange of data takes place using XML or JASON. So in order to perform the activity, the testing team is free to select any core language.&lt;/p&gt;

&lt;p&gt;Also, it does not demand too much technical knowledge. If you know, how to perform testing that is enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3earlier-identification-of-the-bugs"&gt;
  &lt;/a&gt;
  3.Earlier identification of the bugs:
&lt;/h3&gt;

&lt;p&gt;This is one of the main API testing benefits because it increases the productivity of the application by saving cost and time both.&lt;/p&gt;

&lt;p&gt;Also, when the developer gets bugs at the initial stages, they resolve them more efficiently. &lt;/p&gt;

&lt;p&gt;Moreover, as we know codes are always interrelated with each other and a small bug can be a bigger issue at the later stages. Also, resolving them becomes complex and takes time as well. &lt;/p&gt;

&lt;p&gt;So these are the API testing benefits and one should always include API testing prior to delivering an application to the client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-tools-for-the-api-testing"&gt;
  &lt;/a&gt;
  Top Tools for the API Testing
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-postman"&gt;
  &lt;/a&gt;
  1. Postman
&lt;/h3&gt;

&lt;p&gt;Testers who are not comfortable dealing with the code in an IDE using the developer’s programming language should go for Postman.&lt;/p&gt;

&lt;p&gt;It is the tool to perform API testing. Basically, Postman was only a Chrome browser plugin and by this, it has extended its limits. The tool offers their solution for Windows as well as Mac.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-postman"&gt;
  &lt;/a&gt;
  Advantages of Postman
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;No need to learn the new programming language.&lt;br&gt;
An interactive interface that makes it easy to understand.&lt;br&gt;
Supports maximum OS (operating systems) like Windows, Mac, Linux, etc.&lt;br&gt;
Facilitates features of Run, Test, Monitor, and Document.&lt;br&gt;
Easy KT (Knowledge Transfer) process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-rest-assured"&gt;
  &lt;/a&gt;
  2. Rest Assured
&lt;/h3&gt;

&lt;p&gt;For those who are looking for API testing in Java language only, Rest Assured will be a reliable option. Also, it is open-source and one can efficiently work on it. Moreover, in order to use the API testing tool, one should not be an HTTP expert.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-rest-assured"&gt;
  &lt;/a&gt;
  Advantages of Rest Assured
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The tool is available with in-built functions and you are not required to write code from scratch.&lt;br&gt;
In order to test the Web APIs, no expertise in HTTP is required.&lt;br&gt;
Rest Assured supports BDD (Behavior Driven Development) testing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-katalon-studio"&gt;
  &lt;/a&gt;
  3. Katalon Studio:
&lt;/h3&gt;

&lt;p&gt;Katalon Studio facilitates end-to-end testing services and hence became the leading tool for API testing. Also, it offers solutions for programmers as well as testers.&lt;/p&gt;

&lt;p&gt;Moreover, the team prefers to use it because it is free and one can test even Desktop Apps, Web Apps, and Mobile Apps. Actually, Katalon Studio is an emerging API testing tool that supports SOAP and REST requests.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-katalon-studio"&gt;
  &lt;/a&gt;
  Advantages of Katalon Studio:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;It supports CI/DC Integration.&lt;br&gt;
Katalon Studio is based on the data-driven concept.&lt;br&gt;
Supports SOAP as well as REST APIs.&lt;br&gt;
Works well across multiple operating systems like Mac, Windows, and Linux.&lt;br&gt;
Non-technical person can also work on the tool comfortably.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#4-soapui"&gt;
  &lt;/a&gt;
  4. SoapUI:
&lt;/h3&gt;

&lt;p&gt;When you are finding yourself in the most complicated scenario during API testing, simply for SOAP API. It helps developers to execute tests for Web Services, REST, and SOAP APIs.&lt;/p&gt;

&lt;p&gt;The tool is dedicatedly built for API testing that creates custom codes by the use of Groovy. The tool becomes easier to access because of its drag and drop feature.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-soap-api"&gt;
  &lt;/a&gt;
  Advantages of SOAP API:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;One can test the most complex scenario with the help of the tool.&lt;br&gt;
Exclusively for API testing.&lt;br&gt;
Supports asynchronous testing.&lt;br&gt;
Easy to run test cases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#5-paw"&gt;
  &lt;/a&gt;
  5. PAW
&lt;/h3&gt;

&lt;p&gt;An API testing tool that is designed for MAC operating systems. Whether you are an API user or a creator, PAW will be useful for you anyway. It helps to create HTTP requests. Also, with the help of PAW, testers will be able to examine the response from the server.&lt;/p&gt;

&lt;p&gt;Moreover, it allows the QA team to generate the client codes as well. These magnificent features make it the leading API testing tool for MAC.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-paw"&gt;
  &lt;/a&gt;
  Advantages of PAW:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Enrich with an interactive and attractive interface.&lt;br&gt;
Very easy to learn and perform testing.&lt;br&gt;
Gives concrete performance as compared to other API testing tools.&lt;br&gt;
It holds the feature of multi-dimensional settings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#6-jmeter"&gt;
  &lt;/a&gt;
  6. JMeter
&lt;/h3&gt;

&lt;p&gt;By seeing this name, you must be thinking about load testing. You are right. Initially, JMeter was created to perform load testing but because of its extra features, people start using it for API testing as well.&lt;/p&gt;

&lt;p&gt;Also, it performed well and that is why still in trend. The additional features of JMeter make API testing easier and result-oriented. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-jmeter"&gt;
  &lt;/a&gt;
  Advantages of JMeter
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Enrich with features to test API as well as performance.&lt;br&gt;
Reduces testing efforts.&lt;br&gt;
Supports Jenkins so can be integrated with the CI pipelines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#7-karate-dsl"&gt;
  &lt;/a&gt;
  7. Karate DSL
&lt;/h3&gt;

&lt;p&gt;With powerful assertion capabilities here comes another API testing tool. Karate DSL is an open-source framework based on the cucumber library.&lt;/p&gt;

&lt;p&gt;The API testing tool helps to create environments for API-based BDD tests using simple methods. Here, no need to write long step-by-step definitions in order to execute the run.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-karate-dsl"&gt;
  &lt;/a&gt;
  Advantages of Karate DSL
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Karate DSL supports configuration switching.&lt;br&gt;
For API testing, it allows reusing of payload-data.&lt;br&gt;
The tool supports multi-thread parallel execution.&lt;br&gt;
Simple and easy to execute tests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#8-assertible"&gt;
  &lt;/a&gt;
  8. Assertible
&lt;/h3&gt;

&lt;p&gt;If you are looking for a reliable API testing tool, Assertible can also be an option. It follows CI (Continuous Integration) and delivery pipeline for automated API tests. Also, the testing tool supports GitHub, Slack, and Zapier.&lt;/p&gt;

&lt;p&gt;Assertible has a Sync feature that allows testers to update their tests automatically if any change is made in their specification.&lt;/p&gt;

&lt;p&gt;A new feature was introduced to Assertible in Oct 2019 which we call Encrypted Variable. Here, you get a new and secure way to store passwords, tokens, and data which further improves the performance of the APIs. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-assertible"&gt;
  &lt;/a&gt;
  Advantages of Assertible
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Offers validation of HTTP responses.&lt;br&gt;
Keeps JSON Path integrity tests.&lt;br&gt;
No manual intervention is needed towards any change in specification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#roi-for-the-api-testing"&gt;
  &lt;/a&gt;
  ROI for the API Testing?
&lt;/h3&gt;

&lt;p&gt;We at QAble a leading &lt;a href="https://www.qable.io/api-testing-service/"&gt;API testing company&lt;/a&gt; across the globe and by using our experience we are highlighting the ROI of API testing. &lt;/p&gt;

&lt;p&gt;By reading the above content, you must have understood the worth of web API testing as well as &lt;a href="https://www.qable.io/api-testing-service/"&gt;mobile API testing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, we understand, building a product and launching it in the market is not everyone’s cup of tea and hence you need to be smart to make your product smart.&lt;/p&gt;

&lt;p&gt;If you follow the right approach and strategies from development to execution you will get the best returns on your investment. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;By following the API testing process, you will be able to&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Generate more time to market the product.&lt;br&gt;
Gain client’s trust easily.&lt;br&gt;
Save time and save cost.&lt;br&gt;
Make your application more productive.&lt;br&gt;
Maximize the revenue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Hence always give priority to API testing. Also, if you are looking for the most prominent API testing company, QAble will be on the top. Feel free to share your queries. We will be more than happy to assist.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>apitesting</category>
    </item>
    <item>
      <title>Solution: Beautiful Arrangement II</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 12 Apr 2021 09:20:40 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-beautiful-arrangement-ii-1lag</link>
      <guid>https://dev.to/seanpgallivan/solution-beautiful-arrangement-ii-1lag</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/beautiful-arrangement-ii/discuss/1154742"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-667-medium-beautiful-arrangement-ii"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/beautiful-arrangement-ii/"&gt;Leetcode Problem #667 (&lt;em&gt;Medium&lt;/em&gt;): Beautiful Arrangement II&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given two integers &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;, you need to construct a list which contains &lt;code&gt;n&lt;/code&gt; different positive integers ranging from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt; and obeys the following requirement:&lt;br&gt;
Suppose this list is &lt;code&gt;[a1, a2, a3, ... , an]&lt;/code&gt;, then the list &lt;code&gt;[|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|]&lt;/code&gt; has exactly &lt;code&gt;k&lt;/code&gt; distinct integers.&lt;/p&gt;

&lt;p&gt;If there are multiple answers, print any of them. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 3, k = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1, 2, 3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 3, k = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[1, 3, 2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; are in the range &lt;code&gt;1 &amp;lt;= k &amp;lt; n &amp;lt;= 10^4&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For this problem, we have to think about the nature of the range of possible values for &lt;strong&gt;k&lt;/strong&gt; and their matching arrays. The smallest value of &lt;strong&gt;k&lt;/strong&gt; possible is obviously &lt;strong&gt;1&lt;/strong&gt;, which can be achieved by a strictly increasing (or decreasing) array. Thinking about the largest possible value for &lt;strong&gt;k&lt;/strong&gt;, however, is slightly more challenging.&lt;/p&gt;

&lt;p&gt;First, we can consider the range of values in our array, which is &lt;strong&gt;[1, n]&lt;/strong&gt;. The largest possible absolute difference of any two numbers in that range would obviously be the difference between the two extremes, &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;n&lt;/strong&gt;, which is &lt;strong&gt;n - 1&lt;/strong&gt;. Since the smallest possible absolute difference is obviously &lt;strong&gt;1&lt;/strong&gt;, then it would appear to perhaps be possible to achieve each difference in the range &lt;strong&gt;[1, n - 1]&lt;/strong&gt;, or a &lt;strong&gt;k&lt;/strong&gt; value of &lt;strong&gt;n - 1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But is this actually possible?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's take &lt;strong&gt;n = 5&lt;/strong&gt; and &lt;strong&gt;k = 4&lt;/strong&gt; for example. The only possible way to get the absolute difference of &lt;strong&gt;4&lt;/strong&gt; would be for &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt; to be consecutive. After that there are two possibilites for next smallest absolute difference of &lt;strong&gt;3&lt;/strong&gt;, which are &lt;strong&gt;1&lt;/strong&gt; &amp;amp; &lt;strong&gt;4&lt;/strong&gt; or &lt;strong&gt;2&lt;/strong&gt; &amp;amp; &lt;strong&gt;5&lt;/strong&gt;. Since the &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;5&lt;/strong&gt; are already next to each other, that means we can achieve this second step with either &lt;strong&gt;[1,5,2]&lt;/strong&gt; or &lt;strong&gt;[4,1,5]&lt;/strong&gt; (or their reverses).&lt;/p&gt;

&lt;p&gt;Continuing this trend along, we can gradually see that we can indeed achieve the maximum &lt;strong&gt;k&lt;/strong&gt; value of &lt;strong&gt;n - 1&lt;/strong&gt; by zig-zagging back and forth between the remaining extremes as we add them to our array. In the previous example, one such example would be &lt;strong&gt;[1,5,2,4,3]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The question then remains how we go about achieving some medium value of &lt;strong&gt;k&lt;/strong&gt; larger than &lt;strong&gt;1&lt;/strong&gt; but smaller than &lt;strong&gt;n - 1&lt;/strong&gt;. The answer to that lies in considering the array to be made of two parts. In the first part, &lt;strong&gt;[1, k+1]&lt;/strong&gt;, we can achieve our &lt;strong&gt;k&lt;/strong&gt; number of absolute differences, then we can simply fill in the remaining range, &lt;strong&gt;[k+2, n]&lt;/strong&gt;, with the ideal incrementing values without increasing the value of &lt;strong&gt;k&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, if we have &lt;strong&gt;n = 8&lt;/strong&gt; and &lt;strong&gt;k = 4&lt;/strong&gt;, we would build the first part the same as the last example, &lt;strong&gt;[1,5,2,4,3]&lt;/strong&gt;, then we would add on the remaining values in increasing order, &lt;strong&gt;[6,7,8]&lt;/strong&gt;, to make the wole array, &lt;strong&gt;[1,5,2,4,3,6,7,8]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To acheive the zig-zag fill, we can use variables for the top and bottom values of our first part (&lt;strong&gt;a, z&lt;/strong&gt;), then use a &lt;strong&gt;modulo&lt;/strong&gt; operation (&lt;strong&gt;i % 2&lt;/strong&gt;) to alternate between the two options, remembering to increment/decrement the respective variables each time they're used.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The are only minor differences between each of the four languages.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;constructArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;constructArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
                &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
                &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;constructArray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;constructArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>JavaScript Basics-  Scopes &amp; Hoisting</title>
      <author>Debarshi Bhattacharjee</author>
      <pubDate>Mon, 12 Apr 2021 09:04:57 +0000</pubDate>
      <link>https://dev.to/debarshi95/javascript-basics-scopes-hoisting-2lmj</link>
      <guid>https://dev.to/debarshi95/javascript-basics-scopes-hoisting-2lmj</guid>
      <description>&lt;p&gt;If you're a JS beginner, you must be have heard with these words.&lt;/p&gt;

&lt;p&gt;Let's get in depth to understand more about these concepts in JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-scope-in-js"&gt;
  &lt;/a&gt;
  What is a Scope in JS?
&lt;/h2&gt;

&lt;p&gt;A scope in JS is a context in which values and expressions are &lt;strong&gt;&lt;em&gt;visible&lt;/em&gt;&lt;/strong&gt; or can be referenced.&lt;br&gt;
In simple words, Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#types-of-scopes-in-js"&gt;
  &lt;/a&gt;
  Types of scopes in JS:
&lt;/h3&gt;

&lt;p&gt;JavaScript has 3 types of scopes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global Scope : Any variable, function, expression that is present globally or not declared inside any other function belongs to the global scope. Variables, functions that declared in global scope can accessed from anywhere in the program.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var foo=23; // declared in the global scope

function greet(){
console.log(foo);
} 

greet();// Prints '23'
console.log(foo)l //Prints '23'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Local or Function Scope : Variables and functions  that are enclosed in some other function become part of that function's local or function Scope. In other words, a local scope or function scope is associated with a function, when we declare variables and functions inside &lt;strong&gt;&lt;em&gt;another function&lt;/em&gt;&lt;/strong&gt;, they become part of the local/function scope and are &lt;strong&gt;&lt;em&gt;restricted&lt;/em&gt;&lt;/strong&gt; to that scope. Variables and function declared in function/local scope are &lt;strong&gt;&lt;em&gt;accessible within that scope&lt;/em&gt;&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Declared in Global Scope
var foo=23;

function bar(){ 
// Function or Local Scope
   var message="Hello JavaScript"; // inside the local/function 
                                   scope of bar 
   console.log(message); // Prints 'Hello JavaScript' 
   console.log(foo); // Prints '23'
}

//Global Scope
console.log(message); // Uncaught ReferenceError: message is not 
                         defined

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Block Scope : Variables declared with let and const can block scoped. That is, they can be enclosed within a pair of curly braces(&lt;strong&gt;&lt;em&gt;blocks&lt;/em&gt;&lt;/strong&gt;). Any variable/function declared with let or const, inside a pair of curly braces are only available within the scope of the braces. It stands true for only for variables that declared with &lt;strong&gt;&lt;em&gt;let and const&lt;/em&gt;&lt;/strong&gt; and not with &lt;strong&gt;&lt;em&gt;var&lt;/em&gt;&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ //Block scope
  let message = 'Hello JavaScript'; // declared with let
  var name = 'Debarshi'; // declared with var
  console.log(message); // Prints 'Hello JavaScript'
}

//Global scope
console.log(name);// prints 'Debarshi'
console.log(message); // Uncaught ReferenceError: message is not 
                         defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#hoisting-in-js"&gt;
  &lt;/a&gt;
  Hoisting in JS:
&lt;/h2&gt;

&lt;p&gt;In JavaScript, &lt;strong&gt;&lt;em&gt;hoisting&lt;/em&gt;&lt;/strong&gt; is a concept in which a function or a variable can be used before declaration.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hoisting-with-variables-and-functions-declared-with-var-keyword"&gt;
  &lt;/a&gt;
  Hoisting with variables and functions declared with var keyword.
&lt;/h3&gt;

&lt;p&gt;Variables declared with var keyword gets hoisted to the top of the scope. If accessed before &lt;strong&gt;initialization&lt;/strong&gt; they result &lt;strong&gt;&lt;em&gt;undefined&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(baz); // Prints 'undefined'

console.log(greet); // Prints 'undefined

greet(); // Prints 'TypeError: greet is not a function'

var baz="Hello World!";

//anonymous function stored in a variable
var greet=function(){
    console.log("Hello JavaScript!");
}

greet(); // Prints 'Hello from JavaScript!'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hoisting-with-variables-and-functions-declaredassigned-with-let-and-const-keyword"&gt;
  &lt;/a&gt;
  Hoisting with variables and functions declared/assigned with &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt; keyword
&lt;/h2&gt;

&lt;p&gt;Although variables and functions declared/assigned to &lt;strong&gt;&lt;em&gt;let&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;const&lt;/em&gt;&lt;/strong&gt; are also hoisted, but they cannot be accessed until they have been &lt;strong&gt;&lt;em&gt;initialized&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(a); // Prints 'ReferenceError: Cannot access 'a' 
                    before initialization'
console.log(name); // Prints 'ReferenceError: Cannot access 'm' 
                       before initialization'

doSomething(); // Prints 'ReferenceError: Cannot access 'm' before 
                   initialization' 

let a = 45; // Initialized
const name="Debarshi"; // Initialized

const doSomething = function (){
   console.log("Hello World!")
}

console.log(a) // Prints '45'

console.log(name) // Prints 'Debarshi'

doSomething(); // Prints 'Hello World!'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hoisting-with-functions"&gt;
  &lt;/a&gt;
  Hoisting with functions:
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functions declared with &lt;strong&gt;&lt;em&gt;function&lt;/em&gt;&lt;/strong&gt; keyword:&lt;br&gt;
Functions that are declared with the &lt;strong&gt;&lt;em&gt;function&lt;/em&gt;&lt;/strong&gt; keyword &lt;br&gt;
are also hoisted and can accessed from the top of the scope.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   foo(); // Prints 'Hello from foo!'

   function foo(){
      console.log("Hello from foo!");
    } 
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous functions, functions expression:&lt;/p&gt;

&lt;p&gt;As anonymous functions and function expressions are &lt;br&gt;
 assigned/stored to a &lt;strong&gt;&lt;em&gt;variable&lt;/em&gt;&lt;/strong&gt;, they behave same as &lt;br&gt;
 that of the variable &lt;strong&gt;&lt;em&gt;depending on the variable type they &lt;br&gt;
 are assigned to&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   baz(); // Uncaught ReferenceError: Cannot access 'm' before 
            initialization
   foo();  // TypeError: m is not a function

   var baz=function(){ // assigned to var
   console.log("Hello from Baz");
   }

  let foo=()=&amp;gt;{  assigned to let
   console.log("Hello from Foo");
  }

  baz(); // Prints 'Hello from Baz'
  foo(); // Prints 'Hello from Foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#temporal-dead-zone-in-js"&gt;
  &lt;/a&gt;
  Temporal Dead Zone in JS:
&lt;/h3&gt;

&lt;p&gt;let and const variables cannot be read/written until they &lt;br&gt;
 have been fully initialized, which happens when they are &lt;br&gt;
 declared (if no initial value is specified on declaration, &lt;br&gt;
 the variable is initialized with a value of undefined). &lt;br&gt;
  Accessing the variable before the initialization results in &lt;br&gt;
  a ReferenceError.&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  { // TDZ starts at beginning of scope&lt;br&gt;
  console.log(bar); // undefined&lt;br&gt;
  console.log(foo); // ReferenceError&lt;br&gt;
  var bar = 1;&lt;br&gt;
  let foo = 2; // End of TDZ (for foo)&lt;br&gt;
 }&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
&lt;br&gt;
  &lt;a href="#references"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  References:&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href=""&gt;MDN&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to create a Skip Navigation link</title>
      <author>Savvas Stephanides</author>
      <pubDate>Mon, 12 Apr 2021 09:02:45 +0000</pubDate>
      <link>https://dev.to/savvasstephnds/how-to-create-a-skip-navigation-link-5e56</link>
      <guid>https://dev.to/savvasstephnds/how-to-create-a-skip-navigation-link-5e56</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;When navigating a website with a keyboard, it's often that you'll have to tab through the website's navigation header before getting to the main content. It gets especially frustrating when you get through loads of pages to get where you want. In this tutorial, I will walk you through creating a "Skip Navigation" link so that your keyboard users can easily avoid tabbing through the navigation and get straight to the main content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-building"&gt;
  &lt;/a&gt;
  What are we building?
&lt;/h2&gt;

&lt;p&gt;What we are creating here is basically a link that is invisible while browsing the website but becomes visible once it gains focus when the user navigates the site with the Tab key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBr0t93N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://savvas.me/assets/skipnav1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBr0t93N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://savvas.me/assets/skipnav1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;Before we move on to the tutorial let's answer the common question: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why do I need to make my site fully accessible with a keyboard?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some users rely on the keyboard for navigating the web. Users with motor disabilities often find it difficult to navigate with a mouse or any other device. We therefore need to make sure that our website is 100% accessible with a keyboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webaim.org/techniques/keyboard/"&gt;This article from WebAIM does a better job at explaining the importance of keyboard accessibility.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-website"&gt;
  &lt;/a&gt;
  Setting up our website
&lt;/h2&gt;

&lt;p&gt;First things first, let's create the basic layout of our website. The end result will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ADRqYtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://savvas.me/assets/skipnav2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ADRqYtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://savvas.me/assets/skipnav2.png" alt="A basic homepage with a navigation containing 4 elements and a main section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It'll be a basic home page with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; which contains &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; which contains the navigation elements in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; section which contains the main section of our website, with some dummy "lorem ipsum" text&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"site-name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;MySite&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; sit amet consectetur adipisicing elit. Explicabo aperiam distinctio nostrum, cum incidunt pariatur consequuntur ullam. Odit laboriosam magni amet eligendi perferendis corporis quae. Obcaecati eaque iusto, magnam mollitia porro tenetur temporibus ex magni, vero inventore nulla hic ipsum nostrum repellendus, ut reiciendis repellat. Aliquam consequuntur in perferendis beatae.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;At placeat natus nemo quam, fuga ipsam accusantium in vitae nam quae velit numquam alias perspiciatis veniam quod eligendi aliquam fugiat ipsum doloremque laudantium. Id eum nobis cupiditate laudantium est in soluta quasi accusantium, rem quos unde iusto voluptates quibusdam dolore quaerat, provident laboriosam ipsum natus nam perspiciatis possimus. Laborum!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Minima pariatur accusamus sequi hic fuga consequatur eaque, veritatis molestias vel atque fugiat, natus, nesciunt suscipit laborum non sunt quaerat cum ea assumenda deserunt voluptates vitae iusto sed ducimus. Eligendi quos nam exercitationem et adipisci vero iure, quidem ad. Amet quia exercitationem illum soluta doloremque dolorum aperiam totam vel ipsum!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Animi beatae dolores laborum placeat sed corporis minus, reprehenderit commodi officia eligendi, magni expedita, alias sunt saepe quas! Mollitia cum rerum aperiam reprehenderit. Aliquam tempora nemo mollitia sed tenetur eaque labore sit fugit illo consequuntur? At quibusdam, adipisci beatae a reprehenderit iure vitae maxime perspiciatis. Necessitatibus aperiam ratione ad perspiciatis.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Repudiandae fugiat veniam sint quibusdam itaque earum, expedita provident quasi dolor repellendus! Maiores, expedita? Ut neque quo, doloremque quaerat repellat corporis laudantium voluptatibus omnis a qui blanditiis dolorem odio, quia voluptatem ullam nam harum necessitatibus cupiditate, pariatur distinctio aliquam labore! Beatae in reprehenderit sint! Quae molestiae reiciendis voluptates dolor pariatur!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Voluptate, enim minus omnis beatae quisquam, perspiciatis ea atque eos quaerat ab, vitae tenetur explicabo nisi tempora exercitationem amet ullam debitis earum dolore. Unde ea quia aliquid similique delectus culpa, molestias neque dignissimos corporis odit ab necessitatibus impedit deserunt dolore? Rem, blanditiis vel? Doloribus, minima alias facere iure nemo consequuntur!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Fugit laudantium reiciendis vero molestiae facere! Voluptate maiores similique vitae ipsa nam ipsum saepe, sit rem sapiente debitis nihil temporibus asperiores laborum velit odio inventore, recusandae ratione! Officiis laborum fuga nostrum, quo cum repellendus soluta expedita iusto qui corporis aliquam perspiciatis minus accusantium in ut. Voluptates quia omnis fuga ipsum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Porro sint numquam placeat molestias soluta hic velit ratione, commodi nam earum et a delectus molestiae praesentium officia eaque adipisci error aut asperiores. Voluptates, quos eveniet magni optio amet culpa dolorum ad quidem ipsam incidunt illum explicabo non atque rerum blanditiis labore harum dolore repudiandae quod repellat. Quisquam, nobis odit?&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Eaque, quos eveniet voluptas commodi assumenda nostrum id in veniam nulla, tenetur itaque provident. Ex numquam nesciunt quaerat est quos ab doloremque debitis harum facere quae? Dicta non, doloremque, aperiam a nisi totam modi quis assumenda deserunt animi quaerat! Ratione veritatis enim cupiditate ut et facere veniam quasi? Tenetur, autem.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Sit, hic consequuntur? Dicta adipisci nobis voluptatibus excepturi nemo veritatis iusto in, vel magni laborum, perspiciatis impedit? Dolorum ducimus soluta consectetur neque voluptate totam architecto temporibus autem veritatis perferendis, sit ratione officia illum, quidem vel iste obcaecati eaque consequatur! Autem quo repellendus nihil quisquam. Doloremque repellendus natus magni illum tempora.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
        2021 Savvas Stephanides
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Gill Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Gill Sans MT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Calibri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Trebuchet MS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2b2e4a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#903749&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt; &lt;span class="m"&gt;#e84545&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;21px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;#site-name&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;21px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-skip-navigation-link"&gt;
  &lt;/a&gt;
  Create the Skip Navigation link
&lt;/h2&gt;

&lt;p&gt;Now we need to create our link. For this we need to do 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make our &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag an anchor so we can navigate to it easily&lt;/li&gt;
&lt;li&gt;Create a link which takes the user to the main section&lt;/li&gt;
&lt;li&gt;Hide it with CSS&lt;/li&gt;
&lt;li&gt;Use CSS to make the link visible on focus&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-make-our-raw-ltmaingt-endraw-tag-an-anchor"&gt;
  &lt;/a&gt;
  1. Make our &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag an anchor
&lt;/h3&gt;

&lt;p&gt;To do this all we need to do is give an ID to our &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag. Let's call it &lt;code&gt;main-part&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- &amp;lt;main&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+ &amp;lt;main id="main-part"&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-the-link"&gt;
  &lt;/a&gt;
  2. Create the link
&lt;/h3&gt;

&lt;p&gt;Now we need to create our "Skip navigation" link right under our &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag and right before the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;&amp;lt;body&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+    &amp;lt;a href="#main-part" id="skip-navigation"&amp;gt;Skip navigation&amp;lt;/a&amp;gt;
&lt;/span&gt;    &amp;lt;header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-make-it-invisible"&gt;
  &lt;/a&gt;
  3. Make it invisible
&lt;/h3&gt;

&lt;p&gt;Now we need to hide it from the user. We do that with CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#skip-navigation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#903749&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e84545&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;position: fixed&lt;/code&gt; and &lt;code&gt;top: -100%&lt;/code&gt; lines. These are the lines that make the link invisible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-make-it-visible-on-raw-focus-endraw-"&gt;
  &lt;/a&gt;
  4. Make it visible on &lt;code&gt;:focus&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Lastly, we set the &lt;code&gt;top&lt;/code&gt; parameter of the link when it has the focus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#skip-navigation&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! As soon as you open the page and press the Tab button, the Skip Navigation button should show up. Pressing the Enter key should take you straight to the main content!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0u5rOEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://savvas.me/assets/skipnav3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0u5rOEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://savvas.me/assets/skipnav3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://relaxed-shirley-6e6d82.netlify.app/"&gt;See live demo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Has this tutorial been helpful? Let me know here or on &lt;a href="https://twitter.com/SavvasStephnds"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Which CSS pre-processor? Or just postcss?</title>
      <author>Pacharapol Withayasakpunt</author>
      <pubDate>Mon, 12 Apr 2021 08:59:19 +0000</pubDate>
      <link>https://dev.to/patarapolw/which-css-pre-processor-or-just-postcss-27le</link>
      <guid>https://dev.to/patarapolw/which-css-pre-processor-or-just-postcss-27le</guid>
      <description>&lt;p&gt;Coming from &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; (pronounced &lt;code&gt;/vit/&lt;/code&gt;), where it does allow SCSS/SASS, but &lt;a href="https://vitejs.dev/guide/features.html#css-pre-processors"&gt;it believed in future web standards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I find this unintuitive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;&lt;/span&gt; &lt;span class="err"&gt;b&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, does anyone actually use or prefer postcss? Or rather, what it your favorite compile-to-CSS (maybe, LESS, Stylus), and why?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>discuss</category>
      <category>webperf</category>
    </item>
    <item>
      <title>DevOps Engineer Jobs</title>
      <author>Afkar Khan</author>
      <pubDate>Mon, 12 Apr 2021 08:58:16 +0000</pubDate>
      <link>https://dev.to/iamafkarkhan/devops-engineer-jobs-2lmk</link>
      <guid>https://dev.to/iamafkarkhan/devops-engineer-jobs-2lmk</guid>
      <description>&lt;p&gt;DevOps is a chain of practices and strategies that can be supposed to speed up and automate developing, trying out, and releasing software programs, bearing in thoughts the non-prevent transport of software program packages and software program application updates. Whereas previously software program applications could be evolved by the use of developers, after which handed onto testers to check and skip back and forth between them, &lt;a href="https://www.igmguru.com/cloud-computing/devops-certification-training/"&gt;DevOps training online&lt;/a&gt; practices aim to simplify this using integrating these previously separate agencies. DevOps engineers are responsible for facilitating this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K24Owil0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16za4eo3se6fnpjiylby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K24Owil0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16za4eo3se6fnpjiylby.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The role of a DevOps engineer combines factors of a technical position and an IT operations role. While engineers are feasible to be worried about coding, and expertise in coding languages and requirements is needed to find out troubles and construct solutions, this is not the primary characteristic of a DevOps engineer. More senior engineers are likely to be greater worried about mission management and make improvement plans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzQj239U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvshdpci6gdxvrsnebo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzQj239U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvshdpci6gdxvrsnebo8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typical-responsibilities-for-devops-engineers-encompass"&gt;
  &lt;/a&gt;
  Typical responsibilities for DevOps engineers encompass:
&lt;/h2&gt;

&lt;p&gt;• building and putting in area new development tools and infrastructure&lt;br&gt;
• know-how the goals of stakeholders and conveying this to developers&lt;br&gt;
• walking on methods to automate and enhance improvement and release procedures&lt;br&gt;
• testing and examining code written with the aid of the manner of others and analysing effects&lt;br&gt;
• ensuring that structures are secure and relaxed against cybersecurity threats&lt;br&gt;
• figuring out technical troubles and developing software updates and 'fixes.'&lt;br&gt;
• going for walks with software program builders and software program engineers to make sure that development follows to set up techniques and works as intended&lt;br&gt;
• Planning out initiatives and being concerned approximately mission control selections.&lt;br&gt;
• Graduates may also begin in a 'graduate DevOps engineer' or 'associate DevOps engineer' function, earlier than progressing to 'senior DevOps engineer' and 'principal DevOps engineer' roles with enjoy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#employers-of-devops-engineers"&gt;
  &lt;/a&gt;
  Employers of DevOps engineers:
&lt;/h2&gt;

&lt;p&gt;• constructing and putting in place new improvement gear and infrastructure&lt;br&gt;
• expertise the desires of stakeholders and conveying this to developers&lt;br&gt;
• operating on methods to automate and decorate improvement and launch techniques&lt;br&gt;
• testing and reading cwasewasten with the resource of others and reading effects&lt;br&gt;
• making sure that structures are relaxed and secure in opposition to cybersecurity threats&lt;br&gt;
• identifying technical problems and developing software program software updates and 'fixes.'&lt;br&gt;
• running with software program developers and software program engineers to ensure that development follows established strategies and works as meant &lt;br&gt;
• Planning out projects and being concerned about venture manipulate selections.&lt;br&gt;
• Graduates may also start in a 'graduate DevOps engineer' or 'companion DevOps engineer' position earlier than progressing to 'senior DevOps engineer' and 'most crucial DevOps engineer' roles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#employers-of-devops-engineers-encompass"&gt;
  &lt;/a&gt;
  Employers of DevOps engineers encompass:
&lt;/h2&gt;

&lt;p&gt;• expert software program software improvement agencies&lt;br&gt;
• web sites and any company that manages net sites&lt;br&gt;
• generation consultancies&lt;br&gt;
• telecommunications businesses and broadcasters&lt;br&gt;
• shops&lt;br&gt;
• public location corporations.&lt;br&gt;
• DevOps engineer jobs are advertised online, using careers services, and with the aid of recruitment companies.&lt;br&gt;
• View our graduate IT and generation vacancies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qualifications-and-schooling-required"&gt;
  &lt;/a&gt;
  Qualifications and schooling required.
&lt;/h2&gt;

&lt;p&gt;DevOps engineer roles typically ask for a degree in a technical or a STEM (technological know-how, era, engineering, and mathematics) problem. Some require candidates to have a grasp's degree. Strong diploma effects (at the least a 2.1) also are commonly favoured through recruiters.&lt;br&gt;
As you broaden, employers may additionally require you to reap an expert qualification. The BCS (British Computer Society) offers certifications in &lt;a href="https://www.igmguru.com/cloud-computing/devops-certification-training/"&gt;DevOps online training&lt;/a&gt; and Agile (a fixed of practices associated with DevOps). Similarly, you could pick to gain certification in a specific technology that the enterprise uses, along with AWS or Azure cloud offerings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SmtyldMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi2kl6kni2e2z3zn1l15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SmtyldMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi2kl6kni2e2z3zn1l15.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-skills"&gt;
  &lt;/a&gt;
  Technical skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1familiarity-with-infrastructure-automation-gear"&gt;
  &lt;/a&gt;
  1.Familiarity with infrastructure automation gear
&lt;/h3&gt;

&lt;p&gt;After the conceptual vision and getting strategies proper, the following colossal decision is tooling. A DevOps method uses infrastructure automation equipment and Puppet, Anisole, Salt Shack, and Chef to hurry up a few previously guide methods. Experience in using one or extra of those equipment offers DevOps engineers a head-start when seeking out a new activity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2understanding-of-code"&gt;
  &lt;/a&gt;
  2.Understanding of code
&lt;/h3&gt;

&lt;p&gt;You don't must be a software developer; however, writing scripts and apprehend code in more than one language like Ruby and Python is an actual boon for any DevOps engineer. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3knowledge-of-continuous-integration"&gt;
  &lt;/a&gt;
  3.Knowledge of Continuous Integration
&lt;/h3&gt;

&lt;p&gt;As one of the vital DevOps methodologies, Continuous Integration (CI) can track build modifications and defects and provide clarity to guide teams. As a result, it presents DevOps engineers with an actual-time window into the software program being advanced. There is numerous equipment like Jenkins and Cruise Control that any DevOps engineer should be acquainted with; however, know-how CI and Continuous Delivery (CD) tactics is also crucial. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4containers"&gt;
  &lt;/a&gt;
  4.Containers
&lt;/h3&gt;

&lt;p&gt;Containerization is a godsend for improvement teams with multiple abilities. It permits developers to code apps in their favourite languages and for DevOps engineers to tie the infrastructure for them collectively, be that in Kubernetes or Docker. Every cloud issuer is working on permitting management of various field platforms, and that is very probable to stay a massive part of PaaS (Platform as a Service).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4YBbjQ4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1uy0ssu2fa9zduir17i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YBbjQ4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1uy0ssu2fa9zduir17i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soft-abilities"&gt;
  &lt;/a&gt;
  Soft abilities
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1communication-amp-collaboration"&gt;
  &lt;/a&gt;
  1.Communication &amp;amp; collaboration
&lt;/h3&gt;

&lt;p&gt;To damage down the silos of improvement and operations, proper communication and a collaborative method are essential. &lt;br&gt;
Being able to talk successfully with one of a kind stakeholders and recognize the contemporary challenges and the 'big photograph' in the organization is the first step to building a strategy to put in force way of life shifts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2flexibility"&gt;
  &lt;/a&gt;
  2.Flexibility
&lt;/h3&gt;

&lt;p&gt;Sitting among unique groups with different priorities, all operating on critical systems, there will inevitably be situations where there might be multiple ventures that are urgent and desires to attend to. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7decision-making"&gt;
  &lt;/a&gt;
  7.Decision making
&lt;/h3&gt;

&lt;p&gt;In a hectic environment, the capability to make the proper selection fast, at the same time as maintaining in mind the massive photo desires, is an exceedingly appropriate trait employee.&lt;br&gt;
Critical skills for DevOps engineers&lt;br&gt;
Useful abilities for DevOps engineers consist of:&lt;br&gt;
• exquisite teamwork and communication competencies&lt;br&gt;
• expertise in programming languages&lt;br&gt;
• sturdy hassle-fixing abilities&lt;br&gt;
• ideal interest to element &lt;br&gt;
Excellent organizational and time control abilities and the functionality of the artwork on multiple tasks simultaneously the attention of DevOps and Agile requirements.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>training</category>
      <category>online</category>
    </item>
    <item>
      <title>Maintaining Multi-language Angular Applications with i18n</title>
      <author>Michael Karén</author>
      <pubDate>Mon, 12 Apr 2021 08:55:04 +0000</pubDate>
      <link>https://dev.to/this-is-angular/maintaining-multi-language-angular-applications-with-i18n-2ccf</link>
      <guid>https://dev.to/this-is-angular/maintaining-multi-language-angular-applications-with-i18n-2ccf</guid>
      <description>&lt;p&gt;&lt;strong&gt;Angular i18n and the localizing of applications had an overhaul with version 9&lt;/strong&gt;, enabled by the new rendering engine Ivy. In this article, we &lt;strong&gt;take a closer look at how this built-in package of Angular now works&lt;/strong&gt;, while pointing out the benefits and drawbacks we find.&lt;/p&gt;

&lt;p&gt;We then set up an application with Angular internationalization and go through the complete process from marking texts for translation, extracting them to translation files, and how we manage these files to get the application deployed and maintained while keeping users all over the world happy with our translations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Illustration by &lt;a href="https://twitter.com/VeroIsabellaK"&gt;Vero Karén&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internationalization-and-localization"&gt;
  &lt;/a&gt;
  Internationalization and localization
&lt;/h2&gt;

&lt;p&gt;It’s easy to get confused with the terms &lt;strong&gt;internationalization (i18n)&lt;/strong&gt; and &lt;strong&gt;localization (i10n),&lt;/strong&gt; and where to draw the line between them. &lt;em&gt;Internationalization&lt;/em&gt; is the process of designing your application so that it can be adapted to different locales around the world while &lt;em&gt;localization&lt;/em&gt; is the process of building the versions of the applications to different locales.&lt;/p&gt;

&lt;p&gt;Together they help us in adapting software to different languages and local variations in the look and feel expected by the target audience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-localization-works-with-ivy"&gt;
  &lt;/a&gt;
  How localization works with Ivy
&lt;/h2&gt;

&lt;p&gt;The new localization process of &lt;a href="https://angular.io/guide/ivy"&gt;Angular Ivy&lt;/a&gt; is based on the concept of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"&gt;tagged templates&lt;/a&gt;. Tags allow you to parse template literals with a function. The tag used here is the global identifier &lt;code&gt;$localize&lt;/code&gt;. Instead of translating the strings, the Ivy template compiler converts all template text marked with &lt;code&gt;i18n&lt;/code&gt; attributes to &lt;code&gt;$localize&lt;/code&gt; tagged strings.&lt;/p&gt;

&lt;p&gt;So when we add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will be compiled to &lt;code&gt;$localize&lt;/code&gt; calls and somewhere in the compiled code we will be able to find:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`Hello World!`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way the &lt;em&gt;tagged template&lt;/em&gt; works is that you put the function that you want to run against the string before the template. Instead of &lt;code&gt;function()&lt;/code&gt;, you have &lt;code&gt;function&lt;/code&gt;&lt;code&gt;&lt;/code&gt; or as in this case &lt;code&gt;$localize&lt;/code&gt;&lt;code&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When this step is done we have two choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;compile-time inlining&lt;/strong&gt;: the &lt;a href="https://angular.io/api/localize/init/%24localize"&gt;&lt;code&gt;$localize&lt;/code&gt;&lt;/a&gt; tag is transformed at compile time by a transpiler, removing the tag and replacing the template literal string with the translation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;run-time evaluation&lt;/strong&gt;: the &lt;a href="https://angular.io/api/localize/init/%24localize"&gt;&lt;code&gt;$localize&lt;/code&gt;&lt;/a&gt; tag is a run-time function that replaces the template literal string with translations loaded at run-time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we use &lt;em&gt;compile-time inlining&lt;/em&gt; to achieve our goals. At the very end of the build process, we run a step for the translation files by providing an option flag to get a localized application for the languages. Since we are doing the translations compile-time we get one application per locale.&lt;/p&gt;

&lt;p&gt;At the end of the article, we take a further look into &lt;em&gt;run-time evaluation&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because the application does not need to be built again for each locale, the build process is much faster than before v9 of Angular.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uoqzkwqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2696/0%2AGMtohFA2nbkDKzpB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uoqzkwqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2696/0%2AGMtohFA2nbkDKzpB.png" alt="You can read more about this in [Angular localization with Ivy](https://cdn.hashnode.com/res/hashnode/image/upload/v1618075767519/BbSs51O0K.html) from where this picture is."&gt;&lt;/a&gt;&lt;em&gt;You can read more about this in &lt;a href="https://blog.angular.io/angular-localization-with-ivy-4d8becefb6aa"&gt;Angular localization with Ivy&lt;/a&gt; from where this picture is.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we understand the process of building the application we start to get an understanding of what it entails.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-good-and-the-bad"&gt;
  &lt;/a&gt;
  The good and the bad
&lt;/h2&gt;

&lt;p&gt;The standard Angular internationalization and localization are designed to produce one compiled application per language. By doing this we get optimal performance since there is no overhead of loading translation files and compiling them at run-time. But, this also means that each language has to be deployed to a separate URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;www.mydomain.com/en
www.mydomain.com/nb
www.mydomain.com/fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means we need to do a bit more set up on our webserver. A limitation with &lt;code&gt;ng serve&lt;/code&gt; is that it only works with one language at a time and to run different languages also needs some configuration. To run all languages locally we need to use a local webserver. We look into how we do all this in this article.&lt;/p&gt;

&lt;p&gt;Angular i18n uses &lt;strong&gt;XLIFF&lt;/strong&gt; and &lt;strong&gt;XMB&lt;/strong&gt; formats that are XML-based, more verbose formats than JSON. But since these files are used at compile-time it doesn’t matter. It makes sense to use JSON when we load the translation files at run-time to keep the file sizes smaller. The formats chosen for the built-in i18n are used by translation software which helps us with our translations as we will see.&lt;/p&gt;

&lt;p&gt;The number one drawback that people find with this solution is that you need to reload the application when you switch languages. But, is this really going to be a problem for you? People usually switch languages once if ever. And that couple of seconds it takes to reload applications will not be a problem.&lt;/p&gt;

&lt;p&gt;Having one bundle per language is not a problem for a web SPA other than that you have to configure your web server for this. But for standalone apps, this means you got to make the user download every translated bundle, or distribute a different app for every version.&lt;/p&gt;

&lt;p&gt;It’s important to understand your requirements before deciding which route to take.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transloco"&gt;
  &lt;/a&gt;
  Transloco
&lt;/h2&gt;

&lt;p&gt;If the standard Angular i18n doesn’t give you what you want then the best alternative today in my opinion is &lt;a href="https://ngneat.github.io/transloco/"&gt;Transloco&lt;/a&gt;. It’s being actively maintained and has an active community. It will get you up and running faster and is more flexible than the built-in solution. Since Transloco is runtime translation you have just &lt;code&gt;www.mydoman.com&lt;/code&gt; and can change localization on the fly.&lt;/p&gt;

&lt;p&gt;So, before choosing which way to go in such a fundamental choice you should check Transloco out to see if it would be a better fit for you.&lt;/p&gt;

&lt;p&gt;OK, enough technicalities let’s see some code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-localize-to-angular-project"&gt;
  &lt;/a&gt;
  Add localize to Angular project
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@angular/localize&lt;/code&gt; package was &lt;a href="https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3#b939"&gt;released with Angular 9&lt;/a&gt; and supports i18n in Ivy applications. This package requires a global &lt;a href="https://angular.io/api/localize/init/%24localize"&gt;&lt;code&gt;$localize&lt;/code&gt;&lt;/a&gt; symbol to exist. The symbol is loaded by importing the &lt;a href="https://angular.io/api/localize/init"&gt;&lt;code&gt;@angular/localize/init&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;To add the localization features provided by Angular, we need to add the &lt;code&gt;@angular/localize&lt;/code&gt; package to our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng add @angular/localize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Updates &lt;code&gt;package.json&lt;/code&gt; and installs the package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updates &lt;code&gt;polyfills.ts&lt;/code&gt;to import the &lt;code&gt;@angular/localize&lt;/code&gt; package.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you try using i18n without adding this package you get a self-explanatory error message reminding us to run &lt;code&gt;ng add @angular/localize&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translating-templates"&gt;
  &lt;/a&gt;
  Translating templates
&lt;/h2&gt;

&lt;p&gt;To translate templates in our application, we need first to prepare the texts by marking them with the &lt;code&gt;i18n&lt;/code&gt; attribute.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Internationalization"&gt;i18n&lt;/a&gt; is a custom attribute from the &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions"&gt;WebExtensions&lt;/a&gt; API. It’s recognized by Angular tools and compilers. During the compilation, it is removed, and the tag content is replaced with the translations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We mark the text like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag is now marked and ready for the next step in the translation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#translating-typescript-files"&gt;
  &lt;/a&gt;
  Translating TypeScript files
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;NB! You need Angular 10.1 or later to extract strings from source code (.ts) files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s not only our templates that need to be translated. Sometimes we have code in our TypeScript files that also need a translation. To localize a string in the source code, we use the &lt;code&gt;$localize&lt;/code&gt; template literal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`My page`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;a href="https://michael-karen.medium.com/getting-started-with-modern-javascript-template-literals-d72f25511ab5"&gt;template literals&lt;/a&gt; use the backtick character instead of double or single quotes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extracting-texts"&gt;
  &lt;/a&gt;
  Extracting texts
&lt;/h2&gt;

&lt;p&gt;When our application is prepared to be translated, we can use the &lt;a href="https://angular.io/cli/extract-i18n"&gt;extract-i18n&lt;/a&gt; command to extract the marked texts into a &lt;strong&gt;source language file&lt;/strong&gt; named &lt;code&gt;messages.xlf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The command options we can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--output-path&lt;/code&gt;: Change the location of the source language file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--outFile&lt;/code&gt;: Change the file name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--format&lt;/code&gt;: Change file format. Possible formats are &lt;a href="https://en.wikipedia.org/wiki/XLIFF"&gt;XLIFF 1.2&lt;/a&gt; (default), XLIFF 2, and &lt;a href="http://cldr.unicode.org/development/development-process/design-proposals/xmb"&gt;XML Message Bundle (XMB)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running this command from the root directory of the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng extract-i18n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get the &lt;code&gt;messages.xlf&lt;/code&gt; file looking like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xliff&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.2"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"urn:oasis:names:tc:xliff:document:1.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;file&lt;/span&gt; &lt;span class="na"&gt;source-language=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"plaintext"&lt;/span&gt; &lt;span class="na"&gt;original=&lt;/span&gt;&lt;span class="s"&gt;"ng2.template"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"3492007542396725315"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"5513198529962479337"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;My page&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.ts&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xliff&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that we have the texts “Welcome” and “My page” in the file but what does it all mean?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;trans-unit&lt;/code&gt; is the tag containing a single translation. &lt;code&gt;id&lt;/code&gt; is a translation identifier that &lt;code&gt;extract-i18n&lt;/code&gt; generates so don’t modify it!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;source&lt;/code&gt; contains translation source text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context-group&lt;/code&gt; specifies where the given translation can be found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context-type="sourcefile"&lt;/code&gt; shows the file where translation is from.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;context-type="linenumber"&lt;/code&gt; tells the line of code of the translation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have extracted the source file, how do we get files with the languages we want to translate?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-translation-files"&gt;
  &lt;/a&gt;
  Create translation files
&lt;/h2&gt;

&lt;p&gt;After we have generated the &lt;code&gt;messages.xlf&lt;/code&gt; file, we can add new languages by copying it and naming the new file accordingly with the associated locale.&lt;/p&gt;

&lt;p&gt;To store Norwegian translations we rename the copied file to &lt;code&gt;messages.nb.xlf&lt;/code&gt;. Then we send this file to the translator so that he can do the translations with an XLIFF editor. But, let’s not get ahead of us and first do a manual translation to get a better understanding of the translation files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translating-files-manually"&gt;
  &lt;/a&gt;
  Translating files manually
&lt;/h3&gt;

&lt;p&gt;Open the file and find the &lt;code&gt;&amp;lt;trans-unit&amp;gt;&lt;/code&gt; element, representing the translation of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; greeting tag that was previously marked with the &lt;code&gt;i18n&lt;/code&gt; attribute. Duplicate the &lt;code&gt;&amp;lt;source&amp;gt;...&amp;lt;/source&amp;gt;&lt;/code&gt; element in the text node, rename it to &lt;code&gt;target&lt;/code&gt;, and then replace its content with the Norwegian text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xliff&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.2"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"urn:oasis:names:tc:xliff:document:1.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;file&lt;/span&gt; &lt;span class="na"&gt;source-language=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"plaintext"&lt;/span&gt; &lt;span class="na"&gt;original=&lt;/span&gt;&lt;span class="s"&gt;"ng2.template"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"3492007542396725315"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;target&amp;gt;&lt;/span&gt;Velkommen&lt;span class="nt"&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"5513198529962479337"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;my page&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.ts&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;9&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xliff&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all that there is to it to add the translations to the files. Let’s see how we do it with an editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translating-files-with-an-editor"&gt;
  &lt;/a&gt;
  Translating files with an editor
&lt;/h3&gt;

&lt;p&gt;Before we can use an editor, we need to provide the translation language. We can do this by adding the &lt;code&gt;target-language&lt;/code&gt; attribute for the file tag so that translation software can detect the locale:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;file&lt;/span&gt; &lt;span class="na"&gt;source-language=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"plaintext"&lt;/span&gt; &lt;span class="na"&gt;original=&lt;/span&gt;&lt;span class="s"&gt;"ng2.template"&lt;/span&gt; &lt;span class="na"&gt;target-language=&lt;/span&gt;&lt;span class="s"&gt;"nb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s open this file in a translation tool to see what we are working with. I’m using the free version of &lt;a href="https://poedit.net/"&gt;PoEdit&lt;/a&gt; in this article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_NyHh9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075769143/GoAaKAWlq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_NyHh9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075769143/GoAaKAWlq.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks much easier to work with than the manual way. We even get some suggestions for translations. Let’s translate “my page” and save the file. If we then open &lt;code&gt;messages.nb.xlf&lt;/code&gt; we can see that it has added the translation in a target block like when we did it manually:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;My page&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;target&lt;/span&gt; &lt;span class="na"&gt;state=&lt;/span&gt;&lt;span class="s"&gt;"translated"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Min side&lt;span class="nt"&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that it added &lt;code&gt;state="translated"&lt;/code&gt; to the target tag. This is an optional attribute that can have the values &lt;code&gt;translated&lt;/code&gt;, &lt;code&gt;needs-translation&lt;/code&gt;, or &lt;code&gt;final&lt;/code&gt;. This helps us when using the editor to find the texts that are not yet translated.&lt;/p&gt;

&lt;p&gt;This is a great start but before we try out the translations in our application, let’s see what more we can do by adding more information into the box in the screenshot named “Notes for translators”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes-for-translators"&gt;
  &lt;/a&gt;
  Notes for translators
&lt;/h2&gt;

&lt;p&gt;Sometimes the translator needs more information about what they are translating. We can add a &lt;strong&gt;description&lt;/strong&gt; of the translation as the value of the i18n attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;i18n=&lt;/span&gt;&lt;span class="s"&gt;"Welcome message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can add even more context to the translator by adding the &lt;strong&gt;meaning&lt;/strong&gt; of the text message. We can add the &lt;em&gt;meaning&lt;/em&gt; together with the &lt;em&gt;description&lt;/em&gt; and separate them with the &lt;code&gt;|&lt;/code&gt; character: &lt;code&gt;&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;&lt;/code&gt;. In this example we might want to let the translator know that this welcome message is located in the toolbar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;i18n=&lt;/span&gt;&lt;span class="s"&gt;"toolbar header|Welcome message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last part that we can add to the value of the &lt;code&gt;i18n&lt;/code&gt; attribute is an ID by using &lt;code&gt;@@&lt;/code&gt;. Be sure to define unique custom ids. If you use the same id for two different text messages, only the first one is extracted, and its translation is used in place of both original text messages.&lt;/p&gt;

&lt;p&gt;Here we add the ID &lt;code&gt;toolbarHeader&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;i18n=&lt;/span&gt;&lt;span class="s"&gt;"toolbar header|Welcome message@@toolbarHeader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we don’t add an ID for the translation, Angular will generate a random ID as we saw earlier. Running &lt;code&gt;ng extract-i18n&lt;/code&gt; again we can see that the helpful information has been added to our translation unit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"toolbarHeader"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;note&lt;/span&gt; &lt;span class="na"&gt;priority=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome message&lt;span class="nt"&gt;&amp;lt;/note&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;note&lt;/span&gt; &lt;span class="na"&gt;priority=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;from=&lt;/span&gt;&lt;span class="s"&gt;"meaning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;toolbar header&lt;span class="nt"&gt;&amp;lt;/note&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;There are now a couple of &lt;code&gt;note&lt;/code&gt; tags that provide the translation &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;meaning&lt;/code&gt; and the &lt;code&gt;id&lt;/code&gt; is no longer a random number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we copy these to the &lt;code&gt;messages.ng.xlf&lt;/code&gt; file and open it in PoEdit we see that all these are now visible in “Notes for translators”:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PdUATuP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075770919/WrcgDKyAx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PdUATuP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075770919/WrcgDKyAx.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-context-in-typescript-files"&gt;
  &lt;/a&gt;
  Providing context in TypeScript files
&lt;/h2&gt;

&lt;p&gt;Like with Angular templates you can provide more context to translators by providing &lt;code&gt;meaning&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;id&lt;/code&gt; in TypeScript files. The format is the same as used for &lt;code&gt;i18n&lt;/code&gt; markers in the templates. Here are the different options as found in the &lt;a href="https://angular.io/api/localize/init/%24localize#description"&gt;Angular Docs&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:meaning|description@@id:source message text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:meaning|:source message text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:description:source message text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:@@id:source message text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding an &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; to our title could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`:Header on first page@@firstPageTitle:My page`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the template literal string contains expressions, you can provide the placeholder name wrapped in &lt;code&gt;:&lt;/code&gt; characters directly after the expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$localize&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:name:`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specialized-use-cases"&gt;
  &lt;/a&gt;
  Specialized use cases
&lt;/h2&gt;

&lt;p&gt;There are some specialized use cases for translations that we need to look at. &lt;strong&gt;Attributes&lt;/strong&gt; can easily be overlooked but are also important to translate, not least for accessibility.&lt;/p&gt;

&lt;p&gt;Different languages have different pluralization rules and grammatical constructions that can make translation difficult. To simplify translation, we can use &lt;code&gt;plural&lt;/code&gt; to mark the uses of plural numbers and &lt;code&gt;select&lt;/code&gt; to mark alternate text choices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attributes"&gt;
  &lt;/a&gt;
  Attributes
&lt;/h3&gt;

&lt;p&gt;Apart from the usual suspects of HTML tags, we need to also be aware that we need to translate HTML attributes. This is especially important when we are making our applications accessible to all people.&lt;/p&gt;

&lt;p&gt;Let’s take the example of an &lt;code&gt;img&lt;/code&gt; tag. People using a screen reader would not see the picture but instead, the &lt;code&gt;alt&lt;/code&gt; attribute would be read to them. For this reason and others, provide a useful value for &lt;code&gt;alt&lt;/code&gt; whenever possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Welcome logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To mark an attribute for translation, add &lt;code&gt;i18n-&lt;/code&gt; followed by the attribute that is being translated. To mark the &lt;code&gt;alt&lt;/code&gt; attribute on the &lt;code&gt;img&lt;/code&gt; tag we add &lt;code&gt;i18n-alt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="na"&gt;i18n-alt&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Welcome logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the text “Welcome logo” will be extracted for translation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also assign a meaning, description, and custom ID with the &lt;br&gt;
&lt;code&gt;i18n-attribute="&amp;lt;meaning&amp;gt;|&amp;lt;description&amp;gt;@@&amp;lt;id&amp;gt;"&lt;/code&gt; syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#plurals"&gt;
  &lt;/a&gt;
  Plurals
&lt;/h3&gt;

&lt;p&gt;Pluralization rules between languages differ. We need to account for all potential cases. We use the &lt;code&gt;plural&lt;/code&gt; clause to mark expressions we want to translate depending on the number of subjects.&lt;/p&gt;

&lt;p&gt;For example, imagine we do a search and want to show how many results were found. We want to show “nothing found” or the number of results appended with “items found”. And of course, let’s not forget about the case with only one result.&lt;/p&gt;

&lt;p&gt;The following expression allows us to translate the different plurals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
{itemCount, plural, =0 {nothing found} =1 {one item found} other {{{itemCount}} items found}}
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;itemCount&lt;/code&gt; is a property with the number of items found.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;plural&lt;/code&gt; identifies the translation type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The third parameter lists all the possible cases (0, 1, other) and the corresponding text to display. Unmatched cases are caught by &lt;code&gt;other&lt;/code&gt;. Angular supports more categories &lt;a href="https://angular.io/guide/i18n#mark-plurals"&gt;listed here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we translate plural expression we have two trans units: One for the regular text placed before the plural and one for the plural versions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternates"&gt;
  &lt;/a&gt;
  Alternates
&lt;/h3&gt;

&lt;p&gt;If your text depends on the value of a variable, you need to translate all alternatives. Much like &lt;code&gt;plural&lt;/code&gt;, we can use the &lt;code&gt;select&lt;/code&gt; clause to mark choices of alternate texts. It allows you to choose one of the translations based on a value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Color: {color, select, red {red} blue {blue} green {green}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the value of &lt;code&gt;color&lt;/code&gt; we display either “red”, “blue”, or “green”. Like when translating plural expressions we get two trans units:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"7195591759695550088"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Color: &lt;span class="nt"&gt;&amp;lt;x&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"ICU"&lt;/span&gt; &lt;span class="na"&gt;equiv-text=&lt;/span&gt;&lt;span class="s"&gt;"{color, select, red {red} blue {blue} green {green}}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;12&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;trans-unit&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"3928679011634560837"&lt;/span&gt; &lt;span class="na"&gt;datatype=&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;{VAR_SELECT, select, red {red} blue {blue} green {green}}&lt;span class="nt"&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;context-group&lt;/span&gt; &lt;span class="na"&gt;purpose=&lt;/span&gt;&lt;span class="s"&gt;"location"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"sourcefile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;src/app/app.component.html&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context&lt;/span&gt; &lt;span class="na"&gt;context-type=&lt;/span&gt;&lt;span class="s"&gt;"linenumber"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;12&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/context-group&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/trans-unit&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The editors understand these units and help us with the translations:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQ_sZnFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075772614/avS2wCzQV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQ_sZnFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618075772614/avS2wCzQV.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interpolation"&gt;
  &lt;/a&gt;
  Interpolation
&lt;/h3&gt;

&lt;p&gt;Let’s combine a welcome message the &lt;code&gt;title&lt;/code&gt; property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;i18n&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome to {{ title }}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This places the value of the &lt;code&gt;title&lt;/code&gt; variable that we earlier translated in the text. When we extract this text we see how the interpolation is handled:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;source&amp;gt;&lt;/span&gt;Welcome to &lt;span class="nt"&gt;&amp;lt;x&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"INTERPOLATION"&lt;/span&gt; &lt;span class="na"&gt;equiv-text=&lt;/span&gt;&lt;span class="s"&gt;"{{ title }}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the translation the &lt;code&gt;&amp;lt;x.../&amp;gt;&lt;/code&gt; stays the same for the target language:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;target&amp;gt;&lt;/span&gt;Velkommen til &lt;span class="nt"&gt;&amp;lt;x&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"INTERPOLATION"&lt;/span&gt; &lt;span class="na"&gt;equiv-text=&lt;/span&gt;&lt;span class="s"&gt;"{{ title }}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s the last example of translations that we are looking at. Now, let’s see how we can get this applications up and running with our new language!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-locales"&gt;
  &lt;/a&gt;
  Configuring locales
&lt;/h2&gt;

&lt;p&gt;To be able to run our application in many languages we need to define the locales in the build configuration. In the &lt;code&gt;angular.json&lt;/code&gt; file, we can define locales for a project under the &lt;code&gt;i18n&lt;/code&gt; option and &lt;code&gt;locales&lt;/code&gt;, that maps locale identifiers to translation files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"projects"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"i18n-app"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"i18n"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sourceLocale"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"en-US"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"locales"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"messages.nb.xlf"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we added the configuration for the Norwegian language. We provide the path for the translation file for the locale &lt;code&gt;"nb"&lt;/code&gt;. In our case, the file is still in the root directory.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sourceLocale&lt;/code&gt; is the locale you use within the app source code. The default is &lt;code&gt;en-US&lt;/code&gt; so we could leave this line out or we could change it to another language. Whatever value we use here is also used to build an application together with the &lt;code&gt;locales&lt;/code&gt; we define.&lt;/p&gt;

&lt;p&gt;To use your locale definition in the build configuration, use the &lt;code&gt;"localize"&lt;/code&gt; option in &lt;code&gt;angular.json&lt;/code&gt; to tell the CLI which locales to generate for the build configuration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;"localize"&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for &lt;em&gt;all&lt;/em&gt; the locales previously defined in the build configuration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;"localize"&lt;/code&gt; to an array of a subset of the previously-defined locale identifiers to build only those locale versions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The development server only supports localizing a single locale at a time. Setting the &lt;code&gt;"localize"&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; will cause an error when using &lt;code&gt;ng serve&lt;/code&gt; if more than one locale is defined. Setting the option to a specific locale, such as &lt;code&gt;"localize": ["nb"]&lt;/code&gt;, can work if you want to develop against a specific locale.&lt;/p&gt;

&lt;p&gt;Since we want to be able to &lt;code&gt;ng serve&lt;/code&gt; our application with a single language, we create a custom locale-specific configuration by specifying a single locale in &lt;code&gt;angular.json&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"localize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"browserTarget"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ng-i18n:build:nb"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this change we can serve the Norwegian version of the app and make sure the translations are working by sending in &lt;code&gt;nb&lt;/code&gt; to the &lt;code&gt;configuration&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng serve &lt;span class="nt"&gt;--configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also build the app with a specific locale:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng build &lt;span class="nt"&gt;--configuration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;production,nb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with all the locales at once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng build &lt;span class="nt"&gt;--prod&lt;/span&gt; &lt;span class="nt"&gt;--localize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In other words, it’s more flexible to configure it the way we did but we could also have just set &lt;code&gt;localize&lt;/code&gt; and &lt;code&gt;aot&lt;/code&gt; to true and be done with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-multiple-languages-locally"&gt;
  &lt;/a&gt;
  Run multiple languages locally
&lt;/h2&gt;

&lt;p&gt;For performance reasons, running &lt;code&gt;ng serve&lt;/code&gt; only supports one locale at a time. As we saw earlier we can serve the specific languages by sending in the locale to the &lt;code&gt;configuration&lt;/code&gt; option. But, how can we run the application with all the configured languages?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-languages"&gt;
  &lt;/a&gt;
  Multiple languages
&lt;/h3&gt;

&lt;p&gt;To run all languages simultaneously we need first to build the project. We can build applications with the locales defined in the build configuration with the &lt;code&gt;localize&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng build &lt;span class="nt"&gt;--prod&lt;/span&gt; &lt;span class="nt"&gt;--localize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the build is localized and ready we need to set up a local webserver to serve the applications. Remember we have one application per language, which is what makes this a bit more complex.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://angular.io/guide/i18n#configuring-servers"&gt;Angular Docs&lt;/a&gt;, there are a couple of examples of server-side code that we can use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nginx"&gt;
  &lt;/a&gt;
  Nginx
&lt;/h3&gt;

&lt;p&gt;To get our application up and running we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href="https://www.nginx.com/resources/wiki/start/"&gt;Nginx&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add config from &lt;a href="https://angular.io/guide/i18n#nginx"&gt;Angular Docs&lt;/a&gt; to &lt;code&gt;conf/nginx.conf&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build our applications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy applications to the folder defined in &lt;code&gt;root&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open browser in &lt;code&gt;localhost&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The port is set in &lt;code&gt;listen&lt;/code&gt; and is normally set to 80. You change languages by changing the URL. We should now see our Norwegian application at &lt;code&gt;localhost/nb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of the &lt;code&gt;nginx.conf&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;events&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;types&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;module&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="n"&gt;/etc/nginx/mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Expires map for caching resources&lt;/span&gt;
  &lt;span class="kn"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;$sent_http_content_type&lt;/span&gt; &lt;span class="nv"&gt;$expires&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;default&lt;/span&gt;                    &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;text/html&lt;/span&gt;                  &lt;span class="s"&gt;epoch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;text/css&lt;/span&gt;                   &lt;span class="s"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;application/javascript&lt;/span&gt;     &lt;span class="s"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;~image/&lt;/span&gt;                    &lt;span class="s"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# Browser preferred language detection&lt;/span&gt;
  &lt;span class="kn"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;$http_accept_language&lt;/span&gt; &lt;span class="nv"&gt;$accept_language&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;~*^en&lt;/span&gt; &lt;span class="s"&gt;en&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;~*^nb&lt;/span&gt; &lt;span class="s"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt;         &lt;span class="n"&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Set cache expires from the map we defined.&lt;/span&gt;
    &lt;span class="kn"&gt;expires&lt;/span&gt; &lt;span class="nv"&gt;$expires&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Security. Don't send nginx version in Server header.&lt;/span&gt;
    &lt;span class="kn"&gt;server_tokens&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Fallback to default language if no preference defined by browser&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$accept_language&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;"^$")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$accept_language&lt;/span&gt; &lt;span class="s"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Redirect "/" to Angular app in browser's preferred language&lt;/span&gt;
    &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^/&lt;/span&gt;$ &lt;span class="n"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$accept_language&lt;/span&gt; &lt;span class="s"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Everything under the Angular app is always redirected to Angular in the correct language&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;^/(en|nb)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="n"&gt;/index.html?&lt;/span&gt;&lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;# Add security headers from separate file&lt;/span&gt;
      &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="n"&gt;/etc/nginx/security-headers.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Proxy for APIs.&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/api&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://api.address.here&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we use Nginx in production, it makes sense to also test our application locally with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-production"&gt;
  &lt;/a&gt;
  Deploy to production
&lt;/h2&gt;

&lt;p&gt;If you are using Nginx in production, then you already have the language configuration setup. If not, you need to find out what changes you need for your particular server configuration.&lt;/p&gt;

&lt;p&gt;We have to take into consideration if we are running the application locally or in production. We can do this by using &lt;a href="https://angular.io/api/core/isDevMode"&gt;&lt;code&gt;isDevMode&lt;/code&gt;&lt;/a&gt;, which returns whether Angular is in development mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;isDevMode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, when we are running the application locally with &lt;code&gt;ng serve&lt;/code&gt; we don’t add the locale to the URL as we do when we have localized the application in the production build.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maintaining-the-application"&gt;
  &lt;/a&gt;
  Maintaining the application
&lt;/h2&gt;

&lt;p&gt;Usually, when the application has been deployed it’s time to end the article. This time I wanted to address a few more things before ending. Let’s start by looking into what challenges we run into when going into maintenance mode.&lt;/p&gt;

&lt;p&gt;The biggest challenge is the handling of the translation files. We need to make sure that the marked texts find their way to the translators and back to the application before it’s deployed. To help with this we need to find a way to &lt;strong&gt;automate&lt;/strong&gt; the generation of translation files and get &lt;strong&gt;notified&lt;/strong&gt; when we have missing translations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-the-translation-files"&gt;
  &lt;/a&gt;
  Generating the translation files
&lt;/h3&gt;

&lt;p&gt;It’s not sustainable to keep merging the translation files manually. We need some automation! To implement this, I’m using a free tool called &lt;a href="https://github.com/martinroob/ngx-i18nsupport/tree/master/projects/xliffmerge"&gt;Xliffmerge&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since this tool has old Angular versions as &lt;code&gt;peerDependencies&lt;/code&gt; we need to use &lt;code&gt;--legacy-peer-deps&lt;/code&gt; if we are using a new version of NPM (v7) that would otherwise fail on installation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation for Xliffmerge is targeting older versions of Angular, but after some experimentation, I found it enough to install the &lt;code&gt;@ngx-i18nsupport/tooling&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; @ngx-i18nsupport/tooling &lt;span class="nt"&gt;--legacy-peer-deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;-D&lt;/code&gt; installs to &lt;code&gt;devDependencies&lt;/code&gt;, and for use in a CI pipeline, you should omit it to use in &lt;code&gt;dependencies&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we can add new languages to the configurations in &lt;code&gt;angular.json&lt;/code&gt; under &lt;code&gt;projects -&amp;amp;gt; projectName -&amp;amp;gt; architect -&amp;amp;gt; xliffmerge&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"xliffmerge"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"builder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@ngx-i18nsupport/tooling:xliffmerge"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"xliffmergeOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"defaultLanguage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"en-US"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"languages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"nb"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding new translations, we can extract them and migrate them to our translation files by running this script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng extract-i18n &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ng run projectName:xliffmerge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get a couple of warnings running the script which tells us its working!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WARNING: merged 1 trans-units from master to "nb"
WARNING: please translate file "messages.nb.xlf" to target-language="nb"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, you can distribute the language files to the translators. And when the translations finish, the files need to be merged back into the project repository.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just a word of caution that this library was not being actively maintained at the time of this writing, so you might want to look into other options. There is an Angular &lt;a href="https://github.com/angular/angular/issues/37655"&gt;issue on merging translated files&lt;/a&gt;. Go and upvote it if you think this is something that we need!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#missing-translations"&gt;
  &lt;/a&gt;
  Missing Translations
&lt;/h3&gt;

&lt;p&gt;Another way to make sure the translations are valid is to get noticed if translations are missing. By default, the build succeeds but generates a warning of missing translations. We can configure the level of the warning generated by the Angular compiler:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;error&lt;/code&gt;: An error message is displayed, and the build process is aborted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;warning&lt;/code&gt; (default): Show a Missing translation warning in the console or shell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ignore&lt;/code&gt;: Do nothing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Specify the warning level in the options section for the build target of your Angular CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;. The following example shows how to set the warning level to error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"i18nMissingTranslation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the application and no translation is found, the application displays the source-language text. We have to make a decision here on how important the translations are. If they are crucial then we should break the build to make sure we get all translations delivered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#format-data-based-on-locale"&gt;
  &lt;/a&gt;
  Format data based on locale
&lt;/h2&gt;

&lt;p&gt;Languages are not the only thing to take into consideration when localizing applications. A couple of the more obvious things we need to think about is how we present dates and numbers to our local customers.&lt;/p&gt;

&lt;p&gt;In Angular, we provide the &lt;a href="https://angular.io/api/core/LOCALE_ID"&gt;&lt;code&gt;LOCALE_ID&lt;/code&gt;&lt;/a&gt; token to set the locale of the application and register locale data with &lt;a href="https://angular.io/api/common/registerLocaleData"&gt;&lt;code&gt;registerLocaleData()&lt;/code&gt;&lt;/a&gt;. When we use the &lt;code&gt;--localize&lt;/code&gt; option with &lt;code&gt;ng build&lt;/code&gt; or run the &lt;code&gt;--configuration&lt;/code&gt; flag with &lt;code&gt;ng serve&lt;/code&gt;, the Angular CLI automatically includes the locale data and sets the &lt;code&gt;LOCALE_ID&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;LOCALE_ID&lt;/code&gt; set to the correct locale, we can use the built-in &lt;a href="https://angular.io/guide/glossary#pipe"&gt;pipes&lt;/a&gt; of Angular to format our data. Angular provides the following pipes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/api/common/DatePipe"&gt;&lt;code&gt;DatePipe&lt;/code&gt;&lt;/a&gt;: Formats a date value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/api/common/CurrencyPipe"&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;&lt;/a&gt;: Transforms a number to a currency string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/api/common/DecimalPipe"&gt;&lt;code&gt;DecimalPipe&lt;/code&gt;&lt;/a&gt;: Transforms a number into a decimal number string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/api/common/PercentPipe"&gt;&lt;code&gt;PercentPipe&lt;/code&gt;&lt;/a&gt;: Transforms a number to a percentage string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, &lt;code&gt;{{myDate | date}}&lt;/code&gt; uses &lt;code&gt;DatePipe&lt;/code&gt; to display the date in the correct format. We can also use the pipes in TypeScript files as long as we provide them to the module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#runtime-translations"&gt;
  &lt;/a&gt;
  Runtime translations
&lt;/h2&gt;

&lt;p&gt;When we run &lt;code&gt;ng serve --configuration=xx&lt;/code&gt; or &lt;code&gt;ng build --localize&lt;/code&gt; then the application is compiled and translated before we run it. However, if we don’t tell Angular to localize our application, then the &lt;code&gt;$localize&lt;/code&gt; tags are left in the code, and it’s possible to instead do the translation at runtime.&lt;/p&gt;

&lt;p&gt;This means that we can ship a single application and load the translations that we want to use before the application starts. There is a function &lt;a href="https://angular.io/api/localize/loadTranslations"&gt;&lt;code&gt;loadTranslations&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;@angular/localize&lt;/code&gt; that can be used to load translations, in the form of key/value pairs, before the application starts.&lt;/p&gt;

&lt;p&gt;Since the translations have to be called before any module file is imported, we can put it in &lt;code&gt;polyfills.ts&lt;/code&gt;. You could also use it in &lt;code&gt;main.ts&lt;/code&gt; by using a dynamic &lt;code&gt;import(...)&lt;/code&gt; for the module.&lt;/p&gt;

&lt;p&gt;Here is an example of using &lt;code&gt;loadTranslations&lt;/code&gt; in &lt;code&gt;polyfills.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/localize/init&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadTranslations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/localize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;loadTranslations&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;welcome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Velkommen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the outcome of this is effectively the same as translation at compile-time. The translation happens only once If you want to change the language at runtime then you must restart the whole application. Since &lt;code&gt;$localize&lt;/code&gt; messages are only processed on the first encounter, they do not provide dynamic language changing without refreshing the browser.&lt;/p&gt;

&lt;p&gt;The main benefit is allowing the project to deploy a single application with many translation files. The documentation on this part is still lacking, but hopefully, we get &lt;a href="https://github.com/angular/angular/issues/37563"&gt;official documentation&lt;/a&gt; on how to best work with &lt;code&gt;loadTranslations&lt;/code&gt; and &lt;code&gt;$localize&lt;/code&gt;. There are 3rd party libraries like &lt;a href="https://github.com/soluling/I18N/tree/master/Library/Angular"&gt;Soluling&lt;/a&gt; out there trying to bridge the gaps.&lt;/p&gt;

&lt;p&gt;If a dynamic and runtime-friendly solution is what you are looking for, then you should use &lt;a href="https://ngneat.github.io/transloco/"&gt;Transloco&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We started this article by looking into how the new Ivy engine changed the i18n and localizing of applications with Angular. We looked into what benefits and drawbacks this entails and if and when we should use alternative solutions.&lt;/p&gt;

&lt;p&gt;We then looked into adding the built-in package to a solution and how we mark texts for translation. We learned how to configure the application for localization and added tooling to manage our translation files. When we used an editor for translating, we saw how adding context to translations helps.&lt;/p&gt;

&lt;p&gt;Finally, after configuring and translating the application, we set up a web server to serve our application both locally and in production.&lt;/p&gt;

&lt;p&gt;There are many parts to localizing an application and I hope that after reading this article, you have a better understanding of how you can create and manage multi-language applications with Angular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://angular.io/guide/i18n"&gt;Angular Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.angular.io/angular-localization-with-ivy-4d8becefb6aa"&gt;Angular localization with Ivy&lt;/a&gt; by &lt;a href="https://medium.com/@petebd"&gt;Pete Bacon Darwin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.ninja-squad.com/2019/12/10/angular-localize/"&gt;Internationalization with @angular/localize&lt;/a&gt; by &lt;a href="https://twitter.com/cedric_exbrayat"&gt;Cédric Exbrayat&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to redirect to a URL with Express JS</title>
      <author>salim imuzai</author>
      <pubDate>Mon, 12 Apr 2021 08:54:26 +0000</pubDate>
      <link>https://dev.to/chimjay/how-to-redirect-to-a-url-with-express-js-53ge</link>
      <guid>https://dev.to/chimjay/how-to-redirect-to-a-url-with-express-js-53ge</guid>
      <description>&lt;p&gt;The &lt;strong&gt;res.redirect() function&lt;/strong&gt; lets you redirect the user to a different URL by sending an &lt;strong&gt;HTTP response with status 302&lt;/strong&gt;. The HTTP client (browser, &lt;strong&gt;superAgent&lt;/strong&gt;, etc.) will then "follow" the redirect and send an HTTP request to the new URL as shown below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zX48DubG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx8kqbv035k5w9y64c9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zX48DubG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx8kqbv035k5w9y64c9z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;res.redirect() function&lt;/strong&gt; also lets you specify an HTTP status other than 302. &lt;strong&gt;The 302 status is considered a temporary redirect&lt;/strong&gt;, which means search engines will still crawl the existing URL. If you want to indicate the URL has permanently changed, you should send a response with &lt;strong&gt;HTTP status 301&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_eOJvlJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byq6w9gnuwbkym0a2fuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_eOJvlJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byq6w9gnuwbkym0a2fuk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Handling POST Requests&lt;/strong&gt;&lt;br&gt;
There's some nuances about which status code you should use for POST requests. Strictly speaking, HTTP 301 and 302 are not required to keep the same method and body content when redirecting. If you're redirecting a POST request, you should use HTTP 307 as a replacement for HTTP 302, and HTTP 308 as a replacement for HTTP 301.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_dxf3KH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvyv7acb0u2kwgmw2ui3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_dxf3KH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvyv7acb0u2kwgmw2ui3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
