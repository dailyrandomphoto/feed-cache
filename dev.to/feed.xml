<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>GSoC Coding Phase 2: Challenge Is an Understatement</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Thu, 26 Aug 2021 16:54:12 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/gsoc-coding-phase-2-challenge-is-an-understatement-bji</link>
      <guid>https://dev.to/rohanlekhwani/gsoc-coding-phase-2-challenge-is-an-understatement-bji</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;It was all going smooth. And then this happened.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt;&lt;/strong&gt; is a 10 week global open-source program for students.&lt;/p&gt;

&lt;p&gt;It has been in the running for 16 years! In case you're new here, I recommend checking out my first blog in this series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/how-i-got-selected-into-google-summer-of-code-27"&gt;How I Got Selected into Google Summer of Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm revamping the &lt;strong&gt;&lt;a href="https://rocket.chat/blog/product/top-8-the-most-popular-rocket-chat-apps/"&gt;most downloaded app&lt;/a&gt;&lt;/strong&gt; on Rocket.Chat‚Ää-‚Ääthe &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll"&gt;Poll App&lt;/a&gt;&lt;/strong&gt;.¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; While it's been a smooth ride, there's one thing that happened that made all of us scratch our heads. Hang tight!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;Here‚Äôs a recap of the features I built in &lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/commit-push-merge-gsoc-coding-phase-1-51i0"&gt;Coding Phase 1&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Improved Response Visualizations:&lt;/strong&gt; Previously the Poll App displayed simple grayscale reponses. This was dull and boring. Moreover, there wasn‚Äôt a way to distinguish winners and total votes cast. &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/2"&gt;Here‚Äôs&lt;/a&gt;&lt;/strong&gt; how we changed this.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mixed Visibility Mode:&lt;/strong&gt; The Poll App allowed only two modes ‚Äî open where voter identities were visible and closed where they were not. What about something in the middle? Introducing &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/5"&gt;Mixed Visibility Mode&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Word Clouds:&lt;/strong&gt; Bar graphs are simple. Bar graphs do the job. And bar graphs are just &lt;em&gt;‚Äúokay‚Äù&lt;/em&gt;. Word Clouds are lit! Visualize responses in word clouds &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/6"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-i-add-to-the-poll-app"&gt;
  &lt;/a&gt;
  What Did I Add to the Poll App?
&lt;/h2&gt;

&lt;p&gt;While planning my timeline within my GSoC proposal, my strategy was to take up easier features at the start. This would allow me to have more time to explore the &lt;strong&gt;&lt;a href="https://rocketchat.github.io/Rocket.Chat.Apps-engine/"&gt;Rocket.Chat Apps Engine&lt;/a&gt;&lt;/strong&gt; while still shipping out features consistently.&lt;/p&gt;

&lt;p&gt;Coding Phase 1 was a success. It was time to bring out the &lt;strong&gt;big guns&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#userdefined-options"&gt;
  &lt;/a&gt;
  User-defined Options
&lt;/h3&gt;

&lt;p&gt;Until now the Poll App only allowed the Poll Creator to add options. Once they posted the poll no changes to the options could be made. &lt;strong&gt;What if users have an idea not covered within the options?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now if you‚Äôve ever used Facebook polls within groups you might‚Äôve noticed a subtle feature. All group members can add options after the poll is posted. Allowing group members to vote not only involves the community better but also evokes ideas and opinions from the entire group, not just limited to the poll creator.&lt;/p&gt;

&lt;p&gt;We decided to give the Poll Creator an option ‚Äî allow or disallow users from adding choices. Here‚Äôs how the poll message looks when the poll creator allowed users to add options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TfAwxQUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8t99e9zogzfw03tnpjl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TfAwxQUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8t99e9zogzfw03tnpjl.png" alt="Allow Users to Add Options After Poll Creation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that Add option button? That becomes available to all the users within the room. Let‚Äôs click on it and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsrfJHqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chgq3b6crsj46s5ej3hk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsrfJHqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chgq3b6crsj46s5ej3hk.png" alt="Adding German as a new option. I don‚Äôt speak German. (yet :P)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It opens up a modal that allows users to add an option. On clicking Add the option gets added to the existing Poll message with both vote quantity and voters set to 0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lGCJraCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygbsm3u1v8vpw9q54463.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lGCJraCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygbsm3u1v8vpw9q54463.png" alt="Germans in the house!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Poll message updates for everyone within the room with the new option. Yay!&lt;/p&gt;

&lt;p&gt;The PR for this feature along with a video demo can be found here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-poll-modes"&gt;
  &lt;/a&gt;
  Additional Poll Modes
&lt;/h3&gt;

&lt;p&gt;Adding options to Poll was kind of repetitive. Especially if you‚Äôre doing a 1 to 10 poll typing 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 was what you had to do (&lt;em&gt;okay I just did that&lt;/em&gt;). I thought:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68C4gHf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdz8qcgoasq9ghulpaih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68C4gHf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdz8qcgoasq9ghulpaih.png" alt="Why not?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Poll App only had two modes ‚Äî Mutliple Choice and Single Choice. That. Is. It. &lt;strong&gt;What if I could add more modes that would auto-fill all the options?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the next few days (and nights) I added the following modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Overrated/Underrated Polls&lt;/strong&gt; (Options: Overrated, Appropriately Rated, Never Tried, Underrated)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1-to-5 Polls&lt;/strong&gt; (Options: 1‚Äì5)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1-to-10 Polls&lt;/strong&gt; (Options: 1‚Äì10)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Agree/Disagree Polls&lt;/strong&gt; (Options: Agree/Disagree)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Emoji Rank Polls&lt;/strong&gt; (Options: Watch the demo! üöÄ)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ieOwIyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AsPhvVXxvC7wogIUc869mZg.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Emoji Rank Polls in Action!" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ieOwIyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AsPhvVXxvC7wogIUc869mZg.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best part is that the modal is completely interactive. This means that as soon as you select one of the additional poll modes the Options fields automatically disappear. Not to mention that Additional Poll modes support Mixed Visibility. How cool is that?&lt;/p&gt;

&lt;p&gt;To view other additional poll modes, checkout the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/11"&gt;PR&lt;/a&gt;&lt;/strong&gt; for Additional Poll Modes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-polls"&gt;
  &lt;/a&gt;
  Live Polls
&lt;/h3&gt;

&lt;p&gt;If you‚Äôve attempted an online quiz before. Well this it!&lt;/p&gt;

&lt;p&gt;Introducing Live Polls. To be honest about it, the effort and thought that went into this feature qualifies it as a &lt;strong&gt;mini-GSoC project&lt;/strong&gt; itself.&lt;/p&gt;

&lt;p&gt;Live Polls are an array of regular Polls with additional functionality of having a time limit to vote upon after which the current Poll ends and the next one is posted. Poll creators can also click on a new ‚ÄúNext Poll‚Äù button to trigger a pre-scheduled finish of the current Poll.&lt;/p&gt;

&lt;p&gt;The scheduling magic happens using the &lt;strong&gt;&lt;a href="https://developer.rocket.chat/apps-development/fundamentals-of-apps/scheduler-api"&gt;Scheduler API&lt;/a&gt;&lt;/strong&gt;. Every time a Poll within a Live Poll is posted, a processor is scheduled to end it after the user-specified time to vote.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kkcp9IRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6s865itd4d0ji4vezg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkcp9IRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6s865itd4d0ji4vezg3.png" alt="Time to vote on the Poll along with a ‚ÄúNext Poll‚Äù button."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live Polls are triggered using the command &lt;code&gt;/poll live &amp;lt;number of polls&amp;gt;&lt;/code&gt;.&lt;br&gt;
An excellent use-case for the Live Poll are stand-up and retro meetings. An additional use case is by teachers wanting to conduct &lt;strong&gt;timed quizzes&lt;/strong&gt; on Rocket.Chat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Late Retrieval&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My mentor suggested that in addition to having the Polls timed, the user should also be able to create a Live Poll at a time and retrieve or play it at a later time.&lt;/p&gt;

&lt;p&gt;I created a subcommand &lt;code&gt;/poll live save &amp;lt;number of polls&amp;gt;&lt;/code&gt;. It saves all the Poll states in the Poll App‚Äôs persistent storage. A unique &lt;strong&gt;Live Poll ID&lt;/strong&gt; is provided to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUdEnQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puw7nh6isld1w95ixc76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUdEnQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puw7nh6isld1w95ixc76.png" alt="Live Poll ID generated after saving Live Poll within persistent storage.&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The created Live Poll can be subsequently retrieved using the &lt;code&gt;/poll live load &amp;lt;Live Poll ID&amp;gt;&lt;/code&gt;. In case the user enters a wrong or non-existent Live Poll ID they‚Äôre shown a notification. On executing the above command with a correct Poll ID the Live Poll can be retrieved at any time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GT_vKtm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AvA5bEwLTDGNTnMBS7LL_fQ.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Retrieving a pre-created Live Poll." src="https://res.cloudinary.com/practicaldev/image/fetch/s--GT_vKtm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AvA5bEwLTDGNTnMBS7LL_fQ.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of teachers using Rocket.Chat for exams, the Live Poll Late Retrieval features proves an excellent tool for teachers to create quizzes even weeks before and then schedule the quiz on D-day with ease. All this while having control over the time limit to answer each question.&lt;/p&gt;

&lt;p&gt;The PR for Live Poll and Live Poll Late Retrieval features can be found &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/13"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-an-unexpected-problem"&gt;
  &lt;/a&gt;
  Bonus: An Unexpected Problem!
&lt;/h3&gt;

&lt;p&gt;If you‚Äôve been through my &lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/commit-push-merge-gsoc-coding-phase-1-51i0"&gt;Coding Phase 1 article&lt;/a&gt;&lt;/strong&gt; you would remember us using the &lt;strong&gt;&lt;a href="http://quickchart.io/documentation/word-cloud-api/"&gt;Quickchart Wordcloud API&lt;/a&gt;&lt;/strong&gt; to generate wordclouds.&lt;/p&gt;

&lt;p&gt;While this API works well when your Rocket.Chat server is connected to the Internet, a lot of organizations (my mentors org Credit Suisse, US Defence) use Rocket.Chat in an isolated environment. That means no Internet access. What then?&lt;/p&gt;

&lt;p&gt;We thought why not host Quickchart locally using their &lt;strong&gt;&lt;a href="https://github.com/typpo/quickchart"&gt;open-sourced codebase&lt;/a&gt;&lt;/strong&gt;? But‚Ä¶Wait-for-it. Quickchart has all APIs &lt;strong&gt;except&lt;/strong&gt; wordcloud open-sourced. Ha!&lt;/p&gt;

&lt;p&gt;Another problem was rate-limits. Quickchart has a rate-limit of &lt;code&gt;60 requests per minute per IP&lt;/code&gt; on their free tier. This means it is totally unsuitable for rooms with more than 60 members. My mentor Murtaza shared a perfect explaination. Quoting him from the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/6"&gt;PR&lt;/a&gt;&lt;/strong&gt; comment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if all the users are accessing the room from a different network then the limit is fair enough, however if all the users are on a private network behind a (Router + NAT) then although each of them will have a different local IP, but the same public IP ‚Äî In that case if there is a single room with more than 60 users, they all would be identified as a single entity/IP and the rate limit will come into picture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;I thought, why can‚Äôt I build my own API and remove Quickchart out of the equation altogether? And:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCWUEzOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/349/1%2APHq45ZJJ4ibMrl8yI2e0zQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCWUEzOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/349/1%2APHq45ZJJ4ibMrl8yI2e0zQ.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within a few days I had our own in-house developed Wordcloud API. The best thing about it? It offered &lt;strong&gt;more&lt;/strong&gt; customizations than Quickchart Enterprise, worked without an Internet connection, had practically no rate-limits and was free.&lt;/p&gt;

&lt;p&gt;I have open-sourced the word-cloud API &lt;strong&gt;&lt;a href="https://github.com/RonLek/wordcloud-api"&gt;here&lt;/a&gt;&lt;/strong&gt;. Feel free to use it in your own projects or raise a PR for further customizations.&lt;/p&gt;

&lt;p&gt;My API also factors in the number of votes cast per option. For example, if English received twice as many votes as Hindi on a Poll then ‚ÄúEnglish‚Äù would appear twice as big as ‚ÄúHindi‚Äù within the word-cloud.&lt;/p&gt;

&lt;p&gt;I provided the repository link within the Poll App settings page for users to self-host the API. This solved our Wordcloud frenzy forever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you faced an unexpected problem while coding a project? How did you solve it? Could you find a solution or did you just leave it for the future? Let me know in the comments section below!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I write biweekly about my GSoC journey at Rocket.Chat and this was the fifth blog in this series. Follow my voyage on &lt;a href="https://dev.to/rohanlekhwani"&gt;DEV&lt;/a&gt; and &lt;a href="https://rohanlekhwani.medium.com/about"&gt;Medium&lt;/a&gt; ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;In case you haven‚Äôt checked out my previous blog about GSoC First Evaluations, go check it out now ‚Äîit covers in detail how a GSoC student is evaluated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/gsoc-first-evaluations-all-you-need-to-know-2pjf"&gt;GSoC First Evaluations: All You Need to Know&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;.ü•§&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open source contributor and enthusiast. You can connect with him on &lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/Rohanlekhwani"&gt;Twitter&lt;/a&gt;, and his &lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Brief History Of Bootstrap</title>
      <author>prosperyong</author>
      <pubDate>Thu, 26 Aug 2021 16:53:54 +0000</pubDate>
      <link>https://dev.to/yongdev/brief-history-of-bootstrap-3gi6</link>
      <guid>https://dev.to/yongdev/brief-history-of-bootstrap-3gi6</guid>
      <description>&lt;p&gt;Free and open source, Bootstrap is a framework for creating websites and online applications. It is designed on CSS and JavaScript (JS) to make it easier to create responsive, mobile-first websites and apps using the Bootstrap framework. As a result of responsive design, a website or app can recognise the size and orientation of a visitor's screen and dynamically adjust its presentation appropriately. Employers rely on mobile applications as their primary means of completing tasks, therefore it's important that designers take into account the technology's requirements.&lt;/p&gt;

&lt;p&gt;In addition to the framework, Bootstrap contains user interface components, layouts and JS tools. Source code and precompiled applications are also available. Bootstrap was created in mid-2010 by Mark Otto and Jacob Thornton at Twitter to improve the uniformity of tools used on the site and reduce maintenance costs for the site. Previous versions of the programme were referred to as Twitter Blueprint and Twitter Bootstrap.&lt;/p&gt;

&lt;p&gt;After a few months of development, Twitter conducted its inaugural Hack Week, and the project expanded as developers of various skill levels stepped in without any external supervision from the company. As of today, it still serves as a style guide for internal tool development.&lt;br&gt;
There have been almost twenty releases since the first on August 19, 2011, including two significant rewrites with v2 and 3. To make the entire framework more responsive, we included a responsive stylesheet in Bootstrap 2. By using Bootstrap 3, we made it responsive by default, with a mobile-first focus.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#share-your-thoughts-below"&gt;
  &lt;/a&gt;
  Share Your Thoughts Below
&lt;/h3&gt;

</description>
      <category>bootstrap</category>
      <category>history</category>
      <category>css</category>
      <category>framework</category>
    </item>
    <item>
      <title>Calculator</title>
      <author>Al Siam</author>
      <pubDate>Thu, 26 Aug 2021 16:21:01 +0000</pubDate>
      <link>https://dev.to/alsiamworld/calculator-epd</link>
      <guid>https://dev.to/alsiamworld/calculator-epd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-13"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 13]
&lt;/h1&gt;

&lt;p&gt;Hello everyone, today I created a simple calculator using js.&lt;/p&gt;

&lt;p&gt;Live preview: &lt;a href="https://smart-js-calculator.netlify.app"&gt;https://smart-js-calculator.netlify.app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQsiIaPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rfh0klfbpshzffft8ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQsiIaPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rfh0klfbpshzffft8ur.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Bite-Sized CSS: Pseudo Classes vs. Pseudo Elements</title>
      <author>Albert Chang</author>
      <pubDate>Thu, 26 Aug 2021 15:54:11 +0000</pubDate>
      <link>https://dev.to/a89529294/bite-sized-css-pseudo-classes-vs-pseudo-elements-1fmf</link>
      <guid>https://dev.to/a89529294/bite-sized-css-pseudo-classes-vs-pseudo-elements-1fmf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pseudo-classes"&gt;
  &lt;/a&gt;
  Pseudo Classes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Starts with one colon.&lt;/li&gt;
&lt;li&gt;Deals with states, such as button:hover, button:focus.&lt;/li&gt;
&lt;li&gt;Selects the whole element.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;MDN Pseudo Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-elements"&gt;
  &lt;/a&gt;
  Pseudo Elements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Starts with double colons, ::before, ::first-letter, etc.&lt;/li&gt;
&lt;li&gt;Selects part of the element.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;MDN Pseudo Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Using Fixtures In Testing Symfony Application</title>
      <author>Jarek</author>
      <pubDate>Thu, 26 Aug 2021 15:47:12 +0000</pubDate>
      <link>https://dev.to/jszutkowski/using-fixtures-in-testing-symfony-application-47n2</link>
      <guid>https://dev.to/jszutkowski/using-fixtures-in-testing-symfony-application-47n2</guid>
      <description>&lt;p&gt;Recently I was creating a Symfony application. I used Doctrine as the ORM. I also wrote tests in which I used a database to check that the components were properly interacting with each other and that the data was fetched correctly. I needed a tool which would populate the database with sample data so that I didn't have to create them every time and that they would be the same in all tests.&lt;/p&gt;

&lt;p&gt;DoctrineFixturesBundle turned out to be an excellent tool for this purpose. It enables the creation of sample data that can later be used in tests. Data can be created in one file or divided, e.g. by entity. The bundle supports many databases such as MySQL, PostgreSQL or SQLite. What is more, fixtures can be used not only in tests - they can, for example, be used to fill the development database with sample data.&lt;/p&gt;

&lt;p&gt;I also used the LiipTestFixturesBundle. This tool includes services which would load fixtures into the test database. It allows writing functional tests as well. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing Dependencies
&lt;/h1&gt;

&lt;p&gt;Assuming we start our project from scratch, we will add a few packages. First, let's install Doctrine. We do this with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require symfony/orm-pack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, we will need a SymfonyMakerBundle that allows you to generate predefined test classes, controllers, migrations, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; symfony/maker-bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DoctrineFixturesBundle installation is done by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require orm-fixtures &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need PHPUnit to write tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; phpunit/phpunit symfony/test-pack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we install the Liip Test Fixtures Bundle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require liip/test-fixtures-bundle &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example-entities"&gt;
  &lt;/a&gt;
  Example Entities
&lt;/h1&gt;

&lt;p&gt;In such an application, let's create example entities that we will use in tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\Mapping&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="no"&gt;ORM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;#[ORM\Entity]&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Id]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\GeneratedValue(strategy: 'AUTO')]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;?int&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'string', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\ManyToOne(targetEntity: Category::class)]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\JoinColumn(name: 'category_id', referencedColumnName: 'id')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;Category&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Category&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\Mapping&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="no"&gt;ORM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;#[ORM\Entity]&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Id]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\GeneratedValue(strategy: 'AUTO')]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;?int&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'string', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#creating-fixtures"&gt;
  &lt;/a&gt;
  Creating Fixtures
&lt;/h1&gt;

&lt;p&gt;We create fixtures in classes which extend the Fixture class. We can add sample entities here and save them using EntityManager.&lt;br&gt;
We can also add references to such created entities - then we can use them in other fixtures classes.&lt;br&gt;
Moreover, if our class implements the DependentFixtureInterface interface, we will be able to specify which fixtures it depends on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\DataFixtures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Bundle\FixturesBundle\Fixture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Common\DataFixtures\DependentFixtureInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Persistence\ObjectManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryFixtures&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Fixture&lt;/span&gt; &lt;span class="c1"&gt;//implements DependentFixtureInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ObjectManager&lt;/span&gt; &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Sport'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$categories&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'category-%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//    public function getDependencies(): array&lt;/span&gt;
&lt;span class="c1"&gt;//    {&lt;/span&gt;
&lt;span class="c1"&gt;//        return [OtherFixtures::class];&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h1&gt;

&lt;p&gt;Tests should extend the KernelTestCase class. This will allow us to use database in them. Adding fixtures is now very easy. We can just call the loadFixtures method on the DatabaseToolCollection service, which takes an array of class names as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Tests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\DataFixtures\CategoryFixtures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\EntityManagerInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Liip\TestFixturesBundle\Services\DatabaseToolCollection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Liip\TestFixturesBundle\Services\DatabaseTools\AbstractDatabaseTool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Symfony\Bundle\FrameworkBundle\Test\KernelTestCase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductTest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;KernelTestCase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;AbstractDatabaseTool&lt;/span&gt; &lt;span class="nv"&gt;$databaseTool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;EntityManagerInterface&lt;/span&gt; &lt;span class="nv"&gt;$entityManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;databaseTool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DatabaseToolCollection&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;EntityManagerInterface&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;testChangeProductPrice&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;databaseTool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;loadFixtures&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="nc"&gt;CategoryFixtures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="nv"&gt;$category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findOneBy&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;


        &lt;span class="nv"&gt;$product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cd"&gt;/** @var $product Product */&lt;/span&gt;
        &lt;span class="nv"&gt;$product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getCategory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>symfony</category>
      <category>tutorial</category>
      <category>phpunit</category>
    </item>
    <item>
      <title>React Native Image Resource Generator</title>
      <author>Sergei Butko</author>
      <pubDate>Thu, 26 Aug 2021 15:40:36 +0000</pubDate>
      <link>https://dev.to/svbutko/react-native-image-resource-generator-m14</link>
      <guid>https://dev.to/svbutko/react-native-image-resource-generator-m14</guid>
      <description>&lt;p&gt;Nearly every single react-native application uses images and icons to make them look more appealing to the end user or help them use it by providing additional information.&lt;/p&gt;

&lt;p&gt;Since react-native became publicly available the process of adding these images to apps didn't change much and while working with different people and apps there've been issues, problems and mild inconveniences about which I'd like to present here and most importantly give a solution to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues-problems-and-motivation"&gt;
  &lt;/a&gt;
  Issues, problems and motivation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#file-existence"&gt;
  &lt;/a&gt;
  File existence
&lt;/h4&gt;

&lt;p&gt;In order to use images and icons in code they first have to be imported. The most common way is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./my-icon.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By using &lt;em&gt;require&lt;/em&gt; we are manually setting the path to our file with little IDE support. And without any 3rd party plugins IDE can't guarantee whether the file exists or not, there won't be any error or at least warning to indicate that file doesn't exist. Like the file can be deleted, or you accidentally added some symbol into the require path. You will never know about it until you launch the app and open the screen where this icon is used.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#manual-typing"&gt;
  &lt;/a&gt;
  Manual typing
&lt;/h4&gt;

&lt;p&gt;As mentioned before:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By using &lt;em&gt;require&lt;/em&gt; we are &lt;strong&gt;manually&lt;/strong&gt; setting the path to our file...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If it's 1-5 icons it might be fine but if there are more than 10 or 50 or even 100 (there are lots of different cases). And always manually typing paths is tedious and takes your valuable time.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#icon-replacementremoval"&gt;
  &lt;/a&gt;
  Icon replacement/removal
&lt;/h4&gt;

&lt;p&gt;Possibly a single icon can be used in different components/screens and for some reasons we have to remove it and replace it with a new one. In this case we have to search for every usage of this icon in our application and replace it with a new one, although with search-and-replacement it's a bit easier but still takes time.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#icon-names"&gt;
  &lt;/a&gt;
  Icon names
&lt;/h4&gt;

&lt;p&gt;Not everybody create icons and UI itself, most of the time a designer does this job and while drawing and finishing icons they receive names and sometimes a person can write things like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bell icon.png
$.png
icon,t.png
icon's.png
icon".png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or there might be even non-Latin alphabet letters:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;–∑–≤–æ–Ω–æ–∫.png
zur√ºck.png
Èêò.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Not everybody do things like this but it's still possible and after seeing this one can only introduce coding/naming conventions to a designer and politely ask him to change this or in case if it's impossible to manually change it by yourself.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/svbutko/react-native-image-resource-generator"&gt;&lt;strong&gt;react-native-image-resource-generator&lt;/strong&gt;&lt;/a&gt; was developed to overcome all of these problems, add structure, save time and nerves.&lt;/p&gt;

&lt;p&gt;It's a simple CLI tool which generates code-friendly image URI source constants to use in projects.&lt;/p&gt;

&lt;p&gt;Create a folder and put all of your images there (&lt;em&gt;sub-folders are supported too&lt;/em&gt;), e.g.:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;project
‚îÇ   package.json
‚îÇ   src  
‚îÇ
‚îî‚îÄ‚îÄ‚îÄresources
‚îÇ   ‚îÇ   fonts
‚îÇ   ‚îÇ   settings
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄimages
‚îÇ       ‚îÇ   arrow_down.png
‚îÇ       ‚îÇ   arrow_down@2x.png
‚îÇ       ‚îÇ   arrow_down@3x.png
‚îÇ       ‚îÇ   arrow_up.png
‚îÇ       ‚îÇ   ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add script to your &lt;code&gt;package.json&lt;/code&gt; scripts or type into terminal:&lt;/p&gt;

&lt;p&gt;JavaScript&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;img-res-gen --dir=resources/images --out=src/common/ImageResources.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;TypeScript&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;img-res-gen --dir=resources/images --out=src/common/ImageResources.g.ts --ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The result of the command will create a file with static image URI sources, which will look something similar to this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* eslint-disable */&lt;/span&gt;
&lt;span class="cm"&gt;/* tslint:disable */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ImageURISource&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ImageResources&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/account.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;arrow_down&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/arrow_down.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;arrow_up&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/arrow_up.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/avatar.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/back.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/bank.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;bell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/bell.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After this use it anywhere you need:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ImageResources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You don't need to manually write requires anymore and stop worrying about file existence and path names.&lt;/p&gt;

&lt;p&gt;If you added or removed images, simply re-run the script to regenerate the file. IDE will give you a list of errors of used constants which don't exist anymore and you can simply replace them.&lt;/p&gt;

&lt;p&gt;As mentioned before it works with JavaScript and with TypeScript.&lt;/p&gt;

&lt;p&gt;To handle non-Latin letters and other symbols and follow naming conventions, the tool uses &lt;a href="https://github.com/dzcpy/transliteration"&gt;transliteration&lt;/a&gt; under the hood and transliterates file names.&lt;/p&gt;



&lt;p&gt;Hope you will use it in your projects and it will serve you well. And if you see any issues or would like to propose changes, feel free to create PRs!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/svbutko"&gt;
        svbutko
      &lt;/a&gt; / &lt;a href="https://github.com/svbutko/react-native-image-resource-generator"&gt;
        react-native-image-resource-generator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>reactnative</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Loop JS Object Values
</title>
      <author>Asela</author>
      <pubDate>Thu, 26 Aug 2021 15:13:26 +0000</pubDate>
      <link>https://dev.to/zaselalk/how-to-loop-js-object-values-422p</link>
      <guid>https://dev.to/zaselalk/how-to-loop-js-object-values-422p</guid>
      <description>&lt;p&gt;So, How to Loop JavaScript Object Values ?&lt;/p&gt;

&lt;p&gt;Here It's&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);

let text = "";
for (let x in myObj) {
  text = += myObj[x] + ", ";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So Simple, Isn't it? Have a Nice day and Don't forget to follow.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Engineering Metrics: 3 Levels of Visibility </title>
      <author>Nick Hodges</author>
      <pubDate>Thu, 26 Aug 2021 15:08:35 +0000</pubDate>
      <link>https://dev.to/linearb/engineering-metrics-3-levels-of-visibility-5ba9</link>
      <guid>https://dev.to/linearb/engineering-metrics-3-levels-of-visibility-5ba9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;LinearB has all sorts of engineering metrics for your software development pipeline. We can slice and dice those metrics from all kinds of angles and all sorts of ways. Your CTO will want to see very different views of LinearB data than will your developer leads. Whether you are trying to see into the health of your delivery pipeline, seeking out bottlenecks in your system, or worried about making sure only LinearB can help you gain those insights.&lt;/p&gt;

&lt;p&gt;Since the presentation of data is critical to its effectiveness, LinearB allows you to create views into your data for different levels of your organization and your code. The three most interesting views into your data are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Organization Level Engineering Metrics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team Level Engineering Metrics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repository Level Engineering Metrics&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#organization-level-engineering-metrics"&gt;
  &lt;/a&gt;
  Organization Level Engineering Metrics
&lt;/h2&gt;

&lt;p&gt;The highest level view of your company‚Äôs engineering metrics is at the organizational level. This is the view that rolls up everything that every developer on all your teams does into one single view.&lt;/p&gt;

&lt;p&gt;An organization-level view helps you align business priorities by visualizing your project investment at the 50,000-foot view. As an executive, you plot the course and fly the airliner. You need to make sure your team‚Äôs efforts are aligned with business goals and that you are doing everything in your power to ensure the success of crucial projects. By viewing things from the top, you will be able to get the proper glimpse into what and how your development team is doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-look-at-the-organizationlevel-engineering-metrics"&gt;
  &lt;/a&gt;
  Why look at the organization-level engineering metrics?
&lt;/h2&gt;

&lt;p&gt;The organization-level engineering metrics view is usually most valuable for the CTO or VP of Software Engineering. It provides a complete, high-level look at everything happening in the software development realm. CTOs and VPs can get an executive summary of things like Cycle Time, Work Breakdown, and your Investment Profile.&lt;/p&gt;

&lt;p&gt;They can get a high-level view answers questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is the team working on?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How fast are we delivering that value?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where is our investment going?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do my &lt;a href="https://linearb.io/blog/dora-engineering-metrics/"&gt;DORA metrics&lt;/a&gt; look like?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs take a look at how LinearB can answer these questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-team-working-on"&gt;
  &lt;/a&gt;
  What is the team working on?
&lt;/h2&gt;

&lt;p&gt;The Project View can show you exactly what projects your team is working on and the high-level status of each of those projects:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-Zbx7tr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AksQ0226tGIzjhQzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-Zbx7tr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AksQ0226tGIzjhQzo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-fast-are-we-delivering-value"&gt;
  &lt;/a&gt;
  How fast are we delivering value?
&lt;/h2&gt;

&lt;p&gt;Organization-level &lt;a href="https://linearb.io/cycle-time/"&gt;Cycle Time&lt;/a&gt; can tell you how well the team is delivering value. A lower cycle time means more value is arriving in the customer‚Äôs hands sooner. It also means that you are breaking your work into smaller, more manageable chunks, thus encouraging good Code Review practices. For instance, if you identify that your Coding Time is a problem (as below) then &lt;a href="https://linearb.io/blog/reducing-coding-time/"&gt;you can take action to correct it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTOa81pd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AHHUgX1qtyQr82zDI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTOa81pd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AHHUgX1qtyQr82zDI.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-is-our-investment-going"&gt;
  &lt;/a&gt;
  Where is our investment going?
&lt;/h2&gt;

&lt;p&gt;You can see what the team is working on via the Investment Profile View. This view tells you the type of work and what percentage of each type is being done by the team. Perhaps you might notice that bug fixing is climbing. Perhaps that is on purpose. Perhaps not. Either way, you can see it happening and take action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM4FK_ap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AJUZSzJKGk9r_yVqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM4FK_ap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AJUZSzJKGk9r_yVqk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-my-dora-metrics-look-like"&gt;
  &lt;/a&gt;
  What do my DORA metrics look like?
&lt;/h2&gt;

&lt;p&gt;DORA Metrics are easy to track in LinearB, again, via a custom dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3bWFcaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2A5JUdsM_WOzKOw3-C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3bWFcaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2A5JUdsM_WOzKOw3-C.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#team-level-engineering-metrics"&gt;
  &lt;/a&gt;
  Team Level Engineering Metrics
&lt;/h2&gt;

&lt;p&gt;Just as executives need a view into their software development team‚Äôs engineering metrics, so, too, do Dev Managers and Dev Leads. They are interested in more day-to-day metrics that track how things are progressing with their specific development pipelines. Dev Leads and Dev Managers want to remove workflow blockers, set goals for workflow optimization, and keep code ‚Äî and thus value ‚Äî working its way through the development pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-look-at-teamlevel-engineering-metrics"&gt;
  &lt;/a&gt;
  Why look at team-level engineering metrics?
&lt;/h2&gt;

&lt;p&gt;Dev Leads and Dev Managers want to know the answers to questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Where are my bottlenecks?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are my developers aligned to business priorities?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is the team effectively working together?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-are-my-bottlenecks"&gt;
  &lt;/a&gt;
  Where are my bottlenecks?
&lt;/h2&gt;

&lt;p&gt;Bottlenecks can be easily spotted by drilling down into Cycle Time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5c3ytHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AVaP2gr1iaEAbmz-g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5c3ytHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AVaP2gr1iaEAbmz-g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It couldn‚Äôt be easier ‚Äî anything that isn‚Äôt green is a bottleneck for the team. If you need to, you can drill down into the team and project level to see what is causing the bottlenecks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-my-developers-aligned-to-business-priorities"&gt;
  &lt;/a&gt;
  Are my developers aligned to business priorities?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://linearb.io/blog/linearb-pulse-view-release/"&gt;Pulse View&lt;/a&gt; can tell a Dev Lead exactly what her team is working on. The Pulse View melds information from your git repository and your Project Management tool to provide valuable insights into what each team and team member is doing.&lt;/p&gt;

&lt;p&gt;Below you can see four of the twenty issues that the entire team is currently working on. The view shows active, merged, and shipped work for each project. More and bigger dots mean more activity on a given issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxQtB7vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2APgPZraeqdXdoORQl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxQtB7vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2APgPZraeqdXdoORQl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-the-team-effectively-working-together"&gt;
  &lt;/a&gt;
  Is the team effectively working together?
&lt;/h2&gt;

&lt;p&gt;Ensuring that the team is working together and all rowing in the same direction is a large part of a Development Manager‚Äôs job. Out of the box, LinearB provides three team-level dashboards ‚Äî they are called Quality, Delivery, and ThroughPut ‚Äî that provide insights into the team-level engineering metrics that are useful for Development Managers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMKNv9aY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AtPt2J0Mk0XPtl2YA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMKNv9aY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AtPt2J0Mk0XPtl2YA.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A large part of the teamwork on a software development team is ensuring the smooth, steady flow of Pull Requests. Keeping an eye on Pull Requests and their corresponding Code Reviews is as easy as setting up a &lt;a href="https://linearb.io/blog/custom-metrics-dashboards/"&gt;custom dashboard&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJoykNdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AmE6ykRRIe8qdrRTT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJoykNdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AmE6ykRRIe8qdrRTT.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see things like how long it takes for a Pull Request to be picked up and a review started, how much time is being spent on reviews, the depth of those reviews, and more. All of this information can be used to find bottlenecks in your coding pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repo-level-engineering-metrics"&gt;
  &lt;/a&gt;
  Repo Level Engineering Metrics
&lt;/h2&gt;

&lt;p&gt;LinearB‚Äôs newest view is the &lt;a href="https://linearb.helpdocs.io/article/v0a3cpxc8q-repository-level-metrics"&gt;Repository Level view&lt;/a&gt; into your codebase. This is best seen via pre-built and custom dashboards. You can create a specific dashboard and then choose to look at it with either the ‚ÄúPeople‚Äù or ‚ÄúRepository‚Äù view. This enables you to quickly and easily peer into a specific repository from any dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-look-at-the-repo-level-metrics"&gt;
  &lt;/a&gt;
  Why look at the Repo level metrics?
&lt;/h2&gt;

&lt;p&gt;It is quite common for a larger project to be broken down into multiple repositories. While a view into what a team is doing, sometimes multiple teams are working together on a repository and the status of that repository can become a concern.&lt;/p&gt;

&lt;p&gt;Or perhaps your project is based on the microservices model, and you have a repository for each service. With the Repository Level View, you can see what is going on inside the repository for any of the services that may need your attention&lt;/p&gt;

&lt;p&gt;Now, with LinearB‚Äôs new Repository Level View, you can easily check the health of a given repository.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a thorough example of a dashboard that will give you insight into a repository as opposed to what your team or organization is up to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIiQmzss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ao4W4saBq7ybFpzyW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIiQmzss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ao4W4saBq7ybFpzyW.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This view has been broken down into three areas of interest by the row of the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Quality metrics in Orange&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Review success in Purple&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code throughput in Green&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The three quality metrics are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Rework&lt;/strong&gt; ‚Äî This measures the amount of committed code that are changes to existing code created less than 21 days ago. LinearB recommends that you keep Code Rework to under 3% for any given repository. If you see it going above that, you will know that you have code quality issues or that requirements are changing or not well defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PRS Merged without Review&lt;/strong&gt; ‚Äî This number should be zero ‚Äî a flat line across the bottom. There should never be a merge (above a configurable minimum size) that isn‚Äôt reviewed. A lack of code review could mean low-quality code has been merged into the repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PR Size&lt;/strong&gt; ‚Äî Large Pull Requests cause all kinds of problems, including low Pickup Time, Long Reviews, and Pull Requests with low Review Depth. Pull requests should be small and easily digestible. LinearB recommends that Pull Requests average less than one hundred changes. We also recommend that if they get above two hundred changes, then it could indicate problems discussed above.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The three review success metrics are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://linearb.io/blog/pull-request-pickup-time/"&gt;Pull Request Pickup Time&lt;/a&gt;&lt;/strong&gt; ‚Äî PR Pickup TIme is the amount of time between the Pull Request being submitted and the first comment is made on the Pull Request. LinearB recommends that you keep this to less than one day so changes are fresh in everyone‚Äôs mind. If the Pull Request Pickup Time starts rising, it likely indicates that other developers are hesitant to start reviewing code, perhaps because they are too busy with Work in Progress or because the Pull Request is large and complex.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://linearb.io/blog/reducing-pr-review-time/"&gt;Review Time&lt;/a&gt;&lt;/strong&gt; ‚Äî This is the amount of time spent reviewing the code. If it is too little, say less than a day, it could indicate that reviews are superficial. If it is too high, more than four or five days, it likely means that the code is complex and difficult to understand, and thus difficult to approve.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Review Depth&lt;/strong&gt; ‚Äî This is the average number of comments per review. If it is below two, it indicates superficial reviews. More than five, it could indicate complex or hard to understand code needing attention from leadership as the pipeline might be slowed down.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The two code throughput metrics are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull Requests Merged&lt;/strong&gt; ‚Äî Here, there is no prescriptive measure. Rather, it is a trend that should be monitored. If it starts lowering, perhaps the development team is stuck or has too big of a project. If it starts rising, that is generally considered a good thing, as Pull Requests are likely small and easy to process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deployment Frequency&lt;/strong&gt; ‚Äî This is a &lt;a href="https://linearb.io/blog/dora-engineering-metrics/"&gt;DORA Metric&lt;/a&gt; (which are usually tracked at the executive level) but the measure can also be useful at the repository level. If a repository is being released less weekly, then it indicates features building up that increase the feedback loop for the development team. It also indicates that deployments can get large, and failures become harder to track.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A dashboard such as this one provides a clear look into an individual repository, allowing you to ensure that the code therein is of high quality, being properly reviewed, and moving along quickly into the hands of customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leveling-up-your-development-pipeline"&gt;
  &lt;/a&gt;
  Leveling Up Your Development Pipeline
&lt;/h2&gt;

&lt;p&gt;Whether you are a Development Lead or a CTO/VP of Engineering, or if you are concerned with high-level, team-level, or repo-level metrics, LinearB can provide you with the information and insight you need to make sound decisions about your software development process.&lt;/p&gt;

&lt;p&gt;Our tool lets you recognize that there is a problem, dig in to find where the problem originates, and take the necessary steps to correct things. If you are not already using LinearB and want to do things like see exactly what is going on in your organization, team, or repository, &lt;a href="https://linearb.io/demo"&gt;sign up for a free demo of the product today&lt;/a&gt;! Our produce is free to use for teams of eight or less, so get started with a demo today!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://linearb.io/blog/engineering-metrics-3-levels-of-visibility/"&gt;https://linearb.io&lt;/a&gt; on August 9, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>showdev</category>
      <category>productivity</category>
      <category>analytics</category>
    </item>
    <item>
      <title>Wisdom of the DEV crowd üó£</title>
      <author>Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥</author>
      <pubDate>Thu, 26 Aug 2021 14:56:52 +0000</pubDate>
      <link>https://dev.to/jmfayard/wisdom-of-the-dev-crowd-2kho</link>
      <guid>https://dev.to/jmfayard/wisdom-of-the-dev-crowd-2kho</guid>
      <description>&lt;p&gt;Unearth incredibly good content with this crazy simple trick!&lt;/p&gt;

&lt;p&gt;It sounds like clickbait, I know... but it's true, I swear!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-unearth-incredibly-good-content"&gt;
  &lt;/a&gt;
  How to unearth incredibly good content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Take a topic you are unfamiliar with but curious about, for example &lt;strong&gt;Kotlin&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Find its tag, for example &lt;a href="https://dev.to/t/kotlin/"&gt;https://dev.to/t/kotlin/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Crucial step: select the top articles from the &lt;strong&gt;Infinity&lt;/strong&gt; tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlaHMVJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/130982102-c9d0a031-36b7-472d-906c-11205593ad91.png" class="article-body-image-wrapper"&gt;&lt;img alt="Screenshot_26_08_2021_16_32" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlaHMVJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/130982102-c9d0a031-36b7-472d-906c-11205593ad91.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the &lt;strong&gt;3 articles&lt;/strong&gt; that looks most interesting to you and bookmark them.&lt;/li&gt;
&lt;li&gt;Open &lt;a href="https://dev.to/readinglist"&gt;https://dev.to/readinglist&lt;/a&gt; and prepare yourself to learn a lot quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;As you can see the feature is not really hidden, but still the DEV interface is focused on what is new in the feed, and it can be easy to miss the good things that have been written before.&lt;/p&gt;

&lt;p&gt;Every time I have followed those steps, I have been really happy about the results.&lt;/p&gt;

&lt;p&gt;Most recently I was unsure about working remotely and how to avoid its pitfalls. &lt;/p&gt;

&lt;p&gt;Sure enough &lt;a href="https://dev.to/t/remote/top/infinity"&gt;https://dev.to/t/remote/top/infinity&lt;/a&gt; was filled with really helpful content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ivancrneto/what-i-have-learned-from-eight-years-of-being-a-remote-developer-3eob"&gt;What I have learned from eight years of being a remote developer - DEV Community üë©‚Äçüíªüë®‚Äçüíª&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/walrusai/how-to-work-remotely-without-going-insane-28l6"&gt;How to Work Remotely Without Going Insane - DEV Community üë©‚Äçüíªüë®‚Äçüíª&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mpermar/10-years-of-remote-working-this-is-what-i-have-learned-so-far-21l9"&gt;10 years of remote working. This is what I have learned so far. - DEV Community üë©‚Äçüíªüë®‚Äçüíª&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out!
&lt;/h2&gt;

&lt;p&gt;Select a topic you are not familiar but curious about and start bookmarking the articles that looks interesting.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Non tech: &lt;a href="https://dev.to/t/career/top/infinity"&gt;#career&lt;/a&gt;
&lt;a href="https://dev.to/t/writing/top/infinity"&gt;#writing&lt;/a&gt;
&lt;a href="https://dev.to/t/agile/top/infinity"&gt;#agile&lt;/a&gt; &lt;a href="https://dev.to/t/discuss/top/infinity"&gt;#discuss&lt;/a&gt; &lt;a href="https://dev.to/t/watercooler/top/infinity"&gt;#watercooler&lt;/a&gt; &lt;a href="https://dev.to/t/meta/top/infinity"&gt;#meta&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Webdev: &lt;a href="https://dev.to/t/javascript/top/infinity"&gt;#javascript&lt;/a&gt;
&lt;a href="https://dev.to/t/react/top/infinity"&gt;#react&lt;/a&gt;
&lt;a href="https://dev.to/t/reactnative/top/infinity"&gt;#reactnative&lt;/a&gt;
&lt;a href="https://dev.to/t/angular/top/infinity"&gt;#angular&lt;/a&gt;
&lt;a href="https://dev.to/t/node/top/infinity"&gt;#node&lt;/a&gt;
&lt;a href="https://dev.to/t/vue/top/infinity"&gt;#vue&lt;/a&gt;
&lt;a href="https://dev.to/t/css/top/infinity"&gt;#css&lt;/a&gt;
&lt;a href="https://dev.to/t/html/top/infinity"&gt;#html&lt;/a&gt;
&lt;a href="https://dev.to/t/typescript/top/infinity"&gt;#typescript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Programming langugaes: &lt;a href="https://dev.to/t/python/top/infinity"&gt;#python&lt;/a&gt;
&lt;a href="https://dev.to/t/php/top/infinity"&gt;#php&lt;/a&gt;
&lt;a href="https://dev.to/t/java/top/infinity"&gt;#java&lt;/a&gt;
&lt;a href="https://dev.to/t/android/top/infinity"&gt;#android&lt;/a&gt;
&lt;a href="https://dev.to/t/go/top/infinity"&gt;#go&lt;/a&gt;
&lt;a href="https://dev.to/t/ruby/top/infinity"&gt;#ruby&lt;/a&gt;
&lt;a href="https://dev.to/t/csharp/top/infinity"&gt;#csharp&lt;/a&gt;
&lt;a href="https://dev.to/t/rails/top/infinity"&gt;#rails&lt;/a&gt;
&lt;a href="https://dev.to/t/swift/top/infinity"&gt;#swift&lt;/a&gt;
&lt;a href="https://dev.to/t/dart/top/infinity"&gt;#dart&lt;/a&gt;
&lt;a href="https://dev.to/t/cpp/top/infinity"&gt;#cpp&lt;/a&gt;
&lt;a href="https://dev.to/t/rust/top/infinity"&gt;#rust&lt;/a&gt;
&lt;a href="https://dev.to/t/c/top/infinity"&gt;#c&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Topics:
&lt;a href="https://dev.to/t/git/top/infinity"&gt;#git&lt;/a&gt;
&lt;a href="https://dev.to/t/ux/top/infinity"&gt;#ux&lt;/a&gt;
&lt;a href="https://dev.to/t/learning/top/infinity"&gt;#learning&lt;/a&gt;
&lt;a href="https://dev.to/t/database/top/infinity"&gt;#database&lt;/a&gt;
&lt;a href="https://dev.to/t/sql/top/infinity"&gt;#sql&lt;/a&gt;
&lt;a href="https://dev.to/t/devops/top/infinity"&gt;#devops&lt;/a&gt;
&lt;a href="https://dev.to/t/aws/top/infinity"&gt;#aws&lt;/a&gt;
&lt;a href="https://dev.to/t/security/top/infinity"&gt;#security&lt;/a&gt;
&lt;a href="https://dev.to/t/testing/top/infinity"&gt;#testing&lt;/a&gt;
&lt;a href="https://dev.to/t/docker/top/infinity"&gt;#docker&lt;/a&gt;
&lt;a href="https://dev.to/t/linux/top/infinity"&gt;#linux&lt;/a&gt;
&lt;a href="https://dev.to/t/cloud/top/infinity"&gt;#cloud&lt;/a&gt;
&lt;a href="https://dev.to/t/serverless/top/infinity"&gt;#serverless&lt;/a&gt;
&lt;a href="https://dev.to/t/datascience/top/infinity"&gt;#datascience&lt;/a&gt;
&lt;a href="https://dev.to/t/machinelearning/top/infinity"&gt;#machinelearning&lt;/a&gt;
&lt;a href="https://dev.to/t/kubernetes/top/infinity"&gt;#kubernetes&lt;/a&gt;
&lt;a href="https://dev.to/t/blockchain/top/infinity"&gt;#blockchain&lt;/a&gt;
&lt;a href="https://dev.to/t/architecture/top/infinity"&gt;#architecture&lt;/a&gt;
&lt;a href="https://dev.to/t/algorithms/top/infinity"&gt;#algorithms&lt;/a&gt;
&lt;a href="https://dev.to/t/ai/top/infinity"&gt;#ai&lt;/a&gt;
&lt;a href="https://dev.to/t/bash/top/infinity"&gt;#bash&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would be surprised if you don't find 3 excellent articles!&lt;/p&gt;

</description>
      <category>learning</category>
      <category>bestofdev</category>
      <category>meta</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>JavaScript News and Updates of August 2021</title>
      <author>Pavel Lazarev</author>
      <pubDate>Thu, 26 Aug 2021 14:43:28 +0000</pubDate>
      <link>https://dev.to/plazarev/javascript-news-and-updates-of-august-2021-d7</link>
      <guid>https://dev.to/plazarev/javascript-news-and-updates-of-august-2021-d7</guid>
      <description>&lt;p&gt;Hello to all front-end enthusiasts! I‚Äôm back with a fresh portion of news and updates related to JavaScript that came out in August. This time, you will learn about the latest programming trends from Stack Overflow, AI technology converting natural language into code, upcoming releases from DHTMLX, features added to Vue.js, and a new secure mode in Microsoft Edge. As a cherry on top, I‚Äôll share with you a range of useful articles for deepening your JavaScript knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-tools-and-updates"&gt;
  &lt;/a&gt;
  New Tools and Updates
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#key-takeaways-from-the-latest-stack-overflow-developer-survey"&gt;
  &lt;/a&gt;
  Key Takeaways from the Latest Stack Overflow Developer Survey
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qrVWAA-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/liim5clv56l1qrnwanef.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrVWAA-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/liim5clv56l1qrnwanef.jpg" alt="Stack Overflow Developer Survey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stack Overflow is mainly known as the largest question-answer online platform allowing programmers to collaborate and solve any kind of coding issues. But the Stack Overflow team also annually conducts a major survey called ‚ÄúDeveloper Survey‚Äù, involving tens of thousands of professional developers from all over the globe, to learn the latest programming trends. The 2021 edition of this survey has been published this month and I would like to review the most curious results.&lt;/p&gt;

&lt;p&gt;The survey embraces a lot of aspects, but I‚Äôm going to focus on the section outlining the tools and technologies that are currently popular among developers. In programming languages, there are no surprises, as almost 65% of responders named JavaScript as the most commonly used coding language. The picture is different in the category of the most wanted languages, where JavaScript is only the third (14%) behind Python (19%) and TypeScript (15%). React is the most popular and desired web framework, while Svelte is the most loved one. Find more interesting insights from the full &lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;2021 Developer Survey&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#new-openais-tool-translates-english-into-programming-code"&gt;
  &lt;/a&gt;
  New OpenAI‚Äôs Tool Translates English into Programming Code
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9GDNJqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10ot38nm21opthdprym9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9GDNJqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10ot38nm21opthdprym9.PNG" alt="Codex tool logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you ever wanted to generate code using just plain English? It may seem crazy but the American company OpenAI is really close to making it possible. Backed by Microsoft, the OpenAI team has recently presented its new code generation tool named Codex. Designed as a programming model powering the GitHub Copilot service, it automatically translates a human language into working computer code.&lt;/p&gt;

&lt;p&gt;Codex is better suited for Python, but can also be used with other popular programming languages such as JavaScript, Go, PHP, Ruby, etc. This tool is expected to help developers with various programming tasks such as transpilation, code refactoring, and more. Using Codex, you can even create a simple &lt;a href="https://www.youtube.com/watch?v=Zm9B-DvwOgw"&gt;computer game&lt;/a&gt;. The project is currently in private beta and OpenAI hopes to advance it with the help of the developer community. If you want to learn more about this promising tool and sign up for a free trial period, read the &lt;a href="https://openai.com/blog/openai-codex/"&gt;release article&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#upcoming-releases-from-dhtmlx"&gt;
  &lt;/a&gt;
  Upcoming Releases from DHTMLX
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3m2fi2vt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tck36ny1c588ony6v7ew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3m2fi2vt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tck36ny1c588ony6v7ew.png" alt="DHTMLX Updates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DHTMLX is a well-known provider of JavaScript UI libraries and widgets helping web developers to implement various functionalities much faster. I have recently acquired credible information that the company is planning two big releases in the near future.&lt;/p&gt;

&lt;p&gt;A reliable source from the company informed me that very soon the DHTMLX product portfolio will be complemented with a new component - &lt;a href="https://dhtmlx.com/docs/products/dhtmlxKanban/"&gt;JavaScript Kanban&lt;/a&gt;. This tool will be equipped with all features that are commonly expected from a Kanban board. For instance, it will allow users to easily create and manage project tasks with drag and drop, track their deadlines, set task priority, add columns and swimlanes, and much more. The touch support will give you an opportunity to create a Kanban board that can be conveniently operated via various touch devices. But the real beauty of the Kanban library is that you will be able to integrate it with other DHTMLX components such as the JS Gantt chart and Scheduler event calendar or even third-party tools for building powerful project management solutions.&lt;/p&gt;

&lt;p&gt;Another great news is that the DHTMLX development team finalizes the preparation of a major update for its &lt;a href="https://dhtmlx.com/docs/products/dhtmlxDiagram/"&gt;JavaScript diagramming library&lt;/a&gt;. It enables you to create various types of diagrams for visualizing data of any complexity. The main peculiarity of the upcoming release (v4.0) is the appearance of swimlanes. These are visual elements utilized for clearly depicting complex business processes with multiple stages and participants involved in their implementation. So if you don‚Äôt want to miss these releases, follow the news in the &lt;a href="https://dhtmlx.com/blog/"&gt;DHTMLX blog&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#new-mode-in-microsoft-edge-neutralizes-a-source-of-js-vulnerabilities"&gt;
  &lt;/a&gt;
  New Mode in Microsoft Edge Neutralizes a Source of JS Vulnerabilities
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jW41wAzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scs2a81i0ttb9qzocj38.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jW41wAzY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scs2a81i0ttb9qzocj38.jpg" alt="SDSM mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microsoft Edge relies on the V8 JavaScript engine for providing outstanding browser performance for its users. But there is a serious security flipside. The thing is that malicious users frequently target the JIT function of the JS engine for hacking the browser. The Microsoft security team designed a new mode with a bit provocative name ‚ÄúSuper Duper Secure Mode‚Äù (or simply SDSM) for improving the browser protection against this kind of attack.&lt;/p&gt;

&lt;p&gt;This mode will disable the JIT function and allow using special security mechanisms (CET and ACG). But what about the browser speed without this performance-enhancing function? The SDSM development team assures that in practice users will hardly notice any performance deterioration. The SDSM is currently an experimental feature, but the developers want to make it ‚Äúsmarter‚Äù. It is planned that in the future the mode will automatically estimate risks and kick in only on suspicious websites. Check out this &lt;a href="https://microsoftedge.github.io/edgevr/posts/Super-Duper-Secure-Mode/"&gt;post&lt;/a&gt; to know more about this mode.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#whats-new-in-vuejs-32"&gt;
  &lt;/a&gt;
  What‚Äôs New in Vue.js 3.2
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QXMOZiKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvmcmddclj0ad2b1g3l5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXMOZiKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvmcmddclj0ad2b1g3l5.jpg" alt="Vue.js logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For years, Vue.js has been one of the most widely used frameworks for front-end development. Web developers really love Vue.js for its simplicity, high performance, solid tooling system, and well-written documentation. It is trusted by big companies such as Facebook, Netflix, Nintendo, Alibaba, and many others.  This month, this popular JavaScript framework has been updated to version 3.2. The release includes a range of important novelties.&lt;/p&gt;

&lt;p&gt;The development team led by Evan You introduced several considerable performance enhancements to the reactivity system of the framework. From now on, Vue developers can build native custom elements with the help of Vue component APIs thanks to a new &lt;em&gt;defineCustomElement&lt;/em&gt; method. A couple of helpful features for SFC  received stable status in v3.2. To get more information about this release, visit the Vue.js &lt;a href="https://blog.vuejs.org/posts/vue-3.2.html"&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-tips-and-articles"&gt;
  &lt;/a&gt;
  Useful Tips and Articles
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-to-avoid-risks-of-using-thirdparty-scripts-in-your-project"&gt;
  &lt;/a&gt;
  How to Avoid Risks of Using Third-Party Scripts  in your Project
&lt;/h3&gt;

&lt;p&gt;Nowadays, it has become a common practice for web developers to integrate third-party JavaScript code into their projects. The software market is full of helper libraries, analytics &amp;amp; metrics scripts, advertising iframes, and many other useful tools that can make the life of a developer much easier. They help to make a web application more dynamic and interactive without devoting much time and effort. But at the same time, it should be taken into account that the excessive use of third-party scripts may cause serious performance issues. This &lt;a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript"&gt;article&lt;/a&gt; includes many useful tips on how to identify and solve problems related to third-party script loading.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-the-secret-of-v8-js-engine-performance"&gt;
  &lt;/a&gt;
  What is the Secret of V8 JS Engine Performance?
&lt;/h4&gt;

&lt;p&gt;The use of the V8 JS engine in popular web browsers, runtime environments (Node.js, Deno), frameworks, and other technologies contributes to the long-lasting popularity of JavaScript. It ensures a high speed of JavaScript execution by directly translating JS code into machine code. So what is behind the impressive performance of the V8? It takes advantage of the Just In Time (JIT) compilation, abstract syntax trees, hidden classes, and other tools. In this &lt;a href="https://blog.bitsrc.io/secret-behind-javascript-performance-v8-hidden-classes-ba4d0ebfb89d"&gt;material&lt;/a&gt;, you will become familiar with the architecture of the V8 engine architecture and interesting performance-related details about the V8 JavaScript engine.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#properties-and-attributes-in-custom-elements"&gt;
  &lt;/a&gt;
  Properties and Attributes in Custom Elements
&lt;/h4&gt;

&lt;p&gt;Creating custom elements is an essential capability of Web components that enables you to generate new HTML elements. But if you are working on a vanilla custom element, you can face difficulties when dealing with properties and attributes. The problem lies in the custom element upgrade process. This kind of issue is usually solved automatically when using frameworks, but if you prefer not to, find a workaround in this &lt;a href="https://nolanlawson.com/2021/08/03/handling-properties-in-custom-element-upgrades/"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-helper-functions-in-javascript-iteration"&gt;
  &lt;/a&gt;
  Using Helper Functions in JavaScript Iteration
&lt;/h4&gt;

&lt;p&gt;With the arrival of ES6, JavaScript received a new way for traversing data known as iteration. The iteration protocol includes two main entities - iterables and iterators. Iterables are objects that serve as containers for storing data, while iterators pull data contained in iterables in a one-at-a-time fashion. But currently, JavaScript does not support many iteration-based algorithms and it can be a problem. That‚Äôs where helper functions come in handy. Dr. Axel Rauschmayer, the author of multiple books on JavaScript, shares four scenarios of implementing helper functions in JavaScript iteration in this informative &lt;a href="https://2ality.com/2021/08/iteration-helpers.html"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#matching-strings-with-regular-expressions-in-javascript"&gt;
  &lt;/a&gt;
  Matching Strings with Regular Expressions in JavaScript
&lt;/h4&gt;

&lt;p&gt;Implementing validation for emails or user inputs is a common web development task, implying the need to match strings. It can be a challenging task, but fortunately, there are many pattern-matching tools and approaches that help to do it right. The question is which one to choose. Using regular expressions is probably the most reliable option for this purpose. These are special patterns intended for matching character combinations in strings. In this &lt;a href="https://stackabuse.com/guide-to-regular-expressions-and-matching-strings-in-javascript/"&gt;article&lt;/a&gt;, you will learn how to create regular expressions and become familiar with some methods utilized with them.&lt;/p&gt;

&lt;p&gt;We will continue learning new stuff from the JavaScript world in September. Stay tuned.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>news</category>
      <category>html</category>
    </item>
    <item>
      <title>Flask[Part 2]: Setting up Database </title>
      <author>Tito</author>
      <pubDate>Thu, 26 Aug 2021 14:35:29 +0000</pubDate>
      <link>https://dev.to/titusnjuguna/flask-part-2-setting-up-database-3f3e</link>
      <guid>https://dev.to/titusnjuguna/flask-part-2-setting-up-database-3f3e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This article is a continuation of our &lt;a href=""&gt;Previous Post&lt;/a&gt; where we tackled setting up working directory, working environment , installing  flask and run a flask app.&lt;br&gt;
In this article we will focus on creating models , migrations and testing database&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;python 3+ installed&lt;/li&gt;
&lt;li&gt;Flask Installed; A working flask app &lt;/li&gt;
&lt;li&gt;PostgreSQL optional; work with DBMS of your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before you start, create a model.py file  in project folder and   install ,import the following packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flask-login&lt;/li&gt;
&lt;li&gt;flask-sqlalchemy&lt;/li&gt;
&lt;li&gt;flask-migrate&lt;/li&gt;
&lt;li&gt;itsdangerous
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWfkyN-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db9e6wxfmdmou7urxeqk.png" alt="Alt Text"&gt;
On the database configuration, it is advisable to hide the db details using environment variables. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now Go ahead the model&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EkIQthpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/926ozynk2q50k6o69brf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EkIQthpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/926ozynk2q50k6o69brf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating our model and ensuring that the DBMS of your choice is working, carry out a migration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; tito@tito-HP-2000-Notebook-PC:~/Desktop/Milestone/Mile_Proj&lt;span class="nv"&gt;$ &lt;/span&gt;flask db init
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; tito@tito-HP-2000-Notebook-PC:~/Desktop/Milestone/Mile_Proj&lt;span class="nv"&gt;$ &lt;/span&gt;flask db migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The migrations will automatically create tables in your Database.&lt;br&gt;
Thank you for following .&lt;br&gt;
The next article , I will handle forms for collecting data.&lt;br&gt;
------------------------------------ &lt;a href=""&gt;NEXT ARTICLE&lt;/a&gt;------------------------------------&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>C#: How to layout a PDF document with rowspan, colspan, and nested tables using PDFFlow
</title>
      <author>Sharnouby55</author>
      <pubDate>Thu, 26 Aug 2021 14:26:59 +0000</pubDate>
      <link>https://dev.to/mo_elsharnouby/c-how-to-layout-a-pdf-document-with-rowspan-colspan-and-nested-tables-using-pdfflow-28pd</link>
      <guid>https://dev.to/mo_elsharnouby/c-how-to-layout-a-pdf-document-with-rowspan-colspan-and-nested-tables-using-pdfflow-28pd</guid>
      <description>&lt;p&gt;This tutorial will show you when to use rowspan, colspan, and nested tables to get particular layouts and will guide you step-by-step to easily layout your PDF with the help of these options using the C# PDF generation library PDFFlow.&lt;/p&gt;

&lt;p&gt;Layouting using rowspans, colspans and nested tables allows you to arrange data into rows and columns. They are commonly used to display tabular data like product listings, customer details, financial reports, tickets, and so on.&lt;/p&gt;

&lt;p&gt;Use rowspan and colspan parameters if you need to get a table with cells spanning several rows and columns. Setting rowspan and colspan for table cells allow you to create simple well-organized layouts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yprbxmvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nhqvoq14qg3oht5f9ws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yprbxmvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7nhqvoq14qg3oht5f9ws.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use a nested table if you need to get a table with a more complex structure. For complex cases, you should divide your table into several logical parts and add them as nested tables. nested tables allow you to create bigger, more complex but well-ordered layouts.&lt;br&gt;
In the following example, the nested table is highlighted in blue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bPe8siQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcgnfadek1mjv0w1v95k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bPe8siQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcgnfadek1mjv0w1v95k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting started&lt;br&gt;
First, we need to create a new console application project "MyLayoutingDoc" in Visual Studio and choose Language ‚ÄúC#‚Äù.&lt;br&gt;
Then we need to add the Gehtsoft.PDFFlowlib library to our project. You can download it as a NuGet package from NuGet Gallery | Gehtsoft.PDFFlowLib.&lt;br&gt;
You can also install it from the Visual Studio NuGet Package Manager: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In Solution Explorer, right-click either References or a project and select Manage NuGet Packages.&lt;/li&gt;
&lt;li&gt;Go to the Browse tab and search for the Gehtsoft.PDFFlowLib package using the search box on the upper left. &lt;/li&gt;
&lt;li&gt;Select the package from the list and click Install.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When to use rowspan&lt;br&gt;
When you want to place components in a single table cell vertically spanning several rows.&lt;br&gt;
How to create a layout with rowspan &lt;br&gt;
Let‚Äôs create a table with 4 rows and 4 columns and make the first cell span 4 rows.&lt;br&gt;
First, use the AddColumnToTable() method to define how many columns you need to create in your table, and the AddRow() method to define how many rows you need to create.&lt;br&gt;
To add cells to rows, you need to use the method AddCellToRow(), you can also add text to cells using the same method by adding your text in parentheses: AddCellToRow(‚Äúyour text here‚Äù).&lt;br&gt;
Now to make one cell span 2 or more rows, first, you need to use the AddCell() method, then use the SetRowSpan(number of rows to span here) method, then the ToRow() method.&lt;br&gt;
Ex: .AddCell("row span").SetRowSpan(4).ToRow()&lt;/p&gt;

&lt;p&gt;Also, you can use the method AddCell and pass its 3 parameters Text, colspan, and rowspan to set how many rows and columns should the cell span.&lt;br&gt;
Ex:  .AddCell("text here", 1, 3).ToRow()&lt;br&gt;
The following code will create a table with 4 rows and 4 columns, with the first cell spanning 4 rows:&lt;/p&gt;

&lt;p&gt;DocumentBuilder.New().AddSection().AddTable()&lt;br&gt;
// add 4 columns to the table&lt;br&gt;
                                   .AddColumnToTable().AddColumnToTable()&lt;br&gt;
                                   .AddColumnToTable().AddColumnToTable()&lt;br&gt;
// add the first row&lt;br&gt;
                                   .AddRow()&lt;br&gt;
// add the first cell and make it span 4 rows&lt;br&gt;
                                       .AddCell("row span").SetRowSpan(4).ToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow().ToTable()&lt;br&gt;
// add the second row&lt;br&gt;
                                   .AddRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow().ToTable()&lt;br&gt;
//  add the third row&lt;br&gt;
                                   .AddRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow().ToTable()&lt;br&gt;
// add the fourth row&lt;br&gt;
                                   .AddRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
                                       .AddCellToRow()&lt;br&gt;
// generate the PDF document&lt;br&gt;
                           .ToDocument().Build("Result.pdf");&lt;br&gt;
The result should be similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXRCJVNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u03mcgii88ow3foq00cr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXRCJVNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u03mcgii88ow3foq00cr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When to use colspan&lt;br&gt;
When you want to place components in a single table cell horizontally spanning several columns.&lt;br&gt;
How to create a layout with colspan&lt;br&gt;
Using colspan is pretty much the same as using rowspan, you first need to use the AddColumnToTable() method to define how many columns you need, and the AddRow() method to define how many rows you need to create in your table. Here we are creating a table with 4 rows and 4 columns with the first cell spanning 4 columns.&lt;br&gt;
To add cells to a row, you need to use the method AddCellToRow().&lt;br&gt;
Now to make one cell span 4 columns, first, you need to use the AddCell() method, then use the SetColSpan(number of columns to span here) method, then the ToTable() method.&lt;br&gt;
Ex: .AddCell("col span").SetColSpan(4).ToTable()&lt;/p&gt;

&lt;p&gt;Or you can use the method AddCell and pass its 3 parameters Text, colspan, and rowspan.&lt;br&gt;
Ex:  .AddCell("text here", 1, 3).ToRow()&lt;br&gt;
The following code will create a table with 4 rows and 4 columns, with the first cell spanning 4 columns:&lt;/p&gt;

&lt;p&gt;DocumentBuilder.New().AddSection().AddTable()&lt;br&gt;
// create 4 columns&lt;br&gt;
                       .AddColumnToTable().AddColumnToTable()&lt;br&gt;
                       .AddColumnToTable().AddColumnToTable()&lt;br&gt;
// add the first cell to the first row and make it span 4 columns&lt;br&gt;
                       .AddRow()&lt;br&gt;
                           .AddCell("col span").SetColSpan(4).ToTable()&lt;br&gt;
// add the second row&lt;br&gt;
                       .AddRow()&lt;br&gt;
// create 4 cells in the second row&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow().ToTable()&lt;br&gt;
// add the third row&lt;br&gt;
                       .AddRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow().ToTable()&lt;br&gt;
// add the fourth row&lt;br&gt;
                       .AddRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
                           .AddCellToRow()&lt;br&gt;
//  generate the PDF document&lt;br&gt;
               .ToDocument().Build("Result.pdf");&lt;br&gt;
The result should be similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-6I9lpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnq05d5fp5wbs159s117.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-6I9lpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnq05d5fp5wbs159s117.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using rowspan and colspan together&lt;br&gt;
If you need to create a layout where cells span both several rows and several columns, you just need to use both methods SetRowSpan(#) and SetColSpan(#).&lt;br&gt;
 For example:&lt;br&gt;
                     .AddRow()&lt;br&gt;
                            .AddCell("row span").SetRowSpan(4).ToRow()&lt;br&gt;
                            .AddCell("col span").SetColSpan(3).ToTable()&lt;br&gt;
Notice that we set the number of columns to span to 3 because the first cell already spans 4 rows and only 3 columns are left to span.&lt;br&gt;
The following code will create a table with 4 rows and 4 columns, with the first cell spanning 4 rows and the second cell spanning 3 columns:&lt;br&gt;
             DocumentBuilder.New().AddSection().AddTable()&lt;br&gt;
// add 4 columns to the table&lt;br&gt;
                        .AddColumnToTable().AddColumnToTable()&lt;br&gt;
                        .AddColumnToTable().AddColumnToTable()&lt;br&gt;
// add the first row&lt;br&gt;
                        .AddRow()&lt;br&gt;
// make the first cell in the first row span 4 rows&lt;br&gt;
                            .AddCell("row span").SetRowSpan(4).ToRow()&lt;br&gt;
// make the second cell in the first row span 3 columns&lt;br&gt;
                            .AddCell("col span").SetColSpan(3).ToTable()&lt;br&gt;
// add the second row&lt;br&gt;
                        .AddRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow().ToTable()&lt;br&gt;
// add the third row&lt;br&gt;
                        .AddRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow().ToTable()&lt;br&gt;
// add the fourth row&lt;br&gt;
                        .AddRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
// generate the PDF document&lt;br&gt;
                .ToDocument().Build("Result.pdf");&lt;br&gt;
The result should be similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZv0-KKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p33mlv24dbsggpon7kg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZv0-KKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p33mlv24dbsggpon7kg1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When to use nested tables&lt;br&gt;
You should use a nested table when you need to design a more complicated layout, for example, if you need to organize components in a tabular format within a single table cell.&lt;br&gt;
Here's an example of a complex real document created using the PDFFlow library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67TPivaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftpjfcqzse44g72hzk1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67TPivaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftpjfcqzse44g72hzk1l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The area marked by a green rectangle is a table with a complex structure - it contains two nested tables - marked in red and dark-yellow. These tables are nested inside the cells of the main table that contains two columns (75% and 25% width respectively).&lt;br&gt;
But it is important to note that all elements in any cell are placed after one another in any case by using the break command ‚Äú\n‚Äù. &lt;br&gt;
A clear example of this behavior is the placement of the texts: "Passenger name", "PAVEL REMPEL".&lt;br&gt;
How to create a layout with nested tables&lt;br&gt;
1- Decomposing the code into separate procedures&lt;br&gt;
To create several nested tables we should decompose the code into separate procedures. Create methods to generate each nested table, then call it when creating the main table, and pass the cell where we need to insert the nested table in the cell parameter.&lt;br&gt;
For example:&lt;br&gt;
           var row2 = table.AddRow().AddCellToRow();&lt;br&gt;
            AddTablePartToCell(row2.AddCell());&lt;br&gt;
// basically generate and insert a table inside a table cell&lt;br&gt;
        private static void AddTablePartToCell(TableCellBuilder cell)&lt;br&gt;
        {&lt;br&gt;
//  create a nested table with 2 rows and 2 columns&lt;br&gt;
            cell.AddTable().AddColumnToTable().AddColumnToTable()&lt;br&gt;&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("Row 1 Col 1").AddCellToRow("Row 1 Col 2").ToTable()&lt;br&gt;
                    .AddRow().AddCellToRow("Row 2 Col 1").AddCellToRow("Row 2 Col 2");&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this example, the nested table is highlighted in yellow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rhcWf4cq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc23oqyzvcudl1nxcir5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhcWf4cq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc23oqyzvcudl1nxcir5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Using fluent style to create nested tables&lt;br&gt;
When you need to create a document using a table with nested tables, as an alternative to decomposing the code into separate procedures, you can get the same result using the fluent style to code the entire complex table. You can change the current fluent context to parent objects using the following To... methods: ToTable, ToRow, ToCell, ToSection. To avoid errors when creating nested tables, it is important to correctly specify changes of the current fluent context.&lt;br&gt;
Example of creating a simple table with a nested table using the fluent style:&lt;br&gt;
            DocumentBuilder.New()&lt;br&gt;
            .AddSection()&lt;br&gt;
            .AddTable()&lt;br&gt;
            .AddColumnToTable()&lt;br&gt;
            .AddRow()&lt;br&gt;
            .AddCell()&lt;br&gt;
                .AddTable()&lt;br&gt;
                    .AddColumnToTable()&lt;br&gt;
                    .AddRow()&lt;br&gt;
                    .AddCell("Nested table")&lt;br&gt;
                .ToTable()&lt;br&gt;
            .ToCell()&lt;br&gt;
                .ToTable()&lt;br&gt;
            .AddRow()&lt;br&gt;
                .AddCell("Parent table")&lt;br&gt;
                .ToDocument().Build("Result.pdf");&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lRU50SGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j3p7cxn210eurjf0ksx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lRU50SGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j3p7cxn210eurjf0ksx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you can set the width of each column in percent using the AddColumnPercent("", %) method. In our case, we will set the first column to 25% and the second column to 75%.&lt;br&gt;
For example:&lt;br&gt;
                        .AddColumnPercent("", 25).ToTable()&lt;br&gt;
                        .AddColumnPercent("", 75).ToTable()&lt;br&gt;
Create the first row and add 2 cells to it using the AddCell() method as follows:&lt;br&gt;
.AddRow()&lt;br&gt;
                        .AddCell("column 1,\nrow span", 1, 3).ToRow()&lt;br&gt;
                        .AddCell("column 2")&lt;br&gt;
Notice that the AddCell method here takes 3 parameters (text, colspan, and rowspan), also remember that using ‚Äú\n‚Äù within the text will make a line break.&lt;br&gt;
To create the second row, we need to declare a new var and fill it with a new table cell, then call our method AddTablePartToCell() and pass the newly created cell in it, as shown in the following code:&lt;br&gt;
            var row2 = table.AddRow()&lt;br&gt;
                            .AddCellToRow();&lt;br&gt;
            AddTablePartToCell(row2.AddCell());&lt;/p&gt;

&lt;p&gt;The following code will create a table (main table) of 2 columns and 3 rows, span the first cell to 3 rows and insert another table (nested table) in the second column and the second row:&lt;br&gt;
        {&lt;br&gt;
//  create the main table&lt;br&gt;
            var table = DocumentBuilder.New()&lt;br&gt;
                .AddSection()&lt;br&gt;
                    .AddTable()&lt;br&gt;
// add 2 columns to the table with 25% and 75% width&lt;br&gt;
                        .AddColumnPercent("", 25).ToTable()&lt;br&gt;
                        .AddColumnPercent("", 75).ToTable()&lt;br&gt;
                        .AddRow()&lt;br&gt;
// \n will create a line-break inside the cell&lt;br&gt;
                        .AddCell("column 1,\nrow span", 1, 3).ToRow()&lt;br&gt;
                        .AddCell("column 2")&lt;br&gt;
                .ToTable();&lt;br&gt;
//  create the second row&lt;br&gt;
            var row2 = table.AddRow()&lt;br&gt;
                            .AddCellToRow();&lt;br&gt;
// here we call the method that generates the nested table and inserts it into &lt;br&gt;
// the cell of the main table&lt;br&gt;
            AddTablePartToCell(row2.AddCell());&lt;br&gt;
//  add the last row to the main table &lt;br&gt;
            table.AddRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
                            .AddCellToRow()&lt;br&gt;
            .ToDocument().Build("Result.pdf");&lt;br&gt;
        }&lt;br&gt;
// create a method that generates the nested table and inserts it into the main table&lt;br&gt;
        private static void AddTablePartToCell(TableCellBuilder cell)&lt;br&gt;
        {&lt;br&gt;
// create the nested table&lt;br&gt;
            cell.AddTable()&lt;br&gt;
// create 4 columns&lt;br&gt;
                    .AddColumnToTable().AddColumnToTable()&lt;br&gt;
                    .AddColumnToTable().AddColumnToTable()&lt;br&gt;
                    .AddRow()&lt;br&gt;
// using \n to make a line-break &lt;br&gt;
// add the first cell and make it span 4 rows&lt;br&gt;
                        .AddCell("column 1,\nrow span", 1, 4).ToRow()&lt;br&gt;
                        .AddCellToRow("column 2")&lt;br&gt;
                        .AddCellToRow("column 3")&lt;br&gt;
                        .AddCell("column 4").ToTable()&lt;br&gt;
// add the second row&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow().AddCellToRow()&lt;br&gt;
                        .AddCellToRow().AddCellToRow().ToTable()&lt;br&gt;
// add the third row&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow().AddCellToRow()&lt;br&gt;
                        .AddCellToRow().AddCellToRow().ToTable()&lt;br&gt;
// add the fourth row&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow().AddCellToRow()&lt;br&gt;
                        .AddCellToRow().AddCellToRow();&lt;br&gt;
        }&lt;br&gt;
The result should be similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWPFXauu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qxpha75ma2ic63f9y48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWPFXauu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qxpha75ma2ic63f9y48.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The nested table is highlighted in yellow and the main table is highlighted in grey.&lt;/p&gt;

&lt;p&gt;Create a complex table layout using nested tables, rowspan, and colspan&lt;br&gt;
Now let's try to create an even more complex layout containing 2 nested tables with spanned rows and columns.&lt;br&gt;
It‚Äôs very simple, all we have to do is to create a method for each nested table that generates and fills the nested table inside the main table‚Äôs cells.&lt;br&gt;
First, we need to create 2 methods that generate the 2 nested tables:&lt;br&gt;
//  notice that this method expects a TableCellBuilder parameter&lt;br&gt;&lt;br&gt;
private static void AddInnerTable1(TableCellBuilder cell)&lt;br&gt;
        {&lt;br&gt;
// let‚Äôs set the background of the first nested table to green&lt;br&gt;
            cell.AddTable().SetBackColor(Gehtsoft.PDFFlow.Models.Shared.Color.Green)&lt;br&gt;
// add two columns &lt;br&gt;
                    .AddColumnToTable().AddColumnToTable()&lt;br&gt;
// add the first row and the first cell with the text ‚ÄúName‚Äù&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("Name")&lt;br&gt;
// add the second cell and make it span 4 rows&lt;br&gt;
                        .AddCell("photo", 1, 4)&lt;br&gt;
                        .SetHorizontalAlignment(HorizontalAlignment.Center)&lt;br&gt;
                        .ToTable()&lt;br&gt;
//  add the other 3 rows and fill their cells with texts&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("Surname")&lt;br&gt;
                        .AddCell().ToTable()&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("State")&lt;br&gt;
                        .AddCell().ToTable()&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("City")&lt;br&gt;
                        .AddCell().ToTable();&lt;br&gt;
        }&lt;br&gt;&lt;br&gt;
// now we create the second method that generates the second nested table&lt;br&gt;
private static void AddInnerTable2(TableCellBuilder cell)&lt;br&gt;
        {&lt;br&gt;
// let‚Äôs set the background of the second nested table to yellow&lt;br&gt;
            cell.AddTable().SetBackColor(Gehtsoft.PDFFlow.Models.Shared.Color.Yellow)&lt;br&gt;
// add two columns &lt;br&gt;
                    .AddColumnToTable().AddColumnToTable()&lt;br&gt;
// add the first row and the first cell with the text ‚ÄúDepartment‚Äù&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("Department")&lt;br&gt;
// add the second cell to the first row and make it span 2 rows&lt;br&gt;
                        .AddCell("image", 1, 2)&lt;br&gt;
                        .SetHorizontalAlignment(HorizontalAlignment.Center)&lt;br&gt;
                        .ToTable()&lt;br&gt;
// add the second row&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("Structure")&lt;br&gt;
                        .AddCell().ToTable()&lt;br&gt;
// add the third row&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("Floor")&lt;br&gt;
// add the second cell to the third row and make it span 2 rows&lt;br&gt;
                        .AddCell("qrcode", 1, 2)&lt;br&gt;
                        .SetHorizontalAlignment(HorizontalAlignment.Center)&lt;br&gt;
                        .ToTable()&lt;br&gt;
// add the fourth row&lt;br&gt;
                    .AddRow()&lt;br&gt;
                        .AddCellToRow("Room")&lt;br&gt;
                        .AddCell().ToTable();&lt;br&gt;
        }&lt;/p&gt;

&lt;p&gt;// now what is left is to create the main table, with 2 columns and 3 rows,&lt;br&gt;
// in the main class and call our 2 methods&lt;br&gt;
// that will insert the two nested tables in the main table&lt;br&gt;
{&lt;br&gt;
            var table = DocumentBuilder.New()&lt;br&gt;
                .AddSection().AddTable().AddColumnToTable().AddColumnToTable()&lt;br&gt;
// here we create the first row with 2 cells with the  center alignment &lt;br&gt;
                        .AddRow().AddCellToRow("Personal info").SetHorizontalAlignment(HorizontalAlignment.Center)&lt;br&gt;
                        .AddCellToRow("Department info").SetHorizontalAlignment(HorizontalAlignment.Center).ToTable();&lt;br&gt;
// now the magic happens,&lt;br&gt;
// here we create the second row of the main table&lt;br&gt;
// and call our 2 methods to insert the two nested tables in the &lt;br&gt;
// first and second cells of the second row&lt;br&gt;
            var row2 = table.AddRow();&lt;br&gt;
            AddInnerTable1(row2.AddCell());&lt;br&gt;
            AddInnerTable2(row2.AddCell());&lt;br&gt;
//  add the third row to the main table and make it span 2 columns&lt;br&gt;
            table.AddRow().AddCellToRow("Signature",2,1)&lt;br&gt;
            .ToDocument().Build("Result.pdf");&lt;br&gt;
}&lt;br&gt;
The result should be similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jdvg5cYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rw53oqczuhutm5lt26k9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jdvg5cYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rw53oqczuhutm5lt26k9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôve covered the most important tips on how to layout documents using rowspans, colspans, and nested tables on simple and complex examples. &lt;br&gt;
Now you know when to use colspan, rowspan, and nested tables and can create PDF documents with complex layouts using the instructions of this tutorial.&lt;/p&gt;

&lt;p&gt;You can find more useful examples on generating PDF docs on GitHub here: &lt;a href="https://go.pdfflow.io/lib_example"&gt;https://go.pdfflow.io/lib_example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information about the PDFFlow library, check out the GS PDFFlow website: &lt;a href="https://go.pdfflow.io/library_home"&gt;https://go.pdfflow.io/library_home&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>
