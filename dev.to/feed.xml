<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Basic Concepts to Understand API, Web Services &amp; Microservices</title>
      <author>Priyanshi Sharma</author>
      <pubDate>Thu, 06 May 2021 09:35:27 +0000</pubDate>
      <link>https://dev.to/priyanshi_sharma/basic-concepts-to-understand-api-web-services-microservices-3g02</link>
      <guid>https://dev.to/priyanshi_sharma/basic-concepts-to-understand-api-web-services-microservices-3g02</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRcrjAQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17k2ni0t1t0sei32ov1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRcrjAQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17k2ni0t1t0sei32ov1i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers have been using three major building blocks for the development of web apps, namely, APIs, Web Services, and Microservices. Some people are still unaware of the basic concept, usability and working of three different concepts. So today’s article is entirely dedicated to the individuals who have heard about these terms but are confused about the purpose each has.&lt;/p&gt;

&lt;p&gt;Typically, a &lt;a href="https://www.decipherzone.com/blog-detail/The-process-of-web-application-development"&gt;web application&lt;/a&gt; operates with three major components, that are, services, gateway, and controller.&lt;/p&gt;

&lt;p&gt;Here, a gateway is a single entry point to the application. It is responsible for authentication, load balancing, monitoring, caching, static response handling and so on whenever a client-side wants to interact with the web application.&lt;/p&gt;

&lt;p&gt;While a controller is like a manager that manages incoming requests, decides which worker should do the work, divides the work into smaller tasks, passes that work off, orchestrates the work and sends it back to the client.&lt;/p&gt;

&lt;p&gt;The worker mentioned in the controller section is nonetheless the service that receives the request from the manager, figures out the algorithms or logic that will be used to complete the request, only responsible for the work allotted and returns the completed work to the manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fundamental-notions-to-know-before-understanding-api-web-services-amp-microservices"&gt;
  &lt;/a&gt;
  Fundamental Notions to Know Before Understanding API, Web Services &amp;amp; Microservices
&lt;/h2&gt;

&lt;p&gt;Before we move ahead to understand these three terms, it will be helpful to acknowledge the components web applications have and how they work.&lt;/p&gt;

&lt;p&gt;Now let’s assume you are developing a &lt;a href="https://www.decipherzone.com/blog-detail/The-process-of-web-application-development"&gt;web application&lt;/a&gt; for shopping and for that you will need to add a product description page that will not only display the information related to the given product but also display a lot of other information including order history, customer reviews &amp;amp; ratings, low inventory warning, number of items in the cart, shipping options, other products recommendations and alternatives to the current product.&lt;/p&gt;

&lt;p&gt;While in the monolithic web app, a client would retrieve this data through a REST call to the application that will trigger a load balancer to route the request to the identical instances of the application that would query numerous databases and then return the response.&lt;/p&gt;

&lt;p&gt;On the other hand, in the application using &lt;a href="https://www.decipherzone.com/blog-detail/why-microservices-architecture"&gt;microservices architecture&lt;/a&gt;, the data displayed on the product page is owned by different microservices. Some of the microservices that own data of the project page are: Shopping Cart Service, Order Service, Catalog Service, Inventory Service, Shipping Service, Review Service, and Recommendation Service(s).&lt;/p&gt;

&lt;p&gt;Now with a clear understanding of how an application works, it’s time to get into the details of APIs, web services and Microservices so that you can clearly know the meaning of these terms that will come ahead and relate to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-vs-web-services-vs-microservices"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.decipherzone.com/blog-detail/api-vs-web-services-vs-microservices"&gt;API VS Web Services VS Microservices&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-apis"&gt;
  &lt;/a&gt;
  What are APIs?
&lt;/h3&gt;

&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/API"&gt;API&lt;/a&gt; (Application Programming Interface) is a communication channel between services and applications. It can be used to call single or multiple services depending upon the architecture of the application. It is a secure way to request and share information, services, and functionalities within both internal and external users.&lt;/p&gt;

&lt;p&gt;Simply put, an &lt;a href="https://www.decipherzone.com/blog-detail/What-is-an-API-and-How-it-works-"&gt;API&lt;/a&gt; is a messenger that takes a request and tells the system what the user wants to do and then returns the response. It is a method of communication between a requester and a host that is mostly accessible through an IP address. It can communicate multiple information to the user, like, data that needs to be shared and the function that needs to be provided.&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://www.decipherzone.com/blog-detail/api-testing-types-benefits"&gt;API&lt;/a&gt; enables the application to communicate with other services or applications without having the knowledge of their implementation. It simplifies the app development process while saving both time and money. APIs are a simplified manner to connect an application infrastructure via &lt;a href="https://www.decipherzone.com/blog-detail/oracle-cloud-vs-aws"&gt;cloud&lt;/a&gt;-native development and also allows sharing of data with customers or other external users.&lt;/p&gt;

&lt;p&gt;In short, it opens up access to the resources while maintaining control and security. API security is all about API management that includes the use of an API Gateway. They are of three types: private, public and partner. Where private is only used internally in the organization, public API enables third parties to build an app that interacts with the API of your &lt;a href="https://www.decipherzone.com/on-demand-solutions"&gt;application&lt;/a&gt;, and the partner API is shared with certain business partners to gain additional revenue streams without risking quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-web-services"&gt;
  &lt;/a&gt;
  What are Web Services?
&lt;/h3&gt;

&lt;p&gt;Web services are client &amp;amp; server applications that interact over the World Wide Web’s HyperText Transfer Protocol (HTTP). As outlined by the World Wide Web Consortium (W3C), web services give a standard means of interoperating between &lt;a href="https://www.decipherzone.com/blog-detail/top-10-software-vulnerabilities"&gt;software applications&lt;/a&gt; operating on a variety of platforms and &lt;a href="https://www.decipherzone.com/blog-detail/top-10-best-backend-frameworks-for-web-development-in-2020"&gt;frameworks&lt;/a&gt;. Web services are portrayed by their great extensibility and interoperability, as well as their machine-processable descriptions, thanks to the use of XML. Web services can be combined in a loosely coupled method to perform complex operations.&lt;/p&gt;

&lt;p&gt;A web service architecture consists of three distinct roles, that is, provider, requester, or broker. Here a provider informs the broker/service registry about the presence of the web service through the broker’s public interface that makes service accessible to clients and the requestor binds and invokes the services. It is a lightweight &lt;a href="https://www.decipherzone.com/blog-detail/soa-vs-microservices"&gt;service-oriented architecture&lt;/a&gt; that supports interoperability.&lt;/p&gt;

&lt;p&gt;Simply put, web services are XML-centered data exchange systems that utilize the internet for application-to-application communication and interfacing. A client can call a web service by sending a request via XML and the service then provides an XML response as well.&lt;br&gt;
A web service comprises of these functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Availability over intranet and internet networks &lt;/li&gt;
&lt;li&gt; Independence of programming languages and operating systems &lt;/li&gt;
&lt;li&gt; Self-describing via XML &lt;/li&gt;
&lt;li&gt; Identifiable via a simple location method &lt;/li&gt;
&lt;li&gt; Supports communication between apps with HTML, SOAP, WSDL, and XML. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, XML tags data, SOAP transfers the message and WSDL describes the accessibility of service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-microservices"&gt;
  &lt;/a&gt;
  What are Microservices?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://microservices.io/"&gt;Microservices&lt;/a&gt; is an architectural style that structures an application as a collection of services that are loosely coupled, highly maintainable &amp;amp; testable, independently deployable, organized around business capabilities, and are owned by a small team of developers. It supports the frequent, agile, and reliable delivery of complex, large applications.&lt;/p&gt;

&lt;p&gt;Where in the &lt;a href="https://www.decipherzone.com/blog-detail/service-oriented-architecture"&gt;SOA architecture&lt;/a&gt;, if we had to create a search function, it has to be deployed on a single server where other functions are also residing. The failure of the search service due to any reason can take down the entire application. Whereas, in &lt;a href="https://www.decipherzone.com/blog-detail/microservices-vs-api"&gt;microservices&lt;/a&gt;, all the functions are split into the granular level and each service is deployed on a different server making the service independent of each other. That is, the failure of one or more functions will not affect other parts of the web application. Microservice also offers improved fault tolerance due to its small service constitution.&lt;/p&gt;

&lt;p&gt;When a change is needed in a certain part of the application, only the related service is modified and deployed without disturbing the functionality of an entire application. It gives the developers the independence to develop and deploy services independently while using an ideal programming language for service and another language or framework for a different function. It is easier to scale and integrate with third-party services.&lt;/p&gt;

&lt;p&gt;With a clear understanding of APIs, Web Services and Microservices, it can be said that there is nothing to compare among the three. While APIs and Webs Services are the communication interface for different architecture styles, microservices is a distinctive method to develop software systems that have well-defined interfaces and operability.&lt;/p&gt;

&lt;p&gt;And if you are a business owner who wants to develop an application that is based on either of these services and architecture, then you can &lt;a href="https://www.decipherzone.com/hire-developer"&gt;hire developers&lt;/a&gt; who have relevant experience and expertise in the same field.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.decipherzone.com/blog"&gt;Decipher&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>python</category>
    </item>
    <item>
      <title>React JSON Schema Form</title>
      <author>Valerii Udodov</author>
      <pubDate>Thu, 06 May 2021 09:31:33 +0000</pubDate>
      <link>https://dev.to/vudodov/react-json-schema-form-39da</link>
      <guid>https://dev.to/vudodov/react-json-schema-form-39da</guid>
      <description>&lt;p&gt;Today, I'd like to share with you one of the items from my tools-belt, which I'm successfully using for years now. It is simply a react component. It is a form. But not just a form, it is a form that allows anyone independently of their React or HTML knowledge to build a sophisticated feature-rich form based on any arbitrary expected data in a consistent manner.&lt;/p&gt;

&lt;p&gt;Behold, the React JSON Schema Form, or simply RJSF. Originally started and built as an Open Source project by the Mozilla team. Evolved into a separate independent project.&lt;/p&gt;

&lt;p&gt;Out of the box, RJSF provides us with rich customization of different form levels, extensibility, and data validation. We will talk about each aspect separately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#json-schema"&gt;
  &lt;/a&gt;
  JSON Schema
&lt;/h3&gt;

&lt;p&gt;The end goal of any web form is to capture &lt;em&gt;expected&lt;/em&gt; user input. The RJSF will capture the data as a JSON object. Before capturing &lt;em&gt;expected&lt;/em&gt; data we need to define how the data will look like. The rest RJSF will do for us. To define and annotate the data we will use another JSON object. Bear with me here... &lt;br&gt;
We will be defining the shape (or the schema) of the JSON object (the data) with another JSON object. The JSON object that defines the schema for another JSON object is called -&lt;em&gt;drumroll&lt;/em&gt;- JSON Schema and follows the convention described in the JSON Schema standard.&lt;/p&gt;

&lt;p&gt;To make things clear, we have two JSON objects so far. One representing the data we are interested in, another representing the schema of the data we are interested in. The last one will help RJSF to decide which input to set for each data attribute.&lt;/p&gt;



&lt;p&gt;A while ago &lt;a href="https://dev.to/posts/making-strongly-typed-language-a-bit-more-loose-with-json-schema/#the-jsonschema"&gt;in one of my previous articles&lt;/a&gt; I've touched base on the JSON Schema.&lt;/p&gt;

&lt;p&gt;I'm not going to repeat myself, I'll just distill to what I think is the most valuable aspect of it.&lt;br&gt;
JSON Schema allows us to capture changing data and keep it &lt;strong&gt;meaningful&lt;/strong&gt;. Think of arbitrary address data in the international application. Address differs from country to country, but the ultimate value doesn't. It represents a point in the world that is described with different notations. Hence even though the address format in the USA, Spain, Australia, or China is absolutely different, the ultimate value -from an application perspective- is the same-- a point on the Globe. It well might be employee home address, parcel destination or anything else and notation does not change this fact.&lt;/p&gt;



&lt;p&gt;So if we want to capture, let's say, the first and last name and telephone number of a person. The expected data JSON object will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Chuck"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Norris"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"telephone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"123 456 789"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the JSON Schema object to define the shape of the data object above will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A person information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A simple person data."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"First name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Last name"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"telephone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Telephone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minLength"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Something to keep in mind.&lt;br&gt;
JSON Schema is following a permissive model. Meaning out of the box everything is allowed. The more details you specify, the more restrictions you put in place. So it is worth sometimes religiously define the expected data.&lt;/p&gt;



&lt;p&gt;This is the bare minimum we need to start. Let's look at how the JSON Schema from the above will look like as a form. Just before let's also look at the code...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rjsf/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yup, that's it, now let's check out the form itself&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6MclfJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eg62ok1rljqtlzepnxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6MclfJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eg62ok1rljqtlzepnxi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui-schema"&gt;
  &lt;/a&gt;
  UI Schema
&lt;/h3&gt;

&lt;p&gt;Out of the box, the RJSF makes a judgment on how to render one field or another. Using JSON Schema you primarily control &lt;em&gt;what&lt;/em&gt; to render, but using &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/api-reference/uiSchema/#uischema"&gt;UI Schema&lt;/a&gt; you can control &lt;em&gt;how&lt;/em&gt; to render.&lt;/p&gt;

&lt;p&gt;UI Schema is yet another JSON that follows the tree structure of the JSON data, hence form. It has quite some stuff out of the box.&lt;/p&gt;

&lt;p&gt;You can be as granular as picking a color for a particular input or as generic as defining a template for all fields for a &lt;code&gt;string&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Let's try to do something with our demo form and say disable the first name and add help text for the phone number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ui:disabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"telephone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ui:help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The phone number that can be used to contact you"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's tweak our component a bit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rjsf/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; 
        &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;uiSchema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;uiSchema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the final look&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hqi1Ci02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1htjlp1kbh6uude1b14o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hqi1Ci02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1htjlp1kbh6uude1b14o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice and easy. There's a lot of built-in configurations that are ready to be used, but if nothing suits your needs, you can build your own...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The API allows to specify your own custom widget and field components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;widget&lt;/em&gt; represents a HTML tag for the user to enter data, eg. input, select, etc.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;field&lt;/em&gt; usually wraps one or more widgets and most often handles internal field state; think of a field as a form row, including the labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-- &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/advanced-customization/custom-widgets-fields/"&gt;RJSF Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another way to think of it is &lt;em&gt;field&lt;/em&gt; includes label and other stuff around, while &lt;em&gt;widget&lt;/em&gt; only the interaction component or simply input.&lt;/p&gt;

&lt;p&gt;For the sake of example let's create a simple text &lt;em&gt;widget&lt;/em&gt; that will make the input red and put a dash sign (-) after every character.&lt;/p&gt;

&lt;p&gt;To keep things light and simple let's imagine that the whole form will be a single red field. The JSON Schema will look as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mad Field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Forgot to say that widgets are just components, that will be mounted in and will receive a standard set of &lt;code&gt;props&lt;/code&gt;. No limits, just your imagination ;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MadTextWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"custom"&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to register the widget so that we can use it in the UI Schema&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;madTextWidget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MadTextWidget&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can define the UI Schema&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uiSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ui:widget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;madTextWidget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the full code with the RJSF&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mad Field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MadTextWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"custom"&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;madTextWidget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MadTextWidget&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uiSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ui:widget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;madTextWidget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;uiSchema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;uiSchema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; 
        &lt;span class="na"&gt;widgets&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;widgets&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9r35AmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9otdcy4sghzv8ngunz8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9r35AmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9otdcy4sghzv8ngunz8q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;a href="https://codepen.io/vudodov/pen/LYWPKPa"&gt;try it yourself&lt;/a&gt;. The field will be pretty similar but will have a wider impact area so to speak. As been said the field will include labels and everything around the input itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/advanced-customization/custom-templates/"&gt;Custom templates&lt;/a&gt; allows you to re-define the layout for certain data types (simple field, array or object) on the form level.&lt;/p&gt;

&lt;p&gt;Finally, you can build your own &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/advanced-customization/custom-themes/"&gt;Theme&lt;/a&gt; which will contain all your custom widgets, fields, template other properties available for a &lt;code&gt;Form&lt;/code&gt; component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;p&gt;As was mentioned before the JSON Schema defines the shape of the JSON data that we hope to capture with the form. JSON Schema allows us to define the shape fairly precisely. We can tune the definition beyond the expected type, e.g. we can define a length of the string or an email regexp or a top boundary for a numeric value and so forth.&lt;/p&gt;

&lt;p&gt;Check out this example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSONSchemaForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;minLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;liveValidate&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will end up looking like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXxjKhkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9mqrpqkriq27ann4b1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXxjKhkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9mqrpqkriq27ann4b1a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, we can &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/usage/validation/"&gt;re-define messages&lt;/a&gt;, configure when, where, and how to show the error messages.&lt;/p&gt;

&lt;p&gt;Out of the box our data will be validated against the JSON Schema using the &lt;a href="https://github.com/ajv-validator/ajv"&gt;(Ajv) A JSON Schema validator library&lt;/a&gt;. However, if we want to, we can implement our own custom validation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;Dependencies allow us to add some action to the form. We can dynamically change form depending on the user input. Basically, we can request extra information depending on what the user enters.&lt;/p&gt;




&lt;p&gt;Before we will get into dependencies, we need to get ourselves familiar with &lt;a href="https://json-schema.org/understanding-json-schema/reference/combining.html"&gt;dynamic schema permutation&lt;/a&gt;. Don't worry, it is easier than it sounds. We just need to know what four key-words mean&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;allOf&lt;/code&gt;: Must be valid against all of the subschemas&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;anyOf&lt;/code&gt;: Must be valid against any of the subschemas&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;oneOf&lt;/code&gt;: Must be valid against exactly one of the subschemas&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not&lt;/code&gt;: Must not be valid against the given schema
___&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although dependencies have been removed in the latest JSON Schema standard versions, RJSF still supports it. Hence you can use it, there are no plans for it to be removed so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#property-dependencies"&gt;
  &lt;/a&gt;
  Property dependencies
&lt;/h3&gt;

&lt;p&gt;We may define that if one piece of the data has been filled, the other piece becomes mandatory. There are two ways to define this sort of relationship: unidirectional and bidirectional. Unidirectional as you might guess from the name will work in one direction. Bidirectional will work in both, so no matter which piece of data you fill in, the other will be required as well.&lt;/p&gt;

&lt;p&gt;Let's try to use bidirectional dependency to define address in the shape of coordinates. The dependency will state that if one of the coordinates has been filled, the other one has to be filled in either. But if none is filled, none is required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Longitude and Latitude Values"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A geographical coordinate."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minimum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"maximum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minimum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"maximum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"longitude"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"latitude"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"additionalProperties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See lines 17 to 24. That's all there is to it, really. Once we will pass this schema to the form, we will see the following (watch for an asterisk (*) near the label, it indicates whether the field is mandatory or not).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24olAqv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfg8sairbbo2fqvceww.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24olAqv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfg8sairbbo2fqvceww.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schema-dependencies"&gt;
  &lt;/a&gt;
  Schema dependencies
&lt;/h3&gt;

&lt;p&gt;This one is more entertaining, we can actually control visibility through the dependencies. Let's follow up on the previous example and for the sake of the example show longitude only if latitude is filled in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Longitude and Latitude Values"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A geographical coordinate."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minimum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"maximum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"minimum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"maximum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"additionalProperties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No code changes are required, just a small dependency configuration tweak (lines 12 to 22).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AlwtuuRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j7hbqr7ous2z83bpf40.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AlwtuuRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j7hbqr7ous2z83bpf40.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-schema-dependencies"&gt;
  &lt;/a&gt;
  Dynamic schema dependencies
&lt;/h3&gt;

&lt;p&gt;So far so good, pretty straightforward. We input the data, we change the expected data requirements. But we can go one step further and have multiple requirements. Not only based on whether the data is presented or not but on the value of presented data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BkwfNk7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dekjle6kfv45joidff30.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BkwfNk7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dekjle6kfv45joidff30.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again, no code, only JSON Schema modification&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"enum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"One"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"Two"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"required"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"oneOf"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"enum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"enum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"One"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"First input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"enum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"Two"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"First input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Second input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom line
&lt;/h2&gt;

&lt;p&gt;Even though we went through some major concepts and features, we are far away from covering everything that RJSF empowers us to do.&lt;/p&gt;

&lt;p&gt;I'd encourage you to check out &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/"&gt;official documentation&lt;/a&gt; for more insights and examples, &lt;a href="https://github.com/rjsf-team/react-jsonschema-form"&gt;GitHub repository&lt;/a&gt; for undocumented goodies and &lt;a href="https://rjsf-team.github.io/react-jsonschema-form/"&gt;live playground&lt;/a&gt; to get your hands dirty. Finally, worth mentioning that the Open Source community keeps things going, so look outside these resources, there are quite a few good things over there.&lt;/p&gt;

&lt;p&gt;RJSF is a ridiculously powerful thing if you need to customize and capture meaningful data. Enjoy!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>rjsf</category>
      <category>jsonschema</category>
    </item>
    <item>
      <title>Have someone ever made a profit from your idea?</title>
      <author>Madza</author>
      <pubDate>Thu, 06 May 2021 09:29:50 +0000</pubDate>
      <link>https://dev.to/madza/have-someone-ever-made-a-profit-from-your-idea-12a</link>
      <guid>https://dev.to/madza/have-someone-ever-made-a-profit-from-your-idea-12a</guid>
      <description>&lt;p&gt;Have you ever experienced someone taking your project idea, a part of your code that was not licensed for profit, your original blog article or other intellectual property, and made a profit out of it? &lt;/p&gt;

&lt;p&gt;Would love to hear your stories!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>business</category>
      <category>startup</category>
    </item>
    <item>
      <title>Building a Discord bot with Azure Logic Apps</title>
      <author>Rick van den Bosch</author>
      <pubDate>Thu, 06 May 2021 09:26:16 +0000</pubDate>
      <link>https://dev.to/rickvdbosch/building-a-discord-bot-with-azure-logic-apps-51lp</link>
      <guid>https://dev.to/rickvdbosch/building-a-discord-bot-with-azure-logic-apps-51lp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-betatalks-discord"&gt;
  &lt;/a&gt;
  The Betatalks Discord
&lt;/h2&gt;

&lt;p&gt;A few months ago we've started a &lt;a href="https://discord.gg/KTkCXQTgjR"&gt;Betatalks Discord server&lt;/a&gt; to build a community and enable our friends to&lt;br&gt;
discuss all the Betatalks content we put out there. Think about the&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLCLCtgDNNiJR_LDx6RT8X50VrKAH3_49B"&gt;Betatalks videos&lt;/a&gt; on YouTube, Betatalks &lt;em&gt;live&lt;/em&gt; events and the&lt;br&gt;
most recent addition: &lt;a href="https://podcast.betatalks.nl/"&gt;Betatalks the podcast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To notify the corresponding Discord channels about new Betatalks videos or Betatalks the podcast episodes, I created Azure Logic Apps to&lt;br&gt;
check for new additions and post them to the webhook. Here's how I built that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-discord-webhook"&gt;
  &lt;/a&gt;
  Creating a Discord webhook
&lt;/h2&gt;

&lt;p&gt;As Discord describes it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Webhooks are a simple way to post messages from other apps and websites into Discord using internet magic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you create a Discord webhook you give it a name (1), select the channel the webhook posts to (2) and you optionally upload an avatar&lt;br&gt;
for the webhook (3). Once you've done all that save your changes, copy the webhook URL (4) and you should be good to go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HT3crWBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-01.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HT3crWBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-01.webp" alt="Creating a Discord webhook"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#calling-discord-webhooks"&gt;
  &lt;/a&gt;
  Calling Discord webhooks
&lt;/h2&gt;

&lt;p&gt;The most basic form of calling a Discord webhook only needs either a message (in the &lt;code&gt;content&lt;/code&gt; property), file contents (in the &lt;code&gt;file&lt;/code&gt;&lt;br&gt;
property) or an array of up to 10 embed objects (in the &lt;code&gt;embeds&lt;/code&gt; property). This means a most basic, valid payload for a Discord webhook&lt;br&gt;
looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello world!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information on the Discord webhook payload can be found in the&lt;br&gt;
&lt;a href="https://discord.com/developers/docs/resources/webhook#execute-webhook"&gt;Discord developer portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since calling the webhook is as easy as posting an HTTP request to an URL, you can easily test the content you're building using tools like&lt;br&gt;
&lt;a href="https://www.postman.com"&gt;Postman&lt;/a&gt;, &lt;a href="https://hoppscotch.io/"&gt;hoppscoth.io&lt;/a&gt; or Visual Studio Code using the&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"&gt;REST Client&lt;/a&gt; extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-logic-app"&gt;
  &lt;/a&gt;
  Building the Logic App
&lt;/h2&gt;

&lt;p&gt;The podcast bot uses the RSS feed to determine if there are new episodes and calls the webhook. The YouTube one uses a&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/connectors/apis-list"&gt;connector&lt;/a&gt; to YouTube. We'll use the latter as the example in this post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#triggering-the-workflow"&gt;
  &lt;/a&gt;
  Triggering the workflow
&lt;/h3&gt;

&lt;p&gt;The selected trigger for the Logic App is YouTube's "When a video is uploaded by a channel". This enables you to select any of the channels&lt;br&gt;
you've subscribed to on YouTube. You can configure how often the Logic App needs to check for new items and then the triggering part of the&lt;br&gt;
Logic App is done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru9m9xtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-02.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru9m9xtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-02.webp" alt="Triggering the workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-one-condition"&gt;
  &lt;/a&gt;
  On one condition
&lt;/h3&gt;

&lt;p&gt;The workflow should run on one condition. Or two actually, but they can be seen as one 😁. We only want to post content to the webhook if&lt;br&gt;
the title of the video contains the term &lt;em&gt;Betatalks&lt;/em&gt; but does not contain &lt;em&gt;podcast&lt;/em&gt;. To do this, we add a Condition-action to our workflow.&lt;br&gt;
We &lt;code&gt;toLower&lt;/code&gt; the video's title and check the conditions we just specified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xETDqWSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-03.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xETDqWSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-03.webp" alt="Checking the condition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calling-the-webhook"&gt;
  &lt;/a&gt;
  Calling the webhook
&lt;/h3&gt;

&lt;p&gt;Now that we've defined our trigger and checked our conditions, we can configure calling the webhook. To do so we add an HTTP action. We&lt;br&gt;
configure it to do a &lt;code&gt;POST&lt;/code&gt; to the webhook endpoint with a body we configure based on dynamic content from the trigger. As we saw in the&lt;br&gt;
example earlier we can create a json payload with a &lt;code&gt;content&lt;/code&gt; property to hold the message we want to send.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WMbl-qkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-04.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMbl-qkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-04.webp" alt="Posting the information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! To see the resulting messages yourself, check our &lt;a href="https://discord.gg/KTkCXQTgjR"&gt;Betatalks Discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope this helps!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>discord</category>
      <category>logicapps</category>
      <category>youtube</category>
    </item>
    <item>
      <title>Bootstrap 5 is out</title>
      <author>MD Bootstrap</author>
      <pubDate>Thu, 06 May 2021 09:21:23 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/bootstrap-5-is-out-4j6m</link>
      <guid>https://dev.to/mdbootstrap/bootstrap-5-is-out-4j6m</guid>
      <description>&lt;p&gt;Bootstrap 5 is finally out - this time for real.&lt;/p&gt;

&lt;p&gt;STABLE - means that a technology is ready to use in production environments. Unlike an alpha or beta version.&lt;/p&gt;

&lt;p&gt;Bootstrap 5 is now stable.&lt;/p&gt;

&lt;p&gt;The fifth version is superior to the previous ones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jQuery is removed&lt;/li&gt;
&lt;li&gt;plain Vanilla JavaScript is now the base&lt;/li&gt;
&lt;li&gt;RTL (right to left) support is added&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We discuss these crucial changes as well as many others in our extensive 📖 1.5H crash course on the latest Bootstrap 5.&lt;/p&gt;

&lt;p&gt;We invite you to watch &amp;amp; share our tutorial with your community.&lt;br&gt;
Frontend industry has to make a switch to v5 - the sooner the better.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rQryOSyfXmI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Do you start with frontend, backend, or both?</title>
      <author>Madza</author>
      <pubDate>Thu, 06 May 2021 08:51:26 +0000</pubDate>
      <link>https://dev.to/madza/do-you-start-with-frontend-backend-or-both-442l</link>
      <guid>https://dev.to/madza/do-you-start-with-frontend-backend-or-both-442l</guid>
      <description>&lt;p&gt;When it comes to developing full-stack apps, what is the preferred sequence of your workflow?&lt;/p&gt;

&lt;p&gt;Do you normally start with design and user interface or all the server stuff and databases? Or do you like to do both simultaneously? &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>coding</category>
    </item>
    <item>
      <title>Build a LinkedIn Clone Using just HTML &amp; CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Thu, 06 May 2021 07:44:35 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/build-a-linkedin-clone-using-just-html-css-3p1n</link>
      <guid>https://dev.to/somanathgoudar/build-a-linkedin-clone-using-just-html-css-3p1n</guid>
      <description>&lt;p&gt;I Built LinkedIn Clone using just HTML &amp;amp; CSS. I Just Love to build these to practice my HTML &amp;amp; CSS Skills. I made a tutorial video to help beginners to improve there html &amp;amp; css skills to build real world projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorial Video:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RnN6r0fTbvQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href="https://github.com/somanath-goudar/html-css-projects"&gt;https://github.com/somanath-goudar/html-css-projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you want to improve your HTML &amp;amp; CSS skills? Then Watch this video and follow along with me where we build LinkedIn Clone using just HTML &amp;amp; CSS. We will be using flexbox and Google font Icons in this project.&lt;/p&gt;

&lt;p&gt;Hope You Guys Enjoyed the Video. Like Share Comment and Subscribe to my channel for more videos like these.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel:&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA&lt;/a&gt;&lt;br&gt;
Subscribe to My YouTube Channel, Next Week I Will be building &lt;strong&gt;Tiktok Clone&lt;/strong&gt; &amp;amp; &lt;strong&gt;Instagram Reels Clone&lt;/strong&gt; with just HTML &amp;amp; CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You may also like my other posts:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-a-youtube-clone-with-just-html-css-for-complete-beginners-4fk1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a YouTube Clone with just HTML &amp;amp; CSS + Responsive - For  Beginners&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ Mar 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-a-password-generator-with-react-js-react-toastify-beginners-tutorial-4a9n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build A Password Generator with React JS - react-toastify - Beginners Tutorial&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ Mar 23 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>html</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 HTML5 tags you did not hear about</title>
      <author>Shiva Bhusal</author>
      <pubDate>Thu, 06 May 2021 07:37:51 +0000</pubDate>
      <link>https://dev.to/shivabhusal/5-html5-tags-you-did-not-hear-about-k3n</link>
      <guid>https://dev.to/shivabhusal/5-html5-tags-you-did-not-hear-about-k3n</guid>
      <description>&lt;p&gt;Generally, programmers and Front End Engineers consider HTML a relatively easier language to learn. Yes, it is easier because you don't have to memorize thousands of language constructs and syntax. However, there are a few tags that are used very rarely which I am going to uncover today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ltbasegt"&gt;
  &lt;/a&gt;
  1. &amp;lt;base&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Specifies the base URL and/or target for the relative URLs on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://ohmycheatsheet.com/images/"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"demo2x2.jpg"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"104"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"puzzle cube"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/html/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML Code&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-ltinsgt"&gt;
  &lt;/a&gt;
  2. &amp;lt;ins&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Text that has been inserted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The Rubik's Cube World Record is 
&lt;span class="nt"&gt;&amp;lt;del&amp;gt;&lt;/span&gt;4.90&lt;span class="nt"&gt;&amp;lt;/del&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;ins&amp;gt;&lt;/span&gt;4.73&lt;span class="nt"&gt;&amp;lt;/ins&amp;gt;&lt;/span&gt; seconds.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-ltparamgt"&gt;
  &lt;/a&gt;
  3. &amp;lt;param&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Parameter for an object element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;data=&lt;/span&gt;&lt;span class="s"&gt;"sound.mp3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"autoplay"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-ltkbdgt"&gt;
  &lt;/a&gt;
  4. &amp;lt;kbd&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Keyboard input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Normal text and &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;Keyboard input&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-ltkeygengt"&gt;
  &lt;/a&gt;
  5. &amp;lt;keygen&amp;gt;
&lt;/h2&gt;

&lt;p&gt;A Keypair generator field for forms. Not recommended to use because it's not supported in IE/Edge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/action.php"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Name: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Encryption: &lt;span class="nt"&gt;&amp;lt;keygen&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"encript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;See &lt;a href="https://ohmycheatsheet.com/html-cheat-sheet/"&gt;https://ohmycheatsheet.com/html-cheat-sheet/&lt;/a&gt; for more.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>cheat</category>
    </item>
    <item>
      <title>Important Tools For WebDeveloper</title>
      <author>Buddhadeb Chhetri</author>
      <pubDate>Thu, 06 May 2021 07:32:21 +0000</pubDate>
      <link>https://dev.to/buddhadebchhetri/important-tools-for-webdeveloper-1icf</link>
      <guid>https://dev.to/buddhadebchhetri/important-tools-for-webdeveloper-1icf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#an-ultimate-list-of-resources-for-web-developers"&gt;
  &lt;/a&gt;
  An ultimate list of resources for Web developers.
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Top 5 must use tools&lt;/strong&gt; &lt;br&gt;
1)Royalty-free Images, Videos and Illustration&lt;br&gt;
2)Icons and Fonts&lt;br&gt;
3)UI Design Tools&lt;br&gt;
4)Design ideas&lt;br&gt;
5)Learning Platform&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-royaltyfree-images-videos-and-illustration"&gt;
  &lt;/a&gt;
  1). Royalty-Free Images, Videos and Illustration
&lt;/h3&gt;

&lt;p&gt;Some Website You can get  Royalty-Free Images, Videos and illustrations that you can use for your landing pages and background images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iunsplash"&gt;
  &lt;/a&gt;
  i)&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UX96ujFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyvw8x5hx02d7l9xumd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UX96ujFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyvw8x5hx02d7l9xumd0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iipexels"&gt;
  &lt;/a&gt;
  ii)&lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJi0UmUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j75j38wus171x4nrkwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJi0UmUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j75j38wus171x4nrkwa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iiiundraw"&gt;
  &lt;/a&gt;
  iii)&lt;a href="https://undraw.co/illustrations"&gt;unDraw&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwR9MKYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp3xeo36q6w94532yobt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwR9MKYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp3xeo36q6w94532yobt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ivcoverr"&gt;
  &lt;/a&gt;
  iv)&lt;a href="https://coverr.co/"&gt;Coverr&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#its-mainly-use-for-slowmotion-videos"&gt;
  &lt;/a&gt;
  It's mainly  use for slow-motion Videos
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wo4cD8gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97scvrskknrw2adrfv8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wo4cD8gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97scvrskknrw2adrfv8o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-icons-and-fonts"&gt;
  &lt;/a&gt;
  2). Icons and Fonts
&lt;/h3&gt;

&lt;p&gt;Some Website You can get   Free Vector Icons and Fonts that you can use for your Websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iflaticon"&gt;
  &lt;/a&gt;
  i)&lt;a href="https://www.flaticon.com/"&gt;Flaticon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_x2vxitr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38ih2r5exsrjz0qz7hj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_x2vxitr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38ih2r5exsrjz0qz7hj3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iianimated-icons"&gt;
  &lt;/a&gt;
  ii)&lt;a href="https://icons8.com/animated-icons"&gt;Animated icons&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8BuCTI54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p0rtxs1eea75fyratjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8BuCTI54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p0rtxs1eea75fyratjs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iiifont-awesome"&gt;
  &lt;/a&gt;
  iii)&lt;a href="https://fontawesome.com/"&gt;Font Awesome&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0XKFVkNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdii10xhjz5rtl9o65hb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0XKFVkNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdii10xhjz5rtl9o65hb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ivgoogle-fonts"&gt;
  &lt;/a&gt;
  iv)&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dGmfIgQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxqpaumqv823try69o32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGmfIgQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxqpaumqv823try69o32.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3ui-design-tool"&gt;
  &lt;/a&gt;
  3).UI Design Tool
&lt;/h3&gt;

&lt;p&gt;Some Free, Online UI Design Tool For Developers &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ifigma"&gt;
  &lt;/a&gt;
  i)&lt;a href="https://www.figma.com/ui-design-tool/"&gt;Figma&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpVBK6_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wue1c9zzz3an5sz5w7pg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpVBK6_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wue1c9zzz3an5sz5w7pg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iizeplin"&gt;
  &lt;/a&gt;
  ii)&lt;a href="https://zeplin.io/"&gt;Zeplin&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fB42BDsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9uzsc0a1a6wy5ztgiuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fB42BDsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9uzsc0a1a6wy5ztgiuy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iiiadobe-xd"&gt;
  &lt;/a&gt;
  iii)&lt;a href="https://www.adobe.com/in/products/xd.html"&gt;Adobe XD&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4csc7VYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq3eutku1vbwxuakoymn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4csc7VYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq3eutku1vbwxuakoymn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4design-ideas"&gt;
  &lt;/a&gt;
  4).Design ideas
&lt;/h3&gt;

&lt;p&gt;Best Tranding  Web Designs that will help you to get your ideas &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iawwwards"&gt;
  &lt;/a&gt;
  i)&lt;a href="https://www.awwwards.com/"&gt;Awwwards&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJ9BTwI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejdq2u7bno2mqn6jk1xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJ9BTwI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejdq2u7bno2mqn6jk1xd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iidribbble"&gt;
  &lt;/a&gt;
  ii)&lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--foaEAfZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj9l4folk64pv0lg57jr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--foaEAfZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj9l4folk64pv0lg57jr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-learning-platform"&gt;
  &lt;/a&gt;
  5). Learning Platform
&lt;/h3&gt;

&lt;p&gt;Some online learning platform that offers free coding classes in programming languages including Python, Java, JavaScript, Ruby, SQL, C++, HTML, and CSS. Start with these free programming classes: Introduction to HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ifreecodecamp"&gt;
  &lt;/a&gt;
  i)&lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvkUegFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiwrxq99ibkd2x6hpp5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvkUegFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiwrxq99ibkd2x6hpp5k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iitheodinproject"&gt;
  &lt;/a&gt;
  ii)&lt;a href="https://www.theodinproject.com/"&gt;Theodinproject&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5_Lx64m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygdadl5sidrkthn12bcr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5_Lx64m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygdadl5sidrkthn12bcr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iiimemdev"&gt;
  &lt;/a&gt;
  iii)&lt;a href="https://mem.dev/"&gt;MeM.Dev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ptf5wkj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeokkjldh2bbxbq4ehk8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ptf5wkj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeokkjldh2bbxbq4ehk8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Understanding the Picture-in-Picture web API with examples</title>
      <author>Tapas Adhikary</author>
      <pubDate>Thu, 06 May 2021 07:30:07 +0000</pubDate>
      <link>https://dev.to/atapas/understanding-the-picture-in-picture-web-api-with-examples-362p</link>
      <guid>https://dev.to/atapas/understanding-the-picture-in-picture-web-api-with-examples-362p</guid>
      <description>&lt;p&gt;&lt;code&gt;Picture-in-Picture&lt;/code&gt; is a feature supported by some smart televisions, devices to show the content(like videos) on a floating window(on the top of other windows) so that users can continue to see the content while interacting with the background page, other sites.&lt;/p&gt;

&lt;p&gt;Have you noticed the mini-player option when you watch a video on Youtube? You can watch the video in the Picture-in-Picture-like mode while interacting with the other part of the application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rVCWtWkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620116387067/kqPOw_Eh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVCWtWkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620116387067/kqPOw_Eh5.png" alt="youtube_miniplayer.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1: Example of a Youtube video playing in the mini-player&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Google Chrome browser started supporting the &lt;code&gt;Picture-in-Picture&lt;/code&gt; mode. You can use &lt;a href="https://chrome.google.com/webstore/detail/picture-in-picture-extens/hkgfoiooedgoejojocmhlaklaeopbecg"&gt;this extension&lt;/a&gt; to enable it in the chrome browser. Once enabled, you can see it appearing beside the browser's address bar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DgWr0zG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620118256076/21DydHcLg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DgWr0zG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620118256076/21DydHcLg.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2: Picture-In-Picture extension for Chrome browser&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For Mozilla Firefox, you may have to enable it from the &lt;code&gt;about.config&lt;/code&gt; page by setting the &lt;code&gt;media.videocontrols.picture-in-picture.enabled&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOr-7vEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620118477979/V2ZCA3a6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOr-7vEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620118477979/V2ZCA3a6u.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 3: Enable picture-in-picture in the firefox browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#pictureinpicture-using-javascript"&gt;
  &lt;/a&gt;
  Picture-in-Picture using JavaScript
&lt;/h1&gt;

&lt;p&gt;JavaScript provides you the &lt;code&gt;Picture-in-Picture&lt;/code&gt; API to create and control the feature programmatically. Here goes the browser support information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google Chrome version &amp;gt;= 70&lt;/li&gt;
&lt;li&gt;Microsoft Edge version &amp;gt;= 79&lt;/li&gt;
&lt;li&gt;Safari version &amp;gt;= 13.1&lt;/li&gt;
&lt;li&gt;Mozilla Firefox: Partial(Conditional) Support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the other browser and device support details &lt;a href="https://caniuse.com/?search=picture-in-picture"&gt;from here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The picture-in-picture API methods are available in the &lt;code&gt;HTMLVideoElement(&amp;lt;video&amp;gt;)&lt;/code&gt; and &lt;code&gt;Document&lt;/code&gt; interfaces to allow users to toggle between the standard presentation and picture-in-picture modes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-browsers-support"&gt;
  &lt;/a&gt;
  Check Browser's Support
&lt;/h2&gt;

&lt;p&gt;We can check the browser's support for this API using the following code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pictureInPictureEnabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The picture-in-picture feature is supported&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Ther is no Support for the picture-in-picture feature&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pictureinpicture-mode-enter-and-exit"&gt;
  &lt;/a&gt;
  Picture-in-Picture Mode: Enter and Exit
&lt;/h2&gt;

&lt;p&gt;To enter into the &lt;code&gt;picture-in-picture&lt;/code&gt; mode, you can call the method &lt;code&gt;requestPictureInPicture()&lt;/code&gt; on the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element. When you call the method &lt;code&gt;exitPictureInPicture()&lt;/code&gt; on the &lt;code&gt;document&lt;/code&gt; object, the video exits from the picture-in-picture mode and enter the standard presentation mode.&lt;/p&gt;

&lt;p&gt;Let's add a simple video element in the HTML file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; 
   &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"path_to_video_file"&lt;/span&gt; 
   &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt; &lt;span class="na"&gt;muted&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt; &lt;span class="na"&gt;loop&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will add a button to toggle between the modes. Then, finally, add a click handler to call the &lt;code&gt;toggle()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
   &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"actionBtnId"&lt;/span&gt; 
   &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"action"&lt;/span&gt; 
   &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"toggle()"&lt;/span&gt; 
   &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     Enter Picture-in-Picture mode
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the JavaScript, we will define the &lt;code&gt;toggle()&lt;/code&gt; function as,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pictureInPictureElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitPictureInPicture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pictureInPictureEnabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPictureInPicture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we check if the picture-in-picture feature is enabled. If so, call the &lt;code&gt;requestPictureInPicture&lt;/code&gt; on the video element to get into the picture-in-picture mode. Once the picture-in-picture mode is enabled, the document object will have the &lt;code&gt;pictureInPictureElement&lt;/code&gt;. So, when the toggle function gets called next time, it checks the &lt;code&gt;pictureInPictureElement&lt;/code&gt;. If found, it exits from the picture-in-picture mode.&lt;/p&gt;

&lt;p&gt;Here is a &lt;code&gt;CodePen&lt;/code&gt; to see it as an example. Try clicking on the button below the video and see the video getting into the picture-in-picture mode. Click on the same button again to exit from the mode.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atapas/embed/abpKaBV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note: As explained before, to see the picture-picture feature working in the Mozilla Firefox browser, you have to enable it first. Once enabled, you can right-click on the video and select the option &lt;code&gt;Watch in Picture-in-Picture&lt;/code&gt;. &lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wy9VtuB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620127851689/kSZnTAmLW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wy9VtuB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620127851689/kSZnTAmLW.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pictureinpicture-api-events"&gt;
  &lt;/a&gt;
  Picture-in-Picture API Events
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Picture-in-Picture&lt;/code&gt; API defines three events.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;enterpictureinpicture&lt;/code&gt;: Triggers when a video element enters the picture-in-picture mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;leavepictureinpicture&lt;/code&gt;: Triggers when the video element exits the picture-in-picture mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resize&lt;/code&gt;: Triggers when the picture-in-picture windows resize.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These events can come in handy when you want to perform any custom actions based on a video enters or exit the picture-in-picture mode. Here is an example of changing a button text and color when a video toggles between the modes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;enterpictureinpicture&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;actionBtnId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Exit Picture-in-Picture mode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;actionBtnId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redBtn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;leavepictureinpicture&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;actionBtnId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter Picture-in-Picture mode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;actionBtnId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redBtn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You must have noticed it working in the code pen example we have seen above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pictureinpicture-api-properties"&gt;
  &lt;/a&gt;
  Picture-in-Picture API Properties
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Picture-in-Picture&lt;/code&gt; API provides properties in multiple JavaScript interfaces like, &lt;code&gt;HTMLVideoElement(&amp;lt;video&amp;gt;)&lt;/code&gt;, &lt;code&gt;Document&lt;/code&gt;, and &lt;code&gt;ShadowRoot&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;pictureInPictureEnabled&lt;/code&gt;: We have seen this property already. It tells us whether or not it is possible to engage in picture-in-picture mode.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pictureInPictureEnabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPictureInPicture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;autoPictureInPicture&lt;/code&gt;: It is a video element property that automatically enables a video to get into the picture-in-picture mode and exits when the user switches the tab/application. For example, right-click on the video in the CodePen below and enter into the picture-in-picture mode. Then switch tabs and come back to the same pen to see it exiting automatically.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atapas/embed/wvJwWVX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;disablePictureInPicture&lt;/code&gt;: This video element property will disable the picture-in-picture feature. Here is a CodePen to try out this property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atapas/embed/wvgVmxj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-control-styling"&gt;
  &lt;/a&gt;
  How to Control Styling?
&lt;/h2&gt;

&lt;p&gt;The CSS pseudo-class &lt;code&gt;:picture-in-picture&lt;/code&gt; allows us to adjust the size, style, or layout of content when a video switches back and forth between picture-in-picture and standard modes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:picture-in-picture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#0081ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#565652&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stream-webcam-capture-into-the-pictureinpicture-mode"&gt;
  &lt;/a&gt;
  Stream Webcam Capture into the Picture-in-Picture mode
&lt;/h2&gt;

&lt;p&gt;Let us do something a bit more fun now. How about capturing the video using your webcam and show it in the picture-in-picture mode.&lt;/p&gt;

&lt;p&gt;First create a video element,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"videostreamId"&lt;/span&gt; &lt;span class="na"&gt;autoplay=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start the webcam, and once we start receiving the stream, we can pass it to the video element to play it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we use the &lt;code&gt;Picture-in-Picture&lt;/code&gt; API method when the video is fully loaded into the video element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loadedmetadata&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPictureInPicture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try out the same in the CodePen below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note: You may have to open the pen in a new tab and see the webcam working. Also, feel free to fork and fix a bug I left unfixed in the code 🐞.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atapas/embed/abpeYxd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;br&gt;
That's all for now. If you enjoyed this article or found it helpful, let's connect. You can find me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter(@tapasadhikary)&lt;/a&gt; sharing thoughts, tips, and code practices.

&lt;p&gt;You may also like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/10-lesser-known-web-apis-you-may-want-to-use-ckejv75cr012y70s158n85yhn"&gt;10 lesser-known Web APIs you may want to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/10-vs-code-emmet-tips-to-make-you-more-productive-ckknjvxal028f1qs18w20e94t"&gt;10 VS Code emmet tips to make you more productive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Picture-in-Picture_API"&gt;MDN Picture-in-Picture API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>8 Linux Commands Everyone Should Know</title>
      <author>Boyan Iliev</author>
      <pubDate>Thu, 06 May 2021 07:25:17 +0000</pubDate>
      <link>https://dev.to/boiliev/8-linux-commands-everyone-should-know-1f2i</link>
      <guid>https://dev.to/boiliev/8-linux-commands-everyone-should-know-1f2i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduciton"&gt;
  &lt;/a&gt;
  Introduciton
&lt;/h1&gt;

&lt;p&gt;It's a well-known fact that developers use terminals. And using a terminal is something that everybody should know. It is a good thing to know and do because it will help you in so many ways. It will help you in that job interview, or just in your everyday life. You must at least have the basic knowledge of how to use a terminal. For example how to change directories and view them and how to create a file. &lt;/p&gt;

&lt;p&gt;In this post, I am going to show you some of the basic commands and how to get around in a terminal and not be completely lost. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-raw-pwd-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;pwd&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; means &lt;strong&gt;Print Working Directory&lt;/strong&gt;. It shows you the full path to your current directory. This is used so you don't get lost in all those directories that you have. If you don't know what a directory is, it is pretty much like a folder. It stores other folders and files in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pwd
/Users/user1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-raw-ls-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;ls&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;ls&lt;/code&gt; stands for &lt;strong&gt;List Files&lt;/strong&gt;. It will show you the files and directories that are in your current directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls
xmen avengers justiceLeague
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-raw-cd-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;cd&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Now that you know how to list your files in your working directory and how to print the path to it, you will need to &lt;strong&gt;Change Directory&lt;/strong&gt;. This is done by typing the &lt;code&gt;cd&lt;/code&gt; command. You just have to type it and then next to it type the directory you want to visit. But this command only moves forward and backward. This means you can't just type a directory name that is deep inside your files just by typing its name. You have to type the full path to that dir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd avengers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to go in multiple dirs, you need to use &lt;code&gt;/&lt;/code&gt; after every dir, and then type the directory you want to visit inside the previous one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ironMan/suitMark85
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to go back one dir, you need to type &lt;code&gt;cd ..&lt;/code&gt;. You could mix this with other dir like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ../../captainAmerica/steveRogers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you just type &lt;code&gt;cd&lt;/code&gt; by itself, it will send you to the home directory.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-raw-mkdir-endraw-"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;mkdir&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Now that we know how to go to a directory and how to view what's inside them, we need to learn how to make one. It is done through the &lt;code&gt;mkdir&lt;/code&gt; command. You just type the command and add the new directory name next to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir secretDir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to create multiple dir at once, just type all of them next to each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir secretDir1 secretDir2 secretDir3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When doing these kinds of things be sure to use the &lt;code&gt;pwd&lt;/code&gt; command so you know in which dir you are so that you don't create the new dirs in the wrong one.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-raw-man-endraw-"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;man&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;man&lt;/code&gt; command is used to check the manuals of a certain command. When you are not sure what a command does and what to have a detailed look at it, just type the &lt;code&gt;man&lt;/code&gt; command and add the other command next to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;man ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you are done viewing the manual, press &lt;code&gt;q&lt;/code&gt; so that you can leave the file.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-raw-touch-endraw-"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;touch&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;touch&lt;/code&gt; command creates a file (or multiple). It is almost the same as &lt;code&gt;mkdir&lt;/code&gt;, but it's not used for making directories but for files with an extension(.txt, .html, .css ...).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.html style.css app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#7-raw-nano-endraw-"&gt;
  &lt;/a&gt;
  7. &lt;code&gt;nano&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;nano&lt;/code&gt; is a text editor using a command-line interface. When you create a file and want to add something small to it, just use &lt;code&gt;nano&lt;/code&gt; to add it. &lt;/p&gt;

&lt;p&gt;In order to edit a file, just type &lt;code&gt;nano&lt;/code&gt; and the file name next to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that if there isn't such a file in your directory, for example, the &lt;code&gt;index.html&lt;/code&gt; one, it will create a new one. So this means that you wouldn't need to use the &lt;code&gt;touch&lt;/code&gt; command. bUt it's best to create a file with &lt;code&gt;touch&lt;/code&gt; and then go to your code editor and do your coding there. &lt;code&gt;nano&lt;/code&gt; is best used for those minor changes like for example a typo.&lt;/p&gt;

&lt;p&gt;There are some shortcuts that would be nice for you to know. I would recommend checking this post out on some of those shortcuts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bobbyiliev/11-nano-shortcuts-that-you-should-know"&gt;11 Nano shortcuts that you should know&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-raw-rm-endraw-"&gt;
  &lt;/a&gt;
  8. &lt;code&gt;rm&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Now that we know how to view dirs, create them, create files and edit them, we need to learn how to delete them. Deleting a dir or file is done with the &lt;code&gt;rm&lt;/code&gt; command. You definitely want to be careful with this, because if you delete a file or dir, you won't be able to get it back. So if you want to delete a file just type &lt;code&gt;rm&lt;/code&gt; and then the file name. Or if you want to remove multiple files, just type their names next to each other&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm index.html style.css app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you want to remove a directory you can use &lt;code&gt;rmdir&lt;/code&gt;, but this will only remove a dir that is empty. In order to delete a dir that is not empty, use the &lt;code&gt;rm&lt;/code&gt; command with the flags &lt;code&gt;-rf&lt;/code&gt;. If you don't know what flags are, think of them as extra options for your command. The &lt;code&gt;ls&lt;/code&gt; command has lots of flags. I would recommend that you check the manual of the &lt;code&gt;ls&lt;/code&gt; command so that you can see all its available flags. &lt;/p&gt;

&lt;p&gt;So deleting a directory with other dirs or files inside should be done like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm -rf avengers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be very careful with these commands because if you delete a file or dir by accident, you won't be able to get them back&lt;/p&gt;

&lt;p&gt;If you want to see some examples and a more detailed explanation for some of these commands be sure to check out this video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HqdFvL74wqo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Knowing how to use a terminal is crucial. It is. a huge bonus to know at least these commands, which will help you a lot. &lt;/p&gt;

&lt;p&gt;I hope that this post has helped you and that you will be a little bit more confident the next time you see a terminal.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>terminal</category>
      <category>developer</category>
    </item>
    <item>
      <title>How to optimize React Native App</title>
      <author>Raaj</author>
      <pubDate>Thu, 06 May 2021 07:16:48 +0000</pubDate>
      <link>https://dev.to/raaj/how-to-optimize-react-native-app-47mj</link>
      <guid>https://dev.to/raaj/how-to-optimize-react-native-app-47mj</guid>
      <description>&lt;p&gt;A great user experience should be the core objective of any app development. Although React Native tries to provide everything you need to develop a performant application, there are occasions where you have to manually optimize your app. To do this, developers need to have a performance optimization mindset from the start of their projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-to-optimize-the-react-native-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ways to Optimize the React Native App&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Use FlatList&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Remove all console statements&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. Memoize expensive computations&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;4. Use Relevant sized images&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;5. Remove unnecessary libraries and features&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;6. Use Hermes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Use FlatList  to render large lists in React Native&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have a large list, rendering all the items at once can cause a performance issue, but lazy loading with FlatList will improve performance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import {FlatList} from 'react-native'

const data = [
  {
    id: 1,
    text: 'First'
  },
  {
    id: 2,
    text: 'Second'
  },
  ...
]

const App = () =&amp;gt;{
    const renderItem = ({item}) =&amp;gt;(
        &amp;lt;View&amp;gt;
          &amp;lt;Text&amp;gt;{item.text}&amp;lt;/Text&amp;gt;
        &amp;lt;/View&amp;gt;
    )
    return (
        &amp;lt;FlatList
          data={data}
          renderItem={renderItem}
          keyExtractor={item =&amp;gt; item.id}
        /&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Remove all console statements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While you could install some plugins such as babel-plugin-transform-remove-console to remove these statements from production&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Memoize expensive computations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React introduced the memo HOC (Higher Order Component) for preventing unnecessary re-rendering and the useMemo hook for optimizing expensive computations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Adjust (resize and scale down) image sizes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Images can contribute significantly to performance issues in React Native applications. So use relevant sized Images to increase the loading performance of your App&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Remove unnecessary libraries and features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each library in a React or React Native application leaves some footprint on the application. This is why you should only add libraries and features you need in your app and remove irrelevant dependencies and libraries. Animations, navigations, tabs, and other features can contribute to the screen load time and so the more they are on the screen, the worse the performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Use Hermes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hermes is a JavaScript Engine developed by Facebook in 2019. It is one of the must-have features for improving app performance, reducing memory usage, decreasing app size, and improving the app start-up time.&lt;br&gt;
  Hermes is not currently enabled by default in React Native but you can easily enable it in your app.&lt;br&gt;
  To enable Hermes on Android, edit your android/app/build.gradle file and add the following rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;project.ext.react = [
      entryFile: "index.js",
      enableHermes: true
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>reactnative</category>
      <category>howto</category>
    </item>
  </channel>
</rss>
