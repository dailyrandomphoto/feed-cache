<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Welcome Thread - v124</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 12 May 2021 17:49:09 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v124-1dmk</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v124-1dmk</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/yrhhmre5fN2PtRujfo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yrhhmre5fN2PtRujfo/giphy.gif" alt="Puppy saying hello from behind a bed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Voc√™ tem um minuto para a palavra do Live Coding?</title>
      <author>Morganna Giovanelli</author>
      <pubDate>Wed, 12 May 2021 17:28:48 +0000</pubDate>
      <link>https://dev.to/morgiovanelli/voce-tem-um-minuto-para-a-palavra-do-live-coding-4358</link>
      <guid>https://dev.to/morgiovanelli/voce-tem-um-minuto-para-a-palavra-do-live-coding-4358</guid>
      <description>&lt;p&gt;Voc√™, provavelmente, j√° ouviu falar da Twitch, certo? E, tamb√©m, j√° deve ter ouvido falar que √© uma famosa plataforma de lives para gamers. Ent√£o vamos quebrar alguns conceitos aqui: fique sabendo que existe uma categoria de &lt;a href="https://www.twitch.tv/directory/game/Science%20%26%20Technology"&gt;Ci√™ncia e Tecnologia&lt;/a&gt;, pela qual diversas pessoas de diferentes lugares no mundo, inclusive aqui no Brasil, fazem live programando.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Voc√™ deve estar com cara de "como assim?" agora, n√©?&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLOmhaIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9f29u8487v8gnz41lkb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLOmhaIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9f29u8487v8gnz41lkb.gif" alt='uma menina crian√ßa, loira, vestindo blusa rosa e com o cabelo amarrado em dois rabinhos e com cara de "como assim?", abrindo as m√£os'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-que-%C3%A9-live-coding"&gt;
  &lt;/a&gt;
  O que √© Live Coding
&lt;/h3&gt;

&lt;p&gt;√â importante ressaltar que n√£o necessariamente Live Coding deve ter exclusivamente c√≥digo na tela. Al√©m de linguagens de programa√ß√£o, outros assuntos s√£o abordados nessas lives: como estudar e compartilhar, carreira, mercado de trabalho, soft skills, hardware, IoT, banco de dados, infraestrutura e devOps, seguran√ßa da informa√ß√£o, entre muitos outros.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;E assunto e conte√∫do n√£o faltam na nossa √°rea...&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvmml6BO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2spvnepyxjwyv1geq7mh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvmml6BO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2spvnepyxjwyv1geq7mh.gif" alt="gif de uma pessoa sentada de costas com capuz e v√°rios computadores fazendo diversas coisas diferentes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conte%C3%BAdo"&gt;
  &lt;/a&gt;
  Conte√∫do
&lt;/h3&gt;

&lt;p&gt;As vantagens dessa forma de compartilhar conte√∫do s√£o v√°rias: criar comunidades, conhecer pessoas da √°rea, trocar experi√™ncias, ter um entretenimento, espalhar a palavra da Ada Lovelace e, o mais importante, interagir com pessoas diferentes de diversos lugares, pensamentos e culturas. Al√©m da intera√ß√£o j√° mencionada, o que n√£o se tem da mesma maneira em v√≠deos gravados e at√© mesmo artigos publicados, o ponto de estar ao vivo te permite, at√© mesmo, tirar d√∫vidas no momento em que as coisas est√£o acontecendo. Isso pode fazer a diferen√ßa para muitos de n√≥s.&lt;/p&gt;

&lt;p&gt;Para quem me conhece, j√° deve ter me ouvido falar diversas vezes sobre o impacto da comunidade na minha vida pessoal e profissional. E poder ter uma forma de manter esse contato com a comunidade online e ao vivo, ainda mais no momento em que vivemos, traz um quentinho para o cora√ß√£o.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;E qualquer pessoa pode compartilhar conhecimento!&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxqgfA7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idrudmils3eo9di1a59u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxqgfA7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idrudmils3eo9di1a59u.gif" alt="gif de um cachorro mexendo no computador com m√£os humanas, na mesa tamb√©m tem um √≥culos e um caderno"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comunidade"&gt;
  &lt;/a&gt;
  Comunidade
&lt;/h3&gt;

&lt;p&gt;Agora que voc√™ sabe que isso existe, caso ainda n√£o soubesse, acredito que seja interessante conhecer pessoas que fazem live coding na Twitch. Voc√™ pode conhecer algumas dessas pessoas neste &lt;a href="https://github.com/acaverna/streamers-amigues-da-caverna"&gt;reposit√≥rio&lt;/a&gt; que lista diversos links de canais na Twitch, separados por categorias e assuntos.&lt;/p&gt;

&lt;p&gt;Outra forma bem legal de conhecer pessoas streamers √© seguindo o &lt;a href="https://twitter.com/LiveDivulgador"&gt;@LiveDivulgador&lt;/a&gt; no Twitter. √â a p√°gina de um bot que compartilha quando algu√©m est√° online na Twitch, desde que a pessoa streamer concorde em ter essa divulga√ß√£o.&lt;/p&gt;

&lt;p&gt;Mas, aqui, ressalto uma das comunidades que conheci e que, hoje, tenho a honra de fazer parte: as &lt;a href="https://www.twitch.tv/team/livecodergirls"&gt;Live Coders Girls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Inclusive, aguarde novidades, hehehe...&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S6uvnerk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkoyyarbhqxb5bsp6otl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S6uvnerk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkoyyarbhqxb5bsp6otl.gif" alt="gif de uma menina crian√ßa sorrindo e fazendo uma carinha de quem t√° guardando um segredo ou aprontando alguma coisa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para conhec√™-las, te convido a seguir o canal dessas pessoas incr√≠veis e assistirem suas lives. Voc√™ pode ver os canais pelo link do &lt;a href="https://www.twitch.tv/team/livecodergirls"&gt;time&lt;/a&gt;. S√£o mulheres cis, trans e pessoas n√£o bin√°rias compartilhando conte√∫do de tecnologia. Garanto que n√£o ir√° se arrepender e aprender√° muito com cada uma delas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eo-TZ_vS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2axs259n1s1o9yfr6rn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eo-TZ_vS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2axs259n1s1o9yfr6rn.gif" alt="gif com cinco mulheres diferentes fazendo a pose de for√ßa com o bra√ßo girl power"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dica de ouro aqui: estamos organizando a terceira maratona live coders girls que acontecer√° no dia 29/05/2021. E voc√™ pode saber mais sobre ela e se inscrever pelo nosso &lt;a href="https://maratona3.live/"&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pequeno-gloss%C3%A1rio-de-termos-usados-em-lives"&gt;
  &lt;/a&gt;
  Pequeno gloss√°rio de termos usados em lives
&lt;/h3&gt;

&lt;p&gt;Aproveito este artigo para compartilhar alguns termos que voc√™ pode ouvir/ver/ler muito nas lives que s√£o transmitidas na Twitch.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-streamer"&gt;
  &lt;/a&gt;
  - streamer
&lt;/h5&gt;

&lt;p&gt;Pessoa que est√° fazendo e conduzindo a live.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-chat-ou-viewers"&gt;
  &lt;/a&gt;
  - chat ou viewers
&lt;/h5&gt;

&lt;p&gt;Grupo de pessoas que est√£o assistindo a live.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-gank-ou-raid"&gt;
  &lt;/a&gt;
  - gank ou raid
&lt;/h5&gt;

&lt;p&gt;Quando uma live est√° para acabar, ao inv√©s de simplesmente finaliz√°-la, podemos fortalecer e aumentar a comunidade, direcionando o p√∫blico para outra pessoa streamer que esteja ao vivo naquele momento. Atrav√©s da pr√≥pria plataforma da Twitch, conseguimos direcionar as pessoas diretamente para a live seguinte.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-host"&gt;
  &lt;/a&gt;
  - host
&lt;/h5&gt;

&lt;p&gt;Quando a pessoa streamer n√£o est√° ao vivo, ela pode "hostear" outro canal que esteja ao vivo naquele momento. Ent√£o, caso algu√©m chegue at√© o canal dela, mesmo que esteja offline, h√° o conte√∫do de outra pessoa sendo transmitido. Assim como a raid, este tipo de a√ß√£o ajuda a fortalecer a comunidade e apresentar conte√∫dos de outras pessoas que apoiamos.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-lurk"&gt;
  &lt;/a&gt;
  - lurk
&lt;/h5&gt;

&lt;p&gt;Quando uma pessoa viewer n√£o consegue assistir com aten√ß√£o total a uma live no momento em que est√° acontecendo, ela pode deixar o canal aberto e com o volume baixo. Isso acaba sendo um grande apoio a quem est√° "streamando".&lt;/p&gt;

&lt;p&gt;Espero que voc√™, que ainda n√£o conhecia esse mundo dentro da Twitch, tenha gostado do conte√∫do e ao menos tente dar uma chance para a comunidade que est√° crescendo a cada dia. Caso tenha ficado alguma d√∫vida, n√£o hesite em mand√°-la, ficarei feliz em ajudar a espalhar a palavra do Live Coding.&lt;/p&gt;

&lt;p&gt;At√© a pr√≥xima!&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>womenintech</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Journey to the real world by cloning DEV.to backend server(part 2)</title>
      <author>Harsh Mangalam</author>
      <pubDate>Wed, 12 May 2021 17:10:25 +0000</pubDate>
      <link>https://dev.to/harshmangalam/journey-to-the-real-world-by-cloning-dev-to-backend-server-2m9j</link>
      <guid>https://dev.to/harshmangalam/journey-to-the-real-world-by-cloning-dev-to-backend-server-2m9j</guid>
      <description>&lt;p&gt;In the last series we have talked about the tools and library we will use to create dev.to backend.&lt;/p&gt;

&lt;p&gt;In this series we will setup our server using Express js , Prisma  and apollo server.&lt;/p&gt;

&lt;p&gt;I am using ubuntu linux based os and vscode as IDE.&lt;/p&gt;

&lt;p&gt;Open your terminal using &lt;code&gt;ctrl + alt + t&lt;/code&gt; and navigate to the choice of your directory where you will create your project .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;harsh@dev:~ cd Harsh/nodejs/devblog_server
harsh@dev:~/Harsh/nodejs/devblog_server$ pnpm init -y
harsh@dev:~/Harsh/nodejs/devblog_server$  pnpm add apollo-server-express graphql express @prisma/client

harsh@dev:~/Harsh/nodejs/devblog_server$  pnpm add -D nodemon prisma
harsh@dev:~/Harsh/nodejs/devblog_server$  code .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here i am using pnpm a new way to manage nodejs dependency. pnpm is Fast, disk space efficient package manager and upto 2x faster than  alternatives.&lt;/p&gt;

&lt;p&gt;I have initialize brand new project devblog_server and then install dependencies and devDependencies related to express , prisma and apollo server.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apollo-server-express&lt;/code&gt;  is a express integration of graphql server. You can opt any framework no matter like  Connect, Hapi, Koa and Restify&lt;/p&gt;

&lt;p&gt;&lt;code&gt;graphql&lt;/code&gt; is a javascript implementation of GraphQL&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@prisma/client&lt;/code&gt; is an auto-generated query builder that enables type-safe database access and reduces boilerplate&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nodemon&lt;/code&gt; auto restart our development server when we make change in our file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;prisma&lt;/code&gt; provide cli based interface to generate prisma project and apply migration&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this series we have setup our development tools and installing our dependencies . From next series we will setup apollo server , express and prisma with postgresql database&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>node</category>
      <category>apollo</category>
      <category>express</category>
      <category>prisma</category>
    </item>
    <item>
      <title>‚úÖ 5 simple security tips for your¬†.NET applications</title>
      <author>Dotnetsafer</author>
      <pubDate>Wed, 12 May 2021 16:27:55 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/5-simple-security-tips-for-your-net-applications-2ola</link>
      <guid>https://dev.to/dotnetsafer/5-simple-security-tips-for-your-net-applications-2ola</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XkSSBNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj59mzh7i6e3shhbbt3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XkSSBNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj59mzh7i6e3shhbbt3n.png" alt="security tips"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When programming one of the aspects that we must take into account is the security of our code, we must maintain a balance between good practices, software performance, and software security.&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://dotnetsafer.com"&gt;Dotnetsafer&lt;/a&gt; we want to give you some basic advice to start paying attention to the security of the code you program and make your¬†.net application secure.&lt;/p&gt;

&lt;p&gt;As we mentioned before, these are basic aspects that any programmer could start implementing today, in this &lt;strong&gt;&lt;a href="https://dotnetsafer.com/blog/"&gt;blog&lt;/a&gt;&lt;/strong&gt; you have more articles with more advanced solutions and tips.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-avoid-direct-connections-to-databases"&gt;
  &lt;/a&gt;
  1. Avoid direct connections to databases.
&lt;/h1&gt;

&lt;p&gt;Many times our applications require databases, the easiest way to use these databases is to use a connector from our application.&lt;/p&gt;

&lt;p&gt;In this way, &lt;strong&gt;we are exposing our server, port, username, and password  to anyone&lt;/strong&gt; who has access to the application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-fix%C2%A0it"&gt;
  &lt;/a&gt;
  How can we fix¬†it?
&lt;/h3&gt;

&lt;p&gt;Here we must take into account several aspects, one of them being how our application is structured and its needs.&lt;/p&gt;

&lt;p&gt;In a simple way we could apply the following measures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not use Universal Data Link (UDL) files&lt;/li&gt;
&lt;li&gt;Encrypt the configuration files&lt;/li&gt;
&lt;li&gt;Using Windows Authentication&lt;/li&gt;
&lt;li&gt;Using Azure Key Vault Secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we need complete and advanced security we recommend outsourcing the connections.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-data-encryption-in%C2%A0net"&gt;
  &lt;/a&gt;
  2. Data encryption in¬†.NET
&lt;/h1&gt;

&lt;p&gt;Whenever we work with data, whether it is application settings or user information, we must keep the data encrypted at all times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With this class you will be able to manipulate files with a little more security, for example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//To save a file:&lt;/span&gt;

&lt;span class="n"&gt;DotnetsaferSecureFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteAllText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"example.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"The user Pedro   has registered in https://dotnetsafer.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"passwordSecurity1234"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//To load this file:&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DotnetsaferSecureFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadAllText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"example.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"passwordSecurity1234"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a small example to start integrating security and encryption into the data handled by our application, both files, and strings, connections, documents, etc.&lt;/p&gt;

&lt;p&gt;In this example we have seen that the password "passwordSecurity1234" is in the code, at first sight, that should not be so, the best option would be to outsource this password and load it in a secure way. As we did for example with the MySQL connection strings using &lt;strong&gt;Azure Key Vault Secret&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-using-the-data-protection-api-in-asp%C2%A0net%C2%A0core"&gt;
  &lt;/a&gt;
  3. Using the Data Protection API in ASP¬†.NET¬†Core
&lt;/h1&gt;

&lt;p&gt;In ASP¬†.NET Core we could use &lt;strong&gt;IDataProtector&lt;/strong&gt; to protect the information and documents that we manipulate in our applications.&lt;/p&gt;

&lt;p&gt;This method is very simple to implement and has several features that make it really good.&lt;/p&gt;

&lt;p&gt;In order to use it in the &lt;strong&gt;StartUp.cs&lt;/strong&gt; class of our ASP¬†.NET Core application, in the &lt;strong&gt;ConfigureServices&lt;/strong&gt; method we will add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddDataProtection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTransient&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ProtectorHelper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll load it as a parameter in the constructor of the classes in which we want to implement it, so we can use it to encrypt the information, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Class1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProtectorHelper&lt;/span&gt; &lt;span class="n"&gt;protectionHelper&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="c1"&gt;//This will cause a user's file to be encrypted and expire in 5 hours, i.e. after 5 hours, it cannot be decrypted by anyone.&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;usferFile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;protectionHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Encrypt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only with these measures, our application will be much safer, now we need to implement it correctly to ensure the safety of our customers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-update-the-external-dependencies-and-libraries"&gt;
  &lt;/a&gt;
  4. Update the external dependencies and libraries.
&lt;/h1&gt;

&lt;p&gt;This recommendation may be obvious, but not many people take it into account when programming in¬†.NET we make use of many libraries, usually many of them offered by Microsoft, others developed by users or companies, like many of the NuGet packages.&lt;/p&gt;

&lt;p&gt;It is important that we check which libraries are using our application and inform us of any known vulnerabilities or possible security risks they may cause.&lt;/p&gt;

&lt;p&gt;It is also important to take into account the versions of the Framework we are using for our application since it could have become obsolete and without maintenance and could be a security risk.&lt;/p&gt;

&lt;p&gt;Here we provide you with information about the current framework versions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0kue-kA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91nbp2dey7dt56xkyauu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0kue-kA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91nbp2dey7dt56xkyauu.png" alt="versions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, a table with the known vulnerabilities of the most common¬†.NET libraries:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPcuAbpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umsnjdv6akqyffncxe32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPcuAbpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umsnjdv6akqyffncxe32.png" alt="versions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-use-security-systems-and-code-obfuscation"&gt;
  &lt;/a&gt;
  5. Use security systems and code obfuscation.
&lt;/h1&gt;

&lt;p&gt;One of the most effective and simple solutions is to use a tool that takes care of protecting your application.&lt;/p&gt;

&lt;p&gt;The above-mentioned security best practices are important for keeping your¬†.NET application secure but are not sufficient to ensure the integrity of methods, connections, and other vulnerabilities.&lt;/p&gt;

&lt;p&gt;At &lt;strong&gt;&lt;a href="https://dotnetsafer.com"&gt;Dotnetsafer&lt;/a&gt;&lt;/strong&gt; we offer you the possibility of protecting your applications for free and we provide you with more advanced protections and features so that you can adapt the security to the needs of your applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-a-security-system-for%C2%A0net"&gt;
  &lt;/a&gt;
  Advantages of using a security system for¬†.NET
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avoid wasting time protecting your applications.&lt;/li&gt;
&lt;li&gt;No security knowledge required.&lt;/li&gt;
&lt;li&gt;It allows you to use various protections and features.&lt;/li&gt;
&lt;li&gt;Incorporate the latest security techniques into your application with a couple of clicks.&lt;/li&gt;
&lt;li&gt;Detects and corrects vulnerabilities automatically.&lt;/li&gt;
&lt;li&gt;It allows you to focus on development and continuous integration without worrying about security, as it will run on its side.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And other advantages that make a security system save you time and money with the publication of your software.&lt;/p&gt;

&lt;p&gt;Another important aspect is that the performance of the team development can be very reduced if we implement the protection manually because every time there is an update we will have to protect the application again and the development can become very tedious because the code is more difficult to understand, less practical and less optimal.&lt;/p&gt;

&lt;p&gt;In addition, many of the protections that we can incorporate manually are at the level of connections, file manipulation, encryption and good practices in development, but for the software to be secure and to be able to guarantee the integrity of our intellectual property it is necessary to use more advanced methods and algorithms.&lt;/p&gt;

&lt;p&gt;For example, &lt;strong&gt;Dotnetsafer&lt;/strong&gt; offers protections such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Control flow&lt;/strong&gt;: Modifies the flow of methods and disorders them so that they cannot be represented.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Constants protection&lt;/strong&gt;: Encrypts and protects the application constants so that sensitive information cannot be obtained.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rename&lt;/strong&gt;: Renames all types, classes, methods, and variables of our application so that the operation cannot be understood.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many more protections, if you want to know about all the protections that dotnetsafer offers we recommend you go to the section &lt;a href="https://dotnetsafer.com/shield/protections"&gt;https://dotnetsafer.com/shield/protections&lt;/a&gt; and you will be able to obtain more information about each one of them in the &lt;a href="https://dotnetsafer.com/docs/"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>security</category>
      <category>development</category>
      <category>software</category>
    </item>
    <item>
      <title>Journey to the real world  by cloning DEV.to backend server(part 1)</title>
      <author>Harsh Mangalam</author>
      <pubDate>Wed, 12 May 2021 16:26:16 +0000</pubDate>
      <link>https://dev.to/harshmangalam/journey-to-the-real-world-by-cloning-dev-to-backend-server-1icm</link>
      <guid>https://dev.to/harshmangalam/journey-to-the-real-world-by-cloning-dev-to-backend-server-1icm</guid>
      <description>&lt;p&gt;In this long series we will explore  amazing library and framework by implementing dev.to backend server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tools-we-will-use"&gt;
  &lt;/a&gt;
  Tools we will use
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Nodejs&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Nodejs is a javascript runtime which allow javascript to run outside the browser. Nodejs was developed by Ryan Dahl which utilize google v8 javascript engine.&lt;br&gt;
You can learn more about nodejs &lt;a href="https://nodejs.org/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Graphql&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Graphql is a query language for API which provide full power to frontend developer to query data according to requirement without too much hassle.&lt;br&gt;
Graphql is alternative to REST in REST we create a bunch of endpoints using different http verbs like GET , POST , PUT , DELETE etc.. but in graphql we have one and only one endpoint which will always make a POST request no matter what your intension about getting data or updating data.e&lt;br&gt;
Graphql was developed and open source by facebook you can learn more about graphql &lt;a href="https://graphql.org/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Apollo Server&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Apollo server is a graphql implementation for production use and can be used easily with any graphql client like relay , urql , apollo client etc..&lt;br&gt;
You can explore much about apollo server &lt;a href="https://www.apollographql.com/docs/apollo-server/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Express&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Express is a most popular , unopinionated  nodejs based web framework. We will use express as middleware to handle file server. You can explore about express js &lt;a href="https://expressjs.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Prisma 2&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Prisma is a Next-Gen javascript and typescript ORM . It generate types for your model and provide highlight during development to work faster.&lt;br&gt;
You can explore prisma 2 &lt;a href="https://www.prisma.io/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the sake of simplicity we will use javascript to develop complete backend.&lt;/p&gt;

&lt;p&gt;From next series we will start modeling our database using prisma and postgresql&lt;/p&gt;

</description>
      <category>node</category>
      <category>apollo</category>
      <category>express</category>
      <category>prisma</category>
    </item>
    <item>
      <title>3 ways to code Rock, Paper and Scissors in JavaScript (beginner, intermediate and advanced approach)</title>
      <author>Ania Kubow</author>
      <pubDate>Wed, 12 May 2021 15:59:32 +0000</pubDate>
      <link>https://dev.to/ania_kubow/3-ways-to-code-rock-paper-and-scissors-in-javascript-beginner-intermediate-and-advanced-approach-34mk</link>
      <guid>https://dev.to/ania_kubow/3-ways-to-code-rock-paper-and-scissors-in-javascript-beginner-intermediate-and-advanced-approach-34mk</guid>
      <description>&lt;p&gt;In this video I show you how to code Rock paper Scissors in JavaScript in not just one approach, but 3 different approaches.&lt;/p&gt;

&lt;p&gt;I am doing this to show you just some of the ways you can solve one problem using JavaScript. I will be using a more beginner approach to start off with, and move onto more intermediate and advanced approaches.&lt;/p&gt;

&lt;p&gt;This is a JavaScript tutorial so there will be no styling in this tutorial. That part is totally up to you :)&lt;/p&gt;

&lt;p&gt;Please do share your finished games with me, I would absolutely love to see what you have made and how you have chosen to style your games!&lt;/p&gt;

&lt;p&gt;00:00‚Äã Introduction&lt;br&gt;
01:18‚Äã Beginner Rock Paper Scissors&lt;br&gt;
17:28‚Äã Intermediate Rock Paper Scissors&lt;br&gt;
32:45‚Äã Advanced Rock Paper Scissors&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RwFeg0cEZvQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can find the code for all three games here: &lt;a href="https://github.com/kubowania/rock-paper-scissors-x3"&gt;https://github.com/kubowania/rock-paper-scissors-x3&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In most videos I use Tabnine as my A.I autocompletion tool. You can download it for free here: &lt;a href="http://bit.ly/tabnine-top-tool%E2%80%8B"&gt;http://bit.ly/tabnine-top-tool‚Äã&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to buy me a coffee, well thank you very much that is mega kind! : &lt;a href="https://www.buymeacoffee.com/aniakubow"&gt;https://www.buymeacoffee.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips%E2%80%8B"&gt;https://bit.ly/JS-tips‚Äã&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find me on:&lt;br&gt;
Twitter: &lt;a href="https://www.twitter.com/ania_kubow"&gt;https://www.twitter.com/ania_kubow&lt;/a&gt;&lt;br&gt;
Instagram: https:///&lt;a href="http://www.instagram.com/aniakubow"&gt;www.instagram.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#codingbootcamp%E2%80%8B%E2%80%8B-coding%E2%80%8B"&gt;
  &lt;/a&gt;
  codingbootcamp‚Äã‚Äã #coding‚Äã
&lt;/h1&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Soft UI Dashboard - Open-source Flask Starter</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 12 May 2021 15:55:51 +0000</pubDate>
      <link>https://dev.to/sm0ke/soft-ui-dashboard-open-source-flask-starter-2n6e</link>
      <guid>https://dev.to/sm0ke/soft-ui-dashboard-open-source-flask-starter-2n6e</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;strong&gt;Flask starter&lt;/strong&gt; that might help beginners to start faster a new project and reuse a codebase already enhanced with database, authentication and deployment scripts on top of a modern UI Kit: &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt;. The product can be downloaded from Github and used for hobby and commercial products. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask-soft-ui-dashboard.appseed-srv1.com/"&gt;Flask Soft UI Dashboard&lt;/a&gt; - LIVE Deployment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-soft-ui-dashboard"&gt;Flask Soft UI Dashboard&lt;/a&gt; - Source Code&lt;/li&gt;
&lt;li&gt;LIVE Support via &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CsRmknW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-soft-ui-dashboard/master/media/flask-soft-ui-dashboard-screen-billing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CsRmknW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-soft-ui-dashboard/master/media/flask-soft-ui-dashboard-screen-billing.png" alt="Soft UI Dashboard - Billing Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Soft UI Dashboard is an open-source Bootstrap 5 template released under the MIT License (free for commercial use) by Creative-Tim agency. The product is built with over 70 frontend individual elements, like buttons, inputs, navbars, navtabs, cards or alerts, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using SASS files and classes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt; - If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication Pages: Login and Register&lt;/li&gt;
&lt;li&gt;Utility pages: User Profile, Billing page&lt;/li&gt;
&lt;li&gt;RTL Support: YES.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJhlG4lV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k3hn07umpzr6scbde8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJhlG4lV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k3hn07umpzr6scbde8s.png" alt="Soft UI Dashboard - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-compile-the-code"&gt;
  &lt;/a&gt;
  How to compile the code
&lt;/h2&gt;

&lt;p&gt;To compile this Flask starter in a local environment a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal programming kit&lt;/a&gt; must be already installed and all tools accessible in the terminal.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/"&gt;Nodejs&lt;/a&gt; - version 10.x or above&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt; - a smart package manager for Node&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/"&gt;GIT&lt;/a&gt; - versioning command-line tool&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt; - toolkit automation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/"&gt;Python3&lt;/a&gt; - the interpreter&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Some of the above tools are optional but recommended. Once we have the environment ready, we can move on and compile the project using the build instructions provided in the &lt;a href="https://github.com/app-generator/flask-soft-ui-dashboard/blob/master/README.md"&gt;README&lt;/a&gt; file.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone/download sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules - SQLite Database&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Set up environment variables&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set the FLASK_APP environment variable&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set up the DEBUG environment&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the application via Flask embedded server&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask run
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Access the dashboard in browser: http://127.0.0.1:5000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the app will route guest users to the login page to authenticate. To pass the login please create a new user first.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pZlgpgGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1zyx0etqousrv3clgga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pZlgpgGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1zyx0etqousrv3clgga.png" alt="Soft UI Dashboard - RTL Support."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Flask Dashboards&lt;/a&gt; provided by AppSeed&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt; - official website &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>React Select with options outside</title>
      <author>Richard Beattie</author>
      <pubDate>Wed, 12 May 2021 15:54:18 +0000</pubDate>
      <link>https://dev.to/rbt/react-select-with-options-outside-353g</link>
      <guid>https://dev.to/rbt/react-select-with-options-outside-353g</guid>
      <description>&lt;p&gt;In &lt;a href="http://prepsheets.com"&gt;prepsheets.com&lt;/a&gt; users can specify which allergens ingredients and recipes have. The natural UI element for this is a multiselect. I was already using &lt;a href="https://react-select.com/"&gt;react-select&lt;/a&gt; which is an awesome library adding a stylable multi-select with lots of options (creating new options; async loading of options; etc). However after setting it up, it felt too cramped. If users had more than 3 allergen selected (some of which are quite long "") then the select would grow and become cumbersome. Instead I decided to place the selected options above the mutliselect. This article goes over how to do this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h2&gt;

&lt;p&gt;We're using react-select here so go ahead and install it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react-select
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's see what the default multi-select looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chocolate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chocolate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Strawberry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vanilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vanilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;isMulti&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the 24 offical Irish allergens as you can see below when you add a certain amount the select grows which dosn't look nice in my opinion.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---S-mtb18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drcjlwy435ipo515v9z3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---S-mtb18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drcjlwy435ipo515v9z3.png" alt="Mutliselect with many allergens selected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-selected-options-to-outside-the-select"&gt;
  &lt;/a&gt;
  Moving selected options to outside the select
&lt;/h2&gt;

&lt;p&gt;The next step is to not show the selected values in the select but rather above it. Let's create a wrapper component for React-Select&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// OptionsOutsideSelect.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OptionsOutsideSelect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isMulti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isMulti&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt; : null&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;controlShouldRenderValue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isMulti&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;OptionsOutsideSelect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;isMulti&lt;/code&gt; is true then we use the &lt;code&gt;controlShouldRenderValue&lt;/code&gt; prop to hide the selected values &lt;strong&gt;and&lt;/strong&gt; loop over the &lt;code&gt;values&lt;/code&gt; prop and map them to &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56_ucTlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxw39bdliej1921m1eya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56_ucTlq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxw39bdliej1921m1eya.png" alt="React Select with options outside"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should be possible to use the &lt;code&gt;MultiValue&lt;/code&gt; component from &lt;code&gt;react-select&lt;/code&gt; however I couldn't get that to work, which brings us to the next step&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-the-selected-options"&gt;
  &lt;/a&gt;
  Styling the selected options
&lt;/h2&gt;

&lt;p&gt;Let's change how we're mapping the selected values to look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ValuesContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isMulti&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Value&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ValuesContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm going to use &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; to style &lt;code&gt;ValusContainer&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; but you can of course move the same rules over to whatever you're using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ValuesContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  flex-wrap: wrap;
  align-items: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 0.3rem 0.5rem 0.3rem 0.5rem;
  margin: 0 0.55rem 0.55rem 0;
  font-size: 0.75rem;
  color: black;
  background-color: rgba(247, 173, 46, 0.6);
  user-select: none;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates the below image which looks resonable&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kszqqop8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34d0cxn0dze298rx539t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kszqqop8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34d0cxn0dze298rx539t.png" alt="React Select styled option without X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only thing left to do now is let users remove selected options&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-remove-button"&gt;
  &lt;/a&gt;
  Adding a remove button
&lt;/h2&gt;

&lt;p&gt;First we'll add an "X" button to all &lt;code&gt;Values&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;XButton&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleRemoveValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;‚úï&lt;/span&gt; &lt;span class="c1"&gt;// This is the mulitply ‚úï not the x on your keyboard&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/XButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Value&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to make the &lt;code&gt;handleRemoveValue&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleRemoveValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;buttonName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;buttonName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;removedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;buttonName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remove-value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;removedValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Ta-Da üéâ you have a react-select with the options rendered outside the select. I've included a code-sandbox below to show what this looks like&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/react-select-with-options-outside-qqw71"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactselect</category>
      <category>styledcomponents</category>
      <category>css</category>
    </item>
    <item>
      <title>UDP</title>
      <author>Gealber Morales</author>
      <pubDate>Wed, 12 May 2021 15:49:23 +0000</pubDate>
      <link>https://dev.to/gealber/udp-3pno</link>
      <guid>https://dev.to/gealber/udp-3pno</guid>
      <description>&lt;h1&gt;
  &lt;a href="#udp"&gt;
  &lt;/a&gt;
  UDP
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Let's talk about this really funny protocol, funny is a weird word for a networking protocol, but I'll try to make my point. I will try the same approach as my last post on &lt;a href="https://dev.to/gealber/tcp-handshake-3ac"&gt;TCP&lt;/a&gt;, making a simple python script and taking a look to &lt;strong&gt;Wireshark&lt;/strong&gt;. Let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-udp-handshake-the-what"&gt;
  &lt;/a&gt;
  The UDP handshake, the what?
&lt;/h2&gt;

&lt;p&gt;Yep in my opinion &lt;strong&gt;UDP&lt;/strong&gt;(User Datagram Protocol) is barely a protocol, I know I'm a not a computer science guy, but still it doesn't seems to fit on that category of protocol. Let me clarify that &lt;strong&gt;UDP is extremely useful&lt;/strong&gt;, I'm just saying that the parts involved on the communication doesn't follow too many rules, like in &lt;strong&gt;TCP&lt;/strong&gt;. Instead of just saying this I will try to show you why I said this, let's make our simple Python script. Again this can be made with any programming language, I choose Python for simplicity.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;server.py&lt;/code&gt; will contain our extremely simplified &lt;strong&gt;UDP&lt;/strong&gt; server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# UDP server.py&lt;/span&gt;

import socket

def main&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="c"&gt;# creating the socket&lt;/span&gt;
    sock &lt;span class="o"&gt;=&lt;/span&gt; socket.socket&lt;span class="o"&gt;(&lt;/span&gt;socket.AF_INET, socket.SOCK_DGRAM&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# binding the socket to the address, in our case the localhost&lt;/span&gt;
    sock.bind&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;, 7456&lt;span class="o"&gt;))&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Just here on 7456..."&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# start reading data,&lt;/span&gt;
    &lt;span class="c"&gt;# I'm just interested on a single message from the client and it will be&lt;/span&gt;
    &lt;span class="c"&gt;# pretty short so don't need more than this&lt;/span&gt;
    data, address &lt;span class="o"&gt;=&lt;/span&gt; sock.recvfrom&lt;span class="o"&gt;(&lt;/span&gt;1024&lt;span class="o"&gt;)&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="s2"&gt;"FROM: {address} DATA: {data}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if &lt;/span&gt;__name__ &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;:
    main&lt;span class="o"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the difference here with &lt;strong&gt;TCP&lt;/strong&gt;, in this case he just start listening without the need to call &lt;code&gt;socket.listen()&lt;/code&gt; or &lt;code&gt;socket.accept()&lt;/code&gt;, take a look at this question on &lt;a href="https://stackoverflow.com/questions/8194323/why-the-listen-function-call-is-not-needed-when-use-udp-socket#:~:text=UDP%20is%20a%20connectionless%2C%20unreliable,any%20order%20from%20any%20source.&amp;amp;text=It's%20because%20UDP%20is%20not,accept%20like%20there's%20for%20SOCK_STREAM"&gt;&lt;strong&gt;Stackoverflow&lt;/strong&gt;&lt;/a&gt;, yes I use &lt;strong&gt;Stackoverflow&lt;/strong&gt; as reference.&lt;/p&gt;

&lt;p&gt;What about the client, here we go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# UDP client.py&lt;/span&gt;

import socket

def main&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="c"&gt;# create the socket&lt;/span&gt;
    sock &lt;span class="o"&gt;=&lt;/span&gt; socket.socket&lt;span class="o"&gt;(&lt;/span&gt;socket.AF_INET, socket.SOCK_DGRAM&lt;span class="o"&gt;)&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sending data..."&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# and ready to go&lt;/span&gt;
    sock.sendto&lt;span class="o"&gt;(&lt;/span&gt;b&lt;span class="s2"&gt;"Hello Lola"&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;, 7456&lt;span class="o"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if &lt;/span&gt;__name__ &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;:
    main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a socket and ready to send message, take into account that you don't care if the server is listening, if there's a server, you just send and hope for the best.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-this-look-like-on-wireshark"&gt;
  &lt;/a&gt;
  How this look like on Wireshark?
&lt;/h3&gt;

&lt;p&gt;In the last post we saw that a single &lt;strong&gt;TCP&lt;/strong&gt; connection with only one message generate several back and forward between the client and the server. I recommend you to take a look at the steps that you take to sniff the traffic in that case, in this case the only difference is that the filter in this case is &lt;code&gt;udp.port == 7456&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl4vTUfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jy338av8xbsrwfy6jidp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl4vTUfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jy338av8xbsrwfy6jidp.png" alt="TCP on Wireshark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's look this but with &lt;strong&gt;UDP&lt;/strong&gt;, this is going to be funny because well...let's see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RygR6odb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0um2g4x0q7u9aqb84nrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RygR6odb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0um2g4x0q7u9aqb84nrg.png" alt="UDP Wireshark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait what? Just one message, the client just literally sent the message, he doesn't care if the server is listening because again there's not such a thing as listening on &lt;strong&gt;UDP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W45UExdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvdka6p3rv5ip38s99kj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W45UExdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvdka6p3rv5ip38s99kj.png" alt="Balls on your face, UDP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yep this picture explains really well the situation, also was made with &lt;a href="https://github.com/excalidraw/excalidraw"&gt;exalidraw&lt;/a&gt;, you know promoting open source projects üòÉ.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;there's no handshake in UDP&lt;/strong&gt;, looking at the packet sent we can see that there's no too much to see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCDmRo0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5h5glh6m37578ea43d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCDmRo0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5h5glh6m37578ea43d3.png" alt="UDP packet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only Destination port, Source port, UDP length and Checksum and good to go, sent that message!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uses-cases-of-udp"&gt;
  &lt;/a&gt;
  Uses cases of UDP
&lt;/h2&gt;

&lt;p&gt;You may be wondering, "So why do I need this?". Well given that &lt;strong&gt;UDP&lt;/strong&gt; has low latency it has some pretty interesting uses cases. I'll let you these two links below, so you can explore them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/3751950/what-are-common-udp-usecases"&gt;Stackoverflow question, UDP use cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.emnify.com/en/resources/udp"&gt;What is User Datagram Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all for today üëã.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="//stackoverflow.com"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>tutorial</category>
      <category>linux</category>
      <category>networking</category>
      <category>python</category>
    </item>
    <item>
      <title>Change the Primary Key Data Type with Sequelize</title>
      <author>Sean C Davis</author>
      <pubDate>Wed, 12 May 2021 15:45:43 +0000</pubDate>
      <link>https://dev.to/grouparoo/change-the-primary-key-data-type-with-sequelize-5e3g</link>
      <guid>https://dev.to/grouparoo/change-the-primary-key-data-type-with-sequelize-5e3g</guid>
      <description>&lt;p&gt;We recently adjusted how we handle primary keys. Previously they were &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUIDs&lt;/a&gt; with a max length of &lt;code&gt;40&lt;/code&gt; characters. With our &lt;a href="https://dev.to/blog/declarative-data-sync"&gt;Declarative Sync&lt;/a&gt; feature, we allow developers to set primary key values from their configuration files. Thus, we needed to lengthen the maximum number of characters allowed on primary keys in our database.&lt;/p&gt;

&lt;p&gt;Seems simple, right?&lt;/p&gt;

&lt;p&gt;I thought so, too. We're using &lt;a href="https://sequelize.org/"&gt;Sequelize&lt;/a&gt; as our &lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"&gt;ORM tool&lt;/a&gt;, and I found a handy &lt;a href="https://sequelize.org/master/manual/query-interface.html#changing-the-datatype-of-a-column"&gt;&lt;code&gt;changeColumn&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So that's what I did. It looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;191&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: In these examples, I'm accessing Sequelize methods through an object called &lt;code&gt;migration&lt;/code&gt;. This is because we use &lt;a href="https://github.com/actionhero/ah-sequelize-plugin#migrations"&gt;Actionhero to run our database migrations&lt;/a&gt;. Your objects will look different, but the methods on them should be the same.&lt;/p&gt;

&lt;p&gt;I first tested with SQLite and &lt;em&gt;voila!&lt;/em&gt; It did exactly as I expected. All the primary keys were changed and working just lovely.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-postgresql-primary-keys"&gt;
  &lt;/a&gt;
  Changing PostgreSQL Primary Keys
&lt;/h2&gt;

&lt;p&gt;Since we support both Postgres and SQLite as our application database, I moved on to test in Postgres, and that's when, instead of the database being properly migrated, I was presented with this lovely message:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;column "id" is in a primary key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I thought: &lt;em&gt;Yes, true. That is correct. And ... ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It turns out Sequelize doesn't handle this action well with Postgres. After going down a rabbit hole in &lt;a href="https://www.postgresql.org/docs/13/ddl-constraints.html"&gt;playing around with constraints&lt;/a&gt;, I ended up just writing the SQL statement directly. It looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`ALTER TABLE "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" ALTER COLUMN "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" SET DATA TYPE varchar(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;maxIdLength&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;); `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That worked!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-is-awesome-sqlite-is-weird"&gt;
  &lt;/a&gt;
  Consistency is Awesome! (SQLite is Weird.)
&lt;/h2&gt;

&lt;p&gt;It made sense to me to try to use the same approach with both databases. So I tried my Postgres solution with SQLite.&lt;/p&gt;

&lt;p&gt;It didn't work. (Sensing a theme yet?)&lt;/p&gt;

&lt;p&gt;That seemed odd. But, of course, we already know that &lt;a href="https://dev.to/blog/7-awesome-sqlite-quirks"&gt;SQLite is weird&lt;/a&gt;. And it turns out &lt;a href="https://sqlite.org/lang_altertable.html"&gt;SQLite's &lt;code&gt;ALTER TABLE&lt;/code&gt; methods&lt;/a&gt; are extremely (and intentionally) limited.&lt;/p&gt;

&lt;p&gt;Which meant I was stuck with two solutions. And when that happens, we tend to look at the current dialect and execute the appropriate code. And that's why this is the weird function that alters the primary key column in both Postgres and SQLite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeColumn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialect&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`ALTER TABLE "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" ALTER COLUMN "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" SET DATA TYPE varchar(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;maxIdLength&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;); `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columnName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;191&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the complete set of changes that came along with this code in &lt;a href="https://github.com/grouparoo/grouparoo/pull/1764"&gt;this pull request&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>sequelize</category>
      <category>sqlite</category>
      <category>postgres</category>
    </item>
    <item>
      <title>Mom's Blood Sugar Log</title>
      <author>kateleext</author>
      <pubDate>Wed, 12 May 2021 15:44:34 +0000</pubDate>
      <link>https://dev.to/kateleext/mom-s-blood-sugar-log-3107</link>
      <guid>https://dev.to/kateleext/mom-s-blood-sugar-log-3107</guid>
      <description>&lt;p&gt;Last week, I signed up for Codecademy out of a sudden nudge. I didn't expect to be building anything remotely useful that soon, yet a short 5 days later, I ended up with a simple yet functional blood glucose log that I'd always wanted to build for my diabetic mother. Here is my first ever terminal program, built as my portfolio project for Codecademy's CS101 course.&lt;/p&gt;

&lt;p&gt;First, I created a class &lt;code&gt;Records&lt;/code&gt; to contain all the variables that come with a blood glucose record, including the timestamp and conversion calculation from my mom's mg/dL reading to the more widely used mmol/L metric. Class variables such as the start times of different meal periods also allow the data to be automatically tagged across the three meals + midnight instances when my mom gets her dose of insulin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0dIIlAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm5exnwpksltmsfxexet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0dIIlAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm5exnwpksltmsfxexet.png" alt="the class Records"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bulk of the program includes three main functionalities, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new log by entering the latest reading&lt;/li&gt;
&lt;li&gt;Retrieve all logs from a given date&lt;/li&gt;
&lt;li&gt;Calculate the 2-week average reading (that is indicative of overall glucose levels) &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The records are all stored in a .csv file that could be easily printed for my mom to take to the doctor's office. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPDvbWaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gvlnkm15dxv3gnlqpvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPDvbWaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gvlnkm15dxv3gnlqpvk.png" alt="3 Main Functionalities"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, I put the running program into a loopable &lt;code&gt;script()&lt;/code&gt; that called the functionalities previously defined. With the &lt;code&gt;rerun()&lt;/code&gt; function, my mom can also return to the main menu and check the log after putting in the record.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8IUCAzE8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a38ym9qz7nn6t61cyj0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8IUCAzE8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a38ym9qz7nn6t61cyj0l.png" alt="Script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though the datetime and csv modules took a lot of googling to get around, I am thoroughly pleased with the result of this project. I look forward to learning other languages in the future that will enable me to create a more user-friendly GUI, such that my mom could actually use the application!&lt;/p&gt;

&lt;p&gt;Here's the program running in full:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CR8LDyGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tu6lfm5n62tevyttukp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CR8LDyGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tu6lfm5n62tevyttukp.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code file and version history can be found on &lt;a href="https://github.com/kateleext/blood_log"&gt;https://github.com/kateleext/blood_log&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>codecademy</category>
    </item>
    <item>
      <title>How To Create Pop Up Login Form Using HTML and CSS</title>
      <author>Sonali Roy</author>
      <pubDate>Wed, 12 May 2021 15:34:39 +0000</pubDate>
      <link>https://dev.to/sonali_roy/how-to-create-pop-up-login-form-using-html-and-css-1bji</link>
      <guid>https://dev.to/sonali_roy/how-to-create-pop-up-login-form-using-html-and-css-1bji</guid>
      <description>&lt;p&gt;Hello friends, today I am going to show you how to create a pop-up login form using only HTML and CSS code. &lt;/p&gt;

&lt;p&gt;I created this login page in the form of a neomorphic design. Like the normal login form, it has everything here i.e. a place to input the email ID and password for login. There is also a login button below.&lt;/p&gt;

&lt;p&gt;In this program, at first, on the webpage, there is a white button with "Sign In" text. And when you click on that button then the &lt;a href="https://www.foolishdeveloper.com/2021/05/how-to-create-pop-up-login-form-using.html"&gt;Popup or Modal Login Form&lt;/a&gt; will be displayed.&lt;/p&gt;

&lt;p&gt;You can copy the codes from the given boxes or &lt;a href="https://www.foolishdeveloper.com/2021/05/how-to-create-pop-up-login-form-using.html"&gt;download the code files&lt;/a&gt; from the given link.&lt;/p&gt;

&lt;p&gt;HTML Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"popup"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"popup-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close-btn"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"togglePopup()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     √ó&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Sign in&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"validate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"validate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"second-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Don't have an account? &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/signup.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign Up&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;


   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"togglePopup()"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"first-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign In&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;raleway&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-150%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;56px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-25px&lt;/span&gt; &lt;span class="m"&gt;-25px&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup&lt;/span&gt; &lt;span class="nc"&gt;.close-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup.active&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input-field&lt;/span&gt; &lt;span class="nc"&gt;.validate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bfc0c0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#232323&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.first-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-15px&lt;/span&gt; &lt;span class="m"&gt;-15px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;#1e1e1e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;.35s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.first-button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;145deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.second-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#202020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="m"&gt;-8px&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#2c2c2c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;.35s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.second-button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;145deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#222222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#292929&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#262626&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bfc0c0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;togglePopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popup-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
