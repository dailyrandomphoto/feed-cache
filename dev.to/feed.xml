<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>LikedList Questions: Delete nth node from end in Single Pass</title>
      <author>Kathan Vakharia</author>
      <pubDate>Wed, 30 Jun 2021 22:25:23 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/likedlist-questions-delete-nth-node-from-end-single-pass-48d</link>
      <guid>https://dev.to/kathanvakharia/likedlist-questions-delete-nth-node-from-end-single-pass-48d</guid>
      <description>&lt;p&gt;In this series of posts, I will discuss coding questions on the &lt;code&gt;LinkedList&lt;/code&gt; Data structure.&lt;br&gt;
The posts in this series will be organized in the following way,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Question Link ‚ùì&lt;/li&gt;
&lt;li&gt;Possible Explanation üìù&lt;/li&gt;
&lt;li&gt;Documented C++ Code üßπ&lt;/li&gt;
&lt;li&gt;Time and Space Complexity Analysis ‚åõüåå&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;Given the¬†&lt;code&gt;head&lt;/code&gt;¬†of a linked list, remove the¬†&lt;code&gt;nth&lt;/code&gt;¬†node from the end of the list and return its head.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The number of nodes in the list is¬†&lt;code&gt;sz&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= sz &amp;lt;= 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= Node.val &amp;lt;= 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= sz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/"&gt;https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° Give yourself atleast 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#approach-2-single-pass"&gt;
  &lt;/a&gt;
  Approach 2: Single Pass
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-do-i-mean-by-single-pass-here"&gt;
  &lt;/a&gt;
  What do I mean by single pass here?
&lt;/h3&gt;

&lt;p&gt;If you recall in the last post, we travelled the list two times:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kathanvakharia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuqECyTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bhbJL83l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/458861/ab6297f8-b3bc-440d-bcba-e002322f382a.jpg" alt="kathanvakharia"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kathanvakharia/likedlist-questions-delete-nth-node-from-end-in-two-pass-2j63" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;LinkedList Questions: Delete nth node from end in Two Pass&lt;/h2&gt;
      &lt;h3&gt;Kathan Vakharia „Éª Jun 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#algorithms&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linkedlist&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;To calculate the length of list.&lt;/li&gt;
&lt;li&gt;To delete the &lt;code&gt;L - n + 1&lt;/code&gt; th node where &lt;code&gt;L&lt;/code&gt; is the length of list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's the reason we called it two pass method. &lt;/p&gt;

&lt;p&gt;But in this approach, we will travel the list only one time i.e. every node will be travelled &lt;em&gt;exactly once&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-blocks"&gt;
  &lt;/a&gt;
  Building Blocks
&lt;/h3&gt;

&lt;p&gt;Before we begin our discussion, I would like you to be aware of few observations when traversing a linkedlist. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you travel &lt;code&gt;m&lt;/code&gt; distance from the start, you'll end being on the &lt;code&gt;m + 1&lt;/code&gt; th node.&lt;/li&gt;
&lt;li&gt;If you append a dummy node( &lt;code&gt;start&lt;/code&gt; ) at the start of linkedlist, we can reach the &lt;code&gt;m&lt;/code&gt;th node in &lt;em&gt;original&lt;/em&gt; linkedlist in &lt;code&gt;m&lt;/code&gt; steps from &lt;code&gt;start&lt;/code&gt;. ( 1 step means &lt;code&gt;cur = cur‚Üínext&lt;/code&gt; operation )&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-approach"&gt;
  &lt;/a&gt;
  The Approach
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;üìì This approach might look a bit complicated but believe me, it is VERY important to understand it as this method forms the basis of many other questions( important ones ) on linkedlist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Inorder to understand images, consider L=6( ListLength ) and n=3( postion of node from end that is to be deleted ).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The idea is still the same, we would want to delete the &lt;code&gt;L - n + 1&lt;/code&gt; th node from the beginning.&lt;/p&gt;

&lt;p&gt;Here's what we will do, &lt;/p&gt;

&lt;p&gt;1) Create a dummy node &lt;code&gt;start&lt;/code&gt;  and make it' s &lt;code&gt;next&lt;/code&gt; equal to &lt;code&gt;head&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uID8hRWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oa0xix5gg556txtojn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uID8hRWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oa0xix5gg556txtojn4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Initialize two pointers &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;slow&lt;/code&gt; equal to  &lt;code&gt;start&lt;/code&gt; node i.e their &lt;code&gt;next&lt;/code&gt; is equal to &lt;code&gt;head&lt;/code&gt; .&lt;br&gt;
3) Make &lt;code&gt;fast&lt;/code&gt; point to the &lt;code&gt;n&lt;/code&gt;th node in original linkedlist by peforming &lt;code&gt;n&lt;/code&gt; iterations( steps ).&lt;br&gt;
     üéØ Now hold on and think, how much steps will it take for  &lt;code&gt;fast&lt;/code&gt;  to reach the last node?&lt;br&gt;
     üéØ We are at the &lt;code&gt;n&lt;/code&gt;th node from start, so after &lt;code&gt;L - n&lt;/code&gt; steps we will reach the last node. [&lt;strong&gt;IMP&lt;/strong&gt;]&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rdp1v5oJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjkg8a8tjoacaihgj100.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rdp1v5oJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjkg8a8tjoacaihgj100.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Move &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;slow&lt;/code&gt; simultaneouly &lt;em&gt;one&lt;/em&gt; step at a time untill &lt;code&gt;fast&lt;/code&gt; reaches the &lt;em&gt;last&lt;/em&gt; node. This will ensure both pointers perform &lt;code&gt;L - n&lt;/code&gt;  steps.&lt;br&gt;
     üéØ This will ensure, now &lt;code&gt;slow&lt;/code&gt; points to the &lt;code&gt;L - n&lt;/code&gt; th node. ( &lt;a href="#building-blocks"&gt;Point 2&lt;/a&gt; of buldingblocks )&lt;br&gt;
5) Delete the required node( &lt;code&gt;slow ‚Üí next&lt;/code&gt; ) using &lt;code&gt;slow&lt;/code&gt; pointer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9joCHC1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3ax1o5elnuyvvbfrobr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9joCHC1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3ax1o5elnuyvvbfrobr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linkedlist"&gt;
  &lt;/a&gt;
  Definition of LinkedList
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;removeNthFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//! list is never empty&lt;/span&gt;

        &lt;span class="c1"&gt;//- initializing pointers&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//make fast point to the nth node&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//move "slow" ahead untill "fast" points to the last node&lt;/span&gt;
        &lt;span class="c1"&gt;//i.e point "slow" to one node preceding the required node&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//deleting the nth node from end or n-k+1th node from begin&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;L&lt;/code&gt; is the length of linkedlist here&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-ol"&gt;
  &lt;/a&gt;
  Time Complexity: O(L)
&lt;/h3&gt;

&lt;p&gt;We have travelled the list exactly once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-o1"&gt;
  &lt;/a&gt;
  Space Complexity: O(1)
&lt;/h3&gt;

&lt;p&gt;We didn't use any extra space.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>cpp</category>
      <category>codenewbie</category>
      <category>linkedlist</category>
    </item>
    <item>
      <title>üé¨Build a Step Progress Bar | JavaScript‚ú®</title>
      <author>Robson Muniz</author>
      <pubDate>Wed, 30 Jun 2021 21:16:23 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/build-a-step-progress-bar-javascript-4lep</link>
      <guid>https://dev.to/robsonmuniz16/build-a-step-progress-bar-javascript-4lep</guid>
      <description>&lt;p&gt;In this episode you will Learn how to build a Step Progress Bar with HTML, CSS, and JavaScript, step-by-step the easy way!&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qKjDXXkkg8I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;üèÜ Recommended Projects üèÜ&lt;br&gt;
üé¨ Neumorphism Login Form | HTML &amp;amp; CSS&lt;br&gt;
‚û§&lt;a href="https://youtu.be/QWh0S-3D7uY"&gt;https://youtu.be/QWh0S-3D7uY&lt;/a&gt;&lt;br&gt;
üé¨ Animated Sidebar Menu with HTML &amp;amp; CSS&lt;br&gt;
‚û§ Watch: &lt;a href="https://youtu.be/QPZrQ_xPVs4"&gt;https://youtu.be/QPZrQ_xPVs4&lt;/a&gt;&lt;br&gt;
üé¨ Amazing Social Media Buttons Hover Effects | HTML &amp;amp; CSS&lt;br&gt;
‚û§ &lt;a href="https://youtu.be/P9pi4hq7BBA"&gt;https://youtu.be/P9pi4hq7BBA&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;üõ¥ Follow me on:&lt;br&gt;
üëâ&lt;a href="https://www.facebook.com/WebdevMadeEasy"&gt;https://www.facebook.com/WebdevMadeEasy&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>[Github] What is Git? How do we use it?</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Wed, 30 Jun 2021 20:59:40 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/github-what-is-git-how-do-we-use-it-3b43</link>
      <guid>https://dev.to/yumatsushima07/github-what-is-git-how-do-we-use-it-3b43</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is Git?
&lt;/h2&gt;

&lt;p&gt;If you are a software developer then you must be familiar with Git. Git is vastly used for version/revision control for software development for controlling source code.&lt;/p&gt;

&lt;p&gt;It is a distributed revision control system. Git is better than SVN for speed, data integrity and also support non-linear workflows. &lt;/p&gt;

&lt;p&gt;Git was initially designed and developed by Linus Torvalds for Linux kernel development purpose. Yes you read it correct.&lt;/p&gt;

&lt;p&gt;he creator of the Linux kernel designed and developed Git. Git was initially used for updating source code of the Linux kernel from around the world. &lt;/p&gt;

&lt;p&gt;Like any other version control systems, every Git working directory has a full-fledged repository with complete history and full version-tracking capabilities.&lt;/p&gt;

&lt;p&gt;Git is free software distributed under the terms of the GNU General Public License. Git utility or git tool is available with almost every Linux distributions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;Git deals with  data more like a set of snapshots, snapshots of a miniature filesystem. Every time you commit your file, or save the state of your project in the git project repository, it basically takes a snapshots. So, it stores a reference to that snapshot of what all of your files look like at that moment of commit. To be efficient, fast &amp;amp; accurate if files have not changed, Git does not store that file again for further more changes with your commit. It just simply stored a link to the previous identical file it has already stored.&lt;/p&gt;

&lt;p&gt;It is a great tool with great efficiency for handling  large projects with hundred of thousand files with large project size. Git is primarily developed for Linux. Now a days, it also supports most major operating systems including BSD, Solaris, OS X, and even for Microsoft Windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-can-use-git"&gt;
  &lt;/a&gt;
  How I can use Git?
&lt;/h2&gt;

&lt;p&gt;There are a lot of different ways you can use Git. Most of the time we use command line tools and yes there are many graphical user interfaces (GUI) based software available as well of varying capabilities. I will be using Git on the command line or terminal over here. Command line / terminal is the  place where you can run all Git commands where as you can‚Äôt get all the features of Git on most of the GUIs based Git tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-git"&gt;
  &lt;/a&gt;
  Installing Git
&lt;/h2&gt;

&lt;p&gt;You need to install Git before you start using it. Though most of the Linux distributions comes up with Git as preinstalled. Even if it is already there, it‚Äôs good to update it to the latest version.&lt;/p&gt;

&lt;p&gt;For RedHat / CentOS / Fedora, use the following command in the terminal to install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;yum &lt;span class="nb"&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you‚Äôre on a Debian-based distribution like Ubuntu, try the following command to install it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For openSUSE, use the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zypper &lt;span class="nb"&gt;install &lt;/span&gt;git-core git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For more different Linux distributions, there are instructions for installing on this &lt;a href="https://git-scm.com/download/linux"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-your-identity"&gt;
  &lt;/a&gt;
  Create your identity
&lt;/h2&gt;

&lt;p&gt;First,  you need to  set your user name and email address with git. This is very important as every Git commits you made uses this information.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"Username here"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email xyz@xyz.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#check-your-git-setting"&gt;
  &lt;/a&gt;
  Check your Git setting
&lt;/h2&gt;

&lt;p&gt;To check your git setting, issue the following command in your terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#cloning-a-git-repository"&gt;
  &lt;/a&gt;
  Cloning a Git repository
&lt;/h2&gt;

&lt;p&gt;First, you must clone the git repository for your project to start with and only then you can commit your changes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://gitlab.com/xyz/abc.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above command is showing how you can clone a git repository from a server. The server used in this example for git repository is gitlab and &lt;code&gt;abc.git&lt;/code&gt; is the name. You can use the IP address of the git hosting server or the FQDN of that git sever.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#initialize-a-new-git-repository"&gt;
  &lt;/a&gt;
  Initialize a new Git repository
&lt;/h2&gt;

&lt;p&gt;If you want to start your own git repository sever for your codebase, issue the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will initiate a new git repository and the machine/host can be now used as a git repository server for that particular codebase. You can access the newly created repository by using the host‚Äôs IP or hostname.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#checking-git-status"&gt;
  &lt;/a&gt;
  Checking Git status
&lt;/h2&gt;

&lt;p&gt;You can check the status of files in the index versus the working directory for your git repository by using the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#add-a-new-file-to-git-repository"&gt;
  &lt;/a&gt;
  Add a new file to Git repository
&lt;/h2&gt;

&lt;p&gt;Lets add a file to your newly created git repo. Go to your working folder for your source code.&lt;/p&gt;

&lt;p&gt;Now create a demo file by issuing the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nano demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add these following lines to the &lt;code&gt;demo.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This is a demo file. This is second line of the file.&lt;/p&gt;

&lt;p&gt;Our demo file has been created. Next, add this newly created file to the index of the git repo by issuing.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git add demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we need to commit this to your git repo by using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'first commit'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will add the file ‚Äúdemo.txt‚Äù with it‚Äôs file content and with a comment ‚Äúfirst commit‚Äù so that you can search it later.&lt;/p&gt;

&lt;p&gt;Now, add a third line and commit it again.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nano demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add these following content to the file.&lt;/p&gt;

&lt;p&gt;This is a demo file. This is second line of the file. This is the third line.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'second commit'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will update the file accordingly.&lt;/p&gt;

&lt;p&gt;Now, push the changes to the repository.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will push the changes into the master branch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deleting-a-file-from-git"&gt;
  &lt;/a&gt;
  Deleting a file from Git
&lt;/h2&gt;

&lt;p&gt;Say, you need to remove a file from your git. Just do the following one after another.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git &lt;span class="nb"&gt;rm &lt;/span&gt;documentation.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"documentation.txt  file removed"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You are done removing documentation.txt from your git repository.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-reset"&gt;
  &lt;/a&gt;
  Git Reset
&lt;/h2&gt;

&lt;p&gt;If you want to reset your index and working directory to the state of your last commit or to any commit then issue the following command in the terminal&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git reset &lt;span class="nt"&gt;--hard&lt;/span&gt; commit number/HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#git-stash"&gt;
  &lt;/a&gt;
  Git Stash
&lt;/h2&gt;

&lt;p&gt;Say you made changes in one of your file but you don‚Äôt want to commit it to the repo then you can stash it and also you can push it later as well.&lt;/p&gt;

&lt;p&gt;Simply type...&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#git-pull"&gt;
  &lt;/a&gt;
  Git Pull
&lt;/h2&gt;

&lt;p&gt;If you want to sync your local git codebase with the latest codebase of the git remote server repository, you need to use the following command. It will fetches files from the remote repository and merges it with your local one.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#viewing-log-file"&gt;
  &lt;/a&gt;
  Viewing log file
&lt;/h2&gt;

&lt;p&gt;If you want to see a listing of commits on a master branch including details with logs, type the following&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#checking-git-branch"&gt;
  &lt;/a&gt;
  Checking Git branch
&lt;/h2&gt;

&lt;p&gt;A Git repository can have multiple branch including master branch. To know your git branch, issue the following on your terminal&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I tried to cover all the very basics of git in this article. I don‚Äôt want to make it complex. That‚Äôs why I don‚Äôt dive deep onto it. Hope you liked it. Thank you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
‚ùØ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
‚ùØ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
‚ùØ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/hack-with-your-heart-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>linux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Developing a Kubernetes Operator for a Real Time Data Platform</title>
      <author>Natalie</author>
      <pubDate>Wed, 30 Jun 2021 20:55:20 +0000</pubDate>
      <link>https://dev.to/aerospike/developing-a-kubernetes-operator-for-a-real-time-data-platform-1da</link>
      <guid>https://dev.to/aerospike/developing-a-kubernetes-operator-for-a-real-time-data-platform-1da</guid>
      <description>&lt;p&gt;In this article we‚Äôll cover the basics of &lt;a href="https://aerospike.com/products/kubernetes-operator"&gt;Aerospike‚Äôs Kubernetes operator&lt;/a&gt; and how we went about several engineering challenges we faced. We‚Äôll then discuss the capabilities of the Aerospike Kubernetes Operator , and go over 3 engineering challenges we faced when developing it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-kubernetes-operators"&gt;
  &lt;/a&gt;
  What Are Kubernetes Operators?
&lt;/h1&gt;

&lt;p&gt;Kubernetes was designed to support automation of deployment and ongoing management of containerized applications in a cluster. Below are some key concepts and terms you‚Äôll need to understand before we get into the specifics of the operator for Aerospike DB.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;resource&lt;/strong&gt; is an endpoint in the Kubernetes API that stores a collection of API objects of a certain kind. For example, the built-in Pods resource contains a collection of Pod objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Controllers&lt;/strong&gt; are control loops that watch the state of your cluster, then make or request changes where needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Custom Resource&lt;/strong&gt; introduces your API into a cluster. This is an extension of the Kubernetes API that is not available in a default Kubernetes installation. It represents a customization of a particular Kubernetes installation and is fairly common.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Custom Resource Definition (CRD)&lt;/strong&gt; file defines your own object kinds and lets the API Server handle the entire lifecycle&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operators&lt;/strong&gt; are clients of the k8s API, and they act as controllers for a custom resource&lt;/p&gt;

&lt;p&gt;To summarize: Resources and Custom Resources define the particulars related to a specific application, in this case Aerospike Database.  Controllers and operators control the resources and custom resources, respectively, providing a framework for deploying and managing complex distributed applications.&lt;/p&gt;

&lt;p&gt;New complex distributed architectures have been developed to meet the demands of Internet scale. Simultaneously more agile development models have been adopted in order to meet the competitive demands to evolve applications on an ongoing basis. By providing a foundation for automation, Operators minimize the costs of personnel, and more importantly take the variability of human performance of repetitive tasks out of the equation.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2b1ffqxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhasl7mnwdsr9krqr4a9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2b1ffqxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhasl7mnwdsr9krqr4a9.png" alt="credit: Natalie Pistunovich"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#aerospikes-features"&gt;
  &lt;/a&gt;
  Aerospike‚Äôs Features
&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://aerospike.com/"&gt;Aerospike&lt;/a&gt; is a Real Time Data Platform that acts across billions of transactions while reducing the server footprint. The nature of it, and the requirements of our customers introduce some special considerations for what it can do, and how.&lt;/p&gt;

&lt;p&gt;The Aerospike Kubernetes operator deploys the database clusters and handles everything related to cycle management. To name a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cluster scale up and down (number of nodes per cluster as well as resource allocation per node)&lt;/li&gt;
&lt;li&gt;Server version up- and downgrade&lt;/li&gt;
&lt;li&gt;Converting YAML-based configurations to Aerospike configuration&lt;/li&gt;
&lt;li&gt;Rack awareness management&lt;/li&gt;
&lt;li&gt;Cluster access control management&lt;/li&gt;
&lt;li&gt;Multi-cluster XDR setup (watch here to get a reminder of it spanning across different types of servers, in different geographical zones, and hardware or cloud or multi-cloud)&lt;/li&gt;
&lt;li&gt;Security: TLS, user management, etc.&lt;/li&gt;
&lt;li&gt;Monitoring of all of the above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many moving parts and the more we automate, the less room for human errors. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-engineering-challenges"&gt;
  &lt;/a&gt;
  3 Engineering Challenges
&lt;/h1&gt;

&lt;p&gt;Due to the special nature of the Aerospike database and the way it‚Äôs being used, we have encountered multiple interesting engineering challenges. Here are 3 of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-persistent-data"&gt;
  &lt;/a&gt;
  1. Persistent Data
&lt;/h2&gt;

&lt;p&gt;Each pod has a dedicated storage. This storage must be persistent because we do want the data to remain even if a pod is restarted.&lt;/p&gt;

&lt;p&gt;So the behavioural logic is:&lt;br&gt;
In case this is the first time you're assigned a volume - clear it. &lt;br&gt;
Just like with computer memory, you cannot assume that the storage is going to be empty.&lt;/p&gt;

&lt;p&gt;In case it's a volume of a restarting pod - keep the data.&lt;br&gt;
It can happen that a pod restarts when changing the configuration, or just a hardware failure. This time, the data that exists in the volume is needed because it‚Äôs valid stored values.&lt;/p&gt;

&lt;p&gt;But the problem is that there is no ‚ÄúKubernetes way‚Äù of telling if the pod is a new one or a restarted one. In the scenario where the pod restarts due to configuration change, it‚Äôs likely that the image changed as well, and all the metrics were reset to zero.&lt;/p&gt;

&lt;p&gt;The solution we came up with is using a restart flag in the init containers. These are the containers that are run before your containers run. In the init containers we wipe the data, and then add a flag in the configurations. &lt;br&gt;
This way, when there‚Äôs a pod restart - the flag is already there to signal that the data should not be wiped.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-aborting-a-rolling-update"&gt;
  &lt;/a&gt;
  2. Aborting a Rolling Update
&lt;/h2&gt;

&lt;p&gt;Say that you have a rolling update and you‚Äôre updating a server version across 10 nodes.&lt;br&gt;
In the middle you realize you need to abort and roll back. What happens?&lt;/p&gt;

&lt;p&gt;The screen shows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Node 1‚Ä¶...Updated with v5.6
Node 2‚Ä¶...Updated with v5.6
Node 3‚Ä¶...Updated with v5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is where you hit abort. &lt;/p&gt;

&lt;p&gt;What you want to see next is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Node 1‚Ä¶...Updated with v5.5
Node 2‚Ä¶...Updated with v5.5
Node 3‚Ä¶...Updated with v5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Node 4‚Ä¶...Updated with v5.6
Node 5‚Ä¶...Updated with v5.6
‚Ä¶
Node 10.....Updated with v5.6
Node 1‚Ä¶...Updated with v5.5
Node 2‚Ä¶...Updated with v5.5
Node 3‚Ä¶...Updated with v5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that means you need to interrupt the command in the middle of its execution.&lt;/p&gt;

&lt;p&gt;For this reason we implemented the setup in a way that after every operation the reconciliation requests are requeued. Basically, the operator is asking the API ‚ÄúNow what?‚Äù&lt;br&gt;
This way, after completing updating node number 3 to the new version, the next step would be to ask ‚ÄúWhat do I do now?‚Äù. At this point the API will instruct to apply the old version to nodes 1-3!&lt;/p&gt;

&lt;p&gt;To make things even more efficient the operator requests delay in the response. For example, let's say the node is in the middle of a migration which takes 2 seconds. In this scenario, the operator will ask the API ‚ÄúNow what? Please respond in 2 seconds.‚Äù&lt;br&gt;
The API will hold on with the replying, and this makes sure the operator will get the most up to date command, because a lot can happen in these 2 seconds.&lt;/p&gt;

&lt;p&gt;Sounds like the straightforward and obvious thing to do? Definitely, but de facto not all operators are implemented this way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-achieving-hyper-scale"&gt;
  &lt;/a&gt;
  3. Achieving Hyper -  Scale
&lt;/h2&gt;

&lt;p&gt;Cloud is great for starting fast and for easy maintenance, and indeed many companies are migrating their services to the cloud these days.&lt;/p&gt;

&lt;p&gt;What happens when your customers go to really really large scale?&lt;br&gt;
Many of our clients are already in the field of petabytes (that‚Äôs billiards, the one that comes after billions), and some are making their ways into the exabytes territory (that‚Äôs trillions). They all of course expect to keep the same SLAs of sub milliseconds.&lt;/p&gt;

&lt;p&gt;We all know that the cloud is not homogeneous. The hardware you get is promised with a minimum CPU, but it doesn't mean that all the CPUs have the exact same properties. &lt;br&gt;
At a very large scale, these small differences start to show.&lt;/p&gt;

&lt;p&gt;Aerospike‚Äôs architecture is disk heavy. Sharing resources means that you definitely get a slice but it's hard to cap the size of it. This can mean that one machine might respond slowly to messages. In a distributed database, meta messages are moving around, in addition to the ones that carry data, for example for synchronization purposes. Delay that is caused because of different performance specs can escalate problems, at a very large scale.&lt;/p&gt;

&lt;p&gt;Another potential problem is networking: when the network is not private, you get a slice of it, but you have to share. If you have noisy neighbors they can drive your performance down, and this can have a cascading effect.&lt;/p&gt;

&lt;p&gt;Any of these interruptions are hard to predict, and an operator alone will not solve this.&lt;/p&gt;

&lt;p&gt;The solution that some of our customers, who reached such scales, are doing is private cloud. In such a setup you own the whole host and split the resources internally. In this setup, some good practices include budgeting for some over capacity and maximizing the communication to a local one, to minimize latency influence.&lt;/p&gt;

&lt;p&gt;In this setup too, the Kubernetes Operator is great. After all, Kubernetes started inside Google‚Äôs private cloud.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-recap"&gt;
  &lt;/a&gt;
  Let‚Äôs Recap
&lt;/h1&gt;

&lt;p&gt;We covered the Kubernetes basic terminology around resources and controlling them.&lt;br&gt;
We then discussed our considerations, as a distributed database that operates at a high scale in high speed, in building our own operator. Lastly, we covered 3 of the engineering challenges we had, and how we solved them.&lt;/p&gt;

&lt;p&gt;The operator‚Äôs code is open source on &lt;a href="https://github.com/aerospike/aerospike-kubernetes-operator"&gt;GitHub&lt;/a&gt;, you're welcome to read, learn and contribute!&lt;/p&gt;

</description>
      <category>nosql</category>
      <category>kubernetes</category>
      <category>distributedsystems</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>24 lessons on ML, now on GitHub</title>
      <author>Chris Noring</author>
      <pubDate>Wed, 30 Jun 2021 20:47:10 +0000</pubDate>
      <link>https://dev.to/azure/24-lessons-on-ml-now-on-github-44a2</link>
      <guid>https://dev.to/azure/24-lessons-on-ml-now-on-github-44a2</guid>
      <description>&lt;p&gt;Microsoft just released 24 lessons on Machin Learning, ML. All you need are some basic skills in Python. It covers the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Regression&lt;/li&gt;
&lt;li&gt;Classification&lt;/li&gt;
&lt;li&gt;Clustering&lt;/li&gt;
&lt;li&gt;NLP&lt;/li&gt;
&lt;li&gt;Time series&lt;/li&gt;
&lt;li&gt;Reinforcement Learning&lt;/li&gt;
&lt;li&gt;Real world apps and scenarios&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It uses various SDKs in Python to solve real world problems.&lt;/p&gt;

&lt;p&gt;Get started with ML today!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/microsoft"&gt;
        microsoft
      &lt;/a&gt; / &lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;
        ML-For-Beginners
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      12 weeks, 24 lessons, classic Machine Learning for all
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/ML-For-Beginners/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/5de80cbb57075704e04fe747ad3ad191aa6f34c131df08e56c0d64fd87abcfe8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e737667" alt="GitHub license"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/graphs/contributors/"&gt;&lt;img src="https://camo.githubusercontent.com/5928183d1e2b214910584f0a1a33cef45a70531548904b2257343e04d0b94249/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e737667" alt="GitHub contributors"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/issues/"&gt;&lt;img src="https://camo.githubusercontent.com/aab9f79d64b8b1bf143c160c806b5c79f6cee50240592502c57f312113f7383f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e737667" alt="GitHub issues"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/pulls/"&gt;&lt;img src="https://camo.githubusercontent.com/0a604cca2c6363c6af0501543ef3a6565b7b82fd2ff894be8e417cf8db7d27c3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e737667" alt="GitHub pull-requests"&gt;&lt;/a&gt;
&lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/watchers/"&gt;&lt;img src="https://camo.githubusercontent.com/bfe8956100be641319066aa29911e4d11fd09e14431cba82fc095b55035f63ff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d5761746368266d61784167653d32353932303030" alt="GitHub watchers"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/network/"&gt;&lt;img src="https://camo.githubusercontent.com/867fceddff94068c8fa78dded04460999ab88578567e491ac36a373b08c675d2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d466f726b266d61784167653d32353932303030" alt="GitHub forks"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/ML-For-Beginners/stargazers/"&gt;&lt;img src="https://camo.githubusercontent.com/995add71f05610c992f0bc3353822fed68df7fe8ffe3dc8d0e9196808d1ce32b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6d6963726f736f66742f4d4c2d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d53746172266d61784167653d32353932303030" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Machine Learning for Beginners - A Curriculum&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;üåç Travel around the world as we explore Machine Learning by means of world cultures üåç&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Azure Cloud Advocates at Microsoft are pleased to offer a 12-week, 24-lesson curriculum all about &lt;strong&gt;Machine Learning&lt;/strong&gt;. In this curriculum, you will learn about what is sometimes called &lt;strong&gt;classic machine learning&lt;/strong&gt;, using primarily Scikit-learn as a library and avoiding deep learning, which is covered in our forthcoming 'AI for Beginners' curriculum. Pair these lessons with our forthcoming 'Data Science for Beginners' curriculum, as well!&lt;/p&gt;
&lt;p&gt;Travel with us around the world as we apply these classic techniques to data from many areas of the world. Each lesson includes pre- and post-lesson quizzes, written instructions to complete the lesson, a solution, an assignment and more. Our project-based pedagogy allows you to learn while building, a proven way for new skills to 'stick'.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;‚úçÔ∏è Hearty thanks to our&lt;/strong&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/microsoft/ML-For-Beginners"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;https://github.com/microsoft/ML-For-Beginners&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Tj1XWrDSYJU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>python</category>
      <category>machinelearning</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding Imposter Syndrome</title>
      <author>CodeCast</author>
      <pubDate>Wed, 30 Jun 2021 20:31:15 +0000</pubDate>
      <link>https://dev.to/codecast/understanding-imposter-syndrome-5ge2</link>
      <guid>https://dev.to/codecast/understanding-imposter-syndrome-5ge2</guid>
      <description>&lt;p&gt;Have you ever been in a position where you feel like you‚Äôre a fraud and are going to get found out? Or that you‚Äôre going to get in trouble because everyone else around you seems to know what they‚Äôre doing and you, well‚Ä¶ don‚Äôt. If you‚Äôve been here, then you have experienced ‚ÄòImposter Syndrome‚Äô. &lt;/p&gt;

&lt;p&gt;Imposter syndrome can manifest itself in many different ways, but most commonly it happens when starting a new job or taking on a role that seems to be more advanced than what you have previously experienced. Even the most qualified candidates or experts feel deep down that their accomplishments and achievements are based upon pure luck and it's a complete fluke that they have been given this current opportunity. &lt;/p&gt;

&lt;p&gt;Imposter syndrome can feel different for each person. For some people, they become overridden with anxiety, for others, they present symptoms of depression due to the feeling of inadequacy. Where some might be debilitated from the feeling of imposter syndrome, others might thrive under the self-inflicted pressure and work even harder to prove themselves as valuable and become even more skilled in their chosen field. &lt;/p&gt;

&lt;p&gt;Why people come under the influence of imposter syndrome in the first place is somewhat unknown as there is no one single answer. It is, however, strongly linked with anxiety as imposter syndrome is most commonly found in those in a new environment, therefore the feeling of inadequacy and the fear of not succeeding become more prevalent in this instance. It is important to mention that these fears and feelings occur despite evidence of previous success. Knowing the difference between imposter syndrome and self-doubt is important because it will allow you to make the appropriate adjustments where it‚Äôs needed. Imposter syndrome is more of a temporary, situational experience, whereas self-doubt is typically an ongoing experience and usually affects people developmentally and in different areas of their life. Some could even argue that the false fraudulent weight of imposter syndrome could actually be good for you as it will encourage you to prove yourself and work hard to not feel like you‚Äôre ‚Äòtricking‚Äô people, whereas self-doubt can be pretty harmful as it may prevent you from getting new and exciting opportunities or having impactful experiences in the first place. &lt;/p&gt;

&lt;p&gt;The different forms of imposter syndrome will ultimately result in uniquely impacting an individual's actions. Here are some ways imposter syndrome can negatively affect both your personal and professional life. &lt;/p&gt;

&lt;p&gt;Salary Negotiations: When you feel as though you don‚Äôt deserve to have a seat at whatever table you‚Äôre at, it becomes nearly impossible to advocate for yourself and your future. You should feel comfortable and have confidence within your role to have a conversation about your salary, so try not to allow imposter syndrome to persuade or deter you from recognizing your potential, value, and specialized contributions to your position. &lt;/p&gt;

&lt;p&gt;Asking Questions: ‚ÄòAsk the wrong question, and you‚Äôll be exposed!‚Äô That‚Äôs the sound of imposter syndrome taking over our logical brains and denying us the opportunity to ask important questions, even if you think they are dumb. When we don‚Äôt understand something, the obvious thing to do is ask questions and this is a good thing because our brain is demonstrating curiosity and interest. Imposter syndrome, however, makes us feel like we should already know the answers or that the person we‚Äôre asking will look at us like we don‚Äôt belong here. Trust me when I say to not allow your imposter-brain prevent you from asking any type of question about your work or project, as it will end up holding you back in the long run. &lt;/p&gt;

&lt;p&gt;Workload: When a colleague or your boss hands off more work to you than what you can truly handle, imposter syndrome makes it incredibly difficult to say no or explain that you don‚Äôt have the capacity to take it on. ‚ÄòSaying no to this extra work would mean you can‚Äôt handle your job and can‚Äôt keep up with the rest of your team‚Äô - Your imposter-brain. Once again, this is not true. More often than not, our workload will ebb and flow and sometimes we just won‚Äôt be able to physically do that extra assignment, and not expressing this to your team means the feeling imposter syndrome is forcing you to take on an unreasonable amount of work of which you may not be able to complete.&lt;/p&gt;

&lt;p&gt;Contribution: When we work in a team there are different people with different skill levels all collaborating at once and it can feel intimidating working alongside someone very experienced and a pro at what they do, as you may still be in the learning phase. It‚Äôs not uncommon to feel that your contributions may be below everyone‚Äôs expectations or not very valuable in the grand scheme of the project, but this is just what imposter syndrome will have you believe. Be sure to contribute as much as you can and if your teammates have questions, consider it a great opportunity to add to your skillset.    &lt;/p&gt;

&lt;p&gt;Communication: When we‚Äôre facing imposter syndrome, all we want to do is hide and make sure no one sees us, because if no one knows we exist, the easier it is to go undetected. This theory only makes sense when your imposter syndrome mind is speaking. Communication is the foundation of all good systems and relationships, especially the ones at your job or within your education or profession. Don‚Äôt let yourself avoid communication, and instead embrace speaking to your teammates or colleagues as often as possible to ensure you‚Äôre open to feedback and eager to become better at your role. &lt;/p&gt;

&lt;p&gt;How do we beat imposter syndrome? One of the first steps to overcoming imposter-like emotions is to recognize and acknowledge these thoughts when they occur and put them into perspective. When we are aware and observe these thoughts as opposed to acting or engaging in them means they don‚Äôt have the power to control or consume us, and we can be more deliberate of what feelings we let dictate us. Specific ways in which you can overcome the sometimes crippling fear of imposter syndrome is asking questions as frequently as possible, finding a mentor or someone who can guide you through the phases of your career development or educational journey, or possibly seeking professional help from a therapist or counselor who are highly skilled in helping people overcome these types of challenges. Learning your true value will ultimately determine how you respond to the fear of feeling fraudulent in any situation. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>[JavaScript] 7 OOP fundamentals you will need!</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Wed, 30 Jun 2021 20:26:25 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/javascript-7-oop-fundamentals-you-will-need-4hk8</link>
      <guid>https://dev.to/yumatsushima07/javascript-7-oop-fundamentals-you-will-need-4hk8</guid>
      <description>&lt;p&gt;Object Oriented Programming is one of the most popular ways in programming. Before OOP‚Äôs, list of instructions will be executed one by one. But in OOP‚Äôs we are dealing with Objects and how those objects interact with one another.&lt;/p&gt;

&lt;p&gt;JavaScript supports Object Oriented Programming but not in the same way as other OOP languages(C++, PHP, Java, etc.) do.&lt;/p&gt;

&lt;p&gt;The main difference between JavaScript and the other languages is that there are no Classes in JavaScript whereas Classes are very important for creating objects. However, there are ways through which we can simulate the Class concept in JavaScript. Another important difference is Data Hiding. There is no access specifier like (public, private and protected) in JavaScript but we can simulate the concept using the variable scope in functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-oriented-programming-concepts"&gt;
  &lt;/a&gt;
  Object Oriented Programming Concepts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1) Object&lt;/li&gt;
&lt;li&gt;2) Class&lt;/li&gt;
&lt;li&gt;3) Constructor&lt;/li&gt;
&lt;li&gt;4) Inheritance&lt;/li&gt;
&lt;li&gt;5) Encapsulation&lt;/li&gt;
&lt;li&gt;6) Abstraction&lt;/li&gt;
&lt;li&gt;7) Polymorphism&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#preparing-the-workspace"&gt;
  &lt;/a&gt;
  Preparing the workspace
&lt;/h3&gt;

&lt;p&gt;Create a new file &lt;code&gt;oops.html&lt;/code&gt; and write this code on it. We will write all our JavaScript code on this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;[JavaScript] 7 OOP fundamentals you will need!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;//Write your code here.....&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#1-object"&gt;
  &lt;/a&gt;
  1) Object
&lt;/h4&gt;

&lt;p&gt;Any real time entity is considered as an Object. Every Object will have some properties and functions. For example, consider a person as an object, then he will have properties like name, age, etc., and functions such as walk, talk, eat, think, etc. now let us see how to create objects in JavaScript. As mentioned previously there are so many ways to create objects in JavaScript like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//1)Creating Object through literal&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="c1"&gt;//2)Creating with Object.create&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//3)Creating using new keyword&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can use any of the above ways to create Object.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-class"&gt;
  &lt;/a&gt;
  2) Class
&lt;/h4&gt;

&lt;p&gt;As I said earlier there are no classes in JavaScript as it is Prototype based language. But we can simulate the class concept using JavaScript functions.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//Properties&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ben&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;18&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//functions&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Says Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Creating person instance&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#3-constructor"&gt;
  &lt;/a&gt;
  3) Constructor
&lt;/h4&gt;

&lt;p&gt;Actually, Constructor is a concept that comes under Classes. The constructor is used to assign values to the properties of the Class while creating an object using the new operator. In above code we have used name and age as properties for &lt;strong&gt;Person class&lt;/strong&gt;, now we will assign values while creating new objects for &lt;strong&gt;Person class&lt;/strong&gt; as below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//Assigning values through constructor&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//functions&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Says Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Creating person instance&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ben&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;//Creating Second person instance&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#4-inheritance"&gt;
  &lt;/a&gt;
  4) Inheritance
&lt;/h4&gt;

&lt;p&gt;Inheritance is a process of getting the properties and function of one class to other class. For example, let‚Äôs consider &lt;code&gt;Student&lt;/code&gt; Class, here the Student also has the properties of name and age which have been used in Person class. So it‚Äôs much better to acquiring the properties of the Person instead of re-creating the properties. Now let‚Äôs see how we can do the inheritance concept in JavaScript.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="c1"&gt;//1)Prototype based Inhertance&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//2)Inhertance throught Object.create&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stobj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can do inheritance in above two ways.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-encapsulation"&gt;
  &lt;/a&gt;
  5) Encapsulation
&lt;/h4&gt;

&lt;p&gt;Before going on to Encapsulation and Abstraction first we need to know what Data Hiding is and how can we achieve it in JavaScript. Date hiding is protecting the data from accessing it outside the scope. For example, In Person class, we have Date of Birth (DOB) properties which should be protected. Let‚Äôs see how to do it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//this is private variable&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;17/06/2002&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//public properties and functions&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;18&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ben&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getDob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dob&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//this will get undefined&lt;/span&gt;
&lt;span class="c1"&gt;//because it is private to Person&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pobj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Will get dob value we using public&lt;/span&gt;
&lt;span class="c1"&gt;//funtion to get private data&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pobj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDob&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Wrapping up of public and private data into a single data unit is called &lt;strong&gt;Encapsulation&lt;/strong&gt;. The above example is the one that best suites Encapsulation.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#6-abstraction"&gt;
  &lt;/a&gt;
  6) Abstraction
&lt;/h4&gt;

&lt;p&gt;Abstraction means hiding the inner implementation details and showing only outer details. To understand Abstraction we need to understand &lt;strong&gt;Abstract&lt;/strong&gt; and &lt;strong&gt;Interface&lt;/strong&gt; concepts from Java. But we don‚Äôt have any direct Abstract or Interface in JS. Ok! now in order to understand abstraction in JavaScript lets takes an example from JavaScript library Jquery. In Jquery we will use&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ele&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;to select select an element with id &lt;code&gt;ele&lt;/code&gt; on a web page. Actually this code calls negative JavaScript code&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ele&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But we don‚Äôt need to know that we can happy use the &lt;code&gt;$("#ele")&lt;/code&gt; without knowing the inner details of the implementation.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#7-polymorphism"&gt;
  &lt;/a&gt;
  7) Polymorphism
&lt;/h4&gt;

&lt;p&gt;The word Polymorphism in OOPs means having more than one form. In JavaScript an Object, Property, Method can have more than one form. Polymorphism is a very cool feature for dynamic binding or late binding.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//This will create Student Class&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi! I am a Student&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;//This will create Teacher Object&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi! I am a Teacher&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//This will check if the student&lt;/span&gt;
&lt;span class="c1"&gt;//object is instance of Person or not&lt;/span&gt;
&lt;span class="c1"&gt;//if not it won't execute our alert code.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sObj&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hurry! JavaScript supports OOps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;JavaScript supports Object Oriented Programming(OOP)Concepts. But it may not be the direct way. We need to create some simulation for some concepts.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
‚ùØ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
‚ùØ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
‚ùØ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/hack-with-your-heart-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Hands-On Demo With Persistent Data</title>
      <author>Novice</author>
      <pubDate>Wed, 30 Jun 2021 20:23:11 +0000</pubDate>
      <link>https://dev.to/noviicee/hands-on-demo-with-persistent-data-1noc</link>
      <guid>https://dev.to/noviicee/hands-on-demo-with-persistent-data-1noc</guid>
      <description>&lt;p&gt;This is a simple, and beginner-friendly demo to analyze and visualize the data on running containers and &lt;a href="https://dev.to/noviicee/where-does-the-data-go-2329"&gt;&lt;strong&gt;where actually the data on the running containers go&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We first need to create an image in order to build it and run it.&lt;br&gt;
It can be any simple image. If you are new to Docker and Docker Images, you can refer to &lt;a href="https://github.com/noviicee/Docker/tree/main/PersistentDataDemo"&gt;here&lt;/a&gt; for the meanwhile and use the files provided if you face issues in creating a docker image or writing a docker file.&lt;/p&gt;

&lt;p&gt;Now, the motto is to check &lt;a href="https://dev.to/noviicee/where-does-the-data-go-2329"&gt;&lt;strong&gt;where does the data go&lt;/strong&gt;&lt;/a&gt; after a running container is killed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: I am on Ubuntu 20.04.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;The source code for the files that I am using is &lt;a href="https://github.com/noviicee/Docker/tree/main/PersistentDataDemo/Persistent-Data"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Here, we will be covering three cases-&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mysql, no mount, no volume ---&amp;gt; data is lost after killing the container&lt;/li&gt;
&lt;li&gt;mysql, mount ¬† ¬† ¬† ¬† ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† ---&amp;gt; data is kept in the local file&lt;/li&gt;
&lt;li&gt;mysql, volume ¬† ¬†¬†¬†¬†¬†¬†¬† ¬†¬†¬†¬†¬† ¬†¬†¬†¬†¬† ---&amp;gt; data is reserved in the volume&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open up your terminal and navigate to your working directory, i.e, the folder where a &lt;strong&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;/strong&gt; exists, so you can run it.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#1-no-mount-no-volume"&gt;
  &lt;/a&gt;
  1. No mount, No volume
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Expected:&lt;br&gt;
 Data is lost after killing the container&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execution:&lt;br&gt;
 Run the following command in your terminal-&lt;br&gt;
 &lt;code&gt;docker run -d -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JEAQy8nW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7psuge4w0wav6tk8y4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JEAQy8nW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7psuge4w0wav6tk8y4z.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see, the necessary files are being downloaded and the image is getting build.&lt;/p&gt;

&lt;p&gt;Next, we need to get the container-id of the running container.&lt;br&gt;
Use &lt;code&gt;docker -ps&lt;/code&gt; to list all the running containers on your system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgRRTDi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fosyzb867csuj3thq1sj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgRRTDi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fosyzb867csuj3thq1sj.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, I just have a single container so the output shows the id of a single running container.&lt;/p&gt;

&lt;p&gt;Now that we have our container up and running, we can run the following command in order to &lt;strong&gt;attach the image to the container&lt;/strong&gt;:&lt;br&gt;
&lt;code&gt;docker exec -it CONTAINER-ID mysql&lt;/code&gt;&lt;br&gt;
Once we are into mysql, we can create a database, and list it by using-&lt;br&gt;
&lt;code&gt;create database DB_NAME; show databases; exit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jxrqWFkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19zexk654hhg4l5tvo5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jxrqWFkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19zexk654hhg4l5tvo5n.png" alt="5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDAD5TMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9481jw8pg5hxjwu6jb0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDAD5TMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9481jw8pg5hxjwu6jb0.png" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will see that a database is created.&lt;br&gt;
Inside mysql, you can type &lt;code&gt;/c&lt;/code&gt; to clear out the inputs and &lt;code&gt;exit&lt;/code&gt; in order to exit from mysql.&lt;br&gt;
To check whether the database is actually created or not, just &lt;code&gt;ls -a&lt;/code&gt; in your working directory, and it will show you your created database.&lt;/p&gt;

&lt;p&gt;Next, for checking &lt;em&gt;where does the data go&lt;/em&gt;, we need to &lt;strong&gt;delete the container&lt;/strong&gt;. Use the container-id by executing &lt;code&gt;docker -ps&lt;/code&gt; and kill the running container by executing &lt;code&gt;docker kill CONTAINER_ID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The container is now killed. This can also be verified by executing &lt;code&gt;docker -ps&lt;/code&gt; on the terminal, which shows that no container is up at the current moment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a8PYXDy---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wi6iru3qzbyaiy5lobi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8PYXDy---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wi6iru3qzbyaiy5lobi.png" alt="7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if you execute &lt;code&gt;ls -a&lt;/code&gt; in your working directory, you will not be able to see the database or any other file that you might have created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NiXbDiXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nhs9k8452oijv55ij0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NiXbDiXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nhs9k8452oijv55ij0z.png" alt="8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence, by using No mount, No volume, all the data is lost after killing the container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-mount"&gt;
  &lt;/a&gt;
  2. Mount
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Expected:&lt;br&gt;
 Data is kept inside of the local folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execution:&lt;br&gt;
 Run the following command in your terminal-&lt;br&gt;
 &lt;code&gt;docker run -d -e MYSQL_ALLOW_EMPTY_PASSWORD=true -v$(pwd)/mysql-data:/var/lib/mysql mysql&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next step is the same- we need to get the container-id of the running container.&lt;br&gt;
Use &lt;code&gt;docker -ps&lt;/code&gt; to list all the running containers on your system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XyA2QddR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpqkjxut4v31k13aev5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XyA2QddR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpqkjxut4v31k13aev5f.png" alt="9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that our container is up and running, we can run the following command in order to &lt;strong&gt;attach the image to the database&lt;/strong&gt;:&lt;br&gt;
&lt;code&gt;docker exec -it CONTAINER-ID mysql&lt;/code&gt;&lt;br&gt;
Basically the tag &lt;code&gt;-it&lt;/code&gt; is used frequently to tag images in docker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdgYsQq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhim5tlt2ggh6dv8zn98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdgYsQq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhim5tlt2ggh6dv8zn98.png" alt="10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we are into mysql, we can &lt;strong&gt;create a database, and list the database&lt;/strong&gt; by using-&lt;br&gt;
&lt;code&gt;create database DB_NAME; show databases; exit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oJSuaWnN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8afazdq6uhqm7cax36u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oJSuaWnN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8afazdq6uhqm7cax36u.png" alt="11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To check whether the database is actually created or not, just &lt;code&gt;ls -a&lt;/code&gt; in your working directory, and it will show you your created database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J34MhAen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myxuri3jnqmczid9n0w6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J34MhAen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myxuri3jnqmczid9n0w6.png" alt="12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to check for the data, we &lt;strong&gt;delete the container&lt;/strong&gt;. Use the container-id by executing &lt;code&gt;docker -ps&lt;/code&gt; and kill the running container by executing &lt;code&gt;docker kill CONTAINER_ID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The container is now killed. This can be verified by executing &lt;code&gt;docker -ps&lt;/code&gt; on the terminal, which shows that no container is up at the current moment.&lt;br&gt;
The full flow can be seen in the snippet below-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fzPxMHvw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffwheuil87nc4xbkhc4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fzPxMHvw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffwheuil87nc4xbkhc4c.png" alt="13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if you execute &lt;code&gt;ls -a&lt;/code&gt; in your working directory, you will notice that the created database still exits in the local folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p46YHgf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5o9uaz00vb4x32yqtba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p46YHgf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5o9uaz00vb4x32yqtba.png" alt="14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence, by using Mount, the data is kept in the local folder even after the container has been killed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-volume"&gt;
  &lt;/a&gt;
  3. Volume
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Expected:&lt;br&gt;
 Data is preserved inside the volume.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execution:&lt;br&gt;
 Run the following command in your terminal-&lt;br&gt;
 &lt;code&gt;docker run -d -e MYSQL_ALLOW_EMPTY_PASSWORD=true -v mysql/data:/var/lib/mysql mysql&lt;/code&gt; in order to start up and run the container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next steps are the same as the above two, that is, to get the container-id of the running container using &lt;code&gt;docker -ps&lt;/code&gt; and then &lt;strong&gt;attach to the database&lt;/strong&gt; using the command-&lt;br&gt;
&lt;code&gt;docker exec -it CONTAINER-ID mysql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2fnxmEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myyya28ppcatty0crpm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2fnxmEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myyya28ppcatty0crpm0.png" alt="15"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qpOIhLyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcp8pfq4zcccrpghurka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpOIhLyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcp8pfq4zcccrpghurka.png" alt="16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we are into mysql, we can &lt;strong&gt;create a database, and list the database&lt;/strong&gt; by using-&lt;br&gt;
&lt;code&gt;create database DB_NAME; show databases; exit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--105dYfwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmkun3ebbeap8dbclx9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--105dYfwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmkun3ebbeap8dbclx9d.png" alt="17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the database is created.&lt;br&gt;
You can type &lt;code&gt;/c&lt;/code&gt; to clear out the inputs inside mysql and &lt;code&gt;exit&lt;/code&gt; in order to exit from mysql.&lt;/p&gt;

&lt;p&gt;Now we want to check for the data existence, so we &lt;strong&gt;delete the container&lt;/strong&gt;. Use the container-id by using &lt;code&gt;docker -ps&lt;/code&gt; and kill the running container by executing &lt;code&gt;docker kill CONTAINER_ID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xoxHJxi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfmddjdb49q7glo1y7gp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xoxHJxi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfmddjdb49q7glo1y7gp.png" alt="18"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The container is now killed. This can be verified by executing &lt;code&gt;docker -ps&lt;/code&gt; on the terminal, which shows that no container is up at the current moment.&lt;/p&gt;

&lt;p&gt;Now, if you will want to check for the data in the volume-&lt;/p&gt;

&lt;p&gt;By simply typing &lt;strong&gt;volume&lt;/strong&gt; on the terminal, we will see that there are a bunch of options provided for us in order to help use the &lt;em&gt;volume&lt;/em&gt; command-&lt;/p&gt;

&lt;p&gt;One of those is the &lt;code&gt;volume ls&lt;/code&gt;. This command lists all the volumes present on our local machine.&lt;br&gt;
We just execute &lt;code&gt;volume ls&lt;/code&gt; on the terminal. In the output, we can see that our created database &lt;strong&gt;&lt;em&gt;mysql-data&lt;/em&gt;&lt;/strong&gt; still exists even after deleting the container.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mRC5Pj9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d42n06wq4eujw6m4p4co.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mRC5Pj9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d42n06wq4eujw6m4p4co.png" alt="19"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another command that can be used here is the &lt;code&gt;volume inspect VOLUME-NAME&lt;/code&gt;&lt;br&gt;
On executing the above command, it will display the details on the particular volume. It can be seen in the snippet below-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8x9M4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57d56td19l8kwale4245.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8x9M4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57d56td19l8kwale4245.png" alt="20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence, by using Volume, we can see that the data is kept preserved in the volume even after the container has been killed.&lt;/p&gt;




&lt;p&gt;This was pretty much for analyzing and getting a basic idea of the persistent-data on running containers.&lt;/p&gt;

&lt;p&gt;If you are new to the topic you can refer to -&amp;gt; &lt;a href="https://dev.to/noviicee/where-does-the-data-go-2329"&gt;Where does the data go&lt;/a&gt;&lt;br&gt;
New to Docker and Containers? Refer to -&amp;gt; &lt;a href="https://dev.to/noviicee/beginner-s-guide-to-docker-42co"&gt;Beginner's guide to Docker&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Some additional resources for help:&lt;/em&gt;&lt;br&gt;
&lt;a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/"&gt;Inspect Docker Volume&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.digitalocean.com/community/questions/how-to-check-the-disk-usage-of-all-running-docker-containers"&gt;Digital Ocean on Docker Volumes&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>docker</category>
      <category>kubernetes</category>
      <category>beginners</category>
    </item>
    <item>
      <title>LDAP Authentication in Golang with Bind and Search</title>
      <author>Rƒ±dvan T√ºlemen</author>
      <pubDate>Wed, 30 Jun 2021 19:31:52 +0000</pubDate>
      <link>https://dev.to/openlab/ldap-authentication-in-golang-with-bind-and-search-47h5</link>
      <guid>https://dev.to/openlab/ldap-authentication-in-golang-with-bind-and-search-47h5</guid>
      <description>&lt;p&gt;If you are familiar with the &lt;strong&gt;Windows Active Directory&lt;/strong&gt; or &lt;strong&gt;Samba&lt;/strong&gt;, you may have already heard about &lt;strong&gt;LDAP&lt;/strong&gt;. But if you didn't, &lt;a href="https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol"&gt;&lt;em&gt;here is the description in Wikipedia.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Lightweight Directory Access Protocol (LDAP)&lt;/strong&gt; is an open, vendor-neutral, industry standard application protocol for accessing and maintaining distributed directory information services over an Internet Protocol (IP) network.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-project"&gt;
  &lt;/a&gt;
  Creating our project
&lt;/h2&gt;

&lt;p&gt;First of all, we need to &lt;strong&gt;download the library&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get github.com/go-ldap/ldap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;Now, we can start using the library. Firstly, we are creating the variables to use them later(If you are going to use &lt;strong&gt;anonymous bind&lt;/strong&gt;, you only need &lt;strong&gt;Filter&lt;/strong&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;BindUsername&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"user@example.com"&lt;/span&gt;
    &lt;span class="n"&gt;BindPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;
    &lt;span class="n"&gt;FQDN&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"DC.example.com"&lt;/span&gt;
    &lt;span class="n"&gt;BaseDN&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cn=Configuration,dc=example,dc=com"&lt;/span&gt;
    &lt;span class="n"&gt;Filter&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"(objectClass=*)"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#connect"&gt;
  &lt;/a&gt;
  Connect
&lt;/h3&gt;

&lt;p&gt;To connect to &lt;strong&gt;LDAP&lt;/strong&gt;, we can use &lt;code&gt;ldap.DialURL()&lt;/code&gt; func. Followed function is solely created to &lt;strong&gt;connect&lt;/strong&gt; to an LDAP server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Ldap Connection without TLS&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// You can also use IP instead of FQDN&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DialURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ldap://%s:389"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FQDN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tls-connect"&gt;
  &lt;/a&gt;
  TLS Connect
&lt;/h3&gt;

&lt;p&gt;If you need &lt;strong&gt;TLS Connection&lt;/strong&gt;, you can use the function below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Ldap Connection with TLS&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ConnectTLS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// You can also use IP instead of FQDN&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DialURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ldaps://%s:636"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FQDN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#anonymous-bind-and-search"&gt;
  &lt;/a&gt;
  Anonymous Bind and Search
&lt;/h3&gt;

&lt;p&gt;If you want &lt;strong&gt;anonymous bind&lt;/strong&gt; in your project, you can use this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Anonymous Bind and Search&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;AnonymousBindAndSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnauthenticatedBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;anonReq&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSearchRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScopeBaseObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// you can also use ldap.ScopeWholeSubtree&lt;/span&gt;
        &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NeverDerefAliases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anonReq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Anonymous Bind Search Error: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Couldn't fetch anonymous bind search entries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bind-and-search"&gt;
  &lt;/a&gt;
  Bind and Search
&lt;/h3&gt;

&lt;p&gt;If you prefer &lt;strong&gt;normal binding&lt;/strong&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Normal Bind and Search&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;BindAndSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BindUsername&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BindPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;searchReq&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSearchRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;BaseDN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScopeBaseObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// you can also use ldap.ScopeWholeSubtree&lt;/span&gt;
        &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NeverDerefAliases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchReq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Search Error: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Couldn't fetch search entries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#main-func"&gt;
  &lt;/a&gt;
  Main Func
&lt;/h3&gt;

&lt;p&gt;Last of all, we need to create a main function to use these functions:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bind-and-search-with-tls-connection"&gt;
  &lt;/a&gt;
  Bind and Search with TLS Connection
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// TLS Connection&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ConnectTLS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Normal Bind and Search&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BindAndSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#anonymous-bind-and-search-with-nontls-connection"&gt;
  &lt;/a&gt;
  Anonymous Bind and Search with Non-TLS Connection
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Non-TLS Connection&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Anonymous Bind and Search&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;AnonymousBindAndSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;After these functions, I believe you can start using LDAP authentication, bind and search. At the end, the code should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/go-ldap/ldap/v3"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;BindUsername&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"user@example.com"&lt;/span&gt;
    &lt;span class="n"&gt;BindPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;
    &lt;span class="n"&gt;FQDN&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"DC.example.com"&lt;/span&gt;
    &lt;span class="n"&gt;BaseDN&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cn=Configuration,dc=example,dc=com"&lt;/span&gt;
    &lt;span class="n"&gt;Filter&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"(objectClass=*)"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// TLS Connection&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ConnectTLS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Non-TLS Connection&lt;/span&gt;
    &lt;span class="c"&gt;//l, err := Connect()&lt;/span&gt;
    &lt;span class="c"&gt;//if err != nil {&lt;/span&gt;
    &lt;span class="c"&gt;//  log.Fatal(err)&lt;/span&gt;
    &lt;span class="c"&gt;//}&lt;/span&gt;
    &lt;span class="c"&gt;//defer l.Close()&lt;/span&gt;

    &lt;span class="c"&gt;// Anonymous Bind and Search&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;AnonymousBindAndSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Normal Bind and Search&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BindAndSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Ldap Connection with TLS&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ConnectTLS&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// You can also use IP instead of FQDN&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DialURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ldaps://%s:636"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FQDN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Ldap Connection without TLS&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// You can also use IP instead of FQDN&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DialURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ldap://%s:389"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FQDN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Anonymous Bind and Search&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;AnonymousBindAndSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnauthenticatedBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;anonReq&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSearchRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScopeBaseObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// you can also use ldap.ScopeWholeSubtree&lt;/span&gt;
        &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NeverDerefAliases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anonReq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Anonymous Bind Search Error: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Couldn't fetch anonymous bind search entries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Normal Bind and Search&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;BindAndSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SearchResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BindUsername&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BindPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;searchReq&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSearchRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;BaseDN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScopeBaseObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// you can also use ldap.ScopeWholeSubtree&lt;/span&gt;
        &lt;span class="n"&gt;ldap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NeverDerefAliases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchReq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Search Error: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Couldn't fetch search entries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also check out the &lt;a href="https://gist.github.com/StarBuckR/68663e7b16e2e7ae7adb2e7a9b86a545"&gt;gist&lt;/a&gt; I created.&lt;/p&gt;

&lt;p&gt;Thank you for reading. I hope you found this article helpful.&lt;/p&gt;

</description>
      <category>go</category>
      <category>ldap</category>
      <category>authentication</category>
    </item>
    <item>
      <title>Using the Strangler Pattern to Break Down Your E-Commerce Monolith</title>
      <author>James Konik</author>
      <pubDate>Wed, 30 Jun 2021 19:24:10 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/using-the-strangler-pattern-to-break-down-your-e-commerce-monolith-aem</link>
      <guid>https://dev.to/fabric_commerce/using-the-strangler-pattern-to-break-down-your-e-commerce-monolith-aem</guid>
      <description>&lt;p&gt;Monolithic platforms like &lt;a href="https://resources.fabric.inc/blog/shopify-plus-to-microservices"&gt;Shopify&lt;/a&gt;, &lt;a href="https://resources.fabric.inc/blog/oracle-atg-to-microservices"&gt;Oracle ATG&lt;/a&gt;, and &lt;a href="https://resources.fabric.inc/blog/bigcommerce-to-microservices"&gt;BigCommerce&lt;/a&gt; are easy to get up and running. However, they lock you into various platform-specific limitations. As a result, you're subject to each platform‚Äôs constraints and may feel stuck using one-size-fits-all software.&lt;/p&gt;

&lt;p&gt;You face similar challenges if you‚Äôve built your own e-commerce monolith. When more components of the application are intertwined, it is harder to modify features, scale components, or divide the work. After years of using one of these systems, technical debt builds up and changes are hard to implement.&lt;/p&gt;

&lt;p&gt;Microservices solve such problems. You can modularize your e-commerce business. Adapting quickly to the wealth of new opportunities to engage with your customers is a competitive advantage. That's why modern tech companies like &lt;a href="https://blog.dreamfactory.com/microservices-examples/"&gt;Netflix, Amazon, and Etsy&lt;/a&gt; have all switched to microservices.&lt;/p&gt;

&lt;p&gt;Migrating from monolith to microservices provides many technical and business challenges. One approach that helps to replace your monolith is the &lt;a href="https://martinfowler.com/bliki/StranglerFigApplication.html"&gt;strangler pattern&lt;/a&gt;. It does so one service at a time.&lt;/p&gt;

&lt;p&gt;In this post, you‚Äôll learn how to use the strangler pattern to break down each piece of your e-commerce monolith until you‚Äôve replaced it with discrete, scalable microservices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-microservices"&gt;
  &lt;/a&gt;
  Why Microservices?
&lt;/h2&gt;

&lt;p&gt;Microservices have several advantages over a monolithic approach:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-flexibility"&gt;
  &lt;/a&gt;
  Technical flexibility
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One-size-fits-all platforms are fast and convenient when you get started, but as your business develops, issues start to arise. &lt;/li&gt;
&lt;li&gt;With microservices, you are free to implement the programming languages and third-party services that are best for each piece of your application. 
Because they‚Äôre scalable and modular, your decisions don‚Äôt tie you down.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flexibility"&gt;
  &lt;/a&gt;
  Flexibility
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Microservices are independent and decoupled from your frontend. That means you can easily build new ways to reach your customers and wire them up to your services without having to reinvent the wheel each time. &lt;/li&gt;
&lt;li&gt;With your own services, you can ensure each service matches your needs, defining the data format, and functionality. You can also control how user access is structured. 
Flexibility also prevents bottlenecks as your teams are not &lt;a href="(https://dzone.com/articles/monolith-to-microservices-using-the-strangler-patt)"&gt;dependent&lt;/a&gt; on each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Attackers that &lt;a href="https://resources.fabric.inc/blog/ecommerce-security"&gt;gain access&lt;/a&gt; to your monolithic platform often gain access to &lt;em&gt;everything&lt;/em&gt; - customer, product, and order data. Microservices can create silos between services, keeping them more secure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scalability and the ability to focus resources on your more heavily trafficked services dynamically mean you can improve performance. 
For example, Best Buy improved its catalog API &lt;a href="https://blog.runscope.com/posts/monolith-microservices-transforming-real-world-ecommerce-platform-using-strangler-pattern"&gt;sync time&lt;/a&gt; from 24 hours to under 15 minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-strangler-pattern"&gt;
  &lt;/a&gt;
  What is the Strangler Pattern?
&lt;/h2&gt;

&lt;p&gt;The strangler pattern takes its name from the &lt;a href="https://en.wikipedia.org/wiki/Strangler_fig"&gt;strangler fig&lt;/a&gt; tree. Like the tree, you use your existing application as a base. Then, you build a new service that replaces one specific element of it. When it‚Äôs done you retire the old part of the application.&lt;/p&gt;

&lt;p&gt;You continue this service by service until the new microservices replace your entire monolith. You ‚Äòstrangled‚Äô the old code and thus can abandon it completely. &lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://blogs.sap.com/2017/09/25/strangler-applications-monolith-to-microservices/"&gt;three phases in the strangler lifecycle&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Transform&lt;/strong&gt; the application by creating new versions of existing services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Co-exist&lt;/strong&gt; with the old application running alongside an ever-increasing number of microservices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Eliminate&lt;/strong&gt; the old when the new services completely replace the old system.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#strangler-vs-waterfall-approach"&gt;
  &lt;/a&gt;
  Strangler vs. waterfall approach
&lt;/h3&gt;

&lt;p&gt;Besides the strangler pattern there is also the waterfall replacement pattern, the more common approach to migrating microservices. The waterfall pattern requires you to commit to a long development and deployment cycle, which &lt;a href="https://insidenow.deloitte.lu/is-waterfall-only-option/article/"&gt;increases the risk of bugs and lowers your velocity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The waterfall method can take &lt;a href="https://paulhammant.com/2013/02/16/misapplying-bayes-theorem-to-agile-versus-waterfall/"&gt;well over a year to deliver results&lt;/a&gt;, but you can make progress in bursts of six months or less by using the more agile strangler method. It naturally divides work into attainable targets, which means &lt;a href="https://federalnewsnetwork.com/cloud-computing/2016/02/cloud-potential-strangle-outdated-programs-not-post/"&gt;developers are motivated&lt;/a&gt; to complete tasks that deliver visible results.&lt;/p&gt;

&lt;p&gt;With the strangler pattern, you can use each new microservice as soon as it is ready. There‚Äôs no need to build a completely new system. &lt;a href="https://www.kiuwan.com/strangle-pattern-legacy-apps/"&gt;Some recommend&lt;/a&gt; rolling out changes monthly. For one, you can enjoy the advantages quickly. Secondly, it also lets your developers move on to the next project. If issues occur, they can roll pieces of the system back more easily than the whole thing.&lt;/p&gt;

&lt;p&gt;The strangler pattern is often the better option. It allows you to migrate each piece of your infrastructure step-by-step in a manageable, low-risk way and deliver business value faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-downside-to-the-strangler-pattern"&gt;
  &lt;/a&gt;
  The downside to the strangler pattern
&lt;/h3&gt;

&lt;p&gt;There are some caveats. Migrating a complete application one step takes a while. Analyzing &lt;a href="https://www.leadingagile.com/2018/10/the-urge-to-stranglethe-strangler-pattern/"&gt;successful projects&lt;/a&gt; using the strangler pattern suggests to remaining consistent and ensuring your management team commits to the long-term project.&lt;/p&gt;

&lt;p&gt;Microservices benefit from robust development practices (like continuous integration and deployment) and having engineers that are familiar with them. Finding the right team is just as important as picking the right languages and frameworks. It‚Äôs important to make sure your developers are on board with the new processe. If they understand the advantages of the changes, &lt;a href="https://hmh.engineering/why-strangler-applications-are-not-completely-mad-8835c0abd612"&gt;buy-in will be higher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One way to mitigate the risks of migrating to microservices is to use &lt;a href="http://fabric.inc/"&gt;an established e-commerce platform like fabric&lt;/a&gt;. We've built fabric on microservices and can work with your team to ensure a smooth migration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-using-the-strangler-pattern-in-ecommerce"&gt;
  &lt;/a&gt;
  Example: Using the Strangler Pattern in E-Commerce
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs look at how to implement the strangler pattern. I use the monolith provided billing service feature and move it to a new microservice. Then, I'll show you how to migrate important data and features without breaking your existing application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-decide-where-to-start-the-migration"&gt;
  &lt;/a&gt;
  Step 1: Decide where to start the migration
&lt;/h3&gt;

&lt;p&gt;The service you choose to start with depends on your need and the platform you‚Äôre using. There are two common approaches. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Critical features that you need to upgrade:&lt;/strong&gt; If it's impossible to update your legacy codebase or you‚Äôre facing performance issues that cost you customers (like a slow checkout experience), starting here might be best. Ensure everything is watertight before deploying. It takes more time but has more impact.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pick something less critical, to test the process:&lt;/strong&gt; It's a great idea if your developers are implementing microservices for the first time as it‚Äôs less risky. However, it will drive less value for the business.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let‚Äôs look at moving an e-commerce billing address service from a monolithic platform like Oracle ATG to a microservice hosted on AWS. Billing services that are slow or prone to errors might be preventing you from collecting revenue from customers. Thus, they‚Äôre often mission-critical in online stores. &lt;/p&gt;

&lt;p&gt;I‚Äôll only include a couple of attributes, but you can replicate this general pattern with whatever data you need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-build-a-middle-layer"&gt;
  &lt;/a&gt;
  Step 2: Build a middle layer
&lt;/h3&gt;

&lt;p&gt;An API gateway can manage service calls and filter them to either your existing monolith or new services. AWS includes &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started.html"&gt;a guide&lt;/a&gt; on how to do it. A &lt;a href="https://resources.fabric.inc/blog/ecommerce-service-mesh"&gt;service mesh&lt;/a&gt; is also useful for load balancing and routing to manage data flow between your services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1IBoDQJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qdI26Z3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1IBoDQJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qdI26Z3.png" alt="Diagram showing microservice architecture, with multiple services connected to a central service mesh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the middle layer in place, you can switch between your new and old services seamlessly. You could also theoretically A/B test the old and new path or roll back if something goes wrong during the migration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-build-a-new-service-and-migrate-data"&gt;
  &lt;/a&gt;
  Step 3: Build a new service and migrate data
&lt;/h3&gt;

&lt;p&gt;Next, replace the old billing portion of your application with a new microservice. Here‚Äôs some code based on this example from Amazon‚Äôs &lt;a href="https://aws.amazon.com/getting-started/hands-on/break-monolith-app-microservices-ecs-docker-ec2/module-four/"&gt;AWS documentation&lt;/a&gt; that uses EC2 and Docker to deploy a billing microservice. &lt;/p&gt;

&lt;p&gt;This task definition creates a new Docker container running on AWS to replace an Oracle ATG &lt;a href="https://docs.oracle.com/cd/E24152_01/Platform.10-1/ATGCommProgGuide/html/s2607setdefaultbillingaddresswebservi01.html"&gt;billing address service&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"containerDefinitions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[billing-address-service]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[account-id].dkr.ecr.[region].amazonaws.com/[service-name]:[tag]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"memoryReservation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"256"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cpu"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"256"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"essential"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"portMappings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"hostPort"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"containerPort"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"protocol"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tcp"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"volumes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"networkMode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bridge"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"placementConstraints"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"family"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[billing-address-service]"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You‚Äôll need to transfer data from your existing monolith‚Äôs database to your new microservice‚Äôs backend database in most cases. &lt;/p&gt;

&lt;p&gt;For example, the Oracle ATG billing address service described above uses profile data. You can copy this from your Oracle application‚Äôs backend to AWS, as demonstrated below.&lt;/p&gt;

&lt;p&gt;This sample code uses Amazon SQS to queue up a series of data transfer jobs. This is critical if you have lots of data to move. Because the process may take a long time, you don‚Äôt want a single failed transfer to break the whole process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SQSClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SendMessageCommand&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-sdk/client-sqs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REGION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;us-west-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//replace with your region&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="na"&gt;DelaySeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;MessageAttributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// add other fields if you need them, remove what you don‚Äôt.&lt;/span&gt;
    &lt;span class="na"&gt;profileId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;StringValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;543&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;DataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;String&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;StringValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;29 Acacia Road, Springfield&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;MessageBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clothing Store Product Data.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;QueueUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SQS_QUEUE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your queue URL&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SQSClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;REGION&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SendMessageCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Success, product sent. MessageID:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessageId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you‚Äôve queued up each row, you need a service to receive and process the data. It will add each row to your new database and delete messages from the queue as they are successfully processed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SQSClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-sdk/client-sqs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;REGION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;us-west-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//replace with your region&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqsClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SQSClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;REGION&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sqsClient&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ReceiveMessageCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DeleteMessageCommand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-sdk/client-sqs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sqsClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./libs/sqsClient.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Set the parameters&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queueURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SQS_QUEUE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Your queue URL&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;AttributeNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SentTimestamp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;MaxNumberOfMessages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;MessageAttributeNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;QueueUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;queueURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;VisibilityTimeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;WaitTimeSeconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sqsClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ReceiveMessageCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;deleteParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;QueueUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;queueURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;ReceiptHandle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;ReceiptHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO: Save your data here&lt;/span&gt;
        &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Then delete the queued message&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sqsClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DeleteMessageCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deleteParams&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message deleted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No messages to delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// For unit tests.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Receive Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once your data is transferred into the new microservice, and you‚Äôve verified it is correct, you can begin testing the new service. If everything works correctly, you can retire part of your monolith and repeat the process with each part of your application.&lt;/p&gt;

&lt;p&gt;Obviously, this migration process varies widely depending on the monolithic e-commerce platform you‚Äôre using. Still, hopefully, this gives you a sense of how you can apply the strangler pattern in your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The strangler pattern can help move away from your legacy software platform in a structured, low-risk way. It helps make meaningful improvements quickly without breaking your existing e-commerce store.&lt;/p&gt;

&lt;p&gt;You can thus roll out new features and turn your platform into scalable, robust services that form the core of your e-commerce business. The decoupled nature of microservices lets you use them across multiple channels. &lt;/p&gt;

&lt;p&gt;If you‚Äôd like to avoid doing a complete migration yourself, &lt;a href="http://fabric.inc/"&gt;fabric&lt;/a&gt; can help. With industry-leading expertise in e-commerce microservices, they can help you migrate to their suite of e-commerce microservices using a secure, scalable method like the strangler pattern.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>webdev</category>
    </item>
    <item>
      <title>any tips on how to transform from basic python to Django... pls.</title>
      <author>Sam Sonter</author>
      <pubDate>Wed, 30 Jun 2021 19:08:06 +0000</pubDate>
      <link>https://dev.to/asapsonter/any-tips-on-how-to-transform-from-basic-python-to-django-pls-35on</link>
      <guid>https://dev.to/asapsonter/any-tips-on-how-to-transform-from-basic-python-to-django-pls-35on</guid>
      <description></description>
    </item>
    <item>
      <title>I got Linux Foundation Scholarship,2021  :)</title>
      <author>manish srivastava</author>
      <pubDate>Wed, 30 Jun 2021 19:04:58 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/i-got-2021-linux-foundation-scholarship-3lam</link>
      <guid>https://dev.to/manishfoodtechs/i-got-2021-linux-foundation-scholarship-3lam</guid>
      <description>&lt;p&gt;Hello  friends,&lt;/p&gt;

&lt;p&gt;I am delighted to inform all of my friends here that I was nominated and finally got selected for this year Linux Foundation Scholarship (under Cloud Category). They announced winners on 30 june 2021.&lt;/p&gt;

&lt;p&gt;I am happy because it is an accomplishment for me with no formal experience and professional degree in computer science. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background:
&lt;/h3&gt;

&lt;p&gt;I earned my Bachelor's Degree in Chemical Engineering 15 years ago and  MBA from a prestigious university counted as IIT.&lt;/p&gt;

&lt;p&gt;For Many years, I worked as a government banker, ministry nodal officer, etc to ensure rollouts of biometric and technology-based financial inclusion in four Indian states. It was a difficult job in 2010-2015, because we were living in the era of GPRS and 2G connectivity. Later,with launch of 3G things got streamed line. &lt;/p&gt;

&lt;p&gt;I quit my  job to pursue my passion. But by this point, I had a 15-year gap . I started brushing up my C language skills, but the  world has gotten much faster with new languages and js libraries.&lt;/p&gt;

&lt;p&gt;Its was a difficult period of my career transition from one area where 'you have experience of 13 years'  to another where 'you only have passion' and never ending path to learn for developing new  skill sets to acceptable levels.&lt;/p&gt;

&lt;p&gt;Well, at the age of 37+, I'm learning technologies to use in my business.&lt;/p&gt;

&lt;p&gt;After work, I spend most of my time reading posts on DEV.to. It's a fantastic community where we can read and be encouraged to write new articles on  variety of topics. &lt;br&gt;
You can find People here 'exploring and experimenting with technologies' in order to publish an article on dev.to.&lt;/p&gt;

&lt;p&gt;I always think you should have more faith in your weapon than you do in yourself. You can read few of my experiments in my profile.&lt;/p&gt;

&lt;p&gt;(1) I like my docker image with complete desktop. This was&lt;br&gt;
possible because of a custom ubuntu image. This image is pulled 50K+ times at docker hub. &lt;/p&gt;

&lt;p&gt;(2) Running  an IAAS (opennebula) inside container(LXC).&lt;/p&gt;

&lt;p&gt;(3)Cloud Brothers Story- Creating your own cloud like digital ocean.&lt;/p&gt;

&lt;p&gt;(4) Xp.css ( xtra power css) : A project to ensure always remain responsive irrespective of device size.&lt;/p&gt;

&lt;p&gt;(5) Xp.Backened ( Code Generator) : I created a code generator that takes care of security and generates codes for sql and nosql databases . Codes are generated for PHP, Python and C++. I use it as my tool . &lt;/p&gt;

&lt;p&gt;(6) I am also among people who are having OpenAI GPT-3 API access. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thankyou-devto-"&gt;
  &lt;/a&gt;
  Thankyou Dev.to ...
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#big-thankyou-to-my-followers"&gt;
  &lt;/a&gt;
  Big Thankyou to my followers....
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#thankyou-friends-here"&gt;
  &lt;/a&gt;
  Thankyou Friends here.....
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#my-staff-members-to-whom-i-am-confused-guy"&gt;
  &lt;/a&gt;
  My staff members to whom I am confused guy.....
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://forms.gle/pSCALuEWHus3pg9F6"&gt; Click here for joining my team &lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>watercooler</category>
      <category>linux</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
