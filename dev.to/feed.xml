<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 Websites to Practice Your Frontend Development Skills</title>
      <author>Moemin Mamdouh üë®‚Äçüíª</author>
      <pubDate>Fri, 04 Jun 2021 22:16:52 +0000</pubDate>
      <link>https://dev.to/codewell/7-websites-to-practice-your-frontend-development-skills-54de</link>
      <guid>https://dev.to/codewell/7-websites-to-practice-your-frontend-development-skills-54de</guid>
      <description>&lt;p&gt;Building projects and solving real world problems is inarguably one of the best ways you can learn how to code. Theoretical is all good, but without applying the knowledge you learn, you will most likely not progress. We've made a list of 7 websites that can help you get better at frontend development through practice.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Content:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt; freeCodeCamp&lt;/li&gt;
&lt;li&gt;Codewell&lt;/li&gt;
&lt;li&gt;CSSBattle&lt;/li&gt;
&lt;li&gt;Treehouse&lt;/li&gt;
&lt;li&gt;Coderbyte&lt;/li&gt;
&lt;li&gt;CodePen Challenges
7- Javascript30&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-freecodecamp"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freecodecamp.org/?ref=blog.codewell.cc"&gt;1. freeCodeCamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMB755Jn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622837974477/bFelxPQxc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMB755Jn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622837974477/bFelxPQxc.png" alt="Screen Shot 2021-06-04 at 8.13.04 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inarguably one of the best resources to learn web development. Over 7000+ tutorials and tons of challenges to complete along the way to test what you've learnt. &lt;/p&gt;

&lt;p&gt;The tracks are straightforward and the best part? It's all free. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-codewell"&gt;
  &lt;/a&gt;
  &lt;a href="https://codewell.cc"&gt;2. Codewell&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lVkK1nPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622838058471/s9EnaCCz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lVkK1nPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622838058471/s9EnaCCz4.png" alt="Screen Shot 2021-06-04 at 7.58.24 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to level up your HTML, CSS, and Javascript skills, Codewell offers real world Figma templates that you can use to improve. You can even share your solutions and receive feedback on either the website or on the growing Slack community.  &lt;a href="https://blog.codewell.cc/5-projects-with-design-files-to-become-a-better-frontend-developer-2021"&gt;Here&lt;/a&gt; are 5 projects to tackle on Codewell.&lt;/p&gt;

&lt;p&gt;Codewell challenges include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Figma Template&lt;/li&gt;
&lt;li&gt;All assets (images, icons, etc)&lt;/li&gt;
&lt;li&gt;PNG files for desktop, tablet, and mobile views&lt;/li&gt;
&lt;li&gt;README.md file with the fonts used and how to deploy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-cssbattle"&gt;
  &lt;/a&gt;
  &lt;a href="https://cssbattle.dev/?ref=blog.codewell.cc"&gt;3. CSSBattle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l02kndiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622829901330/7bTmOxS6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l02kndiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622829901330/7bTmOxS6g.png" alt="Screen Shot 2021-06-04 at 8.04.34 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is specific to CSS, but its gamification system is a great way to track your progress and continue learning, they even give away some merchandise at the end of some battles, which is always a great motivator. &lt;/p&gt;

&lt;p&gt;The battles on there aren't necessarily going to tell you how to create web layouts, but they will definitely help you tackle some of the more intermediate CSS properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-treehouse"&gt;
  &lt;/a&gt;
  &lt;a href="https://teamtreehouse.com/?ref=blog.codewell.cc"&gt;4. Treehouse&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WB_jYr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622830166168/K-SDNOhy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WB_jYr3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622830166168/K-SDNOhy9.png" alt="Screen Shot 2021-06-04 at 7.57.55 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At just $25/mo, Treehouse is a great platform to help you learn certain languages like Javascript, or even backend languages like PHP. You can use their in-demand courses which have a wide variety of quizzes and challenges, or go through a track which has a guided curriculum to teach you something specific.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-coderbyte"&gt;
  &lt;/a&gt;
  &lt;a href="https://coderbyte.com/?ref=blog.codewell.cc"&gt;5. Coderbyte&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KpIuH2sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622830477407/fXlsNE-tf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KpIuH2sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622830477407/fXlsNE-tf.png" alt="Screen Shot 2021-06-04 at 7.58.01 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coderbyte offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coding Challenges&lt;/li&gt;
&lt;li&gt;Interview Kits&lt;/li&gt;
&lt;li&gt;Courses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They offer free challenges to get a feel for the platform before subscribing to their plans which start at $35/mo. If you're serious about transitioning to a web development career, Codebyte offers you all the tools you need to accomplish that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-codepen-challenges"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/challenges/?ref=blog.codewell.cc"&gt;6. CodePen Challenges&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-1iQaSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622829645082/E4apDE7LD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-1iQaSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622829645082/E4apDE7LD.png" alt="Screen Shot 2021-06-04 at 7.58.08 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The great thing about CodePen challenges is that they provide prompts for nearly a variety of languages and technologies. HTML, CSS, Javascript, Flutter, you name it. What's even better is that you get to share your solutions with everyone who's participated in the challenges, give, and receive feedback on your solution.&lt;/p&gt;

&lt;p&gt;This may not be a structured way to learn, but looking at other people's code is a great way to get inspired and perhaps learn something you may have not known.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-javascript30"&gt;
  &lt;/a&gt;
  &lt;a href="http://javascript30.com/?ref=blog.codewell.cc"&gt;7. Javascript30&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aT3K9W72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622844611415/-55OKNuO-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aT3K9W72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622844611415/-55OKNuO-.png" alt="Screen Shot 2021-06-05 at 12.09.51 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A 30 day vanilla JS coding challenge by Wes Bos. You get to build clocks, drum kits, and so much more using just Javascript. It's also free, so there's no excuse to not sign up and get started right away!&lt;/p&gt;

&lt;p&gt;If you've enjoyed this article, be sure to follow us on Twitter  &lt;a href="https://twitter.com/codewell_"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;  for more content like this!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Why Pair Programming Should Be Part of Every Team Dynamic</title>
      <author>Chak Shun Yu</author>
      <pubDate>Fri, 04 Jun 2021 21:23:48 +0000</pubDate>
      <link>https://dev.to/keraito/why-pair-programming-should-be-part-of-every-team-dynamic-240j</link>
      <guid>https://dev.to/keraito/why-pair-programming-should-be-part-of-every-team-dynamic-240j</guid>
      <description>&lt;p&gt;Only when I started a new job earlier this year did I discover the concept of pair programming in an engineering team and since then I have become quite fond of it. I really like the interactions that it creates between team members and working together on a certain task. Having experienced a team where pair programming was not a thing and a team where it was, I can definitely say that there are a lot of benefits to pair programming and it can greatly contribute towards a team. In this article, I will go over what pair programming can do for your team and why your team should also adopt it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-from-each-other"&gt;
  &lt;/a&gt;
  Learning from each other
&lt;/h2&gt;

&lt;p&gt;No two developers are alike. Every developer has their own way plan of approaching a task, works differently, does things in another way, has different nuggets of information, and so on. This means that there is always something to learn or pick up from another developer, also regardless of any difference in years of experience. It could be a simple coding trick, an optimization in the working process, a specific shortcut, a way of thinking, and a whole lot more.&lt;/p&gt;

&lt;p&gt;Pair programming creates moments that allow knowledge sharing to happen. By putting these developers together, it makes them observe each other‚Äôs way of thinking and style of working. Doing so will provide us with the chance to learn something from one another that can make us better, more efficient, or more clever in what we normally do. In turn, this will elevate the skills of every developer as well as the quality of the team as a unit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-minds-are-better-than-one"&gt;
  &lt;/a&gt;
  Two minds are better than one
&lt;/h2&gt;

&lt;p&gt;In almost all scenarios will two developers come up with better ideas and solutions than an individual developer. If every member of an engineering team works separately, then every time everyone will create a proposal (Pull or Merge Request) for their work and receive input from other team members during the review process. But if you do pair programming inside a team, then the approach and feedback from one other team member are already mixed into yours. The result is a proposal that is already more refined and basically a mix of two developers‚Äô approaches rather than just one.&lt;/p&gt;

&lt;p&gt;This will first of all will make everything after the proposal, like the review process, more smoothly and create less back and forth between the proposer and the reviewer. On top of that, it will make developers more aware of their own way of working during the coding process. Since they will be exposed to the approaches of other team members, they will be made aware of certain parts that they under normal circumstances might not have paid too much attention to. As a result, pair programming will make team members polish each other‚Äôs way of working and elevate the quality of the work of both the individuals and team as a whole.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#levels-out-knowledge-gaps"&gt;
  &lt;/a&gt;
  Levels out knowledge gaps
&lt;/h2&gt;

&lt;p&gt;One of the biggest concerns for an engineering team is its truck factor. The truck factor of a team is the minimum number of members that have to suddenly disappear before projects have to stall because there‚Äôs too big of a lack of knowledge to continue with the project.&lt;/p&gt;

&lt;p&gt;In smaller teams, it‚Äôs not too weird to have individual developers responsible for projects. Especially in those scenarios, without any intervention, the truck factor can become dangerously low and have significant business risks long term.&lt;/p&gt;

&lt;p&gt;The main cause of a team‚Äôs truck factor is the presence of knowledge gaps between members. The more separated members work from one another, the lower the truck factor becomes. Pair programming helps a team in increasing their truck factor by putting more developers onto a task and increasing the horizontal sharing of crucial project-related knowledge. These two factors together will in turn level out knowledge gaps in a team and increase the truck factor to a safe level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pair-programming-is-great-for-newcomers"&gt;
  &lt;/a&gt;
  Pair programming is great for newcomers
&lt;/h2&gt;

&lt;p&gt;Onboarding newcomers to an engineering team is by far not a trivial task. It‚Äôs a difficult process for all the parties involved, both the team as the newcomer. For the newcomer, there is so much to learn, to absorb, to prepare, to set up, and to find out, like how the team works, how the team approaches certain tasks, and so on. But for every aspect that the newcomer has to receive, the team has an equal responsibility of providing the newcomer with the appropriate resources in a proper way.&lt;/p&gt;

&lt;p&gt;The most optimal solution would be to document literally everything about a team so that the newcomer can reach for that document at any moment and place. But in reality, this is an infeasible thing to accomplish. Creating such a document requires a tremendous amount of effort and time. Even if such a document is present, there‚Äôs a high chance that it‚Äôs incomplete or outdated. Keeping such a document up to date would also introduce another tremendous amount of required maintenance to the table.&lt;/p&gt;

&lt;p&gt;So instead, most companies or teams will have created a generic onboarding that every newcomer will have to go through. But the issue is that every developer has a different way and pace at which they absorb certain information most efficiently. It‚Äôs impossible for the teams though to be considerate of every edge case beforehand. The ratio of the required effort and time to creating and maintaining such a one-size-fits-all solution against the frequency it will be used and the impact it will have is extremely disproportional.&lt;/p&gt;

&lt;p&gt;A great addition to make it more personalized and better assist newcomers that I have experienced is to include pair programming sessions in the onboarding. Regardless of which role the newcomer has during such sessions, they will have the chance to process new information practically and make it their own.&lt;/p&gt;

&lt;p&gt;If the newcomer is the driver, then they don‚Äôt have to worry about the overall process that they are not aware of yet. An existing team member will be the navigator and in this setup have the guiding role. They will make the general process decisions for the newcomer, walk them through why and how, adjust their course if necessary. So as a driver, the newcomer can focus on doing what they know (writing code), but also immediately get the chance to absorb the new information through hands-on experience.&lt;/p&gt;

&lt;p&gt;The other way around, when the newcomer is the navigator, can also be very useful. Contrary to being a driver, the newcomer will have a more passive role as a navigator in which they will focus on observing the existing team member while performing their work. While the following applies to both roles, it‚Äôs more prominent in this scenario. Namely that the newcomer as the role of navigator has more influence over the pace of the pair programming sessions. By asking questions and pointing out topics that they couldn‚Äôt quite catch the first time, they gain a more active role in controlling the pace of the sessions. So as a navigator, the newcomer can be observant and control the speed at which they absorb information to what is most effective for them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keeping-one-another-in-check"&gt;
  &lt;/a&gt;
  Keeping one another in check
&lt;/h2&gt;

&lt;p&gt;There‚Äôs a high chance that every developer has experienced the scenario before where during a task they encountered a small issue that sparked their interest. They wanted to investigate it a little bit but ended up digging themselves into a rabbit hole on the internet to figure everything out about it. Truth is that working on your own can more easily cause this, which can lead to spending a significant amount of time on something that might not be worth it. This isn‚Äôt necessarily a bad thing and being curious is generally good as a developer, but it is an example of putting an incorrect amount of focus and priority on something.&lt;/p&gt;

&lt;p&gt;Pair programming with someone can help avoid this issue by keeping each other in check. If one party notices that the other is getting sidetracked or too much attention is spent on a topic that seems trivial to them, then they can mention it. The other way is also true, namely if one party notices that the other party is treating a certain issue as trivial while they believe that it‚Äôs quite complicated.&lt;/p&gt;

&lt;p&gt;When there are divided opinions in a pair programming sessions, they will have to be discussed because otherwise, both parties will have a different interpretation of the pace of the session. One will think it too fast-paced, while the other thinks it can go faster. This is unpleasant for everyone involved. This will lead to communication and both parties will have to discuss what the correct pace is, thus discussing whether the current issue at hand is worth the amount of time and effort that they are now putting into it. This way team members will keep each other in check and also result in issues being more properly analyzed and estimated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improves-connections-between-team-members"&gt;
  &lt;/a&gt;
  Improves connections between team members
&lt;/h2&gt;

&lt;p&gt;A more social reason to stimulate the activity of pair programming is that it improves the connection between team members. As mentioned in the other sections, pair programming is really something that happens between two developers. Communication is an essential part of this process. To make the most of pair programming sessions, all parties must be trying their best to get the most out of them for the sake of themselves. If this doesn‚Äôt happen, they should therefore communicate it to the other party. This can be done through asking questions, voicing their opinion on the pace of the session, mentioning an overlooked issue, not agreeing with a certain approach and a whole lot of other ways.&lt;/p&gt;

&lt;p&gt;To continue smoothly with the sessions, the other party is required to address the feedback and come to an agreement on how to approach it. This could for example be done by means of coming to a conclusion through a two-sided discussion or agreeing on a middle ground solution that satisfies both parties. The only way this can happen is through proper communication. In these moments team members will have to learn how to interact and discuss with each other. Thus in the long term, pair programming will improve the communication and connections between team members.&lt;/p&gt;

&lt;p&gt;In this article, I went over what the concept of pair programming can do for a team and provided reasons why I think every team should adopt it based on my experience. Knowledge sharing between team members is one of the greatest benefits of applying this concept, as they will be able to learn from each other and come up with more refined solutions together. It‚Äôs also a really great addition to personalizing the onboarding of newcomers more suitably while existing team members can use it to keep one another in check during the coding process. For the team as a whole, it means that long term knowledge gaps will become more levelled out, which in turn helps out with the team‚Äôs truck factor, and the connections inside the team will be improved.&lt;/p&gt;




&lt;p&gt;If you liked this post, I recommend checking out some of my other work over on &lt;a href="https://www.chakshunyu.com/blog/?utm_source=devto&amp;amp;utm_campaign=wpps"&gt;my personal blog&lt;/a&gt; or following me on &lt;a href="https://twitter.com/keraito"&gt;Twitter&lt;/a&gt; to stay up to date with my work. Some related posts are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.chakshunyu.com/blog/5-ways-to-make-pair-programming-sessions-more-effective/?utm_source=devto&amp;amp;utm_campaign=wpps"&gt;5 Ways to Make Pair Programming Sessions More Effective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Kotlin Coroutines and Swift, revisited</title>
      <author>Russell Wolf</author>
      <pubDate>Fri, 04 Jun 2021 20:50:38 +0000</pubDate>
      <link>https://dev.to/touchlab/kotlin-coroutines-and-swift-revisited-j5h</link>
      <guid>https://dev.to/touchlab/kotlin-coroutines-and-swift-revisited-j5h</guid>
      <description>&lt;p&gt;Last year I wrote about a pattern for interop between &lt;a href="https://dev.to/touchlab/working-with-kotlin-coroutines-and-rxswift-24fa"&gt;Kotlin coroutines and RxSwift&lt;/a&gt;. I appreciate the attention it received, particularly where people have applied it to &lt;a href="https://johnoreilly.dev/posts/kotlinmultiplatform-swift-combine_publisher-flow/"&gt;other reactive frameworks&lt;/a&gt;, and even including a &lt;a href="https://github.com/FutureMind/koru"&gt;code-generation plugin&lt;/a&gt; using the same ideas. I figure it's about time I talk about my own updated thinking on these patterns.&lt;/p&gt;

&lt;p&gt;If you haven't read the previous article, I suggest going through that first for context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kotlin-updates"&gt;
  &lt;/a&gt;
  Kotlin updates
&lt;/h2&gt;

&lt;p&gt;We'll stick to the same repository class as the original article, and walk through exposing it to iOS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThingRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"oh no!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getThingStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Flow&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;flow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"oops!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the previous article, I suggested the following pattern for wrapping suspend functions with callbacks that could run on iOS&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SuspendWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;suspender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CoroutineScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;onThrow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Throwable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Job&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;suspender&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Throwable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;onThrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After having played with these patterns more, a drawback to this emerged. This class expects a &lt;code&gt;CoroutineScope&lt;/code&gt; to be supplied by the caller (which will be in Swift) at subscription time. This can be nice for flexibility if it might be called in different contexts, but in the vast majority of cases in practice this will live in some sort of class with its own scope, and it's much more pleasant to work with the scope from Kotlin than from Swift. So let's make the scope a constructor parameter instead.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SuspendWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CoroutineScope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;suspender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;onThrow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Throwable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;suspender&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Throwable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;onThrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A similar change can be made for &lt;code&gt;FlowWrapper&lt;/code&gt;. Now we can manage that scope in the iOS repository class, at the Kotlin level.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThingRepositoryIos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ThingRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CoroutineScope&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;CoroutineScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;SupervisorJob&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;Dispatchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getThingWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;SuspendWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getThingStreamWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;FlowWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getThingStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we can drop the scope parameter from the RxSwift subscribe calls.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#swift-repository-wrappers"&gt;
  &lt;/a&gt;
  Swift repository wrappers
&lt;/h2&gt;

&lt;p&gt;The previous article didn't consider Swift-side architecture beyond the &lt;code&gt;createObservable()&lt;/code&gt; and &lt;code&gt;createSingle()&lt;/code&gt; functions. But in practice you aren't likely to want to call these inline at every call-site. You can add one more wrapper layer in Swift so that the rest of the Swift side of the codebase doesn't need to know about the Kotlin classes at all. For example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ThingRepositoryRxSwift&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingRepositoryIos&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ThingRepositoryIos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingRepository&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Single&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Thing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;createSingle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;suspendWrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getThingWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getThingStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Thing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;createObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;flowWrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getThingStreamWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now the rest of the code sees only &lt;code&gt;ThingRepositoryRxSwift&lt;/code&gt; and its RxSwift API and the Kotlin essentially becomes an implementation detail.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#combine"&gt;
  &lt;/a&gt;
  Combine
&lt;/h2&gt;

&lt;p&gt;The other thing I've done more thinking about since the original article is how this can apply to the Combine framework. Combine has a &lt;code&gt;Publisher&lt;/code&gt; type which represents an observable stream with a particular type of event and error.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createPublisher&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;flowWrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FlowWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;AnyPublisher&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;KotlinError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;Deferred&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Publishers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;HandleEvents&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;PassthroughSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;KotlinError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;PassthroughSubject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;KotlinError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flowWrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;onComplete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;onThrow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;KotlinError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handleEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;receiveCancel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eraseToAnyPublisher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This makes use of a &lt;code&gt;PassthroughSubject&lt;/code&gt; to handle the heavy lifting, and simply forwards the &lt;code&gt;Flow&lt;/code&gt; events from our &lt;code&gt;FlowWrapper&lt;/code&gt; callbacks to it. It makes use of the same &lt;code&gt;KotlinError&lt;/code&gt; error type as the previous article. Note the &lt;code&gt;eraseToAnyPublisher()&lt;/code&gt; call at the end, which cleans up our return type to &lt;code&gt;AnyPublisher&amp;lt;T, KotlinError&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Deferred&amp;lt;Publishers.HandleEvents&amp;lt;PassthroughSubject&amp;lt;T, KotlinError&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. Combine's generic internals are weird but they give us this utility to hide them.&lt;/p&gt;

&lt;p&gt;For single-event streams, Combine has a &lt;code&gt;Future&lt;/code&gt; type. Unfortunately, there's no &lt;code&gt;eraseToAnyFuture()&lt;/code&gt; helper that I could find, so we still end up typed as a multi-event &lt;code&gt;Publisher&lt;/code&gt; instead.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;suspendWrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;SuspendWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;AnyPublisher&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;KotlinError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;Deferred&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Publishers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;HandleEvents&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;KotlinError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Kotlinx_coroutines_coreJob&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;promise&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;suspendWrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nv"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nv"&gt;onThrow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;KotlinError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handleEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;receiveCancel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cause&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eraseToAnyPublisher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You could also do something similar with a &lt;code&gt;PassthroughSubject&lt;/code&gt;, but I suspect (without having profiled extensively) that this version is probably lighter. There's also &lt;a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md"&gt;async/await support&lt;/a&gt; on the horizon for Swift, which would be nice to integrate here in the future.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#swiftui"&gt;
  &lt;/a&gt;
  SwiftUI
&lt;/h3&gt;

&lt;p&gt;One of the nice things about using Combine is it integrates well with SwiftUI. You can create a model class like&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ThingModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ObservableObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;@Published&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;cancellables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;AnyCancellable&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingRepositoryIos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;createPublisher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;flowWrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getThingStreamWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="nv"&gt;succeed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replaceError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cancellables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and then observe the &lt;code&gt;Thing&lt;/code&gt; in a view like&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ThingView&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;@ObservedObject&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;thingModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingModel&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ThingRepositoryIos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;thingModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ThingModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Count: &lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;thingModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#isnt-this-a-lot-of-boilerplate"&gt;
  &lt;/a&gt;
  Isn't this a lot of boilerplate?
&lt;/h2&gt;

&lt;p&gt;There's obviously a lot of layers here, and that can be a bit off-putting. However, I think this sort of layering is a helpful pattern in a lot of Swift/Kotlin interop.&lt;/p&gt;

&lt;p&gt;We have two different languages that we're trying to make talk to each other. While for most simple use-cases the interop is &lt;a href="https://kotlinlang.org/docs/native-objc-interop.html"&gt;handled for us by the compiler&lt;/a&gt;, in more complex situations we need to carve out a shared cross-language interface by hand. This will often take the form of a Kotlin wrapper layer that's less idiomatic to Kotlin consumers but is possible for Swift to consume, and then an extra Swift layer to take those Kotlin wrappers and massage them into more idiomatic Swift code.&lt;/p&gt;

&lt;p&gt;We shouldn't be surprised that this extra glue code is needed, given the differences in language and environment. Most of it is either things we only need to write once (like the &lt;code&gt;SuspendWrapper&lt;/code&gt; class in Kotlin or the &lt;code&gt;createObservable()&lt;/code&gt; or &lt;code&gt;createPublisher()&lt;/code&gt; functions in Swift), or things that follow very consistent patterns that we might be able to codegen (like creating &lt;code&gt;ThingRepositoryIos&lt;/code&gt; based on &lt;code&gt;ThingRepository&lt;/code&gt; in Kotlin, or &lt;code&gt;ThingModel&lt;/code&gt; in Swift). &lt;/p&gt;

&lt;p&gt;Sure, this extra infrastructure wouldn't be needed if we were writing a pure native iOS app in Swift. But we've gained the ability to share Kotlin code into Swift in a more idiomatic way. I tend to think the tradeoff is worth it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;I'd like to further iterate on all these patterns in some form of codegen library in the future, as compiler plugins start to mature. I'm hopeful for a multiplatform version of &lt;a href="https://github.com/google/ksp/"&gt;Kotlin Symbol Processing&lt;/a&gt; to help with this, though this won't be possible before Kotlin 1.5.20 at the earliest due to missing extension points in the Kotlin compiler. Fingers crossed for something this summer I guess.&lt;/p&gt;

&lt;p&gt;If you'd like to play with all of this yourself, updated code samples are available at the following repo:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/touchlab"&gt;
        touchlab
      &lt;/a&gt; / &lt;a href="https://github.com/touchlab/SwiftCoroutines"&gt;
        SwiftCoroutines
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As before, this includes nullable and non-null versions of both single-event and multiple-event streams, and Swift unit tests to verify it all works correctly. In addition, there's now a SwiftUI display to demo the Combine code, as well as log-based demos of RxSwift and Combine bindings.&lt;/p&gt;




&lt;p&gt;Hope you enjoyed this! I'd love to hear feedback, either in the comments or on &lt;a href="https://kotlinlang.slack.com/archives/D2VU3UHU0"&gt;Slack&lt;/a&gt; or &lt;a href="https://twitter.com/RussHWolf"&gt;Twitter&lt;/a&gt;. If you'd like to go deeper, feel free to &lt;a href="https://touchlab.co/contact-us/"&gt;reach out to Touchlab&lt;/a&gt;. We're also &lt;a href="https://touchlab.co/careers-3/"&gt;hiring&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>kotlinmultiplatform</category>
      <category>swift</category>
    </item>
    <item>
      <title>Network Automation with Python + Discord Webhooks</title>
      <author>Sayf A</author>
      <pubDate>Fri, 04 Jun 2021 20:49:39 +0000</pubDate>
      <link>https://dev.to/sayf_a_cc723da8bec754a8cd/network-automation-with-python-discord-webhooks-h36</link>
      <guid>https://dev.to/sayf_a_cc723da8bec754a8cd/network-automation-with-python-discord-webhooks-h36</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-we-gonna-make"&gt;
  &lt;/a&gt;
  What are we gonna Make?
&lt;/h1&gt;

&lt;p&gt;In this epic tutorial we are going to be using &lt;strong&gt;discord webhooks&lt;/strong&gt; and the power of python to receive notifications for when a device on our local network (at home) goes offline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-are-we-making-this"&gt;
  &lt;/a&gt;
  Why are we making this?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;its a cool project &lt;/li&gt;
&lt;li&gt;it uses the power of python and discord!&lt;/li&gt;
&lt;li&gt;A tutorial for those wanting to flex your muscle on python and logic building. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#lets-roll"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let's Roll!&lt;/strong&gt;
&lt;/h4&gt;



&lt;h3&gt;
  &lt;a href="#phase-i-the-plan"&gt;
  &lt;/a&gt;
  Phase I - The Plan
&lt;/h3&gt;

&lt;p&gt;This project is going to fully depend on &lt;strong&gt;logic&lt;/strong&gt; since we are embarking on coding something that's totally hybrid, but hey!...who cares? Below you'll find the flow chart of\n how this algorithm will flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSqhcH7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk38oq2vs9pmoc4809ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSqhcH7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk38oq2vs9pmoc4809ga.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#libraries-needed"&gt;
  &lt;/a&gt;
  Libraries Needed
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;discord_webhook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DiscordEmbed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DiscordWebhook&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h3&gt;
  &lt;a href="#phase-ii-sending-the-alert"&gt;
  &lt;/a&gt;
  Phase II - Sending the Alert
&lt;/h3&gt;

&lt;p&gt;Let's start off by preparing a function that when called upon sends a discord message via webhook, we wanna make sure that the message is crafted with the following content :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Missing device MAC Address&lt;/li&gt;
&lt;li&gt;Missing device IP Address&lt;/li&gt;
&lt;li&gt;Missing device Name
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webhook_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offline_device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offline_ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offline_mac&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;embed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DiscordEmbed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"‚ö†Ô∏è Lost Contact with &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;offline_device&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1ca1ed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;webhook_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DiscordWebhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;webhook_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_embed_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Device IP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;offline_ip&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_embed_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Device MAC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;offline_mac&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;webhook_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webhook_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;the function will be called with 3 arguments given which are &lt;strong&gt;webhook_url&lt;/strong&gt; (for sending discord messages), &lt;strong&gt;offline_device&lt;/strong&gt; (the device missing), &lt;strong&gt;offline_ip&lt;/strong&gt; (device ip that's missing) and &lt;strong&gt;offline_mac&lt;/strong&gt; (Mac address of missing device). Reason why we coded this alert function is because we'll be utilising it in our network monitoring function coming up at the end, so &lt;strong&gt;hang in there!&lt;/strong&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#phase-iii-gathering-devices-on-our-network"&gt;
  &lt;/a&gt;
  Phase III - Gathering Devices on our Network
&lt;/h3&gt;

&lt;p&gt;If you're following along then congrats üéâüéâüéâ on making it to phase 3 of this epic tutorial! Now we are going to start making a function which uses a module from python's standard library called &lt;a href="https://docs.python.org/3/library/subprocess.html"&gt;subprocess&lt;/a&gt; to perform a custom &lt;a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol"&gt;ARP&lt;/a&gt; scan.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_devices&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;network_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"device_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="s"&gt;"ip_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="s"&gt;"mac_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'arp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-a'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;arp_resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextIOWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arp_resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;network_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"device_name"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arp_resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;network_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ip_address"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mac&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arp_resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;network_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"mac_address"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;network_data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the function first initialises a dictionary which has keys that have lists attached to it as values. We will then use subprocess to run the command&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;arp -a&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 and then move to read the output of the command executed. After that list comprehension comes into play in which we clean the lines of text coming from the parsed command output. Finally we use 3 different for loops to append the data found in the command output to the dictionary of lists and finally return the populated dictionary.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#phase-iv-the-final-touch"&gt;
  &lt;/a&gt;
  Phase IV - The Final Touch...
&lt;/h3&gt;

&lt;p&gt;We have made the 2 blocks of code which will be relied on to perform actions which will lead our automation to working exactly as planned, this is the part where we code up the monitoring function which will utilise the above 2 functions we have finished up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;monitor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;network_patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_devices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;active_patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_devices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mac&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;network_patch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"device_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;network_patch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ip_address"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;network_patch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"mac_address"&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;active_patch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"device_name"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"[+] &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is online...Swinging back for another run"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt; 

            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;send_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DISCORD-WEBHOOK-URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mac&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-main-theory"&gt;
  &lt;/a&gt;
  The main theory!
&lt;/h4&gt;

&lt;p&gt;First we start off by fetching all the active devices on our network, this will store the dictionary that we are expecting to be returned from our &lt;strong&gt;fetch_devices&lt;/strong&gt; function. After that we begin with a while loop since we want the monitoring to be persistent, then we will call upon the fetch devices function on every iteration that the for loop goes through, this way we can then check if any name from our &lt;strong&gt;network_patch&lt;/strong&gt; call exists or not within our &lt;strong&gt;active_patch&lt;/strong&gt; call&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up-output"&gt;
  &lt;/a&gt;
  Wrap up + Output
&lt;/h3&gt;

&lt;p&gt;Finally our program is ready, your code should look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;discord_webhook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DiscordEmbed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DiscordWebhook&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; 


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webhook_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offline_device&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offline_ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offline_mac&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;embed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DiscordEmbed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"‚ö†Ô∏è Lost Contact with &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;offline_device&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1ca1ed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;webhook_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DiscordWebhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;webhook_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_embed_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Device IP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;offline_ip&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_embed_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Device MAC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;offline_mac&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;webhook_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webhook_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_devices&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;network_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"device_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="s"&gt;"ip_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="s"&gt;"mac_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'arp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'-a'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;arp_resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextIOWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arp_resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;network_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"device_name"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arp_resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;network_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ip_address"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mac&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arp_resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;network_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"mac_address"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;network_data&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;monitor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;network_patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_devices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;active_patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_devices&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mac&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;network_patch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"device_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;network_patch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ip_address"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;network_patch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"mac_address"&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;active_patch&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"device_name"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"[+] &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is online...Swinging back for another run"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt; 

            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;send_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DISCORD-WEBHOOK-URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mac&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;To test the program go ahead and start it up and once it starts running make your phone or any device active on the network disconnect from your wifi, you should see something like this come up :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ptcTQhQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7951xcj3ah5mebszq6e0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ptcTQhQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7951xcj3ah5mebszq6e0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the tutorial! Do leave your comments &amp;amp; questions below.&lt;/p&gt;

&lt;p&gt;Here's a link to the &lt;a href="https://github.com/ReaperZ0v/Viper-Scout"&gt;&lt;b&gt;Repository&lt;/b&gt;&lt;/a&gt; on Github&lt;br&gt;
&lt;strong&gt;Happy coding!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>discuss</category>
      <category>motivation</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Implementing Push Notifications With Flutter and OneSignal-Part 1</title>
      <author>Olamide Gabriel</author>
      <pubDate>Fri, 04 Jun 2021 20:36:52 +0000</pubDate>
      <link>https://dev.to/lordlamee/implementing-push-notifications-with-flutter-and-onesignal-part-1-3690</link>
      <guid>https://dev.to/lordlamee/implementing-push-notifications-with-flutter-and-onesignal-part-1-3690</guid>
      <description>&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@jamie452?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jamie Street&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/notifications?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your users are definitely not going to be on your app for 24 hours every day. However, you might want to remind them to check your app, or notify them of new things happening in your app even when it's closed. You use Push Notifications to achieve this. And contrary to popular belief, they're really easy to implement with Flutter and OneSignal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;A OneSignal Account&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#step-one"&gt;
  &lt;/a&gt;
  Step One
&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;Setup your firebase project&lt;/em&gt;&lt;br&gt;
Go to &lt;a href="https://firebase.google.com"&gt;https://firebase.google.com&lt;/a&gt; to get started.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8472oOUJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d97pmojs5jr4fznsx28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8472oOUJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8d97pmojs5jr4fznsx28.png" alt="Firebase creation process image"&gt;&lt;/a&gt;&lt;br&gt;
You should have something like this on the console.&lt;/p&gt;

&lt;p&gt;On the next page, you could choose to enable or disable analytics. Your project should take a few seconds to be created depending on your internet connection&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#step-two"&gt;
  &lt;/a&gt;
  Step Two
&lt;/h5&gt;

&lt;p&gt;Setup your flutter project.&lt;br&gt;
-&lt;em&gt;create flutter project&lt;/em&gt;&lt;br&gt;
run &lt;code&gt;flutter create push_notifications_demo&lt;/code&gt; in your command line interface(command prompt).&lt;br&gt;
-&lt;em&gt;add your app to the firebase project&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Android&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click the android button as shown in the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6-4k1CnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbgn1rdvw55ebnyg1ljq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6-4k1CnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbgn1rdvw55ebnyg1ljq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add your app credentials and download the config file.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ro6uk_iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqb7yo8bzbzgnejmshcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ro6uk_iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqb7yo8bzbzgnejmshcx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; &lt;br&gt;
Your android package name is the "applicationId" in your app-level build.gradle file(android/app/build.gradle).&lt;br&gt;
Be sure to add the googleservices.json file to your project and set up the Firebase SDK as instructed in the process.&lt;/p&gt;

&lt;p&gt;Once you've followed the instructions correctly, you should see an android app in your project.&lt;/p&gt;

&lt;p&gt;-&lt;em&gt;setup Onesignal for your app&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log into OneSignal and create a new app. You could choose to use the default organization or an organization of your own. No worries, you can always change it later.
.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add your firebase server key and sender ID.&lt;br&gt;
You can find these keys here.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqsltKzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u26rl8ki3srddjh060u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqsltKzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u26rl8ki3srddjh060u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the Android platform and Flutter as the SDK. &lt;br&gt;
You should now be able to see your application ID.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add firebase_core and one_signal_flutter plugin to your app.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.2
  onesignal_flutter: ^2.6.3
  firebase_core: ^1.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;In your project level(android/build.gradle) build.gradle file, add the following line of code:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' } //add this line
    }
  dependencies {
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.6, 0.99.99]'
     ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In your app level(android/app/build.gradle) build.gradle file, add the following line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apply plugin: 'com.android.application' //this already exits
//add this line
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! You're all set up on Android.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For iOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Requirements &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An apple developer account with an Admin role.&lt;/li&gt;
&lt;li&gt;A Macbook with XCode 11+&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generate an iOS Push Certificate.&lt;br&gt;
You can easily generate one using the &lt;a href="https://onesignal.com/provisionatorhttps://onesignal.com/provisionatorhttps://onesignal.com/provisionator"&gt;OneSignal provisioning tool &lt;/a&gt; here&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable iOS push capability and extension service following the instructions on the &lt;a href="https://documentation.onesignal.com/docs/flutter-sdk-setup#step-4---enable-ios-push-capability-in-xcode-ios-apps-only"&gt;Official OneSignal documentation here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We're done setting up!&lt;/p&gt;

&lt;p&gt;Now, let's practice sending a push notification.&lt;/p&gt;

&lt;p&gt;In the main.dart file of your project, we need to initialize the OneSignal plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:onesignal_flutter/onesignal_flutter.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  Firebase.initializeApp();
  OneSignal.shared.init("YOUR ONESIGNAL APP ID", iOSSettings: {
    OSiOSSettings.autoPrompt: false,
    OSiOSSettings.inAppLaunchUrl: false
  });
  runApp(MyApp());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run your app to initialize the plugin.&lt;/p&gt;

&lt;p&gt;Next, on the Dashboard section of your application's OneSignal account, do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click on the "New Push" button shown below. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y3YxXMDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebdwyc58k766x49iewf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3YxXMDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebdwyc58k766x49iewf5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the title and message of your notification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click send to test device.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wb3n-Sa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdc2xz4v0koh7a1ohjxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wb3n-Sa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdc2xz4v0koh7a1ohjxf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You should be redirected to a page of all users so you can add a test user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should find your device there. If you don't, run the app again. Click on options and add your device as a test user.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_gGyR58k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gxtg2zix4kjby9oqqji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gGyR58k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gxtg2zix4kjby9oqqji.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back and click on Send To Test Device. Select your device and send.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2A6ivUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edi3i3i2sqsy6d2ci62v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2A6ivUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edi3i3i2sqsy6d2ci62v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You've successfully sent your first notification!&lt;/p&gt;

&lt;p&gt;Tip: Add handlers to your notifications to run functions at specific events.&lt;/p&gt;

&lt;p&gt;To handle callbacks once notifications are received:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OneSignal.shared.setNotificationReceivedHandler((OSNotification notification) {
    //This will be called whenever a notification is received
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To handle callbacks when notifications are opened:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OneSignal.shared.setNotificationOpenedHandler((OSNotificationOpenedResult result) {
  // This will be called whenever a notification is opened.
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with this, you can send your users push notifications anytime you want!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://documentation.onesignal.com/docs/flutter-sdk"&gt;OneSignal's documentation&lt;/a&gt; is very rich and easy to read. You can get more detail on features and methods available on the SDK.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>onesignal</category>
      <category>pushnotifications</category>
    </item>
    <item>
      <title>Generate PDF of HTML Element in Browser</title>
      <author>Bibek</author>
      <pubDate>Fri, 04 Jun 2021 20:20:32 +0000</pubDate>
      <link>https://dev.to/bibekkakati/generate-pdf-of-html-element-in-browser-lg9</link>
      <guid>https://dev.to/bibekkakati/generate-pdf-of-html-element-in-browser-lg9</guid>
      <description>&lt;p&gt;Hello everyoneüëã&lt;/p&gt;

&lt;p&gt;In this article, we are going to see how we can generate a PDF of any HTML element in the browser i.e, entirely client-side.&lt;/p&gt;

&lt;p&gt;We will use the package &lt;a href="https://ekoopmans.github.io/html2pdf.js/"&gt;&lt;code&gt;html2pdf&lt;/code&gt;&lt;/a&gt; to generate the PDF.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;html2pdf&lt;/code&gt; is using &lt;code&gt;html2canvas&lt;/code&gt; to convert the HTML element to canvas and then into an image. Then it generates the PDF of the image with the help of &lt;code&gt;jsPDF&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to know more about &lt;code&gt;html2canvas&lt;/code&gt;, check out &lt;a href="https://blog.bibekkakati.me/take-screenshot-of-html-element-using-javascript"&gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;Let us see a small implementation of the package &lt;code&gt;html2pdf&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h4&gt;

&lt;p&gt;A basic HTML page, where the package's bundle link is included.&lt;/p&gt;

&lt;p&gt;Created a div block of simple content and a export PDF button. We will be generating a PDF of the div whose id is &lt;code&gt;view&lt;/code&gt; on clicking the export PDF button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML2PDF&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://raw.githack.com/eKoopmans/html2pdf/master/dist/html2pdf.bundle.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./script.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;"main()"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"view"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Export PDF&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Using HTML2PDF&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"export-pdf"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Export PDF&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scriptjs"&gt;
  &lt;/a&gt;
  script.js
&lt;/h4&gt;

&lt;p&gt;JavaScript file containing the main method which will be invoked once the site loads and listening for the &lt;code&gt;onclick&lt;/code&gt; event on the export PDF button.&lt;/p&gt;

&lt;p&gt;On clicking the export PDF button, the &lt;code&gt;html2pdf&lt;/code&gt; method will be called which takes the reference to the element (div) as its argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;exportPDF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;export-pdf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;exportPDF&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html2pdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After clicking the button, the PDF will be generated and downloaded directly to your system.&lt;/p&gt;

&lt;p&gt;We can also pass some configuration options in the &lt;code&gt;html2pdf&lt;/code&gt; method to handle image type, quality, filename etc. To know more about it, check &lt;a href="https://ekoopmans.github.io/html2pdf.js/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Image-based PDF's are non-searchable.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Github repo: &lt;a href="https://github.com/bibekkakati/blogs-projects/tree/main/web/pdf-generator"&gt;PDF-Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try it out: &lt;a href="https://bibekkakati.github.io/blogs-projects/web/pdf-generator/"&gt;Live&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/generate-pdf-of-html-element-in-browser"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading üôè&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up üëç&lt;/p&gt;

&lt;p&gt;Feel free to connect üëã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 things I learned in first 6 months as software developer</title>
      <author>Prakhar Yadav</author>
      <pubDate>Fri, 04 Jun 2021 19:27:23 +0000</pubDate>
      <link>https://dev.to/prakh_r/10-things-i-learned-in-first-6-months-as-software-developer-41ni</link>
      <guid>https://dev.to/prakh_r/10-things-i-learned-in-first-6-months-as-software-developer-41ni</guid>
      <description>&lt;p&gt;As I ease into my new job as a software developer, I thought I'd share some tips &amp;amp; advise that I wish someone told me before I started. This could have made my journey much smoother. But to anyone out there who needs this, here's what I learned after 6 months in industry.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#keeping-clear-of-the-egoistic-sherlock"&gt;
  &lt;/a&gt;
  Keeping clear of the egoistic Sherlock.
&lt;/h4&gt;

&lt;p&gt;Don't stay stuck on a problem for too long.&lt;br&gt;
Don't be afraid to ask for help. Because someone might have stumbled on a similar issue before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#google-is-your-best-friend"&gt;
  &lt;/a&gt;
  Google is your best friend.
&lt;/h4&gt;

&lt;p&gt;No matter what level of proficiency, the biggest part of the job is to look for solutions by asking the right questions.&lt;br&gt;
Keep educating yourself about anything that you don't clearly understand. Even if you are slightly foggy, google it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#community-is-called-so-for-a-reason"&gt;
  &lt;/a&gt;
  Community is called so for a reason.
&lt;/h4&gt;

&lt;p&gt;Be active in any community you have exposure to. Be it StackOverflow, FreeCodeCamp, dev community on Twitter, or even any community platform that your company has (given you are in a job or an internship), look for similar issues if you are stuck or post questions on the platform, and see how helpful our dev community is for yourself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#stay-professional-amp-dont-take-things-personally"&gt;
  &lt;/a&gt;
  Stay professional &amp;amp; don't take things personally.
&lt;/h4&gt;

&lt;p&gt;Stay professional. Keep delivering. Show diligence. Don't become lazy or take things for granted. You are being paid for things you are doing. You are doing this for yourself. Respect your bread &amp;amp; butter.&lt;br&gt;
Don't be angry or irritated by the workflow. Everyone is following the schedule that is feasible to them and your opinion on what or how they should do things does not matter and maybe is even rude. Believe everyone is doing their best, trust them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#respect-your-time"&gt;
  &lt;/a&gt;
  Respect your time.
&lt;/h4&gt;

&lt;p&gt;Do not keep on working day &amp;amp; night. Your profession is there to support your life and the others dependent on you. Take out time for yourself. Don't half-ass it. Work with your heart in it, and then shut the system down to relax and enjoy your life as well. You are more than your job. Remember that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#take-breaks"&gt;
  &lt;/a&gt;
  Take breaks.
&lt;/h4&gt;

&lt;p&gt;It is very easy to get burnt out due to hectic schedules and workloads. You have leaves to treat it. Use it wisely. Replenish yourself. Use weekends to stay away from your system and give time to things that you enjoy. Meditate. Because it's the greatest favor you can do for yourself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#do-not-overdo-your-daily-goals"&gt;
  &lt;/a&gt;
  Do not overdo your daily goals.
&lt;/h4&gt;

&lt;p&gt;It is easy to lose track of your activities amid so many meetings, and responsibilities. Set your daily todos. Keep the list small. This will give you a clear picture of the road you need to travel, give you an idea of how much time the tasks will take, how you should organize your day to finish them, and save you a lot of time. Keeping it small will also keep you relaxed. Trust me. I know.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#your-head-is-not-a-notepad"&gt;
  &lt;/a&gt;
  Your head is not a notepad.
&lt;/h4&gt;

&lt;p&gt;Do not keep a note of things in your head. As soon as there is something that needs to be done, note it down. If there a meeting you need to attend, set a reminder for it? You have an event to be present in, keep track of it in the calendar. Flush your buffer as soon as it is filled, so that you can focus your energy on actual work and problem solving that you want to do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#help-others"&gt;
  &lt;/a&gt;
  Help others.
&lt;/h4&gt;

&lt;p&gt;Can not stress this enough. Help the ones in need. If you have finished your things earlier, reach out to people and help them in things they are doing. Don't worry they won't give you much. Even a feeling of someone being present to help, gives tremendous relief, morale boost, feeling of joy, and speedy completion of tasks. You'll build a great rapport and a good network of people always ready to help you in your hour of need.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#note-all-that-you-do"&gt;
  &lt;/a&gt;
  Note all that you do.
&lt;/h4&gt;

&lt;p&gt;This may not apply to everyone, but I have found this very helpful to jot down every change that I make. I typically follow this tabular format:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;Entity (widget or any feature)&lt;/td&gt;
&lt;td&gt;File changed&lt;/td&gt;
&lt;td&gt;The change itself (codes)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4YEUNJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622325049344/WqC9DqmJ4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4YEUNJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622325049344/WqC9DqmJ4.png" alt="Screenshot 2021-05-30 032027.png"&gt;&lt;/a&gt;&lt;br&gt;
This way I can keep track of the changes that I am doing, quickly navigate them and refer similar things that I have worked on in past. This is a great time saver. It's a lot easier than it may sound. Do it. Don't argue. You'll thank me later.&lt;br&gt;
&lt;em&gt;p.s. I use OneNote to jot down any &amp;amp; everything.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;BONUS&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Learn to say No.&lt;/em&gt; &lt;br&gt;
If your schedule is cluttered and you are on the verge of plucking your hair out, then you don't have to take everything that's asked of you. You should however be very gentle and polite in rejecting. Do not reject someone's request right away. Ask yourself are you that occupied. Then after due consideration, let them know that you are already working on such &amp;amp; such and suggest to them who can they reach out to instead. They are here because they need help or they are your manager üòÇ either way they'll understand and not bother you with the load.&lt;br&gt;
DO NOT misuse this power.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Believe in yourself&lt;/em&gt; &lt;br&gt;
Don't run from problems to solve. The harder the problem the proficient you get. Believe you can do it. Spend some time researching it. Ask for help. Trust the learning curve. Don't let things scare you.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devjournal</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>NodeSecure - The future</title>
      <author>Gentilhomme</author>
      <pubDate>Fri, 04 Jun 2021 19:10:44 +0000</pubDate>
      <link>https://dev.to/fraxken/nodesecure-the-future-1f9c</link>
      <guid>https://dev.to/fraxken/nodesecure-the-future-1f9c</guid>
      <description>&lt;p&gt;Hello üëã&lt;/p&gt;

&lt;p&gt;Today I'm writing to tell you about &lt;strong&gt;the future of &lt;a href="https://github.com/ES-Community/nsecure"&gt;NodeSecure&lt;/a&gt;&lt;/strong&gt; üëÄ.&lt;/p&gt;

&lt;p&gt;I have not been very active in the last few months because of my job which has taken up a lot of my time. But I'm back üòä.&lt;/p&gt;

&lt;p&gt;Moving forward and updating the project has become much more complicated üòµ. &lt;strong&gt;So it was time to announce and make major changes&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-organization"&gt;
  &lt;/a&gt;
  üè´ Creating an organization
&lt;/h2&gt;

&lt;p&gt;NodeSecure is not only one tool anymore. The project is now a set of tools and packages that need to be maintained and extended. The project has also gained contributors on its way and many developers pushed me to go even further üöÄ.&lt;/p&gt;

&lt;p&gt;That's why I decided to &lt;strong&gt;gather&lt;/strong&gt; these different projects in the &lt;strong&gt;same github organization&lt;/strong&gt; (and same for &lt;strong&gt;npm&lt;/strong&gt; with &lt;code&gt;@nodesecure&lt;/code&gt;). It will also be easier to integrate new collaborators into the project.&lt;/p&gt;

&lt;p&gt;The URL to our new home: &lt;a href="https://github.com/NodeSecure"&gt;https://github.com/NodeSecure&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  üìã Roadmap
&lt;/h2&gt;

&lt;p&gt;Well, that's all very nice, but what is the objective in concrete terms? The goal is to release a version 1.0 with the following roadmap:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#move-all-the-packages-in-the-org"&gt;
  &lt;/a&gt;
  Move all the packages in the org
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;js-x-ray&lt;/li&gt;
&lt;li&gt;sec-literal&lt;/li&gt;
&lt;li&gt;size-satisfies&lt;/li&gt;
&lt;li&gt;npm-tarball-license-parser&lt;/li&gt;
&lt;li&gt;Migrating SlimIO/Security into the org and rename it &lt;strong&gt;@nodesecure/report&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Rewriting &lt;a href="https://github.com/SlimIO/Npm-registry"&gt;SlimIO/npm-registry&lt;/a&gt; from zero in the org (with &lt;a href="https://github.com/nodejs/undici"&gt;undici&lt;/a&gt; as http client).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will update these packages and they will use ESM by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#split-nsecure-into-three-parts"&gt;
  &lt;/a&gt;
  Split Nsecure into three parts
&lt;/h3&gt;

&lt;p&gt;We will rewrite the Nsecure back-end logic into an independent package named &lt;strong&gt;scanner&lt;/strong&gt;. The CLI and the UI will also be separated in two distinct packages.&lt;/p&gt;

&lt;p&gt;We will focus our efforts initially &lt;strong&gt;on the scanner&lt;/strong&gt;. The objective is above all to simplify maintenance by separating the project into minimal parts that can be more easily documented, evolved and tested.&lt;/p&gt;

&lt;p&gt;This should also reduce the number of dependencies for tools that only want to use the scanner without the CLI and UI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ö†Ô∏è We will update the current &lt;a href="https://github.com/ES-Community/nsecure"&gt;nsecure&lt;/a&gt; package with the new components until the new version arrives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#new-ui"&gt;
  &lt;/a&gt;
  New UI
&lt;/h3&gt;

&lt;p&gt;The NodeSecure web interface will be rewritten from scratch. This new project will use &lt;strong&gt;&lt;a href="https://d3js.org/"&gt;D3.js&lt;/a&gt;&lt;/strong&gt; to generate the network graph.&lt;/p&gt;

&lt;p&gt;It will also be a good opportunity to discuss what we will use for the new interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-team"&gt;
  &lt;/a&gt;
  üë• The team
&lt;/h2&gt;

&lt;p&gt;I am pleased to announce that I am launching this initiative with &lt;a href="https://www.linkedin.com/in/tonygorez/"&gt;Tony Gorez&lt;/a&gt; who, as you know, has contributed a lot to the project in recent months.&lt;/p&gt;

&lt;p&gt;Several developers have indicated their intention to actively participate... so the team will grow very quickly.&lt;/p&gt;

&lt;p&gt;This is just the beginning and you are welcome to join us if you want to contribute.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí¨ We use Discord to communicate. My Discord tag fraxken#8064.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks ‚ù§Ô∏è
&lt;/h2&gt;

&lt;p&gt;And that's it! A lot of work ahead for us. The new interface will certainly take a few months to be created so don't expect V1 anytime soon.&lt;/p&gt;

&lt;p&gt;However those changes should allow us to release a 0.9 and 0.10 version very quickly in the coming weeks.&lt;/p&gt;

&lt;p&gt;Best Regards,&lt;br&gt;
Thomas&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>Stand-up</title>
      <author>Chris Jarvis</author>
      <pubDate>Fri, 04 Jun 2021 19:05:42 +0000</pubDate>
      <link>https://dev.to/jarvisscript/stand-up-37al</link>
      <guid>https://dev.to/jarvisscript/stand-up-37al</guid>
      <description>&lt;p&gt;For June, the monthly Virtual Coffee, a developer community, challenge is to build in public. As part of this we are using Stand-up to keep each other informed on our progress. I wrote a brief introduction to stand-up for the group. I thought I could expand it in to a post here. SEO branding tip, reuse the content you create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IeKIIlIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://christopherleejarvis.com/JarvisScript/wp-content/uploads/2021/06/harley.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IeKIIlIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://christopherleejarvis.com/JarvisScript/wp-content/uploads/2021/06/harley.jpg" alt="dc's harley quinn telling a joke. &amp;quot;2 variables walked into a foobar. the second should have ducked.&amp;quot;"&gt;&lt;/a&gt;Not that kind of  stand-up&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-standup"&gt;
  &lt;/a&gt;
  What is Stand-up?
&lt;/h2&gt;

&lt;p&gt;A series of daily meeting with set questions to give a quick update on your current progress. Usually held a start of the day so all team members can get a quick update on where everyone is. sThere is a set time limit, around 15 minutes, and only one person talks at a time. This is often controlled by having a focus object like a book. Only the person holding the object is allowed to speak when they are done they pass the object around. Our Bootcamp TAs recommended the item be heavy or unwieldy so no one will want to hold it too long. We used a broken chair arm.&lt;/p&gt;

&lt;p&gt;The questions are.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What did you do yesterday?&lt;/li&gt;
&lt;li&gt;What are you doing today?&lt;/li&gt;
&lt;li&gt;Do you have any blockers?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What did you do yesterday?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuTFJS_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://christopherleejarvis.com/JarvisScript/wp-content/uploads/2021/06/cap_marvel_hammer.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuTFJS_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://christopherleejarvis.com/JarvisScript/wp-content/uploads/2021/06/cap_marvel_hammer.jpg" alt="captain Marvel holding Thor's hammer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What did you accomplish yesterday or since the last update? Did you meet your goal? What did you learn?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What are you doing today?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What do you plan to do today. Any particular goals you want to met before the end of day.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you have any blockers?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A blocker is something keeping you from your goal. A problem you need some help to resolve. Anything team mates can help with. Team members can give you some quick tips. For more involved answers you can set up a one on one discussion outside of the stand-up. By using a phrase like "Let's talk about this more after the meeting."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everyone should get a chance to announce where they stand and if they need help. Over all these should be quick focused meetings to keep the group informed of any progress. In larger companies departments may do their own stand-up and then send a representative to a larger company or division stand-up. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wTz3Gizh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://christopherleejarvis.com/JarvisScript/wp-content/uploads/2021/06/time.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wTz3Gizh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://christopherleejarvis.com/JarvisScript/wp-content/uploads/2021/06/time.jpg" alt="a man with a clock for a head"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stand-ups are a good tool to reduce meetings and get people back to creating. Too many meetings can kill productivity and concentration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-this-more-after-the-meeting"&gt;
  &lt;/a&gt;
  Let's talk about this more after the meeting.
&lt;/h2&gt;

&lt;p&gt;Does your company have stand-up traditions? Do you have a certain object you pass around?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-$JarvisScript git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Security news weekly round-up - 4th June 2021</title>
      <author>Habdul Hazeez</author>
      <pubDate>Fri, 04 Jun 2021 18:43:31 +0000</pubDate>
      <link>https://dev.to/ziizium/security-news-weekly-round-up-4th-june-2021-1inm</link>
      <guid>https://dev.to/ziizium/security-news-weekly-round-up-4th-june-2021-1inm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;Oh! Yeah, I made it this week!&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This week security review is mostly about research in computer security.&lt;/p&gt;

&lt;p&gt;It was fun reading and curating these links, and I know you'll have fun reading them.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#researchers-warn-of-facefish-backdoor-spreading-linux-rootkits"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://thehackernews.com/2021/05/researchers-warn-of-facefish-backdoor.html"&gt;Researchers Warn of Facefish Backdoor Spreading Linux Rootkits&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Who does not use Linux? No one. You might be thinking: I use a Mac or I use a PC, well, I'll take it you go online every day (like right now) and do you know the operating system running the server software of your favorite website? There is 90% chance that it is Linux.&lt;/p&gt;

&lt;p&gt;This is a solid reason for you to read this article. But to aid you, here is an excerpt from the article with the key take-away in bold:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Facefish goes through a multi-stage infection process, which commences with a command injection against CWP to retrieve a dropper ("sshins") from a remote server, which then releases &lt;b&gt;a rootkit that ultimately takes charge of collecting and transmitting sensitive information back to the server&lt;/b&gt;, in addition to awaiting further instructions issued by the command-and-control (C2) server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#researchers-demonstrate-2-new-hacks-to-modify-certified-pdf-documents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://thehackernews.com/2021/05/researchers-demonstrate-2-new-hacks-to.html"&gt;Researchers Demonstrate 2 New Hacks to Modify Certified PDF Documents&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Yeah, I know, yet another research. You should forgive me, but I do love research and enjoy reading about it.&lt;/p&gt;

&lt;p&gt;These attacks are dubbed "Evil Annotation and Sneaky Signature attacks". The name of the attacks should send shivers down your spine, if not, then I am sure the excerpt below will do the trick (key take-away in bold).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;The Evil Annotation Attack (EAA&lt;/b&gt; works by modifying a certiÔ¨Åed document that's provisioned to insert annotations to &lt;b&gt;include an annotation containing malicious code, which is then sent to the victim&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, the idea behind the &lt;b&gt;Sneaky Signature attack (SSA)&lt;/b&gt; is to &lt;b&gt;manipulate the appearance&lt;/b&gt; by adding overlaying signature elements to a document that allows filling out form fields.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#malware-can-use-this-trick-to-bypass-ransomware-defense-in-antivirus-solutions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://thehackernews.com/2021/06/malware-can-use-this-trick-to-bypass.html"&gt;Malware Can Use This Trick to Bypass Ransomware Defense in Antivirus Solutions&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Pardon me, it's another research üòá.&lt;/p&gt;

&lt;p&gt;It all revolves around Protected Folders.&lt;/p&gt;

&lt;p&gt;Here is an excerpt to get you started (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Shortcomings in malware mitigation software could not just permit unauthorized code to turn off their protection features, design &lt;b&gt;flaws in Protected Folders solution provided by antivirus vendors could be abused&lt;/b&gt; by, say, ransomware to change the contents of files using an app that's provisioned write access to the folder and encrypt user data, or a wipeware to irrevocably destroy personal files of victims.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#critical-wordpress-plugin-zeroday-under-active-exploitation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.bleepingcomputer.com/news/security/critical-wordpress-plugin-zero-day-under-active-exploitation/"&gt;Critical WordPress plugin zero-day under active exploitation&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You read that right. If you (or anyone else) use WordPress, read this article or send it to them.&lt;/p&gt;

&lt;p&gt;Which plugin is affected by the bug? Fancy Product Designer.&lt;/p&gt;

&lt;p&gt;Excerpt from the article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;Attackers who successfully exploit the Fancy Product Designer bug can&lt;/b&gt; bypass built-in checks blocking malicious files uploading to deploy executable PHP files on sites where the plugin is installed.&lt;/p&gt;

&lt;p&gt;This allows the threat actors to &lt;b&gt;completely take over vulnerable sites following remote code execution attacks&lt;/b&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#researchers-warn-of-critical-bugs-affecting-realtek-wifi-module"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://thehackernews.com/2021/06/researchers-warn-of-critical-bugs.html"&gt;Researchers Warn of Critical Bugs Affecting Realtek Wi-Fi Module&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The title says it all, but still, you should read the article.&lt;/p&gt;

&lt;p&gt;Here is an excerpt (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A new set of critical vulnerabilities has been disclosed in the Realtek RTL8170C Wi-Fi module that &lt;b&gt;an adversary could abuse to gain elevated privileges on a device and hijack wireless communications&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Successful exploitation would lead to &lt;/b&gt; complete control of the Wi-Fi module and potential &lt;b&gt;root access&lt;/b&gt; on the OS (such as Linux or Android) of the embedded device that uses this module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#wordpress-force-installs-jetpack-security-update-on-5-million-sites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.bleepingcomputer.com/news/security/wordpress-force-installs-jetpack-security-update-on-5-million-sites/"&gt;WordPress force installs Jetpack security update on 5 million sites&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Sometimes you have to step in and do the job yourself, and that is exactly what WordPress did in this scenario.&lt;/p&gt;

&lt;p&gt;It's security, you do not take it for granted.&lt;/p&gt;

&lt;p&gt;Excerpt from the article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The vulnerability was found in the Carousel feature and its option to display comments for each image, with &lt;em&gt;nguyenhg_vcs&lt;/em&gt; being the one credited for responsibly disclosing the security bug.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-hack-into-5500-accounts-just-using-credential-stuffing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://nakedsecurity.sophos.com/2021/06/04/how-to-hack-into-5500-accounts-just-using-credential-stuffing/"&gt;How to hack into 5500 accounts‚Ä¶ just using ‚Äúcredential stuffing‚Äù&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It's a fun research into users password usage. Trust me, it's worthy of your time.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Spoiler alert: People still use &lt;code&gt;123456&lt;/code&gt; as their passwords.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Credits&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/@hudsoncrafted"&gt;Debby Hudson on Unsplash&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;That's it for this week, I'll see you next Friday.&lt;/p&gt;

</description>
      <category>security</category>
    </item>
    <item>
      <title>12 Free Design Resources Every Developer Should Bookmark</title>
      <author>Akshit Tiwari</author>
      <pubDate>Fri, 04 Jun 2021 18:36:11 +0000</pubDate>
      <link>https://dev.to/coursesity/12-free-design-resources-every-developer-should-bookmark-846</link>
      <guid>https://dev.to/coursesity/12-free-design-resources-every-developer-should-bookmark-846</guid>
      <description>&lt;p&gt;We know how stressful it can be to search for various designing resources here and there. So, to save you some time, we decided to create this collection to provide all the best resource websites in one place. These free design resources will help you to create an eye-catching and visually rich design project.&lt;/p&gt;

&lt;p&gt;Here are the top free design resource websites that every developer should bookmark.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-100-daily-ui-free"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. &lt;a href="https://100dailyui.webflow.io/"&gt;100 Daily UI Free&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xfDwlmqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eev66zzzwtsmp578ftdb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xfDwlmqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eev66zzzwtsmp578ftdb.jpg" alt="100Daily"&gt;&lt;/a&gt;&lt;br&gt;
100 Daily UI Challenge is a free collection of Figma elements and screens that you can customize with colors, shapes, and elements. It allows you to create some awesome UI designs and create better products. &lt;br&gt;
This resource is free for commercial and personal use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-invision-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. &lt;a href="https://www.invisionapp.com/inside-design/design-resources/"&gt;Invision App&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jojh9jny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xn2vhouxptjbarhwiwtu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jojh9jny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xn2vhouxptjbarhwiwtu.png" alt="Invision"&gt;&lt;/a&gt;&lt;br&gt;
Invision is a digital product design platform that powers the world's best user experiences. The InVision platform provides intuitive tools for ideation, design, prototyping, and design management all in one place. Over 7 million users at more than tens of thousands of companies use it, including American Express, Boeing, Netflix, Ikea, Slack, and Virgin Atlantic.  Additionally, it offers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/mobile-app-templates/"&gt;App Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/photoshop-templates/"&gt;Photoshop Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/sketch-templates/"&gt;Sketch Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/ui-elements/"&gt;UI Elements and Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/website-design-tempaltes/"&gt;Web Design Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/icon-packs/"&gt;Free Icon Packs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/responsive-design-templates/"&gt;Responsive Design Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/studio-templates/"&gt;Studio Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/ui-kits/"&gt;Free UI Kits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.invisionapp.com/inside-design/design-resources/collections/mockups/"&gt;Website and App Mockups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-icons-8"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. &lt;a href="http://icons8.com/illustrations"&gt;Icons 8&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Po6Qcf5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub1uuif759wbdd8u2kei.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Po6Qcf5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub1uuif759wbdd8u2kei.jpg" alt="Icons"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you're not an artist, Icons 8 can help you overcome the lack of quality graphics on your product. See what top Dribbble artists are doing to class up your product. Some features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://icons8.com/emoji"&gt;EmojiNew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com/music"&gt;Royalty-free music&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com/icons"&gt;Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://photos.icons8.com/"&gt;Stock photos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com/illustrations"&gt;Vector illustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com/line-awesome"&gt;Line Awesome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://generated.photos/"&gt;AI-generated faces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-uplabs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. &lt;a href="https://www.uplabs.com/"&gt;UpLabs&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MkBcUNOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnmdspmc2q0pi5cwt0z0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkBcUNOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnmdspmc2q0pi5cwt0z0.png" alt="Uplabs"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;UpLabs is a website that helps designers and developers find and share resources for building apps and websites. It is a community-powered marketplace that lets designers and developers share ready-to-use user interface components such as login boxes and payment forms. Designers and developers can receive feedback from each other on live concepts within the UpLabs community.&lt;/p&gt;

&lt;p&gt;UpLab's three showcases: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.ios.uplabs.com/"&gt;iOSUp&lt;/a&gt; for iOS/OS X&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.site.uplabs.com/"&gt;SiteUp&lt;/a&gt; for Web design&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.uplabs.com/templates/android"&gt;MaterialUp&lt;/a&gt; for Material Design&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-undraw"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. &lt;a href="http://undraw.co/"&gt;Undraw&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtRunDvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjsctbo6ivtbm127q9oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtRunDvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjsctbo6ivtbm127q9oh.png" alt="Undraw"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Undraw is a library of up-to-date, beautiful vector icons available in four styles. It is royalty-free and free to use on commercial and personal projects. UnDraw provides free access to every image, asset, and vector it publishes. You can use them for both commercial and non-commercial purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sketch App Sources&lt;/strong&gt; - Sketch UIs, Wireframes, Icons &amp;amp; much more&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-manypixels"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. &lt;a href="http://manypixels.co/"&gt;ManyPixels&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4F1Qao2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f4elts45u1l8pahcovl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4F1Qao2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f4elts45u1l8pahcovl.jpg" alt="ManyPixels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ManyPixels is a good choice for businesses that need graphic design services but don't want an in-house graphic designer. Over 1,300 customers use ManyPixels. Companies such as Beam, Decathlon, and Gartner are among the customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-types-of-users-can-use-manypixels"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What types of users can use ManyPixels?&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bloggers/podcast hosts who want catchy icons for their channel.&lt;/li&gt;
&lt;li&gt;Creative and marketing agencies who need email campaign designs, event graphics, or T-shirt design.&lt;/li&gt;
&lt;li&gt;Corporations in need of business reports, infographic illustrations, and eCommerce graphics.&lt;/li&gt;
&lt;li&gt;Startups that need help with branding, email marketing, and social media graphics.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-paaatterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. &lt;a href="https://products.ls.graphics/paaatterns/"&gt;Paaatterns&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hohomR7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egetuf7lmck166a8274t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hohomR7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egetuf7lmck166a8274t.png" alt="Patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have a tight deadline and want to be visually strong, consider our patterns - hand-made shapes and well-picked colors will come in handy when you run out of ideas. Paaatterns provides the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ls.graphics/branding-mockups"&gt;Branding Mockups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ls.graphics/scene-creators"&gt;Scene Creators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ls.graphics/ui-ux-tools"&gt;UI/UX Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ls.graphics/devices-mockups"&gt;Devices Mockups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-ira-design"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. &lt;a href="https://iradesign.io/"&gt;IRA Design&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WnRZau3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr4qqk8ur56ccpzfzmzt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnRZau3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tr4qqk8ur56ccpzfzmzt.jpg" alt="IRA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IRA comes with a variety of ready-to-use features, gradients, and components. You can use the samples as they are or add a new block from the UI Kit. With IRA, you can create stunning illustrations using hand-drawn sketch components, a selection of 5 gradients, and AI, SVG, and PNG formats.&lt;/p&gt;

&lt;p&gt;You can choose the colors, objects, formats, and scales for your images without affecting the quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-blush"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. &lt;a href="https://blush.design/"&gt;Blush&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8dh_CU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syev3l1er3m1qnme7mse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8dh_CU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syev3l1er3m1qnme7mse.png" alt="Blush"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blush is a tool that showcases illustrations from artists around the world. The best thing is that you can customize every piece of an example to create your compositions. It is available as a plugin on Figma, making it simple for designers to play with illustration in their design tool without losing context in the canvas.&lt;/p&gt;

&lt;p&gt;You can create eye-catching banners and visual slides, as well as graphs with rich visualizations with Blush.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-freeillustrations"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. &lt;a href="https://freellustrations.com/"&gt;Freeillustrations&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--13kUs5Bt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bis9zr8pta8bmbcu4sao.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--13kUs5Bt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bis9zr8pta8bmbcu4sao.jpg" alt="Freeillustration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This collection of high-resolution vector and illustration background images is perfect for modern websites and landing pages. The weekly illustrations are updated with different topics every week. Also, you can contact them if you have any ideas for illustration background images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-humaaans"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11. &lt;a href="https://www.humaaans.com/"&gt;Humaaans&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDUaoVBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qahiz31vxipj1o6puzc6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDUaoVBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qahiz31vxipj1o6puzc6.png" alt="Humaans"&gt;&lt;/a&gt;&lt;br&gt;
Humaaans is a free library to mix and match illustrations of people. You can create neat scenes by making changes to their positions, clothing, colors, and hairstyle. Furthermore, it is possible to add backgrounds to it and harness the power of libraries to customize it to suit your needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available On&lt;/strong&gt; - Sketch, Figma, InVision Studio, and Adobe XD.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-ui-space"&gt;
  &lt;/a&gt;
  &lt;strong&gt;12. &lt;a href="https://uispace.net/"&gt;UI Space&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2829kE4L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wor90coanddi01ulypi5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2829kE4L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wor90coanddi01ulypi5.jpg" alt="UI space"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the following features for free in UI space:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://uispace.net/free-code"&gt;Scripts and Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uispace.net/free-font"&gt;Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uispace.net/free-ai"&gt;AI resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uispace.net/free-sketch"&gt;Sketch Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uispace.net/free-psd"&gt;PSD Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uispace.net/free-icons"&gt;Icons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>How to create a function component in react</title>
      <author>Aastha Pandey</author>
      <pubDate>Fri, 04 Jun 2021 18:29:10 +0000</pubDate>
      <link>https://dev.to/aasthapandey/how-to-create-a-function-component-in-react-4fda</link>
      <guid>https://dev.to/aasthapandey/how-to-create-a-function-component-in-react-4fda</guid>
      <description>&lt;p&gt;Below are the two ways of creating function component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FirstComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;!!!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;FirstComponent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or &lt;br&gt;
The below code is using &lt;em&gt;arrow function&lt;/em&gt; for creating function component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FirstComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;!!!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;FirstComponent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above two function components can be imported &lt;em&gt;without enclosing the component name inside curly braces&lt;/em&gt; because &lt;em&gt;default&lt;/em&gt; has been used with &lt;em&gt;export&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;There can be only one default export per module.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export default FirstComponent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import FirstComponent from "FirstComponent"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But if there is only &lt;em&gt;export&lt;/em&gt; in front of a function component  then the import requires curly braces around the component's name.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export const FirstComponent = () =&amp;gt; {}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import {FirstComponent} from "FirstComponent"&lt;/code&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
