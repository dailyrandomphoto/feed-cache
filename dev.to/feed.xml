<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>20 Essential Angular 7 Interview Questions</title>
      <author>hrishikesh1990</author>
      <pubDate>Fri, 17 Sep 2021 11:47:28 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/20-essential-angular-7-interview-questions-3802</link>
      <guid>https://dev.to/hrishikesh1990/20-essential-angular-7-interview-questions-3802</guid>
      <description>&lt;p&gt;Hello, fellow developers, I have compiled a list of essential Angular interview questions that I felt every developer should know.&lt;/p&gt;

&lt;p&gt;Do drop your thoughts in the comments section below. Also, feel free to comment in case you find any content to be incorrect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-how-is-angular-7-different-from-angularjs"&gt;
  &lt;/a&gt;
  1. How is Angular 7 different from AngularJS?
&lt;/h2&gt;

&lt;p&gt;Angular and AngularJS are two entirely different and unrelated frontend frameworks, although both are built by Google and have the same prefix in their name. AngularJS was released in 2010 and it was eventually replaced by Angular. Angular 7 is the latest version of Angular.&lt;/p&gt;

&lt;p&gt;Angular is a TypeScript based development platform whereas AngularJS is a JavaScript-based platform.&lt;/p&gt;

&lt;p&gt;Angular 7 comes with powerful methods to easily build frontend applications. These features include support for two-way data binding, Angular Elements, CLI workspaces, Extended library support, Animation improvements, RxJS, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-are-the-essential-components-of-angular"&gt;
  &lt;/a&gt;
  2. What are the essential components of Angular?
&lt;/h2&gt;

&lt;p&gt;Angular consists of a few core components that help you build applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components - Components are the building blocks of an Angular application. Each component consists of a Typescript class containing a decorator, an HTML template, and styles.&lt;/li&gt;
&lt;li&gt;Templates - Templates are a form of HTML tags that are present in components. These templates are used to declare how a component must be rendered.&lt;/li&gt;
&lt;li&gt;Modules - Modules are also considered as building blocks in Angular. However, modules have a specific set of capabilities or workflow.&lt;/li&gt;
&lt;li&gt;Services - Services could be broadly defined as a class with a well-defined purpose.&lt;/li&gt;
&lt;li&gt;Metadata - Metadata is used to add data to a class. This data helps Angular understand how a class needs to be processed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-what-is-twoway-binding"&gt;
  &lt;/a&gt;
  3. What is two-way binding?
&lt;/h2&gt;

&lt;p&gt;Two-way binding is a common Angular 7 interview question. It is a process in Angular that gives components a way to share data between the component class and its template. In essence, if the data is changed in one place it will automatically change the data at the other end.&lt;/p&gt;

&lt;p&gt;Two-way binding is commonly used to listen for events and update values between parent and child components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-what-are-directives-in-angular-7"&gt;
  &lt;/a&gt;
  4. What are directives in Angular 7?
&lt;/h2&gt;

&lt;p&gt;Directives or Attribute directives are used to add/ change the appearance &amp;amp; behavior of DOM elements and components.&lt;/p&gt;

&lt;p&gt;The below code showcases how directives are used. This is a common Angular 7 interview question.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Directive&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ElementRef&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nd"&gt;@angular&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Directive&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt; &lt;span class="nl"&gt;selector:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Highlight&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HighlightDirective&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;el:&lt;/span&gt; &lt;span class="nc"&gt;ElementRef&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nativeElement&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this code would display a red background when highlighted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;Highlight&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Highlight me!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-what-is-metadata"&gt;
  &lt;/a&gt;
  5. What is metadata?
&lt;/h2&gt;

&lt;p&gt;Metadata is used to decorate a class and hence it is always represented in the decorator. This helps the class exhibit the desired behavior.&lt;/p&gt;

&lt;p&gt;The below code is an example of using metadata in Class decorators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;NgModule&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nd"&gt;@angular&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Component&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
  &lt;span class="nl"&gt;selector:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;template:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;
&lt;span class="nc"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewComponent&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@NgModule&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
  &lt;span class="nl"&gt;imports:&lt;/span&gt; &lt;span class="o"&gt;[],&lt;/span&gt;
  &lt;span class="nl"&gt;declarations:&lt;/span&gt; &lt;span class="o"&gt;[],&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewModule&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-what-are-dependency-injections-and-why-are-they-used"&gt;
  &lt;/a&gt;
  6. What are dependency injections and why are they used?
&lt;/h2&gt;

&lt;p&gt;Dependency injection is a design pattern that allows a class to request dependencies from external sources.&lt;/p&gt;

&lt;p&gt;Angular provides dependencies to classes upon instantiation. Although these dependencies are needed for the class to function, adding dependencies increases flexibility and modularity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-what-is-the-aheadoftime-compilation-in-angular"&gt;
  &lt;/a&gt;
  7. What is the Ahead-Of-Time compilation in Angular?
&lt;/h2&gt;

&lt;p&gt;Ahead-Of-Time compilation or AOT compilation is one of the two compilation methods that Angular provides. In this particular type of compilation, the application complies during build time.&lt;/p&gt;

&lt;p&gt;Bowsers do not understand components and templates, and hence Angular apps are compiled in the browser. The compiled code is then displayed; this type of compilation is called Ahead-Of-Time compilation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of AOT:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increased Security&lt;/li&gt;
&lt;li&gt;Faster Rendering&lt;/li&gt;
&lt;li&gt;Easier Error handling&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-what-are-pipes-in-angular-explain-with-an-example"&gt;
  &lt;/a&gt;
  8. What are pipes in Angular? Explain with an example.
&lt;/h2&gt;

&lt;p&gt;Pipes receive input data and transform it into the desired output so that it can be displayed properly.&lt;/p&gt;

&lt;p&gt;Example - In the below code we have used the DatePipe to display a date in the desired format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nd"&gt;@angular&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Component&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
  &lt;span class="nl"&gt;selector:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;template:&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="nc"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="o"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;birthday&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;}}&lt;/span&gt;

&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BirthdayComponent&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// July 7, 2021&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-explain-observables"&gt;
  &lt;/a&gt;
  9. Explain Observables
&lt;/h2&gt;

&lt;p&gt;Observables are used to pass messages between various parts of your Angular application. Observables are declarative and are used to deliver multiple values of any type.&lt;/p&gt;

&lt;p&gt;Observables are commonly used in asynchronous programming and to handle multiple values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-what-does-a-testbed-in-angular-mean"&gt;
  &lt;/a&gt;
  10. What does a TestBed in Angular mean?
&lt;/h2&gt;

&lt;p&gt;Angular TestBed is a primary API that is used to write unit tests for Angular Applications and Libraries.&lt;/p&gt;

&lt;p&gt;It is commonly used as it allows you to test behavior and change detections that depend on the Angular Framework.&lt;/p&gt;

&lt;p&gt;TestBed is commonly used and hence you are very likely to get an Angular 7 interview question based on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-what-are-router-events"&gt;
  &lt;/a&gt;
  11. What are Router Events?
&lt;/h2&gt;

&lt;p&gt;The Router event allows you to track the entire lifecycle of the route. This is done by emitting navigation events through the router.event property.&lt;/p&gt;

&lt;p&gt;The sequence is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NavigationStart&lt;/li&gt;
&lt;li&gt;RouteConfigLoadStart&lt;/li&gt;
&lt;li&gt;RouteConfigLoadEnd&lt;/li&gt;
&lt;li&gt;RoutesRecognized&lt;/li&gt;
&lt;li&gt;GuardsCheckStart&lt;/li&gt;
&lt;li&gt;ChildActivationStart&lt;/li&gt;
&lt;li&gt;ActivationStart&lt;/li&gt;
&lt;li&gt;GuardsCheckEnd&lt;/li&gt;
&lt;li&gt;ResolveStart&lt;/li&gt;
&lt;li&gt;ResolveEnd&lt;/li&gt;
&lt;li&gt;ActivationEnd&lt;/li&gt;
&lt;li&gt;ChildActivationEnd&lt;/li&gt;
&lt;li&gt;NavigationEnd&lt;/li&gt;
&lt;li&gt;NavigationCancel&lt;/li&gt;
&lt;li&gt;NavigationError&lt;/li&gt;
&lt;li&gt;Scroll&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#12-what-is-authentication-and-authorization-in-angular"&gt;
  &lt;/a&gt;
  12. What is authentication and authorization in Angular?
&lt;/h2&gt;

&lt;p&gt;During login, the credentials are sent to an authentication API. This API is present on the server and validation is done there. After a JWT (JSON Web Token) is returned, this token has information about the user and is used to identify the user. This process is called Authentication.&lt;/p&gt;

&lt;p&gt;After authentication, users are given various levels of permissions/ access. Some users may have access to all the pages and some might not. This process of restricting the content is called Authorization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-explain-string-interpolation"&gt;
  &lt;/a&gt;
  13. Explain string interpolation.
&lt;/h2&gt;

&lt;p&gt;String interpolation in Angular refers to the special type of syntax that makes use of template expressions to display component data.&lt;/p&gt;

&lt;p&gt;Such template variables are enclosed within double curly braces &lt;code&gt;{{}}&lt;/code&gt;. The expressions that are executed by JavaScript are added inside the curly braces and the output is embedded into HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-what-are-activated-routes-in-angular"&gt;
  &lt;/a&gt;
  14. What are activated routes in Angular?
&lt;/h2&gt;

&lt;p&gt;Activated routes provide access to information about the route associated with a component. These components are loaded in an outlet.&lt;/p&gt;

&lt;p&gt;This method is used to traverse the RouterState tree and get information from the nodes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-explain-mvvm-architecture"&gt;
  &lt;/a&gt;
  15. Explain MVVM architecture.
&lt;/h2&gt;

&lt;p&gt;The MVVM architecture is used to remove the tight coupling between components. MVVM architecture consists of three components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Model - Models contain the structure of the application which includes the logic and the data behind an application. The logic includes the data sources, classes, and repositories.&lt;/li&gt;
&lt;li&gt;View - View is the visual layer consisting of the HTML template of the application. Furthermore, it sends user actions to the ViewModel.&lt;/li&gt;
&lt;li&gt;ViewModel - ViewModel acts as a bridge between both the View and Model. The view is data-bound to the ViewModel and hence any change made to the view is reflected on the ViewModel. The ViewModel subsequently changes the data inside the Model.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-what-are-lifecycle-hooks-in-angular"&gt;
  &lt;/a&gt;
  16. What are lifecycle hooks in Angular?
&lt;/h2&gt;

&lt;p&gt;Components in an Angular application have a lifecycle right from its initiation. These are a set of processes that a component goes through from its initiation until it is destroyed. We use Angular hooks to tap into these phases and trigger changes in the life cycle.&lt;/p&gt;

&lt;p&gt;These are the various lifecycle steps involved&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ngOnChanges()&lt;/li&gt;
&lt;li&gt;ngOnInit()&lt;/li&gt;
&lt;li&gt;ngDoCheck()&lt;/li&gt;
&lt;li&gt;ngAfterContentInit()&lt;/li&gt;
&lt;li&gt;ngAfterContentChecked()&lt;/li&gt;
&lt;li&gt;ngAfterViewInit()&lt;/li&gt;
&lt;li&gt;ngAfterViewChecked()&lt;/li&gt;
&lt;li&gt;ngOnDestroy()&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#17-differentiate-between-declaration-provider-and-import-in-the-ngmodule"&gt;
  &lt;/a&gt;
  17. Differentiate between declaration, provider and import in the NgModule?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Declarations&lt;/strong&gt; - Declarations are utilized to create directives for the current modules available. The selectors of the various directives are only matched with their HTML if they are declared or imported.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Providers&lt;/strong&gt; - Provides services and values known to the dependency injection. Since they are injected into other services or directives, providers must be added to the root scope.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Import&lt;/strong&gt; - Import is used to make declarations of other modules available in the current module.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#18-what-is-routernavigate-used-for"&gt;
  &lt;/a&gt;
  18. What is router.navigate used for?
&lt;/h2&gt;

&lt;p&gt;Router.navigate specifies a root URL through relative navigation.&lt;/p&gt;

&lt;p&gt;This function can be used to navigate in Angular&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;toDetails&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;article:&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;navigate&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blogId&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#19-what-is-the-urlsegement-interface-in-angular-used-for"&gt;
  &lt;/a&gt;
  19. What is the UrlSegement interface in Angular used for?
&lt;/h2&gt;

&lt;p&gt;UrlSegement can be used to add interfaces in Angular 7. The UrlSegment interface represents the constructor, URL segment, Properties, and methods that are present in the UrlSegment class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-differentiate-between-structural-directives-and-attribute-directives-in-angular"&gt;
  &lt;/a&gt;
  20. Differentiate between structural directives and attribute directives in Angular.
&lt;/h2&gt;

&lt;p&gt;Structural Directives - Structural directives are used to re-shape the DOM and HTML layout. All the modifications in the layout are done by manipulating the HTML elements.&lt;/p&gt;

&lt;p&gt;Attribute Directives - Attribute directives have their own style and layout. This is possible because it is a single component, however, they do support multiple directives as well.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>textbaisedgame.py</title>
      <author>MasterPr0grammer</author>
      <pubDate>Fri, 17 Sep 2021 11:44:36 +0000</pubDate>
      <link>https://dev.to/masterpr0grammer/textbaisedgame-py-4dh1</link>
      <guid>https://dev.to/masterpr0grammer/textbaisedgame-py-4dh1</guid>
      <description>&lt;p&gt;def play_again():&lt;br&gt;
  print("\nDo you want to play again? (y or n)")&lt;/p&gt;

&lt;p&gt;# convert the player's input to lower_case&lt;br&gt;
  answer = input("&amp;gt;").lower()&lt;/p&gt;

&lt;p&gt;if "y" in answer:&lt;br&gt;
    # if player typed "yes" or "y" start the game from the beginning&lt;br&gt;
    start()&lt;br&gt;
  else:&lt;br&gt;
    # if user types anything besides "yes" or "y", exit() the program&lt;br&gt;
    exit()&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gameover-function-accepts-an-argument-called-reason"&gt;
  &lt;/a&gt;
  game_over function accepts an argument called "reason"
&lt;/h1&gt;

&lt;p&gt;def game_over(reason):&lt;br&gt;
  # print the "reason" in a new line (\n)&lt;br&gt;
  print("\n" + reason)&lt;br&gt;
  print("Game Over!")&lt;br&gt;
  # ask player to play again or not by activating play_again() function&lt;br&gt;
  play_again()&lt;/p&gt;

&lt;p&gt;def amougus_room():&lt;br&gt;
  # amougus room&lt;br&gt;
  print("\nYou are now in a sus room... the amougus room")&lt;br&gt;
  print("The imposter is in this room somewhere. You need to vote them out of the room")&lt;br&gt;
  print("Who would you like to vote out?")&lt;br&gt;
  print("1). Vote out Pink")&lt;br&gt;
  print("2). Vote out Red")&lt;br&gt;
  print("3). Vote out Black")&lt;br&gt;
  print("4). Vote out Yellow")&lt;br&gt;
  # take input()&lt;br&gt;
  answer = input("&amp;gt;")&lt;/p&gt;

&lt;p&gt;if answer == "1":&lt;br&gt;
    # wrong answer&lt;br&gt;
    game_over("You voted out a crewmate! Everyone thinks your sus and vote you out")&lt;br&gt;
  elif answer == "2":&lt;br&gt;
    # the player won the game&lt;br&gt;
    print("That was the imposter! The crewmates let you through.")&lt;br&gt;
    diamond_room()&lt;br&gt;
  elif answer == "3":&lt;br&gt;
    # wrong answer&lt;br&gt;
    game_over("You voted out the only black crewmate! Everyone thinks your racist and vote you out")&lt;br&gt;
  elif answer == "4":&lt;br&gt;
    # wrong answer&lt;br&gt;
    game_over("You voted out a crewmate! Everyone thinks your sus and vote you out")&lt;br&gt;
  else:&lt;br&gt;
    # call game_over() with "reason"&lt;br&gt;
    game_over("Go and learn how to type a number.")&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#diamond-room"&gt;
  &lt;/a&gt;
  diamond room
&lt;/h1&gt;

&lt;p&gt;def diamond_room():&lt;br&gt;
  # some prompts&lt;br&gt;
  print("\nYou are now in a room filled with diamonds!")&lt;br&gt;
  print("And there is a door too!")&lt;br&gt;
  print("What would you do? (1 or 2)")&lt;br&gt;
  print("1). Take some diamonds and go through the door.")&lt;br&gt;
  print("2). Just go through the door.")&lt;/p&gt;

&lt;p&gt;# take input()&lt;br&gt;
  answer = input("&amp;gt;")&lt;/p&gt;

&lt;p&gt;if answer == "1":&lt;br&gt;
    # the player is dead, call game_over() function with the "reason"&lt;br&gt;
    game_over("They were cursed diamonds! The moment you touched it, the building collapsed, and you die!")&lt;br&gt;
  elif answer == "2":&lt;br&gt;
    # the player won the game&lt;br&gt;
    print("\nNice, you're are an honest man! Congrats you win the game!")&lt;br&gt;
    # activate play_again() function&lt;br&gt;
    play_again()&lt;br&gt;
  else:&lt;br&gt;
    # call game_over() with "reason"&lt;br&gt;
    game_over("Go and learn how to type a number.")&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#monster-room"&gt;
  &lt;/a&gt;
  monster room
&lt;/h1&gt;

&lt;p&gt;def monster_room():&lt;br&gt;
  # some prompts&lt;br&gt;
  # '\n' is to print the line in a new line&lt;br&gt;
  print("\nNow you entered the room of a monster!")&lt;br&gt;
  print("The monster is sleeping.\nBehind the monster, there is another door. What would you do? (1 or 2)")&lt;br&gt;
  print("1). Go through the door silently.")&lt;br&gt;
  print("2). Kill the monster and show your courage!")&lt;br&gt;
  print("3). Start dancing with the monster and make a new friend.")&lt;br&gt;
  # take input()&lt;br&gt;
  answer = input("&amp;gt;")&lt;/p&gt;

&lt;p&gt;if answer == "1":&lt;br&gt;
    # lead him to the diamond_room()&lt;br&gt;
    diamond_room()&lt;br&gt;
  elif answer == "2":&lt;br&gt;
    # the player is dead, call game_over() with "reason"&lt;br&gt;
    game_over("The monster was hungry, he/it ate you.")&lt;br&gt;
  elif answer == "3":&lt;br&gt;
    # made a friend of the monster&lt;br&gt;
    print("\nYou made the monster cry, it has never been treated so nice in its life.")&lt;br&gt;
    diamond_room()&lt;br&gt;
    # 420 snoop dog room, instant win&lt;br&gt;
  elif answer == "420":&lt;br&gt;
   game_over("AYYYYY YOU AUTOMATICLY WIN BECAUSE OF YOUR SWAGGER, OUT THERE LOOKING LIKE SNOOP DOG")&lt;br&gt;
  else:&lt;br&gt;
    # game_over() with "reason"&lt;br&gt;
    game_over("Go and learn how to type a number.")&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bear-room"&gt;
  &lt;/a&gt;
  bear room
&lt;/h1&gt;

&lt;p&gt;def bear_room():&lt;br&gt;
  # give some prompts&lt;br&gt;
  # '\n' is to print the line in a new line&lt;br&gt;
  print("\nThere is a bear here.")&lt;br&gt;
  print("Behind the bear is another door.")&lt;br&gt;
  print("The bear is eating tasty honey!")&lt;br&gt;
  print("What would you do? (1 or 2)")&lt;br&gt;
  print("1). Take the honey.")&lt;br&gt;
  print("2). Taunt the bear.")&lt;br&gt;
  print("3). Share honey with bear.")&lt;br&gt;
  # take input()&lt;br&gt;
  answer = input("&amp;gt;")&lt;/p&gt;

&lt;p&gt;if answer == "1":&lt;br&gt;
    # the player is dead!&lt;br&gt;
    game_over("The bear killed you.")&lt;br&gt;
  elif answer == "2":&lt;br&gt;
    # lead him to the diamond_room()&lt;br&gt;
    print("\nYour Good time, the bear moved from the door. You can go through it now!")&lt;br&gt;
    diamond_room()&lt;br&gt;
    # 69 instant win room&lt;br&gt;
  elif answer == "3":&lt;br&gt;
    print("\nThe bear thinks it was a bit sus that you shared honey with him but he's happy for your hospitality.")&lt;br&gt;
    amougus_room()&lt;br&gt;
  elif answer == "69":&lt;br&gt;
    game_over("AYYYYY YOU AUTOMATICLY WIN BECAUSE OF YOUR SWAGGER")&lt;br&gt;
  else:&lt;br&gt;
    # else call game_over() function with the "reason" argument&lt;br&gt;
    game_over("Don't you know how to type a number?")&lt;/p&gt;

&lt;p&gt;def start():&lt;br&gt;
  # give some prompts.&lt;br&gt;
  print("\nYou are standing in a dark room.")&lt;br&gt;
  print("There is a door to your left and right, which one do you take? (l or r)")&lt;/p&gt;

&lt;p&gt;# convert the player's input() to lower_case&lt;br&gt;
  answer = input("&amp;gt;").lower()&lt;/p&gt;

&lt;p&gt;if "l" in answer:&lt;br&gt;
    # if player typed "left" or "l" lead him to bear_room()&lt;br&gt;
    bear_room()&lt;br&gt;
  elif "r" in answer:&lt;br&gt;
    # else if player typed "right" or "r" lead him to monster_room()&lt;br&gt;
    monster_room()&lt;br&gt;
  else:&lt;br&gt;
    # else call game_over() function with the "reason" argument&lt;br&gt;
    game_over("Don't you know how to type something properly?")&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#start-the-game"&gt;
  &lt;/a&gt;
  start the game
&lt;/h1&gt;

&lt;p&gt;start()&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>test</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>nest.js enhanced http module</title>
      <author>benhason1</author>
      <pubDate>Fri, 17 Sep 2021 11:29:31 +0000</pubDate>
      <link>https://dev.to/benhason1/nest-js-enhanced-http-6e</link>
      <guid>https://dev.to/benhason1/nest-js-enhanced-http-6e</guid>
      <description>&lt;p&gt;If you are node.js developer you must heard about nest.js (unless you lived under a rock).&lt;/p&gt;

&lt;p&gt;In short this library help you make your code more organized by split your code into what they called "modules" that you can then import in another modules.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  for example:
&lt;/h4&gt;

&lt;p&gt;lets say i want to build an app that let you fetch pokemons from this api &lt;a href="https://pokeapi.co/"&gt;https://pokeapi.co/&lt;/a&gt; and let you save your favorite ones.&lt;/p&gt;

&lt;p&gt;The way that you would split your code in nest.js is by creating: &lt;br&gt;
&lt;code&gt;HttpModule&lt;/code&gt;: let you run http methods&lt;br&gt;
&lt;code&gt;DbModule&lt;/code&gt;  : let you insert items into the db&lt;br&gt;
&lt;code&gt;PokemonModule&lt;/code&gt; : the module that discover your api to the consumers.&lt;/p&gt;

&lt;p&gt;then you will need to import the DbModule and the HttpModule into the PokemonModule so he will be able to use it.&lt;br&gt;
the &lt;code&gt;PokemonModule.ts&lt;/code&gt; will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DbModule&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/db-module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;HttpModule&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/http-module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;import&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HttpModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DbModule&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#existing-modules"&gt;
  &lt;/a&gt;
  Existing Modules
&lt;/h2&gt;

&lt;p&gt;nest.js already provides set of common modules that we can use instead of writing our own.&lt;br&gt;
one of those is the HttpModule, all you need to do is to import it in this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DbModule&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/db-module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;import&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HttpModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DbModule&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  the problem
&lt;/h3&gt;

&lt;p&gt;the problem that I faced while trying to use this very common and simple library is its implementation, nest.js implemented this library in the observable way with the help of rxjs.&lt;br&gt;
although that this library provide very powerful features like operators, most of the time we don't need it and that just add some complexity to our code which we could avoid by using Promises.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  the solution
&lt;/h3&gt;

&lt;p&gt;There were 2 solutions to this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;implement it on your own &lt;/li&gt;
&lt;li&gt;add &lt;code&gt;.toPromise()&lt;/code&gt; to the end of every http call - kind of patchy way that also make your code unreadable and strange.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#there-is-a-third-solution"&gt;
  &lt;/a&gt;
  there is a third solution
&lt;/h2&gt;

&lt;p&gt;when I faced this problem I checked 2 things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;am I the only one that encouter this problem?&lt;/li&gt;
&lt;li&gt;is there a library that implement the same HttpModule but in the promise way?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-answer-to-both-of-those-questions-is-no"&gt;
  &lt;/a&gt;
  The answer to both of those questions is no.
&lt;/h4&gt;

&lt;p&gt;In order to answer those questions i asked developers who use nest.js if they facing the same issue (and how they solve it) and also checked if there are questions on github/stack overflow about it.&lt;br&gt;
the answer was clearly that there isn't library to solve this problem, and they have to implement it on their own or use the patchy .toPromise() everywhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nestjshttppromise"&gt;
  &lt;/a&gt;
  nestjs-http-promise
&lt;/h2&gt;

&lt;p&gt;My solution to this issue was to create library that have the same features (easy to migrate from the old one) as the existing HttpModule but in Promise way. &lt;/p&gt;

&lt;p&gt;features of the library: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;retry mechanism - one of the most common things to do when using http request to call an external api is to retry failed requests&lt;/li&gt;
&lt;li&gt;promise based&lt;/li&gt;
&lt;li&gt;axios - the most used http library in js&lt;/li&gt;
&lt;li&gt;typescript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;features for the future:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add option to make this module global like nest.js ConfigModule&lt;/li&gt;
&lt;li&gt;make the errors more readable - axiosError override the stacktrace, you can read more about it here &lt;a href="https://github.com/axios/axios/issues/2387"&gt;https://github.com/axios/axios/issues/2387&lt;/a&gt;
(this problem exist also in nest.js HttpModule)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;take a look at this library and hit the ⭐️ if you liked it :)&lt;br&gt;
&lt;a href="https://github.com/benhason1/nestjs-http-promise"&gt;https://github.com/benhason1/nestjs-http-promise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any issues or reviews on this library I will be glad if you could open issue on the repo or just message me.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Starter Code Generator for Electron with Vue or React</title>
      <author>Rajvir Singh</author>
      <pubDate>Fri, 17 Sep 2021 11:25:01 +0000</pubDate>
      <link>https://dev.to/byteslash/starter-code-generator-for-electron-with-vue-or-react-3kkc</link>
      <guid>https://dev.to/byteslash/starter-code-generator-for-electron-with-vue-or-react-3kkc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-elecrue"&gt;
  &lt;/a&gt;
  What is Elecrue?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tv4dFDKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/nzzFgcBtCsUAAAAC/let-me-get-this-straight-patrick-heusinger.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tv4dFDKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/nzzFgcBtCsUAAAAC/let-me-get-this-straight-patrick-heusinger.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First of all let me tell you the main point of this elecrue thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://www.npmjs.com/package/elecrue"&gt;Elecrue&lt;/a&gt; is a boilerplate generator npm package, it generates the boiler code for electron with react or vue with tailwindcss.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Elecrue provides you following starter code templates:-&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;React-Electron-JS&lt;/li&gt;
&lt;li&gt;React-Electron-TS&lt;/li&gt;
&lt;li&gt;React-Electron-Tailwindcss-JS&lt;/li&gt;
&lt;li&gt;React-Electron-Tailwindcss-TS&lt;/li&gt;
&lt;li&gt;Vue-Electron-JS&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#how-to-install-elecure"&gt;
  &lt;/a&gt;
  How to install Elecure?
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g elecrue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h1&gt;

&lt;p&gt;It is pretty straight forward to use it. Type &lt;code&gt;elecrue&lt;/code&gt; in your command line. It will ask you for choosing a template, after choosing the template. It will ask you the name of the project name, after typing the name. Elecrue will download all the node packages in your project folder. Ta-da! You are ready to rock! 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IsC3VPSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/63385587/132942925-bbd9a3db-63c9-4cd3-be4b-45ab6a9749ef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IsC3VPSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/63385587/132942925-bbd9a3db-63c9-4cd3-be4b-45ab6a9749ef.png" alt="Elecrue Terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#faqs"&gt;
  &lt;/a&gt;
  FAQs
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-why-elecrue-doesnt-use-ipc"&gt;
  &lt;/a&gt;
  1.) Why Elecrue doesn't use IPC?
&lt;/h2&gt;

&lt;p&gt;Let me break this down, Why didn't I used IPC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-ipc"&gt;
  &lt;/a&gt;
  What is IPC?
&lt;/h3&gt;

&lt;p&gt;IPC is a set of two things, &lt;a href="https://www.electronjs.org/docs/api/ipc-main"&gt;ipcMain&lt;/a&gt; &amp;amp; &lt;a href="https://www.electronjs.org/docs/api/ipc-renderer"&gt;ipcRenderer&lt;/a&gt;. They both helps to send signals and receive from electron to receiver, by doing this you can get some information from electron to react or vue. As React and Vue are restricted to src folders only.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-didnt-i-used-ipc"&gt;
  &lt;/a&gt;
  Why didn't I used IPC?
&lt;/h3&gt;

&lt;p&gt;As I above paragraph, I explained that both react &amp;amp; vue, can't go outside of src folder. So most people use IPC in most ideal conditions. But IPC can be tedious to work with.&lt;/p&gt;

&lt;p&gt;For example, If you want to create a file with one click of a button. It might sound easy, but it is hard to execute, as the button is in react, but you can't set the function to create a file in react as react is a client-side technology. But electron can do it easily with the &lt;code&gt;fs&lt;/code&gt; module from the node, but we also need to create the file when the button is clicked. So how will we connect this? IPC would right?. Nope, Ipc is a heck alot of work and chances are low for it to work (For me at least).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If boil the problem down, we need to trigger the function in electron, which is to create a file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The solution to this problem I found was, To host an express server in electron on &lt;code&gt;localhost:5001&lt;/code&gt; (If I remember correctly). And set up an endpoint for creating the file, Like &lt;code&gt;/create-file&lt;/code&gt;. So when the button will be clicked in react, &lt;code&gt;onClick&lt;/code&gt; will fetch the &lt;code&gt;localhost:5001/create-file&lt;/code&gt; triggering the function to create a file in electron, as the only electron can use &lt;code&gt;fs&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-is-there-would-be-any-future-updates"&gt;
  &lt;/a&gt;
  2.) Is there would be any future updates?
&lt;/h2&gt;

&lt;p&gt;Yes, I will maintain the project and will update it when if any of the used libraries are updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-am-i-am-going-to-add-more-templates"&gt;
  &lt;/a&gt;
  3.) Am I am going to add more templates?
&lt;/h2&gt;

&lt;p&gt;Yes, But depending on your suggestions. You can comment on this blog, about the template you want like svelte with electron. Or you can make an issue on &lt;a href="https://github.com/RajvirSingh1313/elecrue"&gt;Elecrue's Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ1CMqMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/Cefhsn3O0XwAAAAC/homer-thesimpsons.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ1CMqMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/Cefhsn3O0XwAAAAC/homer-thesimpsons.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-to-go"&gt;
  &lt;/a&gt;
  Got to go
&lt;/h1&gt;

&lt;p&gt;I hope you liked the Elecrue. &lt;strong&gt;Star it on&lt;/strong&gt; &lt;a href="https://github.com/RajvirSingh1313/elecrue"&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt; 🌟.&lt;/p&gt;

&lt;p&gt;I also hope you understand, Why I didn't use IPC. If you have any doubts ask me in the comments, I will surely reply. And if you wanna learn new things with others, or looking to work on some cool projects, check out &lt;a href="https://discord.gg/3MQWD47d"&gt;ByteSlash Discord Server&lt;/a&gt;, it is an awesome community to grow yourself with others, everyone is there to help you including me.&lt;/p&gt;

&lt;p&gt;If you haven't read my previous blog, do check it out:- &lt;a href="https://dev.to/byteslash/what-is-open-source-debt-and-how-to-repay-it-4a46"&gt;&lt;strong&gt;What is open source and How to repay it&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a good day,&lt;br&gt;
Rajvir Singh&lt;/p&gt;

</description>
      <category>react</category>
      <category>vue</category>
      <category>electron</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Enable Dark mode in chrome on Ubuntu</title>
      <author>ankit-brijwasi</author>
      <pubDate>Fri, 17 Sep 2021 11:09:03 +0000</pubDate>
      <link>https://dev.to/ankitbrijwasi/enable-dark-mode-in-chrome-on-ubuntu-20na</link>
      <guid>https://dev.to/ankitbrijwasi/enable-dark-mode-in-chrome-on-ubuntu-20na</guid>
      <description>&lt;p&gt;Recently I started using Ubuntu as my default OS for programming and I am loving working in it!&lt;/p&gt;

&lt;p&gt;But there was an issue which I faced, By default in Google Chrome dark mode is not enabled and it was kind of a letdown.&lt;/p&gt;

&lt;p&gt;After digging up the Internet I found that In order to enable the Dark mode I needed to edit the &lt;code&gt;google-chrome.desktop&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If you are also dealing with a similar issue then, just follow along&lt;/p&gt;

&lt;p&gt;Firstly open, the &lt;code&gt;google-chrome.desktop&lt;/code&gt; file using,&lt;br&gt;
&lt;code&gt;sudo gedit /usr/share/applications/google-chrome.desktop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After the file has been opened, you will need to edit two lines&lt;/p&gt;

&lt;p&gt;1. Search for the line-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/google-chrome-stable %U
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace it with-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/google-chrome-stable %U &lt;span class="nt"&gt;--enable-features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;WebUIDarkMode &lt;span class="nt"&gt;--force-dark-mode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2. Search for the line-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace it with-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;Exec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/google-chrome-stable &lt;span class="nt"&gt;--enable-features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;WebUIDarkMode &lt;span class="nt"&gt;--force-dark-mode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Save the file and restart Chrome. Dark mode should be enabled now&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;br&gt;
Have a nice day!😇&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Announcing x-ray</title>
      <author>Patrick Organ</author>
      <pubDate>Fri, 17 Sep 2021 11:01:41 +0000</pubDate>
      <link>https://dev.to/patinthehat/announcing-x-ray-1k98</link>
      <guid>https://dev.to/patinthehat/announcing-x-ray-1k98</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXukMvBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/py2ejdn4ul2qzy3hw360.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXukMvBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/py2ejdn4ul2qzy3hw360.png" alt="x-ray logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcing-xray"&gt;
  &lt;/a&gt;
  Announcing x-ray
&lt;/h2&gt;

&lt;p&gt;I'm proud to announce the initial release of the &lt;a href="https://github.com/spatie/x-ray"&gt;&lt;code&gt;spatie/x-ray&lt;/code&gt;&lt;/a&gt; package for &lt;a href="https://myray.app"&gt;Ray&lt;/a&gt;.  The &lt;code&gt;x-ray&lt;/code&gt; package provides a command-line utility that finds and displays all calls to &lt;code&gt;ray()&lt;/code&gt;, &lt;code&gt;rd()&lt;/code&gt;, and other functions from the &lt;code&gt;spatie/ray&lt;/code&gt; family of packages.  Currently, it only supports PHP projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;x-ray&lt;/code&gt; &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; displays the location of calls to &lt;code&gt;ray()&lt;/code&gt;.  It &lt;em&gt;never&lt;/em&gt; modifies any files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more information and documentation, visit the &lt;a href="https://github.com/spatie/x-ray"&gt;Github project&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-package"&gt;
  &lt;/a&gt;
  Using the package
&lt;/h3&gt;

&lt;p&gt;You can install x-ray with composer:&lt;br&gt;
&lt;code&gt;composer require spatie/x-ray --dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By default, the &lt;code&gt;vendor&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt; directories are ignored, and if your project has a &lt;code&gt;.gitignore&lt;/code&gt; file, those entries are ignored as well.&lt;/p&gt;

&lt;p&gt;To get started, simply run the script and provide a path or filename to scan:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./vendor/bin/x-ray &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--summary&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If any results are found, there will be output similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ❱ scanning for ray calls...
  34/34 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%
 ❱ scan complete.

+-------------------------------+-------------+
| Filename                      | Call Count  |
+-------------------------------+-------------+
| ./test1.php                   | 6           |
| ./test2.php                   | 3           |
| ./tests/fixtures/fixture1.php | 1           |
+-------------------------------+-------------+

❗Found 10 calls in 3 files.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've been keeping your code clean and free of calls to &lt;code&gt;ray()&lt;/code&gt; once you're done debugging, you might see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ❱ scanning for ray calls...
 ❱ scan complete.
 ✔ No references to ray were found.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Want to see an excerpt of the code where the call was found? &lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;--snippets&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./vendor/bin/x-ray ./tests --snippets
 ❱ scanning for ray calls...
 18/18 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%
 ❱ scan complete.

 ❱ Found: ray
 ❱ File : ./tests/fixtures/fixture1.php:2

       1▕  &amp;lt;?php
 ❱❱    2▕      ray('12345');
       3▕  
       4▕      echo strtolower('TEST') . PHP_EOL;
       5▕  
       6▕      echo strtoupper('test') . PHP_EOL;

 ❗Found 1 call in 1 file.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit the &lt;a href="https://github.com/spatie/x-ray"&gt;github project&lt;/a&gt; to see all available options, how to use &lt;code&gt;x-ray&lt;/code&gt; in  an automated fashion, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;This project originally was required because I'm using Ray at my day job and for various reasons, calls to &lt;code&gt;ray()&lt;/code&gt; cannot be committed or merged (&lt;em&gt;and definitely not into production&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;As you can guess, this happened a few times, and I realized that we needed a way of preventing it from happening again.  Ideally, it could be automated in a git hook and/or Github workflow.  From this, the idea for creating &lt;code&gt;x-ray&lt;/code&gt; was born.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-notes-on-development"&gt;
  &lt;/a&gt;
  Some notes on development
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code-snippets"&gt;
  &lt;/a&gt;
  Code Snippets
&lt;/h4&gt;

&lt;p&gt;When first creating &lt;code&gt;x-ray&lt;/code&gt;, I felt it was necessary to display an excerpt of the source code location where the call to &lt;code&gt;ray()&lt;/code&gt; was found.  Rather than roll my own solution, I extracted the excellent &lt;code&gt;Snippet&lt;/code&gt; class from &lt;a href="https://github.com/spatie/backtrace"&gt;&lt;code&gt;spatie/backtrace&lt;/code&gt;&lt;/a&gt; into a package.  From there it was a simple matter of adding functionality for multi-line line selections and a few other minor changes.  You can view the final &lt;code&gt;permafrost-dev/code-snippets&lt;/code&gt; package and its documentation on &lt;a href="https://github.com/permafrost-dev/code-snippets"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-highlighting"&gt;
  &lt;/a&gt;
  Syntax Highlighting
&lt;/h4&gt;

&lt;p&gt;I also felt from the beginning that the code snippets should be syntax highlighted in the console output.  After a decent attempt at creating basic syntax highlighting, I again went with the tried-and-true method of extracting existing code from a project.  In this case, the original source code came from &lt;a href="https://github.com/nunomaduro/collision/blob/stable/src/Highlighter.php"&gt;nunomaduro/collision&lt;/a&gt;.  Again, with some modifications, it suited my needs perfectly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-closing"&gt;
  &lt;/a&gt;
  In closing
&lt;/h3&gt;

&lt;p&gt;A number of people contributed input and feedback, code reviews, thoughts, and generally offered support and help, not to mention beta testing along the way.  I truly appreciate the help of everyone and couldn't have created this package without them.  Thank you to (in no particular order):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/freekmurze"&gt;Freek Van der Herten&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AlexVanderbist"&gt;Alex Vanderbist&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Gummibeer"&gt;Tom Witkowski&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spatie"&gt;Spatie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nunomaduro"&gt;Nuno Maduro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>tooling</category>
      <category>debugging</category>
      <category>news</category>
    </item>
    <item>
      <title>All About Scaler Discord Community</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Fri, 17 Sep 2021 10:50:51 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/all-about-scaler-discord-community-4anf</link>
      <guid>https://dev.to/muthuannamalai12/all-about-scaler-discord-community-4anf</guid>
      <description>&lt;p&gt;Link to join the server: &lt;a href="https://discord.gg/BhVMkd9cWT"&gt;Scaler Discord Community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to grow as a developer, I can't over-emphasize the benefits of joining a developer community. There are many advantages, from peer-programming to sharing knowledge, mentorship, sharing support, sharing tools, code reviews, answering questions, and much more.&lt;/p&gt;

&lt;p&gt;Communities are usually built on shared struggles of individuals learning in a particular region, and the goals of each community differ per the individual's collective needs.&lt;/p&gt;

&lt;p&gt;Over the years, the developer communities have grown across the world with different goals and missions but still with the general aim of providing a platform for developers to learn, interact, share ideas, support each other and grow.&lt;/p&gt;

&lt;p&gt;Today we are going to look at one such Developer community called Scaler Community&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-scaler"&gt;
  &lt;/a&gt;
  What is Scaler:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-ztd8D3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085515951/--82I6M7D.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-ztd8D3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085515951/--82I6M7D.jpeg" alt="Scaler-768x461.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scaler Academy is tailor-made for engineers to master the foundations of CS (DSA &amp;amp; System Design) and to take their careers to the next level.  They are an online tech-versity for the top 1% of software developers in the country. They offer an intensive six-month computer science course through live classes delivered by tech leaders and subject matter experts. The meticulously structured program enhances the skills of software professionals by offering a modern curriculum with exposure to the latest technologies. It is a product by InterviewBit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-actually-they-do"&gt;
  &lt;/a&gt;
  What Actually They Do:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Re8kiij1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626087456738/asYPUyoWd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Re8kiij1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626087456738/asYPUyoWd.jpeg" alt="what-do-they-do-1.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scaler Academy is an online accelerator program that effectively enhances the coding skills of software professionals. They teach their students all the relevant skills needed in software jobs, mentor them to crack recruitment processes and also provide them with referrals to the best opportunities in the software industry across the globe. Students in the Academy spend an average of 3-5 hours daily on the platform, learning and practising their skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-joining-the-gamified-scaler-discord-server"&gt;
  &lt;/a&gt;
  Benefits Of Joining the Gamified Scaler Discord Server:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-for-support-and-motivation"&gt;
  &lt;/a&gt;
  1. For support and motivation
&lt;/h3&gt;

&lt;p&gt;The journey of learning to code is likely to be overwhelming at some stage. This is a key reason why you should join the Scaler community from the beginning so you don’t feel isolated in your struggles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMQhK-mj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085626668/pTlyhzE3u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMQhK-mj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085626668/pTlyhzE3u.jpeg" alt="Support or Motivation.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Share new things you’ve learned, programming memes or whatever! It’s all about finding people you can share things with that you know are going through similar experiences as you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-knowledge-sharing"&gt;
  &lt;/a&gt;
  2. Knowledge sharing
&lt;/h3&gt;

&lt;p&gt;Scaler community encourages sharing of what you know with others. Through this knowledge exchange, we can all learn from each other and grow our skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LlPjhQCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085640988/cdI9nMwIT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LlPjhQCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085640988/cdI9nMwIT.jpeg" alt="Knowledge Sharing.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being part of a Scaler community is like having an extended network of colleagues where you can help each other out. Use this community wisely to learn from people who are more experienced than you in your field.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-networking-opportunities"&gt;
  &lt;/a&gt;
  3. Networking opportunities
&lt;/h3&gt;

&lt;p&gt;Being part of a Scaler community also opens up opportunities to form closer connections with developers in your field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zfFxrjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085654830/XoOeuvfUx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zfFxrjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085654830/XoOeuvfUx.jpeg" alt="Networking Oppurtunities.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This also opens up chances to find mentors in your field or potentially meet developers with similar interests willing to collaborate with you on projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-expand-your-areas-of-expertise"&gt;
  &lt;/a&gt;
  4. Expand your areas of expertise
&lt;/h3&gt;

&lt;p&gt;When you join Scaler community you come across people with different backgrounds and expertise. As a result, you’re constantly being exposed to topics and discussions that may not be directly related to your field of interest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDE_Lg2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085666190/5KBvjkIUx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDE_Lg2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085666190/5KBvjkIUx.jpeg" alt="Expand your area of expertise.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just by being active in Scaler, you can pick up technical terms and knowledge relating to software development outside your direct area of expertise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-get-recognition-or-exposure"&gt;
  &lt;/a&gt;
  5. Get Recognition or Exposure
&lt;/h3&gt;

&lt;p&gt;No good deed or positive contribution made by any individual ever goes unnoticed. Communities are all about learning, sharing, and growing together. Industry experts and many founders of various companies often come to community events. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NOM-sWpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085672350/juqBFfkgC.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NOM-sWpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085672350/juqBFfkgC.jpeg" alt="Get Recognition or Exposure.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You never know whom you may impress with your contribution, skillset, or personality and land a new client, new job, or internship. People have even found their co-founders at community events! Anything is possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-schwag"&gt;
  &lt;/a&gt;
  6. Schwag!!
&lt;/h3&gt;

&lt;p&gt;Let’s just be completely honest here, we all love schwag! We do. And why not! Schwags are awesome. They make us look cooler than our friends. Who on God’s earth wouldn’t want free t-shirts, notebooks, and badges&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwGzNo-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626089981547/nrAsj4zZV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwGzNo-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626089981547/nrAsj4zZV.jpeg" alt="swa.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-to-improve-your-programming-knowledge"&gt;
  &lt;/a&gt;
  7. To improve your programming Knowledge
&lt;/h3&gt;

&lt;p&gt;Scaler conducts an activity that runs between Monday and Friday each week on the problem-solving channel where we make use of the coding platform on &lt;a href="http://scaler.com/contests"&gt;scaler.com/contests&lt;/a&gt; to create a contest page and unlock one question every day at 8 pm IST.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWpB0aMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085711889/rzaA7utOR.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWpB0aMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085711889/rzaA7utOR.jpeg" alt="Programming Knowledge.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-be-a-part-of-scaler-open-source-projects"&gt;
  &lt;/a&gt;
  8. Be a Part of Scaler Open Source Projects
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0uZ6qadx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085725716/s89gHi_eA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0uZ6qadx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085725716/s89gHi_eA.jpeg" alt="Open-Source.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scaler has kicked off some interesting open-source projects. Everyone from Scaler's alumni network&lt;br&gt;
to current instructors and mentors will participate and they would love to see you all participate too  in this initiative&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-helps-you-to-build-projects"&gt;
  &lt;/a&gt;
  9. Helps you to Build Projects
&lt;/h3&gt;

&lt;p&gt;Scaler helps you to get started with your learning journey by building projects. They have an exciting program, where you can innovate, build and create some exciting mini-projects while winning loads of prizes for building them!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---cd8_pnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085764779/Q4uHySbqy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---cd8_pnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085764779/Q4uHySbqy.jpeg" alt="Build Projects.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-makes-coding-a-habit-through-100-days-of-code"&gt;
  &lt;/a&gt;
  10. Makes Coding a Habit through 100 Days Of Code:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KfUXvb4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085778514/wORiDb6Hk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfUXvb4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626085778514/wORiDb6Hk.jpeg" alt="100 Days Of Code.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The beauty of this challenge is that no matter whether you are a beginner or expert, you can participate and learn daily or brush up on your skills.&lt;/p&gt;

&lt;p&gt;All in all, it's a great opportunity to develop your skills, form connections with people in different fields of the community, and give back to the community. Slide into the sever and get ready to ride a roller coaster of learning opportunities!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading 😀&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Serverless App API with Firebase Functions</title>
      <author>Mike Talbot</author>
      <pubDate>Fri, 17 Sep 2021 10:35:05 +0000</pubDate>
      <link>https://dev.to/miketalbot/serverless-app-api-with-firebase-functions-52b2</link>
      <guid>https://dev.to/miketalbot/serverless-app-api-with-firebase-functions-52b2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;I'm building a widget to provide fun quizzes, polls and much more within Blog posts on the major platforms.  In previous parts we've covered building out a router for the client side and a data model for the content and reporting.  &lt;/p&gt;

&lt;p&gt;In this part we will look at the API that the widget supports and how that's put together with Firebase Functions.  To avoid this getting over long, we will first look at view tracking and recommendation and then in the next part, we will cover responses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I'm building the &lt;strong&gt;interactive&lt;/strong&gt; widget below to act as a way of making posts more interesting for all of us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vote-below"&gt;
  &lt;/a&gt;
  Vote Below!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/OjEdoUYaD5l3qgus8Fhlw/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;I wanted to build a straightforward API for the widget that would do a number of useful things for content creators, like recommending articles that fit with the one they are writing (so theirs will also receive recommendations), providing a mechanism to robustly respond to quizzes and polls and a way of creating some basic gamification with points and achievements.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to comments on previous posts I will probably do another version of this in the future using Cloud Run so we can all see the pros and cons.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's what the API is aiming to support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register a view of an article&lt;/li&gt;
&lt;li&gt;Get a list of recommended articles that match the current one and promote recent content that is popular&lt;/li&gt;
&lt;li&gt;Flag that a recommended article was clicked&lt;/li&gt;
&lt;li&gt;Register a response for a quiz, poll or something a plugin developer decides they want&lt;/li&gt;
&lt;li&gt;Add points and achievements&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The way we implement these functions will have a significant impact on the cost of running the system as the database charges for every "read" including the reads of items in lists - so it can get expensive quickly&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-api"&gt;
  &lt;/a&gt;
  The API
&lt;/h2&gt;

&lt;p&gt;Firstly we need to create a file to contain our functions, as this file is going to use Firestore database collections then we also get and initialize that and make a global reference to the &lt;code&gt;db&lt;/code&gt; we can use in our functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase-functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase-admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  view
&lt;/h3&gt;

&lt;p&gt;Let's start off with the principle of &lt;code&gt;view&lt;/code&gt;.  We want to be able to record that an article has been seen, we want to ensure that we know the number of unique user views and the total number of views, and for the sake of making recommendations later we also want to record some other factors: the first time the article had a unique viewer and the last time, so we can use these to sort.&lt;/p&gt;

&lt;p&gt;Let's look at that a moment: my current choice of algorithm is to use recency of publishing, recency of a new unique visitor, popularity overall and then a match of the tags in the recommendation versus the tags in the current article.&lt;/p&gt;

&lt;p&gt;We'll see the algorithm in detail next, but in &lt;code&gt;view&lt;/code&gt; we need to create data that helps with this.  I decided that the first and last dates should be rounded into UTC days to provide a level of stability and fairness, so that calculation is a key part of working out view.&lt;/p&gt;

&lt;p&gt;Ok so here is the &lt;code&gt;view&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;articleId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We declare an API function in Firebase Functions like this - exporting it with a name and saying that it is an &lt;code&gt;https.onCall&lt;/code&gt;.  We then get our parameters we pass to the call in an object and a &lt;code&gt;context&lt;/code&gt; that contains information about the caller and other things we might have set.&lt;/p&gt;

&lt;p&gt;I use App Check to ensure that the calls are only coming from valid locations (the website) to avoid someone hacking and sending random data. This also runs a Recaptcha v3 (the one you can't see) and scores each call, if the call passes then the &lt;code&gt;context&lt;/code&gt; has an &lt;code&gt;app&lt;/code&gt; property.  I check that and refuse calls it has rejected.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not validated&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HttpsError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failed-precondition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The function must be called from an App Check verified app.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I also ensure that we have a user:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Last time I mentioned that Firestore has some serious limits on record updates (1 per second) and that this means you need to "shard" counters in case you have a bunch happening at once.  I create 20 shards and update counts in these, choosing the shard at random:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`__all__&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The next job is to get the "article" (see the previous part for more information on the data model) and the "counts" record for the article.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we have the existing counts or an empty object, we are going to want to track unique users so the "counts" record has a map of &lt;code&gt;user.uid&lt;/code&gt; to the date that they were new, we initialise that.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We also work out a value for the current UTC day that we will use for tracking first and last unique user day.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With this in hand, we check if we've ever seen this user before and if we haven't, we start to award points - first if the visitor is not the author, we give the auth some points and a "New Unique Reader" achievement:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;awardPoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New Unique Reader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next we give the reader a bonus set of 50 points if this is a new article for them, and an extra 100 points if this is there first article.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;awardPoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Read New Article&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;achievements&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;achievements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Read New Article&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Read First Article&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Having awarded points, we update the unique user map so we don't do it again for this article, and then update the unique counts for both the article and the articles tags. Note how we use the "shard" we created earlier here, it's updating one of 20 possible counters we will add together when we want to report on the total number of unique visits to the widget:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;        &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniqueVisits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniqueVisits&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastUniqueVisit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastUniqueDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstUniqueDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstUniqueDay&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processedTags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;incrementTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uniqueVisits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;incrementTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uniqueVisits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we've exited the code specific to unique visits, we busy ourselves updating the other counters and award 1 point for viewing an article. Note the use of "shard" again&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visits&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Save the counts&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processedTags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;incrementTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;visits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;incrementTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;visits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;awardPoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Viewed an article&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#incrementtag"&gt;
  &lt;/a&gt;
  incrementTag
&lt;/h3&gt;

&lt;p&gt;I'm going to leave &lt;code&gt;awardPoints&lt;/code&gt; until next time as it has to deal with cheating, but let's look at the &lt;code&gt;incrementTag&lt;/code&gt; that was used frequently in the &lt;code&gt;view&lt;/code&gt; code.  The idea of this is to make a simple to increment counter with a name.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;incrementTag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tags&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagDoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tagRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tagDoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;tagDoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;__&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;__event_&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;tagData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tagData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tagRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tagData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It uses the "tags" collection and sets up a couple of useful booleans for &lt;code&gt;special&lt;/code&gt; and &lt;code&gt;event&lt;/code&gt; which helps with finding the right records for reporting.  Otherwise, it's pretty simple, we get a record with the tag name, and increment a named value by a specified amount.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#recommend"&gt;
  &lt;/a&gt;
  recommend
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;recommend&lt;/code&gt; function produces a list of articles that should be shown in the widget.  As previously mentioned the algorithm favours newly published content, that is recently popular and matches the tags of the current article (in that order). &lt;/p&gt;

&lt;p&gt;To do this we want to perform as few queries as possible to save cost.  For this reason (and as mentioned in the previous article) we copy data from the article to the "counts" collection records so we don't have to read both the "counts" and the "articles" for each recommendation to do this step.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recommend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;First we have our parameters, an &lt;code&gt;articleId&lt;/code&gt; for the current article and a number of recommendations to make.&lt;/p&gt;

&lt;p&gt;Next we check that we should be allowing this call:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HttpsError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failed-precondition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The function must be called from an App Check verified app.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next we lookup the current article so we can get its current tags.  The user enters tags as a comma separated string, but there is a trigger which converts them into a unique array of strings, in lowercase, for this function. We turn the tags into a &lt;code&gt;Set&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;articleSnap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;articleSnap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;articleSnap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;processedTags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next comes the expensive bit.  We run a compound query on the "counts" collection for &lt;code&gt;enabled&lt;/code&gt; articles that are not &lt;code&gt;comment&lt;/code&gt; type and then sort it by the unique days and the number of visits, selecting double the number we will return (so we can post process with tags).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rowSnap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;enabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstUniqueDay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastUniqueDay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;visits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Firestore has all kinds of rules - firstly we are going to need an index for a query with a compound sort - next and &lt;strong&gt;important&lt;/strong&gt; is that if we use a &lt;code&gt;!=&lt;/code&gt; we must include that field in the index and the sort!&lt;/p&gt;

&lt;p&gt;The easiest way to deploy Firebase stuff is with the CLI, that has a &lt;code&gt;firebase.json&lt;/code&gt; file that tells it where to find things, mine has a reference to a file containing my Firestore indexes.  Here is the contents of that file, which enables the above query:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"indexes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"collectionGroup"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"counts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"queryScope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"COLLECTION"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"fields"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"fieldPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"enabled"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"DESCENDING"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"fieldPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"comment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"DESCENDING"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"fieldPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"firstUniqueDay"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"DESCENDING"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"fieldPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lastUniqueDay"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"DESCENDING"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"fieldPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"visits"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"DESCENDING"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"fieldOverrides"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This says make an index on the specified fields for the "counts" collection.&lt;/p&gt;

&lt;p&gt;With that index and the query above we now have &lt;code&gt;rowSnap&lt;/code&gt; as a collection of records that matched.  We use that to add a &lt;code&gt;score&lt;/code&gt; for each matching tag in the new article, versus the one that is being viewed.  We sort by this &lt;code&gt;score&lt;/code&gt; and then return the requested number of article ids that will be rendered as recommendations in the widget.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="nx"&gt;rowSnap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processedTags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#wasclicked"&gt;
  &lt;/a&gt;
  wasClicked
&lt;/h3&gt;

&lt;p&gt;If an article is clicked in the widget we just record that fact in the "counts" collection for the article.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wasClicked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;articleId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HttpsError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failed-precondition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The function must be called from an App Check verified app.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clicks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clicks&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  Deploying
&lt;/h2&gt;

&lt;p&gt;Once we've built this file, using the Firebase CLI you just type &lt;code&gt;firebase deploy&lt;/code&gt; and it sends the whole lot to the cloud.  You can make adjustments for "where" functions will live, by default it is "us-central-1" and I've left mine there.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this part we've seen how to make sharded counters and API calls using Firebase functions, we've also covered the principles of article recommendations and the need for indexes in Firestore if you use more complicated queries.  Next time we'll cover scoring and achievements.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/miketalbot"&gt;
        miketalbot
      &lt;/a&gt; / &lt;a href="https://github.com/miketalbot/cccc-widget"&gt;
        cccc-widget
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
4C Blogging Widget&lt;/h1&gt;
&lt;p&gt;Open source widget for &lt;a href="https://4c.rocks" rel="nofollow"&gt;https://4c.rocks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9077bfb9841d2f3eb54d29cf7f0160a7e0ca6dee1dea8b7e907a7033754b1d35/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f70726163746963616c6465762f696d6167652f66657463682f732d2d2d4f4f445975364b2d2d2f635f6c696d6974253243665f6175746f253243666c5f70726f6772657373697665253243715f6175746f253243775f3838302f68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f3332737837656f787578377831667a696f3939392e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/9077bfb9841d2f3eb54d29cf7f0160a7e0ca6dee1dea8b7e907a7033754b1d35/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f70726163746963616c6465762f696d6167652f66657463682f732d2d2d4f4f445975364b2d2d2f635f6c696d6974253243665f6175746f253243666c5f70726f6772657373697665253243715f6175746f253243775f3838302f68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f75706c6f6164732f61727469636c65732f3332737837656f787578377831667a696f3939392e6a7067" alt="Guide"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/miketalbot/cccc-widget"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>serverless</category>
      <category>programming</category>
    </item>
    <item>
      <title>Migrating Create-React-App project to Single-SPA</title>
      <author>Andrew Glago</author>
      <pubDate>Fri, 17 Sep 2021 10:22:17 +0000</pubDate>
      <link>https://dev.to/a11rew/migrating-create-react-app-project-to-single-spa-4go4</link>
      <guid>https://dev.to/a11rew/migrating-create-react-app-project-to-single-spa-4go4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The React team describes &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;Create-React-App&lt;/a&gt; (CRA) as a toolchain for easily getting started with single page applications in React. Create-React-App allows you to get started building React applications as easily as running a single &lt;code&gt;npx&lt;/code&gt; &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;command&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="//spa.js.org"&gt;Single-SPA&lt;/a&gt; (yes, the name is &lt;a href="https://single-spa.js.org/docs/getting-started-overview#isnt-single-spa-sort-of-a-redundant-name"&gt;redundant&lt;/a&gt;) is best described as a framework for hosting multiple JavaScript micro-frontends on the same website. Single-SPA is framework agnostic and as such, the aforementioned "micro-frontend" could be built with any framework; Angular, Vue, Ember even Backbone.js for those on the &lt;a href="https://www.youtube.com/watch?v=RBgm7Zgv2dM"&gt;bleeding edge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Single-SPA micro-frontend applications can be divided into two main sections;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A Single-SPA root config&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A single-spa root config, which renders the HTML page and the JavaScript that registers the [individual] applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Various micro-frontend apps&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Applications which can be thought of as single-page applications packaged up into modules. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although sufficient for many a project, CRA's default tooling and ease of setup quickly becomes a bottleneck in more advanced use cases. Single-SPA for example assumes by default you have a modifiable Webpack config. Making getting a CRA app running as a Single-SPA micro-frontend out of the box a cryptic error wrought exercise in futility.&lt;/p&gt;

&lt;p&gt;A solution would be to eject from CRA and have manual control over build tools CRA uses like Webpack and Babel but then you lose the ease of use and also miss out on CRA updates. &lt;br&gt;
(Cue the &lt;a href="https://www.youtube.com/watch?v=wqnt86xnocM&amp;amp;ab_channel=PrasadLomte"&gt;hero entry music&lt;/a&gt;) &lt;a href="https://github.com/gsoft-inc/craco"&gt;CRACO&lt;/a&gt; (Create React App Configuration Override) is a configuration layer for Create-React-App that allows you to customize CRA's config without ejecting. If you've ever used &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; in a CRA app you've most likely have had to set up CRACO. We'll use CRACO to get our CRA app to work as a Single-SPA application without ejecting.&lt;/p&gt;

&lt;p&gt;This article will go over migrating an existing Create-React-App SPA into a registered Single-SPA application. This article assumes you have a root config setup already and are migrating an existing Create-React-App frontend. If you're starting out building a micro-frontend for Single-SPA you should use the &lt;a href="https://single-spa.js.org/docs/getting-started-overview#quick-start"&gt;create-single-spa&lt;/a&gt; utility.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#groundwork"&gt;
  &lt;/a&gt;
  Groundwork
&lt;/h2&gt;

&lt;p&gt;We'll first have to add CRACO to our project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @craco/craco
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll need to update &lt;code&gt;scripts&lt;/code&gt; in our &lt;code&gt;package.json&lt;/code&gt; replacing react-scripts with craco in all keys but &lt;code&gt;eject&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {
    "scripts": {
     - "start": "react-scripts start",
     - "build": "react-scripts build",
     - "test": "react-scripts test",
     + "start": "craco start",
     + "build": "craco build",
     + "test": "craco test",
      "eject": "react-scripts eject"
    },
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Starting our CRA app with &lt;code&gt;yarn start&lt;/code&gt; at this point should work as it normally would.&lt;/p&gt;

&lt;p&gt;We then add the required dependencies for migrating to a Single-SPA frontend&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add -D craco-plugin-single-spa-application single-spa-react 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a &lt;code&gt;craco.config.js&lt;/code&gt; at the project root like so;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;singleSpaApplicationPlugin = require("craco-plugin-single-spa-application")

module.exports = {
  plugins: [
    {
      plugin: singleSpaApplicationPlugin,
      options: {
        orgName: "my-org",
        projectName: "my-app",
        entry: "src/single-spa-index.jsx",
        externals: ["react", "react-dom"],
        minimize: true,
      },
    },
  ],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Breaking the CRACO config down, we first import the &lt;a href="https://github.com/hasanayan/craco-plugin-single-spa-application#craco-plugin-single-spa-application"&gt;single-spa-application CRACO plugin&lt;/a&gt;. This nifty little package greatly reduces the amount of config we have to set up to get our micro-frontend running. You can see what exactly it changes in your craco.config &lt;a href="https://github.com/hasanayan/craco-plugin-single-spa-application/blob/main/src/index.js"&gt;here&lt;/a&gt; and you could make the config changes yourself if you'd rather avoid the dependency.&lt;/p&gt;

&lt;p&gt;We then pass the plugin several options;&lt;br&gt;
&lt;code&gt;orgName&lt;/code&gt; - Name of the root frontend application our micro-frontend will be deployed in. All micro-frontends running in the same root config must use the same orgName.&lt;br&gt;
&lt;code&gt;projectName&lt;/code&gt; - Refers to the name we wish our micro-frontend to be referenced by in the root config. This is used in registering our microfrontend.&lt;br&gt;
&lt;code&gt;entry&lt;/code&gt; - Refers to the starting point of our micro-frontend app. Normally index.js in a regular CRA app.&lt;br&gt;
&lt;code&gt;externals&lt;/code&gt; - Specify global dependencies which are made available from the root config here and as such won't be bundled with our micro-frontend.&lt;br&gt;
&lt;code&gt;minimize&lt;/code&gt; - Enables Webpack's &lt;a href="https://webpack.js.org/configuration/optimization/#optimizationminimize"&gt;&lt;code&gt;optimize.minimize&lt;/code&gt;&lt;/a&gt; significantly reducing the production bundle size.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#down-and-dirty"&gt;
  &lt;/a&gt;
  Down and Dirty
&lt;/h2&gt;

&lt;p&gt;In case you were getting comfortable thinking "this seems pretty easy", well, here to burst your bubble. (Jkjk) Create a &lt;code&gt;single-spa-index.jsx&lt;/code&gt; or &lt;code&gt;single-spa-index.tsx&lt;/code&gt; for TypeScript in your &lt;code&gt;src&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//src/single-spa-index.jsx

import React from "react"
import ReactDOM from "react-dom"
import singleSpaReact from "single-spa-react"
import App from "./App"

const lifecycles = singleSpaReact({
  React,
  ReactDOM,
  rootComponent: App,
  errorBoundary(err, info, props) {
    return (
      &amp;lt;div&amp;gt;
          Error in my-app. Check browser console for details.
      &amp;lt;/div&amp;gt;
    )
  },
})

export const { bootstrap, mount, unmount } = lifecycles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Breaking it down; &lt;br&gt;
We create a &lt;code&gt;single-spa-index.jsx&lt;/code&gt; to replace our &lt;code&gt;index.jsx&lt;/code&gt; as the entry point for our project. We import the single-spa-react package to obtain lifecycle methods for our application.&lt;/p&gt;

&lt;p&gt;These "lifecycle" methods as Single-SPA calls them are essential building blocks of a Single-SPA micro-frontend. &lt;br&gt;
A major selling point of micro-frontend architecture in general is the ability to develop different parts of a frontend in isolation and switch between these micro-apps seamlessly. &lt;br&gt;
For Single-SPA in particular, switching micro-frontends does not require a page-reload. &lt;br&gt;
Single-SPA achieves this by managing different micro-frontends with the &lt;a href="https://single-spa.js.org/docs/module-types/#applications-have-managed-lifecycles"&gt;lifecycle methods&lt;/a&gt; they export. This is akin to the lifecycle methods and hooks in component based frameworks like React, Vue and Angular. Single-SPA then uses those lifecycle methods to manage the different micro-frontends.&lt;/p&gt;

&lt;p&gt;Our root component is the same component you would render to &lt;code&gt;ReactDOM&lt;/code&gt; in &lt;code&gt;index.jsx&lt;/code&gt; regularly. If you were importing CSS files or wrapping  with Context providers for example, move those into your App.jsx.&lt;/p&gt;

&lt;p&gt;We also use the &lt;code&gt;errorBoundary&lt;/code&gt; option to define an &lt;a href="https://reactjs.org/docs/error-boundaries.html"&gt;Error Boundary&lt;/a&gt;. Introduced in React 16, Error boundaries allow you to catch errors in deeply nested react components which otherwise would raise cryptic, hard to debug errors. Our micro-frontend is a good example of such a nested component. Error boundaries are useful in other applications like &lt;a href="https://reactjs.org/docs/concurrent-mode-suspense.html#handling-errors"&gt;Error handling&lt;/a&gt; when using Suspense in React. (🤞 Obligatory finger cross hoping we get Suspense soon)&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn build&lt;/code&gt; to generate your micro-frontend app bundle. The output will be located under the &lt;code&gt;build&lt;/code&gt; folder and named &lt;code&gt;my-org-my-app.js&lt;/code&gt;. You now have a micro-frontend that can be registered and deployed as part of a larger org frontend 🎉.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn start&lt;/code&gt; to start the development server like you would normally however, and you'll find a blank page. We'll go over why this is and setting up the development server in the next post in this series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hasanayan.me/micro-frontends-cra-to-single-spa-application/"&gt;https://hasanayan.me/micro-frontends-cra-to-single-spa-application/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stephencharlesweiss.com/single-spa-craco-react"&gt;https://stephencharlesweiss.com/single-spa-craco-react&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>microservices</category>
    </item>
    <item>
      <title>You MUST stop doing this now, really!</title>
      <author>Keff</author>
      <pubDate>Fri, 17 Sep 2021 10:19:30 +0000</pubDate>
      <link>https://dev.to/nombrekeff/you-must-stop-doing-this-now-really-5820</link>
      <guid>https://dev.to/nombrekeff/you-must-stop-doing-this-now-really-5820</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-using-titles-like-the-one-above"&gt;
  &lt;/a&gt;
  What? Using titles like the one above!
&lt;/h4&gt;

&lt;p&gt;It might only be me, but I hate &lt;a href="https://dev.to/search?q=you%20MUST"&gt;these types&lt;/a&gt; of titles. &lt;/p&gt;

&lt;p&gt;I think it would be much better if you focused the title on why you should do a thing, rather than just telling me I should. You should not just assume I don't know the thing, give me some value. Just because you, a random person on the internet, say so, I won't be doing it (not even reading the post, you see). &lt;/p&gt;

&lt;p&gt;The content of the post may be good, and maybe you MUST do the thing, but there are better ways of presenting it and probably perform better (&lt;em&gt;note that this is just my opinion&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For example instead of: &lt;br&gt;
&lt;strong&gt;You MUST do this &amp;lt;thing&amp;gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You could rephrase it as: &lt;br&gt;
&lt;strong&gt;If you do &amp;lt;thing&amp;gt;, you will increase performance by 25%&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Or instead of: &lt;br&gt;
&lt;strong&gt;If you are a manager you MUST do this!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You could rephrase it as: &lt;br&gt;
&lt;strong&gt;As a manager I implemented &amp;lt;thing&amp;gt; and made our team 2x faster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first ones are just plain clickbait, making me feel like I'm missing out on something and making me feel somewhat attacked by not doing the thing.&lt;/li&gt;
&lt;li&gt;The second ones offer more value (I know why I should do the thing) and invites me to learn a bit more&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Rant over, quite a quick one. But one that bothers me quite a bit, do you feel the same way?&lt;/p&gt;

</description>
      <category>rant</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>PyTest With GitHub Actions</title>
      <author>Dennis O'Keeffe</author>
      <pubDate>Fri, 17 Sep 2021 10:15:11 +0000</pubDate>
      <link>https://dev.to/okeeffed/pytest-with-github-actions-74o</link>
      <guid>https://dev.to/okeeffed/pytest-with-github-actions-74o</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;I write content for AWS, Kubernetes, Python, JavaScript and more. To view all the latest content, be sure to &lt;a href="https://blog.dennisokeeffe.com"&gt;visit my blog&lt;/a&gt; and subscribe to my newsletter. &lt;a href="https://twitter.com/dennisokeeffe92"&gt;Follow me on Twitter&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is Day 20 of the #100DaysOfPython challenge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post will build off previous work done in the &lt;a href="https://blog.dennisokeeffe.com/blog/2021-07-26-python-unit-testing-with-pytest"&gt;Python Unit Testing With PyTest&lt;/a&gt; post to add a &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Action&lt;/a&gt; for running test runner jobs on a push event to the repo.&lt;/p&gt;

&lt;p&gt;The final project code can be found on my &lt;a href="https://github.com/okeeffed/hello-pytest-github-actions"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Familiarity with &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;Pipenv&lt;/a&gt;. See &lt;a href="https://blog.dennisokeeffe.com/blog/2020-07-04-abcs-of-pipenv"&gt;here&lt;/a&gt; for my post on Pipenv.&lt;/li&gt;
&lt;li&gt;Read &lt;a href="https://blog.dennisokeeffe.com/blog/2021-07-26-python-unit-testing-with-pytest"&gt;Python Unit Testing With PyTest&lt;/a&gt; if you are unfamiliar with Python.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Let's clone the original PyTest repo in &lt;code&gt;hello-pytest-github-actions&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github.com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;okeeffed&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pytest.git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# Install the deps&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# Prepare the file for the GitHub action&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;.github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workflows&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;touch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;.github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workflows&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pytest.yml&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage, we can test that our repo is working correctly with PyTest locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;==============================&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;starts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==============================&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;darwin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3.9.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="m"&gt;-6.2.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="m"&gt;-1.10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="m"&gt;-0.13.1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;collected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_math.py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="w"&gt;                                                    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="o"&gt;===============================&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0.01&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===============================&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this stage, we are ready to set things up for our GitHub action!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-test-script"&gt;
  &lt;/a&gt;
  Adding the test script
&lt;/h2&gt;

&lt;p&gt;In of the &lt;code&gt;Pipfile&lt;/code&gt;, we want to add a &lt;code&gt;[scripts]&lt;/code&gt; section to add a &lt;code&gt;test&lt;/code&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pypi.org/simple"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;verify_ssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pypi"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;python_version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3.9"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pytest"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That &lt;code&gt;test&lt;/code&gt; script will simply call &lt;code&gt;pytest&lt;/code&gt;. We will use this script within our GitHub action.&lt;/p&gt;

&lt;p&gt;In order to also prepare our GitHub action to give us more vebose information, we will also be passing a &lt;code&gt;-v&lt;/code&gt; flag to our call to &lt;code&gt;pytest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can test things are working as expected by running &lt;code&gt;pipenv run test -v&lt;/code&gt; from our terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="o"&gt;==========================&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;starts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===========================&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;darwin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3.9.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="m"&gt;-6.2.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="m"&gt;-1.10.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="m"&gt;-0.13.1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dennisokeeffe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;.venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;cachedir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;.pytest_cache&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;rootdir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dennisokeeffe&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;collected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_math.py&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;test_add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASSED&lt;/span&gt;&lt;span class="w"&gt;                                &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;33&lt;/span&gt;&lt;span class="o"&gt;%]
tests/test_math.py::test_subtract PASSED                           [ 66%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_math.py&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;test_multiply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PASSED&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="o"&gt;===========================&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;passed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0.02&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;============================&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The verbose flag gives us more information about which test ran and passed. This can be helpful for debugging in CI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-github-action"&gt;
  &lt;/a&gt;
  Adding the GitHub action
&lt;/h2&gt;

&lt;p&gt;We are now ready to add the GitHub action. Within the &lt;code&gt;.github/workflows/pytest.yml&lt;/code&gt; file that we created earlier, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/app.yaml&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PyTest&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;timeout-minutes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check out repository code&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;# Setup Python (faster than using Python container)&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Python&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.x"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install pipenv&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;python -m pip install --upgrade pipenv wheel&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cache-pipenv&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.local/share/virtualenvs&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.cache-pipenv.outputs.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;pipenv install --deploy --dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run test suite&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;pipenv run test -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are doing a couple of things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating a job call &lt;code&gt;PyTest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Running this job on a &lt;code&gt;push&lt;/code&gt; event to the repository.&lt;/li&gt;
&lt;li&gt;Running the job on &lt;code&gt;ubuntu-latest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Setting a custom timeout of 10 minutes (albeit this is overkill, feel free to omit).&lt;/li&gt;
&lt;li&gt;Setting up the Python environment for the latest in version &lt;code&gt;3.x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;pipenv&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install dependencies with a cache set to be the hash of the lockfile.&lt;/li&gt;
&lt;li&gt;Running the test suite that we setup the command and tested before.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That is all that we need for this repo to be working!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure at this stage that you have set up your own origin remote for the repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this stage, all we need to do is commit the code and push the repo and the job will be available under the actions tab in the GitHub UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aoJZp4I4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dennisokeeffe.com/assets/2021-08-08-pytest-with-github-actions/1-pytest-github-action-complete.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aoJZp4I4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dennisokeeffe.com/assets/2021-08-08-pytest-with-github-actions/1-pytest-github-action-complete.png" alt="Action working as expected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Today's post demonstrated how to use GitHub actions to test Python code on a push to the remote repository. We used the &lt;code&gt;pytest&lt;/code&gt; testing framework to test our code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-and-further-reading"&gt;
  &lt;/a&gt;
  Resources and further reading
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.dennisokeeffe.com/blog/2020-07-04-abcs-of-pipenv"&gt;The ABCs of Pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv.pypa.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/guides/building-and-testing-python"&gt;Creating a Python GitHub Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/okeeffed/hello-pytest-github-actions"&gt;Final project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.dennisokeeffe.com/blog/2021-07-26-python-unit-testing-with-pytest"&gt;Python Unit Testing With PyTest&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Photo credit: &lt;a href="https://unsplash.com/@amseaman"&gt;&lt;code&gt;amseaman&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally posted on my &lt;a href="https://blog.dennisokeeffe.com/blog/2021-08-08-pytest-with-github-actions"&gt;blog&lt;/a&gt;. To see new posts without delay, read the posts there and subscribe to my newsletter.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>100daysofpython</category>
    </item>
    <item>
      <title>SQL Select with IN clause from list with JPA</title>
      <author>Adrian Matei </author>
      <pubDate>Fri, 17 Sep 2021 10:03:47 +0000</pubDate>
      <link>https://dev.to/codever/sql-select-with-in-clause-from-list-with-jpa-1g41</link>
      <guid>https://dev.to/codever/sql-select-with-in-clause-from-list-with-jpa-1g41</guid>
      <description>&lt;p&gt;The native SQL query we want to map in JPA is similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM PARTNER where PARTNER_NUMBER IN ('id1', 'idn').
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With JPA you can use a &lt;code&gt;TypedQuery&lt;/code&gt; for example and set the expected list of the &lt;code&gt;IN&lt;/code&gt; clause directly as query parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Stateless&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PartnerDataRepository&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Inject&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;EntityManager&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PartnerData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findPartnerDataFromList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;partnerNumbers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;TypedQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PartnerData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
          &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createNamedQuery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nc"&gt;PartnerData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FIND_PARTNER_DATA_IN_LIST&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;PartnerData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setParameter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PartnerData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PARTNER_NUMBERS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;partnerNumbers&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getResultList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the named query itself you can pass the parameter with &lt;code&gt;:&lt;/code&gt; as you would when setting a "normal" parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;
&lt;span class="nd"&gt;@Access&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;AccessType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FIELD&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Inheritance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;InheritanceType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SINGLE_TABLE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PartnerData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@NamedQueries&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
  &lt;span class="nd"&gt;@NamedQuery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PartnerData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FIND_PARTNER_DATA_IN_LIST&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"select m from PartnerData m where partnerNumber in :partnerNumbers"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PartnerData&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;TABLE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"PARTNER"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;PARTNER_NUMBERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"partnerNumbers"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;FIND_PARTNER_DATA_IN_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="s"&gt;"findPartnerDataWithPartnerNumbers"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//... rest ignored for brevity&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Shared ❤️ from &lt;a href="https://www.codever.land/snippets/61446015fb0221040e46d431/details"&gt;Codever&lt;/a&gt;.  👉  use the &lt;a href="https://www.codever.land/snippets/61446015fb0221040e46d431/details"&gt;&lt;strong&gt;copy to mine&lt;/strong&gt;&lt;/a&gt; functionality to add it to your personal snippets collection. &lt;/p&gt;


&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>jpa</category>
      <category>codever</category>
      <category>snippets</category>
    </item>
  </channel>
</rss>
