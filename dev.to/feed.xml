<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Testing Library and why I use React Testing Library.</title>
      <author>Tony Kharioki</author>
      <pubDate>Tue, 14 Sep 2021 01:02:23 +0000</pubDate>
      <link>https://dev.to/kharioki/testing-library-and-why-i-use-react-testing-library-9d5</link>
      <guid>https://dev.to/kharioki/testing-library-and-why-i-use-react-testing-library-9d5</guid>
      <description>&lt;p&gt;The testing library is a family of packages that help you test UI components in a user-centric way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The more your test resembles the way your software is used, the more confidence they can give you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-does-testing-library-solve"&gt;
  &lt;/a&gt;
  What problems does Testing Library solve?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You want to write tests that tell you your components are working for users.&lt;/li&gt;
&lt;li&gt;You want your tests to avoid including implementation details so changes on components do not break your tests or slow down the team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#so-why-pick-testing-library"&gt;
  &lt;/a&gt;
  So why pick Testing Library?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The core library &lt;strong&gt;Dom Testing Library&lt;/strong&gt; is a lightweight solution for testing pages by querying and interacting with DOM nodes.&lt;/li&gt;
&lt;li&gt;The main utilities it provides include querying the DOM for nodes in a way that's similar to how the user finds elements on the page.&lt;/li&gt;
&lt;li&gt;The core library has been wrapped to provide ergonomic APIs for several frameworks including React, Angular, Vue and also for React Native.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;DOM Testing Library works with any environment that provides DOM APIs such as Jest, Mocha + JSDOM or a real browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-this-library-is-not-"&gt;
  &lt;/a&gt;
  What this library is not :(
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A test runner or framework - RTL is different from Jest(I'll explain later)&lt;/li&gt;
&lt;li&gt;Specific to a testing framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-should-you-avoid-with-testing-library"&gt;
  &lt;/a&gt;
  What should you avoid with Testing Library?
&lt;/h3&gt;

&lt;p&gt;Avoid testing implementation details like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Internal state of a component&lt;/li&gt;
&lt;li&gt;Internal methods of a component&lt;/li&gt;
&lt;li&gt;Lifecycle methods of a component&lt;/li&gt;
&lt;li&gt;Child components&lt;/li&gt;
&lt;/ol&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;for the sake of this write up, I'll introduce React Testing Library&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#react-testing-libraryrtl"&gt;
  &lt;/a&gt;
  React Testing Library(RTL)
&lt;/h2&gt;

&lt;p&gt;React Testing Library builds on top of DOM Testing Library by adding APIs for working with React components&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CRA projects have out-of-the-box support for RTL.&lt;br&gt;
You can also install it via &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;npm install --save -dev @testing-library/react&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-tests-with-react-testing-library"&gt;
  &lt;/a&gt;
  Why do tests with React Testing Library?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Catch bugs&lt;/strong&gt; - allows you to catch bugs easily.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Increases confidence in application&lt;/strong&gt; - if all your tests pass, means all the parts of your applications are working correctly hence increasing the confidence in your application. This also translates to an increase customer satisfaction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Speeds up QA time&lt;/strong&gt; - if we were running a huge application and we implement a new feature, we'd have to manually test. If we write tests then all we have to do is run tests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tests can serve as documentation&lt;/strong&gt; - if you're working with larger teams, sometimes code can be very confusing especially to new developers and by looking at tests, new devs can easily understand what the team is trying to accomplish.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#types-of-tests"&gt;
  &lt;/a&gt;
  Types of Tests
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Before we continue, lets understand the different types of tests that there are.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Static tests&lt;/em&gt;&lt;/strong&gt; - catch typos and type errors as you write code. Usually how a linter works e.g ESlint, TSlint&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Unit tests&lt;/em&gt;&lt;/strong&gt; - they test a piece of code/component in complete isolation. Basically testing a single unit works as expected.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Integration tests&lt;/em&gt;&lt;/strong&gt; - test how different units/components interact.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;E2E(End to End) tests&lt;/em&gt;&lt;/strong&gt; - They simulate what the user flow would be like. It tests beginning to end.
&amp;gt; RTL does not test end to end. For that you can use &lt;strong&gt;Puppeteer&lt;/strong&gt; or &lt;strong&gt;Cypress&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#structure-of-tests"&gt;
  &lt;/a&gt;
  Structure of Tests
&lt;/h3&gt;

&lt;p&gt;To better understand tests, we need to know what goes into a test; &lt;em&gt;describe blocks&lt;/em&gt;, &lt;em&gt;test blocks&lt;/em&gt;, and &lt;em&gt;assertions&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;describe block&lt;/strong&gt; - is a test suite that specifies a larger component or function. A test suite can have multiple test cases.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdtKmpvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jv6qsgujaruawmja6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdtKmpvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jv6qsgujaruawmja6.png" alt="describe block"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;test block&lt;/strong&gt; - (also called &lt;em&gt;it block&lt;/em&gt; since its defined by an &lt;code&gt;it&lt;/code&gt; function) is a test case.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K0lFa_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/424k6zt6z39yjfd3vhur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K0lFa_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/424k6zt6z39yjfd3vhur.png" alt="it block"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertions&lt;/strong&gt; - assertions are basically what we put in the test block. They can be successful or erroneous. In the above example we use the &lt;code&gt;expect&lt;/code&gt; function.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;before we continue, lets see how we run tests and how RTL works alongside jest&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're using create-react-app, React Testing Library and Jest come installed out-of-the-box. However if you're using another react framework or you've built your app with custom react and webpack configuration, you'll need to install jest and react testing library yourself.&lt;/p&gt;

&lt;p&gt;Under the hood, jest test-runner will match all files with suffix &lt;code&gt;test.js&lt;/code&gt; or &lt;code&gt;spec.js&lt;/code&gt; or as per your own configuration.Jest then runs the tests in these files once you run the command &lt;code&gt;npm run test&lt;/code&gt; or &lt;code&gt;yarn test&lt;/code&gt; (again, or whatever test script you may have in your package.json)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Like I mentioned earlier, &lt;strong&gt;Jest&lt;/strong&gt; is a test-runner, which gives you ability to run tests with Jest in the command line. On the other hand &lt;strong&gt;React Testing Library&lt;/strong&gt; is a testing library to test react components, just like &lt;em&gt;Enzyme&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While Jest provides us with a whole lot of functions; test suites, test cases and assertions, RTL provides more functionality that is geared towards DOM testing for react components e.g render, screen, query methods, assertion methods, and many more.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;To better understand this, lets use some of my code and see a real-life example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JM1m_qO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apil3qim0g2u7bux3d7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JM1m_qO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apil3qim0g2u7bux3d7v.png" alt="sample code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets dive into the above test suite;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;render&lt;/strong&gt; - inside the test suite we first render the component we want to test. We use &lt;code&gt;{ render }&lt;/code&gt; method from &lt;code&gt;@testing-library/react&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;screen&lt;/strong&gt; - then we find the elements we want to interact with. Again we use &lt;code&gt;{ screen }&lt;/code&gt; method from &lt;code&gt;@testing-library/react&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the next step is to interact with these elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;assert&lt;/strong&gt; -  then we assert the results as expected. we use &lt;code&gt;expect()&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Query methods&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;okay now, lets look at some of those Query methods I mentioned earlier, some of which I have used in the figure above&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;getBy&lt;/th&gt;
&lt;th&gt;findBy&lt;/th&gt;
&lt;th&gt;queryBy&lt;/th&gt;
&lt;th&gt;getAllBy&lt;/th&gt;
&lt;th&gt;findAllBy&lt;/th&gt;
&lt;th&gt;queryAllBy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0 match&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 match&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1+ match&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Await&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;getBy&lt;/em&gt;, &lt;em&gt;findBy&lt;/em&gt;, and &lt;em&gt;queryBy&lt;/em&gt;&lt;/strong&gt; - these methods get only one element. If they get more than one element, they throw an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;getAllBy&lt;/em&gt;, &lt;em&gt;findAllBy&lt;/em&gt;, and &lt;em&gt;queryAllBy&lt;/em&gt;&lt;/strong&gt; - Always return an array if they get multiple elements they return all elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;findBy&lt;/em&gt;, &lt;em&gt;findAllBy&lt;/em&gt;&lt;/strong&gt; - we can use these methods if we are rendering items asynchronously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;queryBy&lt;/em&gt;&lt;/strong&gt; - does not work with async, returns only one element and if no match it still passes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prioritising attributes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In react-testing library, we want to mimic the user interactions as much as possible inside of our tests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;so we utilize the attributes that follow that e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Attributes accessible by everyone&lt;/strong&gt; - &lt;em&gt;getByRole&lt;/em&gt; (e.g. button, heading), &lt;em&gt;getByLabelText&lt;/em&gt;, &lt;em&gt;getByPlaceholderText&lt;/em&gt;, &lt;em&gt;getByText&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic Queries attributes&lt;/strong&gt; - these are for when we have implemented certain a11y accessibility rules  - &lt;em&gt;getByAltText&lt;/em&gt;, &lt;em&gt;getByTitle&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using TestID&lt;/strong&gt; - in react sometimes we may need to test a specific component that has a unique testId. in such instances we use &lt;em&gt;getByTestId&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is already getting too long. I'll stop it here for now. I'll attach some links to certain articles that helped me prepare and improve my testing skills. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.robinwieruch.de/react-testing-library"&gt;This cool article&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/static-vs-unit-vs-integration-vs-e2e-tests"&gt;This other article&lt;/a&gt;&lt;br&gt;
&lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;These official docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/playlist?list=PL4cUxeGkcC9gm4_-5UsNmLqMosM-dzuvQ"&gt;This youtube playlist&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;That's all for now, till next time, have a great time testing your applications. One more thing before I go, here's a sample implementation of how I use Testing Library with react-native.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2GjAH4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fasx1v9962bqjd6bmokd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2GjAH4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fasx1v9962bqjd6bmokd.png" alt="rn code"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tdd</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Looking for a Forestry alternative?</title>
      <author>David Large</author>
      <pubDate>Tue, 14 Sep 2021 00:27:51 +0000</pubDate>
      <link>https://dev.to/cloudcannon/looking-for-a-forestry-alternative-4c3o</link>
      <guid>https://dev.to/cloudcannon/looking-for-a-forestry-alternative-4c3o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#your-cms-for-jekyll-hugo-and-eleventy"&gt;
  &lt;/a&gt;
  Your CMS for Jekyll, Hugo, and Eleventy
&lt;/h2&gt;

&lt;p&gt;Forestry announced in April 2021 that they'd be &lt;a href="https://forestry.io/blog/tina-cloud-the-next-forestry/"&gt;sunsetting their CMS&lt;/a&gt; in favour of TinaCMS and Tina Cloud, which is currently limited to React-based sites. If you've been looking for an alternative to Forestry for your Jekyll, Hugo, and Eleventy static sites, CloudCannon is here to help.&lt;/p&gt;

&lt;p&gt;So how does CloudCannon compare?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-editing"&gt;
  &lt;/a&gt;
  Visual editing
&lt;/h3&gt;

&lt;p&gt;CMSs exist to help editing teams manage a website's contents. The simpler the editing experience, the more your editing team will be empowered to make updates without the help of a developer. CloudCannon puts the editor's experience first and foremost, with a fully-featured visual editor that developers can configure for optimal editing.&lt;/p&gt;

&lt;p&gt;With CloudCannon, content writers can write and update content directly on the website — what could be more intuitive than that?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JSPmUOoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdyd766xp1y82kzou7ob.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JSPmUOoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdyd766xp1y82kzou7ob.gif" alt="Editable regions in CloudCannon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-page-building"&gt;
  &lt;/a&gt;
  Component page building
&lt;/h3&gt;

&lt;p&gt;Markdown is fantastic, but it's too restrictive for complex marketing content, especially when content editors prefer a visual approach. That's where using components — which can be pieced together to build a page — are a great idea. On CloudCannon, components are called &lt;a href="https://cloudcannon.com/documentation/edit/editing/configuration/#array-structures"&gt;array structures&lt;/a&gt;. You start by defining a label and the data fields in your component, and you're free to use the &lt;a href="https://cloudcannon.com/documentation/edit/interfaces/inputs/#inputs"&gt;full range of field types&lt;/a&gt; available on CloudCannon; you can even nest array structures! Once configured, editors can use these components to piece together content on a page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ5pQUwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vyr9m69o28r2cs4pcsw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ5pQUwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vyr9m69o28r2cs4pcsw.gif" alt="Page building process in CloudCannon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitbased"&gt;
  &lt;/a&gt;
  Git-based
&lt;/h3&gt;

&lt;p&gt;CloudCannon is a Git-based CMS. All changes in your repository automatically sync to CloudCannon, and all changes editors make will commit back to the repository. We're working towards providing editors access to the full power of Git; currently editors can create a branch or copy of a site to make large-scale changes that can be merged in through a branch merge or pull request at a later date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYv2YiJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tzw4d6ivc9sm7cnxr34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYv2YiJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tzw4d6ivc9sm7cnxr34.png" alt="The Git sync/save process in CloudCannon's CMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-included"&gt;
  &lt;/a&gt;
  Hosting included
&lt;/h3&gt;

&lt;p&gt;All sites on CloudCannon have access to reliable, high-performance hosting through our partner CloudFlare. Configure your custom domain and host your production site directly on CloudCannon, or use our hosting just for your staging environment and host production on your own hosting provider — the choice is yours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-on-the-roadmap"&gt;
  &lt;/a&gt;
  What's on the roadmap?
&lt;/h2&gt;

&lt;p&gt;We believe simple, elegant, and performant SSGs such as Jekyll, Hugo, and Eleventy are the best way to build most marketing and brand websites. We're constantly refining our support for these SSGs and iterating on the editing and publishing experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-intuitive-visual-editing"&gt;
  &lt;/a&gt;
  More intuitive visual editing
&lt;/h3&gt;

&lt;p&gt;Visual editing is at the core of CloudCannon. We're working on making more functionality available in the visual editor to provide an even more intuitive editing experience. Our ultimate goal is twofold: first, to give the developer the complete flexibility to model content however they'd like — using front matter, collections, markdown, or HTML. For non-technical editors, our aim is to abstract how a site's content is stored and managed, allowing them to create and maintain complex content structures in a SSG &lt;em&gt;without&lt;/em&gt; needing to know everything about how it all works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-components"&gt;
  &lt;/a&gt;
  Managing components
&lt;/h3&gt;

&lt;p&gt;Later this month we'll be announcing a new open-source framework for managing HTML components. (Think &lt;a href="https://github.com/storybookjs/storybook"&gt;Storybook&lt;/a&gt;, but made especially for HTML-based SSGs.) This new framework will have a tight integration into CloudCannon, giving developers a clear structure for creating components, and giving editors the ability to add, rearrange and update components with a live preview. Stay tuned for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-for-all"&gt;
  &lt;/a&gt;
  Git for all
&lt;/h3&gt;

&lt;p&gt;The final piece of the puzzle is Git workflows. Git has changed how web developers collaborate on content. We want to bring the power and flexibility of these workflows to content editors, and we're well on the way there. Our plan is to see just how far we can push this without content editors needing to know anything about Git.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-started"&gt;
  &lt;/a&gt;
  How do I get started?
&lt;/h2&gt;

&lt;p&gt;You can start transferring your sites in a few minutes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://app.cloudcannon.com/register"&gt;Create a free account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a site&lt;/li&gt;
&lt;li&gt;Connect your Git repository to your site — we support GitHub, Bitbucket and GitLab.&lt;/li&gt;
&lt;li&gt;Configure your &lt;a href="https://cloudcannon.com/documentation/build/setup/configuration/#configuration"&gt;build options&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! CloudCannon will automatically build your site every time your repository changes.&lt;/p&gt;

&lt;p&gt;CloudCannon provides a basic level of editing by default. To configure more intuitive editing for your content editors you can look at the following configurable options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/html/#editable-regions"&gt;Editable regions&lt;/a&gt; — Add inline editing to HTML content.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/html/#editable-regions"&gt;Editor links&lt;/a&gt; — Add buttons and links to the visual editing interface to link to data in the front matter, collections or data files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/interfaces/inputs/#inputs"&gt;Inputs&lt;/a&gt; — Configure the editing interface for different content types.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/configuration/#array-structures"&gt;Array structures&lt;/a&gt; — Create your own components, which editors can use to build their own pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#haere-mai-welcome"&gt;
  &lt;/a&gt;
  Haere mai! Welcome!
&lt;/h2&gt;

&lt;p&gt;We'd love to hear from you! If you're interested in trying out CloudCannon, &lt;a href="https://cloudcannon.com/contact/"&gt;reach out and say hello&lt;/a&gt;! We're here to help and we're always ready to listen.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>cms</category>
      <category>git</category>
    </item>
    <item>
      <title>The Collab Lab TCL-28: The Road to Lettuce Know</title>
      <author>Luis Augusto</author>
      <pubDate>Tue, 14 Sep 2021 00:11:24 +0000</pubDate>
      <link>https://dev.to/the-collab-lab/the-collab-lab-tcl-28-the-road-to-lettuce-know-4nj6</link>
      <guid>https://dev.to/the-collab-lab/the-collab-lab-tcl-28-the-road-to-lettuce-know-4nj6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;For 8 weeks, TCL 28 cohort members worked together with the guidance of their mentors to create Lettuce Know, a smart shopping list application with a friendly UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#who-are-the-tcl-28-collabies-and-mentors"&gt;
  &lt;/a&gt;
  Who are the &lt;a href="https://the-collab-lab.codes/who-we-are/"&gt;TCL 28 Collabies&lt;/a&gt; and Mentors?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Developers a.k.a. Collabies&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/kelsey-siman/"&gt;Kelsey Siman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/isa-abutaa/"&gt;Isa Abutaa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/hulya-karakaya/"&gt;Hulya Karakaya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/sandydaii/"&gt;Sandy Dai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Mentors&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/meganesu/"&gt;Megan Sullivan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/luisbaugusto/"&gt;Luis Augusto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/scottdreu/"&gt;Scott Reu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-they-do"&gt;
  &lt;/a&gt;
  What did they do?
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/the-collab-lab"&gt;
        the-collab-lab
      &lt;/a&gt; / &lt;a href="https://github.com/the-collab-lab/tcl-28-smart-shopping-list"&gt;
        tcl-28-smart-shopping-list
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Overview&lt;/h1&gt;
&lt;h2&gt;
What is this project?&lt;/h2&gt;
&lt;p&gt;The goal of this project is to collaborate with your Collab Lab team to create a “smart” shopping list app that learns your buying habits and helps you remember what you’re likely to need to buy on your next trip to the store.&lt;/p&gt;
&lt;h2&gt;
How does it work?&lt;/h2&gt;
&lt;p&gt;As a user, you will enter items (e.g., “Greek yogurt” or “Paper towels”) into your list. Each time you buy the item, you mark it as purchased in the list. Over time, the app comes to understand the intervals at which you buy different items. If an item is likely to be due to be bought soon, it rises to the top of the shopping list.&lt;/p&gt;
&lt;h2&gt;
Check out an example&lt;/h2&gt;
&lt;p&gt;The app will work in many of the same ways as &lt;a href="https://app.ineedtobuy.xyz/" rel="nofollow"&gt;iNeedToBuy.xyz&lt;/a&gt; (on which our project is based) with the exception that we will not be implementing barcode…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/the-collab-lab/tcl-28-smart-shopping-list"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Over the span of 8 weeks, TCL 28 collaborated together remotely to create &lt;a href="https://lettuce-know.web.app/"&gt;Lettuce Know&lt;/a&gt;, a smart shopping list which learns the user’s shopping habits and predicts when items are due for the next purchase using React, Firebase &amp;amp; Material UI.&lt;/p&gt;

&lt;p&gt;What did that collaboration look like, exactly? Well, each week the Collabies would pair off in twos so they could work together on an assigned issue or story. They would be responsible for working through that story, asking for help from their fellow Collabies or mentors if needed, creating a descriptive pull request on GitHub which outlines what changes were made, completing code reviews, and then finally, merging the pull requests to the main branch.&lt;/p&gt;

&lt;p&gt;Here are a sample of the various tickets that the Collabies worked on together:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generated a new, unique token for users, and stored it inside Firebase Firestore. Also, users can share their tokens with their friends and make changes to their shopping lists.&lt;/li&gt;
&lt;li&gt;Implemented a feature to mark an item on the shopping list as purchased so the app can learn how often the user buys different items. When a purchase is recorded, the estimated number of days until the next purchase date is calculated and recorded in the database.&lt;/li&gt;
&lt;li&gt;Created a feature for sorting shopping list items in order of how soon the user is likely to need to buy each of them again so that it’s clear what the user needs to buy soon.&lt;/li&gt;
&lt;li&gt;Created items schema and stored the item information and connected to user tokens.&lt;/li&gt;
&lt;li&gt;Created a feature for preventing the user from typing a duplicate item, duplicate items are not added to Firestore.&lt;/li&gt;
&lt;li&gt;Added a feature to filter the user's shopping list to make it easier to locate an item in the list.&lt;/li&gt;
&lt;li&gt;Used accessibility tests (a11y) to make sure the app is accessible to all users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-they-learn"&gt;
  &lt;/a&gt;
  What did they learn?
&lt;/h2&gt;

&lt;p&gt;Before participating in The Collab Lab, our Collabies all had experience with frontend and backend development with varying technologies, however, they all shared experience with HTML, CSS, JavaScript, and React. In addition to using those skills to build their app, they also used some new technologies — Cloud Firestore, a NoSQL document-oriented online database,  Material-UI, and SweetAlert.&lt;/p&gt;

&lt;p&gt;But aside from learning to use Cloud Firestore and query documents in the database, the most important skills that the Collabies learned were communication and remote collaboration. With everyone living in various time zones and having different responsibilities during the week, communication was essential to being successful as a team. The Collabies utilized Slack and GitHub to schedule pair-programming sessions and communicate what changes were being made to the codebase at any given time. When one pair had a question on the story they were working on, they communicated that to the group and received the feedback they needed to continue solving the problem. &lt;/p&gt;

&lt;p&gt;It wasn’t only essential to communicate progress on the project, but also to communicate our successes. Every two weeks, the Collabies and mentors participated in a retrospective, where everyone had the opportunity to share their appreciation for each other, what they thought went well, and what they thought could be better. There was always a lot of love that was shared during those meetings.&lt;/p&gt;

&lt;p&gt;Week after week, the quality of code reviews, pull requests, merges, and communication skills improved. Pair-programming helped them talk through their code and articulate their thought processes verbally. By the time the cohort was just about wrapped, the group was getting weekly requirements knocked out early and started opening their own issues and making tickets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collabie-experience-highlight"&gt;
  &lt;/a&gt;
  Collabie Experience Highlight
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;During our first day, I immediately felt welcomed by both Andrew and Stacie’s positive radiance. I soon was introduced to the rest of my fellow Collabies and mentors. Ever since I met them, everyone has been super respectful, helpful, and supportive from start to finish. Throughout our pair programming sessions, our office hours on the weekdays, and our code reviews on Saturday, I soon fell in love with the routine I had for 8 weeks. Working together felt adventurous, as we tackled different issues together and admired our accomplishments at the end of each session. From their working style to their coding knowledge, I learned so much from each one of my talented teammates. Even though there may be times we do run into a bug, the other pair and mentors were there for guidance. Our mentors were super responsive, patient, and insightful, I am still shocked how they were able to do all this while balancing a job. Looking back, I really do think this is one of the best teams I have ever been on, and I am so thankful for this experience. :) — &lt;em&gt;Sandy Dai&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lettuce-know-project-demo"&gt;
  &lt;/a&gt;
  Lettuce Know Project Demo
&lt;/h2&gt;

&lt;p&gt;You can check out our project demo here!&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5ALvZ9s8Y0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>react</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Python tutorial básico: Programando un registro.</title>
      <author>Ricardo Aguilar</author>
      <pubDate>Mon, 13 Sep 2021 23:47:07 +0000</pubDate>
      <link>https://dev.to/ricardorien/python-tutorial-basico-programando-un-registro-3d4o</link>
      <guid>https://dev.to/ricardorien/python-tutorial-basico-programando-un-registro-3d4o</guid>
      <description>&lt;p&gt;Escribiremos un programa que nos permita hacer un registro de animales, con su nombre científico&lt;br&gt;
y su nombre común, estos enlazados por un ID único. Usando ese ID podremos eliminar al animal del registro,&lt;br&gt;
o simplemente modificar los nombres ya escritos. Así como una opción de ver la lista de los animales ya&lt;br&gt;
registrados y una opción que nos permita salir del programa. &lt;/p&gt;

&lt;p&gt;La meta es generar e imprimir una lista que se pueda modificar como esta:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Animal Registry&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Scientific Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Common Name&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3Y99&lt;/td&gt;
&lt;td&gt;Canis Lupus Familiaris&lt;/td&gt;
&lt;td&gt;Siberian Husky&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT5R&lt;/td&gt;
&lt;td&gt;Cebinae&lt;/td&gt;
&lt;td&gt;Capuchin Monkey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8D6U&lt;/td&gt;
&lt;td&gt;Octopoda&lt;/td&gt;
&lt;td&gt;Octopus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YG0E&lt;/td&gt;
&lt;td&gt;Anthophila&lt;/td&gt;
&lt;td&gt;Bee&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JN14&lt;/td&gt;
&lt;td&gt;Dinastinae&lt;/td&gt;
&lt;td&gt;Rhinoceros Beetle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WVTA&lt;/td&gt;
&lt;td&gt;Python Regius&lt;/td&gt;
&lt;td&gt;Ball Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAZP&lt;/td&gt;
&lt;td&gt;Gorilla&lt;/td&gt;
&lt;td&gt;Gorilla&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Trabajaremos con:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El modulo PrettyTable.&lt;/li&gt;
&lt;li&gt;Diccionarios anidados.&lt;/li&gt;
&lt;li&gt;Control del flujo.&lt;/li&gt;
&lt;li&gt;Funciones.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Debes instalar PrettyTable mediante Pip.&lt;br&gt;
Intenta, en la consola, con:&lt;br&gt;
pip install prettytable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Primero, importaremos los módulos necesarios:&lt;br&gt;
PrettyTable para la creación de la tabla en donde registraremos a los animales, random y string para &lt;br&gt;
generar un ID al azar con el cual identificaremos la fila en el registo y sys para salir del programa.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prettytable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PrettyTable&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora crearemos un diccionario vacío en donde almacenaremos los animales que vayamos a registrar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;animal_dic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Escribiremos la condicional "if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;"" para evitar errores de importación y por buenas practicas.&lt;br&gt;
y llamamos a nuestra función &lt;em&gt;main()&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;La explicación de como &lt;em&gt;if&lt;/em&gt; _&lt;em&gt;name&lt;/em&gt;_ == "_&lt;em&gt;main&lt;/em&gt;_" funciona está fuera del alcance de este articulo.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#funciones"&gt;
  &lt;/a&gt;
  Funciones:
&lt;/h2&gt;

&lt;p&gt;Ahora bien, escribamos las funciones que harán andar nuestro programa, estas, irán &lt;strong&gt;ANTES&lt;/strong&gt; de la condicional "&lt;em&gt;if _&lt;em&gt;name&lt;/em&gt;_ == "_&lt;em&gt;main&lt;/em&gt;_"&lt;/em&gt;" anteriormente descrito. De lo contrario Python intentaría ejecutar la función &lt;em&gt;main()&lt;/em&gt; cuando esta &lt;strong&gt;no&lt;/strong&gt; han sido definida, por lo tanto dispararía un error.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#funci%C3%B3n-pricipal-main"&gt;
  &lt;/a&gt;
  Función pricipal main:
&lt;/h2&gt;

&lt;p&gt;Dentro de &lt;em&gt;main()&lt;/em&gt; obligaremos a que se ejecute este  &lt;em&gt;loop&lt;/em&gt; con un &lt;em&gt;while True&lt;/em&gt;, &lt;br&gt;
imprimirá las instrucciones de añadir, borrar, actualizar, chequear y salir del programa.&lt;br&gt;
También tenemos un &lt;em&gt;input()&lt;/em&gt; que será la opción que elija el usuario y esta será almacenada en&lt;br&gt;
la variable &lt;em&gt;user_input&lt;/em&gt;. &lt;strong&gt;Atento&lt;/strong&gt; al método &lt;em&gt;.lower()&lt;/em&gt;, este convierte en minúsculas lo que ingrese el usuario, así evitamos errores de tipeo por parte de este. Finalmente, las condicionales. Dependiendo de lo que elija el usuario se llamará a una función.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~~~~~~~~~~~~~~~~~~ Functions(): ~~~~~~~~~~~~~~~~~~~
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ~~~~~~~~~~~~~~ User's choise ~~~~~~~~~~~~~~~
&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;instrucctions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;What do you want to do? "&lt;/span&gt;
                           &lt;span class="s"&gt;"(a, d, u, l, e): "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;add_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delete_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"u"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;update_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;print_register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;exit_program&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"please, enter something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#instrucciones"&gt;
  &lt;/a&gt;
  Instrucciones:
&lt;/h3&gt;

&lt;p&gt;Crearemos una función para que el usuario vea las opciones de nuestro programa junto a una tecla a presionar  para que se ejecute esa opción, y para que el usuario sepa que hacer. Las opciones son: agregar animal, borrar animal, actualizar animal, mirar lista y salir del programa.&lt;br&gt;
Por lo tanto, sería así:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;instrucctions&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Animal registry program:'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;1: Enter A or a to add new animal.'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;2: Enter D or d to delete a animal'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;3: Enter U or u to update animal.'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;4: Enter L or l to check list of animals. '&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;5: Enter E or e to exit the program.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imprimimos las opciones. &lt;em&gt;'/n'&lt;/em&gt; significa un salto de linea.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#imprimir-registro"&gt;
  &lt;/a&gt;
  Imprimir registro:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_registry&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PrettyTable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Scientific Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Common Name"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal_data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Animal registry"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Atento a lo que sucede aquí:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para darles nombres a los encabezados de las columnas los escribimos en formato de lista, y la pasamos 
como parámetro de &lt;em&gt;PrettyTable&lt;/em&gt; y la almacenamos en la variable "&lt;em&gt;x&lt;/em&gt;".&lt;/li&gt;
&lt;li&gt;Antes de hablar del &lt;em&gt;ciclo for&lt;/em&gt;, debemos recordar y tener muy claro de que estamos intentando 
acceder a un diccionario &lt;strong&gt;dentro&lt;/strong&gt; de otro diccionario. Solo para tenerlo claro, comparemos un 
diccionario &lt;em&gt;común&lt;/em&gt;, a uno &lt;em&gt;anidado&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#diccionario"&gt;
  &lt;/a&gt;
  Diccionario:
&lt;/h4&gt;

&lt;p&gt;Donde tenemos una colección de elementos almacenados en pares de &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;value&lt;/strong&gt; (&lt;strong&gt;clave&lt;/strong&gt;/&lt;strong&gt;valor&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'&lt;em&gt;name&lt;/em&gt;' es la &lt;strong&gt;key&lt;/strong&gt; (&lt;strong&gt;clave&lt;/strong&gt;) y '&lt;em&gt;Adam&lt;/em&gt;' el &lt;strong&gt;value&lt;/strong&gt; (&lt;strong&gt;valor&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'last'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Smith'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Podemos tener &lt;strong&gt;más&lt;/strong&gt; de un &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;value&lt;/strong&gt; en &lt;strong&gt;UN&lt;/strong&gt; diccionario. '&lt;em&gt;name&lt;/em&gt;' y '&lt;em&gt;last&lt;/em&gt;' son las &lt;strong&gt;keys&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#diccionario-anidado"&gt;
  &lt;/a&gt;
  Diccionario anidado:
&lt;/h4&gt;

&lt;p&gt;Los valores al exterior del diccionario, también son diccionarios.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Wealth of Nations'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam Smith'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Economic Sophisms'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;' author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Frédéric Bastiat'&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt; es la &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;clave&lt;/strong&gt; del diccionario externo, y '&lt;strong&gt;book&lt;/strong&gt;' y '&lt;strong&gt;author&lt;/strong&gt;' claves del diccionario interno.&lt;/p&gt;

&lt;p&gt;Entendido esto, volvamos al código &lt;em&gt;anterior&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal_data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo que ocurre aquí es que accedemos al &lt;strong&gt;key externo&lt;/strong&gt; (Es decir, el &lt;em&gt;ID&lt;/em&gt;), mediante &lt;em&gt;animal_date&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ya que accedemos al &lt;strong&gt;key&lt;/strong&gt; externo, tendremos acceso a los valores internos. Ocurre de &lt;br&gt;
la siguiente manera:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;animal_dic = ID del animal&lt;/li&gt;
&lt;li&gt;animal_dic[animal_data]["scientific_name"] = nombre científico&lt;/li&gt;
&lt;li&gt;animal_dic[animal_data]["common_name"] = nombre común&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entonces, pues:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ingresamos los valores de nuestro diccionario a la &lt;strong&gt;fila&lt;/strong&gt; de PrettyTable como &lt;strong&gt;una lista&lt;/strong&gt;, mediante el &lt;br&gt;
método &lt;em&gt;add_row()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente le damos un encabezado a nuestra tabla:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Animal registry"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora puedes imprimir la lista iniciando el programa y presionando &lt;em&gt;"l" o "L".&lt;/em&gt; Obviamente, ahora nuestro diccionario está vacío. Más adelante veremos como ingresarle datos.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#random-id"&gt;
  &lt;/a&gt;
  Random ID:
&lt;/h3&gt;

&lt;p&gt;Necesitamos un ID para identificar la columna y al animal registrado, este ID servirá como &lt;em&gt;enlace&lt;/em&gt;, siendo la &lt;strong&gt;key&lt;/strong&gt; externa de nuestros diccionarios anidados. &lt;br&gt;
Es necesario para un futuro poder actualizar uno o ambos nombres del animal, o borrarlo definitivamente.&lt;br&gt;
Para facilitarle la tarea al usuario, y evitar que cree duplicados, crearemos una función que retorne &lt;br&gt;
un string al azar. Lo haremos con el siguiente código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;random_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;
                                           &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random_string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Donde "&lt;em&gt;k&lt;/em&gt;" es el largo del string.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;La explicación de como funciona esta función está fuera del alcance de este articulo.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#agregar"&gt;
  &lt;/a&gt;
  Agregar:
&lt;/h3&gt;

&lt;p&gt;Ahora hagamos la función que se encargará de tomar los valores que escriba el usuario e ingresarlos en el diccionario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Please enter the scientific name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;common_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Please enter the common name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must write something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Lo primero que notarás es que llamamos a la función &lt;em&gt;random_id&lt;/em&gt; que devuelve un string y lo 
almacenamos en la variable &lt;em&gt;animal_id&lt;/em&gt;. Como su nombre lo indica, identifica al animal y su 
fila dentro del registro.&lt;/li&gt;
&lt;li&gt;Mediante el método &lt;em&gt;input()&lt;/em&gt; le pedimos al usuario que escriba el nombre común y científico. 
y los almacenamos en variables. Usamos el método &lt;em&gt;.title()&lt;/em&gt; por  estética.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hagamos una pausa y miremos otra vez esta parte del código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Actualizamos nuestro diccionario anidado y lo almacenamos en una variable llamada "&lt;em&gt;data&lt;/em&gt;". De modo que:&lt;br&gt;
&lt;em&gt;animal_id&lt;/em&gt; = Es el &lt;em&gt;random ID&lt;/em&gt; que retorna nuestra función. Es la &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;clave&lt;/strong&gt; externa de este &lt;br&gt;
diccionario anidado.&lt;br&gt;
'&lt;em&gt;scientific_name&lt;/em&gt;': que está entre comillas, es la key/llave interna.&lt;br&gt;
&lt;em&gt;scientific_name&lt;/em&gt;: que una variable, es la value/valor interno. Ingresado por el usuario.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;El siguiente bloque de código establece una condición donde si el usuario &lt;strong&gt;no&lt;/strong&gt; ingresa &lt;br&gt;
ni un nombre científico ni un nombre común, imprima un mensaje de que debe hacerlo.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Por ultimo, en el '&lt;em&gt;else&lt;/em&gt;': si se han ingresados al menos uno de los dos &lt;em&gt;input()&lt;/em&gt; &lt;br&gt;
actualizaremos el "&lt;em&gt;animal_dic&lt;/em&gt;" con los datos escritos por el usuario.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#eliminar-fila"&gt;
  &lt;/a&gt;
  Eliminar fila:
&lt;/h3&gt;

&lt;p&gt;Ahora escribamos la función para borrar la fila que el usuario elija, mediante el &lt;em&gt;ID único&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the animal ID you want delete: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Delete (y/n)"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; registry has been deleted!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ID not found. Check list pressing 'L'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Le pedimos al usuario que ingrese el ID de la fila. Usamos &lt;em&gt;upper()&lt;/em&gt; para que este no tenga
que escribir mayúsculas.&lt;/li&gt;
&lt;li&gt;Creamos un '&lt;em&gt;if&lt;/em&gt;': que chequea si el &lt;em&gt;ID ingresado&lt;/em&gt; por el usuario está en el diccionario le de
la elección de querer borrarlo con un sí o no. Si escribe si se borrara con un 
"del animal_dic[animal_id]" que busca el ID (&lt;strong&gt;key externo&lt;/strong&gt;) y borra todos sus &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;values&lt;/strong&gt; 
internos .&lt;/li&gt;
&lt;li&gt;Con el &lt;em&gt;else&lt;/em&gt; declaramos de que, si no se ha encontrado el &lt;em&gt;ID&lt;/em&gt;, imprime un "ID not found"&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#actualizaci%C3%B3n"&gt;
  &lt;/a&gt;
  Actualización:
&lt;/h3&gt;

&lt;p&gt;Tal vez el usuario ha cometido un error de tipeo, y desea cambiar los campos de una fila en especifico&lt;br&gt;
Ahí la necesidad de una función que los actualice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the animal ID you want update: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# If external key in dictionary, if key is equal to ID (animal_id)
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Update registry &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;? (y/n): "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Changing names
&lt;/span&gt;                &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write a new scientific name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;common_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write a new common name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must write something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Updating
&lt;/span&gt;                    &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;
                    &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"registry updated!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;print_registry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ID not found. Check list pressing 'L'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;El usuario ingresa el ID mediante un &lt;em&gt;input()&lt;/em&gt; y es almacenado en una &lt;em&gt;variable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Sí el ID (&lt;strong&gt;key externo&lt;/strong&gt;) existe en nuestro diccionario avanzará a recorrerlo mediante un &lt;em&gt;for loop&lt;/em&gt;,
de lo contrario, imprimirá un "&lt;em&gt;ID not found&lt;/em&gt;".&lt;/li&gt;
&lt;li&gt;Preguntamos si el usuario realmente quiere borrar la &lt;strong&gt;fila&lt;/strong&gt; y almacenamos su respuesta en una 
&lt;em&gt;variable&lt;/em&gt;. Si es afirmativo, procedemos. Contrario se detiene el flujo.&lt;/li&gt;
&lt;li&gt;Pedimos al usuario, mediante un &lt;em&gt;input()&lt;/em&gt;, que escriba los nuevos nombres y los almacenamos en
&lt;em&gt;variables&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Si el usuario ha dejado en blanco &lt;strong&gt;ambos&lt;/strong&gt; campos se imprimirá "&lt;em&gt;You must write something!&lt;/em&gt;" de lo 
contrario accederemos al diccionario, a su llave externa y almacenaremos los nuevos valores. &lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#salir-del-programa"&gt;
  &lt;/a&gt;
  Salir del programa:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exit_program&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Goodbye!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usamos el método &lt;em&gt;exit()&lt;/em&gt; del modulo &lt;em&gt;built-in&lt;/em&gt; &lt;strong&gt;sys&lt;/strong&gt; para salirnos del programa e imprimiremos un &lt;br&gt;
  mensaje.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Python Beginners Tutorial: Animal registry</title>
      <author>Ricardo Aguilar</author>
      <pubDate>Mon, 13 Sep 2021 23:34:27 +0000</pubDate>
      <link>https://dev.to/ricardorien/python-beginners-tutorial-animal-registry-19g4</link>
      <guid>https://dev.to/ricardorien/python-beginners-tutorial-animal-registry-19g4</guid>
      <description>&lt;p&gt;We will write a program that will allow us to make a register of animals, with their scientific name and common name, binded by a unique ID. Using that ID we will be able to remove the animal from the register, or simply modify the names already written. Also an option to view the list of animals already registered and an option to exit the program.&lt;/p&gt;

&lt;p&gt;The goal is to generate and print a list that can be modified like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Animal Registry&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Scientific Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Common Name&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3Y99&lt;/td&gt;
&lt;td&gt;Canis Lupus Familiaris&lt;/td&gt;
&lt;td&gt;Siberian Husky&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT5R&lt;/td&gt;
&lt;td&gt;Cebinae&lt;/td&gt;
&lt;td&gt;Capuchin Monkey&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8D6U&lt;/td&gt;
&lt;td&gt;Octopoda&lt;/td&gt;
&lt;td&gt;Octopus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;YG0E&lt;/td&gt;
&lt;td&gt;Anthophila&lt;/td&gt;
&lt;td&gt;Bee&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JN14&lt;/td&gt;
&lt;td&gt;Dinastinae&lt;/td&gt;
&lt;td&gt;Rhinoceros Beetle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WVTA&lt;/td&gt;
&lt;td&gt;Python Regius&lt;/td&gt;
&lt;td&gt;Ball Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HAZP&lt;/td&gt;
&lt;td&gt;Gorilla&lt;/td&gt;
&lt;td&gt;Gorilla&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We will work with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The PrettyTable module.&lt;/li&gt;
&lt;li&gt;Nested dictionaries.&lt;/li&gt;
&lt;li&gt;Flow control.&lt;/li&gt;
&lt;li&gt;Functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You must install PrettyTable via Pip.&lt;br&gt;
Try with:&lt;br&gt;
pip install prettytable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, we will import the necessary modules:&lt;br&gt;
&lt;em&gt;PrettyTable&lt;/em&gt; for the creation of the table where we will register the animals, &lt;em&gt;random&lt;/em&gt; and &lt;em&gt;string&lt;/em&gt; to &lt;br&gt;
generate a random ID with which we will identify the row in the record and &lt;em&gt;sys&lt;/em&gt; to exit the program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;prettytable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PrettyTable&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will create an empty dictionary where we will store the animals that we are going to register.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;animal_dic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will write the conditional "if name == "main"" to avoid import errors and for good practice.&lt;br&gt;
and call our main() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;An explanation of how &lt;em&gt;if&lt;/em&gt; _&lt;em&gt;name&lt;/em&gt;_ == "_&lt;em&gt;main&lt;/em&gt;_" works is beyond the scope of this article.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions:
&lt;/h2&gt;

&lt;p&gt;Now, let's write the functions that will run our program, these will go &lt;strong&gt;BEFORE&lt;/strong&gt; the conditional "&lt;em&gt;if&lt;/em&gt; _&lt;em&gt;name&lt;/em&gt;_ == "_&lt;em&gt;main&lt;/em&gt;_"" described above. Otherwise Python would try to execute the &lt;em&gt;main()&lt;/em&gt; function when it &lt;strong&gt;has not&lt;/strong&gt; been defined, thus triggering an error.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#main-function"&gt;
  &lt;/a&gt;
  Main function:
&lt;/h3&gt;

&lt;p&gt;Now, we must bind the option chosen by the user to the functions of our program.&lt;/p&gt;

&lt;p&gt;The next step is straightforward: inside &lt;em&gt;main()&lt;/em&gt; we will force this &lt;em&gt;loop&lt;/em&gt; to run, with a &lt;em&gt;while True&lt;/em&gt;, &lt;br&gt;
it will print the instructions to &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;delete&lt;/em&gt;, &lt;em&gt;update&lt;/em&gt;, &lt;em&gt;check&lt;/em&gt; and &lt;em&gt;exit&lt;/em&gt; the program.&lt;br&gt;
We also have an &lt;em&gt;input()&lt;/em&gt; that will be the option that the user chooses and this will be stored in&lt;br&gt;
the variable &lt;em&gt;user_input&lt;/em&gt;. Pay attention to the &lt;em&gt;.lower()&lt;/em&gt; method, transform what the user enters into lower case, so we avoid typing errors. &lt;br&gt;
Finally, the conditionals. Depending on what the user chooses, a function will be called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~~~~~~~~~~~~~~~~~~ Functions(): ~~~~~~~~~~~~~~~~~~~
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ~~~~~~~~~~~~~~ User's choise ~~~~~~~~~~~~~~~
&lt;/span&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;instrucctions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;What do you want to do? "&lt;/span&gt;
                           &lt;span class="s"&gt;"(a, d, u, l, e): "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;add_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;delete_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"u"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;update_animal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;print_register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;exit_program&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"please, enter something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#instructions"&gt;
  &lt;/a&gt;
  Instructions:
&lt;/h3&gt;

&lt;p&gt;We will create a function so that the user can see the options of our program along with a key to press to execute that option, and so that the user knows what to do. The options are: add animal, delete animal, update animal, check list and exit the program.&lt;br&gt;
So, it would be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;instrucctions&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Animal registry program:'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;1: Enter A or a to add new animal.'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;2: Enter D or d to delete a animal'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;3: Enter U or u to update animal.'&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;4: Enter L or l to check list of animals. '&lt;/span&gt;
          &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;5: Enter E or e to exit the program.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We print the options. &lt;em&gt;'/n'&lt;/em&gt; means a line break.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#print-the-list"&gt;
  &lt;/a&gt;
  Print the list:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_registry&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PrettyTable&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Scientific Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Common Name"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal_data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Animal registry"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pay attention to what happens here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To give names to the column headers we write them in &lt;strong&gt;list&lt;/strong&gt; format, and we pass it as parameter of &lt;em&gt;PrettyTable&lt;/em&gt; and store it in the variable "&lt;em&gt;x&lt;/em&gt;".&lt;/li&gt;
&lt;li&gt;Before we talk about the &lt;em&gt;for&lt;/em&gt; cycle, we must remember and be aware that we are trying to access a dictionary *&lt;em&gt;within a dictionary&lt;/em&gt;. Just to lining things up, let's compare a common* dictionary, to a &lt;em&gt;nested&lt;/em&gt; one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#dictionary"&gt;
  &lt;/a&gt;
  Dictionary:
&lt;/h4&gt;

&lt;p&gt;Where we have a collection of items stored in &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;value&lt;/strong&gt; pairs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'&lt;em&gt;name&lt;/em&gt;' is the &lt;strong&gt;key&lt;/strong&gt; and '&lt;em&gt;Adam&lt;/em&gt;' is the &lt;strong&gt;value&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'last'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Smith'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can have &lt;strong&gt;more&lt;/strong&gt; than one pair of &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;value&lt;/strong&gt; in just &lt;strong&gt;ONE&lt;/strong&gt; dictionary. '&lt;em&gt;name&lt;/em&gt;' and '&lt;em&gt;last&lt;/em&gt;' are &lt;em&gt;both&lt;/em&gt; &lt;strong&gt;keys&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nested-dictionary"&gt;
  &lt;/a&gt;
  Nested dictionary:
&lt;/h4&gt;

&lt;p&gt;The values to the outside of the dictionary, are also dictionaries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Wealth of Nations'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Adam Smith'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'book'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Economic Sophisms'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;' author'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Frédéric Bastiat'&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt; is the &lt;strong&gt;key&lt;/strong&gt; of the &lt;em&gt;external&lt;/em&gt; dictionary, and '&lt;strong&gt;book&lt;/strong&gt;' and '&lt;strong&gt;author&lt;/strong&gt; are &lt;strong&gt;keys&lt;/strong&gt; of the &lt;em&gt;internal&lt;/em&gt; dictionary.&lt;/p&gt;

&lt;p&gt;With that in mind, let's go back to the &lt;em&gt;previous&lt;/em&gt; code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal_data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here is that we access the &lt;strong&gt;external key&lt;/strong&gt;, through &lt;em&gt;animal_data&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we access the external &lt;strong&gt;key&lt;/strong&gt;, we will have access to the internal values. It happens as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;animal_dic = Animal ID&lt;/li&gt;
&lt;li&gt;animal_dic[animal_data]["scientific_name"] = scientific name&lt;/li&gt;
&lt;li&gt;animal_dic[animal_data]["common_name"] = common name &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_row&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"scientific_name"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
           &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"common_name"&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We enter the values of our dictionary into the &lt;strong&gt;row&lt;/strong&gt; of PrettyTable as &lt;strong&gt;a list&lt;/strong&gt;, by means of the &lt;br&gt;
method &lt;em&gt;add_row()&lt;/em&gt;. Look carefully, everything is between braces [].&lt;/p&gt;

&lt;p&gt;Finally we give a header to our table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Animal registry"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can print the list by starting the program and pressing &lt;em&gt;"l" or "L".&lt;/em&gt; Obviously, in this moment our dictionary is empty. We will see later how to enter data into it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#random-id"&gt;
  &lt;/a&gt;
  Random ID:
&lt;/h3&gt;

&lt;p&gt;We need an ID to identify our rows, this ID will serve as a &lt;em&gt;binding&lt;/em&gt;, being the external &lt;strong&gt;key&lt;/strong&gt; of our nested dictionaries. &lt;br&gt;
It is necessary, in the future, to be able to update one or both names of the animal, or to delete it definitively.&lt;br&gt;
To make it easier for the user, and to avoid creating duplicates, we will create a function that returns &lt;br&gt;
a random string. We will do it with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;random_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_uppercase&lt;/span&gt;
                                           &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random_string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where "&lt;em&gt;k&lt;/em&gt;" is the length of the string.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An explanation of how this function works is beyond the scope of this article.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#add"&gt;
  &lt;/a&gt;
  Add:
&lt;/h3&gt;

&lt;p&gt;Now let's make the function that will take the values typed by the user and enter them into the dictionary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Please enter the scientific name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;common_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Please enter the common name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must write something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first thing you'll notice is that we call the &lt;em&gt;random_id&lt;/em&gt; function which returns a string and store it in the &lt;em&gt;animal_id&lt;/em&gt; variable. As the name implies, it identifies the animal and the row within the record. &lt;/li&gt;
&lt;li&gt;Using the &lt;em&gt;input()&lt;/em&gt; method we ask the user to type the common and scientific name. 
and store them in variables. We use the &lt;em&gt;.title()&lt;/em&gt; method for aesthetics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's pause and look at this part of the code again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We update our nested dictionary and store it in a variable called "&lt;em&gt;data&lt;/em&gt;". So:&lt;br&gt;
&lt;em&gt;animal_id&lt;/em&gt; is the &lt;em&gt;random ID&lt;/em&gt; that our function returns. It is the external &lt;strong&gt;key&lt;/strong&gt; of this &lt;br&gt;
nested dictionary.&lt;br&gt;
'&lt;em&gt;scientific_name&lt;/em&gt;': which is in quotation marks, is the internal key.&lt;br&gt;
&lt;em&gt;scientific_name&lt;/em&gt;: which is a variable, is the internal value. Entered by the user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The next block of code sets a condition where if the user &lt;strong&gt;does not&lt;/strong&gt; enter either a scientific name or a common name, print a message that he/she must do so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, in the '&lt;em&gt;else&lt;/em&gt;': if at least one of the two &lt;em&gt;input()&lt;/em&gt; have been entered, we will update the "&lt;em&gt;animal_dic&lt;/em&gt;" with the data entered by the user. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#delete-row"&gt;
  &lt;/a&gt;
  Delete row:
&lt;/h3&gt;

&lt;p&gt;Now let's write the function to delete the row of the user's choice, using the &lt;em&gt;unique ID&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the animal ID you want delete: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Delete (y/n)"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; registry has been deleted!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ID not found. Check list pressing 'L'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We ask the user to enter the ID of the row. We use the * upper () * method so that the user does not have to type in all capital letters.&lt;/li&gt;
&lt;li&gt;We create an '&lt;em&gt;if&lt;/em&gt;' that checks if the &lt;em&gt;ID entered&lt;/em&gt; by the user is in the dictionary, then give him the choice to delete it with a yes or no. If user types yes it will be deleted with a 
"&lt;strong&gt;del&lt;/strong&gt; animal_dic[animal_id]" which looks for the ID (external &lt;strong&gt;key&lt;/strong&gt;) and deletes all its internal &lt;strong&gt;key&lt;/strong&gt;/&lt;strong&gt;values&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;With the &lt;em&gt;else&lt;/em&gt; we declare that, if the &lt;em&gt;ID&lt;/em&gt; has not been found, it prints "ID not found"&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update:
&lt;/h3&gt;

&lt;p&gt;Perhaps the user has made a typo, and wants to change the fields in a specific row.&lt;br&gt;
There is a need for a function to update them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_animal&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;animal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Enter the animal ID you want update: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# If external key in dictionary, if key is equal to ID (animal_id)
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Update registry &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;animal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;? (y/n): "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Changing names
&lt;/span&gt;                &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write a new scientific name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;common_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write a new common name: "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You must write something!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# Updating
&lt;/span&gt;                    &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'scientific_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scientific_name&lt;/span&gt;
                    &lt;span class="n"&gt;animal_dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'common_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;common_name&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"registry updated!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;print_registry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ID not found. Check list pressing 'L'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The user enters the ID via an &lt;em&gt;input()&lt;/em&gt; and it is stored in a &lt;em&gt;variable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If the ID (&lt;strong&gt;external key&lt;/strong&gt;) exists in our dictionary it will step through it with a &lt;em&gt;for loop&lt;/em&gt;,
otherwise, it will print an "&lt;em&gt;ID not found&lt;/em&gt;".&lt;/li&gt;
&lt;li&gt;We ask if the user really wants to delete the &lt;strong&gt;row&lt;/strong&gt; and store their answer in a 
*variable. If yes, we proceed. Otherwise the flow stops.&lt;/li&gt;
&lt;li&gt;We ask the user, using an &lt;em&gt;input()&lt;/em&gt;, to type the new names and we store them in
&lt;em&gt;variables&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If the user has left &lt;strong&gt;both&lt;/strong&gt; fields blank, it will print "&lt;em&gt;You must write something!&lt;/em&gt;" otherwise we will access the dictionary, its foreign key and store the new values. &lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#exit-the-program"&gt;
  &lt;/a&gt;
  Exit the program:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exit_program&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Goodbye!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;em&gt;exit()&lt;/em&gt; method of the &lt;em&gt;built-in&lt;/em&gt; &lt;strong&gt;sys&lt;/strong&gt; module to exit the program and print a message. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full code:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/RicardoRien/animal_registry"&gt;https://github.com/RicardoRien/animal_registry&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>React controlled props pattern</title>
      <author>Azeez Lukman</author>
      <pubDate>Mon, 13 Sep 2021 22:10:53 +0000</pubDate>
      <link>https://dev.to/robogeek95/react-controlled-props-pattern-3ej1</link>
      <guid>https://dev.to/robogeek95/react-controlled-props-pattern-3ej1</guid>
      <description>&lt;p&gt;State management is an important factor when developing applications that scale, that's why react existed in the first place.&lt;/p&gt;

&lt;p&gt;Normally, you would control the state of a component from within its internal state. But there are a few instances where you want to be able to override the internal state of a component and control the state from the parent component such as updating content when something happens outside the component. This is easily achieved with the controlled props pattern. For example, you have a dropdown that keeps track of its own &lt;code&gt;open&lt;/code&gt; state internally. But we want the parent component to be able to update the state of the component based on some other logic.&lt;/p&gt;

&lt;p&gt;This article walks you through a pattern to create Controlled React Components with Control Props.&lt;/p&gt;

&lt;p&gt;Controlled Components&lt;/p&gt;

&lt;p&gt;Form Elements like &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, and &lt;code&gt;select&lt;/code&gt; that takes input from the user, by default, maintain state (values) within the DOM layer. Components that delegate their state to the browser are known as uncontrolled components.&lt;br&gt;
But more often you want to be in charge of these values and probably control the presentation. This arises the need for controlled components. Controlled components instead keep that state inside of React either in the component rendering the input, or a parent component somewhere in the Virtual DOM.&lt;br&gt;
Passing in value and an onChange handler to the form element changes it from an uncontrolled component to a controlled one since you now manage the state within the react app&lt;br&gt;
React documentation covers controlled components perfectly fine, so there's no need to go over it here.&lt;/p&gt;

&lt;p&gt;Applying controlled components to manage UI state&lt;/p&gt;

&lt;p&gt;You have seen how you can delegate form element state to the browser or take charge of it within your react application. Similarly, people want to manage the internal state of our components from the parent components. We can apply the concept of controlled components, this is known as the controlled props pattern.&lt;br&gt;
The concept of controlled props is basically the same as controlled form elements in React that you’ve probably come across many times.&lt;/p&gt;

&lt;p&gt;I would be presenting the code examples in it's barebones so you get to focus on just what you need&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-uncontrolled-props-pattern"&gt;
  &lt;/a&gt;
  The uncontrolled props pattern
&lt;/h2&gt;

&lt;p&gt;The component does not need to be externally controlled and the state can be local to the component. Basically, an uncontrolled component manages its own state internally.&lt;br&gt;
To create an uncontrolled component, instantiate your component with the default state, it will begin with the value of that property and will manage its own local state over the lifetime of the component (making calls to &lt;code&gt;setState()&lt;/code&gt; in response to user interaction).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Robogeek95/embed/BaZzgoz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-controlled-props-pattern"&gt;
  &lt;/a&gt;
  The controlled props pattern
&lt;/h2&gt;

&lt;p&gt;This pattern enables you to control a component UI state from the parent component.&lt;br&gt;
This is done by handling the callback and managing the state within the parent component. The state and the method for updating the state are passed as props to the component. The component then becomes a controlled component.&lt;br&gt;
To create a controlled component, you declare the state and function to update it in the parent component, these are then passed into the controlled component as props. The component is initialized with the prop state and when the state needs to be updated, the callback function prop for updating the state is triggered. After that update propagates, the containing component should end up re-rendering and sending a new state prop to the controlled component.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Robogeek95/embed/mdwEZbb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#control-state-both-ways"&gt;
  &lt;/a&gt;
  Control state both ways
&lt;/h2&gt;

&lt;p&gt;You can make your component more flexible by letting the component use its internal state and also be overridden by a parent's state!&lt;br&gt;
The component can then be either a controlled component when you declare your state value and the function to update it in the parent component then pass it to the component. Or an uncontrolled component these props are not passed in, allowing your component to manage its state internally. You just think of this as a switch mechanism between both patterns.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Robogeek95/embed/gORMJqY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You have learned a pattern that allows you to bring the concept of controlled form components to manage state UI known as controlled props pattern in contrast to the uncontrolled props pattern which is the regular way of managing state internally and how to use the two patterns together for even more superpowers.&lt;br&gt;
This pattern gives users of your component a whole lot of control over how your component interacts with the user. This is just its basic usage, there are a lot more ways to implement the control props pattern.&lt;br&gt;
Thank you for reading, I hope you learned as much as I did.&lt;/p&gt;

</description>
      <category>advanced</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building a culture of trust — with Metrics — at Slack </title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 13 Sep 2021 21:58:26 +0000</pubDate>
      <link>https://dev.to/linearb/building-a-culture-of-trust-with-metrics-at-slack-2egc</link>
      <guid>https://dev.to/linearb/building-a-culture-of-trust-with-metrics-at-slack-2egc</guid>
      <description>&lt;p&gt;Rukmini Reddy, VP of Engineering at Slack, has a truly inspiring origin story. As a student growing up in India, she hated that all of the girls in her class were forced to learn sewing. When she was offered the chance to go to her school’s computer lab instead, she never looked back.&lt;/p&gt;

&lt;p&gt;She joins the &lt;a href="https://open.spotify.com/episode/3SZul4mXqjZ0uAYpU9aksi?si=3dCuthEGQMqkmyOoQHIfLA&amp;amp;dl_branch=1"&gt;Dev Interrupted podcast&lt;/a&gt; to talk about her journey into software engineering, how she transitioned to a leadership role and what it was like to onboard at Slack during the pandemic. Her and Dan also have a lively discussion on engineering metrics and how data can provide a “shared view of reality” when it comes to making tough decisions as a leader.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3SZul4mXqjZ0uAYpU9aksi"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Her journey into software engineering&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conquering self-doubt and imposter syndrome as a woman of color&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slack’s culture and core values&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How high trust enables hypergrowth&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data as a way to provide a shared view of reality&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT&lt;/strong&gt;: An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;If you haven’t already joined the best developer discord out there, WYD?&lt;/p&gt;

&lt;p&gt;Look, I know we talk about it a lot but we love our developer discord community. With over 1600 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No salespeople allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghKqRKWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79p55zb3q4hh0drifmdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghKqRKWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79p55zb3q4hh0drifmdu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/building-a-culture-of-trust-with-metrics-at-slack/"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>techtalks</category>
      <category>podcast</category>
      <category>culture</category>
    </item>
    <item>
      <title>7 Golden Tips While Redesigning Your Website</title>
      <author>bruceaustin04</author>
      <pubDate>Mon, 13 Sep 2021 21:37:12 +0000</pubDate>
      <link>https://dev.to/bruceaustin04/7-golden-tips-while-redesigning-your-website-406e</link>
      <guid>https://dev.to/bruceaustin04/7-golden-tips-while-redesigning-your-website-406e</guid>
      <description>&lt;p&gt;The process of redesigning a website can be stressful, confusing, and time-consuming. It's understandable if you feel overwhelmed by the amount of information you need to know in order to create a new, fresh design. But, you can avoid making mistakes, and you can achieve your goals if you take the time to educate yourself and get hands-on experience. To help you get started, here are seven golden tips for redesigning your website:&lt;/p&gt;

&lt;p&gt;When you think of redesigning your website, you probably think big and bold. It's a perfect time to create a powerful and dramatic new look to your website. But the world is a little different than what you might expect.&lt;/p&gt;

&lt;p&gt;A great way to start is by considering the importance of a visitors' first impression. Sometimes we jump to our websites with the goal of looking at our work and moving forward. But there are many times when a visitor has no idea what they are looking at.So, take a few minutes to develop a strategy on how you want to present yourself to visitors.&lt;/p&gt;

&lt;p&gt;When redesigning a website, there's no better way to make sure you &lt;a href="https://psdtowpservice.com/wordpress-customization-service/"&gt;get the job done from professionals&lt;/a&gt;. If you can't find a designer or developer that's up to speed, but you want to learn, it's time to expand your network and use the power of social media to help.&lt;/p&gt;

&lt;h2&gt;1. Don't use the same layout as your old site.&lt;/h2&gt;

&lt;p&gt;Nothing makes life more difficult than an old site that looks the same as before. If you’re planning on redesigning your website, do it right. Start by identifying the look and feel of your old site and what it does.&lt;/p&gt;

&lt;p&gt;Then, create a style guide that shows the direction of your new site.We recently redesigned our website from the ground up with a new logo, new colors, and a better overall feel. This means we have updated our old site to match, so we can share the same layout as before. We also wanted to make sure our blog was still as helpful as possible.&lt;/p&gt;

&lt;p&gt;A lot of people are stuck with a layout they don't like and don't know how to change it. A lot of times it's not easy to change and, in some cases, it's not even possible because you don't have an HTML template. And, because you don't have an HTML template, you have to create that layout from scratch. And, this is where things get complicated for a lot of people.&lt;/p&gt;

&lt;p&gt;For years, site publishers have been forced to use the same layout for the same website. The reason for this is that they were able to choose from a few designs that were already perfected by designers. Now, with rapid changes in design trends, you are expected to come up with a fresh design. Since you are not able to follow the same process as earlier, design your new layout with a different approach.&lt;/p&gt;

&lt;h2&gt;2. Use a responsive design when building your site&lt;/h2&gt;

&lt;p&gt;Responsive design has become increasingly important in web design lately. To understand why, let's take a look at a site that doesn't &lt;a href="https://psdtowpservice.com/4-ways-to-convert-your-psd-sketch-into-a-responsive-website/"&gt;use responsive design&lt;/a&gt;—let's say, a newspaper or magazine site. When you visit that site, you'll notice that it has a fixed layout. That means it has a fixed width and fixed height. If you did a Google search for that site, you'll notice that your results will be returned in a fixed width, fixed height view of the site. That means that your browser will have to "remember" the width and height of the site each time you visit it. This can be very frustrating.&lt;/p&gt;

&lt;p&gt;When building a website, the possibilities are endless, but when you split your time between multiple projects, the next thing you know, you’re overworked, underpaid, and exhausted. If the idea of having multiple projects at any given time doesn’t scare you away. Responsive design has become increasingly important in web design lately.&lt;/p&gt;

&lt;p&gt;To understand why, let's take a look at a site that doesn't use responsive design—let's say, a newspaper or magazine site. When you visit that site, you'll notice that it has a fixed layout. That means it has a fixed width and fixed height.&lt;/p&gt;

&lt;p&gt;If you did a Google search for that site, you'll notice that your results will be returned in a fixed width, fixed height view of the site. That means that your browser will have to "remember" the width and height of the site each time you visit it. This can be very frustrating.&lt;/p&gt;

&lt;h2&gt;3. Be honest about your experience and skills&lt;/h2&gt;

&lt;p&gt;What your competitors have done and what features you should keep. But instead of following their example blindly, ask yourself what makes your website special. It's important to keep in mind that your visitors won't want to spend time on your website if they don't have anything to use. Make sure you provide them with something concrete and useful.&lt;/p&gt;

&lt;p&gt;There are a lot of people out there who have a website. But they all seem to be doing something different. They write, sell, offer help, or have a blog. It seems as though there is no one-size-fits-all approach to landing search traffic and &lt;a href="https://www.business2community.com/content-marketing/techniques-to-warm-up-your-cold-traffic-and-build-connections-02262097"&gt;converting visitors into customers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having a stable professional background on the internet is a great thing for your resume, but it doesn't mean it's enough. In the eyes of a potential employer, chronicling how awful your old job was might not be the best way to get the job. So can you talk about your old job without getting into the dirt?&lt;/p&gt;

&lt;p&gt;Yes you can, and it's not about lying or exaggerating. Being honest is a great thing for your resume, but it doesn't mean it's enough. In the eyes of a potential employer, chronicling how awful your old job was might not be the best way to get the job. So can you talk about your old job without getting into the dirt? Yes you can, and it's not about lying&lt;/p&gt;

&lt;h2&gt;4. Don't use pop ups&lt;/h2&gt;

&lt;p&gt;You've seen them, a popup ad or blinking banner that has suddenly appeared in the middle of your website. No matter what the popup says, they all have one thing in common: they're annoying. So, why would you want to have one of these annoying ads on your site?&lt;/p&gt;

&lt;p&gt;Well, maybe you're getting a lot of clicks from your visitors right now. Or, maybe you want to try some analytics to see where your visitors are coming from. Either way, you want to find out what your visitors do after they get to your site so that you can improve on your conversion rates.&lt;/p&gt;

&lt;p&gt;Most of us have used a pop up in the past. The idea was to get some attention for something we deemed important. Unfortunately the bad stuff was what people remembered. A pop up is a form that works quickly. No one will read it, no one will click it, and no one will even see it until it is too late.&lt;/p&gt;

&lt;h2&gt;5. Use Google Fonts to redesign your website &lt;/h2&gt;

&lt;p&gt;Google Fonts are one of the many tools that Google provides to web designers to help them design their websites with a variety of different fonts and styles. You can use Google Fonts by going to Google Fonts, creating a custom font and then uploading it to your website.&lt;/p&gt;

&lt;p&gt;While not everyone has the budget to &lt;a href="https://psdtowpservice.com/wordpress-expert/"&gt;hire a full-time designer&lt;/a&gt;, everyone can benefit from incorporating some of the typefaces Google offers into their website. Google Fonts is a free library of fonts that are available to download by anyone. These fonts are easily added to a website's HTML code by adding them directly to the &amp;lt;head&amp;gt; section.&lt;/p&gt;

&lt;p&gt;The possibilities for typeface combinations are endless, and you can see some of the results below.Google Fonts are a great way to make your website more beautiful and unique. You can change the colors, sizes, and the styles of fonts, and you don't have to worry about the compatibility issues with older browsers.&lt;/p&gt;

&lt;h2&gt;6. Keep your website updated&lt;/h2&gt;

&lt;p&gt;Make sure your website is updated and your subscribers are always up to date. Make sure you read your emails and respond to them immediately. Don't let your subscribers have to keep contacting you for answers. &lt;/p&gt;

&lt;p&gt;Always try to keep your subscribers up to date on the latest news, events, and so on. If you're interested in finding out more about anything, your subscribers will be interested in it too. When you decide to redesign a website, you may be fairly confident in your choice, but have you considered all the things you can do to keep your site updated?&lt;/p&gt;

&lt;h2&gt;7. Consider having a pre-launch page&lt;/h2&gt;

&lt;p&gt;There are many people out there who have a website that is well past its usefulness; and they want to redesign it so they can make it more user friendly and to &lt;a href="https://christianmarketingexperts.com/seo/"&gt;get better search engine rankings&lt;/a&gt;. Additionally, they want to create a new website that is going to serve all their future needs. The problem is they have never built a website before. So what can they do?&lt;/p&gt;

&lt;p&gt;Most website owners know that having a pre-launch page can help to get more traffic to your new design, but what about those that don't yet know your new design? You can help them out by "pre-launching" your new design.&lt;/p&gt;

&lt;p&gt;What this means is publishing a page on your website that will look exactly the same as your new design, but will serve as a placeholder when visitors to your website land on it. That way, when you do publish your new design, visitors will be able to immediately see your new design.&lt;/p&gt;

</description>
      <category>website</category>
      <category>design</category>
    </item>
    <item>
      <title>Best Practices for React Developers in 2021</title>
      <author>Morgan</author>
      <pubDate>Mon, 13 Sep 2021 20:39:45 +0000</pubDate>
      <link>https://dev.to/grapecity/best-practices-for-react-developers-in-2021-42a</link>
      <guid>https://dev.to/grapecity/best-practices-for-react-developers-in-2021-42a</guid>
      <description>&lt;p&gt;It may be hard to believe, but this year React turned eight years old. In the technology landscape, especially on client-side web development, this is quite remarkable. How can a simple library for building UIs be that old and still be this relevant?&lt;/p&gt;

&lt;p&gt;The reason is, React not only revolutionized the building of UIs, but it also made functional paradigms for building UIs popular. And even then, React did not stop there. They continued to push innovative concepts forward without breaking the existing codes. As a result, React is stabler, leaner, and faster than ever. &lt;/p&gt;

&lt;p&gt;But, the downside of React's ever-evolving nature is that best practices change over time. To harvest some of the newest performance benefits, one needs to carefully study the new additions. And figuring that out is not always easy, sometimes it's not straightforward at all.&lt;/p&gt;

&lt;p&gt;In this article, we will take a look at the best practices that apply to React in 2021. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conventions"&gt;
  &lt;/a&gt;
  Conventions
&lt;/h4&gt;

&lt;p&gt;To structure your work with React, it makes sense to follow a few conventions. Some conventions are even required for the tooling to work smoothly. For example, if you name your components using camelCase, then the following would not work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myComponent = () =&amp;gt; &amp;lt;div&amp;gt;Hello World!&amp;lt;/div&amp;gt;;

ReactDOM.render(&amp;lt;myComponent /&amp;gt;, document.querySelector('#app'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because the standard JSX transformer from Babel (or TypeScript) uses the naming convention to decide whether to pass a string or an identifier to React.&lt;/p&gt;

&lt;p&gt;As a result, the transpiled code would look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myComponent = () =&amp;gt; React.createElement("div", null, "Hello World!");

ReactDOM.render(React.createElement("myComponent", null), document.querySelector('#app'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not what we want. Instead, we can use PascalCase. In this case, the JSX transformer will detect the usage of a custom component and the required reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = () =&amp;gt; &amp;lt;div&amp;gt;Hello World!&amp;lt;/div&amp;gt;;

ReactDOM.render(&amp;lt;MyComponent /&amp;gt;, document.querySelector('#app'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, everything is fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.render(React.createElement(MyComponent, null), document.querySelector('#app'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While other conventions are less strict, they should be still followed. For instance, it makes sense to use quoted string attributes instead of JSX expressions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// avoid
&amp;lt;input type={'text'} /&amp;gt;

// better
&amp;lt;input type="text" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Likewise, it makes sense to keep the attribute quote style consistent. Most guides will propagate using single-quoted strings in JS expressions, and double-quoted strings for these React props. In the end, it doesn’t matter as long as its usage within the codebase is consistent. &lt;/p&gt;

&lt;p&gt;Speaking of conventions and props, these should also follow the standard JS naming convention of using camelCase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// avoid
const MyComponent = ({ is_valid, Value }) =&amp;gt; {
  // ...
  return null;
};

// better
const MyComponent = ({ isValid, value }) =&amp;gt; {
  // ...
  return null;
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, be sure not to misuse the names of the built-in HTML component props (for example, style or className). If using these props, forward them to the respective in-built component. Also, keep them at the original type (for example, for style a CSS style object and for className a string).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// avoid
const MyComponent = ({ style, cssStyle }) =&amp;gt; {
  if (style === 'dark') {
    // ...
  }

  // ...
  return &amp;lt;div style={cssStyle}&amp;gt;...&amp;lt;/div&amp;gt;;
};

// better
const MyComponent = ({ kind, style }) =&amp;gt; {
  if (kind === 'dark') {
    // ...
  }

  // ...
  return &amp;lt;div style={style}&amp;gt;...&amp;lt;/div&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the intention of the props much clearer and establishes a consistency level that is critical for efficient usage of larger component collections.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#component-separation"&gt;
  &lt;/a&gt;
  Component Separation
&lt;/h4&gt;

&lt;p&gt;One of React's biggest advantages is its ability to easily test and reason about components. However, this is only possible if a component is small and dedicated enough to support that. &lt;/p&gt;

&lt;p&gt;Back when React first started gaining popularity, they introduced the concept of a controller and a view component to efficiently structure larger components. Even though today we have dedicated state containers and hooks, it still makes sense to structure and categorize components in some way.&lt;/p&gt;

&lt;p&gt;Let's consider the simple example of loading some data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = () =&amp;gt; {
  const [data, setData] = React.useState();

  React.useEffect(() =&amp;gt; {
    let active = true;

    fetch('...')
      .then(res =&amp;gt; res.json())
      .then(data =&amp;gt; active &amp;amp;&amp;amp; setData(data))
      .catch(err =&amp;gt; active &amp;amp;&amp;amp; setData(err));


    return () =&amp;gt; {
      active = false;
    };
  }, []);

  return (
    data === undefined ?
      &amp;lt;div&amp;gt;Loading ...&amp;lt;/div&amp;gt; :
      data instanceof Error ?
        &amp;lt;div&amp;gt;Error!&amp;lt;/div&amp;gt; :
        &amp;lt;div&amp;gt;Loaded! Do something with data...&amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, a componentless action would be better suited here. But the point is that the written component has to both gather the data and display it.&lt;/p&gt;

&lt;p&gt;A cleaner model would imply a separation that could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = ({ error, loading, data }) =&amp;gt; {
  return (
    loading ?
      &amp;lt;div&amp;gt;Loading ...&amp;lt;/div&amp;gt; :
      error ?
        &amp;lt;div&amp;gt;Error!&amp;lt;/div&amp;gt; :
        &amp;lt;div&amp;gt;Loaded! Do something with data...&amp;lt;/div&amp;gt;
  );
};

const MyLoader = () =&amp;gt; {
  const [data, setData] = React.useState();

  React.useEffect(() =&amp;gt; {
    let active = true;

    fetch('...')
      .then(res =&amp;gt; res.json())
      .then(data =&amp;gt; active &amp;amp;&amp;amp; setData(data))
      .catch(err =&amp;gt; active &amp;amp;&amp;amp; setData(err));

    return () =&amp;gt; {
      active = false;
    };
  }, []);

  const isError = data instanceof Error;

  return (
    &amp;lt;MyComponent
      error={isError ? data : undefined}
      loading={data === undefined}
      data={!isError ? data : undefined} /&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To further improve it, the most ideal separation is extraction into a custom hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function useRemoteData() {
  const [data, setData] = React.useState();

  React.useEffect(() =&amp;gt; {
    let active = true;

    fetch('...')
      .then(res =&amp;gt; res.json())
      .then(data =&amp;gt; active &amp;amp;&amp;amp; setData(data))
      .catch(err =&amp;gt; active &amp;amp;&amp;amp; setData(err));

    return () =&amp;gt; {
      active = false;
    };
  }, []);

  const isError = data instanceof Error;

  return [data === undefined, !isError ? data : undefined, isError ? data : undefined];
}

const MyComponent = () =&amp;gt; {
  const [loading, data, error] = useRemoteData();

  return (
    loading ?
      &amp;lt;div&amp;gt;Loading ...&amp;lt;/div&amp;gt; :
      error ?
        &amp;lt;div&amp;gt;Error!&amp;lt;/div&amp;gt; :
        &amp;lt;div&amp;gt;Loaded! Do something with data...&amp;lt;/div&amp;gt;
  );
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h4&gt;

&lt;p&gt;React hooks are among the most debated technology features in the frontend space. When they were first introduced, they were considered elegant and innovative. On the flip side, there have been a growing number of critics over the years.&lt;/p&gt;

&lt;p&gt;Pros and cons aside, in general, using hooks can be a best practice depending on the scenario.&lt;/p&gt;

&lt;p&gt;Keep in mind that some hooks are there to help you with performance optimizations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;useMemo helps avoid doing expensive calculations on every re-render.&lt;/li&gt;
&lt;li&gt;useCallback produces stable handlers, similarly to useMemo, but more conveniently geared towards callbacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, let’s look at the following code without useMemo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = ({ items, region }) =&amp;gt; {
  const taxedItems = items.map(item =&amp;gt; ({
      ...item,
      tax: getTax(item, region),
  }));

  return (
      &amp;lt;&amp;gt;
        {taxedItems.map(item =&amp;gt; &amp;lt;li key={item.id}&amp;gt;
          Tax: {item.tax}
        &amp;lt;/li&amp;gt;)}
      &amp;lt;/&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Considering there might be a lot of items in that array, and that the getTax operation is quite expensive (no pun intended), you’d have quite a bad re-rendering time, assuming minimal items and region change.&lt;/p&gt;

&lt;p&gt;Therefore, the code would benefit a lot from useMemo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = ({ items, region }) =&amp;gt; {
  const taxedItems = React.useMemo(() =&amp;gt; items.map(item =&amp;gt; ({
      ...item,
      tax: getTax(item, region),
  })), [items, region]);

  return (
      &amp;lt;&amp;gt;
        {taxedItems.map(item =&amp;gt; &amp;lt;li key={item.id}&amp;gt;
          Tax: {item.tax}
        &amp;lt;/li&amp;gt;)}
      &amp;lt;/&amp;gt;
  );
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The beauty of useMemo is that it's almost invisible. As you can see, all we need to do is to wrap the computation in a function. That's it. No other changes required.&lt;/p&gt;

&lt;p&gt;A more subtle issue is the lack of useCallback. Let's have a look at some very generic code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = () =&amp;gt; {
  const save = () =&amp;gt; {
    // some computation
  };
  return &amp;lt;OtherComponent onSave={save} /&amp;gt;;
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we don't know anything about OtherComponent, but there are certain possible changes originating here, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s a pure component and will prevent re-rendering, as long as all props remain untouched.&lt;/li&gt;
&lt;li&gt;It uses the callback on either some memoization or effect hooks.&lt;/li&gt;
&lt;li&gt;It passes the callback to some component that uses one of these properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Either way, passing values as props that essentially have not changed should also result in values that have not changed. The fact that we have a function declared inside our rendering function will be problematic.&lt;/p&gt;

&lt;p&gt;An easy way out is to write the same thing using useCallback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyComponent = () =&amp;gt; {
  const save = React.useCallback(() =&amp;gt; {
    // some computation
  }, []);
  return &amp;lt;OtherComponent onSave={save} /&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the recomputed callback is taken only if one of the dependencies given in the array changed. Otherwise, the previous callback (for instance, a stable reference) is returned.&lt;/p&gt;

&lt;p&gt;Like before, there are almost no code changes required for this optimization. As a result, you should always wrap callbacks using useCallback.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h4&gt;

&lt;p&gt;Speaking of pure components, while class components had the PureComponent abstraction, a functional pure component can be introduced to React explicitly using memo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// no memoed component
const MyComponent = ({ isValid }) =&amp;gt; (
  &amp;lt;div style=\{{ color: isValid ? 'green' : 'red' }}&amp;gt;
    status
  &amp;lt;/div&amp;gt;
);

// memoed component
const MyComponent = React.memo(({ isValid }) =&amp;gt; (
  &amp;lt;div style=\{{ color: isValid ? 'green' : 'red' }}&amp;gt;
    status
  &amp;lt;/div&amp;gt;
));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://reactjs.org/docs/react-api.html"&gt;React documentation&lt;/a&gt; is quite detailed about memo. It says: “If your component renders the same result given the same props, you can wrap it in a call to React.memo for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.”&lt;/p&gt;

&lt;p&gt;Keep in mind that — like any other comparison done by React — the props are only shallowly compared. Therefore, this optimization is only applied if we are careful what to pass in. For instance, if we use useMemo and other techniques for complex props such as arrays, objects, and functions.&lt;/p&gt;

&lt;p&gt;You may have noticed that we exclusively used functional components. As a matter of fact, since the introduction of hooks, you can practically work without class components.&lt;/p&gt;

&lt;p&gt;There are only two possible reasons to still use class components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You want to have access to the more sophisticated life cycle events. For example, shouldComponentUpdate.&lt;/li&gt;
&lt;li&gt;You want to introduce error boundaries.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, even in these cases, you might just need to write one React class component to fulfill your needs. Look at this boundary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class Boundary extends React.Component {
  state = {
    error: undefined,
  };

  componentDidCatch(error) {
    this.setState({
      error,
    });
  }

  render() {
    const { error } = this.state;
    const { children, ShowError } = this.props;

    if (error) {
      return &amp;lt;ShowError error={error} /&amp;gt;;
    }

    return children;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not only will the component catch any errors which may appear in its children, but it will also display a fallback component passed in as ShowError receiving a single prop: the error.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h4&gt;

&lt;p&gt;Some operators can be used to simplify the tree construction in React. For instance, the ternary operator allows us to write code that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {currentUser ? &amp;lt;strong&amp;gt;{currentUser}&amp;lt;/strong&amp;gt; : &amp;lt;span&amp;gt;Not logged in&amp;lt;/span&amp;gt;}
&amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boolean operators such as &amp;amp;&amp;amp; and || may also be useful, but there are a few traps to watch out for. As an example, look at this code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {numUsers &amp;amp;&amp;amp; &amp;lt;i&amp;gt;There are {numUsers} users logged in.&amp;lt;/i&amp;gt;}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming that numUsers is always a number between 0 and the total number of users, we'd end up with the expected output if numUsers is positive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;i&amp;gt;There are 5 users logged in.&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, for the edge case of zero users, we'd get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  0
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which may not be what we wanted, so a boolean conversion or more explicit comparison could help here. In general, the following is more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {numUsers &amp;gt; 0 &amp;amp;&amp;amp; &amp;lt;i&amp;gt;There are {numUsers} users logged in.&amp;lt;/i&amp;gt;}
&amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in the zero users edge case scenario we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the ternary operator as an exclusive boolean operator avoids the issue completely. But what about a state where we don't want to render anything? We could either use false or an empty fragment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  {numUsers ? &amp;lt;i&amp;gt;There are {numUsers} users logged in.&amp;lt;/i&amp;gt; : &amp;lt;&amp;gt;&amp;lt;/&amp;gt;}
&amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The empty fragment has the advantage of giving us the ability to just add content later. However, for users less familiar with React, it could look a bit strange.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;In this article, we went over some of the best practices that make your React codebase easier to work with. By switching over from class components to functional components, you can dive more into hooks. This will provide the ability to automatically introduce a great separation of concerns, where the behavioral aspects are all done in functions and rendering is defined within components.&lt;/p&gt;

&lt;p&gt;By following a set of useful conventions, together with some techniques such as the use of the right operators, hooks, and separation of concerns, you should end up with a clean codebase that can be maintained and extended quite easily.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>Decouple your DAGs with an event-driven architecture on AWS</title>
      <author>Tom Milner</author>
      <pubDate>Mon, 13 Sep 2021 20:08:39 +0000</pubDate>
      <link>https://dev.to/aws-builders/decouple-your-dags-with-an-event-driven-architecture-on-aws-bk</link>
      <guid>https://dev.to/aws-builders/decouple-your-dags-with-an-event-driven-architecture-on-aws-bk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Applying domain-driven design and an event-driven architecture to the orchestration of our services has given our teams some very practical benefits in their day-to-day work on development and support. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;Up until recently, we ran our main scoring job in one big DAG running in Airflow. This DAG calls services developed and maintained by at least 3 separate teams. With this setup, we were tightly coupling our systems, our processes (on-call, support) and our development and technology choices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eI_cboKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds0z3wyluo28u83p0tp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eI_cboKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds0z3wyluo28u83p0tp6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In practice, here are a couple of real world problems we were running into:&lt;/p&gt;

&lt;p&gt;1) The upstream team had several variations of their steps within the DAG. Each variation needed to have our teams steps copied and maintained in separate DAGs. Decoupling allows us to keep all our steps in a single DAG and to know where exactly our services are being orchestrated from.&lt;br&gt;
2) The decision to use Airflow was made by the upstream team as it made sense for their skills and technologies. Decoupling will also allow us to use a technology that may be better suited to our teams skills and technologies. For example, we could move to Step Functions if we wanted. We will not be bound to another team or domains technology choices.&lt;br&gt;
3) In addition to being on a mailing list for all alerts from the DAG, having to troubleshoot any failure may involve going through the larger DAG. While this may seem minor, situations like these can take a toll on a developer's productivity. Having our own separate DAG allows us to focus on our own services.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#domain-driven-design"&gt;
  &lt;/a&gt;
  Domain Driven Design
&lt;/h2&gt;

&lt;p&gt;The first step was to identify the different domains represented within the larger DAG. From the outside, these may seem simple. The core services can be easy to identify but the boundaries are harder to identify. Where does one domain end and another begin? Our criteria for each domain was resolved around which team supported the service called. In addition, it was agreed the upstream domain was responsible for publishing an event when a material step in the DAG had completed. The downstream domain was responsible to consume that event. Using these guidelines, we were able to split the DAG out into 3 separate domains.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkuUKRPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76e2s6gtmh7xlypd6xs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkuUKRPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76e2s6gtmh7xlypd6xs4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication-between-domains"&gt;
  &lt;/a&gt;
  Communication between domains
&lt;/h2&gt;

&lt;p&gt;We knew we needed to communicate between domains. This communication would involve more than just a marker to say that an event had happened. We also needed to pass some parameters between domains. These parameters were necessary to the execution of the end-to-end flow and needed to be passed from domain to domain. &lt;/p&gt;

&lt;p&gt;The term event-driven has become ubiquitous in modern software development but what does it mean? What exactly is an event? According to AWS&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An event is a change in state, or an update, like an item being placed in a shopping cart on an e-commerce website. Events can either carry the state (the item purchased, its price, and a delivery address) or events can be identifiers (a notification that an order was shipped).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using this definition, we would able to use the event to pass information from one domain to another. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-solution"&gt;
  &lt;/a&gt;
  Technical solution
&lt;/h2&gt;

&lt;p&gt;While our Airflow clusters are hosted on-premise, we decided early on that we wanted to use AWS services to publish and subscribe to events. We have an internal goal to host our services on AWS and to use a serverless service where we can. Ultimately, the SNS Fanout to SQS pattern fitted well to our requirements. For more information on this pattern, see this post on the AWS blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/compute/enriching-event-driven-architectures-with-aws-event-fork-pipelines/"&gt;https://aws.amazon.com/blogs/compute/enriching-event-driven-architectures-with-aws-event-fork-pipelines/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern allows us to separate out the publisher and subscriber into distinct services. The upstream service publishes an SNS topic with the event details. Each downstream service owns a separate SQS queue that subscribes to that topic. A JSON document can be passed between both services to communicate any necessary parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz-3HJGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86o179nxa2ywdxa1umxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz-3HJGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86o179nxa2ywdxa1umxb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) This is the upstream Airflow DAG. Once it has passed a certain point, a JSON document is passed via API Gateway to an SNS topic. &lt;br&gt;
2) SNS immediately informs all subscribers that a new event has been received. The JSON document is passed along to all subscribers.&lt;br&gt;
3) In the downstream domain, an FIFO SQS queue is subscribed to the SNS topic. &lt;br&gt;
4) The first step in the downstream DAG polls the SQS queue on a regular interval for messages using API Gateway. If a message is on the queue, the step validates the message to see if it is properly formed. If so, it kicks off the DAG with the parameters from the JSON document and deletes the message from the queue via API Gateway.&lt;/p&gt;

&lt;p&gt;An obvious advantage of this design is that when multiple SQS queues can subscribe to the SNS topic without impacting on the upstream DAG or other subscribed SQS queues.&lt;/p&gt;

&lt;p&gt;Note: No Lambdas were harmed in the development of this application. Serverless is about more than Lambda.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cdk"&gt;
  &lt;/a&gt;
  CDK
&lt;/h2&gt;

&lt;p&gt;We used CDK to deploy our services. This construct is very similar to what we used. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://constructs.dev/packages/@aws-solutions-constructs/aws-sns-sqs/v/1.120.0?lang=python"&gt;https://constructs.dev/packages/@aws-solutions-constructs/aws-sns-sqs/v/1.120.0?lang=python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, you will need to split out the SQS queue into the downstream domains code base parameterized with the name of the SNS topic. This is still a manual step for us but we are investigating the use of AWS Systems Manager Parameter Store to store and retrieve the name of relevant topic within the CI/CD process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;Utilizing AWS services to facilitate an event-driven architecture  has been a game-changer for us. It is a relatively simple change in our case but provides several powerful benefits.&lt;/p&gt;

&lt;p&gt;To find out more about how AWS can help you decouple your applications and take advantage of event driven architectures, check out this link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/event-driven-architecture/"&gt;https://aws.amazon.com/event-driven-architecture/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To check out the individual services used, use the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;https://aws.amazon.com/sqs/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/sns/"&gt;https://aws.amazon.com/sns/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/api-gateway/"&gt;https://aws.amazon.com/api-gateway/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>eventdriven</category>
      <category>serverless</category>
    </item>
    <item>
      <title>An insight into Norway's recycling program</title>
      <author>56-magdeline</author>
      <pubDate>Mon, 13 Sep 2021 19:47:25 +0000</pubDate>
      <link>https://dev.to/56magdeline/trash-to-treasure-32oi</link>
      <guid>https://dev.to/56magdeline/trash-to-treasure-32oi</guid>
      <description>&lt;p&gt;You would have thought running out of rubbish would be a blessing rather than a curse. Yet in Norway, did you know that lack of waste is becoming a major headache for the waste management business?!! &lt;br&gt;
Since a 2009 ban on using plastic bottles and landfills, the country has invested in modern waste-to-energy incineration plants with enormous capacity for burning waste and creating heat energy which is fed to private houses and businesses and an alternative to use aluminium canes instead of plastic bottles.&lt;br&gt;
   &lt;strong&gt;Why is it so Important?????&lt;/strong&gt;&lt;br&gt;
      In addition to its negative environmental impacts, plastic bottles have an impact on human health.&lt;/p&gt;

&lt;p&gt;Micro plastics contamination is a &lt;strong&gt;stunning 93%&lt;/strong&gt; of the total world consumption. &lt;br&gt;
While Recycling plastics and promoting renewable energy also preserves the world’s natural resources, they also reduce the risk of environmental disasters or the problems associated with natural gas leaks.&lt;br&gt;&lt;br&gt;
With fuel diversification, through different power plants using different energy sources, it is possible to create reliable power supplies from burning waste to enhance energy security, ensuring there is enough to meet our demands&lt;br&gt;
&lt;strong&gt;How dangerous is Microplastic consumption???&lt;/strong&gt;&lt;br&gt;
Globally-sourced bottled waters they tested at levels two times higher than those they'd previously recorded in tap water samples. &lt;br&gt;
Micro plastics were also recently discovered in all three sides of the human placenta - mom, baby, and chorionic membrane and experts estimate that we are all ingesting roughly a credit’s card worth (5 grams) of plastic each week with effects on our health enormously. &lt;br&gt;
Beverages packaged in aluminium cans reduce micro plastics exposure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aluminium cans for Plastic Bottle Recycling…&lt;/strong&gt;&lt;br&gt;
The aluminium bottle generator Vending Machine is where user empty the &lt;br&gt;
plastic bottles for recycling. In this the user puts in bottle and gets credit points or an aluminium bottle. &lt;br&gt;
 ![&lt;a href="https://cms.qz.com/wp-content/uploads/2020/09/b1617d52-6948-4aa8-b813-7f5cd591a7dc-e1601471779847.jpg?quality=75&amp;amp;strip=all&amp;amp;w=1100&amp;amp;h=619"&gt;https://cms.qz.com/wp-content/uploads/2020/09/b1617d52-6948-4aa8-b813-7f5cd591a7dc-e1601471779847.jpg?quality=75&amp;amp;strip=all&amp;amp;w=1100&amp;amp;h=619&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;The main functions of the machine include bottle acceptance, fill detection and alerting the authorities when the machine is fill. &lt;br&gt;
Proposed system uses a monitoring technique to monitors the machine. This can help the authorities to get real time information about the machine. &lt;br&gt;
The machine fill detection is based on an IR sensor placed on the machine which could be used to detect the filled level of the machine. &lt;br&gt;
For interfacing the sensor with the server we use a Bluetooth module that enables serial port communication. If the level is greater than threshold value, a message is sent to authorities through GSM module. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Norwegian waste wasted in Sweden…&lt;/strong&gt;&lt;br&gt;
The market works like any other market, but the big difference is that we are not paying for the waste. The waste holder is actually paying to get rid of the waste.&lt;br&gt;
 Sweden is building a lot of waste incinerators, and they're now competing in the Norwegian market.&lt;/p&gt;

&lt;p&gt;![&lt;a href="https://static.dw.com/image/18783672_303.jpg"&gt;https://static.dw.com/image/18783672_303.jpg&lt;/a&gt;]&lt;br&gt;
Trucks loaded with waste drive right past the Klemetsrud plant, heading for the Swedish border. Swedish incinerator plants can offer cheaper rates because many are older than their Norwegian counterparts and debt-free. &lt;/p&gt;

&lt;p&gt;Norway forces municipalities to take their waste to the treatment plant closest to them, not the cheapest…which is okay by me, because the trash does gets recycled.&lt;br&gt;
Energy generation works by producing power without having negative environmental impacts, such as the release of greenhouse gases like carbon dioxide.&lt;br&gt;
&lt;strong&gt;And yes, Clean Energy can Reduce Global Warming…..&lt;/strong&gt;&lt;br&gt;
Humans have been using fossil fuels for over 150 years and, as their use increased, so did the release of the greenhouse gases that are produced when these fuels are burned. These greenhouse gases trap heat in the atmosphere causing the temperature of the Earth to rise. &lt;br&gt;
Thus global warming is one symptom of climate change that has seen a rise in extreme weather events, shifting wildlife habitats and populations, rising sea levels and other impacts.&lt;br&gt;
Because renewable energy sources don’t emit greenhouse gases such as carbon dioxide, they do not contribute to global warming. &lt;br&gt;
&lt;strong&gt;Can Renewable Energy Replace Fossil Fuels?&lt;/strong&gt;&lt;br&gt;
These renewable sources mean that climate change is not being advanced, while measures such as reforestation can help to alleviate the damage already done to the climate, combining to reduce global warming.&lt;br&gt;
              As mentioned above, humans have been using fossil fuels for decades, meaning that the switch to clean energy has been relatively recent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heat for 60,000 homes!!!!&lt;/strong&gt;&lt;br&gt;
Peering into a giant oven burning waste at between 850 and 1,000 degrees Celsius, we see how Oslo's waste-to-energy agency from the Klemetsrud incineration plant turns people's rubbish into heat for their homes in the capital.&lt;br&gt;
The heat from the incineration is used to heat water, and the water is sent off to the district heating system in Oslo, and also produces electricity from the steam.&lt;br&gt;
From this plant alone around 60,000 households in Oslo are provided with heat.&lt;br&gt;
The level of recycling in Norway is diving, and we are burning too much waste that could have been recycled.&lt;br&gt;
However, we need to campaign on behalf of our country’s waste management industry to keep rubbish as a means of energy. Not only is it better for business, but the terms ‘waste’ also means rubbish which should be recycled — like food, paper and plastics which is now burnt to keep the ovens going.&lt;br&gt;
 If this system is made available worldwide…mostly being applicable to drinks containers of all sizes, and available everywhere they are sold, it will make a huge difference to the plastic problem.&lt;/p&gt;

&lt;p&gt;Thankyou &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Form Handling Tutorial</title>
      <author>Abanoub George</author>
      <pubDate>Mon, 13 Sep 2021 19:41:07 +0000</pubDate>
      <link>https://dev.to/abanoub2017/form-handling-tutorial-2hel</link>
      <guid>https://dev.to/abanoub2017/form-handling-tutorial-2hel</guid>
      <description>&lt;p&gt;The Vue CLI is an awesome tool to kick-start your Vue projects. But by default — and rightly so — it comes with very little in the way of styling. Follow along and I’ll show you how to Create Form on Vue&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-set-up"&gt;
  &lt;/a&gt;
  Getting set up
&lt;/h3&gt;

&lt;p&gt;In order to show every step from start to finish, I’m going to create a new project from scratch. If you already have a project (that you set up with Vue CLI 3), you can skip this section.&lt;/p&gt;

&lt;p&gt;If you don’t already have Vue CLI version 3, &lt;a href="https://cli.vuejs.org/guide/installation.html"&gt;install it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now create the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I named my app “vue-form”, but you can name yours whatever you like&lt;/p&gt;

&lt;p&gt;Once the app is created, move into the directory and serve the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your new Vue app is available at &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrSQ2ZOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy83wzrlo8hlq3nli986.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrSQ2ZOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy83wzrlo8hlq3nli986.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-bootstrap-styles"&gt;
  &lt;/a&gt;
  Adding Bootstrap styles
&lt;/h3&gt;

&lt;p&gt;I’m going to add a Bootstrap component to the app&lt;br&gt;
Still inside the &lt;code&gt;vue-form&lt;/code&gt; directory, install Bootstrap and its &lt;a href="https://getbootstrap.com/docs/4.0/getting-started/javascript/#dependencies"&gt;dependencies&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt; &lt;span class="nx"&gt;jquery&lt;/span&gt; &lt;span class="nx"&gt;popper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: If you’re not going to use Bootstrap’s JavaScript, and only going to use its styles, don’t worry about installing &lt;strong&gt;jQuery&lt;/strong&gt; or &lt;strong&gt;Popper.js.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, import it into the main script by adding these lines to the top of &lt;code&gt;vue-form/src/main.js:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap/dist/css/bootstrap.min.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Again, if you only want the styles, and not the JavaScript functionality, just leave off the first line and only include the CSS.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clear-the-project"&gt;
  &lt;/a&gt;
  Clear the Project
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;remove the &lt;code&gt;src/components/HelloWorld.vue&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6NvlDOqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlc2kj72ze3fymboh0g8.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;remove all code in &lt;code&gt;src/App.vue&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfoNHu7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwjluc9y4knymhwrfv6v.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#add-html-form-using-bootstrap-form"&gt;
  &lt;/a&gt;
  Add Html Form using Bootstrap Form
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--igzQxpKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mte41sjnriaukaq7ku85.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--igzQxpKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mte41sjnriaukaq7ku85.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The form will be like &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WzLNUZCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dmbd7x72s85e28qrxri.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WzLNUZCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dmbd7x72s85e28qrxri.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#store-the-data"&gt;
  &lt;/a&gt;
  Store the Data
&lt;/h2&gt;

&lt;p&gt;we will create the object have all data from inputs we will store &lt;br&gt;
 it in &lt;code&gt;userInfo&lt;/code&gt; Object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-will-use-raw-vmodel-endraw-to-bind-the-value-form-inputs"&gt;
  &lt;/a&gt;
  We Will Use &lt;code&gt;v-model&lt;/code&gt; to bind the value form inputs
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;code&gt;v-model&lt;/code&gt; is the two way data binding in Vue.js bind the value from inputs  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0-UDTfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/622l6fprsubr1gd206pw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0-UDTfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/622l6fprsubr1gd206pw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: we use the v-model like &lt;code&gt;v-model="userInfo.firstName"&lt;/code&gt; &lt;code&gt;userInfo.firstName&lt;/code&gt; write the userInfo as the main object and access the keys from this object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#add-function-to-get-all-data"&gt;
  &lt;/a&gt;
  Add Function to get all Data
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.add function &lt;code&gt;addUser&lt;/code&gt; in methods to get all data form the userInfo Object and console.log the data &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;add the Function &lt;code&gt;addUser&lt;/code&gt; in Form to handle the Function
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GX1tZBni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2ysvaesuz7y6zh6ccxu.PNG" alt="Alt Text"&gt;
Note : &lt;code&gt;@submit.prevent="addUser()"&lt;/code&gt; use the prevent To stop this behavior,&lt;/li&gt;
&lt;li&gt;show the data in console will be like
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbFoYvQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otvz0y4iqjzjm5bcty6a.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-show-the-data-in-browser"&gt;
  &lt;/a&gt;
  lets show the data in Browser
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;add &lt;code&gt;showUserInfo&lt;/code&gt; as Boolean value in data to show the user information if user click in submit , by default will be &lt;code&gt;false&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;showUserInfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;add Html Code 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZ2dFlwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj0qgkhau8hke2vg0q2m.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;to switch the value of Boolean value from False to true to show the data
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showUserInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#finall-the-form-and-user-information-will-be-like"&gt;
  &lt;/a&gt;
  Finall the Form and User Information will be like
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLtDdKeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n68whetm986js3p3brvf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLtDdKeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n68whetm986js3p3brvf.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-can-find-the-code-in-github"&gt;
  &lt;/a&gt;
  you can find the Code in &lt;a href="https://github.com/abanoub2017/vue-form"&gt;Github&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;And that’s it! i hope you enjoyed&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>bootstrap</category>
    </item>
  </channel>
</rss>
