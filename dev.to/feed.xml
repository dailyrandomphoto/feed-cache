<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The 5 Best Addons for Building Accessible React Components in Storybook</title>
      <author>Kathryn Grayson Nanz</author>
      <pubDate>Fri, 01 Oct 2021 20:56:52 +0000</pubDate>
      <link>https://dev.to/kathryngrayson/the-5-best-addons-for-building-accessible-components-in-storybook-210l</link>
      <guid>https://dev.to/kathryngrayson/the-5-best-addons-for-building-accessible-components-in-storybook-210l</guid>
      <description>&lt;p&gt;If you've ever created a component library (or even thought about creating your own), you already know that one of the biggest considerations is accessibility. For those devs who haven't specialized in accessible development and may only know the basics – or not even that! – building accessible components from scratch is a daunting prospect. &lt;/p&gt;

&lt;p&gt;This is one of those benefits of using a pre-made component library – not having to worry about doing this yourself, knowing that someone else has put in the time and research to guarantee an accessible experience for your users. There are lots of great, existing libraries out there if that's the path you want to take (&lt;a href="https://www.telerik.com/kendo-react-ui/"&gt;KendoReact&lt;/a&gt; being one of my favorites), but there are also lots of valid reasons why an out-of-the-box library wouldn't work and you'll need to create your own. &lt;/p&gt;

&lt;p&gt;No matter the reason, if you're going to be rolling your own components, it's important to prioritize accessibility during your development process. Thankfully, &lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt; (one of the most popular component library managers) has a ton of great addons that will make accessibility a natural part of your component creation. I've created &lt;a href="https://github.com/kathryngraysonnanz/accessible-storybook"&gt;a demo&lt;/a&gt;, which you can clone and use as the base for your own, or just poke around and use to try out the addons I'm suggesting before adding them to your existing setup. That being said, let's get into it! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already know how to install Storybook and add addons, you can &lt;a href="#list"&gt;skip right to the list&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-storybook-instance"&gt;
  &lt;/a&gt;
  Creating your Storybook instance
&lt;/h2&gt;

&lt;p&gt;If you're starting completely from scratch, let's go ahead and set up your project. You can do this quickly and easily by using &lt;a href="https://create-react-app.dev/"&gt;&lt;code&gt;npx create-react-app&lt;/code&gt;&lt;/a&gt;to get your React app up and running, and then &lt;a href="https://storybook.js.org/docs/react/get-started/install"&gt;&lt;code&gt;npx sb init&lt;/code&gt;&lt;/a&gt; to install Storybook. Use &lt;code&gt;npm run storybook&lt;/code&gt; to check that everything is working as intended, and now we're ready to start customizing your setup for accessibility! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that any time you add a new addon, you'll need to rebuild your Storybook before you see the changes!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#installing-storybook-addons"&gt;
  &lt;/a&gt;
  Installing Storybook addons
&lt;/h2&gt;

&lt;p&gt;For all of the addons in this list, you'll need to take the following steps to install and add them to your Storybook instance: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the addon with &lt;code&gt;npm install [addon-name-here]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the addon to the &lt;code&gt;addons&lt;/code&gt; section of your &lt;code&gt;module.exports&lt;/code&gt; in the &lt;code&gt;main.js&lt;/code&gt; file. Storybook installs with a few addons automatically installed, so you'll just want to add your new addon to the list.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;addons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;addon-name-here&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new-addon-name-here&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make any additional adjustments specific to that addon (I've detailed these in each section, when there are specific configurations that I recommend). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stop and restart your Storybook build, in order to see the changes. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-addona11y"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; 1. Addon-a11y
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/addons/@storybook/addon-a11y"&gt;&lt;code&gt;addon-a11y&lt;/code&gt;&lt;/a&gt; is probably the most popular and beloved Storybook accessibility addon – and for good reason. It's packed with great features, and runs on the well-known Deque Systems Axe Accessibility Engine. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-this-help"&gt;
  &lt;/a&gt;
  How does this help?
&lt;/h3&gt;

&lt;p&gt;This addon does two main things: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adds a new panel to the addons drawer in Storybook, which will automatically run accessibility checks on your components as you work and alert you of violations, passes, and incomplete checks based off the WCAG accessibility guidelines. &lt;/li&gt;
&lt;li&gt;Adds a new vision adjustment tool to the header, which can simulate blurred vision as well as many different varieties of color blindness. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b2wUxObp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7touyk510huoir7yak7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2wUxObp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7touyk510huoir7yak7m.png" alt="The accessibility panel in the addons drawer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jN1T0BaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k174vuz26v88nhbhyr8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jN1T0BaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k174vuz26v88nhbhyr8s.png" alt="The vision adjustment tool in the menu bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-this-addon"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Configuring this addon&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The primary way to configure this addon centers around disabling or overriding the various rules that the addon uses to check your stories. This should only be done if you're 100% confident that the addon is throwing a false violation – otherwise, you're just ignoring the information you asked it to show you. If needed, however, you can disable individual rules or all checks at either the story or global level. More detailed information on these options can be found &lt;a href="https://storybook.js.org/addons/@storybook/addon-a11y"&gt;in the &lt;code&gt;addon-a11y&lt;/code&gt; docs.&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dark-mode"&gt;
  &lt;/a&gt;
  2. Dark Mode
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/addons/storybook-dark-mode"&gt;&lt;code&gt;storybook-dark-mode&lt;/code&gt;&lt;/a&gt; is an addon that allows you to easily toggle your Storybook UI (and the component preview pane) between light and dark mode. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-this-help"&gt;
  &lt;/a&gt;
  How does this help?
&lt;/h3&gt;

&lt;p&gt;You might be wondering why dark mode made the list of an accessibility article...and the answer is, lots of reasons! Dark mode is an important accessibility feature in and of itself, for folks that struggle with migraines, light sensitivity, eye strain, and similar. Beyond that, however, dark mode is often forgotten when developers are running their accessibility checks – can you guarantee that your color contrast is still good enough in dark mode, or that your focus highlight is still clearly visible? It's not enough to only be accessible in light mode! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-this-addon"&gt;
  &lt;/a&gt;
  Configuring this addon
&lt;/h3&gt;

&lt;p&gt;This is an addon that really benefits from some advanced configuration, because it's important to make sure that your Storybook environment matches your application environment as closely as possible. &lt;/p&gt;

&lt;p&gt;To customize this addon, you'll want to add the following parameters for &lt;code&gt;darkMode&lt;/code&gt; to your &lt;code&gt;preview.js&lt;/code&gt; file, as well as making sure you're importing &lt;code&gt;themes&lt;/code&gt; at the top:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;themes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@storybook/theming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;customDarkTheme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./customDarkTheme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Overrides the default dark theme&lt;/span&gt;
    &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;customDarkTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;appBg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// Overrides the default light theme&lt;/span&gt;
    &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;themes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;appBg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// Sets the theme Storybook starts with &lt;/span&gt;
    &lt;span class="na"&gt;current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// Sets the name of your dark mode class &lt;/span&gt;
        &lt;span class="na"&gt;darkClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lights-out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// Sets the name of your light mode class &lt;/span&gt;
    &lt;span class="na"&gt;lightClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lights-on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// Applies the dark / light mode classes to your preview iFrame  &lt;/span&gt;
    &lt;span class="na"&gt;stylePreview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot of adjustments we made here, so let's take them in order: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating a custom theme&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The Storybook default dark mode will put your components over a pure black &lt;code&gt;#000&lt;/code&gt; background, but more often, dark modes actually use a dark grey like &lt;code&gt;#121212&lt;/code&gt; . Since we want to make sure we're creating components in the same environment they'll be used, that means we need to create a custom theme in order to adjust this background value. Good news, this is super easy to do! &lt;/p&gt;

&lt;p&gt;You can create files for your custom themes in the &lt;code&gt;.storybook&lt;/code&gt; folder. The &lt;a href="https://storybook.js.org/docs/react/configure/theming"&gt;Storybook docs&lt;/a&gt; have a great rundown on all the details for theming, but for this we're only interested in changing the content background. To do so, you'll just create a custom dark theme which uses the Storybook dark theme as a base, but overwrites the &lt;code&gt;appContentBg&lt;/code&gt; value.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@storybook/theming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;appContentBg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#121212&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Defining the dark mode with &lt;code&gt;dark: { ...customDarkTheme, appBg: 'black' }&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now that we have our custom theme, we'll import that into &lt;code&gt;preview.js&lt;/code&gt; and use it when setting the &lt;code&gt;dark&lt;/code&gt; parameter in the &lt;code&gt;darkMode&lt;/code&gt; addon configuration. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Defining the light mode with &lt;code&gt;light: { ...themes.normal, appBg: 'white' }&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this case, we don't want to make any changes to the light mode theme, but if you wanted to you could also create a custom theme and use it here in place of &lt;code&gt;themes.normal&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting the default theme with &lt;code&gt;current: 'light'&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This line of code tells Storybook whether to start in light or dark mode. It's a little thing, but if you're working on your dark mode CSS, you'll quickly tire of toggling the mode in the header over and over. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting the class names for your dark and light mode with &lt;code&gt;darkClass&lt;/code&gt; and &lt;code&gt;lightClass&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;These are what allow you to match Storybook's CSS to the CSS in your application by changing the names of the dark and light mode classes that get applied to the Storybook UI. If your app uses a dark mode class called &lt;code&gt;night&lt;/code&gt;, you'll want to change that here to make sure that Storybook is using the same class name – that way, you can easily write and test CSS that will work in both places. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Copying the class name to the preview iFrame with &lt;code&gt;sylePreview&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This final step is small, but important! Setting &lt;code&gt;stylePreview&lt;/code&gt; to true tells Storybook to also apply that dark / light mode class name to the component preview window, as well as the main application body. If you don't do this, then you won't be able to use the dark or light mode class names in your component styles, since the components are rendered inside an iFrame and the application level Storybook styles won't cascade naturally. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-time"&gt;
  &lt;/a&gt;
  Example time!
&lt;/h3&gt;

&lt;p&gt;You can see in the code below that the dark mode class &lt;code&gt;lights-out&lt;/code&gt; is being applied to the &lt;code&gt;html&lt;/code&gt; element in my preview iFrame, thanks to the addon configurations listed above. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDujlGqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rblxqsfydi21lpws2pjp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDujlGqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rblxqsfydi21lpws2pjp.png" alt="Snippet of HTML in Chrome DevTools inspect element tool, showing the 'lights-out' class applied at the iFrame  raw `&amp;lt;html&amp;gt;` endraw  level"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, I can write CSS like:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lights&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt; &lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And have it toggle the styles in my components automatically as I switch between dark and light mode!  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E24QQbjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vizl4jye7f39gl61zkzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E24QQbjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vizl4jye7f39gl61zkzl.png" alt="The Storybook menu bar showing dark mode activated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aaPwzYpO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yihjm33irkbv6n8ihgpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaPwzYpO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yihjm33irkbv6n8ihgpw.png" alt="The Storybook menu bar showing light mode activated"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-builtin-storybook-screen-reader"&gt;
  &lt;/a&gt;
  3. Built-in Storybook Screen Reader
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/addons/addon-screen-reader"&gt;&lt;code&gt;addon-screen-reader&lt;/code&gt;&lt;/a&gt; is a super handy addon that adds a basic screen reader right to Storybook – no external software needed! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-this-help"&gt;
  &lt;/a&gt;
  How does this help?
&lt;/h3&gt;

&lt;p&gt;This allows you to test your basic keyboard nav and page structure super easily. While this basic version is not as full-featured as an actual screen reader would be, it's a great way to make sure you're checking the box on the basics while you're working – then, you can circle back with more in-depth testing later. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-this-addon"&gt;
  &lt;/a&gt;
  Configuring this addon
&lt;/h3&gt;

&lt;p&gt;Good news, after that last complicated one – this addon is plug-and-play! Just install like any other addon and a panel will be added to the drawer called 'Screen Reader'. You can use that to toggle the voice and text reader options. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YK-sAqXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mokjlf7c5nmd2ij6tf4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YK-sAqXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mokjlf7c5nmd2ij6tf4j.png" alt="The addons drawer open to the Screen Reader tab, showing two switches for Voice Reader and Text Reader both switched on"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-aria-live-addon"&gt;
  &lt;/a&gt;
  4. Aria Live Addon
&lt;/h2&gt;

&lt;p&gt;If you're building any kind of component that will populate new data on the screen, the &lt;a href="https://storybook.js.org/addons/aria-live-storybook-addon"&gt;&lt;code&gt;aria-live-storybook-addon&lt;/code&gt;&lt;/a&gt; is here to help you do so accessibly! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-this-help"&gt;
  &lt;/a&gt;
  How does this help?
&lt;/h3&gt;

&lt;p&gt;If you're unfamiliar with &lt;code&gt;aria-live&lt;/code&gt;, it's an attribute that you add to your HTML elements in order to let screen readers know the element is going to change dynamically, and that the screen reader should keep an eye on that element in order to tell the user about any changes. You can set two different types of &lt;code&gt;aria-live&lt;/code&gt; announcements: polite and assertive. Polite should be used for most cases, and assertive only used when you &lt;em&gt;need&lt;/em&gt; to interrupt a user's actions to announce critical changes. &lt;/p&gt;

&lt;p&gt;This addon adds a new panel to the drawer called 'Aria Live Regions', which will show you when an action triggers an &lt;code&gt;aria-live&lt;/code&gt; announcement and whether it's polite or assertive. This way, you can confirm that the announcements are triggering correctly, and with the correct type. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-this-addon"&gt;
  &lt;/a&gt;
  Configuring this addon
&lt;/h3&gt;

&lt;p&gt;This addon requires no configuration – yay! Just add the &lt;code&gt;aria-live&lt;/code&gt; attribute to the HTML element in your component and it will automatically add announcements to the panel whenever one is generated. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aINwPxxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w09ec5b2zvihukp6523w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aINwPxxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w09ec5b2zvihukp6523w.png" alt="The drawer open to the Aria Live tab, showing 2 Polite and 3 Assertive aria-live announcements recorded"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-pseudo-states-addon"&gt;
  &lt;/a&gt;
  5. Pseudo States Addon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/addons/storybook-addon-pseudo-states"&gt;&lt;code&gt;storybook-addon-psuedo-states&lt;/code&gt;&lt;/a&gt; allows you to quickly toggle through all possible element pseudo states from the Storybook menu bar. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-this-help"&gt;
  &lt;/a&gt;
  How does this help?
&lt;/h3&gt;

&lt;p&gt;This addon basically duplicates the functionality of the "Toggle Element State" tool from your Dev Tools, but without you ever having to leave Storybook. Pseudo states are incredibly important for accessible development – especially the &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;focus-within&lt;/code&gt; states. Any users who use a keyboard as their primary way of navigation will need a clearly visible focus in order to find their way around, so being able to easily design, develop, and test these easily within Storybook is a huge advantage.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-this-addon"&gt;
  &lt;/a&gt;
  Configuring this addon
&lt;/h3&gt;

&lt;p&gt;With this addon, I highly recommend taking advantage of one useful configuration option: the ability to set your Storybook components to automatically set certain pseudo states on load. You can do this by adding a new set of parameters to your component's &lt;code&gt;stories.jsx&lt;/code&gt; file, where you export your story variations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Primary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="nx"&gt;Primary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;Primary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;pseudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just add that &lt;code&gt;pseudo&lt;/code&gt; section to the parameters for your story variant, and set any pseudo states you want active on load to &lt;code&gt;true&lt;/code&gt; . You'll still be able to toggle the pseudo states on and off from the menu bar, but now they'll start with whatever you listed automatically enabled. This is especially nice for when you're working on the CSS for a specific pseudo state, or if you want to test various pseudo states without enabling them manually every time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHkyXOFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yn007w2ss4ijddc7d7b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHkyXOFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yn007w2ss4ijddc7d7b.png" alt="The Storybook menu bar with the Focus States dropdown menu expanded and the  raw `:focus` endraw  option selected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ready-to-get-to-work"&gt;
  &lt;/a&gt;
  Ready to get to work?
&lt;/h2&gt;

&lt;p&gt;There you have it: my list of the top 5 accessibility addons for Storybook. With all of these installed, you'll never have to go out of your way to write or test accessible components again – so no more excuses! Are there any Storybook addons you use that I should add to my list? Do you have any questions about configuration or installation? Let me know in the comments below, and thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to create a zoom transition animation effect using React &amp; Framer Motion?</title>
      <author>Parmeet Singh Asija</author>
      <pubDate>Fri, 01 Oct 2021 20:49:47 +0000</pubDate>
      <link>https://dev.to/parmeetasija/how-to-create-a-zoom-transition-animation-effect-using-react-framer-motion-4ld8</link>
      <guid>https://dev.to/parmeetasija/how-to-create-a-zoom-transition-animation-effect-using-react-framer-motion-4ld8</guid>
      <description>&lt;p&gt;Interruption in the user's experience while navigating between pages can often lead to them going off the website. We could improve on that by adding page transitions in our web application which could lead to an uninterrupted experience for the user.&lt;/p&gt;

&lt;p&gt;This article aims to explain, how we could create one such page transition animation for a gallery web app using React &amp;amp; Framer Motion. So let's get started with it then! 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-initialisation"&gt;
  &lt;/a&gt;
  Project Initialisation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app gallery
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install Dependencies
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/framer-motion"&gt;Framer Motion&lt;/a&gt; for transition animation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/styled-components"&gt;Styled Components&lt;/a&gt; for styling needs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/polished"&gt;Polished&lt;/a&gt; for style helper functions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/react-use"&gt;React Use&lt;/a&gt; for utility hooks
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add framer-motion styled-components polished react-use
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#images-data-structure"&gt;
  &lt;/a&gt;
  Images Data Structure
&lt;/h3&gt;

&lt;p&gt;All the images are stored in an array of the following data structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;variant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;creator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;avatar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url_string&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#app-component"&gt;
  &lt;/a&gt;
  App Component
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ImageGrid&lt;/code&gt; component is called inside App component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// path:src/App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// External&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;motion&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;framer-motion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Components&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ImageGrid&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/image-grid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Styles&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles/globalStyles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #f8ebe2;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// index of the image being shown&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedImage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AppStyles&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Explore 🇮🇳&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ImageGrid&lt;/span&gt;
          &lt;span class="na"&gt;selectedImage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedImage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;setSelectedImage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setSelectedImage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AppStyles&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#image-grid-component"&gt;
  &lt;/a&gt;
  Image Grid Component
&lt;/h3&gt;

&lt;p&gt;This page shows all the images in a &lt;a href="https://www.sitepoint.com/understanding-masonry-layout/"&gt;masonry grid layout&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// path:src/components/image-grid/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// External&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AnimateSharedLayout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;framer-motion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLockBodyScroll&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-use&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Components&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SinglePicture&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./single-picture&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Styles&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Grid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Data&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ImageGrid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;selectedImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedImage&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// helps in preventing body from scrolling when an image page is being shown&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isScrollLocked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setScrollLocked&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useLockBodyScroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isScrollLocked&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedImage&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setScrollLocked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setScrollLocked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedImage&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AnimateSharedLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SinglePicture&lt;/span&gt;
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;isSelected&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedImage&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;setSelectedImage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setSelectedImage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AnimateSharedLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ImageGrid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#single-picture"&gt;
  &lt;/a&gt;
  Single Picture
&lt;/h3&gt;

&lt;p&gt;This page shows a single image with some image metadata.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// path: src/components/image-grid/single-picture.jsx&lt;/span&gt;

&lt;span class="c1"&gt;// Styles&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../styles/globalStyles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SinglePictureContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Back&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;InfoCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;PhotographerName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Assets&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CloseIcon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../images/CustomIcons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// animation config and variants&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;spring&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;stiffness&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;damping&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backVariants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cardVariants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-50%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-50%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SinglePicture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;isSelected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setSelectedImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goBack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setSelectedImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SinglePictureContainer&lt;/span&gt;
      &lt;span class="na"&gt;isSelected&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isSelected&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;layoutId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`card-container--index-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isSelected&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Back&lt;/span&gt;
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;goBack&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"initial"&lt;/span&gt;
          &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"animate"&lt;/span&gt;
          &lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"initial"&lt;/span&gt;
          &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;backVariants&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CloseIcon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Back&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
        &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setSelectedImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;isExpanded&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isSelected&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;layoutId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`card-image--index-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isSelected&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InfoCard&lt;/span&gt;
          &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"initial"&lt;/span&gt;
          &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"animate"&lt;/span&gt;
          &lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"initial"&lt;/span&gt;
          &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cardVariants&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Avatar&lt;/span&gt;
              &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;
                &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;
                  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?q=10&amp;amp;w=50`&lt;/span&gt;
                  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatarFallback&lt;/span&gt;
              &lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PhotographerName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;creator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PhotographerName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;InfoCard&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SinglePictureContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SinglePicture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;And there we have it, the gallery page transition animation is ready. The &lt;a href="https://github.com/parmeet1402/react-components/tree/main/gallery-page-transition-animation"&gt;Code&lt;/a&gt; is available on Github. Would love to hear your valuable feedback in the comments down below.&lt;/p&gt;

&lt;p&gt;See you guys 👋🏻  in the next article of this Component series!&lt;/p&gt;

&lt;p&gt;Happy coding &amp;amp; Stay safe! ✨&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/parmeetasija"&gt;Twitter&lt;/a&gt; &amp;amp; &lt;a href="https://www.instagram.com/parmeetasija/"&gt;Instagram&lt;/a&gt; for more!&lt;/p&gt;

&lt;p&gt;This article can also be read on my &lt;a href="https://www.parmeetasija.com/blog/how-to-create-a-zoom-transition-animation-effect-using-react-and-framer-motion"&gt;website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>frontend</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Connecting Heroku Postgres with NestJS Backend</title>
      <author>Ömer Berkan Çalık</author>
      <pubDate>Fri, 01 Oct 2021 19:39:23 +0000</pubDate>
      <link>https://dev.to/omercalik/connecting-heroku-postgres-with-nestjs-backend-3p1j</link>
      <guid>https://dev.to/omercalik/connecting-heroku-postgres-with-nestjs-backend-3p1j</guid>
      <description>&lt;p&gt;Hi all! 👋&lt;/p&gt;

&lt;p&gt;This is my first article on here. In this article I'll show you how you can connect a postgres database to your backend api, and how to deploy it on heroku. This is not a tutorial for NestJS so i assume that you know at least the basic.&lt;/p&gt;

&lt;p&gt;If you found this article helpful make sure you follow me on &lt;a href="https://twitter.com/omerberkancalik"&gt;Twitter&lt;/a&gt;. I am planning to share resources and tips on my twitter.&lt;/p&gt;

&lt;p&gt;First we need to install Nestjs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g @nestjs/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then go to the directory which you want to create the project and type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nest new project-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the project in your favorite code editor&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GNjvWpLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlr9y9o2fb7gagnq1mfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GNjvWpLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlr9y9o2fb7gagnq1mfc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type in below lines to terminal to generate modules,collections and services.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nest generate module users
nest generate controller users
nest generate service users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that nest will create the necessary files for us.&lt;/p&gt;

&lt;p&gt;Go to Heroku and create a new app.After you created the app go to overview tab and click configure add-ons.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Kw_YBi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjpnr1n2wzg56g7480q9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Kw_YBi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjpnr1n2wzg56g7480q9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Search for Heroku Postgres and select it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r93soNR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0u6jhpgwjeh276cmd72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r93soNR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0u6jhpgwjeh276cmd72.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you add the database click on it. You will be redirected to database dashboard. Go to setting tab and copy the URI.&lt;/p&gt;

&lt;p&gt;Create a .env file in the root directory and type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL=your_database_url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then install nestjs config dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i --save @nestjs/config
npm install --save @nestjs/typeorm typeorm pg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then go to your app.module.ts file and add the following lines. Your app.module.ts file should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ConfigModule } from '@nestjs/config';

import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { UsersModule } from './users/users.module';
import { TypeOrmModule } from '@nestjs/typeorm';

@Module({
  imports: [
    UsersModule,
    ConfigModule.forRoot(),
    TypeOrmModule.forRoot({
      url: process.env.DATABASE_URL,
      type: 'postgres',
      ssl: {
        rejectUnauthorized: false,
      },
      entities: ['dist/**/*.entity{.ts,.js}'],
      synchronize: true, // This for development
      autoLoadEntities: true,
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create a User entity and inject it to our service.&lt;br&gt;
Create a file called "user.entity.ts" in the users folder.&lt;br&gt;
It should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity('users')
export class User{
  @PrimaryGeneratedColumn()
  id?: number;

  @Column()
  username: string;

  @Column()
  password: string;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to  "users.module.ts" file and add the following line to your "@Module" decorator so it should look like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { User } from './user.entity';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Module } from '@nestjs/common';
import { UsersController } from './users.controller';
import { UsersService } from './users.service';

@Module({
  imports: [TypeOrmModule.forFeature([User])],
  controllers: [UsersController],
  providers: [UsersService],
})
export class UsersModule {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then go to "users.service.ts" file and edit it like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { User } from './user.entity';
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private usersRepository: Repository&amp;lt;User&amp;gt;,
  ) {}

  getUsers(): Promise&amp;lt;User[]&amp;gt; {
    return this.usersRepository.find();
  }

  addUser(user): Promise&amp;lt;User&amp;gt; {
    this.usersRepository.insert(user);
    return user;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally go to "users.controller.ts" file and paste the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { UsersService } from './users.service';
import { Body, Controller, Get, Post } from '@nestjs/common';

type User = {
  id?: number;
  username: string;
  password: string;
};

@Controller('users')
export class UsersController {
  constructor(private readonly userService: UsersService) {}

  @Get()
  getUsers() {
    return this.userService.getUsers();
  }

  @Post()
  addUser(@Body() user: User) {
    return this.userService.addUser(user);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created our really simple API. Now we need to make some changes for deployment.&lt;/p&gt;

&lt;p&gt;First create a "Procfile" without extensions in the root folder. And paste the below code inside it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: npm run start:prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rpz-yMgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vjupl3mmv4kxf4m27kn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpz-yMgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vjupl3mmv4kxf4m27kn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And finally go to your "main.ts" file inside the src folder and edit it like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const PORT = process.env.PORT || 5000;
  await app.listen(PORT);
}
bootstrap();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to deploy our api on Heroku! First go ahead and create a github repository and push your code to it(Dont forget to add your ".env" file to gitignore). Then go to your already created app and click deploy tab. Click GitHub and search for your repository and select it. Enable Automatic Deploys if you want it to deploy your code whenever you push to your main branch. And finally click deploy below.&lt;/p&gt;

&lt;p&gt;Now lets test our api on Insomnia.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZXVN4A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29388hwd28cu8ugz7il7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZXVN4A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29388hwd28cu8ugz7il7.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
(URL should be your own app's url!)&lt;/p&gt;

&lt;p&gt;Now that we add the user. Let's see if we can get it from database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhzcqFvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju8ijt4f2vjgj0gu7i0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhzcqFvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju8ijt4f2vjgj0gu7i0f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we successfully get our user. After that you can try to implement deleting or updating users.&lt;/p&gt;

&lt;p&gt;Thanks for the reading. I hope you found it useful. If you have any questions feel free to ask. Bye 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>postgres</category>
      <category>heroku</category>
      <category>nestjs</category>
    </item>
    <item>
      <title>How to spice up your GitHub profile (Included Resources)</title>
      <author>Basil Khan</author>
      <pubDate>Fri, 01 Oct 2021 19:35:22 +0000</pubDate>
      <link>https://dev.to/basilkhan/how-to-spice-up-your-github-profile-included-resources-l8j</link>
      <guid>https://dev.to/basilkhan/how-to-spice-up-your-github-profile-included-resources-l8j</guid>
      <description>&lt;p&gt;I recently decided to pay more attention to GitHub profile and spice things up a bit. Naturally, I wanted to share a few  resources for those looking to do the same. &lt;/p&gt;

&lt;p&gt;Here's a few ways you can make your GitHub profile look much better.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-start-with-your-profile-readme"&gt;
  &lt;/a&gt;
  Step 1: Start with your profile Readme.
&lt;/h1&gt;

&lt;p&gt;Think of this as the front page of your development portfolio on GitHub. This is what everyone sees when they first come to your profile. Now, there a lot of Readme templates out there, and if you're looking to get started, they can end up being very confusing to decide between, so a quick and easy resource you can start with is a GitHub Readme Generator. I used this one for my profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rahuldkjain.github.io/gh-profile-readme-generator/"&gt;GitHub Profile Readme Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ended up with a great looking and interactive Readme in less than a minute.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-move-on-to-the-projects"&gt;
  &lt;/a&gt;
  Step 2: Move on to the projects
&lt;/h1&gt;

&lt;p&gt;I don't know about you, but I like to keep my project Readme as visually pleasing as possible, so I try to include a logo (if I have one) and Gifs showing the project in action along with information about the project.&lt;/p&gt;

&lt;p&gt;A quick way to generate Readme for projects is to use this project Readme generator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/connietran-dev/readme-generator"&gt;GitHub Project Readme Generator&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-be-active"&gt;
  &lt;/a&gt;
  Step 3: Be Active
&lt;/h1&gt;

&lt;p&gt;Whether you have massive projects with many collaborators or just a few small projects you're working on. Get into the habit of constantly committing your work. This helps you in the long run as your profile reflects your activity with the cool looking GitHub grid and if you mess up, you can always revert your code back.&lt;/p&gt;

&lt;p&gt;Those are just a few resources I've found that changed my simple GitHub profile into a much better looking one. Hope it helps.&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>NPM: What are project dependencies?</title>
      <author>Dylan Paulus</author>
      <pubDate>Fri, 01 Oct 2021 19:19:21 +0000</pubDate>
      <link>https://dev.to/ganderzz/npm-what-are-project-dependencies-491i</link>
      <guid>https://dev.to/ganderzz/npm-what-are-project-dependencies-491i</guid>
      <description>&lt;p&gt;Code dependencies are like &lt;a href="https://www.lego.com/en-us"&gt;Lego's&lt;/a&gt;. We're able to pull in other people's code; combining and stacking different packages together to fulfill our goals. Using dependencies greatly reduces the complexity of developing software. We can take advantage of the hard work someone has already done to solve a problem so we can continue to build the projects we want. A development pipeline can have multiple kinds of code dependencies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;dependencies&lt;/li&gt;
&lt;li&gt;developer dependencies &lt;em&gt;(devDependencies)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;peer dependencies &lt;em&gt;(peerDependencies)&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In JavaScript, we have a &lt;code&gt;package.json&lt;/code&gt; file that holds metadata about our project. &lt;code&gt;package.json&lt;/code&gt; can store things like our project name, the version of our project, and any dependencies our project has. Dependencies, devDependencies, and peerDependencies are properties that can be included in a &lt;code&gt;package.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"peerDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#production-vs-development"&gt;
  &lt;/a&gt;
  Production vs. Development
&lt;/h2&gt;

&lt;p&gt;Depending on the instance where code will be used changes the type of dependency a package is. There are packages that our users will need to run our code. A user is someone not directly working in our code-base. This could mean a person interacting with an application we wrote, or a developer writing a completely separate library. In other words, this is a production environment. Alternatively, there are packages that a developer or system only needs while working in our code. For example linters, testing frameworks, build tools, etc. Packages that a user won't need, but a developer or build system will need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;Dependencies are packages our project uses in &lt;em&gt;production&lt;/em&gt;. These get included with our code and are vital for making our application run. Whenever we install a dependency the package and any of its dependencies get downloaded onto our local hard drive. The more dependencies we add, the bigger our production code becomes. This is because each new dependency gets included in the production build of our code. Evaluate adding new dependencies unless they're needed!&lt;/p&gt;

&lt;p&gt;Dependencies are installed using &lt;code&gt;npm install X&lt;/code&gt; or &lt;code&gt;yarn add X&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Examples of dependencies: React, stylized-components, jQuery&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#dev-dependencies"&gt;
  &lt;/a&gt;
  Dev Dependencies
&lt;/h2&gt;

&lt;p&gt;Packages needed in &lt;em&gt;development&lt;/em&gt;, or while developing our code, are considered dev dependencies. These are programs, libraries, and tools that assist in our development workflow. Dev dependencies also get downloaded to your local hard drive when installed, but the user will never see these dependencies. So adding a lot of dev dependencies only affects the initial &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt; completion time.&lt;/p&gt;

&lt;p&gt;Dev Dependencies are installed using &lt;code&gt;npm install --save-dev X&lt;/code&gt; or &lt;code&gt;yarn add --dev X&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Examples of Dev Dependencies: Jest, ESLint, Webpack&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#peer-dependencies"&gt;
  &lt;/a&gt;
  Peer Dependencies
&lt;/h2&gt;

&lt;p&gt;Peer dependencies are similar to dependencies except for a few key features. First, when installing a peer dependency it doesn't get added to your &lt;code&gt;node_modules/&lt;/code&gt; directory on your local hard drive. Why is that? Well, peer dependencies are dependencies that are needed in &lt;em&gt;production&lt;/em&gt;, but we expect the user of our code to provide the package. The package doesn't get included in our code. This is to reduce including multiples of the same dependency in &lt;em&gt;production&lt;/em&gt;. If every React library included a version of React as a dependency, then in &lt;em&gt;production&lt;/em&gt; our users would download React multiple times. Peer dependencies are a tool for library owners to optimize their project size.&lt;/p&gt;

&lt;p&gt;Peer Dependencies are installed using &lt;code&gt;yarn add --peer X&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Examples of Peer Dependencies: React, Bootstrap&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#end"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;I recently released a course, Creating React Libraries from Scratch, where we walk through deploying a React library from &lt;code&gt;yarn init&lt;/code&gt; to &lt;code&gt;yarn publish&lt;/code&gt;. Creating React Libraries from Scratch includes content just like this and more!&lt;/p&gt;

&lt;p&gt;To learn more click the image below!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.newline.co/courses/creating-react-libraries-from-scratch"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sv0Jt----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah66mr3n7xl5dx3uotaj.png" alt="Click here to learn more"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>npm</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building FusionHQ - All-in-one user analytics &amp; engagement platform.</title>
      <author>Sarvesh Dubey</author>
      <pubDate>Fri, 01 Oct 2021 19:06:42 +0000</pubDate>
      <link>https://dev.to/dubesar/building-fusionhq-all-in-one-user-analytics-engagement-platform-2op4</link>
      <guid>https://dev.to/dubesar/building-fusionhq-all-in-one-user-analytics-engagement-platform-2op4</guid>
      <description>&lt;p&gt;Hello All, I am Sarvesh, one of the co-founders of Fusion. We have been building Fusion for the last 5 months and really excited to share about it!!&lt;/p&gt;

&lt;p&gt;Let's answer some questions to get the vision and idea of the product clear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Fusion?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fusion is an all-in-one user behaviour analytics and engagement suite.&lt;/p&gt;

&lt;p&gt;It's built upon a lightweight no-code mixpanel-like analytics engine but we are not another analytics platform, Fusion uses it to gather users' personal &amp;amp; product usage data and share it with built-in live-chat, push-notification, and email/micro survey tools.&lt;/p&gt;

&lt;p&gt;Fusion shows how your users interact with your web-based products eg: page-views, button clicks, form submissions, etc. But apart from this, Fusion lets you run targeted engagements with a specific user or group of users in real-time over live-chat, push in-app notification &amp;amp; email/micro-surveys or you can set up to trigger these engagements automatically.&lt;/p&gt;

&lt;p&gt;These targeted users could be people who have something in common(eg: users from a specific country/marketing referral) or users who performed a particular action on the website (eg: visited pricing page but did not sign up).&lt;/p&gt;

&lt;p&gt;Fusion helps small teams in these ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No need to continuously monitor multiple SAAS tools and jump tabs, manage everything from one lightweight dashboard or directly from slack (or teams etc) instead of going back and forth between multiple windows.&lt;/li&gt;
&lt;li&gt;No-code auto-capture requires zero engineering efforts for tracking. Just copy-paste one snippet on your website and that works for analytics, chat, CRM &amp;amp; email instead of coding up 5 different trackers on your product.&lt;/li&gt;
&lt;li&gt;Run real-time targeted engagements with single-user/specific type of users or users who performed a particular action, ensuring less spam and more conversion. And again analyse how users reacted to those campaigns.&lt;/li&gt;
&lt;li&gt;Reduced SAAS bills as Fusion is one platform so you pay one base subscription instead of multiple.&lt;/li&gt;
&lt;li&gt;Teams can avoid crappy built-in plugins for connecting multiple SAAS tools or using expensive CDPs like Segment.com . Seamless user data flows between analytics, CRM, marketing stack as they are in one platform.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Where can you find Fusion?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fusion is available &lt;a href="https://fusionhq.co"&gt;here&lt;/a&gt; or the github is available &lt;a href="https://github.com/fusion-hq"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where are we on building Fusion?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have completed the Analytics Engine and currently chat service is being developed and other lots of features coming soon!!&lt;/p&gt;

&lt;p&gt;Interested in using the product? Connect &lt;a href="https://fusionhq.co"&gt;here&lt;/a&gt;. Show us your love &lt;a href="https://www.producthunt.com/posts/fusion-4"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's connect to give some more info on the product!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>analytics</category>
      <category>python</category>
      <category>opensource</category>
    </item>
    <item>
      <title>A simple 3x+1 visualiser</title>
      <author>thecashewtrader</author>
      <pubDate>Fri, 01 Oct 2021 19:02:58 +0000</pubDate>
      <link>https://dev.to/thecashewtrader/a-simple-3x-1-visualiser-mo9</link>
      <guid>https://dev.to/thecashewtrader/a-simple-3x-1-visualiser-mo9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://thecashewtrader.gitlab.io/3x-1/"&gt;https://thecashewtrader.gitlab.io/3x-1/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Source: &lt;a href="https://gitlab.com/thecashewtrader/3x-1"&gt;https://gitlab.com/thecashewtrader/3x-1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;License: GPL V3&lt;/li&gt;
&lt;li&gt;Inspired by: &lt;a href="https://odysee.com/@veritasium:f/the-simplest-math-problem-no-one-can:7"&gt;https://odysee.com/@veritasium:f/the-simplest-math-problem-no-one-can:7&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-raw-3x1-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;3x+1&lt;/code&gt;?
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;3x+1&lt;/code&gt; is a simple math problem. You start by plotting a number, say &lt;code&gt;x&lt;/code&gt;, on the graph. If &lt;code&gt;x&lt;/code&gt; is even, you plot &lt;code&gt;x/2&lt;/code&gt;, otherwise you plot &lt;code&gt;3x+1&lt;/code&gt;, stopping when &lt;code&gt;x=1&lt;/code&gt;.&lt;br&gt;
For example, the &lt;code&gt;3x+1&lt;/code&gt; array for 3 would be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[3, 10, 5, 16, 8, 4, 2, 1]&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features-of-the-visualiser"&gt;
  &lt;/a&gt;
  Features of the visualiser
&lt;/h1&gt;

&lt;p&gt;The visualiser is still in it's early stages, with a lot of glue code and styling issues. The main features for now are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate an interactive graph for any number.&lt;/li&gt;
&lt;li&gt;Zoom, pan, and generally navigate the graph&lt;/li&gt;
&lt;li&gt;Export said graph as an image&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-tools-used"&gt;
  &lt;/a&gt;
  The tools used
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Svelte - Frontend framework&lt;/li&gt;
&lt;li&gt;Vite - Bundler&lt;/li&gt;
&lt;li&gt;TailwindCSS + DaisyUI - UI library/framework&lt;/li&gt;
&lt;li&gt;Chart.js - To plot the graph&lt;/li&gt;
&lt;li&gt;Chart.js zoom plugin - To add interactivity&lt;/li&gt;
&lt;li&gt;Hammer.js - Used under the hood by Chart.js zoom plugin for gesture recognition&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>svelte</category>
      <category>chartjs</category>
      <category>datavisualisation</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Building an API using Express and MongoDB</title>
      <author>Kenneth Angelo Reyes</author>
      <pubDate>Fri, 01 Oct 2021 18:57:36 +0000</pubDate>
      <link>https://dev.to/projectkenneth/building-an-api-using-express-and-mongodb-3a5b</link>
      <guid>https://dev.to/projectkenneth/building-an-api-using-express-and-mongodb-3a5b</guid>
      <description>&lt;p&gt;In this post, we'll go through the process of creating an API built using Express and MongoDB.&lt;/p&gt;

&lt;p&gt;We'll cover the ff. steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setting up MongoDB&lt;/li&gt;
&lt;li&gt;Creating an Express application&lt;/li&gt;
&lt;li&gt;Optimizing your Express routes&lt;/li&gt;
&lt;li&gt;Handling errors&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;In this section, we'll go through creating and configuring a remote MongoDB instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-a-mongodb-instance-hosted-on-the-cloud"&gt;
  &lt;/a&gt;
  Using a MongoDB instance hosted on the cloud
&lt;/h3&gt;

&lt;p&gt;Instead of installing a local MongoDB instance, we'll use Atlas which is MongoDB's official database-as-a-service.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a MongoDB Atlas account &lt;a href="https://www.mongodb.com/cloud/atlas"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a cluster. For new accounts, you can use the &lt;strong&gt;&lt;em&gt;forever free&lt;/em&gt;&lt;/strong&gt; tier!&lt;/li&gt;
&lt;li&gt;Create the super admin user.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#managing-your-databases-using-compass"&gt;
  &lt;/a&gt;
  Managing your databases using Compass
&lt;/h3&gt;

&lt;p&gt;To better visualize our data, we'll be using the official GUI for MongoDB, Compass.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the latest &lt;strong&gt;Compass&lt;/strong&gt; version &lt;a href="https://www.mongodb.com/products/compass"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install the thing!&lt;/li&gt;
&lt;li&gt;Get the database connection string from &lt;strong&gt;Atlas&lt;/strong&gt;.

&lt;ol&gt;
&lt;li&gt;Access your &lt;strong&gt;Atlas dashboard&lt;/strong&gt;. Then, on your cluster panel, click the &lt;strong&gt;Connect&lt;/strong&gt; button. &lt;/li&gt;
&lt;li&gt;On the &lt;strong&gt;Connect&lt;/strong&gt; popup, create your super admin user.&lt;/li&gt;
&lt;li&gt;Then, for the Connection Method, choose &lt;strong&gt;Connect using MongoDB Compass&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Then, choose the latest Compass version and then copy the connection string. &lt;/li&gt;
&lt;li&gt;Replace the credentials in the connection string with your actual credentials.&lt;/li&gt;
&lt;li&gt;Keep the connection string somewhere safe so you can use it in the next steps.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Launch &lt;strong&gt;Compass&lt;/strong&gt;, key in your connection string, then, click &lt;strong&gt;Connect&lt;/strong&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAUurNMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eicd5iojved19kugsqy.PNG" alt="DB 1.2.4 Connect to Cluster"&gt; &lt;/li&gt;
&lt;li&gt;Once connected, you can now click on the &lt;strong&gt;Create Database&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Specify the database name and the first collection's name. Then, click the &lt;strong&gt;Create Database&lt;/strong&gt; button on the popup.

&lt;ol&gt;
&lt;li&gt;For this example, I created a database named &lt;code&gt;audit-log-demo&lt;/code&gt; and a collection named &lt;code&gt;user-profile&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNnbnFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2xiw7dl44vf3uu5pyfw.PNG" alt="DB 1.2.6 Create Database"&gt; &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;You should now see &lt;code&gt;audit-log-demo&lt;/code&gt; as part of the database list.&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Now, let's add test data to our database.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the &lt;code&gt;audit-log-demo&lt;/code&gt; database. You will be directed to the collection list page.&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;user-profile&lt;/code&gt; collection. You will be directed to the collection management page.&lt;/li&gt;
&lt;li&gt;Under the &lt;strong&gt;Documents&lt;/strong&gt; tab, click on the &lt;strong&gt;Add Data&lt;/strong&gt; &amp;gt; &lt;strong&gt;Insert Document&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;Insert to Collection&lt;/strong&gt; popup, paste the following properties just below the &lt;strong&gt;_id&lt;/strong&gt; property:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Tony"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Stark"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt;   
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wmi1yvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3o4n1i9m6izsx5kwn7nr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wmi1yvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3o4n1i9m6izsx5kwn7nr.PNG" alt="DB 1.2.8.4 Collection List"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-express-application"&gt;
  &lt;/a&gt;
  Creating an Express application
&lt;/h2&gt;

&lt;p&gt;In this section, let's go through the step-by-step process of creating an Express application and letting this application establish a connection to our new MongoDB instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open your favorite CLI and navigate to your desired working directory.&lt;/li&gt;
&lt;li&gt;Create a new package using &lt;code&gt;npm init&lt;/code&gt;. Follow the prompts and provide the necessary details.&lt;/li&gt;
&lt;li&gt;Install both &lt;code&gt;express&lt;/code&gt; and the &lt;code&gt;mongodb&lt;/code&gt; driver by executing &lt;code&gt;npm install mongodb express --save&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Get the database's connection string from &lt;strong&gt;Atlas&lt;/strong&gt;.

&lt;ol&gt;
&lt;li&gt;Access your &lt;strong&gt;Atlas dashboard&lt;/strong&gt;. Then, on your cluster panel, click the &lt;strong&gt;Connect&lt;/strong&gt; button. &lt;/li&gt;
&lt;li&gt;Then, for the Connection Method, choose &lt;strong&gt;Connect your application&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Then, choose the appropriate NodeJS version and then copy the connection string. &lt;/li&gt;
&lt;li&gt;Replace the credentials in the connection string with your actual credentials.&lt;/li&gt;
&lt;li&gt;Keep the connection string somewhere safe so you can use it in the next steps.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Create a new environment setting with key &lt;code&gt;ALD_CONN_STRING&lt;/code&gt; and set its value to your connection string.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#connecting-to-the-database"&gt;
  &lt;/a&gt;
  Connecting to the database
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;At the root of your working directory, create an &lt;code&gt;index.js&lt;/code&gt; file with this content:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoConnString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALD_CONN_STRING&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mongoConnString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expressApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expressPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audit-log-demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user-profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profileList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profileList&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expressPort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;expressPort&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the above code, we used the &lt;code&gt;ALD_CONN_STRING&lt;/code&gt; environment variable to retrieve the connection string. Then, we instantiated the MongoDB and Express clients. We also introduced one route (&lt;code&gt;/profiles&lt;/code&gt;) which retrieves all the documents in the &lt;code&gt;user-profile&lt;/code&gt; collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run your application by executing &lt;code&gt;node index.js&lt;/code&gt; on your CLI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, using your favorite REST client (I'm using &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;), access the &lt;code&gt;/profiles&lt;/code&gt; endpoint of your API. You should get this result:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;GUID&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Tony"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Stark"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-new-route"&gt;
  &lt;/a&gt;
  Adding a new route
&lt;/h3&gt;

&lt;p&gt;To further expand the capabilities of the API, we add a new route to get a specific profile by ID. &lt;/p&gt;

&lt;p&gt;To do this, we just need to add the following code to your &lt;code&gt;index.js&lt;/code&gt; file just before the &lt;code&gt;listen&lt;/code&gt; call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audit-log-demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user-profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h3&gt;

&lt;p&gt;You can check out the &lt;code&gt;index.js&lt;/code&gt; code at this point by clicking &lt;a href="https://github.com/projectkenneth/express-mongodb-demo/tree/Initial-State"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimizing-your-express-routes"&gt;
  &lt;/a&gt;
  Optimizing your Express routes
&lt;/h2&gt;

&lt;p&gt;At this stage, the 2 routes we created are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profiles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audit-log-demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user-profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profileList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profileList&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audit-log-demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user-profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code works, but, there's one major point of improvement in them:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In both routes, the parts that connect to the database and retrieve a reference to the collection are repeated. We should always follow the DRY (Don't Repeat Yourself) principle!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So how should we go about this? We introduce middleware to the code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-a-middleware"&gt;
  &lt;/a&gt;
  What's a middleware?
&lt;/h3&gt;

&lt;p&gt;In Express, a middleware is a function that can be executed before or after the actual request handlers.&lt;/p&gt;

&lt;p&gt;For our example, we need to define 2 middleware functions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A middleware that establishes the connection to the database and will then pass this connection instance to the request handlers.&lt;/li&gt;
&lt;li&gt;A middleware that closes the connection to the database. This middleware function will be executed after the request handlers.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#lets-add-in-the-middleware-functions"&gt;
  &lt;/a&gt;
  Let's add in the middleware functions
&lt;/h3&gt;

&lt;p&gt;Here's the code for the 2 middleware functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dbConnBeforeware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoConnString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALD_CONN_STRING&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mongoConnString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database connection established!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbDatabaseRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;audit-log-demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dbConnAfterware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database connection closed!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use them, we need to adjust the way the routes are defined to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllProfilesHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbDatabaseRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user-profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profileList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profileList&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getProfileByIdHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbDatabaseRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user-profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// For readability, we also created 2 new separate functions for the actual request handlers&lt;/span&gt;
&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profiles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbConnBeforeware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAllProfilesHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbConnAfterware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbConnBeforeware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getProfileByIdHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbConnAfterware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h3&gt;

&lt;p&gt;You can check out the &lt;code&gt;index.js&lt;/code&gt; code at this point by clicking &lt;a href="https://github.com/projectkenneth/express-mongodb-demo/blob/Introducing-Middlewares/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-errors"&gt;
  &lt;/a&gt;
  Handling errors
&lt;/h2&gt;

&lt;p&gt;Another point of improvement with the current code is error handling. &lt;/p&gt;

&lt;p&gt;If something goes wrong in the request handlers, the default Express error handler will be triggered. But, this default error handler does not close the database connection established.&lt;/p&gt;

&lt;p&gt;To fix this, we introduce our very own error handler by adding this code after the route definition section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;expressApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database connection closed!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something broke!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this custom error handler, we close the connection if any, and then log the error to the console. Lastly, we inform the API consumer that something went wrong.&lt;/p&gt;

&lt;p&gt;Now, when an error occurs, you should get this response (Postman screenshot):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eE4hPFzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gabiypa7j5nzikgigykk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eE4hPFzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gabiypa7j5nzikgigykk.PNG" alt="Error Handling Response"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h3&gt;

&lt;p&gt;You can check out the &lt;code&gt;index.js&lt;/code&gt; code at this point by clicking &lt;a href="https://github.com/projectkenneth/express-mongodb-demo/blob/Introduce-Error-Handling/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, I added a forced error to the &lt;code&gt;getProfileByIdHandler&lt;/code&gt; handler to simulate an error happening.&lt;/p&gt;

&lt;p&gt;To view the version of the code without any of the forced errors, click &lt;a href="https://github.com/projectkenneth/express-mongodb-demo/blob/master/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h2&gt;

&lt;p&gt;We've successfully created an API built on Express and MongoDB!&lt;/p&gt;

&lt;p&gt;Additionally, we've also gone through 2 rounds of code optimizations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Middleware usage&lt;/strong&gt; - for reducing code redundancy&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Custom error handling&lt;/strong&gt; - for ensuring the database connection is closed even when issues occur&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think there are still a couple of improvements on this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once your API grows, you should split the route definitions into multiple code files.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;dbConnBeforeware&lt;/code&gt; can also be made configurable so you can use it for other routes that handle data from another collection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What other improvements do you have in mind? And what do you think of this approach? Let me know your thoughts in the comments&lt;/p&gt;

&lt;p&gt;Glad that you've reached the end of this post. I hoped you learned something new from me today.&lt;/p&gt;




&lt;p&gt;Hey, you! Follow me on &lt;a href="https://twitter.com/projectkenneth"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>api</category>
      <category>express</category>
      <category>node</category>
    </item>
    <item>
      <title>UPDATED: Bootstrap 5.1.1 Navbar Multi Level and Mega Menu</title>
      <author>Simon Köhler</author>
      <pubDate>Fri, 01 Oct 2021 18:32:09 +0000</pubDate>
      <link>https://dev.to/typo3freelancer/updated-bootstrap-5-1-1-navbar-multi-level-and-mega-menu-4j1o</link>
      <guid>https://dev.to/typo3freelancer/updated-bootstrap-5-1-1-navbar-multi-level-and-mega-menu-4j1o</guid>
      <description>&lt;p&gt;Advanced Bootstrap 5 Navbar component with multi-level menu, megamenu, animated hamburger button and custom web fonts. Easy to use and NOW compatible with Bootstrap version 5.1.1!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/typo3-freelancer/embed/poEvyGj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Think on AWS as Lego Blocks</title>
      <author>Daniel Dominguez</author>
      <pubDate>Fri, 01 Oct 2021 18:31:39 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/think-on-aws-as-lego-blocks-2e1h</link>
      <guid>https://dev.to/dominguezdaniel/think-on-aws-as-lego-blocks-2e1h</guid>
      <description>&lt;p&gt;Think of Lego blocks. Very simple in appearance and functionality on their own. However, put them together in the right way, with the right pieces, and you can create something highly complex and amazing.&lt;/p&gt;

&lt;p&gt;The basic Lego unit is the 1x1. It’s the smallest block, connects to any other piece and hurts a lot when you step on it with bare feet.&lt;/p&gt;

&lt;p&gt;The building blocks of AWS are Storage, Compute, Networking, Security, Monitoring, Media Processing, Analytics, and AI.&lt;/p&gt;

&lt;p&gt;Once you’ve mastered creating simple buildings and boxes on top of your baseplate using your starter Lego set, you can graduate to a full-blown Lego kit with triangles, curved pieces and half moons to create more sophisticated things like castles, cars and bridges. In a similar fashion, after you get the hang of the AWS basics, you can add more specialized AWS services like DynamoDB, ElastiCache, Systems Manager, EFS, and Lambda.&lt;/p&gt;

&lt;p&gt;No matter how sophisticated you get, everything is still rooted in those basic 1x1 building blocks.&lt;/p&gt;

&lt;p&gt;But legos aren’t just about size or shape, they’re also about color. You can have the same Lego in a variety of different colors just like AWS services are variations of others. For example, Amazon Elastic Container Service (ECS), Amazon Elastic Container Service for Kubernetes (EKS), and Fargate serve the same purpose but just do it in a slightly different way whereas Elastic Beanstalk, OpsWorks, and CloudFormation all allow you to manage your infrastructure in an automated way but with different levels of control.&lt;/p&gt;

&lt;p&gt;What you build with legos or AWS, and how you build it, is limited only by your imagination. But beware, just like creating a tower of legos, unless you build a sound structure, your building will fall over. A tall skinny tower without an intelligently-designed structure will eventually collapse, and the same holds true in AWS with experience, expertise and continued education, you can create a structure that is built strong enough to support your application and users.&lt;/p&gt;

&lt;p&gt;AWS is a compilation of many different Lego pieces that all have their own simple functions. Although on their own they may lack much functionality; combined together with other services, they can construct a highly complex and practical applications. &lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
&lt;em&gt;And you? What are you building on?&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lego</category>
      <category>applications</category>
    </item>
    <item>
      <title>Making Kubernetes Operations Easy with kubectl Plugins</title>
      <author>Martin Heinz</author>
      <pubDate>Fri, 01 Oct 2021 18:25:29 +0000</pubDate>
      <link>https://dev.to/martinheinz/making-kubernetes-operations-easy-with-kubectl-plugins-3iok</link>
      <guid>https://dev.to/martinheinz/making-kubernetes-operations-easy-with-kubectl-plugins-3iok</guid>
      <description>&lt;p&gt;&lt;code&gt;kubectl&lt;/code&gt; is powerful tool that allows you to perform literally any and all Kubernetes-related tasks. Regardless of whether you need to just list pods, debug node, manage RBAC or whatever else, &lt;code&gt;kubectl&lt;/code&gt; can do it. Some of these common tasks however, can be quite clunky or might include many steps that might take considerable time to perform. In other cases the output of &lt;code&gt;kubectl&lt;/code&gt; might not be exactly readable or might include lot of noise, which might be very annoying, especially if you're for example trying to debug something, in which case time is of essence. So, why waste time on repetitive, common, time consuming tasks when we can avoid it. Asking how? Well, let me introduce you to &lt;code&gt;kubectl&lt;/code&gt; plugins!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-plugins"&gt;
  &lt;/a&gt;
  What Plugins?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;kubectl&lt;/code&gt; ships with limited set of core features which don't cover all the tasks that Kubernetes admins or users might need to perform. Therefore, to resolve this limitation, we're able to extend &lt;code&gt;kubectl&lt;/code&gt; with plugins, which function as subcommands of &lt;code&gt;kubectl&lt;/code&gt; itself. All of these plugins are standalone executables that can be written in any language, but considering that we're talking about Kubernetes tooling and ecosystem, most of them are obviously written in Go.&lt;/p&gt;

&lt;p&gt;Now you might be thinking - &lt;em&gt;"Where do I find all these plugins? And why not just use the standalone binaries without &lt;code&gt;kubectl&lt;/code&gt;?"&lt;/em&gt; - Answer to both of these question is &lt;code&gt;krew&lt;/code&gt; - a package manager for &lt;code&gt;kubectl&lt;/code&gt; plugins as well as Kubernetes SIG that aims at solving the package management issue for &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;krew&lt;/code&gt; being a package manager, helps with discovering, installing and updating all of our plugins, but to use it, we first need to install it, because well... &lt;code&gt;krew&lt;/code&gt; itself is also a plugin. You can navigate to installation guide/script  &lt;a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/"&gt;here&lt;/a&gt; to install it using your preferred method.&lt;/p&gt;

&lt;p&gt;Now that we have &lt;code&gt;krew&lt;/code&gt;, let's find and install some plugins!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew search
NAME                            DESCRIPTION                                         INSTALLED
access-matrix                   Show an RBAC access matrix &lt;span class="k"&gt;for &lt;/span&gt;server resources     no
advise-psp                      Suggests PodSecurityPolicies &lt;span class="k"&gt;for &lt;/span&gt;cluster.           no
allctx                          Run commands on contexts &lt;span class="k"&gt;in &lt;/span&gt;your kubeconfig         no
apparmor-manager                Manage AppArmor profiles &lt;span class="k"&gt;for &lt;/span&gt;cluster.               no
...
~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew search rbac-lookup
NAME         DESCRIPTION              INSTALLED
rbac-lookup  Reverse lookup &lt;span class="k"&gt;for &lt;/span&gt;RBAC  no

~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew info rbac-lookup
NAME: rbac-lookup
INDEX: default
URI: https://github.com/reactiveops/rbac-lookup/releases/download/v0.6.4/rbac-lookup_0.6.4_Linux_x86_64.tar.gz
SHA256: 9f6f63b2ee6f5420530b6aa589b4c8c4a4685bf87447286881d37afdd80a7fb2
VERSION: v0.6.4
HOMEPAGE: https://github.com/reactiveops/rbac-lookup
DESCRIPTION: 
Easily find roles and cluster roles attached to any user, service account, or group name &lt;span class="k"&gt;in &lt;/span&gt;your Kubernetes cluster.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code show a couple of ways to search and get info about particular plugin(s). Besides searching using &lt;code&gt;kubectl krew&lt;/code&gt; you can also use plugin index on &lt;code&gt;krew&lt;/code&gt;s website &lt;a href="https://krew.sigs.k8s.io/plugins/"&gt;here&lt;/a&gt;. In addition to the information shown by &lt;code&gt;kubectl krew&lt;/code&gt;, this also gives you link to source repository and number of GitHub stars for each plugin. So, when you find what you needed, you can just run &lt;code&gt;kubectl krew install&lt;/code&gt; and start using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew &lt;span class="nb"&gt;install &lt;/span&gt;rbac-lookup
Updated the &lt;span class="nb"&gt;local &lt;/span&gt;copy of plugin index.
Installing plugin: rbac-lookup
Installed plugin: rbac-lookup
&lt;span class="se"&gt;\&lt;/span&gt;
 | Use this plugin:
 |  kubectl rbac-lookup
 | Documentation:
 |  https://github.com/reactiveops/rbac-lookup
/
WARNING: You installed plugin &lt;span class="s2"&gt;"rbac-lookup"&lt;/span&gt; from the krew-index plugin repository.
   These plugins are not audited &lt;span class="k"&gt;for &lt;/span&gt;security by the Krew maintainers.
   Run them at your own risk.

~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl rbac-lookup version
Version:0.6.4 Commit:3c86486a94e56e762b2a46d899e5f7b235c74ca8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the warning in the above output - even though these plugins are listed in official plugin index, that does not guarantee that they are safe to use or that they actually do what they claim to be doing. You should treat all of these as any random, unverified script downloaded from internet.&lt;/p&gt;

&lt;p&gt;Even though &lt;code&gt;krew&lt;/code&gt; contains a lot of plugins, that does not mean that it's exhaustive list of every plugin available. So, in case you can't find plugin that solves your task/issue, you can also check other places. One such place would be &lt;a href="https://github.com/ishantanu/awesome-kubectl-plugins"&gt;&lt;code&gt;awesome-kubectl-plugins&lt;/code&gt; repository&lt;/a&gt;, which has a couple extra plugins, or you can also just try Googling around.&lt;/p&gt;

&lt;p&gt;Considering that these ones are not part of &lt;code&gt;krew&lt;/code&gt;, to install them we would need to take manual approach which goes as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl krew search dig
&lt;span class="c"&gt;# ... nothing relevant&lt;/span&gt;

~ &lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/sysdiglabs/kubectl-dig.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;kubectl-dig
~ &lt;span class="nv"&gt;$ &lt;/span&gt;make build
~ &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;_output/bin/kubectl-dig /home/martin/.krew/bin/kubectl-dig

~ &lt;span class="nv"&gt;$ &lt;/span&gt;kubectl dig
Deep kubernetes visibility.

Usage:
  dig
  dig &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As was mentioned earlier, these plugins are just scripts or binaries, therefore you can download them manually and just use them. If you want &lt;code&gt;kubectl&lt;/code&gt; to recognize them as plugins, you additionally need to give them a name in format &lt;code&gt;kubectl-plugin-name&lt;/code&gt; and put them somewhere in path. In the above example we installed &lt;code&gt;dig&lt;/code&gt; plugin by downloading its sources, building the binary and moving it to &lt;code&gt;krew&lt;/code&gt; directory which is in path. To check if &lt;code&gt;kubectl&lt;/code&gt; found the newly installed plugin you can run &lt;code&gt;kubectl plugin list&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#must-haves"&gt;
  &lt;/a&gt;
  Must Have's
&lt;/h2&gt;

&lt;p&gt;There are quite a few plugins in the index (149 at the time of writing) and there's many more outside of the &lt;code&gt;krew&lt;/code&gt; index, so to save you some time going through all of them, I made a list of the plugins that are in my opinion particularly useful. So, let's break it down by category starting with the most neglected area - the security: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/corneliusweig/rakkess"&gt;&lt;code&gt;rakkess&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;access-matrix&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; is plugin for showing and reviewing access to kubernetes resources. This can be very useful when designing RBAC roles - you can for example run &lt;code&gt;kubectl access-matrix --as other-user --namespace some-ns&lt;/code&gt; to verify that user or service account has desired access rights in specified namespace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/controlplaneio/kubectl-kubesec"&gt;&lt;code&gt;kubesec&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;kubesec-scan&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; is plugin for scanning resources with &lt;a href="https://kubesec.io/"&gt;https://kubesec.io/&lt;/a&gt; scanner. When you run this plugin against your manifests, it will tell you recommended changes to improve security of your workloads. To view all rules that the scanner uses visit the above website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/FairwindsOps/rbac-lookup"&gt;&lt;code&gt;rbac-lookup&lt;/code&gt;&lt;/a&gt; - Similar to the first plugin we mentioned, this plugin also helps with RBAC in your cluster. This can be used to perform reverse lookup of roles, giving you a list of roles that user, service account or group has assigned. For example, to find roles bound to service account named &lt;code&gt;my-sa&lt;/code&gt; you use the following - &lt;code&gt;kubectl rbac-lookup my-sa --kind serviceaccount --output wide&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When debugging some critical issue, there's really no time to waste and there are some debugging plugins that can help speed up the process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/eldadru/ksniff"&gt;&lt;code&gt;ksniff&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;sniff&lt;/code&gt; is a tool for debugging and capturing networking data. It's able to attach to a pod and using &lt;code&gt;tcpdump&lt;/code&gt; to forward networking data to your local &lt;em&gt;Wireshark&lt;/em&gt;. This tool also works pretty well with &lt;code&gt;tshark&lt;/code&gt; - the command-line version of Wireshark.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sysdiglabs/kubectl-dig"&gt;&lt;code&gt;dig&lt;/code&gt;&lt;/a&gt; - This plugin built by &lt;em&gt;SysDig&lt;/em&gt; provides very nice terminal interface for exploring all kinds of node-level data - for example - ports, traces, running pods, page faults, etc. To see proper demo, checkout the video in &lt;code&gt;dig&lt;/code&gt; repository &lt;a href="https://github.com/sysdiglabs/kubectl-dig"&gt;here&lt;/a&gt;. This plugin however is not in &lt;code&gt;krew&lt;/code&gt; and might also require some extra setup on your cluster nodes (see this &lt;a href="https://github.com/sysdiglabs/kubectl-dig/issues/1"&gt;issue&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also useful plugins that can help with day-to-day management of cluster and its resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/itaysk/kubectl-neat"&gt;&lt;code&gt;neat&lt;/code&gt;&lt;/a&gt; - possibly my favourite of all the plugins is &lt;code&gt;neat&lt;/code&gt; which removes all the generated, redundant fields from YAML output of Kubernetes resources. If you're tired of scrolling through all the &lt;code&gt;managedFields&lt;/code&gt; and other garbage, then definitely give this one a try.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robscott/kube-capacity"&gt;&lt;code&gt;kube-capacity&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;resource-capacity&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; tries to provide better insight into cluster resource usage and utilization. It's essentially a &lt;code&gt;kubectl top&lt;/code&gt; on steroids. It can show you resource utilization and consumption per namespace or pods, allows for node or pod label filtering, as well as sorting of output.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rikatz/kubepug"&gt;&lt;code&gt;kube-pug&lt;/code&gt;&lt;/a&gt; - is a plugin known as &lt;code&gt;deprecations&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt;. Every cluster needs to be upgraded sooner or later and at some point you will run into API deprecations and/or removals. Finding what's being deprecated can be long and error-prone process and this plugin tries to simplify that. All you need to do is run &lt;code&gt;kubectl deprecations --k8s-version=v1.XX.X&lt;/code&gt; and you will get list of all the instances of API objects in cluster that will be deprecated or removed in the specified version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last and also the biggest category is power tools - there's a lot of tasks that can be complicated, cumbersome or require multiple repetitive steps to perform with vanilla &lt;code&gt;kubectl&lt;/code&gt;, so let's make some of those simpler with these plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ahmetb/kubectl-tree"&gt;&lt;code&gt;tree&lt;/code&gt;&lt;/a&gt; - Creating a single object in Kubernetes can trigger creation of many more dependent resources, whether it's just &lt;em&gt;Deployment&lt;/em&gt; creating &lt;em&gt;ReplicaSets&lt;/em&gt; or instance of an operator creating 20 different objects. This hierarchy can be difficult to navigate and &lt;code&gt;kubectl tree&lt;/code&gt; can help with that by creating filesystem-like tree visualization of dependant resources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/int128/kubelogin"&gt;&lt;code&gt;kubelogin&lt;/code&gt;&lt;/a&gt; - If you're using OIDC provider such as Google, Keycloak or Dex for authenticating to Kubernetes cluster, then this plugin also known as &lt;code&gt;oidc-login&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; can help you avoid having to manually login into your cluster over and over again. When you setup this plugin, every time you attempt to run any &lt;code&gt;kubectl&lt;/code&gt; command without having valid authentication token, &lt;code&gt;oidc-login&lt;/code&gt; will automatically open your provider's login page and after successful authentication grabs the token and logs you into the cluster. To see video of workflow check out the repository &lt;a href="https://github.com/int128/kubelogin"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ahmetb/kubectx"&gt;&lt;code&gt;kubectx&lt;/code&gt;&lt;/a&gt; - known as &lt;code&gt;ctx&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt; is probably the most popular of all the plugins. It allows you to easily switch between &lt;code&gt;kubectl&lt;/code&gt; context and cluster namespaces with without having to deal with &lt;code&gt;kubectl config&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/corneliusweig/ketall"&gt;&lt;code&gt;ketall&lt;/code&gt;&lt;/a&gt; - We all know that &lt;code&gt;kubectl get all&lt;/code&gt; doesn't really give you &lt;em&gt;all&lt;/em&gt; the resources. To really list all resources you can use &lt;code&gt;ketall&lt;/code&gt; also known as &lt;code&gt;get-all&lt;/code&gt; in &lt;code&gt;krew&lt;/code&gt;. This plugin can just dump all the resources into your terminal as well as filter based on time, exclusions, label selectors or scopes (cluster or namespace).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This is just a list of things that I find useful, so what works for me might not work for you and at the same time, there might a lot of plugins that I omitted, yet they can be super useful for you. So, go check out the &lt;code&gt;krew&lt;/code&gt; index or &lt;a href="https://github.com/ishantanu/awesome-kubectl-plugins"&gt;&lt;code&gt;awesome-kubectl-plugins&lt;/code&gt; repository&lt;/a&gt; for more. If you happen to find something cool, please share it, so others can benefit from it too.&lt;/p&gt;

&lt;p&gt;With that said, there isn't a plugin for every use case, so if you can't find plugin that solves your issue, maybe you can build one and fill that gap (more info about that in &lt;a href="https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/#writing-kubectl-plugins"&gt;docs&lt;/a&gt;). 😉&lt;/p&gt;

&lt;p&gt;There are also other tools out there beyond &lt;code&gt;kubectl&lt;/code&gt; plugins, which can improve your productivity and simplify Kubernetes operations. The most prominent one is &lt;a href="https://github.com/derailed/k9s"&gt;&lt;code&gt;k9s&lt;/code&gt;&lt;/a&gt;, so if plugins aren't enough and you want to grab a bigger hammer, then this might be a right tool for you.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Tipos Javasript</title>
      <author>Gabriel Cheda</author>
      <pubDate>Fri, 01 Oct 2021 17:34:17 +0000</pubDate>
      <link>https://dev.to/gabrielcheda/tipos-javasript-5803</link>
      <guid>https://dev.to/gabrielcheda/tipos-javasript-5803</guid>
      <description>&lt;h1&gt;
  &lt;a href="#javascript-types"&gt;
  &lt;/a&gt;
  Javascript Types
&lt;/h1&gt;

&lt;p&gt;Meu primeiro post aqui e gostaria de começar explicando algo bem básico, os tipos primitivos e os tipos referência. O conceito serve para qualquer linguagem, mas aqui quis forcar em &lt;code&gt;Javascript&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primitive-types"&gt;
  &lt;/a&gt;
  Primitive Types
&lt;/h2&gt;

&lt;p&gt;Os &lt;code&gt;Primitive Types&lt;/code&gt; são aqueles que já "vem com a linguagem", o básico do básico e que usamos diariamente.&lt;/p&gt;

&lt;p&gt;Abaixo seguem &lt;strong&gt;alguns exemplos&lt;/strong&gt;, ou seja, &lt;strong&gt;existem outros além desses&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tipos Javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando usamos tipos primitivos estamos passando o valor "cru" daquela variável e não a variável em si. &lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alterarNumero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tipoPrimitivoNumber - Antes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//output: tipoPrimitivoNumber - Antes 5&lt;/span&gt;

    &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tipoPrimitivoNumber - Depois&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//output: tipoPrimitivoNumber - Depois 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;alterarNumero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tipoPrimitivoNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//output: 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando fazemos a chamada a função &lt;code&gt;alterarNumero&lt;/code&gt;, passamos como parâmetro o &lt;code&gt;tipoPrimitivoNumber&lt;/code&gt; que tem valor 5. Dentro desta função logamos o valor antes da somatória (5) e após a somatória (10), mas no final após rodarmos a função o programa loga para a mesma variável o numero 5! &lt;/p&gt;

&lt;p&gt;Por que quando logamos a variável após executar a função o seu valor continua o mesmo?!&lt;/p&gt;

&lt;p&gt;É simples, quando trabalhamos com &lt;code&gt;tipos primitivos&lt;/code&gt;, estamos trabalhando com o VALOR daquela variável e não com a variável em si. &lt;/p&gt;

&lt;p&gt;Então, quando passamos para a função &lt;code&gt;alterarNumero&lt;/code&gt; um parâmetro do &lt;code&gt;tipo primitivo&lt;/code&gt;, o programa substitui o valor do parâmetro da função pelo valor da variável e não pela variável em si.&lt;/p&gt;

&lt;p&gt;Seria a mesma coisa que fazer desta forma e esperar que o resultado final mudasse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alterarNumero&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A diferença desta forma, para a chamada com a variável é que o programa substitui a &lt;code&gt;variável&lt;/code&gt; quando a função é chamada e aqui estamos passando diretamente o valor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Caso ainda não tenha entendido, leia até o final que com a explicação dos &lt;code&gt;Reference Types&lt;/code&gt; vai ficar mais claro.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reference-types"&gt;
  &lt;/a&gt;
  Reference Types
&lt;/h2&gt;

&lt;p&gt;Os &lt;code&gt;Reference Types&lt;/code&gt; são os &lt;code&gt;objetos&lt;/code&gt;, ou &lt;code&gt;object&lt;/code&gt;, com exceção do tipo primitivo &lt;code&gt;null&lt;/code&gt; que quando utilizamos o &lt;code&gt;typeof(null)&lt;/code&gt; nos devolve que é um &lt;code&gt;object&lt;/code&gt;, mas, na verdade isso foi um bug introduzido no começo do &lt;code&gt;Javascript&lt;/code&gt; que não foi corrigido até hoje.&lt;/p&gt;

&lt;p&gt;Acredito que você já tenha ouvido falar que uma variável é um espacinho salvo na memória para um dado. Certo? Caso não tenha ouvido, agora você já sabe.&lt;/p&gt;

&lt;p&gt;O que diferencia os dois tipos é que os &lt;code&gt;Reference Types&lt;/code&gt; quando são utilizados, o valor deles é passado por referência a esse espacinho salvo em memória, ou seja, o que estamos utilizando é a variável em si e não o seu valor "cru". &lt;/p&gt;

&lt;p&gt;Exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objetoA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;objeto1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alterarValor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;objB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objeto1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;alterarValor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objetoA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objetoA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neste caso, quando passamos o parâmetro &lt;code&gt;objetoA&lt;/code&gt; para a função &lt;code&gt;somarValor&lt;/code&gt; não estamos passando o seu valor e sim o objeto salvo lá na memória do computador então toda alteração que for feita neste parâmetro afeta diretamente a raiz.&lt;/p&gt;

&lt;p&gt;Termino por aqui esse post e peço que qualquer dúvida/erro/sugestão me informem para que eu ajuste!&lt;/p&gt;

&lt;p&gt;Abs,&lt;br&gt;
GC.&lt;/p&gt;

&lt;p&gt;Bônus1:&lt;/p&gt;

&lt;p&gt;undefined x null&lt;/p&gt;

&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt; significa que nenhum valor foi atribuído aquela variável e o &lt;code&gt;null&lt;/code&gt; uma ausência de valor intencional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;inicializandoVariavel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inicializandoVariavelComNomeErrado&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught ReferenceError: inicializandoVariavelComNomeErrado is not defined (undefined)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bônus2:&lt;/p&gt;

&lt;p&gt;Neste trecho de código utilizamos na função o parâmetro com nome &lt;code&gt;objB&lt;/code&gt; intencionalmente, para indicar que não importa o nome que você da ao parâmetro da sua função, pois o valor que irá valer é sempre o que for passado na invocação.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objetoA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;objeto1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;alterarValor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;objB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objeto1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;alterarValor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objetoA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objetoA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chamamos a função &lt;code&gt;somarValor(objetoA)&lt;/code&gt; passando o &lt;code&gt;objetoA&lt;/code&gt; como parâmetro e o programa automaticamente substitui o parâmetro objB pelo &lt;code&gt;objetoA&lt;/code&gt; e apenas dentro do &lt;code&gt;escopo&lt;/code&gt; desta função o &lt;code&gt;objetoA&lt;/code&gt; se chamará objB como um apelido para aquela variável, válido apenas dentro daquela função.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
