<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Shared Hosting vs a Managed Server: Choosing the Right Way to Host Multiple Clients
</title>
      <author>Robert Schleinhege</author>
      <pubDate>Tue, 16 Nov 2021 08:31:38 +0000</pubDate>
      <link>https://dev.to/ionos/shared-hosting-vs-a-managed-server-choosing-the-right-way-to-host-multiple-clients-kp4</link>
      <guid>https://dev.to/ionos/shared-hosting-vs-a-managed-server-choosing-the-right-way-to-host-multiple-clients-kp4</guid>
      <description>&lt;p&gt;When building web projects for clients as a freelancer or agency, deciding how you host your projects is crucial. The options on the market can seem staggering, and even feel a bit  overwhelming. So I thought I’d shed a little light on the two major types of managed hosting to answer one question:&lt;/p&gt;

&lt;p&gt;Is hosting on individual shared hosting plans better than going with your own managed server? &lt;/p&gt;

&lt;p&gt;To help me find an answer, I reached out to &lt;a href="https://www.ionos.com/agency-partner"&gt;IONOS Agency Partner&lt;/a&gt; &lt;a href="https://fachwerk.media/"&gt;Fachwerk Media&lt;/a&gt;. As experts in &lt;a href="https://fachwerk.media/leistungen/webdesign"&gt;webdesign&lt;/a&gt;, they have years of experience hosting dozens of client projects and shared their knowledge with me for this post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-the-key-difference-between-shared-hosting-and-managed-servers"&gt;
  &lt;/a&gt;
  What’s the key difference between shared hosting and managed servers?
&lt;/h1&gt;

&lt;p&gt;Both approaches are managed solutions. With both options, you’re sacrificing the flexibility provided by root access in exchange for the added convenience that comes with allowing your web host to take care of stack updates. Most hosting providers use the same data center for both types of hosting products and choose similar quality hardware. The key difference is that shared hosting plans, as the name suggests, share hardware with other websites, whereas with a managed server you’ll get your own dedicated hardware. With a managed server, hosting providers usually allow you to select your CPU model, and how much RAM and/or storage you need. Shared hosting plans, on the other hand, come with a set amount of storage, domains, databases, and mailboxes, but processing power specifics are often lacking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#does-buying-shared-hosting-plans-for-each-client-make-sense"&gt;
  &lt;/a&gt;
  Does buying shared hosting plans for each client make sense?
&lt;/h1&gt;

&lt;p&gt;Going with this approach means that you purchase a new shared hosting plan whenever you start a new client project. Manuel Kling from Fachwerk Media reveals that this comes with the following pros and cons:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It’s more secure since clients are virtually separated from each other&lt;/li&gt;
&lt;li&gt;Buying a new plan for each client is cheaper — especially if you’re just getting started&lt;/li&gt;
&lt;li&gt;You can individually manage project performance. Some hosts like IONOS offer scalable &lt;a href="https://www.ionos.com/hosting/web-hosting"&gt;performance levels&lt;/a&gt; that you can change daily depending on traffic. Most web hosts require a plan change.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There’s no performance guarantee. If other websites located on the same hardware see traffic peaks, your site's performance might be impacted.&lt;/li&gt;
&lt;li&gt;You need to manage FTP access for each web hosting plan&lt;/li&gt;
&lt;li&gt;Switching between hosting contracts can be time consuming. IONOS has built a free client management dashboard to make this easier. &lt;a href="https://dev.to/ionos/a-guide-to-better-client-management-for-web-pros-2n2b"&gt;Read more&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#should-you-rent-your-own-managed-server"&gt;
  &lt;/a&gt;
  Should you rent your own managed server?
&lt;/h1&gt;

&lt;p&gt;Having your own, fully dedicated server located in a secure data center sounds good, right? Not so fast. Let's take a look at the pros and cons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All your projects share the same hosting account and FTP access and customer contract&lt;/li&gt;
&lt;li&gt;You only need to instal CMS backup tools like &lt;a href="https://www.akeeba.com/products/akeeba-solo.html"&gt;Akeeba Solo&lt;/a&gt; just once for all your projects&lt;/li&gt;
&lt;li&gt;You know exactly how much performance you get&lt;/li&gt;
&lt;li&gt;You decide how you share each server — depending on how you set up your server, this may even save you money in the long term.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It’s less secure because client folders are not physically or virtually separated. This could also lead to mistakes if you navigate to the wrong folder.&lt;/li&gt;
&lt;li&gt;You have to manage the server load yourself. If one site's traffic goes through the roof, your other sites might not get enough resources. Also, you don't have an out-of-the box solution for managing the performance of each project separately.&lt;/li&gt;
&lt;li&gt;If you’ve just started with your first client project as a freelancer, renting a managed server can get expensive. &lt;a href="https://www.ionos.com/servers/managed-server"&gt;Managed servers from IONOS&lt;/a&gt;, for example, start in the $40.00 range/month. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;"We use individual servers for multiple clients, but it wasn’t always this way. In the beginning, we didn’t have all the possibilities that exist today. Both approaches have their benefits and which one you choose depends on the particular situation." - &lt;a href="https://www.linkedin.com/in/manuelkling"&gt;Manuel Kling&lt;/a&gt;, Co-Founder of Fachwerk Media&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When deciding on a hosting setup, Manuel suggests first asking yourself these three questions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Which is the best way to make sure that your projects get the right performance, but still stay secure?&lt;/strong&gt;&lt;br&gt;
If you choose a hosting provider that can guarantee enough performance, shared hosting is a good option. If you feel comfortable estimating your own performance needs, a managed server might be the better option.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Which workflow works best for you?&lt;/strong&gt;&lt;br&gt;
If managing all your projects with just one FTP access feels secure enough, you can save time with a managed server, since you don’t have to switch hosting contracts or FTP access. If your web host offers good multi-client tooling, shared hosting is also a good option. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Which setup is the better for business?&lt;/strong&gt;&lt;br&gt;
Having your own server sounds awesome, but it comes at a price. So if you’ve already got a lot of client projects lined up, a managed server can be a great long-term investment. For those just starting out in the industry and looking to cut initial costs, shared hosting is the more affordable choice. &lt;/p&gt;

</description>
      <category>hosting</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>ionos</category>
    </item>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Tue, 16 Nov 2021 08:24:15 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-25bc</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-25bc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#day-21"&gt;
  &lt;/a&gt;
  --DAY 21--
&lt;/h2&gt;

&lt;p&gt;Hi, I am going to make #100DaysOfCode Challenge. Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;Now let's solve problem today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem: Climbing the Leaderboard&lt;/li&gt;
&lt;li&gt;Detail: &lt;a href="https://www.hackerrank.com/challenges/climbing-the-leaderboard/problem?isFullScreen=false"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Idea:

&lt;ul&gt;
&lt;li&gt;Remove the duplicate number of ranked&lt;/li&gt;
&lt;li&gt;Because player array was sorted, we will find the rank from bottom to top by traversing from tail to head of array&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;My solution(javascript):
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function climbingLeaderboard(ranked, player) {
    ranked = [... new Set(ranked)];
    let ans=[],i=ranked.length-1;
    for(let score of player){
        while(i&amp;gt;=0){
            if(score&amp;lt;ranked[i]){
                ans.push(i+2);
                break;
            }
            i--;
        }
        if(i&amp;lt;0) ans.push(1);
    }
    return ans;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt;&lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>100daysofcode</category>
      <category>aws</category>
    </item>
    <item>
      <title>How Web Scraping is Used to Scrape Reviews from TripAdvisor?
</title>
      <author>foodspark</author>
      <pubDate>Tue, 16 Nov 2021 08:15:06 +0000</pubDate>
      <link>https://dev.to/foodspark/how-web-scraping-is-used-to-scrape-reviews-from-tripadvisor-448j</link>
      <guid>https://dev.to/foodspark/how-web-scraping-is-used-to-scrape-reviews-from-tripadvisor-448j</guid>
      <description>&lt;p&gt;TripAdvisor reviews provide a wealth of information on airline and hotel costs that might help you grow your business. It also contains a wealth of information about major travel locations, hotels, and restaurants.&lt;/p&gt;

&lt;p&gt;You can use web scraping to automatically collect information from TripAdvisor reviews if you want to extract and use all of this information. Web scraping is the act of employing automated bots to collect data from a website's HTML version and delivering it in Excel or CSV format so you can process, analyze, and utilize it.&lt;/p&gt;

&lt;p&gt;Data scraping reviews from TripAdvisor is the most effective data collection approach currently accessible, and it will considerably improve your capacity to synthesis, organize, and analyze existing patterns in the hospitality business.&lt;/p&gt;

&lt;p&gt;Why TripAdvisor Reviews are Necessary?&lt;br&gt;
why-tripadvisor-reviews-are-necessary&lt;/p&gt;

&lt;p&gt;How many TripAdvisor reviews are there? TripAdvisor has nearly 884 million reviews on hotels, lodgings, and other services as of 2020. As a result, TripAdvisor evaluations may provide a wealth of information regarding flights, facilities, experiences, and other topics, allowing users to:&lt;/p&gt;

&lt;p&gt;Learn more about the most popular and least popular tourist attractions in a given location.&lt;/p&gt;

&lt;p&gt;Get in-depth information on travel places.&lt;br&gt;
Avoid making classic tourist blunders or falling into tourist traps.&lt;br&gt;
Learn about new places, lodgings, and activities.&lt;br&gt;
For example, if you want to get out of Seattle for the weekend, scraping can help you figure out which adjacent city is the cheapest. Similarly, scraping can be used to identify and avoid common blunders made by tourists while seeing a given location.&lt;/p&gt;

&lt;p&gt;If you're a travel and tourist company, you should also check at TripAdvisor reviews because it will help you:&lt;/p&gt;

&lt;p&gt;Recognize the reputation of your travel facility and look for ways to improve it. Whether you run a winery tour, a bed and breakfast, a motel, or a hotel, TripAdvisor review data will offer you an idea of how the public perceives your establishment.&lt;br&gt;
Understand the current developments in the travel business and how you can keep up and differentiate yourself from your competitors.&lt;br&gt;
How Does Web Scraping Assists in Fetching Information from TripAdvisor Reviews?&lt;br&gt;
how-does-web-scraping-assist-in-fetching-information-from-tripadvisor-reviews&lt;/p&gt;

&lt;p&gt;Scraping is the most effective method for gaining access to and making use of the huge amount of data included in TripAdvisor evaluations. A scraper can assist you in gathering and transferring data into a spreadsheet for analysis and review.&lt;/p&gt;

&lt;p&gt;Previously, you'd have to manually enter the various parameters into a spreadsheet after reading each TripAdvisor review. For example, you might make a note in your Excel sheet after reading the TripAdvisor review below:&lt;/p&gt;

&lt;p&gt;It's a perfect five-star rating.&lt;br&gt;
On February 5, 2020, it was re-evaluated.&lt;br&gt;
It was sent from a mobile phone.&lt;br&gt;
In February 2020, the author visited this location.&lt;br&gt;
This review was beneficial to one person.&lt;br&gt;
You won't have to take as many thorough notes for each review if you scrape. You can evaluate which reviews were useful to others and filter your search results to specific regions or facilities you're looking for with just a few clicks. Scraping for nightly prices, for example, can help you uncover the greatest deals for various rental houses. You can also use scraping to sort reviews by author and date.&lt;/p&gt;

&lt;p&gt;Scraping Reviews from TripAdvisor Using an API&lt;br&gt;
scraping-reviews-from-tripadvisor-using-an-api&lt;/p&gt;

&lt;p&gt;Instead of manually entering each website you want to scrape, an API will allow you to scrape through them in real-time.&lt;/p&gt;

&lt;p&gt;An API is a programming network that allows several computer programs and allows them to exchange data without revealing the code that underpins each data transfer. An API enables you to construct a data funnel from your scraping program to the API to your data analytics software or database without any manual input by allowing data to be transferred from one software to another.&lt;/p&gt;

&lt;p&gt;APIs also enable you to extract and multiple data categories so you don't have to trawl through a lot of information in your database. This is how you can discover your TripAdvisor reviews and how you may acquire the latest TripAdvisor reviews. Even if you aren't at your computer, you can use code to control your API to send commands to your scraping software to extract certain categories of data from the pages you desire. This will enable you to keep statistics on constantly changing datasets, such as stock market values.&lt;/p&gt;

&lt;p&gt;Although APIs appear to be complicated, collecting TripAdvisor reviews with one can be a straightforward process.&lt;/p&gt;

&lt;p&gt;Here's what you need to do to get started:&lt;/p&gt;

&lt;p&gt;Get your web scraping software and install it. Before you install the software, make sure you understand the documentation. However, certain APIs, such as the Foodspark API, is browser-based and do not require installation.&lt;br&gt;
Go to the website you wish to scrape and enter the URL.&lt;br&gt;
Make a note of the URL.&lt;br&gt;
In the program, paste the URL.&lt;br&gt;
Within seconds, you'll have the complete HTML output.&lt;br&gt;
For distinct HTML components on a page, most web scraping program have an extraction sequence. Most scraping technologies, for example, extract the text first. Other extractable categories, such as Inner HTML, Class Attribute, JSON object, Captcha, href attribute, and complete HTML, are available after that. The categories available are dependent on the web scraping tool you're using, so make sure you've chosen the proper one for your needs.&lt;br&gt;
After pressing the "run" button, Foodspark’s API simplifies the procedure by returning all HTML categories.&lt;br&gt;
You can then export the data to your favorite analysis application, such as XLSTAT, GraphPad, or SPSS, after obtaining the whole result.&lt;br&gt;
How to Scrape TripAdvisor Reviews using an HTML Module?&lt;br&gt;
how-to-scrape-tripadvisor-reviews-using-an-html-module&lt;/p&gt;

&lt;p&gt;Although knowing how to code is strongly encouraged before using APIs, if you don't know how to code, you can still extract TripAdvisor reviews with Foodspark’s pre-built HTML module.&lt;/p&gt;

&lt;p&gt;To begin scraping with this HTML module, follow these steps:&lt;/p&gt;

&lt;p&gt;Visit Foodspark’s HTML scraper to grab any HTML data from any website.&lt;br&gt;
Copy and paste the URL of the page you want to scrape into the URL area.&lt;br&gt;
Paste CSS selectors into the CSS selector field to find elements to extract.&lt;br&gt;
Paste your XPath into the XPath field. You can use XPath to compute values and extract notes from an HTML document. Experiment with XPath expressions to extract data from the web.&lt;br&gt;
After checking "I'm not a robot," press the "start scraping" button. The HTML versions of the URLs you pasted should now be available in CSV format. This HTML scraper, like Foodspark API, allows you to collect all types of HTML data.&lt;br&gt;
You may either download the CSV file or directly export it to your database.&lt;br&gt;
Which are The Other Methods of Scraping TripAdvisor Reviews?&lt;br&gt;
which-are-the-other-methods-of-scraping-tripadvisor-reviews&lt;/p&gt;

&lt;p&gt;If the aforementioned methods aren't working for you, scroll down to the "Contact" area and submit customized work to Foodspark.&lt;/p&gt;

&lt;p&gt;Final Words:&lt;br&gt;
For both customers and businesses, TripAdvisor reviews are a terrific place to start. Scraping reviews as a consumer will assist you in planning the perfect trip and avoiding frequent blunders. If you're a travel agency or facility, data gleaned from TripAdvisor evaluations will help you understand what customers want, allowing you to compete head-to-head with your competitors.&lt;/p&gt;

&lt;p&gt;Although it may appear tough to understand how to scrape TripAdvisor reviews, it is pretty simple if you use Foodspark’s browser-based API and HTML Scraper. Most scraping programs collect different types of HTML data and require downloading, but Foodspark’s API and HTML Scraper allow you to collect all types of HTML data from any website and populate your database using a data funnel. Both tools will save you a lot of time and effort while assisting you in the arrangement, manipulation, and organization of data.&lt;/p&gt;

&lt;p&gt;Looking to Scrape Reviews from TripAdvisor?&lt;/p&gt;

&lt;p&gt;Contact Foodspark, now!!&lt;/p&gt;

&lt;p&gt;Request a Quote!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foodspark.io/how-web-scraping-is-used-to-scrape-reviews-from-tripadvisor.php"&gt;https://www.foodspark.io/how-web-scraping-is-used-to-scrape-reviews-from-tripadvisor.php&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webscrapingtool</category>
      <category>tripadvisorscraper</category>
      <category>webscrapingsoftware</category>
      <category>scrapingtripadvisorreviews</category>
    </item>
    <item>
      <title>javascript - Everything you always wanted to know about localStorage (but you were afraid to ask)</title>
      <author>Jose</author>
      <pubDate>Tue, 16 Nov 2021 08:12:18 +0000</pubDate>
      <link>https://dev.to/josec/javascript-everything-you-always-wanted-to-know-about-localstorage-but-you-were-afraid-to-ask-2o7e</link>
      <guid>https://dev.to/josec/javascript-everything-you-always-wanted-to-know-about-localstorage-but-you-were-afraid-to-ask-2o7e</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-the-localstorage"&gt;
  &lt;/a&gt;
  What is the localStorage?
&lt;/h1&gt;

&lt;p&gt;The localStorage is a read-only property of the window interface that allows us to access the Storage for the Document’ origin (aka the browser). It let us save key-value pairs on the user browser. This was introduced on HTML 5 and everything it’s stored as a String, but I will show you how to save JSON objects.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#localstorage-vs-sessionstorage"&gt;
  &lt;/a&gt;
  localStorage vs sessionStorage
&lt;/h1&gt;

&lt;p&gt;The difference between localStorage and sessionStorage it’s the expiration date: the localStorage data will persist until:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We delete the data.&lt;/li&gt;
&lt;li&gt;User clears the browser data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;localStorage data won’t persist if the user is using incognito or private browsing.&lt;/p&gt;

&lt;p&gt;sessionStorage data gets expired each time the page it’s reloaded.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-write-on-localstorage"&gt;
  &lt;/a&gt;
  How to write on localStorage
&lt;/h1&gt;

&lt;p&gt;Data on localStorage is stored as key-value pairs and must always be String. It’s also possible to store and retrieve JSON objects with a little workaround. The function responsible for writing on the localStorage is the &lt;code&gt;setItem&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VvPxHwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ablfvvkryso7fyragbgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VvPxHwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ablfvvkryso7fyragbgs.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Saving user access token&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ksjakdkaugdka2i163mjbdja8y1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check that the informations has been saved by opening the console (f12) and checking the application tab under Local Storage:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OC9RTOP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so69j5esmfns9j1zsy65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OC9RTOP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so69j5esmfns9j1zsy65.png" alt="Image description" width="880" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-objects"&gt;
  &lt;/a&gt;
  Storing objects
&lt;/h2&gt;

&lt;p&gt;In this case I’m saving the personal access token from a user, but what if I have to store an object with the user's details? Let’s try it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1. We define an Object;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Try to store the Object:&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now check the application tab:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LrbWhdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w34suixosvzlc2rlp3fz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LrbWhdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w34suixosvzlc2rlp3fz.png" alt="Image description" width="880" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well it has stored ‘something’ but the content it’s not accessible so it’s useless and if this was an API response we would have lost the response. So how can we store objects in localStorage?&lt;/p&gt;

&lt;p&gt;Though localStorage works only with strings so we can make it work transforming the object to a String:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1. We define an Object;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Transform the Object to String:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 3. Store the object:&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check it on the application tab:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBmS-ax7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u96pck0bfzplynwx3fw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBmS-ax7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u96pck0bfzplynwx3fw4.png" alt="Image description" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The information is there, and more important, accessible. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-to-read-localstorage-data"&gt;
  &lt;/a&gt;
  How to read localStorage data
&lt;/h1&gt;

&lt;p&gt;To read the localStorage data we use the &lt;code&gt;getItem&lt;/code&gt; function and we need to know the key that keeps the data:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9nt3UaaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b2izmlpapeoit5pm96q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9nt3UaaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b2izmlpapeoit5pm96q.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Reading user access token from localStorage&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YuwaKmyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxo1gfcgzeuxfsrp7mkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YuwaKmyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxo1gfcgzeuxfsrp7mkg.png" alt="Image description" width="880" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reding-objects"&gt;
  &lt;/a&gt;
  Reding objects
&lt;/h2&gt;

&lt;p&gt;Now let’s retrieve the object we stored earlier using the same &lt;code&gt;getItem&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We read the localStorage and try to console log a greeting message using the object’s name and surname properties on console and this is what we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8Ajzfqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux9pu90ic1os14dtbiu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8Ajzfqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux9pu90ic1os14dtbiu8.png" alt="Image description" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The console is returning undefined for the name and surname. Why? because what we stored is not an object it is a String. To read objects from localStorage we need to transform it from String to Object. Let’s try again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1. Reading the object as string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Parsing the string to Object&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// 3. Now we can access the object properties.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egYochkd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3kzv7p652d9f37u277e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--egYochkd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3kzv7p652d9f37u277e.png" alt="Image description" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-find-all-localstorage-keys"&gt;
  &lt;/a&gt;
  How to find all localStorage keys
&lt;/h1&gt;

&lt;p&gt;We can get an array with all the keys using &lt;code&gt;Object.keys&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vhbzSLkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rw6d8hzc7qz2zvyuf5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vhbzSLkm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rw6d8hzc7qz2zvyuf5j.png" alt="Image description" width="880" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-remove-data"&gt;
  &lt;/a&gt;
  How to remove data
&lt;/h1&gt;

&lt;p&gt;To remove data from localStorage we have 2 options:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0delete-one-item"&gt;
  &lt;/a&gt;
   Delete one item
&lt;/h2&gt;

&lt;p&gt;We can use the function &lt;code&gt;removeItem&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qghkZmbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfcpb11670mr1bayolzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qghkZmbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfcpb11670mr1bayolzm.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that the token is no longer on the localStorage:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hmNL4KRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6gx7hgaya58kojzndtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hmNL4KRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6gx7hgaya58kojzndtg.png" alt="Image description" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delete-all-items"&gt;
  &lt;/a&gt;
  Delete all items
&lt;/h2&gt;

&lt;p&gt;We can use the function &lt;code&gt;clear&lt;/code&gt; to delete all existing items:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ISEY5V2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aftuc1y34nojqv79togi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ISEY5V2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aftuc1y34nojqv79togi.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#drawbacks-of-localstorage"&gt;
  &lt;/a&gt;
  Drawbacks of localStorage
&lt;/h1&gt;

&lt;p&gt;As I showed localStorage it’s very easy to use and that can lead us to misuses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't store too much data on it as it has just 5MB per domain.&lt;/li&gt;
&lt;li&gt;All data is easily accessible for the user and any script running on the page and that makes it insecure. So don’t store sensitive information.&lt;/li&gt;
&lt;li&gt;Don’t be tempted to use it as a substitute for a database.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Do content management systems actually serve their users?</title>
      <author>Tyler Smith</author>
      <pubDate>Tue, 16 Nov 2021 08:05:22 +0000</pubDate>
      <link>https://dev.to/tylerlwsmith/do-content-management-systems-actually-serve-their-users-46k2</link>
      <guid>https://dev.to/tylerlwsmith/do-content-management-systems-actually-serve-their-users-46k2</guid>
      <description>&lt;p&gt;Sometimes it feels like the Internet is growing faster than the universe is expanding. During the global COVID pandemic, businesses that had never even considered how to operate online were forced into the digital world to survive. More than ever, hobbyists, bloggers, and solo entrepreneurs are creating websites to compete for attention in a noisy world.&lt;/p&gt;

&lt;p&gt;With this proliferation of new websites, it may be an opportune time to ask, "Are our content management systems actually serving these ever-expanding needs?" Maybe they're not. It often seems like CMS platforms have been busy chasing trends rather than focusing on solving the problems of specific types of users. This is especially true in the open source world.&lt;/p&gt;

&lt;p&gt;In this post, we will look at the origins of modern content management systems, their technical challenges, and their evolutions. The post will conclude by exploring what CMS platforms might be able to do to better serve their users in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-humble-beginnings"&gt;
  &lt;/a&gt;
  From humble beginnings
&lt;/h2&gt;

&lt;p&gt;Many of the major open source content management systems were built in the early 2000s. The digital landscape looked very different than it does today. Easy-to-use visual website builders like Squarespace hadn't yet become household names. Social media hadn't yet gained its foothold.&lt;/p&gt;

&lt;p&gt;If you wanted to share your ideas online, installing a PHP website builder on shared hosting might be the most practical option. Countless open source projects like b2/cafelog empowered non-technical users to build personal blogs. As b2/cafelog evolved into WordPress, it transformed into a full-blown content management solution with a theming system, plugins, custom post types, a REST API, and visual page builder.&lt;/p&gt;

&lt;p&gt;WordPress's expanding feature set led to increased developer adoption. Yet many of the features that made platforms like WordPress practical for non-technical users became major pain points for developers. UI-driven plugin updates could break websites. Configuration that was stored in the database made it hard to keep development and production environments in sync. Custom fields–most often implemented with the Advanced Custom Fields plugin–had UI-driven configuration that also must somehow be kept in sync between production and live sites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wordpresss-legacy"&gt;
  &lt;/a&gt;
  WordPress's legacy
&lt;/h2&gt;

&lt;p&gt;WordPress was designed to empower non-technical users to manage a website almost entirely through the UI on a single, stateful server. The inexpensive virtual private servers of today didn't exist when it was released in 2003. Nor did object storage or affordable managed databases. Continuous delivery pipelines weren't in the psyche of developers–after all, Git wouldn't even be invented for another 3 years. Because of this, the UI-driven configuration paradigm is at the heart of WordPress. It often must be carefully sidestepped when using the CMS to build heavily customized sites.&lt;/p&gt;

&lt;p&gt;Having so many features built into WordPress can create a heavy mental burden for non-technical site administrators who manage hyper-customized sites. WordPress's menu builder was built before mega-menus became a design standard. Sure: it's possible to download a mega menu plugin, but this often creates confusion for administrators who have 30+ items on their admin sidebar and multiple screens to configure menus. Custom themes often use custom queries in their templates that have the number of results hardcoded, which can create a confusing experience when a site admin tries to change the "&lt;em&gt;Blog pages show at most&lt;/em&gt;" setting. Changing the permalink settings can wipe out a site's SEO and break every link to the site. Many of these sharp edges can't be removed from WordPress.&lt;/p&gt;

&lt;p&gt;Other built-in features come with considerable security risks and potential to leak sensitive data. While it's possible to password protect a post, the title of the post may still show up in the search results. I've seen newsworthy information accidentally exposed in the titles of protected posts. A knee-jerk solution would be to make sure that there are no search boxes on the site, but you can search a WordPress site by tacking &lt;code&gt;?s&lt;/code&gt; to the end of a site's domain (like &lt;code&gt;https://example.com/?s&lt;/code&gt;). A site admin may think that their identity is protected because their author information isn't displayed on a single post page template. However, it can still be displayed on the archive page, RSS feed, or in the REST API. Leaked author information has the potential to cost the lives of activists who post anonymously in oppressive countries. Yet most users are unaware that their content management system is leaking so much data.&lt;/p&gt;

&lt;p&gt;While content management systems like WordPress and Drupal were built with decade-old architectures and assumptions, the Internet was evolving around them. Powerful JavaScript UI frameworks like Angular, React and Vue were starting to take hold.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-age-of-javascript"&gt;
  &lt;/a&gt;
  The age of JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript's origin is a peculiarity amongst programming languages. In the height of the "browser wars," both Netscape and Internet Explorer were adding features at a rapid rate in the battle to win users. In 1995, Netscape decided to build a lightweight scripting language as another weapon in their arsenal. They tasked Brendan Eich to build a scripting language for the browser in ten days. What Eich created in his 10-day sprint was an unholy amalgamation of esoteric languages like Self and Scheme that used Java-like syntax. Netscape named the monstrosity "JavaScript," hoping to capitalize on Java's hype.&lt;/p&gt;

&lt;p&gt;Not to be outdone, Internet Explorer implemented JavaScript in their own browser. Despite the language being a half-baked project that was thrown together in ten days, it became a pre-packaged feature of all major browsers moving forward. Because of this, JavaScript became one of the most popular languages in the world.&lt;/p&gt;

&lt;p&gt;And the web was growing. Application developers started to recognize the benefits of building for the web platform. Targeting the browser meant you could build and distribute applications without needing to worry about the underlying operating system. The proliferation of social media platforms like Facebook led to a need for more powerful tools for managing interactivity. Building JavaScript-based tools, despite the language's hairball nature, was basically the only choice. UI Frameworks like Angular, React and Vue began to dominate the web. A server-side implementation of JavaScript called Node.js was created, and Node Package Manager contained packages for everything from web servers to Sass compilation. Over the course of a few years, JavaScript seemed to take over the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-headless-cms-experiment"&gt;
  &lt;/a&gt;
  The headless CMS experiment
&lt;/h2&gt;

&lt;p&gt;Open source content management systems like WordPress and Drupal took notice of JavaScript's meteoric rise. Both developed REST APIs for their respective platforms. Leaders in these communities started promoting the idea of a "headless CMS," where the CMS would only be responsible for storing and retrieving data. The HTML markup could then be rendered by JavaScript on the front-end. You could even go as far as to build a completely new admin experience on top of the platforms that would smooth out their rough edges. This push was embodied by WordPress founder Matt Mullenweg's State of the Word speech, where his &lt;a href="https://youtu.be/TX6dXRL-jPU?t=3539"&gt;parting call-to-action&lt;/a&gt; was "learn JavaScript deeply." The race began to rebuild the Internet with the 10-day scripting language.&lt;/p&gt;

&lt;p&gt;A whole ecosystem soon emerged around headless content management systems, with proprietary and open source tools being created at a rapid rate. But cracks in the headless CMS dream quickly became apparent. Tooling for building client-rendered JavaScript apps was too complicated for most developers to implement themselves. User experience issues that were normally handled by the browser (such as loading and error states) needed to be reimplemented from scratch in JavaScript front-ends. And foregoing server-rendering negatively impacted SEO and initial load times. Server-rendered frameworks like Next.js were created to ease the SEO impacts of client-rendered pages, but using them meant setting up and running a Node server alongside the CMS and keeping the two applications in sync. And even with Next's optimizations and SEO benefits, loading Next JS pages on low-end Android devices dramatically increased load times and deteriorated the user experience.&lt;/p&gt;

&lt;p&gt;Some developers were determined to keep the headless CMS dream alive and concocted "the JAMstack," a methodology for building websites where all of the pages are pre-rendered to HTML. JAMstack frameworks like Gatsby.js could pull all of a site's content using a CMS's REST API, then pre-render every page as an HTML file. While this is an interesting approach that improves initial page load times, it meant that any change to a site would need to trigger a rebuild that could take several minutes. Ultimately, the JAMstack failed to gain the adoption necessary to realize the dream of headless content management systems.&lt;/p&gt;

&lt;p&gt;Despite Mullenweg's rallying call to "learn JavaScript deeply," relatively few development teams use a headless CMS in production because of the enormously increased complexity and questionable benefits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gutenberg"&gt;
  &lt;/a&gt;
  Gutenberg
&lt;/h2&gt;

&lt;p&gt;While development complexity exploded with headless content management systems, proprietary platforms like Squarespace and Webflow created powerful visual page builders targeted at non-technical users. These tools allowed those with about $20-a-month to manage fully modern websites without the substantial overhead of learning WordPress, Drupal or a front-end JavaScript framework.&lt;/p&gt;

&lt;p&gt;WordPress has long had third-party plugins that enabled page-builder capabilities, but the WordPress team decided to bring the functionality into the platform's core. They built a page builder called Gutenburg.&lt;/p&gt;

&lt;p&gt;Years after Gutenberg's release, its success has been mixed at best. The page builder doesn't show what the actual page will look like: it's a rough approximation. Once a component has been added to the page, its template can't be changed programmatically because its markup is generated on the client then saved to the database. Server-rendered blocks that enable programmatic markup changes are possible, but they're strongly discouraged by the Gutenberg team. The blessed path for building your own custom blocks is using React JS, which is a dramatic departure from the way that most WordPress sites are developed.&lt;/p&gt;

&lt;p&gt;Despite Mullenweg's rallying call to "learn JavaScript deeply," most WordPress developers did not. That's not to say WordPress's push toward JS was a total loss: plugin developers build Gutenberg blocks and leverage the REST API. But much of this functionality is inaccessible to a large proportion of WordPress developers. JavaScript's unusual langue quirks, configuration-heavy tooling, and ever-changing ecosystem kept it out of reach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drupal-8-a-story-of-rearchitecting-a-cms"&gt;
  &lt;/a&gt;
  Drupal 8: a story of rearchitecting a CMS
&lt;/h2&gt;

&lt;p&gt;After revisiting the past decade of content management, it seems like the best course of action for open source CMS platforms may have been to simply focus on bringing their platforms up-to-date with modern development practices.&lt;/p&gt;

&lt;p&gt;That's exactly what Drupal did for its version 8 release. Drupal replaced its legacy procedural code with object-oriented code, and it replaced many of its core components with components from the Symfony framework. It began implementing modern package management with Composer. The hope was that by leveraging tools from the greater software development ecosystem, it could &lt;a href="https://dri.es/why-the-big-architectural-changes-in-drupal-8"&gt;reduce the amount of Drupal specific knowledge needed to build websites&lt;/a&gt; and encourage more developers to adopt the CMS.&lt;/p&gt;

&lt;p&gt;As you may have expected, the results were mixed. Drupal's Symfony components added complexity beyond what many developers were willing to tolerate to build content-driven websites. Many important Drupal packages took years to migrate their code from Drupal 7 to Drupal 8. Updates to Drupal were split between the UI and PHP's package manager, forcing admins to upgrade in two places. Many organizations chose to rebuild their Drupal sites in WordPress rather than incur the cost of the upgrade to Drupal 8.&lt;/p&gt;

&lt;p&gt;In his address to DrupalCon North America 2021, Drupal creator Dries Buytaert reflected on the history of Drupal and &lt;a href="https://youtu.be/IIxbaT-jmNc?t=2784"&gt;why users originally fell in love with the CMS&lt;/a&gt;. As he asked the community, he found a common thread: people fell in love with Drupal because it empowered less technical site builders to do ambitious things through the UI. He recognized that while Drupal's modernization efforts brought significant advantages, they disempowered the platform's less technical users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-state-of-content-management-systems"&gt;
  &lt;/a&gt;
  The state of content management systems
&lt;/h2&gt;

&lt;p&gt;Content management systems are in a peculiar place. Open source platforms like WordPress are still compelling options for individual users to make a blog or build a small website. But as custom development platforms, they tend to suffer from enormous complexity. The causes of this are numerous: ranging from legacy procedural code to usage of dense modern frameworks. It can be caused by build steps and distributed architecture. It can be caused by an administrative interface that lets non-technical users break their site with the click of a button. It can be caused by an impedance mismatch between what the tool was built to accomplish and what users actually want to accomplish with it.&lt;/p&gt;

&lt;p&gt;Proprietary systems like Webflow and Squarespace offer a much simpler and more administrator-friendly experience, but it comes at the cost of lock-in and a limited ability to add custom functionality.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The root of the problem may be that we have too few tools that are trying to be too many things to too many people.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;WordPress currently powers 43% of the sites on the Internet. These include Fortune 500 company websites, local restaurant sites, and health food blogs. The people building these sites include top-tier development teams, freelance developers, designers who drag-and-drop sites together, and bloggers who don't even know they can change the theme. It's hard to imagine that this single content management system could be perfectly ideal for all of these types of sites, much less all of the types of people who build them. Drupal and others have also had the same struggle of providing the best experience to all of their different types of users.&lt;/p&gt;

&lt;p&gt;If the problem is that content management systems are trying to be too many things to too many people, the solution may be to disentangle them from this responsibility. We can do this by building more CMS platforms that cater to more narrow use cases. Webflow has done a great job of this by creating a visual content management system that caters almost exclusively to designers. I'd like to see simple CMS platforms geared towards the design illiterate, and others geared towards non-technical bloggers. I'd like to see content management systems that allow configuration to be committed to code and have a better ability to opt-in to features instead of forcing developers to opt-out. There's more work to be done here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forward"&gt;
  &lt;/a&gt;
  Forward
&lt;/h2&gt;

&lt;p&gt;Today, people building websites have more focused needs than general purpose platforms are able to support. Years of effort was wasted experimenting with modern architectures that may have unnecessarily complicated the development process. But there is enormous potential. If developers can focus that same engineering effort into building platforms that solve narrower sets of problems for specific types of users, the future of content management will be brighter than it's ever been.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Budibase is live on Product Hunt and out of beta</title>
      <author>Budibase</author>
      <pubDate>Tue, 16 Nov 2021 08:02:46 +0000</pubDate>
      <link>https://dev.to/budibase/budibase-is-live-on-product-hunt-and-out-of-beta-1p3n</link>
      <guid>https://dev.to/budibase/budibase-is-live-on-product-hunt-and-out-of-beta-1p3n</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AUDebSW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89f9buwaz68822igv4k4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUDebSW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89f9buwaz68822igv4k4.gif" alt="Budibase design section gif" width="880" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Budibase is an open source low code platform for creating beautiful business apps in minutes.&lt;/p&gt;

&lt;p&gt;Here is a link to the Product Hunt post if you are interested in checking out our new promo video, graphics, and comments. Feedback/support appreciated. &lt;a href="https://www.producthunt.com/posts/budibase"&gt;Visit Budibase on Product Hunt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, Budibase is now out of beta. You can get started with Budibase in just a few seconds. &lt;a href="https://budibase.com"&gt;Visit website&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Operationalising MLOps on AWS</title>
      <author>Joinal Ahmed Borbhuiya</author>
      <pubDate>Tue, 16 Nov 2021 07:57:44 +0000</pubDate>
      <link>https://dev.to/aws-builders/mlops-on-aws-236h</link>
      <guid>https://dev.to/aws-builders/mlops-on-aws-236h</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Purpose :&lt;/strong&gt;&lt;br&gt;
Machine learning development can be a complex and expensive process and there are barriers to adoption at every step of the machine learning workflow from data aggregation to preprocessing, which is time consuming and compute intensive, to choosing the right algorithm, which is often done by trial and error, to long running training cycles, which leads to increased costs. In this document we will discuss recommendations around provisioning a cost effective, manageable, secure, scalable, high performance, efficient, highly available, fault tolerant and recoverable  MLOps architecture that an organization can adopt to solve pain points around Collaboration, Scaling, Reproducibility, Testing, Monitoring, Security and deployment strategies around ML projects lifecycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background :&lt;/strong&gt;&lt;br&gt;
Data science and analytics teams are often seen operating between increasing business expectations and abstract environments developing into complex solutions. This makes it challenging to transform data into solid answers for stakeholders consistently. In such a situation, &lt;strong&gt;&lt;em&gt;How can teams overcome complexity and live up to the expectations placed on them and deliver business impacts?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
MLOps provides some answers, There is no one size fits all when it comes to implementing an MLOps solution on Amazon Web Services (AWS). Like any other technical solution, MLOps should be implemented to meet the project requirements. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Machine Learning Life Cycle&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
One way to categorize a machine learning platform's capabilities is through the machine learning life cycle stages. The typical ML life cycle can be described in the following nine steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azoxRekr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jizc2sbqbgzuqj6q0adi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azoxRekr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jizc2sbqbgzuqj6q0adi.png" alt="ML Life Cycle" width="715" height="431"&gt;&lt;/a&gt;&lt;br&gt;
Starting by &lt;em&gt;sourcing data&lt;/em&gt;, a data scientist will &lt;em&gt;explore and analyze&lt;/em&gt; it. The raw data is &lt;em&gt;transformed&lt;/em&gt; into valuable features, typically involving &lt;em&gt;scheduling and automation&lt;/em&gt; to do this regularly. The resultant features are &lt;em&gt;stored and managed&lt;/em&gt;, available for the various models and other data scientists to use. As part of the exploration, the data scientist will also &lt;em&gt;build, train, and evaluate&lt;/em&gt; multiple models. Promising models are &lt;em&gt;stored and deployed&lt;/em&gt; into production. The production models are then &lt;em&gt;served and monitored&lt;/em&gt; for a while. Typically, there are numerous competing models in production, and choosing between them or evaluating them is done via &lt;em&gt;experimentation&lt;/em&gt;. With the learnings of the production models, the data scientist iterates on new features and models.&lt;/p&gt;

&lt;p&gt;As an organization, Looking towards leveraging ML in various aspects in their business, from gathering insights on the products (based on reviews, tweets etc), build user experiences (recommendation, personalization) or create impactful solutions around healthcare, ecommerce etc, there are some major concerns around CI/CD, ML lifecycle, collaboration, monitoring, experiments tracking, testing, security and infrastructure that a MLOps platform should address and empower data scientists to create ML solutions that drive direct business impact. &lt;br&gt;
These solutions can range from simple analyses to production ML systems that serve millions of customers. The MLOps Platform aims to provide these users with a unified set of tools to develop and confidently deploy their ML solutions rapidly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Key Components of an MLOps Solution&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
    This section briefly discusses the key components for implementing an MLOps solution:&lt;br&gt;
    &lt;/p&gt;
&lt;ol&gt;

        &lt;li&gt;A &lt;strong&gt;version control system&lt;/strong&gt; to store, track, and version changes to ML code.&lt;/li&gt;

        &lt;li&gt;A &lt;strong&gt;version control system&lt;/strong&gt; to track and version changes to your datasets.&lt;/li&gt;

        &lt;li&gt;A &lt;strong&gt;network layer&lt;/strong&gt; that implements the necessary network resources to ensure the MLOps solution is secured.&lt;/li&gt;

        &lt;li&gt;An &lt;strong&gt;ML-based workload&lt;/strong&gt; to execute machine learning tasks. AWS  has a three-layered ML stack to choose from based on skill level.&lt;/li&gt;

        &lt;ol&gt;

            &lt;li&gt; &lt;em&gt;AI services:&lt;/em&gt; They are a fully managed set of services that enables users to quickly add ML capabilities to workloads using API calls. E.g: &lt;a href="https://aws.amazon.com/rekognition/"&gt; Amazon Rekognition&lt;/a&gt; and&lt;a href="https://aws.amazon.com/comprehend/"&gt; Amazon Comprehend&lt;/a&gt;.&lt;/li&gt;

            &lt;li&gt; &lt;em&gt;ML services:&lt;/em&gt; AWS provides managed services and resources (&lt;a href="https://aws.amazon.com/sagemaker/"&gt;Amazon SageMaker suite&lt;/a&gt;, for example) to enable users to label data and build, train, deploy, and operate ML models.&lt;/li&gt;

            &lt;li&gt; &lt;em&gt;ML frameworks and infrastructure:&lt;/em&gt; This is for  expert ML practitioners using open-source frameworks like TensorFlow, PyTorch, and Apache MXNet; Deep Learning AMI for Amazon EC2 instances; and Deep Learning Containers to implement own tools and workflows to build, train, and deploy the ML models.&lt;/li&gt;

        &lt;/ol&gt;

        &lt;li&gt; Use &lt;strong&gt;infrastructure as code (IaC)&lt;/strong&gt; to automate the provisioning and configuration of your cloud-based ML workloads and other IT infrastructure resources.&lt;/li&gt;

        &lt;li&gt;An &lt;strong&gt;ML (training/retraining) pipeline&lt;/strong&gt; to automate the steps required to train/retrain and deploy your ML models.&lt;/li&gt;

        &lt;li&gt;An &lt;strong&gt;orchestration tool&lt;/strong&gt; to orchestrate and execute your automated ML workflow steps.&lt;/li&gt;

        &lt;li&gt;A &lt;strong&gt;model monitoring solution&lt;/strong&gt; to monitor production models’ performance to protect against both model and data drift. You can also use the performance metrics as feedback to help improve the models’ future development and training. &lt;/li&gt;

        &lt;li&gt;A &lt;strong&gt;model governance framework&lt;/strong&gt; to make it easier to track, compare, and reproduce your ML experiments and secure your ML models.&lt;/li&gt;

        &lt;li&gt;A &lt;strong&gt;data platform&lt;/strong&gt; like&lt;a href="https://aws.amazon.com/s3/"&gt; Amazon Simple Storage Service&lt;/a&gt; (Amazon S3) to store your datasets.&lt;/li&gt;

        &lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Setting up a MLOps Pipeline&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Data science and analytics teams are often squeezed between increasing business expectations and sandbox environments evolving into complex solutions. This makes it challenging to transform data into solid answers for stakeholders consistently. &lt;br&gt;
The ML-based workloads should support  the reproducibility in any machine learning pipeline, which is central to any MLOps solution. The ML-based workload implementation choice can directly impact the design and implementation of any MLOps solution.&lt;br&gt;
If the ML capabilities required by your use cases can be implemented using the &lt;em&gt;AI services&lt;/em&gt;, then an MLOps solution is not required. For instance the business use case to track the sentiment of users from their social media content (tweets, facebook posts) which leverages AWS AI services like Comprehend and Translate to extract insights can be well supported with a minimal solution where an listener running on a Amazon EC2 instance ingesting tweets / posts and delivering them via Kinesis Data Firehose and storing the raw content in S3 bucket. Amazon S3 invokes an&lt;a href="https://aws.amazon.com/lambda/"&gt; AWS Lambda&lt;/a&gt; function to analyze the raw tweets using&lt;a href="https://aws.amazon.com/translate/"&gt; Amazon Translate&lt;/a&gt; to translate non-English tweets into English, and&lt;a href="https://aws.amazon.com/comprehend/"&gt; Amazon Comprehend&lt;/a&gt; to use natural-language-processing (NLP) to perform entity extraction and sentiment analysis.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5fIti5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpxut2karnrv6zjf7hfk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5fIti5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpxut2karnrv6zjf7hfk.png" alt="Usecase Architecture" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
A second Kinesis Data Firehose delivery stream loads the translated tweets and sentiment values into the &lt;em&gt;sentiment&lt;/em&gt; prefix in the Amazon S3 bucket. A third delivery stream loads &lt;em&gt;entities&lt;/em&gt; in the entities prefix using in the Amazon S3 bucket.&lt;br&gt;
This solution uses a data lake leveraging &lt;a href="https://aws.amazon.com/glue/"&gt;AWS Glue&lt;/a&gt; for data transformation,&lt;a href="https://aws.amazon.com/athena/"&gt; Amazon Athena&lt;/a&gt; for data analysis, and&lt;a href="https://aws.amazon.com/quicksight/"&gt; Amazon QuickSight&lt;/a&gt; for data visualization. AWS Glue Data Catalog contains a logical database which is used to organize the tables for the data on Amazon S3. Athena uses these table definitions to query the data stored on Amazon S3 and return the information to an Amazon QuickSight dashboard.&lt;br&gt;
On the other hand, if you use either the &lt;em&gt;ML services&lt;/em&gt; or &lt;em&gt;ML frameworks and infrastructure&lt;/em&gt;, we recommend you implement an MLOps solution regardless of the use case. The &lt;em&gt;ML services&lt;/em&gt; stack’s ease of use and support for various use cases makes it desirable for implementing any  ML-based pipeline.&lt;br&gt;
Also, since different model training and serving algorithms can alter aspects of the MLOps solution, there are three main options Amazon SageMaker provides when it comes to choosing your training algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use a built-in Amazon SageMaker algorithm or framework.&lt;/strong&gt; With this option, a training dataset is the only input developers and data scientists have to provide when training their models. On the other hand, the trained model artefacts are the only input they need to deploy the models. This is a good fit for scenarios where off-the-shelf solutions serve the purpose. .&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use pre-built Amazon SageMaker container images.&lt;/strong&gt; For this option, you need to provide two inputs to train your models, and they are your training scripts and datasets. Likewise, the inputs for deploying the trained models are your serving scripts and the trained model artefacts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extend a pre-built Amazon SageMaker container image, or adapt an existing container image.&lt;/strong&gt; This is for more advanced use cases. You are responsible for developing and maintaining those container images. Therefore, you may want to consider implementing a CI/CD pipeline to automate the building, testing, and publishing of the customized Amazon SageMaker container images and then integrate the pipeline with your MLOps solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can introduce some complexity to the MLOps solution, but it provides the flexibility to use custom and other third-party libraries to build and train models. This option’s training inputs are your training scripts, datasets and customized Docker image for Amazon SageMaker. Lastly, the inputs for model deployment are the trained model artefacts, serving scripts and customized Docker image for Amazon SageMaker.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Recommended MLOps Platform :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This recommended  architecture demonstrates how you can integrate the Amazon SageMaker container image CI/CD pipeline with your ML (training) pipeline.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Chr6nYTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ca3lpgv6b5w1hy7d9op.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Chr6nYTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ca3lpgv6b5w1hy7d9op.png" alt="MLOps Recommended Architecture" width="880" height="590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The components of the MLOps Platform architecture diagram are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A secured development environment was implemented using an Amazon SageMaker Notebook Instance deployed to a custom virtual private cloud (VPC), and secured by implementing security groups and routing the notebook’s internet traffic via the custom VPC. \
Also, the development environment has two Git repositories (AWS CodeCommit) attached: one for the Exploratory Data Analysis (EDA) code and the other for developing the custom Amazon SageMaker Docker container images.&lt;/li&gt;
&lt;li&gt;An ML CI/CD pipeline made up of three sub-components:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Data validation step&lt;/em&gt;&lt;/strong&gt; implemented using AWS Lambda and triggered using AWS CodeBuild.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Model training/retraining pipeline&lt;/em&gt;&lt;/strong&gt; implemented using Amazon SageMaker Pipelines (pipeline-as-code) and executed using CodeBuild.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Model deployment pipeline&lt;/em&gt;&lt;/strong&gt; that natively supports model rollbacks was implemented using AWS CloudFormation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, AWS CodePipeline is used to orchestrate the pipeline.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A CI/CD pipeline for developing and deploying the custom Amazon SageMaker Docker container image. This pipeline automatically triggers the ML pipeline when you successfully push a new version of the SageMaker container image, providing the following benefits:

&lt;ul&gt;
&lt;li&gt;Developers and data scientists can thoroughly test and get immediate feedback on the ML pipeline’s performance after publishing a new version of the Docker image. This helps ensure ML pipelines are adequately tested before promoting them to production.&lt;/li&gt;
&lt;li&gt;Developers and data scientists don’t have to manually update the ML pipeline to use the latest version of the customized Amazon SageMaker image when working on the develop git branch. They can branch off the develop branch if they want to use an older version or start developing a new version, which they will merge back to develop branch once approved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A model monitoring solution implemented using&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html"&gt; Amazon SageMaker Model Monitor&lt;/a&gt; to monitor the production models’ quality continuously. This provides monitoring for the following: data drift, model drift, the bias in the models’ predictions, and drifts in feature attributes. You can start with the default model monitor, which requires no coding.&lt;/li&gt;
&lt;li&gt;A model retraining implementation that is based on the metric-based model retraining strategy. There are three main retaining strategies available for your model retraining implementation:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Scheduled:&lt;/em&gt;&lt;/strong&gt; This kicks off the model retraining process at a scheduled time and can be implemented using an Amazon EventBridge scheduled event.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Event-driven:&lt;/em&gt;&lt;/strong&gt; This kicks off the model retraining process when a new model retraining dataset is made available and can be implemented using an EventBridge event.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Metric-based:&lt;/em&gt;&lt;/strong&gt; This is implemented by creating a Data Drift CloudWatch Alarm that triggers your model retraining process once it goes off, fully automating your correction action for a model drift.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A data platform can be implemented using Amazon S3 buckets, RDS or Feast with versioning enabled.&lt;/li&gt;
&lt;li&gt;A model governance framework, which is not obvious from the architectural diagram and is made of the following components:

&lt;ul&gt;
&lt;li&gt;A model registry for versioning and tracking the trained model artefacts, implemented using Amazon SageMaker Model Registry.&lt;/li&gt;
&lt;li&gt;Dataset versioning implemented using Amazon S3 bucket versioning.&lt;/li&gt;
&lt;li&gt;ML workflow steps auditability, visibility, and reproducibility implemented using Amazon SageMaker Lineage Tracking.&lt;/li&gt;
&lt;li&gt;Secured trained model artefacts implemented using AWS Identity and Access Management (IAM) roles to ensure only authorized individuals have access.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;People in MLOps :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;
&lt;strong&gt;&lt;em&gt;Rold&lt;/em&gt;&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;strong&gt;&lt;em&gt;Role in ML Life Cycle&lt;/em&gt;&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;strong&gt;&lt;em&gt;MLOps Requirements&lt;/em&gt;&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
&lt;strong&gt;&lt;em&gt;Data Scientists&lt;/em&gt;&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Build models that address the business question or needs brought by subject matter experts.

&lt;/li&gt;
&lt;li&gt;Deliver operationalizable models so that they can be properly used in the production environment and with production data.

&lt;/li&gt;
&lt;li&gt;Assess model quality (of both original and tests) in tandem with subject matter experts to ensure they answer initial business questions or needs.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Automated model packaging and delivery for quick and easy deployment to production.

&lt;/li&gt;
&lt;li&gt;Ability to develop tests to determine the quality of deployed models and to make continual improvements.

&lt;/li&gt;
&lt;li&gt;Visibility into the performance of all deployed models from one central location.

&lt;/li&gt;
&lt;li&gt;Ability to investigate data pipelines of each model to make quick assessments and adjustments regardless of who originally built the model.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
&lt;strong&gt;&lt;em&gt;Data Engineers&lt;/em&gt;&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Optimize the retrieval and use of data to power ML models.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Visibility into performance of all deployed models.

&lt;/li&gt;
&lt;li&gt;Ability to see the full details of individual data pipelines to address underlying data plumbing issues.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
&lt;strong&gt;&lt;em&gt;Software Engineers&lt;/em&gt;&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Integrate ML models in the company’s applications and systems.

&lt;/li&gt;
&lt;li&gt;Ensure that ML models work seamlessly with other non-ML based applications.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Versioning and automatic tests.

&lt;/li&gt;
&lt;li&gt;The ability to work in parallel on the same application.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
&lt;strong&gt;&lt;em&gt;ML Architects&lt;/em&gt;&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Ensure a scalable and flexible environment for ML model pipelines, from design to development and monitoring.

&lt;/li&gt;
&lt;li&gt;Introduce new technologies when appropriate that improve ML model performance in production.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;High-level overview of models and their resources consumed.

&lt;/li&gt;
&lt;li&gt;Ability to drill down into data pipelines to assess and adjust infrastructure needs.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
&lt;strong&gt;&lt;em&gt;SRE&lt;/em&gt;&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Conduct and build operational systems and test for security, performance, availability.

&lt;/li&gt;
&lt;li&gt;Continuous Integration/Continuous Delivery pipeline management.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
   &lt;td&gt;
&lt;ul&gt;

&lt;li&gt;Seamless integration of MLOps into the larger DevOps strategy of the enterprise.

&lt;/li&gt;
&lt;li&gt;Seamless deployment pipeline.
&lt;/li&gt;
&lt;/ul&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;References :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/solutions/implementations/aws-mlops-framework/"&gt;AWS MLOps Framework | Implementations | AWS Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.halodoc.io/halodoc-ml-platform/"&gt;Harnessing the power of Machine Learning to fuel the growth of Halodoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@pradeep.natarajan2012/mlops-with-amazon-web-services-754758ecc1df"&gt;MLOPs with Amazon Web Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/sagemaker/index.html"&gt;Amazon SageMaker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/introducing-mlops/9781492083283/"&gt;Introducing MLOps [Book]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ml-ops.org/"&gt;ML Ops: Machine Learning Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/a-practical-guide-to-mlops-in-aws-sagemaker-part-i-1d28003f565"&gt;A Practical Guide to MLOps in AWS Sagemaker — Part I&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>aws</category>
      <category>datascience</category>
      <category>devops</category>
    </item>
    <item>
      <title>CSS Animation Simplified!</title>
      <author>Ansub Khan</author>
      <pubDate>Tue, 16 Nov 2021 07:52:27 +0000</pubDate>
      <link>https://dev.to/ansub/css-animation-simplified-2g0i</link>
      <guid>https://dev.to/ansub/css-animation-simplified-2g0i</guid>
      <description>&lt;p&gt;CSS animations are a module that lets you animate the element which changes the element from one style to another. and to use the CSS animation we use &lt;code&gt;@keyframes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;before talking about animation, let us make two boxes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;.parent{}&lt;/code&gt; - this is going to create a box &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.child{}&lt;/code&gt; - this is going to create a small box inside the parent.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: container class is here to make the box come to the center for easier visibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;214&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;124&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uydFkQQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx7rtl1em520hr7cu9fi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uydFkQQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx7rtl1em520hr7cu9fi.png" alt="css-animation-box" width="836" height="888"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transition-property"&gt;
  &lt;/a&gt;
  Transition Property
&lt;/h3&gt;

&lt;p&gt;let's move our box from left to right, for that we don't have to use the animation and keyframe property because the animation of moving a box from left to right is quite simple easy and a one-step process. because the object is moving from left to right that's it.&lt;/p&gt;

&lt;p&gt;so that's why we use transition property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is going to make to move the child box from left to right when you are going to hover on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/0rmw6M3h"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57KFKJ3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.postimg.cc/DfpdM1cf/7065468b160fdfdcf3cb3cc4ad9eb96bf5349b3b.gif" alt="7065468b160fdfdcf3cb3cc4ad9eb96bf5349b3b.gif" width="862" height="800"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;syntax of transition property is like:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;transition-property&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;transition-duration&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;transition-timing-function&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;transition-delay&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;transition property&lt;/strong&gt; : it is used to specify which specific property you have to change.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;transition-duration&lt;/strong&gt;: this determines the duration of the transition&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;transition-timing-function&lt;/strong&gt;: this is used to define a function that describes how a transition will proceed over its duration, allowing a transition to change speed during its course. learn more about &lt;a href="https://css-tricks.com/almanac/properties/t/transition-timing-function/"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;transition-duration&lt;/strong&gt;: it is used to define a length of time to delay the start of a transition.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;but what if we want to make the child circle around the parent box?&lt;/strong&gt;&lt;br&gt;
now here comes the role of &lt;code&gt;animation&lt;/code&gt; property&lt;/p&gt;

&lt;p&gt;animation also has a lot of properties but we can use a shorthand &lt;code&gt;animation&lt;/code&gt; to include all the properties. so let's get started:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;left-to-right&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;left-to-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;first you will see that the animation actually has a name "left-to-right" and then i am using that same name in the keyframe. this is to determine that animation is going to apply on that exact keyframes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;second is that you will find forwards, it actually comes from &lt;code&gt;animation-fill-mode&lt;/code&gt; property which is actually saying that you have to stop the animation at 100% otherwise what animation is going to do is that it will reset the animation when it will reach to 100% and the box will come again to 0%.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#subproperties-of-animation"&gt;
  &lt;/a&gt;
  Sub-Properties of Animation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;animation-name&lt;/strong&gt;: declares the name of the @keyframes at-rule to manipulate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animation-duration&lt;/strong&gt;: the length of time it takes for an animation to complete one cycle.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animation-timing-function&lt;/strong&gt;: establishes preset acceleration curves such as ease or linear.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animation-delay&lt;/strong&gt;: the time between the element being loaded and the start of the animation sequence (cool examples).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animation-direction&lt;/strong&gt;: sets the direction of the animation after the cycle. Its default resets on each cycle.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animation-iteration-count&lt;/strong&gt;: the number of times the animation should be performed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animation-fill-mode&lt;/strong&gt;: sets which values are applied before/after the animation.
For example, you can set the last state of the animation to remain on screen, or you can set it to switch back to before when the animation began.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animation-play-state&lt;/strong&gt;: pause/play the animation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and this will be the result: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/BtpGCsjN"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4nHysMf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.postimg.cc/X7S74Y4M/ezgif-6-cc307b2c5c6b.gif" alt="ezgif-6-cc307b2c5c6b.gif" width="600" height="557"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;so that's CSS Animation for you, this is actually quite the basics of animation there is a lot more to CSS Animations, I will provide some links which can help you become a PRO in CSS Animations:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/almanac/properties/a/animation/"&gt;CSS Tricks Animation Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zHUpx90NerM&amp;amp;ab_channel=TraversyMedia"&gt;CSS3 Animation &amp;amp; Transitions Crash Course&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect With Me!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/justansub"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opAxX3tY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Twitter-1DA1F2%3Fstyle%3Dfor-the-badge%26logo%3Dtwitter%26logoColor%3Dwhite" width="100" height="28"&gt; &lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://ansubkhan.com"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhRPtQbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/website-000000%3Fstyle%3Dfor-the-badge%26logo%3DAbout.me%26logoColor%3Dwhite" width="104" height="28"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/ansub"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imBRhTaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/LinkedIn-0077B5%3Fstyle%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" width="107" height="28"&gt; &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansub"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K6IT_-ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/dev.to-0A0A0A%3Fstyle%3Dfor-the-badge%26logo%3Ddevdotto%26logoColor%3Dwhite" width="93" height="28"&gt; &lt;/a&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Build a Discord stage channel clone with 100ms and Next.js</title>
      <author>Arpit Mishra</author>
      <pubDate>Tue, 16 Nov 2021 07:26:30 +0000</pubDate>
      <link>https://dev.to/100mslive/build-a-discord-stage-channel-clone-with-100ms-and-nextjs-5heb</link>
      <guid>https://dev.to/100mslive/build-a-discord-stage-channel-clone-with-100ms-and-nextjs-5heb</guid>
      <description>&lt;p&gt;Ever since the Clubhouse app rose to fame, the popularity of drop-in audio-only rooms has been increasing sharply and adopted by several platforms such as Slack, Twitter, and Discord. These rooms are great for hosting Q&amp;amp;A sessions, panel discussions, and a lot more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This content was originally published - &lt;a href="https://www.100ms.live/blog/build-discord-stage-channel-clone-hms"&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Earlier this year, Discord introduced Stages, an audio-only channel to engage with your Discord community with separation between speakers and audience. In this blog, we’ll learn how to build a similar platform painlessly with 100ms.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-well-be-building"&gt;
  &lt;/a&gt;
  What We’ll Be Building
&lt;/h4&gt;

&lt;p&gt;Using the 100ms React SDK, we’ll build our custom audio room application that will mimic these features from Discord &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stages:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Allow the user to join as a speaker, listener, or a moderator.&lt;br&gt;
Speakers and moderators will have the permission to mute or unmute themselves.&lt;/p&gt;

&lt;p&gt;Listeners will only be able to listen to the conversation, raise their hand to become a speaker, or leave the room.&lt;br&gt;
Moderators will be allowed to mute anyone and change the role of a person to speaker or listener.&lt;/p&gt;

&lt;p&gt;By the end of this blog, you can expect to build an application like this with Next.js (a React framework) and 100ms SDK:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXTeoyAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsusqlmrfdblvkcqswih.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXTeoyAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsusqlmrfdblvkcqswih.gif" alt="How this would look" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only prerequisites for building this project is a fundamental understanding of Next.js and React hooks. The Next.js documentation is a great place to start reading about how Next.js works, but you can still follow along if you’ve only used React in the past.&lt;/p&gt;

&lt;p&gt;Familiarity with Flux-based architecture is a bonus but not a necessity, and no prior knowledge of WebRTC is required. How wonderful is that!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the Project
&lt;/h4&gt;

&lt;p&gt;Before diving right into the code, create a 100ms account from the 100ms Dashboard to get your &lt;code&gt;token_endpoint&lt;/code&gt; and &lt;code&gt;room_id&lt;/code&gt;. We’ll be needing these credentials in the later stages of building the application.&lt;/p&gt;

&lt;p&gt;Once you’ve created an account, follow the steps given below to create your application and set it up on the 100ms dashboard:&lt;/p&gt;

&lt;p&gt;Defining Roles&lt;/p&gt;

&lt;p&gt;We’ll be having four roles in our application: &lt;code&gt;listener&lt;/code&gt;, &lt;code&gt;speaker&lt;/code&gt;, &lt;code&gt;handraise&lt;/code&gt;, and &lt;code&gt;moderator&lt;/code&gt;. Let’s set up permissions for each of these roles, starting with the listener role.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;listener&lt;/code&gt; role, we can turn off all the publish strategies as we don’t want listeners to share their audio, video, or screen. Listeners will still be able to listen to others’ audio.&lt;/p&gt;

&lt;p&gt;Inside the permissions section, uncheck all the options except for &lt;code&gt;Can change any participant's role permission&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dV615aiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uw4ads5vonfkmlnqlpq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dV615aiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4uw4ads5vonfkmlnqlpq.png" alt="Second image" width="880" height="1188"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;handraise&lt;/code&gt; role, we can again turn off all the publish strategies and just keep the &lt;code&gt;Can change any participant's role&lt;/code&gt; permission turned on. This permission will allow us to switch the user from &lt;code&gt;listener&lt;/code&gt; role to handraise role, and vice-versa, and help us to to implement the hand-raise functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_xOdTXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otruy82btlufdml1hlbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_xOdTXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otruy82btlufdml1hlbd.png" alt="Third image" width="880" height="1186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a &lt;code&gt;listener&lt;/code&gt; wants to become a &lt;code&gt;speaker&lt;/code&gt;, they can click on the hand-raise button that will change their role to &lt;code&gt;handraise&lt;/code&gt;. When the user's role is &lt;code&gt;handraise&lt;/code&gt;, we'll display a small badge next to their avatar to notify the moderator.&lt;/p&gt;

&lt;p&gt;Now for the &lt;code&gt;speaker&lt;/code&gt; role, since we’re building an audio-only room, we can just check the &lt;code&gt;Can share audio&lt;/code&gt; publish strategy and leave the rest of them unchecked. We can leave all the permissions turned off for the &lt;code&gt;speaker&lt;/code&gt; role.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZa31Qi8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gmispxcr8aqfsrjousl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZa31Qi8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gmispxcr8aqfsrjousl.png" alt="Fourth Image" width="880" height="1187"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, for the &lt;code&gt;moderator&lt;/code&gt; role, we can check the Can share audio publish strategy and move on towards the permissions. In the permissions section, turn on the &lt;code&gt;Can change any participant's role&lt;/code&gt; permission and the &lt;code&gt;Can mute any participant&lt;/code&gt; permission.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLipxbcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hn32dt1rz0thbwwzjf9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLipxbcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hn32dt1rz0thbwwzjf9k.png" alt="Fifth Image" width="880" height="1186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For all the roles, set the subscribe strategies to &lt;code&gt;speaker&lt;/code&gt; and &lt;code&gt;moderator&lt;/code&gt;. And with that, we’re ready to move on and get the required credentials from the 100ms Dashboard.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#getting-the-tokenenpoint"&gt;
  &lt;/a&gt;
  Getting the token_enpoint
&lt;/h5&gt;

&lt;p&gt;Once you’re done creating your custom application and setting up the roles, head on over to the &lt;a href="https://dashboard.100ms.live/developer"&gt;Developers tab&lt;/a&gt; to get your token endpoint URL. Keep this URL handy. We’ll store this URL inside an environment variable shortly in the upcoming sections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYpIx3Zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozec8p0as5z6cst03nvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYpIx3Zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozec8p0as5z6cst03nvu.png" alt="Sixth Image" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#getting-the-raw-roomid-endraw-"&gt;
  &lt;/a&gt;
  Getting the &lt;code&gt;room_id&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;To obtain the room ID, head on over the &lt;a href="https://dashboard.100ms.live/rooms"&gt;Rooms tab&lt;/a&gt; on 100ms Dashboard. If you don’t have an existing room, you can go ahead and create one to get its ID. Otherwise, copy the room ID of an existing room and paste it somewhere for now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IvZMpbKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qonnhlp9ny6vvqqqenlg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IvZMpbKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qonnhlp9ny6vvqqqenlg.png" alt="Seventh Image" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#understanding-the-terminologies"&gt;
  &lt;/a&gt;
  Understanding the Terminologies
&lt;/h5&gt;

&lt;p&gt;I know you’re excited to start coding, but let’s take a moment to understand the key terminologies associated with the 100ms SDK so that we’re on the same page.&lt;/p&gt;

&lt;p&gt;Room — A room is the basic object that 100ms SDKs return on successful connection. This contains references to peers, tracks and everything you need to render a live audio/video app.&lt;/p&gt;

&lt;p&gt;Peer — A peer is the object returned by 100ms SDKs that contains all information about a user — name, role, video track etc.&lt;/p&gt;

&lt;p&gt;Track — A track represents either the audio or video that a peer is publishing.&lt;/p&gt;

&lt;p&gt;Role — A role defines who a peer can see/hear, the quality at which they publish their video, whether they have permissions to publish video/screenshare, mute someone, change someone’s role.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#an-overview-of-the-starter-code"&gt;
  &lt;/a&gt;
  An Overview of the Starter Code
&lt;/h5&gt;

&lt;p&gt;To ease the development process, you can grab the starter code with prebuilt components and styling by cloning the &lt;code&gt;template&lt;/code&gt; branch of this repo with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone -b template https://github.com/itsnitinr/discord-stages-clone-100ms.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This starter code is built using the Create Next App CLI tool with the Tailwind CSS template. All the dependencies required for this building this project, such as the &lt;code&gt;@100mslive/hms-video&lt;/code&gt; and &lt;code&gt;@100mslive/hms-video-react&lt;/code&gt; SDK have already been added to the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Therefore, make sure to run &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;yarn install&lt;/code&gt; to install these dependencies locally before moving forward.&lt;/p&gt;

&lt;p&gt;Remember the token endpoint URL and room ID we had saved earlier? It’s time to transfer them to an environment variable file. The starter code comes with an &lt;code&gt;.env.local.example&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cp .env.local.example .env.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run this command to copy this example env file and create an actual one:&lt;br&gt;
Now, add the token endpoint URL and room ID to this &lt;code&gt;.env.local&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .env.local
TOKEN_ENDPOINT = &amp;lt;YOUR-TOKEN-ENDPOINT-URL&amp;gt;
ROOM_ID = &amp;lt;YOUR-ROOM-ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the Next.js development server, run the &lt;code&gt;dev&lt;/code&gt; script in this manner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
#or
yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;a href="http://localhost:3000/"&gt;http://localhost:3000&lt;/a&gt; on your browser and you’ll be greeted with this screen if everything goes well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZJ1nMWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m40ttx6d10b74uu0cuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZJ1nMWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m40ttx6d10b74uu0cuy.png" alt="Eigth Image" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fantastic! Let’s start implementing the features one by one in the upcoming sections.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#building-the-project"&gt;
  &lt;/a&gt;
  Building the project
&lt;/h5&gt;

&lt;p&gt;Before we can start using the hooks, selectors, or store from the 100ms React SDK, we will need to wrap our entire application with &lt;code&gt;&amp;lt;HMSRoomProvider /&amp;gt;&lt;/code&gt; component from the &lt;code&gt;@100mslive/hms-video-react package&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how your code should look like once you’ve completed this step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// pages/index.js

import { HMSRoomProvider } from '@100mslive/hms-video-react';
import Head from 'next/head';

import Join from '../components/Join';
import Room from '../components/Room';

const StagesApp = () =&amp;gt; {
  const isConnected = false;
  return isConnected ? &amp;lt;Room /&amp;gt; : &amp;lt;Join /&amp;gt;;
};

const App = () =&amp;gt; {
  return (
    &amp;lt;HMSRoomProvider&amp;gt;
      &amp;lt;Head&amp;gt;
        &amp;lt;title&amp;gt;Discord Stages Clone&amp;lt;/title&amp;gt;
      &amp;lt;/Head&amp;gt;
      &amp;lt;StagesApp /&amp;gt;
    &amp;lt;/HMSRoomProvider&amp;gt;
  );
};

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#joining-a-room"&gt;
  &lt;/a&gt;
  Joining a Room
&lt;/h5&gt;

&lt;p&gt;Right now, we’re conditionally rendering either the &lt;code&gt;&amp;lt;Room /&amp;gt;&lt;/code&gt; component or the &lt;code&gt;&amp;lt;Join /&amp;gt;&lt;/code&gt; component based on the isConnected variable. However, its value has been hardcoded to be false for now.&lt;/p&gt;

&lt;p&gt;To check if the user is connected to a room or not, we can use the &lt;code&gt;selectIsConnectedToRoom&lt;/code&gt; selector and &lt;code&gt;useHMSStore&lt;/code&gt; hook like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// pages/index.js

import { HMSRoomProvider,
  useHMSStore,
  selectIsConnectedToRoom,
} from '@100mslive/hms-video-react';
import Head from 'next/head';

import Join from '../components/Join';
import Room from '../components/Room';

const StagesApp = () =&amp;gt; {
  const isConnected = useHMSStore(selectIsConnectedToRoom);
  return isConnected ? &amp;lt;Room /&amp;gt; : &amp;lt;Join /&amp;gt;;
};

const App = () =&amp;gt; {
  return (
    &amp;lt;HMSRoomProvider&amp;gt;
      &amp;lt;Head&amp;gt;
        &amp;lt;title&amp;gt;Discord Stages Clone&amp;lt;/title&amp;gt;
      &amp;lt;/Head&amp;gt;
      &amp;lt;StagesApp /&amp;gt;
    &amp;lt;/HMSRoomProvider&amp;gt;
  );
};

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the user will not be connected to any room, and hence, the &lt;code&gt;&amp;lt;Join /&amp;gt;&lt;/code&gt; component will be rendered. Let’s implement the functionality to join a room inside the &lt;code&gt;components/Join.jsx file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To join a room, we can use the join() method on the &lt;code&gt;hmsActions&lt;/code&gt; object returned by the &lt;code&gt;useHMSActions() hook&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This &lt;code&gt;join(&lt;/code&gt;) method takes an object containing the userName, authToken and an optional settings object as the parameter.&lt;/p&gt;

&lt;p&gt;We can get the &lt;code&gt;userName&lt;/code&gt; from the local &lt;code&gt;name&lt;/code&gt; state variable created using the &lt;code&gt;useState()&lt;/code&gt; hook from React. However, to obtain the &lt;code&gt;authToken&lt;/code&gt;, we will need to make a network request to our custom Next.js API route along with the role we want to join the room with.&lt;/p&gt;

&lt;p&gt;We’re also tracking the role the user has selected using the local role state variable, similar to &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can find the API route inside the &lt;code&gt;pages/api/token.js&lt;/code&gt; file. Here’s how it will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// pages/api/token.js

import { v4 } from 'uuid';

export default async function getAuthToken(req, res) {
  try {
    const { role } = JSON.parse(req.body);

    const response = await fetch(`${process.env.TOKEN_ENDPOINT}api/token`, {
      method: 'POST',
      body: JSON.stringify({
        user_id: v4(),
        room_id: process.env.ROOM_ID,
        role,
      }),
    });

    const { token } = await response.json();
    res.status(200).json({ token });
  } catch (error) {
    console.log('error', error);
    res.status(500).json({ error });
  }
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essentially, this API route makes a &lt;code&gt;POST&lt;/code&gt; request to our 100ms &lt;code&gt;token endpoint URL&lt;/code&gt;, which is stored inside the environment variables, along with a unique &lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;role&lt;/code&gt;, and the &lt;code&gt;room_id&lt;/code&gt;, which is also stored inside the environment variables.&lt;/p&gt;

&lt;p&gt;If successful, our Next.js API route will return the &lt;code&gt;authToken&lt;/code&gt;. Using this &lt;code&gt;authToken&lt;/code&gt;, we can join the &lt;code&gt;room&lt;/code&gt;. Since we don’t want the user to join with their mic turned on, we can set &lt;code&gt;isAudioMuted&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; inside the optional settings object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/Join.jsx

import Image from 'next/image';
import { useState } from 'react';
import Avatar from 'boring-avatars';
import { useHMSActions } from '@100mslive/hms-video-react';

import NameInput from './Join/NameInput';
import RoleSelect from './Join/RoleSelect';
import JoinButton from './Join/JoinButton';

const Join = () =&amp;gt; {
  const hmsActions = useHMSActions();

  const [name, setName] = useState('');
  const [role, setRole] = useState('listener');

  const joinRoom = async () =&amp;gt; {
    try {
      const response = await fetch('/api/token', {
        method: 'POST',
        body: JSON.stringify({ role }),
      });
      const { token } = await response.json();
      hmsActions.join({
        userName: name || 'Anonymous',
        authToken: token,
        settings: {
          isAudioMuted: true,
        },
      });
    } catch (error) {
      console.error(error);
    }
  };

  return (
    &amp;lt;&amp;gt;
      &amp;lt;Image
        src="https://imgur.com/27iLD4R.png"
        alt="Login background"
        className="w-screen h-screen object-cover relative"
        layout="fill"
      /&amp;gt;
      &amp;lt;div className="bg-gray-800 rounded-lg w-11/12 md:w-1/2 lg:w-1/3 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 p-8 text-white shadow-lg space-y-4 flex flex-col items-center max-w-md"&amp;gt;
        &amp;lt;Avatar name={name} variant="marble" size="72" /&amp;gt;
        &amp;lt;NameInput name={name} setName={setName} /&amp;gt;
        &amp;lt;RoleSelect role={role} setRole={setRole} /&amp;gt;
        &amp;lt;JoinButton joinRoom={joinRoom} /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default Join;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECf2npn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fucux02tmf02t55p9gcb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECf2npn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fucux02tmf02t55p9gcb.gif" alt="Ninth image" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And with just a few lines of code, we have implemented the functionality to join a room and render the &lt;code&gt;&amp;lt;Room /&amp;gt;&lt;/code&gt; component. Now, let’s move forward and render the peers connected to our room.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#rendering-the-peers"&gt;
  &lt;/a&gt;
  Rendering The Peers
&lt;/h5&gt;

&lt;p&gt;Right now, if you view the &lt;code&gt;&amp;lt;Room /&amp;gt;&lt;/code&gt; component inside the &lt;code&gt;components/Room.jsx&lt;/code&gt; file, you can see that we have hardcoded the value of peers to an empty array.Let’s make this dynamic.&lt;/p&gt;

&lt;p&gt;To do that, we can use the &lt;code&gt;selectPeers selector&lt;/code&gt; combined with the &lt;code&gt;useHMSStore()&lt;/code&gt; hook to get an array of all the peers connected to the room in the form of objects. Each of these peer objects will contain information such as their &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;roleName&lt;/code&gt; that we can use to render their tiles accordingly.&lt;/p&gt;

&lt;p&gt;Once we get an array of all the peers, we can use the &lt;code&gt;filter()&lt;/code&gt; JavaScript array method to separate them into &lt;code&gt;listenersAndHandraised&lt;/code&gt; and &lt;code&gt;speakersAndModerators&lt;/code&gt; using the &lt;code&gt;roleName&lt;/code&gt; property on each peer object. This will help us render the appropriate tile based on the user’s role.&lt;/p&gt;

&lt;p&gt;If the role of the user is a &lt;code&gt;listener&lt;/code&gt; or &lt;code&gt;handraise&lt;/code&gt;, we will render the &lt;code&gt;&amp;lt;ListenerTile /&amp;gt;&lt;/code&gt; component. Else, we will render the &lt;code&gt;&amp;lt;SpeakerTile /&amp;gt;&lt;/code&gt; component. While rendering these tiles, pass the &lt;code&gt;peer&lt;/code&gt; object as a prop in order to display the peer’s information inside the tiles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/Room.jsx

import { selectPeers, useHMSStore } from '@100mslive/hms-video-react';

import RoomInfo from './Room/RoomInfo';
import Controls from './Room/Controls';
import ListenerTile from './User/ListenerTile';
import SpeakerTile from './User/SpeakerTile';

const Room = () =&amp;gt; {
  const peers = useHMSStore(selectPeers);

  const speakersAndModerators = peers.filter(
    (peer) =&amp;gt; peer.roleName === 'speaker' || peer.roleName === 'moderator'
  );
  const listenersAndHandraised = peers.filter(
    (peer) =&amp;gt; peer.roleName === 'listener' || peer.roleName === 'handraise'
  );

  return (
    &amp;lt;div className="flex flex-col bg-main text-white min-h-screen p-6"&amp;gt;
      &amp;lt;RoomInfo count={peers.length} /&amp;gt;
      &amp;lt;div className="flex-1 py-8"&amp;gt;
        &amp;lt;h5 className="uppercase text-sm text-gray-300 font-bold mb-8"&amp;gt;
          Speakers - {speakersAndModerators.length}
        &amp;lt;/h5&amp;gt;
        &amp;lt;div className="flex space-x-6 flex-wrap"&amp;gt;
          {speakersAndModerators.map((speaker) =&amp;gt; (
            &amp;lt;SpeakerTile key={speaker.id} peer={speaker} /&amp;gt;
          ))}
        &amp;lt;/div&amp;gt;
        &amp;lt;h5 className="uppercase text-sm text-gray-300 font-bold my-8"&amp;gt;
          Listeners - {listenersAndHandraised.length}
        &amp;lt;/h5&amp;gt;
        &amp;lt;div className="flex space-x-8 flex-wrap"&amp;gt;
          {listenersAndHandraised.map((listener) =&amp;gt; (
            &amp;lt;ListenerTile key={listener.id} peer={listener} /&amp;gt;
          ))}
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;Controls /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Room;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKV9Qbbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clv1bfvvhnd87j3m60o7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cKV9Qbbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clv1bfvvhnd87j3m60o7.gif" alt="Tenth Image" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;RoomInfo /&amp;gt;&lt;/code&gt; component takes a count prop with the total number of peers connected to the rooms as its value. For the speakers and listeners headings, we can access the length property of &lt;code&gt;speakersAndModerators&lt;/code&gt; and &lt;code&gt;listenersAndHandraised&lt;/code&gt; array, respectively, to get their count.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#adding-functionalities-to-the-controls"&gt;
  &lt;/a&gt;
  Adding Functionalities To The Controls
&lt;/h5&gt;

&lt;p&gt;Let’s go to the &lt;code&gt;&amp;lt;Controls /&amp;gt;&lt;/code&gt; component inside &lt;code&gt;components/Room/Controls.jsx&lt;/code&gt;. Essentially, we will be having three controls: one to toggle our mic on or off, one to toggle hand-raise, and lastly to leave the room. We'll cover the hand-raise functionality in the latter part of this blog post.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;MicButton /&amp;gt;&lt;/code&gt; component responsible for the toggle mic functionality will only be displayed to the speakers and moderators whereas, the &lt;code&gt;&amp;lt;ExitButton /&amp;gt;&lt;/code&gt; component will be displayed to all roles.&lt;/p&gt;

&lt;p&gt;We need to check if our role and if our mic is turned on or not to render the buttons accordingly. To do this, use the &lt;code&gt;selectIsLocalAudioEnabled&lt;/code&gt; selector to get the status of our mic, and the &lt;code&gt;selectLocalPeer&lt;/code&gt; selector to get our local peer object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/Room/Controls.jsx

import {
  useHMSStore,
  selectIsLocalAudioEnabled,
  selectLocalPeer,
} from '@100mslive/hms-video-react';

import MicButton from './MicButton';
import ExitButton from './ExitButton';
import HandRaiseButton from './HandRaiseButton';

const Controls = () =&amp;gt; {
  const isMicOn = useHMSStore(selectIsLocalAudioEnabled);
  const peer = useHMSStore(selectLocalPeer);

  const isListenerOrHandraised =
    peer.roleName === 'listener' || peer.roleName === 'handraise';

  return (
    &amp;lt;div className="flex justify-center space-x-4"&amp;gt;
      {!isListenerOrHandraised &amp;amp;&amp;amp; (
        &amp;lt;MicButton isMicOn={isMicOn} toggleMic={() =&amp;gt; {}} /&amp;gt;
      )}
      {isListenerOrHandraised &amp;amp;&amp;amp; (
        &amp;lt;HandRaiseButton
          isHandRaised={peer.roleName === 'handraise'}
          toggleHandRaise={() =&amp;gt; {}}
        /&amp;gt;
      )}
      &amp;lt;ExitButton exitRoom={() =&amp;gt; {}} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Controls;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to add the functionalities, start by creating a new instance of the &lt;code&gt;useHMSActions()&lt;/code&gt; hook and store it inside &lt;code&gt;hmsActions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Call the &lt;code&gt;setLocalAudioEnabled()&lt;/code&gt; method on the &lt;code&gt;hmsActions&lt;/code&gt; object inside the &lt;code&gt;toggleMic&lt;/code&gt; prop of the &lt;code&gt;&amp;lt;MicButton /&amp;gt;&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;This method takes a boolean value: &lt;code&gt;true&lt;/code&gt; for turning on the mic and &lt;code&gt;false&lt;/code&gt; for turning it off. Since we want to toggle, we can pass the opposite of current status using the ! operator.&lt;/p&gt;

&lt;p&gt;To exit the room, we can simply call the &lt;code&gt;leave()&lt;/code&gt; method on the &lt;code&gt;hmsActions&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/Room/Controls.jsx

import {
  useHMSStore,
  useHMSActions,
  selectIsLocalAudioEnabled,
  selectLocalPeer,
} from '@100mslive/hms-video-react';

import MicButton from './MicButton';
import ExitButton from './ExitButton';
import HandRaiseButton from './HandRaiseButton';

const Controls = () =&amp;gt; {
  const hmsActions = useHMSActions();
  const isMicOn = useHMSStore(selectIsLocalAudioEnabled);
  const peer = useHMSStore(selectLocalPeer);

  const isListenerOrHandraised =
    peer.roleName === 'listener' || peer.roleName === 'handraise';

  return (
    &amp;lt;div className="flex justify-center space-x-4"&amp;gt;
      {!isListenerOrHandraised &amp;amp;&amp;amp; (
        &amp;lt;MicButton
          isMicOn={isMicOn}
          toggleMic={() =&amp;gt; hmsActions.setLocalAudioEnabled(!isMicOn)}
        /&amp;gt;
      )}
      {isListenerOrHandraised &amp;amp;&amp;amp; (
        &amp;lt;HandRaiseButton
          isHandRaised={peer.roleName === 'handraise'}
          toggleHandRaise={() =&amp;gt; {}}
        /&amp;gt;
      )}
      &amp;lt;ExitButton exitRoom={() =&amp;gt; hmsActions.leave()} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Controls;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t92BwPFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv3q4hd66px6tcjq63pu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t92BwPFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv3q4hd66px6tcjq63pu.gif" alt="Eleventh Image" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#displaying-audio-level-and-mic-status"&gt;
  &lt;/a&gt;
  Displaying Audio Level and Mic Status
&lt;/h5&gt;

&lt;p&gt;When a user is speaking, we want to display a green ring just outside the user’s avatar to indicate the same. This will require us to know the audio level of the speaker, but how can we find that out? With 100ms React SDK, it is as simple as using the &lt;code&gt;selectPeerAudioByID&lt;/code&gt; selector.&lt;/p&gt;

&lt;p&gt;This selector function takes the peer’s ID as the parameter and returns an integer to represent the audio level. We can assign it to a variable and check if it is greater than 0 to check if the user is speaking.&lt;/p&gt;

&lt;p&gt;Similarly, to check if a user’s mic is turned on or not, we can use the &lt;code&gt;selectIsPeerAudioEnabled&lt;/code&gt; selector, which also takes the peer’s ID as the parameter and returns a boolean value to indicate the mic status.&lt;/p&gt;

&lt;p&gt;Using these two selectors, we can render the UI accordingly by adding a ring using Tailwind CSS classes and displaying the appropriate icon. Go to the &lt;code&gt;&amp;lt;SpeakerTile /&amp;gt;&lt;/code&gt; component inside &lt;code&gt;components/User/SpeakerTile.jsx&lt;/code&gt; and make the following changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/User/SpeakerTile.jsx

import Avatar from 'boring-avatars';
import { FiMic, FiMicOff } from 'react-icons/fi';
import {
  useHMSStore,
  selectPeerAudioByID,
  selectIsPeerAudioEnabled,
} from '@100mslive/hms-video-react';

import PermissionsMenu from './PermissionsMenu';

const SpeakerTile = ({ peer }) =&amp;gt; {
  const isSpeaking = useHMSStore(selectPeerAudioByID(peer.id)) &amp;gt; 0;
  const isMicOn = useHMSStore(selectIsPeerAudioEnabled(peer.id));

  return (
    &amp;lt;div className="relative bg-secondary px-12 py-6 rounded-lg border border-purple-500"&amp;gt;
      &amp;lt;PermissionsMenu id={peer.id} audioTrack={peer.audioTrack} /&amp;gt;
      &amp;lt;div className="flex flex-col gap-y-4 justify-center items-center"&amp;gt;
        &amp;lt;div
          className={
            isSpeaking
              ? 'ring rounded-full transition ring-3 ring-green-600 p-0.5'
              : 'p-0.5'
          }
        &amp;gt;
          &amp;lt;Avatar name={peer.name} size="60" /&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p className="flex items-center gap-x-2"&amp;gt;
          {peer.name}
          {isMicOn ? (
            &amp;lt;FiMic className="h-3 w-3" /&amp;gt;
          ) : (
            &amp;lt;FiMicOff className="h-3 w-3" /&amp;gt;
          )}
        &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default SpeakerTile;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYtfUnU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b9ajee54gk3j511twhy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYtfUnU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b9ajee54gk3j511twhy.gif" alt="Twelth Image" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-permissions-menu"&gt;
  &lt;/a&gt;
  The Permissions Menu
&lt;/h5&gt;

&lt;p&gt;Time to add some functionality to the &lt;code&gt;&amp;lt;PermissionsMenu /&amp;gt;&lt;/code&gt; component inside the &lt;code&gt;components/User/PermissionsMenu.jsx&lt;/code&gt; file. We want to display this menu only if we have the &lt;code&gt;moderator&lt;/code&gt; role.&lt;/p&gt;

&lt;p&gt;To get our &lt;code&gt;localPeer&lt;/code&gt; object, we can use the &lt;code&gt;selectLocalPeer&lt;/code&gt; selector function. This will return an object with the &lt;code&gt;roleName&lt;/code&gt; property that we can check to get our role. &lt;/p&gt;

&lt;p&gt;Alternatively, you can also choose to use the &lt;code&gt;selectLocalPeerRole&lt;/code&gt; selector and access the &lt;code&gt;name&lt;/code&gt; property of the returned object.&lt;/p&gt;

&lt;p&gt;To check if we are a &lt;code&gt;moderator&lt;/code&gt;, use the &lt;code&gt;===&lt;/code&gt; equality operator to check if our &lt;code&gt;roleName&lt;/code&gt; equates to &lt;code&gt;moderator&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Accordingly, we can either render this component, or null if we’re not a &lt;code&gt;moderator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The permissions menu has three options: &lt;code&gt;Mute Peer&lt;/code&gt;, &lt;code&gt;Make Listener&lt;/code&gt;, and &lt;code&gt;Make Speaker&lt;/code&gt;. To achieve these functionalities, create a new instance of the &lt;code&gt;useHMSActions()&lt;/code&gt; hook to get access to all the required methods.&lt;/p&gt;

&lt;p&gt;For muting a peer, call the &lt;code&gt;setRemoteTrackEnabled()&lt;/code&gt; method on &lt;code&gt;hmsActions&lt;/code&gt; with the peer’s audio track (that we’re getting from the props) and &lt;code&gt;false&lt;/code&gt; as parameters.&lt;/p&gt;

&lt;p&gt;To change the role of a peer, call the &lt;code&gt;changeRole()&lt;/code&gt; method on &lt;code&gt;hmsActions&lt;/code&gt; along with the peer’s ID, new role, and a force boolean value to change their role without asking them or give them a chance to accept/reject.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/User/PermissionsMenu.jsx

import { useState } from 'react';
import { AiOutlineMenu } from 'react-icons/ai';
import {
  useHMSStore,
  useHMSActions,
  selectLocalPeer,
} from '@100mslive/hms-video-react';

const PermissionsMenu = ({ audioTrack, id }) =&amp;gt; {
  const hmsActions = useHMSActions();

  const mutePeer = () =&amp;gt; {
    hmsActions.setRemoteTrackEnabled(audioTrack, false);
  };

  const changeRole = (role) =&amp;gt; {
    hmsActions.changeRole(id, role, true);
  };

  const localPeer = useHMSStore(selectLocalPeer);

  const [showMenu, setShowMenu] = useState(false);

  const btnClass = 'w-full text-sm font-semibold hover:text-purple-800 p-1.5';

  const isModerator = localPeer.roleName === 'moderator';

  if (isModerator) {
    return (
      &amp;lt;div className="absolute right-1 top-1 z-50"&amp;gt;
        &amp;lt;AiOutlineMenu
          className="ml-auto"
          onClick={() =&amp;gt; setShowMenu(!showMenu)}
        /&amp;gt;
        {showMenu &amp;amp;&amp;amp; (
          &amp;lt;div className="mt-2 bg-white text-black py-2 rounded-md"&amp;gt;
            &amp;lt;button className={btnClass} onClick={() =&amp;gt; mutePeer()}&amp;gt;
              Mute
            &amp;lt;/button&amp;gt;
            &amp;lt;button className={btnClass} onClick={() =&amp;gt; changeRole('listener')}&amp;gt;
              Make Listener
            &amp;lt;/button&amp;gt;
            &amp;lt;button className={btnClass} onClick={() =&amp;gt; changeRole('speaker')}&amp;gt;
              Make Speaker
            &amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
        )}
      &amp;lt;/div&amp;gt;
    );
  } else {
    return null;
  }
};

export default PermissionsMenu;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0MkWdcle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilxguxobu8boukwi8nsr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0MkWdcle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilxguxobu8boukwi8nsr.gif" alt="Thirteenth Image" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#adding-handraise-functionality"&gt;
  &lt;/a&gt;
  Adding Hand-Raise Functionality
&lt;/h5&gt;

&lt;p&gt;Finally, let’s add the last bit of functionality to our application: &lt;code&gt;hand-raise&lt;/code&gt;. As a &lt;code&gt;listener&lt;/code&gt;, you might also want a chance to become a speaker at times. To notify the &lt;code&gt;moderator&lt;/code&gt;, we can build a simple hand-raise button that will display a badge next to your avatar to show that you're interested to speak.&lt;/p&gt;

&lt;p&gt;Therefore, start by building the functionality to change our role from &lt;code&gt;listener&lt;/code&gt; to &lt;code&gt;handraise&lt;/code&gt; on clicking the &lt;code&gt;&amp;lt;HandRaiseButton /&amp;gt;&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;To do this, go back to the &lt;code&gt;&amp;lt;Controls /&amp;gt;&lt;/code&gt; component inside &lt;code&gt;components/Room/Controls.jsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Over here, you’ll notice the &lt;code&gt;&amp;lt;HandRaiseButton /&amp;gt;&lt;/code&gt; component with 2 props: a &lt;code&gt;isHandRaised&lt;/code&gt; boolean prop to check if you've raised hand currently and a &lt;code&gt;toggleHandRaise&lt;/code&gt; function to toggle it. Also, we'll display this button only if we are a &lt;code&gt;listener&lt;/code&gt; or have &lt;code&gt;handraise&lt;/code&gt; role.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;isHandRaised&lt;/code&gt; prop, we simply need to get our role by accessing the &lt;code&gt;roleName&lt;/code&gt; property of our local peer and check if it equates to the &lt;code&gt;handraise&lt;/code&gt; role.&lt;/p&gt;

&lt;p&gt;For the toggle functionality, we can use the &lt;code&gt;changeRole()&lt;/code&gt; method available on the &lt;code&gt;hmsActions&lt;/code&gt; object like we did for the &lt;code&gt;&amp;lt;PermissionsMenu /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;changeRole()&lt;/code&gt; method takes our local peer's ID, the new role to set, and a force boolean prop. For the new role, if we are a &lt;code&gt;listener&lt;/code&gt; currently, we need to pass &lt;code&gt;handraise&lt;/code&gt; as the parameter. If we already have the role of &lt;code&gt;handraise&lt;/code&gt;, we need to set it back to listener.&lt;/p&gt;

&lt;p&gt;Here’s how your code should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// components/Room/Controls.jsx

import {
  useHMSStore,
  useHMSActions,
  selectIsLocalAudioEnabled,
  selectLocalPeer,
} from '@100mslive/hms-video-react';

import MicButton from './MicButton';
import ExitButton from './ExitButton';
import HandRaiseButton from './HandRaiseButton';

const Controls = () =&amp;gt; {
  const hmsActions = useHMSActions();
  const isMicOn = useHMSStore(selectIsLocalAudioEnabled);
  const peer = useHMSStore(selectLocalPeer);

  const isListenerOrHandraised =
    peer.roleName === 'listener' || peer.roleName === 'handraise';

  return (
    &amp;lt;div className="flex justify-center space-x-4"&amp;gt;
      {!isListenerOrHandraised &amp;amp;&amp;amp; (
        &amp;lt;MicButton
          isMicOn={isMicOn}
          toggleMic={() =&amp;gt; hmsActions.setLocalAudoEnabled(!isMicOn)}
        /&amp;gt;
      )}
      {isListenerOrHandraised &amp;amp;&amp;amp; (
        &amp;lt;HandRaiseButton
          isHandRaised={peer.roleName === 'handraise'}
          toggleHandRaise={() =&amp;gt;
            hmsActions.changeRole(
              peer.id,
              peer.roleName === 'listener' ? 'handraise' : 'listener',
              true
            )
          }
        /&amp;gt;
      )}
      &amp;lt;ExitButton exitRoom={() =&amp;gt; hmsActions.leave()} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Controls;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x71fc1MX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k12tcza7dynn49vpyujp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x71fc1MX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k12tcza7dynn49vpyujp.gif" alt="Fourteenth Image" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The starter code already contains the code to display a hand-raise badge in the &lt;code&gt;&amp;lt;ListenerTile /&amp;gt;&lt;/code&gt; component. Inside this component, we just need to check if the peer's role is set to &lt;code&gt;handraise&lt;/code&gt; and then conditionally render the &lt;code&gt;&amp;lt;HandRaiseBadge /&amp;gt;&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#and-thats-a-wrap"&gt;
  &lt;/a&gt;
  And That’s a Wrap!
&lt;/h5&gt;

&lt;p&gt;Building real-time audio application with 100ms SDK is as simple as that. I hope you enjoyed building this app, and make sure to drop by the 100ms Discord Server in case of any queries.&lt;/p&gt;

&lt;p&gt;We can’t wait to see all the marvelous projects you build with 100ms. Till then, happy coding!&lt;/p&gt;

&lt;p&gt;Check 100ms Now -&amp;gt; &lt;a href="https://www.100ms.live/blog/build-discord-stage-channel-clone-hms"&gt;https://www.100ms.live/blog/build-discord-stage-channel-clone-hms&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>You can now add projects to personal lists on GitHub</title>
      <author>Dima Grossman</author>
      <pubDate>Tue, 16 Nov 2021 07:24:08 +0000</pubDate>
      <link>https://dev.to/scopsy/you-can-now-add-projects-to-personal-lists-on-github-4cao</link>
      <guid>https://dev.to/scopsy/you-can-now-add-projects-to-personal-lists-on-github-4cao</guid>
      <description>&lt;p&gt;Wondered on the GitHub IOS mobile app to check on some of my projects and stumbled upon the ability to add projects to lists. You can choose one of the predefined lists: "My stack", "Inspiration" and "Check Later". After selecting one you can also create custom lists of your choice. &lt;/p&gt;

&lt;p&gt;This is similar to other products like Pinterest, Behance or instagram that allow you to bookmark interesting projects and organize them into lists.&lt;/p&gt;

&lt;p&gt;Not sure yet how the lists will be represented later on, but a good guess will be that they will be listed on your profile page and you can mark some lists as private. Even following some peoples lists could be a great feature as-well :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EPvnG-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds7myhunnukgxrrzjvpd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EPvnG-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds7myhunnukgxrrzjvpd.jpeg" alt="New feature screenshot from the app" width="880" height="1361"&gt;&lt;/a&gt;&lt;br&gt;
My first list entry was &lt;a href="https://github.com/notifirehq/notifire/"&gt;Notifire&lt;/a&gt; because that's where i've seen it first 😅 &lt;/p&gt;

&lt;p&gt;What projects are you going to add first and to what lists?&lt;/p&gt;

</description>
      <category>news</category>
      <category>opensource</category>
      <category>github</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Peeling Bitcoin with Taproot</title>
      <author>ciro escarelli</author>
      <pubDate>Tue, 16 Nov 2021 07:23:13 +0000</pubDate>
      <link>https://dev.to/ciroescarelli/peeling-bitcoin-with-taproot-10pb</link>
      <guid>https://dev.to/ciroescarelli/peeling-bitcoin-with-taproot-10pb</guid>
      <description>&lt;p&gt;The latest Bitcoin update enhances bitcoin privacy and performance, and improves overall network performance by reducing transaction costs. The present article does not intend to address the technical aspects of Taproot. The purpose of writing this article is to describe Taproot in simple and fluent language and to explain the importance of Taproot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-it-so-important"&gt;
  &lt;/a&gt;
  Why is it so important?
&lt;/h2&gt;

&lt;p&gt;If we want to answer this question very briefly, we can say that Softfork Taproot improves the scalability, privacy and performance of smart bitcoin-related contracts. To do this, Taproot creates a new typed address in which all bitcoin transactions are viewed in a single form. That is, there is no longer a difference between a simple payment or a complex multi-signature transaction or a simple use of the Lightning network. Topprot addresses impose a lower transaction cost on the user than previous addresses. By "reducing transaction costs" and "converting all transactions into a simple single-signature transaction", Taproot allows bitcoin to perform more complex and larger operations. Operations that were completely impossible before.&lt;br&gt;
Of course, if your approach to bitcoin is just a holding approach and you rarely move your bitcoins between different wallets, you might think that the Taproot update will not affect your life much. But this is not the case at all. Taproot actually provides the ground for large and significant developments. Developments that are likely to lead to the creation of more software forks for the Bitcoin network in the future.&lt;br&gt;
For example, Taproot gives Lightning Network the ability to use its full potential to create technologies with adequate bitcoin scalability. Prior to Taproot, the second tier protocol was seen in the bitcoin blockchain, effectively reducing the exchangeability of coins, and it is clear to all of us that exchangeability is a vital element in exercising the role of money as a medium of exchange. Lack of interchangeability feature can mean that the same coins do not have the same value, and as a result, by performing a transaction, we reach a completely different output of our transaction input. As a result, recipients who receive output at different rates of input value face some form of discrimination, and little by little other users become less willing to use their bitcoin.&lt;br&gt;
In addition to all this, Taproot allows Lightning Network and other complex wallets and contracts to increase their efficiency and reduce transaction costs, and their users can easily use Bitcoin as an exchange intermediary. With Ashnor's signature, the most complex transactions in the wallet covered by Taproot have the same transaction cost as the simplest transactions. This reduction in costs and the increase in flexibility and capacity to execute smart contracts lead to the formation of settings that we could not previously implement in the Bitcoin network.&lt;br&gt;
To understand why Taproot updates are implemented in the Bitcoin network, we first need to understand how transactions in the Bitcoin network in general work and what changes have been made to them to date and how in this new-Taproot way. - Have we arrived?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-bitcoin-transactions-work-from-the-beginning-to-today"&gt;
  &lt;/a&gt;
  How Bitcoin transactions work, from the beginning to today
&lt;/h2&gt;

&lt;p&gt;In general, bitcoin-related transactions depend on inputs and outputs. Input and output are always the same; Because in the meantime, no coin is lost. At first, for example, if you wanted to send me five bitcoins, you had to choose exactly five bitcoins in your wallet. Otherwise, either the transaction would not be complete and your balance would be less than a certain amount, or your balance would be higher and you would not be able to choose "exactly" five coins.&lt;br&gt;
Later, the concept of "change | change" came into use in Bitcoin, and from then on you could break your money. So, for example, if you want to send me five bitcoins and choose 7.38 bitcoins in your wallet; 2.38 The extra bitcoins will be returned to your account as the rest of the money. That means your input is 7.38 bitcoins and your output is 5 + 2.38 bitcoins. Of course, less than 2.38 bitcoins will be returned to your account; Because a small amount of it is deducted as transaction costs. So wherever we talk about spending, we are actually referring to an "output." I now have the five bitcoins you have given me and I can use them in any way I want. For example, I can give three bitcoins to the first person and two bitcoins to the second person. Or I can give five bitcoins to a third party. Or I can keep all these five bitcoins with me and hold them for as long as I want. Except for the last case, which is holding, in the other cases I am doing a "transaction". In each transaction I want to participate in these five bitcoins, the transaction input, five bitcoins and its output is the amount I want to send to the person. For example, if I want to send one or three bitcoins, I have to put all five bitcoins in the input, and after the transaction, my bitcoins become 3 + 2 bitcoins. I then send the three bitcoins to the other party and return the remaining two bitcoins to my account.&lt;br&gt;
The purpose of these examples is to gain an understanding of bitcoin input and output. So when it is said that we are spending, we are actually transferring the output of one transaction to another person. To make this transfer, we need to put the initial output in a new transaction. This new transaction creates a secondary output and the receiver can receive this output. The concept of wallet was created to make the complexity of this transaction model easier to understand. This model is known as the UTXO model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-the-bitcoin-transaction-model"&gt;
  &lt;/a&gt;
  Improving the bitcoin transaction model
&lt;/h2&gt;

&lt;p&gt;From 2008 until today, the payment history of the Bitcoin network has undergone many changes. In general, the UTXO model - described above - depends on the scripts and conventions written in the "programming" language of the Bitcoin script. I have coined the word "programming" to point out that the bitcoin scripting language can be more of a "verification language" than a language for performing computational instructions. So with the bitcoin script we can figure out a way to specify the cost of a UTXO.&lt;br&gt;
When we look at the bitcoin script and the improvements that have been made to it, we come across three major limitations: privacy, space efficiency, and computational efficiency. Improving one of these three usually leads to improving the other two. For example, trying to reduce the disclosure of information about a transaction (the same as improving privacy) requires reducing the amount of data. Reducing the amount of data also means that we need less space to do transactions; And when the transaction space is reduced, the related calculations are performed with less compactness and the computational efficiency is higher.&lt;br&gt;
To date, the bitcoin community has gradually introduced all the changes and developments that have been made to improve the performance of bitcoin scripts or new URLs. All these changes over time have been able to increase the privacy of transactions and make the transfer process more light, thus speeding up the transaction approval process. So users can more easily create scripts that increase the flexibility of their assets, as well as the security and efficiency of their transfers, and keep them out of financial control. Multi-signature URLs are a good example of the topic we discussed above. Until now, we had to manually do bitcoin multi-signature addresses; But now we can easily do it on our mobile phone or laptop. The same is true of Lightning. Lightning is the second-tier bitcoin scalability solution for regular and small payments. This second layer is now easily available in mobile applications, and any amount of bitcoin can be easily moved from anywhere to anywhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-important-update-of-the-bitcoin-protocol"&gt;
  &lt;/a&gt;
  The most important update of the Bitcoin protocol
&lt;/h2&gt;

&lt;p&gt;The latest and most important update to the Bitcoin-Taproot protocol is a natural revolution for bitcoin-related scripts and transactions. Taproot is made possible by Ashnor signatures, MAST and TapeScripts and seeks to increase flexibility and privacy; Without compromising network security.&lt;br&gt;
Early in the advent of bitcoin, the sender of a transaction had to pay attention to the policies related to the destination wallet. This problem, in addition to making a transaction virtually impossible, inevitably led to a significant violation of privacy. In order to make a transaction, the details of the destination wallet had to be displayed, thus minimizing privacy.&lt;br&gt;
With the advent of Pay to Script Hash (P2SH), the way Bitcoin is transferred has changed dramatically. In P2SH, instead of sending transactions to the contract itself, the contract is sent to the hash. With these interpretations, the details of a contract are no longer visible until the output of one transaction becomes the input of another transaction. With P2SH, all outputs become the same; That is, they are displayed only as a hash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-hash"&gt;
  &lt;/a&gt;
  What is a hash?
&lt;/h2&gt;

&lt;p&gt;The hash is actually the output of a hashing function. A variable of any length is converted to a fixed-length encrypted output when it enters the hashing function. This development not only managed to preserve the privacy of all bitcoin transactions by simulating all outputs (converting all outputs into one hash); It was able to significantly reduce the size of output variables and increase network performance in general.&lt;br&gt;
However, when paying, all the details of the contract are revealed and everyone could see all the information about all the contracts. The two main negative aspects of this event are privacy and efficiency. In this way, any observer can observe the different conditions of spending and as a result, get countless information about the spender. In addition to the loss of privacy information, the entire blockchain network is replete with a huge mountain of useless information. The only benefit of this information is that it can be used to approve cost-appropriate spending conditions. Taproot Update improves this logic by using Merklelized Abstract Syntax Trees (MAST). The MAST structure allows Bitcoin to publish only the information required by the contract to achieve any specific purpose, leaving other information untouched.&lt;/p&gt;

&lt;p&gt;Complex expenses in Taproot are done in two ways:&lt;br&gt;
1) Agreement agreed with the conditions of mutual approval&lt;br&gt;
2) Return contract in special circumstances.&lt;/p&gt;

&lt;p&gt;For example, if a multi-signature address is available to multiple people and they want to use their inventory in a fully programmed manner; They can set the spending conditions in such a way that everyone agrees on them (mode 1) or they do not reach any kind of agreement and must use the return mode (mode two).&lt;br&gt;
Once everyone has reached an agreement, Taproot can turn the process into a single signature address. As a result, the Bitcoin network is not at all aware that there was a multi-signature contract that has become a single-signature contract. This establishes the privacy of all users who use the same multi-signature address. However, if in the multi-signature state, the agreement state was not achievable and one of the members was using the return methods, Taproot only shows the transactions related to that return state and has nothing to do with other information.&lt;br&gt;
So in a nutshell, with the introduction of P2SH, the recipient's privacy increased by unifying their output data (converting it to a hash), and now with the introduction of Taproot, the sender's privacy increases by restricting the information sent to the network. Even if you do not use complex wallet mode such as Multi-Signature or Lightning, your privacy will increase as the privacy of those users increases; This is because the new way of monitoring and spying on the chain becomes more difficult and the settings for anonymity in the bitcoin network increase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-good-is-a-web-site-if-it-simply-blends-in-with-everything-else-out-there"&gt;
  &lt;/a&gt;
  What good is a web site if it simply "blends in" with everything else out there?
&lt;/h2&gt;

&lt;p&gt;By reducing transaction costs, increasing efficiency and more privacy, Taproot can pave the way for more efficient bitcoin network performance. Nodes are being updated and people are starting to use URLs all the time. The more common this procedure becomes, the more difficult it is for blockchain network monitors to distinguish between transmitters and receivers. UTXOs are also treated in the same way. The expansion of the bitcoin network can also become a solid network for deploying complex future functions.&lt;br&gt;
Second-tier protocols and side-chains can also help leverage and enhance complex smart contracts. As a result, over time, many contracts can be expected to build on the base layer. The end user does not need to create these themselves; Rather, it can easily take advantage of offers that are in the vast bitcoin ecosystem and are guaranteed by other members. Of course, some decentralized finance applications and their uses are already available on the Bitcoin network; But in any case, the advent of Taproot can lead to more complex and practical applications that have high security in the Bitcoin network. (Something none of the cryptocurrencies can compete with.)&lt;br&gt;
Since bitcoin is practically a currency; As a result, long-term decentralized finance applications can be built on it naturally. Recent networks such as Ethereum do not have the monetary characteristics and security and strength of Bitcoin. (This is one of the reasons why the applications built on them lose their value in the long run.) By patiently building the foundation for distribution and having a network free of financial, exchange, and anti-censorship, Bitcoin can be used for Enjoy its long-term and multi-layered growth.&lt;br&gt;
Taproot Update, which includes Ashnor, MAST and Tapescript; It is built on bases that are highly secure, protect more privacy, and have the potential to build more complex applications. The unparalleled flexibility of Bitcoin smart contract functions can usher in a new era of possibilities that we could not even think of before. This is the beginning of a path for more and more specific functions of the best monetary system that humanity has ever achieved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding remarks
&lt;/h2&gt;

&lt;p&gt;In the long run, updates such as Taproot and Lightning can lead to redundant altcoins. If certain functions can be performed on Bitcoin - the world's strongest and most secure network - it is natural for this to happen. But altcoins create innovations and come up with applications that are like a lab for bitcoins (that is, the first changes are applied to the altcoins network, and after examining what happened, we can decide whether to apply these changes to the bitcoin network or not!) . Whenever real uses are found, we transfer them to Bitcoin. Those uses can also ensure that they are used for a long time and are constantly evolving.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Need an IndieHackers invite code!</title>
      <author>Virej Dasani</author>
      <pubDate>Tue, 16 Nov 2021 07:08:49 +0000</pubDate>
      <link>https://dev.to/virejdasani/need-an-indiehackers-invite-code-3l43</link>
      <guid>https://dev.to/virejdasani/need-an-indiehackers-invite-code-3l43</guid>
      <description>&lt;p&gt;If you have a code, I'd appreciate it if you can send me one:&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/virejdasani"&gt;@virejdasani&lt;/a&gt;
 on twitter&lt;br&gt;
&lt;a href="https://twitter.com/VirejDasani"&gt;https://twitter.com/VirejDasani&lt;/a&gt;&lt;br&gt;
Thanks a lot!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>gamedev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
