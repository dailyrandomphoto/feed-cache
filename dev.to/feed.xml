<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>EmberJS Basic Framework Introduction: Javascript, Search Engine Optimization, &amp; Web Apps</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Thu, 02 Dec 2021 13:16:40 +0000</pubDate>
      <link>https://dev.to/abhirajb/emberjs-basic-framework-introduction-javascript-search-engine-optimization-web-apps-25de</link>
      <guid>https://dev.to/abhirajb/emberjs-basic-framework-introduction-javascript-search-engine-optimization-web-apps-25de</guid>
      <description>&lt;p&gt;Ember.js is a JavaScript MVC (Model-View-Controller) framework for building massive client-side web applications. It allows you to develop ordered and structured code in comparison to other JavaScript MVC frameworks. This allows you to create ambitious online applications, according to the Ember.js website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ember-amp-frontend-frameworks"&gt;
  &lt;/a&gt;
  Ember &amp;amp; Frontend Frameworks
&lt;/h2&gt;

&lt;p&gt;Ember has been around since the beginning of the frontend revolution, which has now been going on for several years. It's almost a decade old and predates React, Vue, Svelte, and all the other frameworks. The framework has never been at the forefront of frontend buzz, but it has quietly helped companies ship sustainably.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ember-search-optimization-issues"&gt;
  &lt;/a&gt;
  Ember Search Optimization Issues
&lt;/h3&gt;

&lt;p&gt;Although Emberjs is very well established as a javascript-based front-end framework, it has server-side rendering issues. &lt;a href="https://scottyseo.com/react-seo/"&gt;ScottySEO’s article on Ember js SEO&lt;/a&gt; reports that, like most javascript frameworks,  it has a handful of rendering issues that will require some debugging. &lt;/p&gt;

&lt;p&gt;Namely, it renders in the DOM, meaning that a search engines crawler has to render it before they can read what is on the page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-emberjs-simply-javascript-for-developers"&gt;
  &lt;/a&gt;
  How Does Ember.jS Simply Javascript for Developers?
&lt;/h3&gt;

&lt;p&gt;Ember is a framework that aims to reduce the amount of complexity that developers must deal with. Ember takes care of the great majority of components of the application that aren't necessary to the problem domain (e.g. routing, data loading, etc.) and thus removes all of the inadvertent complexity associated with these aspects from the developers' hands. Instead, they can concentrate just on the essential details. As a result, clearly separating the components that the developer controls from everything else are a liberating constraint: it prevents developers from becoming sidetracked and wasting time on unimportant features, allowing them to focus their time and effort on areas where they genuinely offer value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ember-is-a-javascript-framework-that-hides-the-complex-stuff"&gt;
  &lt;/a&gt;
  Ember is a javascript Framework That Hides The Complex Stuff
&lt;/h3&gt;

&lt;p&gt;The fact that Ember conceals most of the unintentional complexity and takes charge of certain parts of applications does not imply that the framework will never develop or progress. The framework is making steady and significant progress, but Ember tries to keep developers as far away from the churn as feasible. Ember, on the other hand, continually makes enhancements in small releases that are backward compatible and have clear upgrade routes, adhering to a release strategy that prioritizes stability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-ember-compare-to-angularjs"&gt;
  &lt;/a&gt;
  How Does Ember compare to Angularjs?
&lt;/h3&gt;

&lt;p&gt;On many levels, AngularJS and EmberJS are similar frameworks, although they differ in numerous ways. For example, AngularJS will display a huge static data set faster than EmberJS, but EmberJS will make it easy to add interactivity and will handle updates more efficiently. Furthermore, while both frameworks are opinionated, EmberJS takes a little stronger stance than AngularJS, making some activities related to transferring an existing application more difficult to execute. In the end, each architecture has its own set of trade-offs, and deciding which framework is best for you is just a matter of weighing your application's requirements against each framework's capabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Ember is a full-featured application framework that includes cohesive building blocks and concepts for all parts of real-world applications that aren't necessarily connected to their issue domain, as described above. While Ember hides the internals of these concepts so that developers don't have to deal with them, they are all present and contribute to the framework's public API and general architecture. This frequently leads to criticism centered on the fact that Ember has a lot to learn, and some or all of it may not be necessary for a given project. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>ember</category>
    </item>
    <item>
      <title>Git Cheat Sheet- 20 commands I Use Everyday</title>
      <author>Tabassum Khanum</author>
      <pubDate>Thu, 02 Dec 2021 13:04:39 +0000</pubDate>
      <link>https://dev.to/codewithtee/git-cheat-sheet-20-commands-i-use-everyday-47h9</link>
      <guid>https://dev.to/codewithtee/git-cheat-sheet-20-commands-i-use-everyday-47h9</guid>
      <description>&lt;p&gt;Hey Coders!&lt;br&gt;
When I started coding, tracking changes in my codes was always painful and the fear of losing files was always there. But now we have Git to tackle these problems, it has everything you need to make your coding environment safe and easy. Git is so important for every programmer's daily life especially when you are working with a team. The software industry widely uses it but mastering all the commands can take time, so keep practising!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1iTX9tGRTTTVZb7q/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1iTX9tGRTTTVZb7q/giphy.gif" alt="gif" width="480" height="267"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#why-git"&gt;
  &lt;/a&gt;
  Why Git?
&lt;/h5&gt;

&lt;p&gt;Git is a Distributed Version Control System that helps us to keep track of changes we've made to files in our projects.&lt;/p&gt;

&lt;p&gt;Now you can easily revert to a previous version of our code if anything goes wrong, which is already there in our local machine.&lt;/p&gt;

&lt;p&gt;When working on a team git makes collaborations and management easy. Every team member has full access to the code of the repositories on their local machine. All the changes and upgrades can be witnessed by every person. With the help of BitBucket, GitHub or GitLab we can store all the repos in a single platform. Git has many different commands, so below are some of the most often used commands. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-how-to-check-your-git-configuration"&gt;
  &lt;/a&gt;
  1. How to check your Git configuration:
&lt;/h3&gt;

&lt;p&gt;The git config command is a convenience function that is used to set Git configuration values on a global or local project level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-setup-your-git-username-and-email-id"&gt;
  &lt;/a&gt;
  2. Setup your Git username and Email Id:
&lt;/h3&gt;

&lt;p&gt;There are many configurations and settings possible. Git config is how to assign these settings.2 important settings are username and user email.&lt;/p&gt;

&lt;p&gt;Name and Email address assigned to commit from local computer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "Tabassum"
git config --global user.email "tabassum@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-initialize-a-git-repo"&gt;
  &lt;/a&gt;
  3. Initialize a Git repo:
&lt;/h3&gt;

&lt;p&gt;This command turns a directory into an empty Git repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-add-a-file-to-the-staging-area-in-git"&gt;
  &lt;/a&gt;
  4. Add a file to the staging area in Git:
&lt;/h3&gt;

&lt;p&gt;The command below will add a file to the staging area. Just replace filename_here with the name of the file you want to add to the staging area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add filename_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-add-all-files-in-the-staging-area-in-git"&gt;
  &lt;/a&gt;
  5. Add all files in the staging area in Git:
&lt;/h3&gt;

&lt;p&gt;If you want to add all files in your project to the staging area, you can use a wildcard. and every file will be added for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-commit-changes-in-the-editor"&gt;
  &lt;/a&gt;
  6. Commit changes in the editor:
&lt;/h3&gt;

&lt;p&gt;Records the change made for the files in a local repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add a commit message without opening the editor. This command lets you only specify a short summary for your commit message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "first commit"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-see-your-commit-history"&gt;
  &lt;/a&gt;
  7. See your commit history:
&lt;/h3&gt;

&lt;p&gt;This command shows the commit history for the current repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-git-status"&gt;
  &lt;/a&gt;
  8. Git status:
&lt;/h3&gt;

&lt;p&gt;This command returns the current status of the repo. If a file is in the staging area, but not committed, it shows, with git status.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-remove-tracked-files-from-the-current-working-tree"&gt;
  &lt;/a&gt;
  9. Remove tracked files from the current working tree:
&lt;/h3&gt;

&lt;p&gt;This command expects a commit message to explain why the file was deleted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rm filename
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-rename-files"&gt;
  &lt;/a&gt;
  10. Rename files:
&lt;/h3&gt;

&lt;p&gt;This command stages the changes, then it expects a commit message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git mv oldfile newfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-create-a-new-branch"&gt;
  &lt;/a&gt;
  11.  Create a new branch:
&lt;/h3&gt;

&lt;p&gt;By default, you have one branch, the main branch. With this command, you can create a new branch. Git won't switch to it automatically – you will need to do it manually with the next command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12-switch-to-a-newly-created-branch"&gt;
  &lt;/a&gt;
  12. Switch to a newly created branch:
&lt;/h3&gt;

&lt;p&gt;When you want to use a different or a newly created branch you can use this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#13-list-branches"&gt;
  &lt;/a&gt;
  13. List branches:
&lt;/h3&gt;

&lt;p&gt;You can view all created branches using the git branch command. It will show a list of all branches and mark the current branch with an asterisk and highlight it in green.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#14-create-a-branch-in-git-and-switch-to-it-immediately"&gt;
  &lt;/a&gt;
  14. create a branch in Git and switch to it immediately:
&lt;/h3&gt;

&lt;p&gt;In a single command, you can create and switch to a new branch right away.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#15-merge-two-branches"&gt;
  &lt;/a&gt;
  15. Merge two branches:
&lt;/h3&gt;

&lt;p&gt;To merge the history of the branch you are currently in with the branch_name, you will need to use the command below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge branch_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#16-add-a-remote-repository-in-git"&gt;
  &lt;/a&gt;
  16. Add a remote repository in Git:
&lt;/h3&gt;

&lt;p&gt;This command adds a remote repository to your local repository (just replace &lt;a href="https://repo_here"&gt;https://repo_here&lt;/a&gt; with your remote repo URL).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add remote https://repo_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#17-cloning-other-repos"&gt;
  &lt;/a&gt;
  17. Cloning other repos:
&lt;/h3&gt;

&lt;p&gt;Git clone is a command for downloading existing source code from a remote repository (like Github, for example). In other words, Git clone basically makes an identical copy of the latest version of a project in a repository and saves it to your computer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#18-pull-changes-to-a-remote-repo"&gt;
  &lt;/a&gt;
  18. Pull changes to a remote repo:
&lt;/h3&gt;

&lt;p&gt;The git pull command allows you to download updates from a remote repository. Using this command, you execute both git fetch and git merge operations, which means local changes are updated and updates are uploaded to remote repositories&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#19-push-changes-to-a-remote-repo"&gt;
  &lt;/a&gt;
  19. Push changes to a remote repo:
&lt;/h3&gt;

&lt;p&gt;After committing your changes, the next thing you want to do is send your changes to the remote server. Git push uploads your commits to the remote repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;force push:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#20-how-to-use-git-rebase"&gt;
  &lt;/a&gt;
  20. How to use Git rebase:
&lt;/h3&gt;

&lt;p&gt;You can transfer completed work from one branch to another using git-rebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase branch_name_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;There are still hundreds of git commands that coders use but these were the frequently used ones. I hope these commands help to improve your productivity in Git.&lt;/p&gt;

&lt;p&gt;Thanks for Reading!&lt;br&gt;
Happy Coding 🐣&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/DhstvI3zZ598Nb1rFf/giphy-downsized-large.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/DhstvI3zZ598Nb1rFf/giphy-downsized-large.gif" alt="gif2" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>github</category>
    </item>
    <item>
      <title>Day 5 - Applied Accessibility | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Thu, 02 Dec 2021 12:59:19 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-5-applied-accessibility-100daysofcode-4fdp</link>
      <guid>https://dev.to/jannatinnaim/day-5-applied-accessibility-100daysofcode-4fdp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFetpbNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjirfmb0wkxf0yyjiqpz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFetpbNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjirfmb0wkxf0yyjiqpz.jpg" alt="Coding Motivation Banner" width="880" height="655"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;Got to know about web accessibility today. There's a lot of people out there that need specially made sites for them to be able to browse it. There are some special tags that visually doesn't affect the page but immensely improves the web experience for the people that need them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;These are some new tags that I learnt today and most of them make sense. Although, I don't fully understand this stuff, what I do know is enough for now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;I'll finally look into &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design#applied-accessibility"&gt;Responsive Web Design Principles&lt;/a&gt; and know how to make websites more responsive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-was-the-experience-so-far"&gt;
  &lt;/a&gt;
  How was the experience so far?
&lt;/h3&gt;

&lt;p&gt;I think I'm learning a lot and although I'm not sure if everything I learn will retain in memory, some practice should help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Git Commands That Will Save Your Job </title>
      <author>Somnath Singh</author>
      <pubDate>Thu, 02 Dec 2021 12:59:01 +0000</pubDate>
      <link>https://dev.to/polymathsomnath/git-commands-that-will-save-your-job-14ac</link>
      <guid>https://dev.to/polymathsomnath/git-commands-that-will-save-your-job-14ac</guid>
      <description>&lt;p&gt;In this article, we are going to learn some life-saving Git commands.&lt;/p&gt;

&lt;p&gt;We will not only learn about them, but we will also construct a mental model by understanding how they work behind the scenes.&lt;/p&gt;

&lt;p&gt;Some of these you may have used before, while others may be new to you, but they are all lifesavers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-real-fault-is-to-have-faults-and-not-to-amend-them"&gt;
  &lt;/a&gt;
  The Real Fault Is to Have Faults And Not to AMEND Them
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;“You will be remembered in your typos and edit history”&lt;/p&gt;

&lt;p&gt;— Anonymous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Typos happen all the time!&lt;/p&gt;

&lt;p&gt;Git gives us the option to correct our mistakes.&lt;/p&gt;

&lt;p&gt;When committing, sometimes we can hit “Enter” too quickly and have a typo somewhere in the commit message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2W_mXdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AItfh8uj_l0LAbGH9Q9W2bg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2W_mXdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AItfh8uj_l0LAbGH9Q9W2bg.png" alt="" width="700" height="167"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4kvDZNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AfX6dZBNM2d_etdA6-UaITQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4kvDZNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AfX6dZBNM2d_etdA6-UaITQ.png" alt="" width="700" height="173"&gt;&lt;/a&gt;&lt;/p&gt;
use -amend command to fix the typo





&lt;p&gt;Perfect! Now, your co-workers will not see that your “&lt;strong&gt;commit&lt;/strong&gt;” was originally spelled “&lt;strong&gt;committ&lt;/strong&gt;”.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#well-crafted-thing-is-a-thing-to-behold"&gt;
  &lt;/a&gt;
  Well Crafted Thing Is a Thing to Behold
&lt;/h1&gt;

&lt;p&gt;You might have used the command &lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt; or &lt;code&gt;git add .&lt;/code&gt; many times but doing so doesn’t allow us to commit just a section of a file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yr-QE_X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AgSwWWmLhWgzttSPlHcTJ7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yr-QE_X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AgSwWWmLhWgzttSPlHcTJ7g.png" alt="" width="700" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add -p&lt;/code&gt; allows you to stage parts of a changed file, instead of the entire file.&lt;/p&gt;

&lt;p&gt;This allows you to make concise, well-crafted commits that make for an easier-to-read history.&lt;/p&gt;

&lt;p&gt;Doing so can improve the quality of the commits.&lt;/p&gt;

&lt;p&gt;It also makes it easy to remove parts of the changes in a file that was only there for debugging purposes — before the commit without having to go back to the editor.&lt;/p&gt;

&lt;p&gt;Once this command runs, we’ll be asked about “hunks”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--as1YHUsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A3SLl1UnyheC5E_m0QXB0mQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--as1YHUsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A3SLl1UnyheC5E_m0QXB0mQ.png" alt="" width="700" height="508"&gt;&lt;/a&gt;&lt;/p&gt;
“Hunks” are the _chunks_ of code that we’ll decide what to do with.





&lt;p&gt;You’ll see the question, “Stage this hunk [y, n, g, a, d, e, ?]?” at the bottom of the terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhGCF5kw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ASj4F5okGIW-K60QjbRoHNg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhGCF5kw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ASj4F5okGIW-K60QjbRoHNg.png" alt="" width="700" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When finished with all the “hunks”, we will be able to see that our commit is ready and we can continue to the push!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  Bonus Tip:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git commit -p&lt;/code&gt; combines &lt;code&gt;git add -p&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; in one command.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#your-mistakes-dont-define-you"&gt;
  &lt;/a&gt;
  Your Mistakes Don’t Define You
&lt;/h1&gt;

&lt;p&gt;You made a commit but now you regret it? Maybe you committed secrets by accident — not a good idea — or maybe you want to add more tests to your code changes.&lt;/p&gt;

&lt;p&gt;These are all legit reasons to undo your last commit.&lt;/p&gt;

&lt;p&gt;Git gives us a command to undo our last commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpSE8903--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1KBq39Wsd0HJWO4v0q8WNQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpSE8903--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1KBq39Wsd0HJWO4v0q8WNQ.png" alt="" width="700" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The command &lt;code&gt;git reset&lt;/code&gt; has a variety of things you can trail onto it, let’s talk about the "soft" trailing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset —soft HEAD~&lt;/code&gt; &lt;em&gt;removes the commit from the current branch, but keep the changes!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The cool thing about this command is that the changes won’t disappear&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;All the changes will stay in the working tree!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tG_OsMVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/0%2A05owIT6H4P6xfyf2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tG_OsMVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/0%2A05owIT6H4P6xfyf2.gif" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
We ran the command git reset — soft HEAD~2 — it moved the HEAD to the previous two commits.





&lt;p&gt;If you don’t want to keep the changes that were introduced by certain commits then use &lt;code&gt;git reset —hard HEAD~&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N2JPFX99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/0%2Aue43AYghqHFJHrg5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N2JPFX99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/0%2Aue43AYghqHFJHrg5.gif" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Bonus Tip:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The git &lt;a href="https://gist.github.com/eyarz/64770d343b9cab442b257869f497af9e"&gt;pre-commit hook&lt;/a&gt; is a built-in feature that lets you define scripts that will run automatically before each commit. Use it to reduce the need to cancel commits.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#look-for-your-choices-pick-the-best-one-then-go-with-it"&gt;
  &lt;/a&gt;
  Look for your choices, pick the best one, then go with it.
&lt;/h1&gt;

&lt;p&gt;Suppose you are working with a team of developers on a medium to large-sized project.&lt;/p&gt;

&lt;p&gt;Another team member proposed some changes, and you want to apply a few of them to your main project, not &lt;em&gt;all&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Since managing the changes between several Git branches can become a complex task, and you don’t want to merge a whole branch into another branch.&lt;/p&gt;

&lt;p&gt;You only need to pick one or two specific commits. To pick some changes into your main project branch from other branches is called cherry-picking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccWJJKCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AnvKsXUB33j-s5zSlHDsNaQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccWJJKCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AnvKsXUB33j-s5zSlHDsNaQ.png" alt="" width="700" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this command, we can pick a particular branch that has a commit and pull it into another. Let’s walk through this.&lt;/p&gt;

&lt;p&gt;A commit is a snapshot of your git repository at one point in time and each commit cumulatively forms your repo history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q9MyJIgB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ADrwJLoomyKrBbVQa1OBFog.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9MyJIgB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ADrwJLoomyKrBbVQa1OBFog.gif" alt="" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cherry-pick&lt;/code&gt; command takes changes from a target commit and places them onto the HEAD of your currently checked-out branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MJ-GknIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AjB7KWUr2iKnMu0EEI73jJA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MJ-GknIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AjB7KWUr2iKnMu0EEI73jJA.gif" alt="" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, you may either continue working with the changes in your working directory or you may commit the cherry-picked changes immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---rBCyHzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2Ao2HlQEG1lWkZpRHK9oOHdg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---rBCyHzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2Ao2HlQEG1lWkZpRHK9oOHdg.gif" alt="" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is helpful if you accidentally make a commit to the wrong branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DOZE6-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2Ar4Rn2Hf9o0CDJ8lBsXGGLQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DOZE6-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2Ar4Rn2Hf9o0CDJ8lBsXGGLQ.gif" alt="" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With cherry-picking, you can get those changes onto the correct branch without redoing all that work again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tCk9ko-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ATQ4V0IN1v9preGrIOLXQwA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCk9ko-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ATQ4V0IN1v9preGrIOLXQwA.gif" alt="" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, use &lt;code&gt;cherry-pick&lt;/code&gt; sparingly!&lt;/p&gt;

&lt;p&gt;Overusing &lt;code&gt;cherry-pick&lt;/code&gt; can lead to duplicate commits, and sometimes a merge may be preferred to preserve commit history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JWDyX0yl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2Alfz_nmKf_TfNAMue4eKO9Q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JWDyX0yl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2Alfz_nmKf_TfNAMue4eKO9Q.gif" alt="" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reallife-scenario"&gt;
  &lt;/a&gt;
  Real-Life Scenario:
&lt;/h2&gt;

&lt;p&gt;Let’s say we have a branch &lt;code&gt;76d12&lt;/code&gt; and we have committed all of our changes.&lt;/p&gt;

&lt;p&gt;There’s another branch, we’ll just use &lt;code&gt;master&lt;/code&gt; but this can be any branch, and we want to pull in &lt;code&gt;76d12&lt;/code&gt;’s commit.&lt;/p&gt;

&lt;p&gt;By using the command, &lt;code&gt;git cherry-pick 76d12&lt;/code&gt;we can get that entire commit into another branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgqXN2cR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/0%2A0uzNtqDd8KiuSCI9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgqXN2cR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/0%2A0uzNtqDd8KiuSCI9.gif" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
`cherry-pick b`_ring an entire commit from one branch into another._





&lt;h1&gt;
  &lt;a href="#dont-want-all-of-it-no-problem-just-checkout"&gt;
  &lt;/a&gt;
  Don’t Want All Of It? No Problem — Just Checkout
&lt;/h1&gt;

&lt;p&gt;Want to Pick a specific file from a branch and bring it into the current branch?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SPkQnB3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1qnjBHU7Q6n5ZKJ93xVFxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SPkQnB3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1qnjBHU7Q6n5ZKJ93xVFxg.png" alt="" width="700" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Som, I use &lt;code&gt;git checkout&lt;/code&gt; mostly for switching from one branch to another.&lt;/p&gt;

&lt;p&gt;Yes, I know but we can also use it for checking out files and commits.&lt;/p&gt;

&lt;p&gt;It’s like &lt;code&gt;git cherry-pick&lt;/code&gt; but rather than "cherry-picking" an entire commit, we are diving even deeper into a branch and picking just a particular file that we want to be merged.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YIhkmBvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ApoZDlGmqOwvJSleVGbiN0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIhkmBvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ApoZDlGmqOwvJSleVGbiN0g.png" alt="" width="700" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While staying in &lt;code&gt;master&lt;/code&gt; the entire time, we can run the command &lt;code&gt;git checkout Som-test index.js&lt;/code&gt; to grab that particular committed file in that particular branch and bring it over to master to eventually push.&lt;/p&gt;

&lt;p&gt;That’s pretty neat when a particular branch’s changes are many and we’re only looking for one file to test or push.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt; tells Git which branch or commit to apply your new changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X0FOV_6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AyL68gbUi3Yr4jYw3jM3fhg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0FOV_6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AyL68gbUi3Yr4jYw3jM3fhg.gif" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A branch is just a pointer to 1 specific commit, and a commit is a snapshot of your repository at a certain point in time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XM_m5MSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AVF0e86kTT4PIhyTNB_W0vw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XM_m5MSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AVF0e86kTT4PIhyTNB_W0vw.gif" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The branch pointer moves along with each new commit you make.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFXBB1kU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AI8NzBgYrvHoeUTsuAxP8AA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFXBB1kU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AI8NzBgYrvHoeUTsuAxP8AA.gif" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to make changes on a branch that you don’t currently have checked out, you first need to checkout the branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XEhjzhOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AnL8uzFZw9GAG0MN0m2vhaQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XEhjzhOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AnL8uzFZw9GAG0MN0m2vhaQ.gif" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checking out a branch will update your repo’s files to match the snapshot of whichever commit the branch points to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_2ylf7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ATziopasHJcCOarYEDN8aGQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_2ylf7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ATziopasHJcCOarYEDN8aGQ.gif" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, the branch pointer will follow each new commit that you make on the branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOH4qbx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AvU_NQyoorJvW5NHXrzr5xw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOH4qbx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AvU_NQyoorJvW5NHXrzr5xw.gif" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s also possible to directly checkout a commit, which will update your repo’s files to match the snapshot of whichever commit you’ve checked out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uUkT2Via--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ARlHBw8VmAUyELW1U2uRUQg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUkT2Via--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2ARlHBw8VmAUyELW1U2uRUQg.gif" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be aware that checking out a commit moves the HEAD pointer to a commit instead of a branch, putting your repo into what is called a “detached head state” where any changes will not be committed to a branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7H2thz4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2Asjv7VIu4_XGrNBAmInUQ9A.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7H2thz4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2Asjv7VIu4_XGrNBAmInUQ9A.gif" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While git checkout is great for getting to work with branches, it’s also a useful tool for reviewing old commits since it switches the version of your repo to this older snapshot.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#somedaybut-not-yet-not-yet"&gt;
  &lt;/a&gt;
  Someday…But Not Yet, Not Yet
&lt;/h1&gt;

&lt;p&gt;Suppose we have a bunch of changes to a file but need to go back and test something out before we commit and push this or we’re just not ready to commit our changes.&lt;/p&gt;

&lt;p&gt;That’s where &lt;code&gt;git stash&lt;/code&gt; comes into play.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--112Ocd5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AHBo3QdLBcH13_5RqQUpolw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--112Ocd5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AHBo3QdLBcH13_5RqQUpolw.png" alt="" width="700" height="280"&gt;&lt;/a&gt;&lt;/p&gt;
Save uncommitted changes and stash them for later. This is useful for when you want to commit and push, but aren’t ready to commit the changes since the last commit.



&lt;p&gt;When we run the command &lt;code&gt;git stash&lt;/code&gt; it takes those saved, uncommitted changes and "stashes" them for later.&lt;/p&gt;

&lt;p&gt;We can then move around different branches, pull changes into master, etc.&lt;/p&gt;

&lt;p&gt;Once we have finished testing or doing whatever we needed to do, we can go back into our branch, run the command &lt;code&gt;git stash pop&lt;/code&gt; and our changes will come back! It’s like we never even left!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-is-time-for-you-to-get-some-help"&gt;
  &lt;/a&gt;
  It Is Time For You To Get Some Help.
&lt;/h1&gt;

&lt;p&gt;There are a plethora of git commands to choose from. And it’s critical that we don’t run commands without knowing what they’ll do to our code.&lt;/p&gt;

&lt;p&gt;If we were to run just &lt;code&gt;git help &amp;lt;command&amp;gt;&lt;/code&gt; then we would get an explanation of the command right there in our terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  &lt;em&gt;Bonus Tip:&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Running the command &lt;code&gt;git help -w &amp;lt;command&amp;gt;&lt;/code&gt; takes us directly to the website that we can read up on all the things with the command in question.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Git is an extremely useful tool. It may be a nightmare if handled incorrectly. I hope these hidden treasures make your Git experience a little more productive.&lt;/p&gt;

&lt;p&gt;What is your go-to Git command? Please let me know in the comments!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#note-of-gratitude"&gt;
  &lt;/a&gt;
  Note of Gratitude
&lt;/h1&gt;

&lt;p&gt;I wanted to take this last opportunity to say thank you.&lt;/p&gt;

&lt;p&gt;Thank you for being here! I could not be able to do what I do without people like you who follow along and take that leap of faith to read my post.&lt;/p&gt;

&lt;p&gt;I hope you’ll &lt;a href="https://polymathsomnath.medium.com/subscribe"&gt;&lt;strong&gt;join me&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://polymathsomnath.medium.com/subscribe"&gt;&lt;strong&gt;my future blog post&lt;/strong&gt;&lt;/a&gt; and stick around because we have something great here.&lt;/p&gt;

&lt;p&gt;And I hope I will help you along in your career for many more years to come!&lt;/p&gt;

&lt;p&gt;See you next time. Bye!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>General Computer Science Topics You Must Know</title>
      <author>Subha Rajagopal</author>
      <pubDate>Thu, 02 Dec 2021 12:56:39 +0000</pubDate>
      <link>https://dev.to/subha822/general-computer-science-topics-you-must-know-2bl1</link>
      <guid>https://dev.to/subha822/general-computer-science-topics-you-must-know-2bl1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Shell Programming&lt;/strong&gt; → Programs to interact between the user &amp;amp; OS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kernal Programming&lt;/strong&gt; →Programs to interact between the OS &amp;amp; Hardware&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interpreter&lt;/strong&gt; → Check for line by line code error and execution&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compiler&lt;/strong&gt; → Check for the entire program and indicate the error at a short execute a whole&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assembly Language&lt;/strong&gt; → Machine Understanding Language&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Level Language&lt;/strong&gt; → OS to Machine Level&lt;/p&gt;




&lt;p&gt;To Know About Me or Connect With Me:&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/subha-rajagopal-822109b7202/"&gt;SubhaRajagopal&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>A Love Letter to Software</title>
      <author>David Whitney</author>
      <pubDate>Thu, 02 Dec 2021 12:49:42 +0000</pubDate>
      <link>https://dev.to/david_whitney/a-love-letter-to-software-1n9f</link>
      <guid>https://dev.to/david_whitney/a-love-letter-to-software-1n9f</guid>
      <description>&lt;p&gt;&lt;strong&gt;Most software isn’t what people think it is.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;It’s a common thread – it’s mistaken for lots of things that it isn’t.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I bet you’re good at maths!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ask the well-intentioned friends and strangers who think we write in ones and zeros.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Software is engineering”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cries the mid-career developer, desperately searching for legitimacy in a world that makes it hard for people to feel their own worth.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Software is architecture!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Says the lead developer, filling out job applications looking to scale their experience and paycheck.&lt;/p&gt;

&lt;p&gt;But programming is &lt;em&gt;programming.&lt;/em&gt; And we do it a disservice, we lower it, by claiming it to be something else.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comparison-and-the-death-of-identity"&gt;
  &lt;/a&gt;
  Comparison and the Death of Identity
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Software is the youngest of industries&lt;/strong&gt;, and with youth comes the need for identity, and understanding – because those things bring legitimacy to an occupation.&lt;/p&gt;

&lt;p&gt;Every new job must run the gauntlet of people’s understanding – and when a discipline is new, or complicated it is &lt;strong&gt;tempting to rely on comparison to borrow credibility&lt;/strong&gt;, and to feel legitimate.&lt;/p&gt;

&lt;p&gt;But comparison is reductive, and over a long enough time can harm the identity of the people that rely on it.&lt;/p&gt;

&lt;p&gt;Software is none of the things that it may seem like.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#software-is-beautiful-because-of-what-it-is"&gt;
  &lt;/a&gt;
  Software is beautiful because of what it is
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;I’m so proud of software and the people that build it.&lt;/strong&gt; And I want you to all be proud of what you are and what you do too.&lt;/p&gt;

&lt;p&gt;Software is the most important innovation of the last one hundred years. Without software, the modern world wouldn’t exist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software is beautiful because we’ve found our own patterns&lt;/strong&gt; that aren’t engineering, or design. They’re fundamentally of software, and they have legitimacy, and are important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You wouldn’t TDD a building&lt;/strong&gt;, even if you might model it first – the disciplines that are of software, are ours, and things to celebrate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We do not need to borrow the authority or identity of other disciplines on the way to finding our own.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just as much as we should celebrate our success, we should embrace and be accountable for our failures. It’s important that we embrace and solve our ethical problems, defend the rights of our workers, and are accountable for our mistakes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Because software does not exist without the humans at the centre of it.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#love-what-you-are"&gt;
  &lt;/a&gt;
  Love What You Are
&lt;/h1&gt;

&lt;p&gt;There’s a trend of negativity that can infect software.&lt;/p&gt;

&lt;p&gt;That everything sucks, that everything is buggy, that modern programmers just plug Lego bricks together – and it’s toxic. &lt;strong&gt;It is absolutely possible to be critical of things that you love to help them grow&lt;/strong&gt;, but unbridled aggression and negativity is worthless.&lt;/p&gt;

&lt;p&gt;Software, even buggy software, has changed the world.&lt;/p&gt;

&lt;p&gt;Software, even software you don’t like, has inspired, and enabled, has been a life changing experience to someone.&lt;/p&gt;

&lt;p&gt;As programmers, our software is our work, our literature, our singular creative output.&lt;/p&gt;

&lt;p&gt;As romantic and pretentious as that sounds – respect each other, and the work, lest we drown out someone’s beautiful violent urge to create and make things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#every-character-matters"&gt;
  &lt;/a&gt;
  Every character matters
&lt;/h1&gt;

&lt;p&gt;I was recently on a podcast where I was asked what advice I’d give to myself twenty years ago, if I could, and after some deliberation I think I finally know the answer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“Always take more time”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Time is the most finite of resources, and &lt;strong&gt;if you want to write beautiful software, you have to do it with intent&lt;/strong&gt;. With thoughtfulness.&lt;/p&gt;

&lt;p&gt;And the only way to do that is to &lt;strong&gt;take your time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We’re often subjected to environments while producing works, where time is the scarcest resource – and simultaneously the thing you need to defend the most to produce work of value and of quality.&lt;br&gt;
If I could have my time again, after every change, every completed story, after everything was done, &lt;strong&gt;I’d give myself the time and the mental space to sit with the work, and soak it in, and improve it&lt;/strong&gt;. Taking time, in the middle of my career, has become the most important part of doing the work.&lt;/p&gt;

&lt;p&gt;When you realise that how you do something matters as much as why you’re doing it – that legibility and form directly affect function, when you take time to think articulate why something is – that’s when you do your best work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-only-analogy-i-subscribe-to"&gt;
  &lt;/a&gt;
  The only analogy I subscribe to
&lt;/h1&gt;

&lt;p&gt;And now the contradiction – after writing about how software should be empowered to be its own thing, let me tell you what I think software is really closest to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software is fundamentally a work of literature.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can look at software through the same lens you would as any body of writing. It has text and subtext. It has authorial intent that perhaps is contradictory to its form. It has phrasing, rhythm, and constrained grammar. &lt;strong&gt;Software is a method of communicating concepts and ideas between humans, using a subset of language.&lt;/strong&gt; The fact that it happens to be executed by a computer is almost a beautiful side effect.&lt;/p&gt;

&lt;p&gt;You code tells a story, your commit messages transfer mood. The best code is written for the reader – using form to imitate function, and flow and form to transfer meaning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I love software, and I love the people that write it&lt;/strong&gt; – and who do so with intent, and thoughtfulness. You’re not plumbers, or electricians, or engineers, however wonderful those jobs are.&lt;/p&gt;

&lt;p&gt;You’re artists. &amp;lt;3&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>psychology</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Making the most boring website ever with TypeScript, NestJs, React and others. Part 9.</title>
      <author>NordicBeaver</author>
      <pubDate>Thu, 02 Dec 2021 12:47:55 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-9-5a77</link>
      <guid>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-9-5a77</guid>
      <description>&lt;p&gt;&lt;em&gt;This series is about making a generic website for a local business with TypeScript, NodeJs, NestJs, Prisma, React and NextJs. I'm trying to make my videos quite short, about 10 minutes each (except for the first one), while putting as much content there as I can. &lt;a href="https://www.youtube.com/playlist?list=PL7b0cPjh8z6K_4qLNu_QdE3RpiU6omViC"&gt;Here&lt;/a&gt; is the full playlist.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-this-episode"&gt;
  &lt;/a&gt;
  In this episode:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#user-roles"&gt;
  &lt;/a&gt;
  User Roles
&lt;/h3&gt;

&lt;p&gt;So first we will add some roles for the users. We'll only need 3 for now: &lt;em&gt;ADMIN&lt;/em&gt;, &lt;em&gt;MANAGER&lt;/em&gt; and &lt;em&gt;GUEST&lt;/em&gt;.&lt;br&gt;
To do that, we'll update our &lt;strong&gt;Prisma&lt;/strong&gt; model and learn how to use guards in &lt;strong&gt;NestJs&lt;/strong&gt; to protect different routes based on current user's role.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deployment-to-dokku"&gt;
  &lt;/a&gt;
  Deployment to Dokku
&lt;/h3&gt;

&lt;p&gt;Then, I'll try to explain how to publish a web application for everyone to see. I use Dokku for my personal projects and I'll show you how simple it is to set it up and deploy to it.&lt;/p&gt;

&lt;p&gt;Since the project is now officially online (even though very unfinished), here are the links: &lt;a href="https://beardybear.nordicbeaver.io/"&gt;Website&lt;/a&gt;, &lt;a href="https://admin.beardybear.nordicbeaver.io/"&gt;Admin Panel&lt;/a&gt; (you can use &lt;em&gt;guest/guest&lt;/em&gt; to login)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pedR8s98wEU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Create an Uber-like Taxi Booking App with advanced features?</title>
      <author>Charles ken</author>
      <pubDate>Thu, 02 Dec 2021 12:44:13 +0000</pubDate>
      <link>https://dev.to/charles84609022/how-to-create-an-uber-like-taxi-booking-app-with-advanced-features-2220</link>
      <guid>https://dev.to/charles84609022/how-to-create-an-uber-like-taxi-booking-app-with-advanced-features-2220</guid>
      <description>&lt;p&gt;Whether starting up a new on-demand taxi service industry or updating an existing offline one, application development is common today among entrepreneurs. Because the online taxi booking service provision highly depends on the respective business app, building it accordingly is much needed. Bearing in mind that, selecting the Uber clone script, a ready-to-go development option available in the market assists them vastly in their business intensely.&lt;/p&gt;

&lt;p&gt;In this blog, we are going to discuss the innovative Uber clone script and its advanced features and effective usages. If you are also an entrepreneur, this blog will definitely be helpful for you with lots of crucial points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-ondemand-uber-clone-app-and-taxi-service"&gt;
  &lt;/a&gt;
  Why on-demand Uber clone app and taxi service?
&lt;/h2&gt;

&lt;p&gt;Transportation in people’s lives is always inevitable in many circumstances. Especially in the busy world atmosphere, lots of working personalities today are highly dependent on public transport services to go for their regular duties. In which, most of the passengers smartly use the on-demand taxi booking app for booking taxis online.&lt;/p&gt;

&lt;p&gt;According to The Business Research Company, the global on-demand taxi service marketplace is projected to grow from US Dollar 23.42 bn in 2020 to US Dollar 28.65 bn in 2021. The COVID resume concerned growth estimation is also projected the same taxi industry online reach to US Dollar 41.22 bn in 2025 at a growth rate (CAGR) of 9.5%.  &lt;/p&gt;

&lt;p&gt;Following, your selection of the Uber clone app for your new taxi booking app development project gets advantageous with a lot of enhanced features and options. Through that, you can powerfully create and launch your app for business relevant to your exact business model and requirements. So, let’s look at these in detail in the following.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-develop-a-taxi-booking-app"&gt;
  &lt;/a&gt;
  How to develop a taxi booking app?
&lt;/h2&gt;

&lt;p&gt;Developing your new taxi booking app using the Uber clone script is different from other development options like Scratch. In this, you could get the following major advantages. That makes your new mobile app so enhanced and unique with collaborated expertise interface modulations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make Ready Your Business Plan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before going to approach your developer, be prepared with your business model and planning. To make it effective in the current market scenario, do your own research on your marketplace especially in your targeted regions for leaching.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find An Expert Developer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As well as, select your expert developer from the market by finely going through their official website and its important details like their experience in the field, client deals, service offers, previous customer satisfaction feedbacks, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interrupt with App Interface Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Uber clone script offers you a fully customizable app development solution in the development area. When you have already pre-planned with your necessary app development requirements for execution, it makes it smart for that important segment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complete the Project Cost-Effectively&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a result, you could complete your overall taxi booking app development for launching quicker than expected. Moreover, the output with several below-mentioned advanced options, your taxi booking app from the Uber clone script would be cost-effective at final.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-functionalities-and-features-of-taxi-booking-app"&gt;
  &lt;/a&gt;
  Important functionalities and features of Taxi Booking App
&lt;/h2&gt;

&lt;p&gt;Along with these, you could receive many important in-app features and functionalities with your new taxi booking app. So that, you could smartly get your huge return of investment from the business speedily. As well, could charmingly run the taxi service business online lucratively thereafter. So let’s explore such notable features and functionalities in the following.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fast User Access&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The premade app has some important user-centric options like quick login with name, mobile number/email ID, or social media credentials. It offers the end-users to get immediate access to app usage even as newbies. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-time Verifications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right from you as an admin to the end-users can track relevant details actively online. For i.e. the customers can track their booked taxis arrivals and on tripping. The drivers can lively track geolocation route mapping indications. And, as a service provider, you can review all business details in god-eye-view monitoring.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robust Data Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your app from the Uber clone script has an advanced data security solution. All the data transactions and transferring in between different players applications and apps to the service automatically converted as end-to-end encrypted. So there has been no third-party sealing and hacking at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Powerful Admin Controls&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From your admin panel, you can access your admin data like business flow analytics, reporting, total earning, etc. So those are gathered from multi-angles of your business in progress online, they would be very dedicated for your knowledge. With them, you can make solid business decisions regarding improvements all the time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#as-a-conclusion"&gt;
  &lt;/a&gt;
  As A Conclusion
&lt;/h2&gt;

&lt;p&gt;Being app development is the main concept for an on-demand taxi business launching, concentrating on it carefully is always recommendable. Given that, building your new Uber-like taxi booking app using the &lt;a href="https://www.spotnrides.com/"&gt;Uber clone script&lt;/a&gt; assists your mobile app to get all the latest features smartly for business. In that, utilization of its advanced options right from development to the service operation online as discussed, make your business so lucrative with high user value in a short period.&lt;/p&gt;

</description>
      <category>uberclone</category>
      <category>programming</category>
      <category>android</category>
      <category>ios</category>
    </item>
    <item>
      <title>How to Secure Your Kubernetes Clusters With Best Practices</title>
      <author>Deepu K Sasidharan</author>
      <pubDate>Thu, 02 Dec 2021 12:37:53 +0000</pubDate>
      <link>https://dev.to/oktadev/how-to-secure-your-kubernetes-clusters-with-best-practices-1a9i</link>
      <guid>https://dev.to/oktadev/how-to-secure-your-kubernetes-clusters-with-best-practices-1a9i</guid>
      <description>&lt;p&gt;Kubernetes has become an unavoidable part of a software infrastructure these days. If you are an enterprise or medium/large company, chances are you are already running Kubernetes clusters for your workloads. If you are a DevOps engineer, there is a good chance you are maintaining either an on-prem Kubernetes cluster or a PaaS like Amazon EKS, Microsoft AKS, or GKE. But regardless of how you run your Kubernetes clusters, you need to make sure that they are secure.&lt;/p&gt;

&lt;p&gt;The Kubernetes API server has multiple layers of security.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/concepts/security/controlling-access/"&gt;&lt;strong&gt;Transport security&lt;/strong&gt;&lt;/a&gt;: All API communication is done via TLS (transport layer security) using valid certificates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/"&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt;: All API requests are authenticated with one of the several authentication mechanisms supported by Kubernetes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/"&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/a&gt;: All authenticated requests are authorized using one or more of the supported authorization models.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/"&gt;&lt;strong&gt;Admission control&lt;/strong&gt;&lt;/a&gt;: All authorized requests, except read/get requests, are validated by admission control modules.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Kubernetes comes with many security options out of the box, but to bulletproof your infrastructure, you need to consider many more security best practices. Today we will look into some of the vital security best practices for Kubernetes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-kubernetes-rolebased-access-control-rbac"&gt;
  &lt;/a&gt;
  1. Use Kubernetes Role-Based Access Control (RBAC)
&lt;/h2&gt;

&lt;p&gt;Kubernetes supports multiple authorization models for its API server. These are &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/abac/"&gt;ABAC (Attributed-Based Access Control)&lt;/a&gt;, &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/"&gt;RBAC (Role-Based Access Control)&lt;/a&gt;, &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/node/"&gt;Node authorization&lt;/a&gt; and the &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/webhook/"&gt;Webhook mode&lt;/a&gt;. Out of all these, RBAC is the more secure and most widely used and is ideal for enterprises and medium to large organizations. With RBAC, you can define role-based access control that closely resembles your organization's business rules. RBAC also works great with OIDC authentication.&lt;/p&gt;

&lt;p&gt;Most Kubernetes distributions have RBAC enabled by default. You can check this by running the command &lt;code&gt;kubectl cluster-info dump | grep authorization-mode&lt;/code&gt;, which should have &lt;code&gt;authorization-mode=RBAC&lt;/code&gt; in the output. If not, you can enable it using the &lt;code&gt;--authorization-mode&lt;/code&gt; flag for the API server when creating or patching the cluster. For example, setting &lt;code&gt;--authorization-mode=RBAC,Node&lt;/code&gt; will enable both RBAC and Node authorization on the cluster.&lt;/p&gt;

&lt;p&gt;Once RBAC is enabled, you can create roles (&lt;code&gt;Role&lt;/code&gt;/&lt;code&gt;ClusterRole&lt;/code&gt;) and bindings (&lt;code&gt;RoleBinding&lt;/code&gt;/&lt;code&gt;ClusterRoleBinding&lt;/code&gt;) to control access to your resources. Here is an example of a role and role binding that lets users view pods and services.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Role&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;fancy-namespace&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pod-service-reader&lt;/span&gt;
&lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;apiGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# "" indicates the core API group&lt;/span&gt;
  &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;pods"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;services]&lt;/span&gt;
  &lt;span class="s"&gt;verbs:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;["&lt;/span&gt;&lt;span class="nv"&gt;get"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;watch"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;list"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The below binds the above role to a specific group of users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;RoleBinding&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;read-pods-services&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;fancy-namespace&lt;/span&gt;
&lt;span class="na"&gt;roleRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Role&lt;/span&gt; &lt;span class="c1"&gt;#this must be Role or ClusterRole&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pod-service-reader&lt;/span&gt; &lt;span class="c1"&gt;# this must match the name of the Role or ClusterRole you wish to bind to&lt;/span&gt;
  &lt;span class="na"&gt;apiGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rbac.authorization.k8s.io&lt;/span&gt;
&lt;span class="na"&gt;subjects&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# subject can be individual users or a group of users. Group is defined in the external authentication service, in this case, an OIDC server&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Group&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-restricted-users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-secure-the-api-server-with-openid-connect"&gt;
  &lt;/a&gt;
  2. Secure the API server with OpenID Connect
&lt;/h2&gt;

&lt;p&gt;Kubernetes supports many authentication mechanisms. Some of the most common are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client certificates&lt;/li&gt;
&lt;li&gt;Basic authentication&lt;/li&gt;
&lt;li&gt;Tokens (Service account tokens, Bearer tokens, and so on)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens"&gt;OpenID Connect (OIDC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Out of all these authentication mechanisms, OIDC is the most secure and scalable solution. It is ideal for clusters accessed by large teams as it provides a single sign-on solution for all users and makes it easy to onboard and offboard users. It is also way more secure than other mechanisms as you don't have to store any sensitive information on a user's computer, like client secrets and passwords. You can also use features like &lt;a href="https://en.wikipedia.org/wiki/Multi-factor_authentication"&gt;MFA&lt;/a&gt; and Yubikey if supported by your OIDC provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alTNUOSa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvim2jjsg1nfaseiknq4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alTNUOSa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvim2jjsg1nfaseiknq4.jpg" alt="K8s OIDC flow" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OIDC combined with RBAC becomes necessary as more and more people start accessing the cluster. It becomes essential to create groups and roles and provide limited access to specific groups. You can read more about this in my previous post &lt;a href="https://developer.okta.com/blog/2021/11/08/k8s-api-server-oidc"&gt;How to Secure Your Kubernetes Cluster with OpenID Connect and RBAC&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-use-secrets-for-all-sensitive-data-with-appropriate-access"&gt;
  &lt;/a&gt;
  3. Use Secrets for all sensitive data with appropriate access
&lt;/h2&gt;

&lt;p&gt;This one should be a no-brainer. Kubernetes has a &lt;a href="https://kubernetes.io/docs/concepts/configuration/secret"&gt;Secret&lt;/a&gt; resource that can be used to store sensitive data. This is a great way to store passwords, keys, and other sensitive data. Secrets can be used for storing string data, docker config, certificates, tokens, files, and so on. Secrets can be mounted as data volumes or exposed as environment variables to be used in containers. Secrets can be plain text or encoded, but please don't be that person who uses plain text secrets.&lt;/p&gt;

&lt;p&gt;Secrets are flexible and native to Kubernetes, so there is no reason for you not to use them. Also, make sure to implement proper RBAC for secrets so that not everyone has access to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-keep-kubernetes-version-up-to-date"&gt;
  &lt;/a&gt;
  4. Keep Kubernetes version up to date
&lt;/h2&gt;

&lt;p&gt;Like any other software, Kubernetes also has bugs and issues. And from time to time, there might be a high severity bug that calls for a &lt;a href="https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"&gt;CVE&lt;/a&gt;. Hence, it's an excellent idea to keep the Kubernetes version up to date on the server and the CLI client. You can check the &lt;a href="https://kubernetes.io/docs/reference/issues-security/security/"&gt;Kubernetes security and disclosure information website&lt;/a&gt; to see if there are known security vulnerabilities for your Kubernetes version. If you are using a managed PaaS, it should be pretty easy to upgrade, and for on-prem installations, there are tools like &lt;a href="https://kops.sigs.k8s.io/"&gt;kOps&lt;/a&gt;, &lt;a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/"&gt;kubeadm&lt;/a&gt;, and so on, that makes it easy to upgrade clusters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-restrict-kubelet-api-and-ssh-access"&gt;
  &lt;/a&gt;
  5. Restrict kubelet, API, and SSH access
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/"&gt;kubelet&lt;/a&gt; is the primary "node agent" running on each node, and by default, a kubelet's HTTP endpoints are not secured. This could allow unintended access and hence &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/"&gt;should be restricted&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When someone has access to a Kubernetes cluster, they can access the k8s API server and SSH into the cluster nodes themselves. To limit node access, cluster access should be limited as much as possible. Disable SSH access for non-admin users. Secure the API server using OIDC and RBAC, as we saw earlier, so that only authenticated users with sufficient roles can access the API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-secure-container-images"&gt;
  &lt;/a&gt;
  6. Secure container images
&lt;/h2&gt;

&lt;p&gt;Securing the container images that run on the cluster is as important as securing the cluster itself. A malicious image running on a cluster could wreak havoc. Follow these best practices for container image security.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not run containers as root as this would give the container unlimited access to the host. Always run the containers using a non-root user.&lt;/li&gt;
&lt;li&gt;Enable container image scanning in your CI/CD phase to catch known vulnerabilities using tools like &lt;a href="https://github.com/quay/clair"&gt;clair&lt;/a&gt; or &lt;a href="https://github.com/anchore/anchore-engine"&gt;Anchore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use minimal up-to-date official base images and remove all unwanted dependencies, packages, and debugging tools from the image as it will make it more secure and lightweight.&lt;/li&gt;
&lt;li&gt;Prevent loading unwanted kernel modules in the containers. These can be restricted using rules in &lt;code&gt;/etc/modprobe.d/kubernetes-blacklist.conf&lt;/code&gt; of the node or by uninstalling the unwanted modules from the node.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://docs.docker.com/docker-hub/official_images/"&gt;official verified images&lt;/a&gt; for popular software. Use a trusted registry for non-official images and always verify the image publisher&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/docker/docker-bench-security"&gt;Docker Bench for Security&lt;/a&gt; to audit your container images&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/"&gt;Pod security policies&lt;/a&gt; to limit a container's access to the host further&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about it in our "&lt;a href="https://developer.okta.com/blog/2019/07/18/container-security-a-developer-guide"&gt;Container Security: A Developer Guide&lt;/a&gt;".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-control-traffic-between-pods-and-clusters"&gt;
  &lt;/a&gt;
  7. Control traffic between pods and clusters
&lt;/h2&gt;

&lt;p&gt;Generally, pods within the same cluster will be able to communicate with each other, and if you have multiple clusters in the same network, there may be traffic between them as well. Do not leave this all open, as it could lead to a compromised cluster when another in the network is affected. Use &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/"&gt;Kubernetes network policies&lt;/a&gt; to control traffic between pods and clusters and allow only necessary traffic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-use-namespaces-to-isolate-workloads"&gt;
  &lt;/a&gt;
  8. Use namespaces to isolate workloads
&lt;/h2&gt;

&lt;p&gt;Do not run all your workloads in a single namespace. Isolating workloads in different namespaces based on business needs is more secure and easier to manage with RBAC. This way, you can fine-tune RBAC even further to let users access only what they need to see. You can also use Kubernetes network policies to isolate traffic between namespaces where applicable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-limit-resource-usages"&gt;
  &lt;/a&gt;
  9. Limit resource usages
&lt;/h2&gt;

&lt;p&gt;As with securing APIs and the cluster itself, it is also essential to set resource limits on how much CPU, memory, and persistent disk space is used by namespaces and resources. This secures your cluster from denial of service attacks when a particular container uses up all the resources. &lt;a href="https://kubernetes.io/docs/concepts/policy/resource-quotas/"&gt;Resources quotas&lt;/a&gt; and &lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/"&gt;limit ranges&lt;/a&gt; can be used to set limits at the namespace level, and &lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"&gt;Requests and limits&lt;/a&gt; can be used to set resource limits at container level as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-use-monitoring-tools-to-monitor-all-traffic-and-enable-audit-logging"&gt;
  &lt;/a&gt;
  10. Use monitoring tools to monitor all traffic and enable audit logging
&lt;/h2&gt;

&lt;p&gt;Finally, it is also extremely important to monitor and audit your clusters. &lt;a href="https://kubernetes.io/docs/tasks/debug-application-cluster/audit/"&gt;Enable audit logging for the cluster&lt;/a&gt; and use monitoring tools to keep an eye on the networking traffic to, from and within a cluster. Monitoring can be done using open-source tools, like Prometheus, Grafana, or with proprietary tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;p&gt;Furthermore, keep these infrastructure best practices also in mind when securing your Kubernetes cluster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that all communication is done via TLS.&lt;/li&gt;
&lt;li&gt;Protect etcd with TLS, Firewall, and Encryption and restrict access to it using strong credentials.&lt;/li&gt;
&lt;li&gt;Set up IAM access policies in a supported environment like a PaaS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.cncf.io/blog/2021/08/20/how-to-secure-your-kubernetes-control-plane-and-node-components/"&gt;Secure the Kubernetes Control Plane&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Rotate infrastructure credentials frequently.&lt;/li&gt;
&lt;li&gt;Restrict cloud metadata API access when running in a PaaS like AWS, Azure, or GCP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#learn-more-about-kubernetes-and-security"&gt;
  &lt;/a&gt;
  Learn more about Kubernetes and security
&lt;/h2&gt;

&lt;p&gt;If you want to learn more about Kubernetes, OIDC, or using OIDC with Kubernetes, and security in general, check out these additional resources.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.okta.com/blog/2021/11/08/k8s-api-server-oidc"&gt;How to Secure Your Kubernetes Cluster with OpenID Connect and RBAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/securing-a-cluster/"&gt;Securing a Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens"&gt;OpenID Connect Tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.okta.com/identity-101/role-based-access-control-vs-attribute-based-access-control/"&gt;RBAC vs. ABAC: Definitions &amp;amp; When to Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.okta.com/docs/concepts/oauth-openid/"&gt;OAuth 2.0 and OpenID Connect Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.okta.com/blog/2021/10/08/secure-access-to-aws-eks"&gt;Secure Access to AWS EKS Clusters for Admins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.okta.com/blog/2020/02/03/managing-multiple-okta-instances-with-terraform-cloud"&gt;Managing Multiple Okta Instances with Terraform Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you liked this tutorial, chances are you'll enjoy the others we publish. Please follow &lt;a href="https://twitter.com/oktadev"&gt;@oktadev on Twitter&lt;/a&gt; and &lt;a href="https://youtube.com/oktadev"&gt;subscribe to our YouTube channel&lt;/a&gt; to get notified when we publish new developer tutorials.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>oidc</category>
      <category>okta</category>
    </item>
    <item>
      <title>How to Choose The Perfect Color Scheme</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Thu, 02 Dec 2021 12:34:17 +0000</pubDate>
      <link>https://dev.to/markfusion/how-to-choose-the-perfect-color-scheme-2ld8</link>
      <guid>https://dev.to/markfusion/how-to-choose-the-perfect-color-scheme-2ld8</guid>
      <description>&lt;p&gt;Choosing the perfect color scheme can be difficult, but it is also an important step in web design. Color schemes affect how professional or unprofessional a website appears to be, and can even make your visitors feel certain emotions. The right color scheme will not only look good on your site but will also help you generate more revenue by getting more people to convert. In this blog post, we'll go over some factors that you should consider when choosing a color scheme for your next project!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#basics-of-color-schemes"&gt;
  &lt;/a&gt;
  Basics of Color Schemes
&lt;/h2&gt;

&lt;p&gt;First, let's talk about the basics. Color schemes are made up of several colors that work well together and compliment each other. Color schemes can be monochromatic, which is just one color with different shades or tints/tones (lightened or darkened versions) of that same hue. A complementary color scheme uses opposite hues on the color wheel to create a contrasting look, while an analogous color scheme uses related hues found next to each other on the color wheel for a cohesive feel. Monochrome designs use only black, white and grey tones - no colors at all! All three types have their own advantages depending on what you're looking to achieve in your design but they're not always right for every project so it's important to make good decisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-attract-people"&gt;
  &lt;/a&gt;
  How to Attract People?
&lt;/h2&gt;

&lt;p&gt;Now that we know the basics, let's talk about how you can use color to affect your visitors and generate more revenue for your business! Color affects everything including human emotions and behavior; therefore, it is essential when designing a website. Let's go over some factors you should consider when choosing a color scheme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The goal of your project. What do you want people to feel after visiting? Are you trying to create a trust or add energy? Make sure that all colors in your design help achieve this goal without conflicting with each other. For example, if people are likely going to be spending time on your site reading articles then dark background colors would not work well because they could cause eye fatigue while light colors provide more comfort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Color preferences of your target audience. Colors are often associated with personal preference so it's important to know who you're designing for! Let's say that you want to create a website targeted at men, but the majority of them don't like pink or purple because they associate this color scheme with femininity and weakness. This is something to keep in mind when choosing a design direction - make sure the colors work well together while also appealing to your visitors' tastes! You can even do some quick research online by asking people questions about their favorite color schemes on social media platforms such as Reddit. This will give you an idea of what works well right away before doing any additional research.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Color symbolism based on culture and region. Color meanings are often different depending on where someone is from! For example, green symbolizes luck and growth in the United States but it also represents Islam because this color has been used to decorate mosques all over the world for hundreds of years. If you're designing a website that targets people from multiple countries then make sure you do your research before using certain colors as they might have negative connotations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Color psychology based on web design industry standards. In addition to cultural symbolism, there are specific psychological effects associated with various colors within our culture too. Some examples include: blue creating trustworthiness &amp;amp; calmness, orange giving a sense of warmth or energy (the company I work at uses orange throughout its branding because we want customers/visitors to feel energized when they visit), and green symbolizing wealth or tranquility (a lot of banks use this color scheme in their advertisements because it gives off a sense of security). Color psychology is often used by designers within the web design industry so make sure you're aware of what messages these colors could be sent to your visitors!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-color-scheme-should-i-use"&gt;
  &lt;/a&gt;
  What Color Scheme Should I Use?
&lt;/h2&gt;

&lt;p&gt;Now that we've gone over some factors to consider when choosing a color scheme, let's talk about how you can choose one for yourself. Remember: there are no rules when it comes to designing with color - only things that help improve the quality and experience for users. Here's an example process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Define your audience and goals first before thinking about which colors to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Brainstorm some color schemes that might work well for your project based on the factors we mentioned above. Color inspiration can come from anywhere so don't be afraid of experimenting! Personally, Pinterest has been one of my favorite sources because it's easy to find beautiful images with different colors and save them directly into my board - this allows me to reference these boards whenever I need ideas for new projects too so they're definitely worth checking out. If you have an iPhone then check out Color Hunt which is another great source full of vibrant palettes!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you've narrowed down what type of color scheme would fit best within your industry, project, and target audience then start to experiment with different color combinations. Color is subjective - it means something different for everyone so make sure you test out what works best before deciding on a final direction!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try playing around with the opacity of your colors too. Sometimes adding more black or white into certain areas of your design can help improve contrast and readability which might be necessary if there's not enough separation between text and background colors in some parts of your website... Like we mentioned earlier: rules within this industry aren't concrete so don't feel like you need to follow these steps exactly either! Most importantly: create something that fits well with your brand while also giving visitors an awesome experience.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Alright, these were several rules that you should follow if you want to grow your audience or number of customers. However, there's still one gold rule called "Experiment" you always need to experiment and nobody can know what is inside of your mind, probably you will come up with something new in this area, and to do it you need a ton of practice. Thus if you enjoyed then Like and Subscribe to me and never miss new articles :)&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>C vs. C++: Who is the winner?</title>
      <author>Nomadev💻🔱</author>
      <pubDate>Thu, 02 Dec 2021 12:20:01 +0000</pubDate>
      <link>https://dev.to/thenomadevel/c-vs-c-who-is-the-winner-4h12</link>
      <guid>https://dev.to/thenomadevel/c-vs-c-who-is-the-winner-4h12</guid>
      <description>&lt;p&gt;Hello Techies, It's &lt;a href="https://twitter.com/thenomadevel"&gt;Nomadev&lt;/a&gt; back with another blog. So today's blog is on one of the most debatable topics, &lt;strong&gt;Who's the winner: C Vs C++&lt;/strong&gt;.  A lot of beginners have had the same questions when they started their programming journey. There was a long time where I didn't know the answer. So I decided to make a blog on the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfdDjwfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637914261576/5nfYC7vz_.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfdDjwfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637914261576/5nfYC7vz_.gif" alt="lets start.gif" width="480" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-programming-language"&gt;
  &lt;/a&gt;
  C programming language
&lt;/h2&gt;

&lt;p&gt;C programming language is one of the ancient programming languages and is in demand right from the time, it was developed. C is the mother of all the modern programming languages because most of the compilers and JVMs are written in the C language. &lt;/p&gt;

&lt;p&gt;C is a procedural language and a versatile language, which allows maximum control with a minimal number of commands. C language has a rich library collection having most of the arithmetic and logical operations, which are predefined. All the modern languages have borrowed the core concepts from C languages like arrays, functions, file handling, and much more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Very fast speed of compilation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Portable (Unlike assembly languages)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open-source&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports both low and high-level programming&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Built-in functions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extensible&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prohibits Object-Oriented Programming Paradigm (Inheritance, Polymorphism, Encapsulation, Abstraction, Data Hiding)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No Garbage Collection&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lacks Constructor and Destructor&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lacks Concept of namespace&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Somehow not easy to debug&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;C++ is one of the most popular programming languages around, It is also just the next level of C programming. I was developed aiming to make a dynamic language that is efficient and has some additional features to C. It is used to develop games, operating systems, browsers, and so on. It is a powerful as well as a very flexible language having both high and low-level language features.&lt;/p&gt;

&lt;p&gt;C++ is an object-oriented programming language, which includes concepts like classes, inheritance, polymorphism, data abstraction, and encapsulation that allow code reusability and make a program even more reliable. Earlier C++ was known by the name &lt;strong&gt;C with classes&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Object-oriented programming language&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports Exception handling and inline functions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multi-Paradigm and Faster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Has Standard Template Library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extensible&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static Type System&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Large Community&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A little complex to learn&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Absence of  garbage collection &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security Issues&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#ease-of-learning"&gt;
  &lt;/a&gt;
  Ease of Learning
&lt;/h2&gt;

&lt;p&gt;As C++ is a subset of the C language, that means their syntax resembles some extent.  C++ is an extension of the C language having in-built functions and a standard template library so it makes it comparatively easier to learn as a newbie.&lt;/p&gt;

&lt;p&gt;Sample syntax &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;printf("Hello, World!") //&lt;em&gt;for printing a string in C&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;scanf("%d", &amp;amp;testInt); //&lt;em&gt;for storing integer input in C&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;cout &amp;lt;&amp;lt; "Hello, World" // *for printing string in C++ * &lt;/p&gt;

&lt;p&gt;cin &amp;gt;&amp;gt; testInt;         * //for storing integer input in C++*&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#programming-paradigm"&gt;
  &lt;/a&gt;
  Programming Paradigm
&lt;/h2&gt;

&lt;p&gt;C is a procedural-oriented language, so it is divided into modules and procedures, therefore it can make your code quite messy when it grows in size.&lt;br&gt;
On the other hand, C++ supports multiple paradigms, which allows it to follow both procedural as well as object-oriented ways of programming. Being object-oriented, C++ code can be organized in a proper way and simultaneously increases productivity. The object-oriented nature of C++ helps developers to develop server-side software and fast applications.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#function-overloading"&gt;
  &lt;/a&gt;
  Function Overloading
&lt;/h2&gt;

&lt;p&gt;Function overloading is one of the most powerful features updated to  C++ programming language, a form of polymorphism. In it, a function with the same name can be used for different purposes.&lt;/p&gt;

&lt;p&gt;For instance, the function add() can be defined in two ways. We can use it to calculate the sum of integer values, and for the string part, it can be used to concatenate two (or more) strings. Unlike C++, the C programming language doesn’t provide support for function overloading.&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-development-area"&gt;
  &lt;/a&gt;
  Application Development Area
&lt;/h2&gt;

&lt;p&gt;C is a good option for embedded devices and system-level code. C++, on the contrary, is a top choice for developing gaming, networking, and server-side applications. It is also a great option for the development of device drivers.&lt;/p&gt;

&lt;p&gt;The authority of C++ lies in performance and speed. Though C also offers these both qualities, C++ takes it a step further.&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-standard-template-librarystl"&gt;
  &lt;/a&gt;
  The Standard Template Library(STL)
&lt;/h2&gt;

&lt;p&gt;C++ offers the Standard template library, which provides template classes for most of the data structures and their components for implementing added, build-in functionalities. You don't have to write the whole snippet every time you want to implement any data structure. Whereas C has no such library. Whereas &lt;strong&gt;C supports the graphic library&lt;/strong&gt;. But after Python made graphics easier, its graphic library's popularity decreased. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#from-where-to-learn-c-and-c"&gt;
  &lt;/a&gt;
  From Where to learn C and C++
&lt;/h2&gt;

&lt;p&gt;Both languages are known as good first languages to learn in your programming journey.&lt;/p&gt;

&lt;p&gt;To learn C:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=LMUCmgghEXs"&gt;CS50 2021 - Lecture 1 - C&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.freecodecamp.org/news/the-c-beginners-handbook/"&gt;The C Beginner's Handbook: Learn C Programming Language basics in just a few hours&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=KJgsSFOSQv0"&gt;C Programming Tutorial for Beginners&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn C++:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/beginning-c-plus-plus-programming/?LSNPUBID=JVFxdTr9V80&amp;amp;ranEAID=JVFxdTr9V80&amp;amp;ranMID=39197&amp;amp;ranSiteID=JVFxdTr9V80-0AGHx4c46bwVKt_wTdAvZw&amp;amp;utm_medium=udemyads&amp;amp;utm_source=aff-campaign"&gt; Beginning C++ Programming - From Beginner to Beyond&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=vLnPwxZdW4Y"&gt;C++ Tutorial for Beginners - Full Course&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://faculty.ksu.edu.sa/sites/default/files/ObjectOrientedProgramminginC4thEdition.pdf"&gt;Object-Oriented Programming in C++&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#who-is-the-winner"&gt;
  &lt;/a&gt;
  Who is the winner:
&lt;/h2&gt;

&lt;p&gt;C and C++ both are considered the most popular and evergreen languages in programming, both have some pros and cons. But in my humble opinion, if you are just getting started on programming and you have enough time to learn stuff and you want to make your fundamentals strong, you should learn C first and then master data structures and algorithms and implement them in it. Believe me, if you will get successful, you will surely become a sigma programmer. And you will never face any problem in switching to some other tech stack. So this was my personal opinion,&lt;br&gt;
 You can your opinion in the comment section below.&lt;/p&gt;

&lt;p&gt;So this was it, If you liked this blog make sure to follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; for more tech information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/thenomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGmbU6we--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637395103449/aVaT64w2l.gif" alt="good-twitter.gif" width="220" height="165"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you want to appreciate my work you can  &lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;buy me a coffee&lt;/a&gt;, &lt;strong&gt;Your appreciation is my motivation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Vno0upf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637869195331/r4SfPP57h.jpeg" alt="coffee.jfif" width="880" height="441"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;That's my time Dev's, See you in the next one. Happy Coding.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>opensource</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Abstract Syntax Tree</title>
      <author>DrBearhands</author>
      <pubDate>Thu, 02 Dec 2021 11:59:46 +0000</pubDate>
      <link>https://dev.to/drbearhands/the-abstract-syntax-tree-1p30</link>
      <guid>https://dev.to/drbearhands/the-abstract-syntax-tree-1p30</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;One of the first steps a compiler must take is parse the human-readable program format, usually a plain text file, and put it into a structure the compiler can work with; the &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Tree&lt;/a&gt; (abbreviated to AST).&lt;/p&gt;

&lt;p&gt;Here's a simple example with code followed by an AST:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDaENfEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gquen7dtiwrqcsykkr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDaENfEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gquen7dtiwrqcsykkr5.png" alt="AST of above code" width="179" height="155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and a slightly more complex example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5h5efOtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xcs0mskaef54udkckqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5h5efOtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xcs0mskaef54udkckqr.png" alt="AST of above code" width="315" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in this post I wish to define the AST for my language based on requirements set forth previously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#underlying-litterature"&gt;
  &lt;/a&gt;
  Underlying litterature
&lt;/h2&gt;

&lt;p&gt;I'm primarily basing myself on the following work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.microsoft.com/en-us/research/publication/implementing-functional-languages-a-tutorial/"&gt;[Peyton Jones &amp;amp; Lester 1992]&lt;/a&gt; &lt;em&gt;Implementing Functional Languages: a tutorial&lt;/em&gt;. The title of this book is self-explanatory, though I should mention it covers lazy languages specifically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[Martin-Löf 1973] &lt;em&gt;An intuitionistic theory of types: predicative part&lt;/em&gt;. This article first describes the Martin-Löf type system, that is, dependent types. It explains how propositions about values in a program can be expressed themselves as types and terms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bentnib.org/quantitative-type-theory.pdf"&gt;[Atkey 2018]&lt;/a&gt; &lt;em&gt;Syntax and Semantics of Quantitative Type Theory&lt;/em&gt;. This article describes quantitative type theory, which marries dependent types with linear values and erasure.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, I'm also using a lot of transitive knowledge and things I picked up here and there, but have no specific source for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-default-ast"&gt;
  &lt;/a&gt;
  A default AST
&lt;/h2&gt;

&lt;p&gt;To define how an AST might look, we must specify a language grammar. This is often done using &lt;a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form"&gt;BNF (Backus-Naur Form)&lt;/a&gt; notation. In languages like Haskell and Idris it is incredibly easy to express it directly in a type, so I will do that instead.&lt;/p&gt;

&lt;p&gt;I start from the AST given in &lt;a href="https://www.microsoft.com/en-us/research/publication/implementing-functional-languages-a-tutorial/"&gt;[Peyton Jones &amp;amp; Lester 1992]&lt;/a&gt; p.17, translated to Idris:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data Expr a
  = EVar String
  | ENum Int
  | ECtr Int Int
  | EAp (Expr a) (Expr a)
  | ELet IsRec (List (a, Expr a)) (Expr a)
  | ECase (Expr a) (List (Alt a))           
  | ELam (List a) (Expr a)

data Alt a = (Int, List a, Expr a)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the type-variable &lt;code&gt;a&lt;/code&gt; is the "binder" of values. Generally this will be a &lt;code&gt;String&lt;/code&gt; representing the name of a variable, but different types could be used as well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EVar&lt;/code&gt; represents named variables, such as &lt;code&gt;x&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ENum&lt;/code&gt; is for number primitives: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;42&lt;/code&gt;, etc. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ECtr&lt;/code&gt; is less intuitive, when we define a type, such as &lt;code&gt;data MaybeInt = Just Int | Nothing&lt;/code&gt;, each constructor can be given a number, called the tag. The tag can be used internally by case expressions to match on the right constructor. The other &lt;code&gt;Int&lt;/code&gt; argument to &lt;code&gt;ECtr&lt;/code&gt; is the arity: how many arguments the constructor takes. In the example &lt;code&gt;Just&lt;/code&gt; has arity 1 and &lt;code&gt;Nothing&lt;/code&gt; has arity &lt;code&gt;0&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;EAp&lt;/code&gt; is function application. For instance, &lt;code&gt;f x&lt;/code&gt; would parse to &lt;code&gt;EAp (EVar "f") (EVar "x")&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ELet&lt;/code&gt; is for &lt;code&gt;let ... in&lt;/code&gt; expressions, where the &lt;code&gt;(a, Expr a)&lt;/code&gt; values are the variable definitions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ECase&lt;/code&gt; is a case expression. The &lt;code&gt;Alt a&lt;/code&gt; type has a tag value to match, with a list of constructor arguments, and an expression.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ELam&lt;/code&gt; is for lambda functions.&lt;/p&gt;




&lt;p&gt;There are a few changes I wish to make based mostly on preference.&lt;/p&gt;

&lt;p&gt;First, we can determine whether a let-expression is recursive, e.g. &lt;code&gt;let xs = 1 : xs in ...&lt;/code&gt;, by static analysis of the enclosed definitions. &lt;a href="https://www.microsoft.com/en-us/research/publication/implementing-functional-languages-a-tutorial/"&gt;[Peyton Jones &amp;amp; Lester 1992]&lt;/a&gt; does this, more or less, in 6.8.3. I prefer not to have a specific field for it so that I have a single source of truth. I will remove the &lt;code&gt;IsRec&lt;/code&gt; field. I suspect the book only uses this field to avoid having to explain dependency analysis first.&lt;/p&gt;

&lt;p&gt;Second, numbers are just constructors that should really check their priviledge. Defaulting to &lt;code&gt;int&lt;/code&gt; is a fantastic source of bugs. By giving numbers special treatment we are also overlooking more generic optimizations. &lt;code&gt;ENum&lt;/code&gt; goes.&lt;/p&gt;

&lt;p&gt;Third, I'm taking a hint from Elm style guidelines and replacing builtin types by more meaningful custom ones.&lt;/p&gt;

&lt;p&gt;After those basic changes we are left with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data Expr a
  = EVar VarID
  | ECtr CtrID
  | EAp (Expr a) (Expr a)
  | ELet (List (Def a)) (Expr a)
  | ECase (Expr a) (List (Alt a))           
  | ELam (List a) (Expr a)

data Alt a = MkAlt CtrID (List VarID) (Expr a)

data Def a = MkDef a (Expr a)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have left the various IDs intentionally undefined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-ast-hollistic"&gt;
  &lt;/a&gt;
  Making the AST hollistic
&lt;/h2&gt;

&lt;p&gt;To consider what changes are necessary to support hollistic programming, we must go back to the language's goals.&lt;/p&gt;

&lt;p&gt;If we wish to define the whole system in a language, rather than one particular program, we must start considering changes in code over time. Typically, it is the responsibility of the developer to ensure that changes to not break compatibility with persistent systems, such as databases. If such systems are generated by the compiler, it is the compiler that must be able to prove compatibility with some previous version. Immutability helps a great deal here. Just as &lt;a href="https://elm-lang.org/news/blazing-fast-html"&gt;Elm uses immutability to quickly determine what areas of a DOM need updating&lt;/a&gt;, so too we wish to have immutability in program definitions themselves, so we can correctly determine what is compatible. It would be nice if we had some kind of "metapurity": make the act of programming itself pure.&lt;/p&gt;

&lt;p&gt;To achieve this, I will copy the identify-by-hash approach of &lt;a href="https://www.unisonweb.org/"&gt;unison&lt;/a&gt;. Where names are stateful and may point to different functions over time, hashes are stateless. If a function changes, so does its hash.&lt;/p&gt;

&lt;p&gt;Of course, programming with hashes directly is infeasible for programmers. We need a human-compatible language, let's call it the display language. In most other programming languages, the display language is the source of truth. The core language AST is derived from it during compilation. There is a missed opportunity here. &lt;/p&gt;

&lt;p&gt;A lot of effort is being wasted by developers fighting about pure display concerns: tabs vs spaces, camelCase vs PascalCase vs snake_case vs kebab-case, operators vs functions, import definitions, naming, alignment, egyptian brackets... after removing names as identifiers, none of these concerns change a program's AST in the core language. If we make the core language the source of truth, and define the display language as (isomorphic to) the core language plus some display information (e.g. variable names), we can do away with those issues entirely.&lt;/p&gt;

&lt;p&gt;Now, back to the AST&lt;/p&gt;




&lt;p&gt;Many naming issues are already resolved by resorting to hashes, but variables may also be bound by let-expressions, lambdas, and supercombinators. For there, we don't really need hashes. We can use a &lt;a href="https://en.wikipedia.org/wiki/De_Bruijn_index"&gt;&lt;em&gt;de Bruijn index&lt;/em&gt;&lt;/a&gt;, slightly adapted to work with let-expressions and supercombinators as well (both can be converted to lambda functions, but that seems counter-productive).&lt;/p&gt;

&lt;p&gt;I will have to distinguish between local variables, using de Bruijn indices, and global variables. Binder types have become superfluous, we just need to know &lt;em&gt;how many&lt;/em&gt; binders a binding-expression has.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data Expr
  = ELVar Nat               ||| de Bruijn index of locally-bound variable
  | EGVar Hash              ||| Hash of globally bound supercombinator
  | ECtr CtrID                    
  | EAp Expr Expr
  | ELet (List Expr) Expr   ||| 1st arg is definitions, second is the "in" part
  | ECase Expr (List Alt)           
  | ELam Nat (Expr a)       ||| Only need to know number of arguments

data Alt = MkAlt CtrID Expr ||| # arguments derived from CtrID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dependent-typing"&gt;
  &lt;/a&gt;
  Dependent typing
&lt;/h2&gt;

&lt;p&gt;This leaves us with 2 problems: &lt;code&gt;CtrID&lt;/code&gt; is not defined, and we are missing a way to use types as values. &lt;/p&gt;




&lt;p&gt;&lt;em&gt;unfortunately, I start using math heavily here, and have not found a satisfactory way to display it on dev.to that does not require a lot of manual work. I ask you to continue reading on &lt;a href="https://drbearhands.com/pl-design/2-ast/"&gt;my website&lt;/a&gt; instead.&lt;/em&gt;&lt;/p&gt;




</description>
    </item>
  </channel>
</rss>
