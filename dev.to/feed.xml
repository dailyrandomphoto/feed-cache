<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HOW TO PRACTICE FOR WEB-DEVELOPMENT ?</title>
      <author>Mihir Amin</author>
      <pubDate>Mon, 08 Nov 2021 15:00:00 +0000</pubDate>
      <link>https://dev.to/dynamicmortal/how-to-practice-for-web-development--56pc</link>
      <guid>https://dev.to/dynamicmortal/how-to-practice-for-web-development--56pc</guid>
      <description>&lt;p&gt;The best way to master something, is to Practice, practice &amp;amp; practice. Continuous practice leads to mastery. You can be &lt;strong&gt;PERFECT&lt;/strong&gt; too, because&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Practice Makes a Man Perfect!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Let's explore&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="www.codepen.io"&gt;&lt;h2&gt;Codepen&lt;/h2&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each week there is a challenge at Codepen. The most loved pens would get featured in the Trending Page of Codepen.io&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYT-l4A---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jqb0xg5oxafwp90iwf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYT-l4A---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jqb0xg5oxafwp90iwf7.png" alt="Image description" width="880" height="391"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="www.freecodecamp.org"&gt;&lt;h2&gt;freeCodeCamp&lt;/h2&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;freeCodeCamp is the most famous free learning hub for Beginners to learn Coding. freeCodeCamp has many challenges after every course. You can also obtain Certificate after every course completed. &lt;br&gt;&lt;em&gt;Attempt it for perfection.&lt;/em&gt;
![Image description](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj5soer8dtjhzwu5zf0j.png)
&lt;a href="www.dailyui.co"&gt;&lt;h2&gt;DailyUI&lt;/h2&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Mails with challenges everyday after sign-up. Daily Challenges can help you maintain streak !!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joJrb4wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s7tdtlvsbrgm6f3g9br.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joJrb4wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s7tdtlvsbrgm6f3g9br.png" alt="Image description" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Best 3 Youtube channel for Learning DevOps</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Mon, 08 Nov 2021 14:49:22 +0000</pubDate>
      <link>https://dev.to/star_trooper/best-3-youtube-channel-for-learning-devops-51m0</link>
      <guid>https://dev.to/star_trooper/best-3-youtube-channel-for-learning-devops-51m0</guid>
      <description>&lt;h1&gt;&lt;a href="https://www.youtube.com/c/TechWorldwithNana"&gt;1.TechWorld with Nana&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14SXDKgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3srq7jxwmyrlj00pvob6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14SXDKgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3srq7jxwmyrlj00pvob6.png" alt="Techworld with Nana" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.techworld-with-nana.com/"&gt;TechWorld with Nana&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-"&gt;
  &lt;/a&gt;
  About :
&lt;/h4&gt;


&lt;li&gt;TechWorld with Nana youtube channel is focused on Cloud and DevOps founded by &lt;a class="mentioned-user" href="https://dev.to/techworld_with_nana"&gt;@techworld_with_nana&lt;/a&gt;
 . &lt;/li&gt;
&lt;li&gt;You can find beginner friendly crash course in which you will learn concepts of Docker , Kubernetes , Github Actions , AgroCD , Terraform etc from scratch.

&lt;h1&gt;&lt;a href="https://www.youtube.com/c/DevOpsDirective"&gt;2.DevOps Directive&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z0m60u46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrftmpdev8ss3uoqs1oj.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z0m60u46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrftmpdev8ss3uoqs1oj.JPG" alt="DevOps Directive" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://devopsdirective.com/"&gt;DevOps Directive&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-"&gt;
  &lt;/a&gt;
  About :
&lt;/h4&gt;




&lt;/li&gt;
&lt;li&gt;DevOps Directive youtube channel also focuses on Cloud and DevOps concepts, founded by &lt;a class="mentioned-user" href="https://dev.to/sidpalas"&gt;@sidpalas&lt;/a&gt;
  . &lt;/li&gt;
&lt;li&gt;You can find beginner friendly tutorial in which you will learn concepts of Docker , Github Actions and Cloud platforms like AWS from scratch. &lt;/li&gt;
&lt;li&gt; Sid also shares tips and best practices about how to build small size docker images.
&lt;/li&gt;
&lt;li&gt;On DevOps Directive youtube channel you will also find talks and podcast with professionals working in Tech Industry which are hundred percent insightful to watch.

&lt;h1&gt;&lt;a href="https://www.youtube.com/c/Freecodecamp/"&gt;3.FreeCodeCamp&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TwEQU2AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdt8b4bbwid9p6wzq3fp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TwEQU2AX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdt8b4bbwid9p6wzq3fp.JPG" alt="FreeCodeCamp" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h3&gt;




&lt;/li&gt;
&lt;li&gt;On Freecodecamp youtube channel you will find numereous Devops and Cloud related tutorials and complete crash course t
&lt;/li&gt;
&lt;li&gt; It doesn't focus only on DevOps and Cloud but reason to add the youtube channel in this blog is for getting started with DevOps you need to have basic knowledge of Web Development for which Freecodecamp have covered you.
I guess every web languages and framework tutorial are present on FreeCodeCamp.
&lt;/li&gt;
&lt;li&gt; Freecodecamp also has amazing blogs written by amazing professional folks which you will find on there official website.
&lt;/li&gt;

</description>
      <category>devops</category>
      <category>resources</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cannot import name 'TextField' from 'wtforms'</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 08 Nov 2021 14:38:57 +0000</pubDate>
      <link>https://dev.to/sm0ke/cannot-import-name-textfield-from-wtforms-58n8</link>
      <guid>https://dev.to/sm0ke/cannot-import-name-textfield-from-wtforms-58n8</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This short article explains how to fix &lt;strong&gt;"Cannot import name TextField from wtforms"&lt;/strong&gt; error that recently bumped after &lt;strong&gt;WTForms&lt;/strong&gt; library update to version 3.x. For newcomers, &lt;strong&gt;WTForms&lt;/strong&gt; is a flexible forms validation and rendering library for Python/Flask web development. It can work with whatever web framework and template engine you choose. It supports data validation, CSRF protection, internationalization (I18N). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#error-text"&gt;
  &lt;/a&gt;
  Error Text
&lt;/h2&gt;

&lt;p&gt;In case your legacy app uses WTForms without an explicit version in &lt;code&gt;requirements.txt&lt;/code&gt; file (like me) the next compilation might lead to   a runtime error in case &lt;strong&gt;TextField&lt;/strong&gt; type provided by the concerned library occurs somewhere in the codebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TextField&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;name&lt;/span&gt; &lt;span class="s"&gt;'TextField'&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s"&gt;'wtforms'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above error occurs when the &lt;code&gt;TextField&lt;/code&gt; property is used with &lt;strong&gt;WTForms&lt;/strong&gt; version &lt;code&gt;3.0&lt;/code&gt; or above because the &lt;code&gt;wtforms.TextField&lt;/code&gt; deprecated in favor of &lt;code&gt;wtforms.StringField&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-fix-it"&gt;
  &lt;/a&gt;
  How to fix it
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Solution 1 - Replace &lt;code&gt;TextField&lt;/code&gt; type with &lt;code&gt;StringField&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: This solution works with WTForms 3.x and 2.x versions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wtforms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;TextField&lt;/span&gt; &lt;span class="n"&gt;usages&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;StringField&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Solution 2 - Use the latest stable 2.x version of WTForms&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// Use 2.x version
pip &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="nv"&gt;WTForms&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;2.3.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using an older version provides a quick fix for your codebase but is not recommended in the long run. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#free-sample"&gt;
  &lt;/a&gt;
  Free Sample
&lt;/h2&gt;

&lt;p&gt;For this open-source sample, I've used the 2nd solution where the &lt;strong&gt;Cannot import name TextField from wtforms&lt;/strong&gt; error is solved by freezing the WTForms version in &lt;a href="https://github.com/app-generator/flask-datta-able/blob/master/requirements.txt"&gt;requirements.txt&lt;/a&gt; file, without a codebase update. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/flask-datta-able"&gt;Datta Able Flask&lt;/a&gt; - Source Code &lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-datta-able.appseed-srv1.com/"&gt;Datta Able Flask&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYcrWAOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/545s8xf4hhdhsr0p83no.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYcrWAOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/545s8xf4hhdhsr0p83no.gif" alt="Cannot import name TextField from wtforms - Free sample for the fix." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access: &lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://wtforms.readthedocs.io/en/3.0.x/"&gt;WTForms&lt;/a&gt; - official documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt; - library documentation&lt;/li&gt;
&lt;li&gt;Join the &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; community on &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; and connect to other fellow developers. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>errors</category>
      <category>wtforms</category>
    </item>
    <item>
      <title>The top 10 Linux Commands that Every Data Engineer Should Know</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 08 Nov 2021 14:38:19 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-top-10-linux-commands-that-every-data-engineer-should-know-mbg</link>
      <guid>https://dev.to/bobbyiliev/the-top-10-linux-commands-that-every-data-engineer-should-know-mbg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;No matter if you are a data analyst or a system administrator when working with unstructured files in Linux there are a set of commands that would help you a lot in your daily tasks.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn the basics of the following commands and how to combine them using a pipe (&lt;code&gt;|&lt;/code&gt;) and analyze some raw data files.&lt;/p&gt;

&lt;p&gt;The list of the commands that we will go over are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cat&lt;/li&gt;
&lt;li&gt;head and tail&lt;/li&gt;
&lt;li&gt;pipe (&lt;code&gt;|&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;wc&lt;/li&gt;
&lt;li&gt;grep&lt;/li&gt;
&lt;li&gt;awk&lt;/li&gt;
&lt;li&gt;sort&lt;/li&gt;
&lt;li&gt;uniq&lt;/li&gt;
&lt;li&gt;sed&lt;/li&gt;
&lt;li&gt;tr&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Here is a very simple example file that I will be using to go over each of the commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Username    ID  Name    Orders
rachel  9012    Rachel  2
laura   2070    Laura   3
craig   4081    Craig   4
mary    9346    Mary    1
jamie   5079    Jamie   2
bobby   1456    Bobby   3
tony 5489 Tony  6
devdojo 9874 DevDojo    3
tom 2589 Tom    2
rachel  9012    Rachel  2
laura   2070    Laura   3
craig   4081    Craig   4
mary    9346    Mary    1
jamie   5079    Jamie   2
bobby   1456    Bobby   3
tony 5489 Tony  6
devdojo 9874 DevDojo    3
tom 2589 Tom    2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, install &lt;code&gt;nano&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install nano
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the text above and by using your favorite text editor create a new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then paste the text and save the file.&lt;/p&gt;

&lt;p&gt;With the demo data in place, let's go ahead and learn some of the most important commands that you should know in order to analyze the data!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-cat-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;cat&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;cat&lt;/code&gt; command is used to print out the content of the file directly on your screen.&lt;/p&gt;

&lt;p&gt;The syntax is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat file_name_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our case, as the file name is &lt;code&gt;demo.txt&lt;/code&gt; we would run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very useful when you do not know what's in the file and want to quickly take a quick glance.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-head-and-tail-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;head and tail&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;cat&lt;/code&gt; command is great as you can get the content of a file without opening it with an actual editor. &lt;/p&gt;

&lt;p&gt;However in some cases, if the file is huge, it might take a while to print out the whole content on your screen. So let's see how we could limit that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-head-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;head&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;You would use the &lt;code&gt;head&lt;/code&gt; command to get the first 10 lines of a particular file.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;head demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would only print the first 10 lines of the file and would be very handy if you were working with a huge file and did not need to see the whole content on your screen.&lt;/p&gt;

&lt;p&gt;You can also add the &lt;code&gt;-n&lt;/code&gt; flag followed by the number of lines that you wanted to get in order to override the default behavior of only printing out 10 lines. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;head -n 5 demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above would only print out the first 5 lines of the file.&lt;/p&gt;

&lt;p&gt;You could actually exclude the &lt;code&gt;-n&lt;/code&gt; flag altogether and use a dash followed by the number of lines directly, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail -12 demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is going to be the same as &lt;code&gt;tail -n 12 demo.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-tail-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;tail&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tail&lt;/code&gt; command has the exact same syntax as the &lt;code&gt;head&lt;/code&gt; command and is also used to limit the number of lines that you get on the screen, however rather than getting the first lines of the file, using the &lt;code&gt;tail&lt;/code&gt; command, you would get the last lines instead.&lt;/p&gt;

&lt;p&gt;For example, if you wanted to get the last 2 lines of a specific file, you would use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail -2 demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just as with &lt;code&gt;head&lt;/code&gt;, if you don't specify a number &lt;code&gt;tail&lt;/code&gt; would default to 10.&lt;/p&gt;

&lt;p&gt;Another very useful flag for the &lt;code&gt;tail&lt;/code&gt; command is the &lt;code&gt;-f&lt;/code&gt; flag. &lt;/p&gt;

&lt;p&gt;It is useful very handy as it will print out the last 10 lines of the file and then wait for new content to be added to the file and print it out on your screen in real-time. This is very useful when monitoring your server logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail -f /var/log/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-pipe-raw-endraw-command"&gt;
  &lt;/a&gt;
  The pipe &lt;code&gt;|&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The pipe (&lt;code&gt;|&lt;/code&gt;) is probably one of the most powerful commands out there. The pipe lets you redirect the output of one command to another command. This allows you to chain multiple commands together and manipulate/analyze so that you could get the exact output that you need.&lt;/p&gt;

&lt;p&gt;For example, both &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; can be combined with the &lt;code&gt;cat&lt;/code&gt; command using a pipe, &lt;code&gt;|&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | head -2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we would redirect the output of the &lt;code&gt;cat&lt;/code&gt; command and pass it to the &lt;code&gt;head -2&lt;/code&gt; command. &lt;/p&gt;

&lt;p&gt;We are going to use the pipe command later on to combine most of the commands that we are going to review in this tutorial!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-wc-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;wc&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;wc&lt;/code&gt; command stands for &lt;code&gt;Word Count&lt;/code&gt; and it does exactly that, it counts the lines, words, and characters in a text file.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wc demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 19  76 362 demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a quick rundown of the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;19&lt;/code&gt;: this indicates that there are 19 lines in the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;76&lt;/code&gt;: this is the total number of words in the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;362&lt;/code&gt;: and finally this is the total count of characters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some handy flags that you could use in order to get one of those 3 feeds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-l&lt;/code&gt;: print only the number of lines&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-w&lt;/code&gt;: print only the number of words&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-c&lt;/code&gt;: print only the number of characters&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-grep-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;grep&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;grep&lt;/code&gt; command is probably my favorite one, you can use it to search for a specific string in a file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2BRV4xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ncE2E3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2BRV4xK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ncE2E3w.png" alt="grep command in linux" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The syntax is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep some_string demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say that you wanted to get all of the lines that include the string &lt;code&gt;bobby&lt;/code&gt; in them. To do so you would use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep bobby demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bobby   1456    Bobby   3
bobby   1456    Bobby   3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the grep command is case sensitive, so if you were to search for the string &lt;code&gt;bOBbY&lt;/code&gt; you would not get any results back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep bOBbY demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, there is a handy flag that you could use in order to make the &lt;code&gt;grep&lt;/code&gt; command case insensitive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -i bOBbY demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdgWMTOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/d7rf2Ho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdgWMTOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/d7rf2Ho.png" alt="output of grep command" width="576" height="91"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;grep&lt;/code&gt; would match all string references:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -i to demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMs6obEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2fuJxo7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMs6obEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2fuJxo7.png" alt="grep -i output" width="245" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we are getting a match in all words. This might be a problem if you are looking for a specific word and not just a substring in the word. For example, in the output above, we are getting a match for &lt;code&gt;Tom&lt;/code&gt; and &lt;code&gt;Tony&lt;/code&gt; as we are looking for the &lt;code&gt;to&lt;/code&gt; string. &lt;/p&gt;

&lt;p&gt;To only match whole words, you can use the &lt;code&gt;-w&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep -w to demo.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above, would not match the &lt;code&gt;tony&lt;/code&gt; and &lt;code&gt;tom&lt;/code&gt; words. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-awk-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;awk&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;AWK is actually not just a command but a while scripting language. It is used for text processing. For the scope of this post, we are only going to scratch the surface of &lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;awk&lt;/code&gt; command lets you print out specific columns. By default, the delimiter that &lt;code&gt;awk&lt;/code&gt; uses is a space or a tab.&lt;/p&gt;

&lt;p&gt;In our case, each column would be considered as: &lt;code&gt;Username&lt;/code&gt;, &lt;code&gt;ID&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Orders&lt;/code&gt;. Each column would be represented as &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, &lt;code&gt;$3&lt;/code&gt; and &lt;code&gt;$4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if we wanted to print out only the name column, we would use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{ print $3 }'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Name
Rachel
Laura
Craig
Mary
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could print multiple columns as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{ print $3 " " $1 }'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also specify a different delimiter based on your data file by using the &lt;code&gt;-F&lt;/code&gt; flag. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-sort-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;sort&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;sort&lt;/code&gt; command lets you sort your file in a particular order. By default, &lt;code&gt;sort&lt;/code&gt; would expect ASCII content and would sort the content alphabetically.&lt;/p&gt;

&lt;p&gt;To sort the users alphabetically, you could just use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | sort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's combine this with &lt;code&gt;awk&lt;/code&gt; and sort the users by orders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First let's get the 4th and the 3th columns which are the orders and the name of each user:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{print $4 " " $3 }'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then with an extra pipe let's sort them:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{print $4 " " $3 }' | sort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To sort the items in reverse order, you could add the &lt;code&gt;-r&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{print $4 " " $3 }' | sort -r
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very handy flag is the &lt;code&gt;-h&lt;/code&gt; flag, which lets you sort by human-readable numbers which includes comparing numbers in GB, KB and etc.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-uniq-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;uniq&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;As the name suggests, the &lt;code&gt;uniq&lt;/code&gt; command, lets you filter out and only show the &lt;code&gt;uniq&lt;/code&gt; line records. In most cases, you would use the &lt;code&gt;uniq&lt;/code&gt; command together with the &lt;code&gt;sort&lt;/code&gt; command, as &lt;code&gt;uniq&lt;/code&gt; only filters out identical lines that are right after each other.&lt;/p&gt;

&lt;p&gt;I intentionally created the file so that there are some duplicate lines. Let's filter them out by using the &lt;code&gt;uniq&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{ print $1 }' | sort | uniq 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Username
bobby
craig
devdojo
jamie
laura
mary
rachel
tom
tony
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding the &lt;code&gt;-c&lt;/code&gt; flag, you would also get a count of how many times each line repeats in the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | awk '{ print $1 }' | sort | uniq -c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      1 Username
      2 bobby
      2 craig
      2 devdojo
      2 jamie
      2 laura
      2 mary
      2 rachel
      2 tom
      2 tony
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-raw-sed-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;sed&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;sed&lt;/code&gt; command let's you do a search and replace for a specific string in a text or a file. SED stands for stream editor.&lt;/p&gt;

&lt;p&gt;Let's go ahead and use the &lt;code&gt;grep&lt;/code&gt; command to find all of the references for &lt;code&gt;devdojo&lt;/code&gt; in the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | grep devdojo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;devdojo 9874 DevDojo    3
devdojo 9874 DevDojo    3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's go and use &lt;code&gt;sed&lt;/code&gt; to change the &lt;code&gt;devdojo&lt;/code&gt; username to something else, like &lt;code&gt;thedevdojo&lt;/code&gt; for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | grep devdojo | sed 's/devdojo/thedevdojo/g'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;thedevdojo  9874 DevDojo    3
thedevdojo  9874 DevDojo    3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's have another example and change all of the references of the small latter &lt;code&gt;b&lt;/code&gt; to a capital case &lt;code&gt;B&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | sed 's/b/B/g'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's have a quick rundown of the &lt;code&gt;sed&lt;/code&gt; command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; - this stands for search and searches for a specific string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; - this is the delimiter and could be changed in case that you are searching for the &lt;code&gt;/&lt;/code&gt; character.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;search_string&lt;/code&gt; - the string that you are searching for.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;replace_string&lt;/code&gt; - the string that you want to replace the matches with&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g&lt;/code&gt; - stands for global and indicates that all matches on a specific line should be replaced.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could also the &lt;code&gt;sed&lt;/code&gt; command to implement the changes directly to the file by using the &lt;code&gt;-i&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sed -i 's/devdojo/thedevdojo/g' demo.txt 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would change the file and update all of the references for &lt;code&gt;devdojo&lt;/code&gt; to &lt;code&gt;thedevdojo&lt;/code&gt;. You would not get any output back.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that this process is irreversible, so if you are changing an important file, make sure to take a backup first!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-raw-tr-endraw-command"&gt;
  &lt;/a&gt;
  The &lt;code&gt;tr&lt;/code&gt; command
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;tr&lt;/code&gt; command is used to change or delete characters. For example, you could use &lt;code&gt;tr&lt;/code&gt; to change all lower case characters to upper case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | tr "[:lower:]" "[:upper:]"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USERNAME    ID  NAME    ORDERS
RACHEL  9012    RACHEL  2
LAURA   2070    LAURA   3
CRAIG   4081    CRAIG   4
MARY    9346    MARY    1
JAMIE   5079    JAMIE   2
BOBBY   1456    BOBBY   3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also change the &lt;code&gt;tab&lt;/code&gt; character to a command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat demo.txt | tr '\t' ','
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite handy when you want to change the formatting of a specific file. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#materialize"&gt;
  &lt;/a&gt;
  &lt;a href="https://materialize.com"&gt;Materialize&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;The above shell commands are very handy to ad-hoc analyze a specific file. &lt;br&gt;
However, if you want to take this to the next level and be able to use SQL to actually analyze a dynamically changing file source, I would recommend taking a look at Materialize.&lt;/p&gt;

&lt;p&gt;Materialize is a streaming database for real-time analytics.&lt;/p&gt;

&lt;p&gt;It is not a substitution for your transaction database, instead, it accepts input data from a variety of sources like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Messages from streaming sources like Kafka&lt;/li&gt;
&lt;li&gt;Archived data from object stores like S3&lt;/li&gt;
&lt;li&gt;Change feeds from databases like PostgreSQL&lt;/li&gt;
&lt;li&gt;Date in Files: CSV, JSON, and even unstructured files like logs (what we'll be using today.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it lets you write standard SQL queries (called materialized views) that are kept up-to-date instead of returning a static set of results from one point in time.&lt;/p&gt;

&lt;p&gt;To see the full power of Materialize, make sure to check out this demo from their official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/demos/log-parsing/"&gt;Materialize Log Parsing Demo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;As a next step I would recommend testing out the commands that you've just learned with different data files that you have in place!&lt;/p&gt;

&lt;p&gt;I would also recommend taking a look at this script there that I've created to parse Nginx/Apache access logs which includes the majority of the commands that we've used in this tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bobbyiliev/bash-script-to-summarize-your-nginx-and-apache-access-logs"&gt;BASH Script to Summarize Your NGINX and Apache Access Logs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about Bash scripting, make sure to check out this free ebook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bobbyiliev/open-source-introduction-to-bash-scripting-ebook-guide"&gt;Open-Source Introduction to Bash Scripting Ebook/Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have tried out Materialize, make sure to star the project on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MaterializeInc/materialize"&gt;Materialize GitHub Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that you've found this tutorial helpful!&lt;/p&gt;

</description>
      <category>database</category>
      <category>linux</category>
      <category>bash</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to upload a file to Azure Blob using Spring Boot?</title>
      <author>ROHAN KADAM</author>
      <pubDate>Mon, 08 Nov 2021 14:34:32 +0000</pubDate>
      <link>https://dev.to/rohan2596/how-to-upload-a-file-to-azure-blob-using-spring-boot-3c3a</link>
      <guid>https://dev.to/rohan2596/how-to-upload-a-file-to-azure-blob-using-spring-boot-3c3a</guid>
      <description>&lt;p&gt;Hello👋, Its Rohan Kadam😊&lt;/p&gt;

&lt;p&gt;Today cloud is becoming come standard for the development of any software. We used the cloud in every aspect of the programming cycle be it uploading our code to &lt;a href="https://medium.com/javarevisited/7-best-courses-to-master-git-and-github-for-programmers-d671859a68b2?source=---------9------------------"&gt;Github &lt;/a&gt;or Gitlab or be it using Google Drive or Dropbox or uploading our personal files. In the article, we are going to understand how we can implement file** upload to Azure Blob Using &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-spring-boot-in-2020-best-of-lot-6ffce88a1b6e"&gt;Spring Boot&lt;/a&gt;**.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcPkeYVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2AtzvH8h7KT6vuFZjSatf8sA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcPkeYVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/6000/1%2AtzvH8h7KT6vuFZjSatf8sA.jpeg" alt="How to upload a file to Azure Blob Using Spring Boot?" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-blob-storage-mean"&gt;
  &lt;/a&gt;
  What Does Blob Storage Mean?
&lt;/h3&gt;

&lt;p&gt;Blob storage is a feature in Microsoft Azure that lets developers store unstructured data in Microsoft’s cloud platform. This data can be accessed from anywhere in the world and can include audio, video and text. Blobs are grouped into “containers” that are tied to user accounts. Blobs can be manipulated by using any programming language. Blobs are widely used by streaming companies with high volumes of audio and video data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-used-blob-storage"&gt;
  &lt;/a&gt;
  Why used Blob Storage?
&lt;/h3&gt;

&lt;p&gt;Blob storage is ideal for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Accessing images or documents directly to devices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing files for distributed access.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Streaming video and audio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing data for backup and restore disaster recovery, and archiving.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storing data for analysis by an on-premises or Azure-hosted service&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-implement-blob-storage"&gt;
  &lt;/a&gt;
  How to implement blob Storage?
&lt;/h3&gt;

&lt;p&gt;Blob Storage is widely been used by the industry today for developing great user-friendly apps. Its best known for storing files, images and binary data. Today we are going to implement the Azure Blob using the spring boot and the programming language Java. In this part of we going to cover the Read, Write and Upload operations for the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-how-to-generate-spring-boot-project"&gt;
  &lt;/a&gt;
  Step 1: How to generate Spring Boot Project?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://start.spring.io/"&gt;&lt;strong&gt;Spring Initializr&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-which-dependencies-should-i-include"&gt;
  &lt;/a&gt;
  Step 2: Which dependencies should I include?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5L_AEiFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2720/1%2A2aMKmXTE1xAakZdoFY_ZFA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5L_AEiFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2720/1%2A2aMKmXTE1xAakZdoFY_ZFA.png" alt="Dependencies" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-what-will-the-configuration-be-for-my-azure"&gt;
  &lt;/a&gt;
  Step 3: What will the configuration be for my Azure?
&lt;/h3&gt;

&lt;p&gt;When we talk of configuration is we required three main parts&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Blob Container Name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Account Key — Secret Key&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blob Container Endpoint&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmzSVf_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AmnsXLS2Id_oUinI5HH1jVg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmzSVf_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AmnsXLS2Id_oUinI5HH1jVg.png" alt="Credits: Microsoft" width="331" height="111"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULSi5NxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2404/1%2ArnflQLltovS_bR8ba0rItg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULSi5NxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2404/1%2ArnflQLltovS_bR8ba0rItg.png" alt="" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note:- Need to get the above from the Azure website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-need-to-create-a-controller-endpoint-for-upload-amp-read-file"&gt;
  &lt;/a&gt;
  Step 4:- Need to Create a Controller endpoint for Upload &amp;amp; Read file.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1 →How to upload files to Azure Blob Storage?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q38IJFu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3364/1%2AD2mgF8EqN1VFRZ2VO-nNoQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q38IJFu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3364/1%2AD2mgF8EqN1VFRZ2VO-nNoQ.png" alt="Upload File to Blob Storage" width="880" height="590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 →How to read files from Azure Blob Storage?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OawH_oj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2468/1%2A-rAVHk2JHlezGFGUL6y6xQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OawH_oj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2468/1%2A-rAVHk2JHlezGFGUL6y6xQ.png" alt="Read File From Blob Storage" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 →How to write files to Azure Blob Storage?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRWnRK-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3100/1%2AulPxjmgjvlw4Fxb2UbWopA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRWnRK-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3100/1%2AulPxjmgjvlw4Fxb2UbWopA.png" alt="Write Blob From Storage" width="880" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-postman-endpoint-upload-file"&gt;
  &lt;/a&gt;
  Step 5: Postman Endpoint Upload File.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3zNwDIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ALpRngwHh_lYRPXwSTte8bQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3zNwDIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ALpRngwHh_lYRPXwSTte8bQ.png" alt="azure_blob_upload_file" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-postman-endpoint-for-reading-file"&gt;
  &lt;/a&gt;
  Step 6: Postman Endpoint for reading File.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_nbXZe5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARvIVKbXyUFSFuo526cENaQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_nbXZe5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARvIVKbXyUFSFuo526cENaQ.png" alt="azure_blob_read_file" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h3&gt;

&lt;p&gt;In the article, we tried to answers many questions related to Azure Blob and how to implement the same using Spring boot. Blob storage has widely been used to store unstructured data such as text, images or binary etc are used by many fortune 500 companies to provide service to their users.&lt;/p&gt;

&lt;p&gt;Please do share and like💖 if you find the article useful. Follow me on medium &lt;a href="https://dev.toundefined"&gt;Rohan Ravindra Kadam&lt;/a&gt; and on Twitter at &lt;a href="https://twitter.com/rohankadam25"&gt;**rohankadam25&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-storage"&gt;&lt;strong&gt;How to use the Spring Boot Starter for Azure Storage&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNroQqiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2Af9TMjifJVReTlh93qJ845Q.png" alt="Thank You, Viewers — Rohan Kadam" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>programming</category>
      <category>opensource</category>
      <category>devops</category>
    </item>
    <item>
      <title>Automate deployment in simplest way by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Mon, 08 Nov 2021 14:22:43 +0000</pubDate>
      <link>https://dev.to/silvenleaf/automate-deployment-in-simplest-way-by-silvenleaf-17p</link>
      <guid>https://dev.to/silvenleaf/automate-deployment-in-simplest-way-by-silvenleaf-17p</guid>
      <description>&lt;p&gt;Ahoy there! Let's automate deploying our Web App! We'll be using React for this. Don't worry, because react or angular or vue, that's not important. The core concept is same for all! Also we'll be going from level 0. So even if you don't know React or any of these, just hop on!!&lt;/p&gt;

&lt;p&gt;It is a part of my future DevOps and automation blogs. So stay tuned for more amazing stuff!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-lets-create-a-react-app"&gt;
  &lt;/a&gt;
  Step 0: Let's create a React App
&lt;/h3&gt;

&lt;p&gt;To deploy an app, we need an app, right? So let's create one. But if you don't like React, go with Angular, Vue or whatever you like.&lt;/p&gt;

&lt;p&gt;First create a github repo (assuming you have a github account, if not, create one and then create a github repo) and then clone it onto your computer. Open it in your favorite text-editor (mine VS Code). Then type the following command to create a react app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app client &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a React App named &lt;strong&gt;client&lt;/strong&gt; in TypeScript. Replace &lt;strong&gt;client&lt;/strong&gt; with your own app name, I prefer &lt;strong&gt;client&lt;/strong&gt; but you can name it anything)&lt;/p&gt;

&lt;p&gt;Now, type the following command to go inside it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then type this to start your react app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! Wait a while and it'll start the development server and open the React App in your browser. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" alt="React App" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's get into the fun stuff. Let's deploy the app!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-1-deploy-app"&gt;
  &lt;/a&gt;
  Step 1: Deploy App
&lt;/h3&gt;

&lt;p&gt;Type this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span class="nt"&gt;-D&lt;/span&gt; gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll go inside client folder and then install that "gh-pages" package.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;"npm i -D X"&lt;/strong&gt; is the shorthand for &lt;strong&gt;"npm install --save-dev X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now open the &lt;strong&gt;package.json&lt;/strong&gt; file of &lt;strong&gt;client&lt;/strong&gt; folder and add the &lt;strong&gt;"homepage"&lt;/strong&gt; property, and also add the following &lt;strong&gt;"deploy"&lt;/strong&gt; and &lt;strong&gt;"predeploy"&lt;/strong&gt; scripts, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stuff&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://{YOUR_GITHUB_USERNAME}.github.io/{YOUR_APP_NAME_HERE}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

   &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nl"&gt;"predeploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gh-pages -d build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="err"&gt;...your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stuff&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open your terminal, and type this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;client &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll start deploying your app. Wait for it to complete. Once done, go to the homepage URL that you specified and you'll see your app live.&lt;/p&gt;

&lt;p&gt;Your URL: &lt;a href="https://SilvenLEAF.github.io/"&gt;"http://{YOUR_GITHUB_USERNAME}.github.io/{YOUR_APP_NAME_HERE}"&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdXphk1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0ypxpk86ccsxi4mj9mv.png" alt="React App" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#step-2-automate-deployment"&gt;
  &lt;/a&gt;
  Step 2: Automate Deployment
&lt;/h3&gt;

&lt;p&gt;Yes, we deployed our app, but that's not what we want right? We want to make it all automated. So let's do this. &lt;/p&gt;

&lt;p&gt;Open a new terminal and type the following command on the root level of your repo (NOT inside &lt;strong&gt;client&lt;/strong&gt; folder).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll create a &lt;strong&gt;.github&lt;/strong&gt; folder in the root level and create another folder inside it named &lt;strong&gt;workflows&lt;/strong&gt;. I mean, create &lt;strong&gt;workflows&lt;/strong&gt; folder inside &lt;strong&gt;.github&lt;/strong&gt; folder which is on the root level of our project (at the same level as &lt;strong&gt;client&lt;/strong&gt; react app folder).&lt;/p&gt;

&lt;p&gt;[NOTE: &lt;strong&gt;"mkdir"&lt;/strong&gt; bash command create a directory/folder. The &lt;strong&gt;"-p"&lt;/strong&gt; flag creates them recursively. In other words, if you pass this flag, you can create nested folders, even if they did not exist. Otherwise, it would've thrown an "Directory does not exist" error]&lt;/p&gt;

&lt;p&gt;Now, create yaml file inside that &lt;strong&gt;workflows&lt;/strong&gt; folder named &lt;strong&gt;Deploy.yml&lt;/strong&gt; by typing the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .github/workflows/Deploy.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[NOTE: &lt;strong&gt;touch&lt;/strong&gt; bash command creates a file]&lt;/p&gt;

&lt;p&gt;Fill this &lt;strong&gt;Deploy.yml&lt;/strong&gt; file with these following content. Also PRO TIP: Read the comments to understand what each word and each line does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# By SilvenLEAF&lt;/span&gt;

&lt;span class="c1"&gt;# Let's create a basic automated deployment&lt;/span&gt;
&lt;span class="c1"&gt;# It'll work something like this:&lt;/span&gt;
&lt;span class="c1"&gt;# Whenever push our code to "main" branch, &lt;/span&gt;
&lt;span class="c1"&gt;# We'll check if it's deployable (I mean, the app works and does not break)&lt;/span&gt;
&lt;span class="c1"&gt;# If so, we'll deploy it&lt;/span&gt;
&lt;span class="c1"&gt;# And everything will be done automatically&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DevOps Deploy&lt;/span&gt; &lt;span class="c1"&gt;# This is the name of our Action, you can name anything, I just casually gave this name &lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# We'll be triggering the workflow on push event but only for the main branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# You can have any branch or multiple branches, if you want to add more branches, add them in this array&lt;/span&gt;

&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# This workflow contains a single job called "testAndDeploy"&lt;/span&gt;
  &lt;span class="na"&gt;testAndDeploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of OS that this job will run on. I chose ubuntu, you can choose anything, windows, mac, anything at all&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;#  Runs a single command using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install packages&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cd client &amp;amp;&amp;amp; npm install&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
      &lt;span class="c1"&gt;# Notice I gave "CI=false" command. It's because normally when we build react app, there's always a lot of warnings&lt;/span&gt;
      &lt;span class="c1"&gt;# And Github action by default has "CI=true", and because of that, it treats warnings as errors&lt;/span&gt;
      &lt;span class="c1"&gt;# So, it'll fail the job (because if there is any error, the job fails)&lt;/span&gt;
      &lt;span class="c1"&gt;# That's why we set "CI=false" so that it can ignore the warnings&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo started Building&lt;/span&gt;
          &lt;span class="s"&gt;cd client &amp;amp;&amp;amp; CI=false &amp;amp;&amp;amp; npm run build&lt;/span&gt;

      &lt;span class="c1"&gt;# if there are errors or bugs in our app, then the build will fail&lt;/span&gt;
      &lt;span class="c1"&gt;# which will also cause the Deployment to fail as well&lt;/span&gt;
      &lt;span class="c1"&gt;# because in order to deploy, it has to pass all steps successfully&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy 🚀&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@4.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt; &lt;span class="c1"&gt;# The branch the action should deploy to. You can choose any branch&lt;/span&gt;
          &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;client/build&lt;/span&gt; &lt;span class="c1"&gt;# The folder the action should deploy. Here the build folder is inside client with respect to the root&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now commit all your changes and push! Voila! You just automated your deployment. Now let's test it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-3-testing-deployment"&gt;
  &lt;/a&gt;
  Step 3: Testing Deployment
&lt;/h3&gt;

&lt;p&gt;Now go inside &lt;strong&gt;client/src/App.tsx&lt;/strong&gt;, and replace everything with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// By SilvenLEAF&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;textAlign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#d00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SilvenLEAF&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now commit you changes and push it with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Testing Deployment"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;git commit -am "lorem ipsum"&lt;/strong&gt; is the shorthand for &lt;strong&gt;git add . &amp;amp;&amp;amp; git commit -m "lorem ipsum"&lt;/strong&gt;. Also, &lt;strong&gt;"X &amp;amp;&amp;amp; Y"&lt;/strong&gt; in bash, runs X and Y command one after the other)&lt;/p&gt;

&lt;p&gt;So after pushing your updated codes, go to your repo in your github. And go to the &lt;strong&gt;"actions"&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNr-W4kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1h4q8s3g691fvh44s8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNr-W4kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1h4q8s3g691fvh44s8c.png" alt="Go to actions tab" width="880" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you'll see your action &lt;strong&gt;"DevOps Deploy"&lt;/strong&gt; and the running &lt;strong&gt;"Testing Deployment"&lt;/strong&gt; commit workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3hTZum---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzo0ex1no1h0fe7nrr65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3hTZum---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzo0ex1no1h0fe7nrr65.png" alt="Actions Tab" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on that ongoing &lt;strong&gt;"Testing Deployment"&lt;/strong&gt; workflow, and you'll see all it's jobs that's running. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUHmsMyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/194rqh30mqixbbvi2qeh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUHmsMyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/194rqh30mqixbbvi2qeh.png" alt="Workflow jobs" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had only one, so you'll see only &lt;strong&gt;"testAndDeploy"&lt;/strong&gt; job. To see all its details and steps, click it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nWdB1-Kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38pmgflyncqeh1r92mkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWdB1-Kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38pmgflyncqeh1r92mkr.png" alt="Workflow job details" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all of the steps are done, and it successfully finished. Go to your website and see it updated live!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNRFGeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uirww1bfmepa932kcm7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNRFGeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uirww1bfmepa932kcm7j.png" alt="Updated Site" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now every time you make changes and push to &lt;strong&gt;main&lt;/strong&gt; branch, it'll automatically test if it's good and doesn't have any errors, if so, will deploy it. You have to do nothing!&lt;/p&gt;

&lt;p&gt;Amazing right? But that's just the beginning of the story my friend! Because we'll learn some more amazing DevOps and Automations stuffs and advanced github actions too! So stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog is coming November 13th&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-how-to-deploy-in-the-cloud-azure-vms"&gt;
  &lt;/a&gt;
  1. How to deploy in the Cloud (Azure VMs)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-learning-devops-with-github-actions"&gt;
  &lt;/a&gt;
  2. Learning DevOps with Github Actions
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  3. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  4. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  5. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-sequelize-hooks"&gt;
  &lt;/a&gt;
  6. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10+The Best PHP Projects GitHub 2022</title>
      <author>themeselection</author>
      <pubDate>Mon, 08 Nov 2021 14:22:38 +0000</pubDate>
      <link>https://dev.to/theme_selection/10the-best-php-projects-github-2022-2o7m</link>
      <guid>https://dev.to/theme_selection/10the-best-php-projects-github-2022-2o7m</guid>
      <description>&lt;p&gt;Starting your journey as a PHP developer? Then here are some of the best PHP Projects that will inspire you. Before we start the collection, Let's get to know PHP in short.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-php"&gt;
  &lt;/a&gt;
  What Is PHP?
&lt;/h2&gt;

&lt;p&gt;Well, PHP (Hypertext Preprocessor) is generally known as a &lt;strong&gt;general-purpose scripting language that can be used to develop dynamic and interactive websites&lt;/strong&gt;. Besides, it was one of the first server-side languages that could be embedded into HTML, making it easier to add functionality to web pages without any need to call external files for data. &lt;/p&gt;

&lt;p&gt;It has been around for more than 25 years, tends to evoke some strong opinions among developers today. There is always a debate over whether or not PHP is dead? Whenever there is a new programming language or tool emerges, you’ll probably find a discussion over it.&lt;/p&gt;

&lt;p&gt;Yes, it is true that PHP has gone down the rankings of the most popular programming languages, between &lt;a href="https://insights.stackoverflow.com/survey/2017#technology"&gt;5th in 2017&lt;/a&gt; to &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages-all-respondents"&gt;8th in 2020&lt;/a&gt; as per the Stack Overflow annual developer survey. Yet, PHP is one of the most &lt;a href="https://w3techs.com/technologies/details/pl-php"&gt;used by nearly 80% of all websites&lt;/a&gt;, including some major platforms like Facebook and WordPress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-php-unique"&gt;
  &lt;/a&gt;
  What makes PHP unique?
&lt;/h2&gt;

&lt;p&gt;Following are some of the factors that makes PHP desirable: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Simplicity&lt;/li&gt;
&lt;li&gt;  Efficiency&lt;/li&gt;
&lt;li&gt;  Security&lt;/li&gt;
&lt;li&gt;  Flexibility&lt;/li&gt;
&lt;li&gt;  Familiarity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#applications-of-php"&gt;
  &lt;/a&gt;
  Applications of PHP
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP can handle forms, i.e. gather data from files, save data to a file, through email you can send data, return data to the user.&lt;/li&gt;
&lt;li&gt;Using PHP, you can restrict users to access some pages of your website.&lt;/li&gt;
&lt;li&gt;PHP performs system functions, i.e. from files on a system it can create, open, read, write, and close them.&lt;/li&gt;
&lt;li&gt;You can add, modify, delete, elements within your database through PHP.&lt;/li&gt;
&lt;li&gt;Also, access cookies variables and set cookies.&lt;/li&gt;
&lt;li&gt;It can encrypt data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-using-php"&gt;
  &lt;/a&gt;
  Advantages Of Using PHP:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Many available specialists&lt;/li&gt;
&lt;li&gt;A large base of reference and educational materials&lt;/li&gt;
&lt;li&gt;Better loading speed of websites&lt;/li&gt;
&lt;li&gt;More options for database connectivity&lt;/li&gt;
&lt;li&gt;A large collection of open-source addons&lt;/li&gt;
&lt;li&gt;Inexpensive website hosting&lt;/li&gt;
&lt;li&gt;Great synergy with HTML&lt;/li&gt;
&lt;li&gt;Excellent flexibility and combinability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Simple&lt;/li&gt;
&lt;li&gt;  Faster&lt;/li&gt;
&lt;li&gt;  Interpreted&lt;/li&gt;
&lt;li&gt;  Open Source&lt;/li&gt;
&lt;li&gt;  Case Sensitive&lt;/li&gt;
&lt;li&gt;  Simplicity&lt;/li&gt;
&lt;li&gt;  Efficiency&lt;/li&gt;
&lt;li&gt;  Platform Independent&lt;/li&gt;
&lt;li&gt;  Security&lt;/li&gt;
&lt;li&gt;  Flexibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's start the list...!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAi7133---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9qyswag2kddfknr93p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAi7133---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9qyswag2kddfknr93p.gif" alt="Let's start" width="400" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#guzzle"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/guzzle/guzzle"&gt;Guzzle&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iz_bNXWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boyav2h5fe7xn6op9qff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iz_bNXWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boyav2h5fe7xn6op9qff.jpg" alt="Guzzle" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/guzzle/guzzle"&gt;Guzzle&lt;/a&gt; is a simple HTTP client for PHP projects. It is meant to facilitate sending HTTP requests in quick time. Besides, it also has a simple interface from where you can build query strings, send POST requests, upload JSON data and other similar services. Moreover, you can also send both synchronous and asynchronous requests via Guzzle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Simple interface for building query strings, POST requests, streaming large uploads, streaming large downloads, using HTTP cookies, uploading JSON data, etc...&lt;/li&gt;
&lt;li&gt;  Can send both synchronous and asynchronous requests using the same interface.&lt;/li&gt;
&lt;li&gt;  Uses PSR-7 interfaces for requests, responses, and streams. This allows you to utilize other PSR-7 compatible libraries with Guzzle.&lt;/li&gt;
&lt;li&gt;  Supports PSR-18 allowing interoperability between other PSR-18 HTTP Clients.&lt;/li&gt;
&lt;li&gt;  Abstracts away the underlying HTTP transport, allowing you to write environment and transport agnostic code; i.e., no hard dependency on curl, PHP streams, sockets, or non-blocking event loops.&lt;/li&gt;
&lt;li&gt;  Middleware system allows you to augment and compose client behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#monolog"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/Seldaek/monolog"&gt;Monolog&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxtq_eHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5oxnlsewhatw5uv7upj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxtq_eHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5oxnlsewhatw5uv7upj.png" alt="Monolog" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Monolog sends your logs to files, sockets, inboxes, databases and various web services. See the complete list of handlers below. Special handlers allow you to build advanced logging strategies.&lt;/p&gt;

&lt;p&gt;This library implements the  &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md"&gt;PSR-3&lt;/a&gt;  interface that you can type-hint against in your own libraries to keep a maximum of interoperability. You can also use it in your applications to make sure you can always use another compatible logger at a later time. As of 1.11.0 Monolog public APIs will also accept PSR-3 log levels. Internally Monolog still uses its own level scheme since it predates PSR-3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phpmailer"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/PHPMailer/PHPMailer"&gt;PHPMailer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AhGebTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blqm20o0xb5iovs2sgh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AhGebTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blqm20o0xb5iovs2sgh4.png" alt="PHP Mailer" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a full featured email sending class for PHP projects. This class is a great replacement for the mail() function provided by PHP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Probably the world's most popular code for sending email from PHP!&lt;/li&gt;
&lt;li&gt;  Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more&lt;/li&gt;
&lt;li&gt;  Integrated SMTP support – send without a local mail server&lt;/li&gt;
&lt;li&gt;  Send emails with multiple To, CC, BCC and Reply-to addresses&lt;/li&gt;
&lt;li&gt;  Multipart/alternative emails for mail clients that do not read HTML email&lt;/li&gt;
&lt;li&gt;  Add attachments, including inline&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextcloud-server"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/nextcloud/server"&gt;Nextcloud Server&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skFkv4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkqicplc8sec9four6o9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skFkv4hb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkqicplc8sec9four6o9.png" alt="Nextcloud server" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nextcloud/server"&gt;Nextcloud&lt;/a&gt; promises a reliable and safe place for all your web data. Using Nextcloud, you can easily sync your files, databases, contacts and other services on the go. The platform also offers optimum security with its two factor authentication feature, thereby helping you to safeguard your data completely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;Access your Data:&lt;/strong&gt;  You can store your files, contacts, calendars and more on a server of your choosing.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Sync your Data:&lt;/strong&gt;  You keep your files, contacts, calendars and more synchronized amongst your devices.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Share your Data:&lt;/strong&gt; By giving others access to the stuff you want them to see or to collaborate with.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Expandable with hundreds of Apps:&lt;/strong&gt; like  &lt;a href="https://github.com/nextcloud/calendar"&gt;Calendar&lt;/a&gt;,  &lt;a href="https://github.com/nextcloud/contacts"&gt;Contacts&lt;/a&gt;,  &lt;a href="https://github.com/nextcloud/mail"&gt;Mail&lt;/a&gt;,  &lt;a href="https://github.com/nextcloud/spreed"&gt;Video Chat&lt;/a&gt;  and all those you can discover in our  &lt;a href="https://apps.nextcloud.com/"&gt;App Store&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Security:&lt;/strong&gt;  With our encryption mechanisms,  &lt;a href="https://hackerone.com/nextcloud"&gt;HackerOne bounty program&lt;/a&gt;  and two-factor authentication&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#materio-free-vuetify-vuejs-laravel-admin-template"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/themeselection/materio-vuetify-vuejs-laravel-admin-template-free"&gt;Materio Free Vuetify VueJS Laravel Admin Template&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q4JGJLnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m27mklu19sygheuq68ux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4JGJLnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m27mklu19sygheuq68ux.png" alt="Materio Free Vuetify VueJS Laravel Admin Template" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a developer-friendly and highly customizable Laravel admin template. Furthermore, you can use this one of the best free &lt;a href="https://themeselection.com/products/category/laravel-admin-templates/"&gt;laravel admin templates&lt;/a&gt; to create eye-catching, high-quality, and high-performing single-page applications. Materio is also equipped with invaluable features designed to help you create premium quality apps exactly as you imagine them.&lt;/p&gt;

&lt;p&gt;In addition, incredibly versatile, the Materio Vuetify Vuejs Laravel admin template also allows you to build any type of web applications such as: CRM, Analytic apps, Education apps, Fitness Apps, Analytics apps, etc.. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Pure VueJS, Laravel&lt;/li&gt;
&lt;li&gt;  Utilizes Vuex, Vue Router, Webpack&lt;/li&gt;
&lt;li&gt;  1 Dashboard&lt;/li&gt;
&lt;li&gt;  Material Icons&lt;/li&gt;
&lt;li&gt;  Basic cards&lt;/li&gt;
&lt;li&gt;  Fully Responsive Layout&lt;/li&gt;
&lt;li&gt;  Organized Folder Structure&lt;/li&gt;
&lt;li&gt;  Clean &amp;amp; Commented Code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#monica"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/monicahq/monica"&gt;Monica&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ko33gmaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5esqu4vcwjdfd7hh3c4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ko33gmaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5esqu4vcwjdfd7hh3c4.png" alt="Monica CRM" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Monica is an open-source web application to organize and record your interactions with your loved ones. We call it a PRM, or Personal Relationship Management. Think of it as a  CRM (a popular tool used by sales teams in the corporate world) for your friends or family. &lt;/p&gt;

&lt;p&gt;Monica allows people to keep track of everything that’s important about their friends and family. Like the activities with them. When you last called someone and what you talked about. It will help you remember the name and the age of their kids. It can also remind you to call someone you haven’t talked to in a while.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Add and manage contacts&lt;/li&gt;
&lt;li&gt;  Define relationships between contacts&lt;/li&gt;
&lt;li&gt;  Reminders&lt;/li&gt;
&lt;li&gt;  Automatic reminders for birthdays&lt;/li&gt;
&lt;li&gt;  Stay in touch with a contact by sending reminders at a given interval&lt;/li&gt;
&lt;li&gt;  Management of debts&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flysystem"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/thephpleague/flysystem"&gt;Flysystem&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQHJXNVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bexr62u8wrexdwqrwhzv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQHJXNVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bexr62u8wrexdwqrwhzv.png" alt="Best PHP Project" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thephpleague/flysystem"&gt;Flysystem&lt;/a&gt;  is a filesystem abstraction. Use this library to replace the local file system with a remote file system.&lt;/p&gt;

&lt;p&gt;Flysystem is a file storage library for PHP. It provides one interface to interact with many types of filesystems. When you use Flysystem, you're not only protected from vendor lock-in, you'll also have a consistent experience for which ever storage is right for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#psysh"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/bobthecow/psysh"&gt;Psysh&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-i7czR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa6gs8wxxdsjwm7ri5cc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-i7czR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa6gs8wxxdsjwm7ri5cc.png" alt="best PHP projects" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobthecow/psysh"&gt;PsySH&lt;/a&gt;  offers a dev console and interactive debugger for PHP projects. In effect, this repo creates a REPL platform for PHP developers.&lt;/p&gt;

&lt;p&gt;PsySH is a runtime developer console, interactive debugger and  REPL for PHP. Learn more at  &lt;a href="http://psysh.org/"&gt;psysh.org&lt;/a&gt;  and  &lt;a href="https://github.com/bobthecow/psysh/wiki/Home"&gt;in the manual&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#headlesswpstarter"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/postlight/headless-wp-starter"&gt;Headless-wp-starter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kL8cvEHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ekgkz5nfqerbhbah7fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kL8cvEHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ekgkz5nfqerbhbah7fs.png" alt="Best PHP projects" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postlight.com/"&gt;Postlight&lt;/a&gt;'s Headless WordPress + React Starter Kit is an automated toolset that will spin up three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A WordPress backend that serves its data via the  &lt;a href="https://developer.wordpress.org/rest-api/"&gt;WP REST API&lt;/a&gt;  and  &lt;a href="http://graphql.org/"&gt;GraphQL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; A sample React frontend powered by the  &lt;a href="https://www.wpgraphql.com/"&gt;WP GraphQL API&lt;/a&gt;, which supports posts, pages, categories, menus, search, and user sign-in.&lt;/li&gt;
&lt;li&gt; Another sample server-side rendered React frontend using  &lt;a href="https://github.com/zeit/next.js/"&gt;Next.js&lt;/a&gt;  powered by the WP REST API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read all about it in  &lt;a href="https://postlight.com/trackchanges/introducing-postlights-wordpress-react-starter-kit"&gt;this handy introduction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  An automated installer which bootstraps a core WordPress installation that provides an established, stable REST API.&lt;/li&gt;
&lt;li&gt;  A plugin which exposes a newer, in-progress  &lt;a href="https://wpgraphql.com/"&gt;GraphQL API for WordPress&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  The WordPress plugins you need to set up custom post types and custom fields (&lt;a href="https://www.advancedcustomfields.com/"&gt;Advanced Custom Fields&lt;/a&gt;  and  &lt;a href="https://wordpress.org/plugins/custom-post-type-ui/"&gt;Custom Post Type UI&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;  Plugins which expose those custom fields and WordPress menus in the  &lt;a href="https://developer.wordpress.org/rest-api/"&gt;WP REST API&lt;/a&gt;  (&lt;a href="https://wordpress.org/plugins/acf-to-wp-api/"&gt;ACF to WP API&lt;/a&gt;  and  &lt;a href="https://wordpress.org/plugins/wp-rest-api-v2-menus/"&gt;WP-REST-API V2 Menus&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;  JWT authentication plugins:  &lt;a href="https://wordpress.org/plugins/jwt-authentication-for-wp-rest-api/"&gt;JWT WP REST&lt;/a&gt;  and  &lt;a href="https://github.com/wp-graphql/wp-graphql-jwt-authentication"&gt;JWT WP GraphQL&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#paseto"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/paragonie/paseto"&gt;Paseto&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iI9X35vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7f7ue808sqtsniji5b8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iI9X35vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7f7ue808sqtsniji5b8.png" alt="Best PHP Projects" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paseto is everything you love about JOSE (JWT, JWE, JWS) without any of the  &lt;a href="https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-bad-standard-that-everyone-should-avoid"&gt;many design deficits that plague the JOSE standards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library is a reference implementation of PASETO in the PHP language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#craft-cms"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/craftcms/cms"&gt;Craft CMS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zQTZ5iUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzefnmtjgp22cx94ujm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQTZ5iUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzefnmtjgp22cx94ujm4.png" alt="Craft CMS" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Craft is a flexible, user-friendly CMS for creating custom digital experiences on the web and beyond.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/craftcms/cms"&gt;Craft&lt;/a&gt;  is a self-hosted PHP application built on Yii that emphasizes custom development plugins. When using Craft CMS, developers have the basic structure in place that could be customized to fit a broad range of project specifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  An intuitive, user-friendly control panel for content creation and administrative tasks.&lt;/li&gt;
&lt;li&gt;  A clean-slate approach to content modeling that doesn’t make any assumptions about the content you need to manage.&lt;/li&gt;
&lt;li&gt;  An auto-generated  &lt;a href="https://craftcms.com/docs/3.x/graphql.html"&gt;GraphQL API&lt;/a&gt;  that can be consumed for building headless applications.&lt;/li&gt;
&lt;li&gt;  A fast and flexible  &lt;a href="https://craftcms.com/docs/3.x/dev/twig-primer.html"&gt;templating system&lt;/a&gt;  based on Twig for building traditional websites.&lt;/li&gt;
&lt;li&gt;  A powerful  &lt;a href="https://craftcms.com/commerce"&gt;ecommerce platform&lt;/a&gt;  for building bespoke ecommerce experiences.&lt;/li&gt;
&lt;li&gt;  A built-in Plugin Store with hundreds of free and commercial  &lt;a href="https://plugins.craftcms.com/"&gt;plugins&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  A robust framework for  &lt;a href="https://craftcms.com/docs/3.x/extend/"&gt;module and plugin development&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  An active, vibrant  &lt;a href="https://craftcms.com/community"&gt;community&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#panther"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/symfony/panther"&gt;Panther&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Panther is a convenient standalone library to scrape websites and to run end-to-end tests  using real browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZqUtP_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqnueqz98nm8q4vmvr7i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZqUtP_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqnueqz98nm8q4vmvr7i.jpg" alt="Best PHP Projects" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Panther is super powerful. It leverages  &lt;a href="https://www.w3.org/TR/webdriver/"&gt;the W3C's WebDriver protocol&lt;/a&gt;  to drive native web browsers such as Google Chrome and Firefox.&lt;/p&gt;

&lt;p&gt;Panther is very easy to use, because it implements Symfony's popular  &lt;a href="https://symfony.com/doc/current/components/browser_kit.html"&gt;BrowserKit&lt;/a&gt;  and  &lt;a href="https://symfony.com/doc/current/components/dom_crawler.html"&gt;DomCrawler&lt;/a&gt;  APIs, and contains all the features you need to test your apps. It will sound familiar if you have ever created  &lt;a href="https://symfony.com/doc/current/testing.html#functional-tests"&gt;a functional test for a Symfony app&lt;/a&gt;: as the API is exactly the same! Keep in mind that Panther can be used in every PHP project, as it is a standalone library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Executes the JavaScript code contained in webpages&lt;/li&gt;
&lt;li&gt;  Supports everything that Chrome (or Firefox) implements&lt;/li&gt;
&lt;li&gt;  Allows taking screenshots&lt;/li&gt;
&lt;li&gt;  Can wait for asynchronously loaded elements to show up&lt;/li&gt;
&lt;li&gt;  Lets you run your own JS code or XPath queries in the context of the loaded page&lt;/li&gt;
&lt;li&gt;  Supports custom  &lt;a href="https://www.seleniumhq.org/"&gt;Selenium server&lt;/a&gt;  installations&lt;/li&gt;
&lt;li&gt;  Supports remote browser testing services including  &lt;a href="https://saucelabs.com/"&gt;SauceLabs&lt;/a&gt;  and  &lt;a href="https://www.browserstack.com/"&gt;BrowserStack&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#laraveltotem"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/codestudiohq/laravel-totem"&gt;Laravel-totem&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TnntLb44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnhop5ldgcw9omqnjy2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TnntLb44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnhop5ldgcw9omqnjy2b.png" alt="Best PHP projects Laravel totem" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manage your  Laravel Schedule from a pretty dashboard. Schedule your Laravel Console Commands to your liking. Enable/Disable scheduled tasks on the fly without going back to your code again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rubix-ml"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/RubixML/ML"&gt;Rubix ML&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pq1iWWey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o96mkmey9xpz9prqolx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pq1iWWey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o96mkmey9xpz9prqolx.jpg" alt="Best PHP projects" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A high-level machine learning and deep learning library for the  PHP language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Developer-friendly&lt;/strong&gt;  API is delightful to use&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;40+&lt;/strong&gt;  supervised and unsupervised learning algorithms&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Support&lt;/strong&gt;  for ETL, preprocessing, and cross-validation&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Open source&lt;/strong&gt;  and free to use commercially&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#voten"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/voten-co/voten"&gt;Voten&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLxUEDkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj4jn2ffk418zl7fjeas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLxUEDkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj4jn2ffk418zl7fjeas.png" alt="Best PHP projects voten" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://voten.co/"&gt;Voten.co&lt;/a&gt; is an open-source, beautiful, highly customizable yet deadly simple, and warm community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#churnphp"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/bmitch/churn-php"&gt;Churn-php&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JAshnOzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mljgztnjnmlwrsassu3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAshnOzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mljgztnjnmlwrsassu3w.png" alt="Churn PHP" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Churn-PHP is a package that helps you identify PHP files in your project that could be good candidates for refactoring. It examines each PHP file in the path it is provided.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Checks how many commits it has.&lt;/li&gt;
&lt;li&gt;  Calculates the cyclometric complexity.&lt;/li&gt;
&lt;li&gt;  Creates a score based on these two values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;So, here was the collection of the best PHP Projects GitHub 2021.&lt;/p&gt;

&lt;p&gt;Many believes that PHP is drained or dead. But the reality is different. As mentioned above there are still more than 80% sites which uses PHP. &lt;/p&gt;

&lt;p&gt;Besides, regardless of the trends you should choose the language as per your project need and requirements. If it needs to use PHP then go with it without any hesitation.&lt;/p&gt;

&lt;p&gt;We have gathered some of the best PHP projects for you so that you don't need to look for them here and there.&lt;/p&gt;

&lt;p&gt;Do share your feedbacks and suggestions in the comment section below.&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Our Experience at Web Summit 2021</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 08 Nov 2021 14:18:36 +0000</pubDate>
      <link>https://dev.to/codesphere/our-experience-at-web-summit-2021-54l</link>
      <guid>https://dev.to/codesphere/our-experience-at-web-summit-2021-54l</guid>
      <description>&lt;p&gt;Written by Dan Parry. &lt;/p&gt;




&lt;p&gt;Every year Lisbon plays host to the world-famous Web Summit tech conference, and this year, along with over 42,000 other attendees for 128 countries the Codesphere team was there to introduce the next generation of cloud services to the community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ggHqF-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r40cl0c9ghrdx3tq911.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ggHqF-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r40cl0c9ghrdx3tq911.png" alt="websummit" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The conference has always been about the people; The technologies on show are simply the tools that bring us all together. After 4 days of connecting with brilliant and insightful industry leaders, we are ready to get to work on the next steps in our plan to deliver the first truly holistic solution for startup cloud development.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-did-we%C2%A0learn"&gt;
  &lt;/a&gt;
  What did we learn?
&lt;/h3&gt;

&lt;p&gt;We learned that you're probably using the cloud service provider you are because they gave you free credits right? Or better yet, you switched to your current provider because the last one ran out? We can't argue with that and we are already hard at work on a better option for our users.&lt;/p&gt;

&lt;p&gt;Unmanageable UIs, the inability to debug, and ineffective monitoring are all part of the current reality for the CTOs and founders we spoke to, and we're happy to provide the long-awaited solution to these problems with Codesphere so our users can get back to coding.&lt;/p&gt;

&lt;p&gt;Devs are a resourceful group and for every pain point, we discover there is a workaround in place, whether it's using different tools on top of one another or straight up switching to different providers from project to project, devs have been finding a way.&lt;/p&gt;

&lt;p&gt;But there has to be a better way, a simple, all-in-one solution to the entire development process, and that's our goal for the future of Codesphere. After speaking with countless other attendees and exhibitors at Web Summit we are ready to get back to work building the future of cloud services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"The more you know about your customers, the more you can provide them information that is increasingly useful, relevant, and persuasive"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMQtAZNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti15ewyukl6pnqnu0e2g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMQtAZNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti15ewyukl6pnqnu0e2g.jpeg" alt="web summit logo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;A big thank you to all the fantastic and innovative people we connected with in Lisbon. Web Summit for us was about pitching to and learning from our audience, and after a long week, we have a lot of feedback and inspiration to work with.&lt;/p&gt;

&lt;p&gt;We look forward to seeing you all next year.&lt;/p&gt;

&lt;p&gt;In the meantime, let us know what you want to see in Codesphere to solve your dev-ops issues.&lt;/p&gt;

&lt;p&gt;We want to get to know you, so you can get to know &lt;a href="https://link.codesphere.com/FL"&gt;Codesphere&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGAXXSmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocubk8oho7asvgx4jt4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGAXXSmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocubk8oho7asvgx4jt4z.png" alt="codesphere logo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Monday also saw the launch of our brand new website that we were happy to share with the Web Summit community - &lt;a href="https://link.codesphere.com/FL"&gt;check it out here!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cloud</category>
      <category>startup</category>
      <category>programming</category>
    </item>
    <item>
      <title>The simplest mount/unmount animation with material UI and emotion</title>
      <author>a-tonchev</author>
      <pubDate>Mon, 08 Nov 2021 14:17:26 +0000</pubDate>
      <link>https://dev.to/atonchev/the-simplest-mountunmount-animation-with-material-ui-and-emotion-4c3b</link>
      <guid>https://dev.to/atonchev/the-simplest-mountunmount-animation-with-material-ui-and-emotion-4c3b</guid>
      <description>&lt;p&gt;Surely you want sometimes in react to animate an entrance and/or exit of unmounting component. Instead of using a library, there is a nice way to do it by yourself, just with material ui!&lt;/p&gt;

&lt;p&gt;For this we will make use of the emotion css prop and the &lt;a href="https://emotion.sh/docs/keyframes"&gt;keyframes helper&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As of material ui we can just take the Box component&lt;/p&gt;

&lt;p&gt;Our goal is to create an Animated component that can receive following props:&lt;br&gt;
&lt;code&gt;show&lt;/code&gt;: if the component is mounted or not&lt;br&gt;
&lt;code&gt;mountData&lt;/code&gt;: describing the entrance animation&lt;br&gt;
&lt;code&gt;mountData.keyframes&lt;/code&gt;: Standard css animation keyframes&lt;br&gt;
&lt;code&gt;mountData.time&lt;/code&gt;: Animation duration in seconds &lt;br&gt;
&lt;code&gt;mountData.type&lt;/code&gt;: Css animation type (e.g. linear, ease-out...)&lt;br&gt;
&lt;code&gt;unmountData&lt;/code&gt;: describing the exit animation&lt;br&gt;
&lt;code&gt;unmountData.keyframes&lt;/code&gt;: Standard css animation keyframes&lt;br&gt;
&lt;code&gt;unmountData.time&lt;/code&gt;: Animation duration in seconds &lt;br&gt;
&lt;code&gt;unmountData.type&lt;/code&gt;: Css animation type (e.g. linear, ease-out...)&lt;br&gt;
&lt;code&gt;unmountTimeout&lt;/code&gt; (optional): to provide a possibility for auto unmount the component after a timeout&lt;br&gt;
&lt;code&gt;setShow&lt;/code&gt; (optional): function to unmount the component, provided by the parent&lt;/p&gt;

&lt;p&gt;If you don't provide the last two, the parent component will control the whole mount/unmount process.&lt;/p&gt;

&lt;p&gt;And here is the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@emotion/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultMountData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Animated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mountData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultMountData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;unmountData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultMountData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;unmountTimeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAnimationData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;animationData&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animationCss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`animation: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;s &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;unmountHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setAnimationData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mountData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unmountTimeout&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;unmountHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;unmountTimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unmountTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setAnimationData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;unmountTime&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setAnimationData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;unmountHandler&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unmountHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// eslint-disable-next-line react-hooks/exhaustive-deps&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mountData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;animationData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt;
      &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animationCss&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Animated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can not use default props for our default mount data, because it will cause all the time re-rendering.&lt;/p&gt;

&lt;p&gt;Now in our component we place the mountData with the settings for entrance animation, the unmountData with settings for exit animation. As soon the show param become &lt;code&gt;true&lt;/code&gt;, that will activate our Animated component entrance animation. After 4 seconds the exit animation will be played, and will set the shouldBeMounted variable to &lt;code&gt;false&lt;/code&gt;, which will unmount the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shouldBeMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShouldBeMounted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Animated&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shouldBeMounted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;mountData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="na"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
       0% {opacity: 0}
       100% {opacity: 1}
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="na"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
      0% {opacity: 1}
      100% {opacity: 0}
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="nx"&gt;unmountTimeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;setShow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setShouldBeMounted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;hide&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;animation&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Animated&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we don't want automated unmounting, we can just ignore the unmountTimeout and the setShow params. If we don't want entrance or exit animation, we can also just ignore the mountData/unmountData:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;shouldBeMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShouldBeMounted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Animated&lt;/span&gt;
  &lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shouldBeMounted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;unmountData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="na"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
      0% {opacity: 1}
      100% {opacity: 0}
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;hide&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;animation&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Animated&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we control totally our Animated component from the parent, and we don't use any animation for the mount, we use animation only for unmount.&lt;/p&gt;

&lt;p&gt;Well that's it!&lt;/p&gt;

&lt;p&gt;This is a simple, fast and lightweight way to create mount animations just using css.&lt;/p&gt;

&lt;p&gt;Best Regards&lt;br&gt;
Anton Tonchev&lt;br&gt;
JUST-SELL.online&lt;/p&gt;

</description>
      <category>material</category>
      <category>react</category>
      <category>animation</category>
      <category>css</category>
    </item>
    <item>
      <title>Don't duplicate logic in Asserts: The most common mistake on unit testing</title>
      <author>Cesar Aguirre</author>
      <pubDate>Mon, 08 Nov 2021 14:15:48 +0000</pubDate>
      <link>https://dev.to/canro91/dont-duplicate-logic-in-asserts-the-most-common-mistake-on-unit-testing-2ibd</link>
      <guid>https://dev.to/canro91/dont-duplicate-logic-in-asserts-the-most-common-mistake-on-unit-testing-2ibd</guid>
      <description>&lt;p&gt;&lt;em&gt;I originally posted this post on &lt;a href="https://canro91.github.io/2021/10/11/DontRepeatLogicInAssertions/"&gt;my blog&lt;/a&gt; a couple of weeks ago. It's part of a series I've been publishing, called "Unit Testing 101"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have covered some &lt;a href="https://canro91.github.io/2021/03/29/UnitTestingCommonMistakes/"&gt;common mistakes when writing unit tets&lt;/a&gt;. Some of them may seem obvious. But, we all have made this one mistake when we started to write unit tests. This is the most common mistake when writing unit tests and how to fix it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't repeat the logic under test when verifying the expected result of a test. Instead, use known, hard-coded, pre-calculated values.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's write some tests for &lt;a href="https://github.com/canro91/Testing101"&gt;Stringie&lt;/a&gt;, a (fictional) library to manipulate strings with  a fluent interface. Stringie has a &lt;code&gt;Remove()&lt;/code&gt; method to remove substrings from the end of a string.&lt;/p&gt;

&lt;p&gt;We can use Stringie &lt;code&gt;Remove()&lt;/code&gt; method like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;removed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "Hello,"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dont-copy-and-paste-the-tested-logic"&gt;
  &lt;/a&gt;
  Don't Copy and Paste the tested logic
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;When writing unit tests, don't copy the tested logic and paste it into private methods to use them inside assertions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we bring the tested logic to private methods in our tests, we will have code, and bugs, in two places. Duplication is the root of all evil. Even, inside our tests.&lt;/p&gt;

&lt;p&gt;Please, don't write assertions like the one in this test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Remove_ASubstring_RemovesThatSubstringFromTheEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;RemoveFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;RemoveFromEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUxO5xwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1533046652171-aecb6943c03a%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dcrop%26fm%3Djpg%26h%3D400%26ixid%3DMnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTYzMTcyMTIyMw%26ixlib%3Drb-1.2.1%26q%3D80%26utm_campaign%3Dapi-credit%26utm_medium%3Dreferral%26utm_source%3Dunsplash_source%26w%3D600" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUxO5xwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1533046652171-aecb6943c03a%3Fcrop%3Dentropy%26cs%3Dtinysrgb%26fit%3Dcrop%26fm%3Djpg%26h%3D400%26ixid%3DMnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTYzMTcyMTIyMw%26ixlib%3Drb-1.2.1%26q%3D80%26utm_campaign%3Dapi-credit%26utm_medium%3Dreferral%26utm_source%3Dunsplash_source%26w%3D600" alt="building of apartments" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;
That's a lot of duplication. Photo by &lt;a href="https://unsplash.com/@joshchai?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Joshua  Chai&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;



&lt;h2&gt;
  &lt;a href="#dont-make-internals-public"&gt;
  &lt;/a&gt;
  Don't make internals public
&lt;/h2&gt;

&lt;p&gt;Also, by mistake, we expose internals of the tested logic to use them in assertions. We make private methods public and static. Even to test those private methods directly.&lt;/p&gt;

&lt;p&gt;From our &lt;a href="https://canro91.github.io/2021/03/15/UnitTesting101/"&gt;Unit Testing 101&lt;/a&gt;, we learned to write unit tests through public methods. We should test the observable behavior of our tested code. A returned value, a thrown exception or an external invocation made.&lt;/p&gt;

&lt;p&gt;Again, don't write assertions like the one in this test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Remove_ASubstring_RemovesThatSubstringFromTheEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stringie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PrivateMethodMadePublicAndStatic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-known-values-to-assert"&gt;
  &lt;/a&gt;
  Use known values to Assert
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Instead of duplicating the tested logic, by exposing internals or copy-pasting code into assertions, use a known expected value.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we end up using the same expected values, we can create constants for them. Like &lt;code&gt;const string Hello = "Hello";&lt;/code&gt; or &lt;code&gt;const string HelloAndComma = "Hello,";&lt;/code&gt; for our example.&lt;/p&gt;

&lt;p&gt;For our sample test, simply use the expected substring &lt;code&gt;"Hello,"&lt;/code&gt;. Like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestMethod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Remove_ASubstring_RemovesThatSubstringFromTheEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"world!"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;End&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Let's use a known value in our assertions&lt;/span&gt;
    &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transformed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà! That's the most common mistake when writing unit tests. It seems silly! But, often we duplicate Math operations and string concatenations and it passes unnoticed. Remember, don't put too much logic in your tests. Tests should be only assignments and method calls.&lt;/p&gt;

&lt;p&gt;If you're new to unit testing, read my post on &lt;a href="https://canro91.github.io/2021/03/15/UnitTesting101/"&gt;how to write your first unit tests in C# with MSTest&lt;/a&gt; and check the &lt;a href="https://canro91.github.io/2021/03/29/UnitTestingCommonMistakes/"&gt;4 common mistakes when writing your first tests&lt;/a&gt;. Also, grab your free copy of my eBook &lt;a href="https://canro91.github.io/UnitTesting"&gt;Unit Testing 101&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hey! I'm Cesar, a software engineer and lifelong learner. I help teams to grow high-quality code. Visit &lt;a href="https://canro91.github.io"&gt;my blog&lt;/a&gt; to learn more about my work!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy testing!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>beginners</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build a curtain menu with React!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Mon, 08 Nov 2021 14:05:09 +0000</pubDate>
      <link>https://dev.to/ziratsu/build-a-curtain-menu-with-react-2b2l</link>
      <guid>https://dev.to/ziratsu/build-a-curtain-menu-with-react-2b2l</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;You want to build a &lt;em&gt;curtain menu&lt;/em&gt; for your app? You're in the right place!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CORlOIl2tGE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Check out the source code to see which folders and files you need to recreate a &lt;strong&gt;curtain menu&lt;/strong&gt; &lt;a href="https://github.com/Ziratsu/curtain-menu/blob/main/src/Components/CurtainMenu/CurtainMenu.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This will have a pretty simple design but you can change it up however you like!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-your-component"&gt;
  &lt;/a&gt;
  1. Create your component.
&lt;/h2&gt;

&lt;p&gt;Create a simple React app and add a components folder in which you'll create your component CurtainMenu, in which you'll create two buttons and your links:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CurtainMenu.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./menu.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CurtainMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"floating-btn"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-curtain"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            X
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HOME&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SERVICES&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;CONTACT&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-some-state"&gt;
  &lt;/a&gt;
  2. Create some state.
&lt;/h2&gt;

&lt;p&gt;Now let's create some state. It'll start with false since we want to see the nav only if we click on the button.&lt;/p&gt;

&lt;p&gt;Then let's create another state that'll check the width of the window when you open the app and whenever you resize it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleNav&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCheckWidth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-use-the-useeffect-hook"&gt;
  &lt;/a&gt;
  3. Use the &lt;em&gt;useEffect&lt;/em&gt; hook!
&lt;/h2&gt;

&lt;p&gt;Create a function that'll check the width of your window, which you'll use in your event listener:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCheckWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return function in the useEffect is necessary if, for some reason, your component is destroyed, it'll clean things up. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-hide-the-button-if-the-window-is-large"&gt;
  &lt;/a&gt;
  4. Hide the button if the window is large.
&lt;/h2&gt;

&lt;p&gt;Add a condition so that the buttons only show if the window is under 900px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"floating-btn"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-curtain"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            X
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HOME&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SERVICES&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;CONTACT&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-but-the-button-doesnt-work-so-lets-add-an-onclick-function"&gt;
  &lt;/a&gt;
  5. But the button doesn't work... so let's add an &lt;em&gt;onClick&lt;/em&gt; function!
&lt;/h2&gt;

&lt;p&gt;Start by creating the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setToggleNav&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then add it to your buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"floating-btn"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-curtain"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 X
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's still not working... That's because you need to change the classname of the name conditionally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if it's true, it'll show the nav otherwise it won't show.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-youre-done"&gt;
  &lt;/a&gt;
  6. You're done!
&lt;/h2&gt;

&lt;p&gt;That's it! Here's the full code of your component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./CurtainMenu.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./menu.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CurtainMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleNav&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCheckWidth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCheckWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkFunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setToggleNav&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"floating-btn"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNav&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; 
          &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleNavFunc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-curtain"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            X
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HOME&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SERVICES&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;CONTACT&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now have a nice &lt;strong&gt;curtain menu&lt;/strong&gt; that you can customise however you want!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Let's Try To Call A Function By A String In JavaScript
</title>
      <author>MkDay</author>
      <pubDate>Mon, 08 Nov 2021 14:00:03 +0000</pubDate>
      <link>https://dev.to/mkday/lets-try-to-call-a-function-by-a-string-in-javascript-1pn1</link>
      <guid>https://dev.to/mkday/lets-try-to-call-a-function-by-a-string-in-javascript-1pn1</guid>
      <description>&lt;p&gt;If you know the basics of JavaScript, then you know how to call a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"&gt;Function&lt;/a&gt;. However, what if we want to call a function differently?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-name-as-a-string"&gt;
  &lt;/a&gt;
  FUNCTION NAME AS A STRING
&lt;/h3&gt;

&lt;p&gt;Here is the real-world use case that I have tried.&lt;/p&gt;

&lt;p&gt;There is a set of functions and, there is also a set of string variables with values ​​corresponding to each function name.&lt;/p&gt;

&lt;p&gt;The user also can select the corresponding string variable that has a value equal to the name of the function he intends to execute at this moment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// set of functions&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// set of string variables&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;operationAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;operationSubtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subtract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;operationDivide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;divide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;operationMultiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multiply&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// user input&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;operationAdd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we call the &lt;code&gt;function add() {}&lt;/code&gt; using the variable &lt;code&gt;currentOperation&lt;/code&gt; which currently has the value &lt;code&gt;add&lt;/code&gt;, it will give us an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;currentOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// throws an error&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems that we cannot replace a function name directly with a string. However, I found some great ways to do it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ways-to-replace-a-function-name-with-a-string"&gt;
  &lt;/a&gt;
  WAYS TO REPLACE A FUNCTION NAME WITH A STRING
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-using-eval"&gt;
  &lt;/a&gt;
  1. Using eval()
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; function evaluates JavaScript code represents as a string. That string can be a JavaScript expression, a statement, or a sequence of statements. The expression can include variables and properties of existing objects.&lt;/p&gt;

&lt;p&gt;In the code below, we concatenate the string value of the function name with the arguments in parentheses as a single string and pass it to the function &lt;code&gt;eval()&lt;/code&gt; as its argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;functionString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(8, 2)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;functionString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the &lt;code&gt;eval()&lt;/code&gt; function is not a good solution for that. Why because it has significant drawbacks. More importantly, it is insecure and slows down the code running. You can learn more about why you should not use &lt;code&gt;eval()&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-using-function-object"&gt;
  &lt;/a&gt;
  2. Using Function Object
&lt;/h4&gt;

&lt;p&gt;We can use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; object as an alternative to the &lt;code&gt;eval()&lt;/code&gt; function. Here we create an instance of the &lt;code&gt;Function&lt;/code&gt; and pass our function in string format as its argument as we did before with &lt;code&gt;eval()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;functionString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(8, 2)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;functionString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// function call&lt;/span&gt;
&lt;span class="nx"&gt;newFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// returns 10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-using-functionname"&gt;
  &lt;/a&gt;
  3. Using Function.name
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name"&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property of the &lt;code&gt;Function&lt;/code&gt; object returns name of the function as a string.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;.name&lt;/code&gt; property, we can compare a function name as a string value with another string. Then we can call the function as usual.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-using-window-object"&gt;
  &lt;/a&gt;
  4. Using window Object
&lt;/h4&gt;

&lt;p&gt;Since all the items, such as variables and functions in JavaScript, are properties (or methods) of the &lt;code&gt;window&lt;/code&gt; object, we can call a function as a method of the &lt;code&gt;window&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentOperation&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method works well with global functions. However, it may not work for some cases such as &lt;em&gt;namespaced-functions&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;See the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The following code will not work&lt;/span&gt;
&lt;span class="c1"&gt;// window[operations.currentOperation](8, 2); // throws an error&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;operations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentOperation&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-using-a-custom-function-recommended"&gt;
  &lt;/a&gt;
  5. Using a custom function (Recommended)
&lt;/h4&gt;

&lt;p&gt;Also, we can create a custom function to call a function using its name as a string. It is more flexible and accurate than the others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentOperation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;executeFunctionByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="cm"&gt;/*, arg*/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;namespaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;namespaces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;namespaces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 

    &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;namespaces&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;executeFunctionByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentOperation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-best-way-and-the-worst-way"&gt;
  &lt;/a&gt;
  THE BEST WAY AND THE WORST WAY
&lt;/h3&gt;

&lt;p&gt;In my opinion, it depends on your requirement when choosing the best way to do the job. However, it is a good practice not to use &lt;code&gt;eval()&lt;/code&gt; for this purpose. Considering all the methods discussed above, I think the last one is the most efficient way to do it.&lt;/p&gt;

&lt;p&gt;If you have tried these methods or any other methods, please let us know your experience with them. Because always we love to learn from each other.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image credit: Shahadat Rahman on Unsplash&lt;/em&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
