<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Remix, SQLite, and Prisma, Oh my!</title>
      <author>Jon Crowell</author>
      <pubDate>Fri, 07 Jan 2022 18:05:04 +0000</pubDate>
      <link>https://dev.to/jonrcrowell/remix-sqlite-and-prisma-oh-my-17p1</link>
      <guid>https://dev.to/jonrcrowell/remix-sqlite-and-prisma-oh-my-17p1</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Previously published at &lt;a href="//www.fullstackfish.com"&gt;fullstackfish.com&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's create a Remix app and connect it to SQLite with Prisma.&lt;/p&gt;

&lt;p&gt;Open up a terminal and create a new Remix app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-remix@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll go through a short interview of how you want to set up your app. Pick these options to follow along or modify if you're in the mood for a little adventure.&lt;/p&gt;

&lt;p&gt;Call the app whatever you like. I'm calling mine "run-rsp".&lt;/p&gt;

&lt;p&gt;Pick the option to deploy to the Remix App Server for now. This is easy to change later.&lt;/p&gt;

&lt;p&gt;Pick JavaScript.&lt;/p&gt;

&lt;p&gt;Decline the offer to run &lt;code&gt;npm install&lt;/code&gt; as we will be using Yarn today.&lt;/p&gt;

&lt;p&gt;Once the setup process is complete, cd into the project folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;run-rsp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GDq44ZdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/138yqrxw3lb0nesazikf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GDq44ZdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/138yqrxw3lb0nesazikf.png" alt="Project Init" width="880" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the project in VS Code, or whatever editor you want to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify that everything his set up correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see the template Remix app running in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J9VmoA_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kskzxvsah5dbubseaam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J9VmoA_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kskzxvsah5dbubseaam.png" alt="Remix is working" width="620" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's replace the default code with our own. We're going to be working primarily in the &lt;strong&gt;app&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xu4mkVch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koifjldtk7v3kicug3i2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xu4mkVch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/koifjldtk7v3kicug3i2.png" alt="App Folder" width="262" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's open up the &lt;strong&gt;root.jsx&lt;/strong&gt; file and examine its contents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LiveReload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Outlet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Scripts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ScrollRestoration&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New Remix App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;charSet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;viewport&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;width=device-width,initial-scale=1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Meta&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Links&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Outlet&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ScrollRestoration&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Scripts&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LiveReload&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content we are seeing on the home page is coming from the &lt;code&gt;&amp;lt;Outlet /&amp;gt;&lt;/code&gt; component. We'll edit that in  a second.&lt;/p&gt;

&lt;p&gt;Let's make a small change so we can see LiveReload in action.&lt;/p&gt;

&lt;p&gt;Change the title of the app in the &lt;code&gt;meta()&lt;/code&gt; function to whatever you want. Save the file and notice that the title of your app in the browser changes almost instantly. (Check the browser tab of the app or right-click and view page source)&lt;/p&gt;

&lt;p&gt;The home page content is &lt;code&gt;routes\index.jsx&lt;/code&gt;. Open the file up and delete everything. Save the file. You'll now see an error in the browser.&lt;/p&gt;

&lt;p&gt;Add the following function to fix the error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ll soon be connected to SQLite&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may need to refresh your browser to get LiveReload working again. Once you've done that, you'll see your heading rendered with the browser's default styling. Let's add a CSS reset and some global styles to our app so that it looks a little better.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;root.jsx&lt;/code&gt; file, add a &lt;code&gt;links()&lt;/code&gt; function. We are already importing the &lt;code&gt;Links&lt;/code&gt; component and using it in the head of our document, so whatever we export from our &lt;code&gt;links()&lt;/code&gt; function will be used in the &lt;code&gt;Links&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// root.jsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/modern-css-reset@1.4.0/dist/reset.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add a &lt;code&gt;styles&lt;/code&gt; folder in &lt;code&gt;app&lt;/code&gt; and add a file called &lt;code&gt;global.css&lt;/code&gt; with a rule or two.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OOXhYZ0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgv5mx9z1j849m4u2v92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OOXhYZ0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgv5mx9z1j849m4u2v92.png" alt="Global Styles" width="635" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save the file. Whatever styles you've added won't be applied yet — we haven't linked the stylesheet to the app.&lt;/p&gt;

&lt;p&gt;Go back to &lt;code&gt;root.jsx&lt;/code&gt;. Import your styles and then add another link to the array in &lt;code&gt;links()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;globalStyles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~/styles/global.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// root.jsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/modern-css-reset@1.4.0/dist/reset.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;globalStyles&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save your changes and you should now see your styles applied in the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prisma-and-sqlite-setup"&gt;
  &lt;/a&gt;
  Prisma and SQLite setup
&lt;/h2&gt;

&lt;p&gt;Stop the app and let's add some dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @prisma/client
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; prisma
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After they finish installing, initialize prisma with the sqlite provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma init &lt;span class="nt"&gt;--datasource-provider&lt;/span&gt; sqlite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add a prisma folder with a schema.prisma file. It also adds a .env file if you don't already have one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HL1pOK2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efkgng72rs77buk1mk5z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HL1pOK2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efkgng72rs77buk1mk5z.png" alt="Prisma Folder" width="245" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By including the datasource provider, we don't need to edit the schema.prisma file to change the default provider to sqlite, and the .env file is populated for us with a connection string to a sqlite file. Nice touch, Prisma.&lt;/p&gt;

&lt;p&gt;Add a model to your &lt;code&gt;schema.prisma&lt;/code&gt; file for Soccer Teams. Install the Prisma extension if you haven't already to format your Prisma files. Prettier may try to override Prisma's formatting, so if that's the case, right-click the file, select format document, and indicate that Prisma should format the file. Now you don't need to worry about getting your models formatted. We are going to keep things simple here just to show how everything is wired up together. Our database will be a list of soccer teams, or whatever kind of teams you like.&lt;/p&gt;

&lt;p&gt;Add the Team model to your &lt;code&gt;schema.prisma&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prisma-client-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;datasource&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sqlite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Team&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;        &lt;span class="nb"&gt;String&lt;/span&gt;   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;team&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;country&lt;/span&gt;   &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;createdAt&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;updatedAt&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;updatedAt&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deploy the model to your database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma db push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should now have a dev.db file in the prisma folder next to our schema.prisma file.&lt;/p&gt;

&lt;p&gt;Launch prisma studio to see the results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SX4fwf-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnat6yf81m6mduzif6s1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SX4fwf-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnat6yf81m6mduzif6s1.png" alt="Prisma Studio" width="517" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can add a few teams directly in Prisma Studio. Click the &lt;strong&gt;Add record&lt;/strong&gt; button to do so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QgsEbFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhee4oukw8ldc7n3gtnd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QgsEbFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhee4oukw8ldc7n3gtnd.png" alt="Prisma Studio Records" width="635" height="239"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Add a file (&lt;code&gt;app/lib/db.server.js&lt;/code&gt;) to configure our connections to the database. Note that the "server" in the file tells Remix to run this on the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's get the teams from the database and display them in our app. We'll use a loader function (this code runs on the server), which will feed our component with the &lt;code&gt;useLoaderData()&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;  &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~/lib/db.server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;teams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Soccer&lt;/span&gt; &lt;span class="nx"&gt;Teams&lt;/span&gt; &lt;span class="nx"&gt;around&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;teams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using the Prisma &lt;code&gt;findMany()&lt;/code&gt; function to get all the teams in our database.&lt;/p&gt;

&lt;p&gt;That's it for now. The app we've built isn't particularly useful as is, but you now have the building blocks to build anything you want and style it however you like.&lt;/p&gt;

&lt;p&gt;It's been said many times but remains true: there has never been a better time to be a developer. There are so many wonderful tools to choose from. The biggest challenge can be deciding what to include in your toolbelt. Remix and Prisma should be on your short list. The developer experience with both is top notch.&lt;/p&gt;

&lt;p&gt;Enjoy, and Happy New Year!&lt;/p&gt;

</description>
      <category>remix</category>
      <category>react</category>
      <category>prisma</category>
      <category>sqlite</category>
    </item>
    <item>
      <title>What computer do you use for software develpment?</title>
      <author>Ben Halpern</author>
      <pubDate>Fri, 07 Jan 2022 17:52:10 +0000</pubDate>
      <link>https://dev.to/ben/what-computer-do-you-use-for-software-develpment-4jnp</link>
      <guid>https://dev.to/ben/what-computer-do-you-use-for-software-develpment-4jnp</guid>
      <description>&lt;p&gt;What make/model do you use? Are you satisfied with it? Are you going to stay in the same operating system ecosystem when you upgrade?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Can Appwrite handle 25 Million documents?</title>
      <author>Torsten Dittmann</author>
      <pubDate>Fri, 07 Jan 2022 17:06:33 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-012-database-improvements-3kmh</link>
      <guid>https://dev.to/appwrite/appwrite-012-database-improvements-3kmh</guid>
      <description>&lt;p&gt;With the release of &lt;a href="https://appwrite.io"&gt;Appwrite&lt;/a&gt; 0.12 come many new features, most notable being a completely overhauled database service.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/appwrite" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4bSIRV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7eMrR0VE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2225/eb541cf9-84f4-4101-987c-c219cd4b34fc.png" alt="Appwrite" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__8JLnEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zFTwyWy_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/224437/24510e1e-2d7b-414f-9b5c-f6566845bf04.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/appwrite/its-here-announcing-the-release-of-appwrite-012-5c8b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;It's Here! Announcing the Release of Appwrite 0.12!&lt;/h2&gt;
      &lt;h3&gt;Eldad A. Fux for Appwrite ・ Jan 5 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#news&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The database didn't scale well with many documents in previous Appwrite versions. This was noticeable in collections containing upwards of ten thousand documents.&lt;/p&gt;

&lt;p&gt;Since Appwrite uses the same database for internal resources like &lt;strong&gt;Users&lt;/strong&gt; and &lt;strong&gt;Files&lt;/strong&gt;, this limitation impacted every other service indirectly. The more the data, the slower the requests.&lt;/p&gt;

&lt;p&gt;With 0.12, the database API introduces &lt;a href="https://appwrite.io/docs/database#indexes"&gt;Indexes&lt;/a&gt;, which allow you to improve queries for specific documents by a lot. Complimentary, we also added a new and more powerful way of filtering with &lt;a href="https://appwrite.io/docs/database#querying-documents"&gt;different query operators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These improvements along with a complete rewrite of the database service enhanced Appwrite in a way that we were able to effortlessly query a collection of &lt;strong&gt;25 Million documents&lt;/strong&gt; with excellent response times. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmark"&gt;
  &lt;/a&gt;
  🏁 Benchmark
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://k6.io/"&gt;k6&lt;/a&gt; was used with 500 &lt;strong&gt;Virtual Users (VUs)&lt;/strong&gt; over 30 seconds, with each request performing an &lt;code&gt;EQUALS&lt;/code&gt; query against an attribute that is indexed with a &lt;strong&gt;Key index&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Rate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6/metrics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Appwrite-Key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[API_KEY]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Appwrite-Project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[PROJECT_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFailRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Rate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed requests&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;vus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;discardResponseBodies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;30s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;thresholds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed requests&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rate&amp;lt;0.05&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`http://[APPWRITE_URL]/v1/database/collections/[COLLECTION_ID]/documents?queries[]=number.equal(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25000000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;myFailRate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#collection"&gt;
  &lt;/a&gt;
  📝 Collection
&lt;/h2&gt;

&lt;p&gt;Here is a representation of what the collection looks like used for the benchmark, the &lt;code&gt;$id&lt;/code&gt; is automatically generated, and &lt;code&gt;number&lt;/code&gt; is a unique random value up to 25 million.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;$id&lt;/th&gt;
&lt;th&gt;number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;61d7fe9f91d6fed26fc0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;61d7fe73eb0142ab50ec&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;61d7fe73eb5142c4b5e5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;61d86657b6179ea91483&lt;/td&gt;
&lt;td&gt;25000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#request"&gt;
  &lt;/a&gt;
  ⚙️ Request
&lt;/h2&gt;

&lt;p&gt;Requests were performed against the &lt;a href="https://appwrite.io/docs/client/database?sdk=web-default#databaseListDocuments"&gt;list documents endpoint&lt;/a&gt; with an &lt;code&gt;EQUALS&lt;/code&gt; query against the &lt;code&gt;number&lt;/code&gt; attribute and a random number from 1 - 25,000,000. On top of the query itself, each request goes through authentication, authorization, and permissions validation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/v1/database/[COLLECTION]/documents?queries[]=number.equal([RANDOM_NUMBER])&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  🔬 Results
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5opXJtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9l6xfnfly9sgxwdt0hg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5opXJtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9l6xfnfly9sgxwdt0hg.png" alt="Benchmark Result 0.12.0" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The results speak for themselves. With &lt;strong&gt;40k successful requests&lt;/strong&gt; and &lt;strong&gt;1,334 per second&lt;/strong&gt;, we reached numbers that were very difficult to achieve with previous versions.&lt;/p&gt;

&lt;p&gt;Not only is the new Database better at scale with simple Queries - but it also improves overall performance with more complex queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLMYmvfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk49ptzk5bywl1dusy11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLMYmvfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk49ptzk5bywl1dusy11.png" alt="htop" width="880" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Server were Appwrite was hosted had 8-Cores with 16GB memory and it's CPU usage during the benchmark peaked around 80%. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;k6 was run on a Mac Mini M1 with 16 GB memory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This performance boost is part of a series of steps we take to ensure developers can take full advantage of their Appwrite servers. We plan to share more data and insights from both the development process and Appwrite benchmarks with upcoming new versions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  📚 Learn more
&lt;/h2&gt;

&lt;p&gt;You can use following resources to learn more and get help:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io"&gt;🚀 Appwrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite"&gt;🚀 Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;📜 Appwrite Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;💬 Discord Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>performance</category>
      <category>opensource</category>
      <category>programming</category>
      <category>database</category>
    </item>
    <item>
      <title>Migrating Your Open Source Builds Off Of Travis CI</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Fri, 07 Jan 2022 16:53:01 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/migrating-your-open-source-builds-off-of-travis-ci-24i6</link>
      <guid>https://dev.to/adamgordonbell/migrating-your-open-source-builds-off-of-travis-ci-24i6</guid>
      <description>&lt;p&gt;Starting in early 2021 and continuing to this day, a movement has been underway to migrate open-source projects off of Travis CI. So what happened, and where should you move your project to?&lt;/p&gt;

&lt;p&gt;I bet you can't guess where I recommend?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JD0_1nCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/assets/images/migrating-from-travis/quote1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JD0_1nCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/assets/images/migrating-from-travis/quote1.png" alt="Travis not providing CI" width="587" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're not familiar with Travis CI, it's a build company that has been powering the continuous integration (CI) of many open source projects since it launched in 2011. It was the first build solution that was free for open source use and that easily integrated into GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happened"&gt;
  &lt;/a&gt;
  What Happened?
&lt;/h2&gt;

&lt;p&gt;In 2019 Travis was acquired by a private equity group and many engineers were let go.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So apparently Travis CI is being strip-mined immediately after their acquisition by Idera. Sorry, I mean after "joining the Idera family" 🙄 &lt;a href="https://t.co/CE5ERp1RsY"&gt;https://t.co/CE5ERp1RsY&lt;/a&gt; A bunch of talented people are waking up to termination letters. Absolutely shameful. &lt;a href="https://t.co/BbBRPdnswe"&gt;https://t.co/BbBRPdnswe&lt;/a&gt;&lt;/p&gt;— Senior Oops Engineer (&lt;a class="mentioned-user" href="https://dev.to/reinh"&gt;@reinh&lt;/a&gt;) &lt;a href="https://twitter.com/ReinH/status/1098663375985229825?ref_src=twsrc%5Etfw"&gt;February 21, 2019&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, on Nov 2, 2020, Travis CI announced the end of its unlimited support for open-source projects:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those of you who have been building on public repositories (on travis-ci.com, with no paid subscription), we will upgrade you to our trial (free) plan with a 10K credit allotment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When your credit allotment runs out - we'd love for you to consider which of our plans will meet your needs.&lt;/strong&gt; - &lt;a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing"&gt;Travis CI blog post&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The reason behind the change is stated to be abuse by crypto-miners:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;However, in recent months we have encountered significant abuse of the intention of this offering (increased activity of cryptocurrency miners, TOR nodes operators etc.).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, many feel the real reason is that the acquirer is aiming for profitability at all costs and supporting the open-source community represents a significant cost.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My previous company was on Travis, and as soon as I saw that Travis was purchased by private equity, I knew the downward spiral had begun and I recommended we move to something else. Not surprised that this is happening a couple of years later...my understanding is that private equity will tend towards slowing/stopping development after acquisition to cut costs/headcount, and then squeeze the remaining value from what's left, so this is in-line with that playbook.  - &lt;a href="https://news.ycombinator.com/item?id=25340486"&gt;rpdillion on hacker news&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-it-matters"&gt;
  &lt;/a&gt;
  Why It Matters
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The open source movement runs on the heroic efforts of not enough people doing too much work. They need help. - &lt;a href="https://www.wired.com/author/clive-thompson"&gt;CLIVE THOMPSON&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many open-source projects are still using Travis and open-source maintainers are notoriously overworked.  Time spent migrating builds is time not spent on other things.  Large well-maintained projects will likely quickly transition but for many smaller projects, an abrupt change in a service they depend on is a huge challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-move-to"&gt;
  &lt;/a&gt;
  Where to Move To
&lt;/h2&gt;

&lt;p&gt;If you maintain an open-source project that uses TravisCI and are hoping to get off it, then assuming you have the time to migrate, there are actually many viable options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-run-your-own-builds"&gt;
  &lt;/a&gt;
  Option: Run Your Own Builds
&lt;/h3&gt;

&lt;p&gt;You can find some &lt;a href="https://medium.com/google-developers/how-to-run-travisci-locally-on-docker-822fc6b2db2e"&gt;scattered&lt;/a&gt; &lt;a href="https://stackoverflow.com/a/35972902"&gt;instructions&lt;/a&gt; &lt;a href="https://stackoverflow.com/a/35972902"&gt;online&lt;/a&gt; for running Travis builds yourself. There are mixed reports on the stability and feasibility of this approach, but if your adventurous, you could try to set up your own Travis CI build executor on your own hardware.&lt;/p&gt;

&lt;p&gt;A better option, if you want to run the builds on your own hardware is to look at something like &lt;a href="https://buildkite.com/"&gt;Buildkite&lt;/a&gt; or &lt;a href="https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/"&gt;GitLab CI&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-circle-ci"&gt;
  &lt;/a&gt;
  Option: Circle CI
&lt;/h3&gt;

&lt;p&gt;A better option is &lt;a href="https://dev.to/blog/continuous-integration#circleci"&gt;Circle CI&lt;/a&gt; , a Travis CI competitor which still offers a free plan.  &lt;/p&gt;

&lt;p&gt;Circle CI offers 400,000 build credits per month to any open-source public repository.  This is their free plan and limits concurrency to 1 job at a time. They also have an easy GitHub integration and no application process.  &lt;/p&gt;

&lt;p&gt;They also allow use of the &lt;a href="https://circleci.com/open-source/"&gt;free plan&lt;/a&gt; with private repositories. This makes it a great choice if your project is not actually open-source.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-option-github-actions"&gt;
  &lt;/a&gt;
  Best Option: GitHub Actions
&lt;/h3&gt;

&lt;p&gt;An even better option is &lt;a href="https://dev.to/blog/continuous-integration#github-actions"&gt;GitHub Actions&lt;/a&gt;, a cloud CI system directly from GitHub.  GitHub is at the center of many open source projects and this makes it a natural choice for CI.  &lt;/p&gt;

&lt;p&gt;GitHub Actions (GHA) is newer than either TravisCI or Circle CI, having launched in late 2018.&lt;/p&gt;

&lt;p&gt;GHA offers very generous build credits, 20 concurrent build jobs per project and no limit on build time used.   If your pipeline can be run in parallel this concurrency can really be a great enabler.  The only limitation I was able to find is that the build may last no longer than 6 hours in total.&lt;/p&gt;

&lt;p&gt;If your project is hosted on GitHub and is open source then the &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/usage-limits-billing-and-administration"&gt;GHA open source plan&lt;/a&gt; seems like the best bet right now.&lt;/p&gt;

&lt;p&gt;But wait, there is an even better solution: being vendor neutral. Before I explain how you become vendor neutral lets review.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-open-source-plans"&gt;
  &lt;/a&gt;
  Summary of Open Source Plans
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Open Source Offering&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Travis CI&lt;/td&gt;
&lt;td&gt;&lt;a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing"&gt;1000 minutes total with application process for more&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Circle CI&lt;/td&gt;
&lt;td&gt;&lt;a href="https://circleci.com/open-source/"&gt;1 concurrent build at a time&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GitHub Actions&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/usage-limits-billing-and-administration"&gt;20 concurrent build jobs per project&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#dont-let-this-happen-again"&gt;
  &lt;/a&gt;
  Don't Let This Happen Again
&lt;/h2&gt;

&lt;p&gt;So GitHub has a generous build plan, but moving your CI process is not easy or free.  The more complex your build, the harder porting from one cloud CI to another is going to be.  If you move to GHA and then GHA stops being a viable option in the future then this whole effort will have to be repeated.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#neutral-build-specifications"&gt;
  &lt;/a&gt;
  Neutral Build Specifications
&lt;/h2&gt;

&lt;p&gt;How can you minimize the effort of moving from build platform to another?&lt;/p&gt;

&lt;p&gt;My suggestion is to keep as much logic as possible out of the proprietary build definition. Instead, define it in an open-source format that you can execute anywhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#makefiles-and-dockerfiles"&gt;
  &lt;/a&gt;
  Makefiles and Dockerfiles
&lt;/h3&gt;

&lt;p&gt;One way to build a CI neutral build definition is to use a Makefile and a dockerfile.  The Makefile contains the various steps of your build pipeline and you run it inside a docker container which installs any needed dependencies.  &lt;a href="https://github.com/qmk/qmk_firmware"&gt;QMK&lt;/a&gt; is a popular open-source project that uses this approach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; qmkfm/base_container&lt;/span&gt;

&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; /qmk_firmware&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /qmk_firmware&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; make all:default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/qmk/qmk_firmware/blob/master/Dockerfile"&gt;QMK&lt;/a&gt; Docker File for executing the full build&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#earthly"&gt;
  &lt;/a&gt;
  Earthly
&lt;/h3&gt;

&lt;p&gt;I am an Earthly contributor and this is the Earthly blog, but in my totally biased opinion, it deserves a mention as an neutral format for defining a build. The Elixir web framework &lt;a href="https://github.com/phoenixframework/phoenix/blob/master/Earthfile"&gt;Phoenix is a great example to take a look at&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Earthly is like a Makefile where each step is containerized and dependencies are explicitly declared.  &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.13-alpine3.11&lt;/span&gt;

build:
 COPY main.go .
 RUN go build main.go
 SAVE ARTIFACT main AS LOCAL main

lint: 
 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example build steps for a &lt;a href="https://github.com/earthly/earthly/blob/main/examples/go/Earthfile"&gt;go application&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-interesting-options"&gt;
  &lt;/a&gt;
  Other Interesting Options
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#easier-migration-from-travis-to-gha"&gt;
  &lt;/a&gt;
  Easier Migration from Travis to GHA
&lt;/h3&gt;

&lt;p&gt;Migrating your build out of Travis will take a little work.  If you aren't interested in a neutral format, &lt;a href="https://github.com/marketplace/actions/run-travis-yml"&gt;this GHA action&lt;/a&gt; might make it easier.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This action setups environment variables specified in the &lt;code&gt;.travis.yml&lt;/code&gt; file and then runs &lt;em&gt;one&lt;/em&gt; of the (potentially) many build jobs within the test build stage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serverless-builds"&gt;
  &lt;/a&gt;
  Serverless Builds
&lt;/h3&gt;

&lt;p&gt;Another interesting option if you are feeling adventurous is using AWS lambda as your build executor.  I have no idea how feasible this is, however, &lt;a href="https://github.com/StanfordSNR/gg"&gt;the gg project&lt;/a&gt; from Stanford looks interesting.  It attempts to use AWS lambdas for running builds at the maximum possible parallelism.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Take-Aways
&lt;/h2&gt;

&lt;p&gt;You probably need to move your open-source project's builds off of Travis CI. If you host it on GitHub, GitHub Actions is probably a good choice. There is a risk that the GHA offer will disappear as well.  You can protect yourself from that by defining your build in an open format that is easy to move around.  All build problems can be solved by another layer of abstraction.&lt;/p&gt;

&lt;p&gt;If you are going that route, I think &lt;a href="https://earthly.dev/"&gt;Earthly&lt;/a&gt; is a great option, but as I said, I am biased.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to avoid burnout as a Developer</title>
      <author>Dylan Oh</author>
      <pubDate>Fri, 07 Jan 2022 16:48:48 +0000</pubDate>
      <link>https://dev.to/ohdylan/how-to-avoid-burnout-as-a-developer-f2c</link>
      <guid>https://dev.to/ohdylan/how-to-avoid-burnout-as-a-developer-f2c</guid>
      <description>&lt;p&gt;Let's pause the technical stuff for a week and talk about how should we maintain our mental health as a developer (as a human).&lt;/p&gt;

&lt;p&gt;I have always been a self-motivated person and wanting to push myself to do more and learn more in life. Besides, I had a bad habit where I tend to blame myself so much and felt guilty when I failed to make good use of time. My friends told me that I should get some chill and it's ok to be relax sometimes. However, I did not listen to that and felt that I should not waste any little piece of my time in my 20's. In turn, I slept lesser, kept on forcing myself to sit in front of the computer even though I did not feel like in on that day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-was-just-a-random-night-that-i-suddenly-had-breathlessness"&gt;
  &lt;/a&gt;
  It was just a random night that I suddenly had breathlessness.
&lt;/h3&gt;

&lt;p&gt;I was kinda panic and almost wanted to call the ambulance. As one of my best friends, I reached out to Mr.Google to seek for some self-help methods (bad example, please get help from medical experts) and luckily it did reduce my symptom. Started from that day, I kept having a chest distress and feeling difficult in breathing. I started being suspicious on every part of my body where I felt like none of them is working well. I had seek countless medical help (even a full body checkup). However, all the doctors came out with the same diagnosis: You do not have any issue with your physical health, but it seems like your are experiencing some &lt;strong&gt;ANXIETY&lt;/strong&gt; issues.&lt;/p&gt;

&lt;p&gt;I started to think where did this anxiety come from. I did not have too much stress at work as the projects were still manageable, and all my colleagues are awesome. By then, I realized that the source of stress is me, from myself. I had been in the loop of forcing myself to make use of every single second of my life, then I failed and blamed myself for being such an indiscipline person. I believed that I am not the only one having this issue. As a developer, most of us have &lt;strong&gt;IMPOSTER SYNDROME&lt;/strong&gt;, where we always feel like we know nothing and we must be on the lowest end of the curve. This feeling of self-abasement has caused us to wanting to improve and exhaust ourselves. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-all-forget-this-one-thing-no-one-is-perfect"&gt;
  &lt;/a&gt;
  We all forget this one thing: No one is PERFECT.
&lt;/h2&gt;

&lt;p&gt;When having this imaginery self of being the best programmer in the world, we also have that sense of disappointment to ourselves for not reaching to that level. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#one-thing-that-i-do-to-overcome-this-is-to-write-down-reflections"&gt;
  &lt;/a&gt;
  One thing that I do to overcome this, is to &lt;em&gt;write down reflections&lt;/em&gt;.
&lt;/h4&gt;

&lt;p&gt;Look back at yourself a few years / months ago, just how much have you improved? We don't compare ourselves to others as everyone has a different set of situations and starting point. Who we should compare to is the yesterday self. As long as we are 1% better than that, it is something worth celebrating. By doing this, there is no way that you could not become a better person in the &lt;em&gt;LONG RUN&lt;/em&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#another-thing-that-helps-me-a-lot-is-to-get-rid-of-my-social-media-apps-on-phone"&gt;
  &lt;/a&gt;
  Another thing that helps me a lot is to &lt;em&gt;get rid of my social media apps on phone&lt;/em&gt;.
&lt;/h4&gt;

&lt;p&gt;People tend to show us the better side of their life and we might start doing comparison subconciously. "Look at these people, they are all living fulfilling and productive lives ... I am such a loser." If you are able to turn all these into motivation to go forward, I think that is good for you. However, most of us will just feel the frustration. Thus, I would suggest that you may uninstall those applications from your phone, but access them through the phone browser if you have to do some catchups with friends. With this, you can increase the resistance of turning them on and get your own life back. It works for me and highly recommended that you try it out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lastly-take-a-break-if-you-have-to"&gt;
  &lt;/a&gt;
  Lastly, &lt;em&gt;take a break if you have to&lt;/em&gt;.
&lt;/h4&gt;

&lt;p&gt;The activities that I would suggest would be having a casual walk (it would be even better to walk in the nature), just flex your brain a little bit. It is totally fine to grab a cup of coffee with friends, to watch a great movie or take a short nap. Exercising is also a great way to reduce the anxiety.&lt;/p&gt;

&lt;p&gt;Fortunately, I have been feeling much better nowadays and I am able to share these with all of you. I treat myself much better and I have learnt how to slot resting time into my time blocks. Hope this article could helps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do follow me for more future articles on web design, programming and self-improvement 😊&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Symfony Station Communique - 7 January 2021. A look at Symfony and PHP news.</title>
      <author>Reuben Walker, Jr.</author>
      <pubDate>Fri, 07 Jan 2022 16:37:38 +0000</pubDate>
      <link>https://dev.to/reubenwalker64/symfony-station-communique-7-january-2021-a-look-at-symfony-and-php-news-1b0h</link>
      <guid>https://dev.to/reubenwalker64/symfony-station-communique-7-january-2021-a-look-at-symfony-and-php-news-1b0h</guid>
      <description>&lt;p&gt;This post originally appeared on &lt;a href="https://symfonystation.com/Symfony-Station-Communique-31-December-2021"&gt;Symfony Station&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Welcome to this week's Symfony Station Communique. It's your weekly review of the most valuable and essential news in the Symfony and PHP development communities. Take your time and enjoy the items most valuable for you.&lt;/p&gt;

&lt;p&gt;Thanks once again to Javier Eguiluz and Symfony for sharing &lt;a href="https://symfonystation.com/Symfony-Station-Communique-31-December-2021"&gt;our last communique&lt;/a&gt; in their &lt;a href="https://symfony.com/blog/a-week-of-symfony-783-27-december-2021-2-january-2022"&gt;Week of Symfony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;*Please note that links will open in a new browser window. My opinions, if I present any, will be in bold.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#symfony"&gt;
  &lt;/a&gt;
  Symfony
&lt;/h2&gt;

&lt;p&gt;As always, we will start with the official news from Symfony.&lt;/p&gt;

&lt;p&gt;Highlight -&amp;gt; "This week, Symfony 4.4.36, 5.3.13, 5.4.2 and 6.0.2 maintenance versions were released. In addition, Symfony announced the open sourcing of Symfony CLI, and we published the traditional Symfony 2021 Year in Review summary."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/a-week-of-symfony-783-27-december-2021-2-january-2022"&gt;A Week of Symfony #783 (27 December 2021 - 2 January 2022)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a week left to enjoy the early bird registration for SymfonyLive Paris 2022 conference organized on April 7-8 2022. Join the team for a week of Symfony in French: 2-day workshops and 2-day conference!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/symfonylive-paris-2022-l-inscription-early-bird-se-termine-le-10-janvier-2022"&gt;SymfonyLive Paris 2022 : l'inscription early bird se termine le 10 janvier 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They have announced the workshops as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/les-formations-du-symfonylive-paris-2022-sont-en-ligne"&gt;Les formations du SymfonyLive Paris 2022 sont en ligne&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Early bird registration for SymfonyWorld Online 22 Summer edition ends January 14. Calls for presentations are open for it and SymfonyLive Paris.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfony.com/blog/cfp-and-early-bird-registrations-are-open-for-symfonylive-paris-2022-and-symfonyworld-online-2022-summer-edition"&gt;CFP and Early Bird registrations are open for SymfonyLive Paris 2022 and SymfonyWorld Online 2022 Summer Edition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SymfonyCasts picks back up on their security series and writes "We added an “email verification” step to our registration by leveraging the symfonycasts/verify-email-bundle (hey! I know them!). Then we looked at actually validating the signed URL that we sent to the user to show &lt;em&gt;why&lt;/em&gt; it failed when it does, and mark our user as “verified”.&lt;/p&gt;

&lt;p&gt;And apart from being more powerful and less complex, the new Symfony security system comes with new stuff! Like “login throttling”. We enable this &amp;amp; open up its source code to see how it works. Hint: it works via events!"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://5hy9x.r.ag.d.sendibm3.com/mk/mr/wTZed2qQQ-8vQTfxEq-ZyeOQvtHBeGPVBlWIal-qrGww4RG-YznULPJvTjD9jXTjUuPDjz5Bw-I6RPaop8F2nFFZUUNVVxDeH-5STEb4yiMJ3e8eOooa1d_RRlJCW7-T2iqO-fxV0w"&gt;This week on SymfonyCasts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTJH3MnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Featured-Item_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTJH3MnI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Featured-Item_1.png" alt="Featured Item graphic" width="660" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-item"&gt;
  &lt;/a&gt;
  Featured Item
&lt;/h2&gt;

&lt;p&gt;We continue to highlight a post of the week. This one was an obvious and easy decision.&lt;/p&gt;

&lt;p&gt;This week I am choosing one of the most useful posts I've found in a long time. It's primarily about the frontend and self-explanatory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/yigitsr/10-resources-for-web-developers-46g7"&gt;10 Resources for Web Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-week"&gt;
  &lt;/a&gt;
  This Week
&lt;/h3&gt;

&lt;p&gt;API Platform creator Kévin Dunglas writes: "I’m very excited to announce that after 6 years of teamwork, Symfony and API Platform now include an industry-first set of tools designed to automatically create, manage and run the Docker containers needed for your applications."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dunglas.fr/2021/12/symfonys-new-native-docker-support-symfony-world/"&gt;Symfony’s New Native Docker Support (Symfony World) Presentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dariusz Gafka explores "pushing the refactoring of our Symfony Applications to their boundaries. We will focus on dropping boilerplate completely so we can write only the code that matters, allowing us for easy modifications, maintenance and future extensions." &lt;/p&gt;

&lt;p&gt;We will focus on dropping boilerplate completely so we can write only the code that matters, allowing us for easy modifications, maintenance and future extensions."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/nerd-for-tech/build-your-symfony-applications-with-ease-using-ecotone-f7bcaa11b5c4"&gt;Build Your Symfony and Doctrine ORM Applications with ease using Ecotone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fabio Hiroki has another excellent article for us. This one covers using Symfony with the RabbitMQ message broker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fabiohiroki.medium.com/introduction-to-rabbitmq-and-symfony-a1e782a820d5"&gt;Introduction to RabbitMQ and Symfony&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In previous communiques I shared Anders Björkland's articles on the SilverStripe CMS. Here's the latest one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/andersbjorkland/query-me-some-google-books-api-1lic"&gt;Query me some Google Books API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regarding CMSs our next original article will cover those built with Symfony Components. Check back next Wednesday to read it.&lt;/p&gt;

&lt;p&gt;Mike Zukowski follows up on an article he wrote how to improve your application’s response time with lazy Twig extensions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@dotcom.software/testing-twig-extensions-the-right-way-10178cb1c8"&gt;Testing Twig Extensions The Right Way&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There was an explosion of Drupal news this week. So, here we go.&lt;/p&gt;

&lt;p&gt;Speaking of Twig, Drupal 10 will update its implementation of Twig from version 2 to 3. Here are the details so you can prepare.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.drupal.org/node/3256890"&gt;Twig Updated from 2.x to 3.x&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drupal uses the EventDispatcher component from Symfony, which implements the Mediator and Observer design patterns. This allows for business logic to be extensible without making systems entirely coupled. The originating system dispatches an event and allows any other system to react to that event or modify data associated with that event. The originating system can then perform other interactions after its observers have processed the event.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mglaman.dev/blog/registering-your-phpunit-test-event-subscriber-testing-events"&gt;Registering your PHPUnit test as an event subscriber for testing events&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-week"&gt;
  &lt;/a&gt;
  Last Week
&lt;/h3&gt;

&lt;p&gt;While the Drupal Content Management (CMS) system is a popular solution for all-in-one websites, it also works well as a “content warehouse” that other systems can pull from. In this tutorial, we will use Drupal Views to create two API endpoints that an app or website can use to request content from a Drupal CMS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/geekculture/how-to-create-a-rest-api-endpoint-with-drupal-views-a6c70019e5bc"&gt;How to Create REST API Endpoints with Drupal Views&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And finally on the Drupal front, here is a useful cheat sheet for developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.hojtsy.hu/blog/2021-dec-22/major-drupal-configuration-schema-cheat-sheet-update-7-years-later"&gt;Major Drupal configuration schema cheat sheet update&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tanvir Ahmad shows us how to create PHP CLI application with the Symfony console component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tanvir-ahmad.medium.com/easy-way-to-create-a-symfony-console-application-d173852c01cb"&gt;Easy Way to Create a Symfony Console Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He also has this post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tanvir-ahmad.medium.com/how-to-run-symfony-console-command-in-aws-lambda-347d535e97da"&gt;How to Run Symfony Console Command in AWS Lambda&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeless"&gt;
  &lt;/a&gt;
  Timeless
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyZq8FHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Horizontal-Inspector-Tagline-Logo_0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyZq8FHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://symfonystation.com/sites/default/files/inline-images/Horizontal-Inspector-Tagline-Logo_0.png" alt="Inspector logo" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sponsored Article&lt;/p&gt;

&lt;p&gt;All sponsored articles are for products we have vetted and stand behind. We either use them or would do so if they were applicable to the Symfony Station site.&lt;/p&gt;

&lt;p&gt;We published our first sponsored article on Symfony Station exploring how Code Execution Monitoring helps you identify bugs and bottlenecks in your Symfony app before your customers do. Like all our articles it is now available via audio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://symfonystation.com/why-code-execution-monitoring-symfony"&gt;Why You Should Use Code Execution Monitoring with Symfony&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCVuFRpf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/052ayktpks8r8q0nr2fy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCVuFRpf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/052ayktpks8r8q0nr2fy.png" alt="PHP logo" width="880" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#thisweek"&gt;
  &lt;/a&gt;
  ThisWeek
&lt;/h3&gt;

&lt;p&gt;Kévin Dunglas also writes: "In modern web applications, it’s a common pattern to serve the web API and the frontend app from different subdomains. This was the pattern implemented by API Platform until last year. But we changed that for 2 main reasons: performance and REST principles."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dunglas.fr/2022/01/preventing-cors-preflight-requests-using-content-negotiation/"&gt;Preventing CORS Preflight Requests Using Content Negotiation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alex Hernandez writes: "Over the years, I’ve learned how to set up Docker in a way it’s easy to use without needing to know every detail. Today I want to give you an easy-to-use template in order to use Docker with PHP, explained, so you can understand how it works in just 10 minutes."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/codex/docker-template-for-php-explained-d674018e7cef"&gt;Docker Template For PHP Explained&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vishwa Chikate asks: "how can we better implement the callback Class/Methods a.k.a the resource handlers associated with an REST HTTP API. The idea which will be covered will help #developers in having a Reusable, Extendable and an easily Maintainable code.&lt;/p&gt;

&lt;p&gt;The approach outlined here can be applied to any PHP framework of choice or it can be considered as implementation practice in other languages / framework’s."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@vishwa.chikate/php-restful-api-resource-handlers-c2d8376e1e6c"&gt;PHP: RESTful API resource handlers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel like building a PHP site from scratch? Jens Kuerschner has the article for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jenskuerschner.medium.com/build-a-kick-ass-php-microsite-in-under-4h-f21b27b904d2"&gt;Build a kick-ass PHP Microsite in under 4 hours&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I found the following to be an interesting case study from Matt Kingshott.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://itnext.io/how-i-designed-and-built-lumenos-recruitment-search-engine-d8918b3500"&gt;How I designed and built Lumeno’s recruitment search engine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have shared work from Eelco Verbrugge, before. Here he explains PHP interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/eelcoverbrugge/php-interfaces-explained-35g"&gt;PHP Interfaces Explained&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Christophe Avonture mentions that "As a loyal reader of several forums for years, I frequently find unreadable PHP code posted by beginners asking for help. Before we can try to help them, it is sometimes useful to reformat the code and rewrite it partially." He shows us how here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/cavo789/docker-runrefactor-php-code-from-a-web-interface-1ffn"&gt;Docker - Run/Refactor PHP code from a web interface&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a short but very interesting post from Mike Zukowski.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@dotcom.software/adding-a-watermark-to-a-video-in-php-81ee7fabd0c"&gt;Adding a watermark to a video in PHP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PHP Stripe API turns the agonizing task of collecting credit card payments into a matter of copy &amp;amp; paste. It’s basically a JavaScript library that interfaces your web page to Stripe’s web servers. The information is never sent to your servers making it so effective. You don’t have to stress over the server-side settings of your application.&lt;/p&gt;

&lt;p&gt;The Stripe PHP library gives access to the Stripe API from applications composed within the PHP language. It incorporates a pre-defined set of classes for API that initialize themselves from the API which makes it compatible with a wide run of versions of the Stripe API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cloudways.com/blog/php-stripe-integration/"&gt;Streamline Your Online Payments With PHP Stripe Payment Gateway Integration&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-week"&gt;
  &lt;/a&gt;
  Last Week
&lt;/h3&gt;

&lt;p&gt;Based on the most recent Stack Overflow survey in 2020, Python was the most used language according to 70% of its respondents, while PHP was chosen by 25%. However, market reports from w3techs.com tell a different story, showing that nearly 78% of all websites today run PHP. Much of PHP’s mainstay can be attributed to Wordpress and Shopify, which constitute around 45% of all websites today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@aristeksystems/8-reasons-why-php-development-is-not-dead-82b07ae2acd6"&gt;8 Reasons Why PHP Development Is Not Dead&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timeless"&gt;
  &lt;/a&gt;
  Timeless
&lt;/h3&gt;

&lt;p&gt;Tips are always welcome, and Damian Brdej has these for PhPStorm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/quentindamianino/8-most-useful-phpstorm-keyboard-shortcuts-4476"&gt;8 most useful PhpStorm keyboard shortcuts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJ6mcfeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh4enyuqbl5ibnddk3yq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJ6mcfeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh4enyuqbl5ibnddk3yq.jpeg" alt="Code logo" width="626" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  Other
&lt;/h2&gt;

&lt;p&gt;The State of the Octoverse from GitHub explores a year of change in programming. Its research tells you how to improve your performance and well-being by developing code, creating documentation, and supporting communities in smarter, more sustainable ways.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://octoverse.github.com/"&gt;The State of the Octoverse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Next Web looks at why shrinkflation is not a solution for inflation in the programming industry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thenextweb.com/news/shrinkflation-software-development"&gt;Don’t let ‘shrinkflation’ affect your software development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kesk gives us "eight little tips that can save you time in your day-to-day as a programmer. Some are basic while others could be a little complex."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/8-super-useful-sql-snippets-youll-want-to-have-on-hand-5b01fd7c87de"&gt;8 Super-useful SQL Snippets You’ll Want to Have on Hand&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you published or seen something related to Symfony or PHP that we missed? If so, please &lt;a href="https://symfonystation.com/contact"&gt;contact us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's it for this week. Thanks for making it to the end of another extended edition. I look forward to sharing next week's Symfony and PHP news with you on Friday.&lt;/p&gt;

&lt;p&gt;Please share this post. :) Be sure to &lt;a href="https://symfonystation.com/contact"&gt;join our newsletter list&lt;/a&gt; at the bottom of any of our site’s pages. Joining gets you each week's communique in your inbox (a day early). And follow us on Twitter at &lt;a href="https://twitter.com/symfonystation"&gt;@symfonfystation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding Symfonistas!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7t8cugj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx8p5n2zj9q2wi64tnon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7t8cugj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx8p5n2zj9q2wi64tnon.png" alt="Photo of Reuben Walker" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reuben Walker&lt;/p&gt;

&lt;p&gt;Founder &lt;a href="https://symfonystation.com/"&gt;Symfony Station&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reuben is also Ringmaster of &lt;a href="https://media.mobileatom.net/about-us/"&gt;Mobile Atom Media&lt;/a&gt; and its division &lt;a href="https://www.mobileatom.net/"&gt;Mobile Atom Code&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>symfony</category>
      <category>php</category>
      <category>docker</category>
      <category>drupal</category>
    </item>
    <item>
      <title>Font Awesome- Explained</title>
      <author>atordvairn</author>
      <pubDate>Fri, 07 Jan 2022 16:03:04 +0000</pubDate>
      <link>https://dev.to/atordvairn/font-awesome-explained-4gff</link>
      <guid>https://dev.to/atordvairn/font-awesome-explained-4gff</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sfertiuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcTg7UNPCpx9qWKcyluwEgSwfMB7uvgXw1Ydaw%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sfertiuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcTg7UNPCpx9qWKcyluwEgSwfMB7uvgXw1Ydaw%26usqp%3DCAU" alt="font awesome" width="818" height="375"&gt;&lt;/a&gt;&lt;br&gt;
user experience is null without icons.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In computing, an icon is a pictogram or ideogram displayed on a computer screen in order to help the user navigate a computer system. The icon itself is a quickly comprehensible symbol of a software tool, function, or a data file, accessible on the system and is more like a traffic sign than a detailed illustration of the actual entity it represents.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Icons are indicators about what the button, command or function or action actually does and helps in faster understanding of the interference. This, it's really important to know the correct icon for the specified place.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fontawesome.com/"&gt;font awesome&lt;/a&gt; is the amazing javascript Library for importing numerus fonts into your webpage. it's Incredible.&lt;br&gt;
Let's dive right in it:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://kit.fontawesome.com/85b07c1155.js"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The import might seem something like this if you have seen the link at the site.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  usage
&lt;/h3&gt;

&lt;p&gt;Here's the interesting part.&lt;br&gt;
&lt;a href="https://fontawesome.com/"&gt;font awesome&lt;/a&gt; has four tones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;solid&lt;/li&gt;
&lt;li&gt;regular (some are accessible to free users)&lt;/li&gt;
&lt;li&gt;light (pro)&lt;/li&gt;
&lt;li&gt;dual (pro)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgTeHF9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQjO1Ek13SKgWvBgz9qdmniLmuJvmzQBoZtAw%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgTeHF9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQjO1Ek13SKgWvBgz9qdmniLmuJvmzQBoZtAw%26usqp%3DCAU" alt="font awesome shades" width="720" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;each one has a different class in the html tag (generally &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; is chosen)&lt;/p&gt;

&lt;p&gt;So it goes like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-rocket"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- fas = font awesome solid --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- fa = prefix --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- rocket = name --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one was for the solid one, now see the one with dual tone&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fad fa-rocket"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- fad = font awesome dual --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- fa = prefix --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- rocket = name --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See how only one class changes when you switch tones.&lt;/p&gt;

&lt;p&gt;so you don't need to open &lt;a href="https://fontawesome.com/"&gt;font awesome&lt;/a&gt; site evertime if you know the logic :))&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7odHjl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/QaGZ50VlEPEAAAAC/think-about-it-use-your-brain.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7odHjl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/QaGZ50VlEPEAAAAC/think-about-it-use-your-brain.gif" alt="think about it" width="460" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  wrapping up
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://fontawesome.com/"&gt;font awesome&lt;/a&gt; is really awesome for any site.&lt;/p&gt;

&lt;p&gt;Fonts should be nice to see and you should respect accessibility practices though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#originally-published-here-at-my-blog"&gt;
  &lt;/a&gt;
  originally published &lt;a href="https://atordvairn.netlify.app/font-awesome-explained"&gt;here&lt;/a&gt; at my blog
&lt;/h2&gt;

&lt;p&gt;Make sure you're subscribed to &lt;a href="https://www.getrevue.co/profile/atordvairn"&gt;the high dose javascript newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;of course I can't &lt;em&gt;make&lt;/em&gt; you, but it take me a considerable amount of time to write these..&lt;/p&gt;

&lt;p&gt;tweet this if you like it.&lt;br&gt;
thanks!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Overflow Wrap In A Flex Container</title>
      <author>Som Shekhar Mukherjee</author>
      <pubDate>Fri, 07 Jan 2022 15:58:36 +0000</pubDate>
      <link>https://dev.to/somshekhar/overflow-wrap-in-a-flex-container-35</link>
      <guid>https://dev.to/somshekhar/overflow-wrap-in-a-flex-container-35</guid>
      <description>&lt;p&gt;In this blog, we'll look at a very specific thing i.e. the use of &lt;code&gt;overflow-wrap&lt;/code&gt; property inside a flex container. &lt;code&gt;overflow-wrap&lt;/code&gt; is a very handy CSS property and I've used it in almost all of the projects that I've worked in. &lt;/p&gt;

&lt;p&gt;In a nutshell &lt;code&gt;overflow-wrap&lt;/code&gt; allows us wrap some overflowing content in places where it would not wrap by default. But let's explore this with the help of an example.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ssmkhrj/embed/ZEXRXdq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;From the above example our focus would only be in the following snippet, everything else is just for styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    The longest word in any of the major English language
    dictionaries is
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"highlight"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      pneumonoultramicroscopicsilicovolcanoconiosis
    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    , a word that refers to a lung disease contracted from
    the inhalation of very fine silica particles,
    specifically from a volcano; medically, it is the same
    as silicosis.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, by default if the text inside a container cannot fit the container (&lt;em&gt;i.e. it overflows&lt;/em&gt;), then the text starts wrapping by introducing line breaks at normal word break points (&lt;em&gt;like spaces&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;And that is exactly what's happening currently, the text (&lt;code&gt;card-body-content&lt;/code&gt;) inside the container (&lt;code&gt;.card-body&lt;/code&gt;) overflows it and hence line breaks are introduced. But the word "pneumonoultramicroscopicsilicovolcanoconiosis" still overflows the container because there are no valid break points to wrap it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WfW6YFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dh26mvp4da5nyvtlwgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WfW6YFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dh26mvp4da5nyvtlwgz.png" alt="overflow-normal-no-flex" width="668" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we start using &lt;code&gt;overflow-wrap&lt;/code&gt; let's try to make the container (&lt;code&gt;.card-body&lt;/code&gt;) &lt;code&gt;display: flex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Crap! Things get even worse now, but why? What's so different about flex?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Same content
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTmRAx9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flzhzmyppvbjzq4k2wel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTmRAx9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/flzhzmyppvbjzq4k2wel.png" alt="Image description" width="730" height="442"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Flex relies on &lt;code&gt;min-content&lt;/code&gt; and &lt;code&gt;max-content&lt;/code&gt; intrinsic sizes to structure the layout. So, by default flex tries to fit in all the flex items in a single row wherein each item gets their &lt;code&gt;max-content&lt;/code&gt; intrinsic size, but if doing so overflows the container then it starts shrinking the items (&lt;em&gt;this behavior can be altered using the &lt;code&gt;flex-shrink&lt;/code&gt; property on the flex items&lt;/em&gt;) and the items are shrank until they reach their &lt;code&gt;min-content&lt;/code&gt; intrinsic size, after which the items start overflowing the container.&lt;/p&gt;

&lt;p&gt;Now coming back to the example, the flex container is initially trying to fit its only item in a single row wherein the item gets a width equal to its &lt;code&gt;max-content&lt;/code&gt; intrinsic size (&lt;em&gt;and the &lt;code&gt;max-content&lt;/code&gt; size is when the entire item is spread in a single line without any wrapping&lt;/em&gt;), but clearly that would overflow the container - so flex starts wrapping the item - but remember it would only wrap the item until it reaches its &lt;code&gt;min-content&lt;/code&gt; intrinsic size (&lt;em&gt;which is equal to the longest word in the item&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;So, the width of the flex container here is equal to the width of the word "pneumonoultramicroscopicsilicovolcanoconiosis" and the line breaks that happen is based on this width (&lt;em&gt;look at the image below&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpmSVHuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n18hnrpz4kec5z0wye5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpmSVHuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n18hnrpz4kec5z0wye5c.png" alt="min-content-intrinsic-size" width="673" height="457"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now that we have an understanding of how flex works, let's use the &lt;code&gt;overflow-wrap&lt;/code&gt; property in our code and look at the following three scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;overflow-wrap: break-word&lt;/code&gt; in non flex container&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;overflow-wrap: break-word&lt;/code&gt; in a flex container&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;overflow-wrap: anywhere&lt;/code&gt; in a flex container&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#-raw-overflowwrap-breakword-endraw-in-non-flex-container"&gt;
  &lt;/a&gt;
  &lt;code&gt;overflow-wrap: break-word&lt;/code&gt; in non flex container
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body-content wrap-break-word"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Same content
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;break-word&lt;/code&gt;&lt;br&gt;
The same as the anywhere value, with normally unbreakable words allowed to be broken at arbitrary points if there are no otherwise acceptable break points in the line, but soft wrap opportunities introduced by the word break are NOT considered when calculating min-content intrinsic sizes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, from the definition above (&lt;em&gt;except maybe the last sentence which we'll discuss next&lt;/em&gt;), it's quite clear that because our content is allowed to wrap at any arbitrary point there's no overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPcDZUoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl9geh0r7eysba6n4rkz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPcDZUoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl9geh0r7eysba6n4rkz.png" alt="Image description" width="715" height="482"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#-raw-overflowwrap-breakword-endraw-in-a-flex-container"&gt;
  &lt;/a&gt;
  &lt;code&gt;overflow-wrap: break-word&lt;/code&gt; in a flex container
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body-content wrap-break-word"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Same content
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we make the container a flexbox, &lt;code&gt;overflow-wrap: break-word&lt;/code&gt; doesn't seem to have any effect. Let's look at the definition of &lt;code&gt;overflow-wrap: break-word&lt;/code&gt; again, specifically the last sentence.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;break-word&lt;/code&gt;&lt;br&gt;
The same as the anywhere value, with normally unbreakable words allowed to be broken at arbitrary points if there are no otherwise acceptable break points in the line, but soft wrap opportunities introduced by the word break are NOT considered when calculating min-content intrinsic sizes.**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means &lt;code&gt;break-word&lt;/code&gt; is not shrinking the &lt;code&gt;min-content&lt;/code&gt; intrinsic size of the flex item because of which the flex-item is still overflowing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iM4QiBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7lb8r1qryhw0v2nghv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iM4QiBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7lb8r1qryhw0v2nghv2.png" alt="Image description" width="691" height="446"&gt;&lt;/a&gt;  &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#-raw-overflowwrap-anywhere-endraw-in-a-flex-container"&gt;
  &lt;/a&gt;
  &lt;code&gt;overflow-wrap: anywhere&lt;/code&gt; in a flex container
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body-content wrap-anywhere"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Same content
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;anywhere&lt;/code&gt;&lt;br&gt;
To prevent overflow, an otherwise unbreakable string of characters — like a long word or URL — may be broken at any point if there are no otherwise-acceptable break points in the line. No hyphenation character is inserted at the break point. &lt;strong&gt;Soft wrap opportunities introduced by the word break are considered when calculating min-content intrinsic sizes.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we use &lt;code&gt;anywhere&lt;/code&gt;, it actually shrinks the &lt;code&gt;min-content&lt;/code&gt; intrinsic of the flex item because of which the flex item is allowed to wrap and there's no overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjXO_SbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w0dlwiq79vukv12404r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjXO_SbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w0dlwiq79vukv12404r.png" alt="Image description" width="715" height="508"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's it for this blog! I understand that the example might be a little contrived and it might not click instantly, but I would suggest you to read it again and play with code, it will eventually make sense. Also, put you thoughts in the comments!&lt;/p&gt;

&lt;p&gt;Peace ✌&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Scope Basis (Life span of a code)</title>
      <author>Chris Martins</author>
      <pubDate>Fri, 07 Jan 2022 15:47:22 +0000</pubDate>
      <link>https://dev.to/biochris/scope-basis-life-span-of-a-code-2ik5</link>
      <guid>https://dev.to/biochris/scope-basis-life-span-of-a-code-2ik5</guid>
      <description>&lt;p&gt;In this article, we will be discussing the accessibility of a given code, based on its scope declaration. &lt;/p&gt;

&lt;p&gt;Definition of Variable Scope: Scope of a variable is the part of a program in which a code is accessible.&lt;br&gt;
Basically we have 2 types of Variable scopes; Global scope and The Local scope. &lt;/p&gt;

&lt;p&gt;Further more, a code can only be accessed in a program if it hasn't used up its life span. That is to say, every code has a given life span in which when exhausted, the code will be erased from the memory of the computer. The computer will not be able to access that code or run it. &lt;/p&gt;

&lt;p&gt;GLOBAL SCOPE: a global variable scope is accessible throughout the entire program. In other words they have a very long life span. You can access a global variable scope anywhere throughout the program. They are citizen of the entire program.  In the program, a globally declared variable scope takes dominance, but within a local variable scope, the locally declared variables are dominant(gets executed over the global variable scope). &lt;br&gt;
You can access the global variable scope even in local scope like within a function. A global variable scope claims citizenship throughout the entire program. &lt;/p&gt;

&lt;p&gt;For Example:&lt;br&gt;
&lt;code&gt;let a = gold;&lt;br&gt;
Console.log(a);&lt;br&gt;
Function local(){&lt;br&gt;
 let b = silver;&lt;br&gt;
 Console.log(a)&lt;br&gt;
}&lt;br&gt;
local();&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
When we run this code we get the word gold printed twice, though it wasn't declared within the function, but for the fact it's a globally declared variable scope, it can be accessed throughout the program, and have a long life span. &lt;/p&gt;

&lt;p&gt;LOCAL SCOPE: A local variable scope is a code that is only accessible within the code block it was declared, within a function. It takes citizenship of only its code block or within the function it was declared, outside which the code ceases to exist, or its life span is terminated.  A locally declared variable scope can not be accessed outside its code block, once the code block ends, the life span of the local scope ends as well, and it gets erased from the memory of the computer. That is to say, you can not call a locally declared variable outside its function or code block, it will return the error not declared. &lt;br&gt;
However, within the function or the code block of a local variable scope, the local scope takes dominance over the global scope. &lt;br&gt;
For Example:&lt;br&gt;
&lt;code&gt;let a = gold;&lt;br&gt;
Function local(){&lt;br&gt;
 let a = silver;&lt;br&gt;
 Console.log(a)&lt;br&gt;
}&lt;br&gt;
local();&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
When we call the function local, it returns silver. Because within the local scope, the locally declared variable takes dominance over the global scope.&lt;/p&gt;

&lt;p&gt;But when we call a local scope outside its code block, it can not be accessed. It will return the error not declared. That is, once the code block ends, the life span of a locally declared variable ends as well. &lt;/p&gt;

&lt;p&gt;If we declare a variable locally with the same variable name as a globally declared variable, both variables are entirely different and will return either the local scope or global scope based on where it is called. &lt;br&gt;
Example;&lt;br&gt;
&lt;code&gt;let a = gold;&lt;br&gt;
Console.log(a);&lt;br&gt;
Function local(){&lt;br&gt;
 let a = silver;&lt;br&gt;
 Console.log(a)&lt;br&gt;
}&lt;br&gt;
local();&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
When we run the above code, it will return gold, while the function will return silver.&lt;br&gt;
Based on its scope, codes with same variable name can return different result. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Easiest way to understand CAB(Call, Apply, Bind) in JS</title>
      <author>Basharath</author>
      <pubDate>Fri, 07 Jan 2022 15:40:18 +0000</pubDate>
      <link>https://dev.to/basharath/easiest-way-to-understand-cabcall-apply-bind-in-js-1l2h</link>
      <guid>https://dev.to/basharath/easiest-way-to-understand-cabcall-apply-bind-in-js-1l2h</guid>
      <description>&lt;p&gt;The keyword &lt;code&gt;this&lt;/code&gt; in JavaScript is one of the most muddling concepts because its value depends on where it is used. Often it tricks developers and sometimes it's the culprit behind surreal results.&lt;/p&gt;

&lt;p&gt;Let's discuss this &lt;code&gt;this&lt;/code&gt; keyword with simple and easy-to-understand examples before actually delving into the &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;bind&lt;/code&gt; methods as &lt;code&gt;this&lt;/code&gt; keyword is the main reason for having those methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this-in-javascript"&gt;
  &lt;/a&gt;
  What is this in JavaScript?
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword in JavaScript refers to the object that the function is a property of and &lt;code&gt;this&lt;/code&gt; will depend on the object that is invoking the function. &lt;/p&gt;

&lt;p&gt;To get a quick idea of &lt;code&gt;this&lt;/code&gt; have a look at the code snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;place&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="c1"&gt;// {name: "John", age: 25, place: "London", myFunction: ƒ()}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code snippet, you can see that when &lt;code&gt;myFunction&lt;/code&gt; method is called it returns the value of &lt;code&gt;this&lt;/code&gt;, which is nothing but the &lt;code&gt;myObj&lt;/code&gt; itself. If you recollect the definition for &lt;code&gt;this&lt;/code&gt; in the previous paragraph, it says &lt;code&gt;this&lt;/code&gt; refers to the object that the function is a property of, so here &lt;code&gt;myFunction&lt;/code&gt; is a property of &lt;code&gt;myObj&lt;/code&gt;, which means &lt;code&gt;this&lt;/code&gt; is referring to that myObj object. &lt;/p&gt;

&lt;p&gt;A simple trick is whatever precedes before .(dot) is the object referenced by the &lt;code&gt;this&lt;/code&gt; keyword. So before .(dot) in &lt;code&gt;myObj.myFunction()&lt;/code&gt; is &lt;code&gt;myObj&lt;/code&gt;, which is the value of &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's take another example to understand this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// window or undefined(in case of 'strict mode')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we are returning &lt;code&gt;this&lt;/code&gt; from the &lt;code&gt;myFunction&lt;/code&gt;, so when &lt;code&gt;myFunction&lt;/code&gt; is called what we see or get is the value of &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again if we recollect our definition of &lt;code&gt;this&lt;/code&gt;, it refers to the object which the function is a property of. Here our function &lt;code&gt;myFunction&lt;/code&gt; is a property of global object nothing but the &lt;code&gt;window&lt;/code&gt; object in the browser, so which means when we call &lt;code&gt;myFunction&lt;/code&gt; the value of &lt;code&gt;this&lt;/code&gt; is going to be the &lt;code&gt;window&lt;/code&gt; object. &lt;/p&gt;

&lt;p&gt;If we go by our trick of .(dot) preceding the function, here there's no dot but every function is a method in the &lt;code&gt;window&lt;/code&gt; object, so it translates to &lt;code&gt;window.myFunction()&lt;/code&gt; so here, the &lt;code&gt;this&lt;/code&gt; keyword refers to the &lt;code&gt;window&lt;/code&gt; object. &lt;/p&gt;

&lt;p&gt;In order to avoid functions getting attached to the window object, we &lt;code&gt;use strict&lt;/code&gt; mode so as a result window will be &lt;code&gt;undefined&lt;/code&gt; in such cases. &lt;/p&gt;

&lt;p&gt;So keep in mind our definition as we're going to use that for understanding &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; methods. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The this keyword in JavaScript refers to the object that the function is a property of and this will depend on the object that is invoking the function. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#understanding-call-apply-bind-in-javascript"&gt;
  &lt;/a&gt;
  Understanding call, apply, bind in JavaScript
&lt;/h2&gt;

&lt;p&gt;Let's consider an object &lt;code&gt;person&lt;/code&gt; with a property &lt;code&gt;name&lt;/code&gt; and a method &lt;code&gt;details&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old, lives in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//John 25 years old, lives in London&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call the method &lt;code&gt;details&lt;/code&gt; on &lt;code&gt;person&lt;/code&gt; object with the arguments, we knew that &lt;code&gt;this&lt;/code&gt; refers to the &lt;code&gt;person&lt;/code&gt; object because &lt;code&gt;details&lt;/code&gt; is a property of the &lt;code&gt;person&lt;/code&gt; object and so &lt;code&gt;this.name&lt;/code&gt; would be &lt;em&gt;John&lt;/em&gt; and so the result that gets returned will be as shown in the comments.&lt;/p&gt;

&lt;p&gt;This part is going to be clear as we knew what &lt;code&gt;this&lt;/code&gt; means in the &lt;code&gt;person&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Let's consider a scenario where we wanted to use the &lt;code&gt;details&lt;/code&gt; method but with different arguments.&lt;/p&gt;

&lt;p&gt;As per the &lt;code&gt;details&lt;/code&gt; method we can pass in different age and place values but how about the name, as it is connected with the &lt;code&gt;this&lt;/code&gt; keyword? This is where we are going to use those special methods &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;. Let's dive into those.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-call-endraw-method"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;call&lt;/code&gt; method
&lt;/h3&gt;

&lt;p&gt;Now we want to associate a different object other than &lt;code&gt;person&lt;/code&gt; to &lt;code&gt;this&lt;/code&gt; keyword of &lt;code&gt;details&lt;/code&gt; method. So to do that we're going to use the &lt;code&gt;call&lt;/code&gt; method as shown below in the code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tokyo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// James 30 years old, lives in Tokyo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;call&lt;/code&gt; method takes a new object that we want this to refer to followed by the arguments to the function(nothing but the &lt;code&gt;details&lt;/code&gt; method) and it gets called referencing &lt;code&gt;this&lt;/code&gt; to the new object passed as the first argument. Voila! That's what a call method is. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-apply-endraw-method"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;apply&lt;/code&gt; method
&lt;/h3&gt;

&lt;p&gt;Guess what, &lt;code&gt;apply&lt;/code&gt; method is just the same as the &lt;code&gt;call&lt;/code&gt; method, that is, it takes a new object as the first argument to reference the &lt;code&gt;this&lt;/code&gt; keyword and is followed by an array of arguments. So it means you can simply pass the arguments to the &lt;code&gt;details&lt;/code&gt; function in the form of an array instead of passing individually. Have a look at the code below so it becomes clear for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tokyo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; 
&lt;span class="c1"&gt;// James 30 years old, lives in Tokyo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; methods are used to reference a new object to &lt;code&gt;this&lt;/code&gt; keyword on methods.&lt;/p&gt;

&lt;p&gt;And then what &lt;code&gt;bind&lt;/code&gt; is for? Guess!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-bind-endraw-method"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;bind&lt;/code&gt; method
&lt;/h3&gt;

&lt;p&gt;When &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; methods are applied they are called(invoked) directly referencing the new object passed but in order to get a new function reference that can be used to call at later times, the &lt;code&gt;bind&lt;/code&gt; method is used. Have a look at the code snippet below to get more clarity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;personDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;William&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;personDetails&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="c1"&gt;// William 40 years old, lives in Rome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So using the &lt;code&gt;bind&lt;/code&gt; method returns a new function reference which can be called at a later time and that is all about the bind method.&lt;/p&gt;

&lt;p&gt;So putting all the three methods together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old, lives in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;//John 25 years old, lives in London&lt;/span&gt;

&lt;span class="c1"&gt;// Using call&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tokyo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// James 30 years old, lives in Tokyo&lt;/span&gt;

&lt;span class="c1"&gt;// Using apply&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tokyo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// James 30 years old, lives in Tokyo&lt;/span&gt;

&lt;span class="c1"&gt;// Using bind&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;personDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;William&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;personDetails&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// William 40 years old, lives in Rome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in short CAB(call, apply, bind in JavaScript) are used to reference a new owner object to the &lt;code&gt;this&lt;/code&gt; keyword. Hope this article has demystified the call, apply and bind methods in JS.&lt;/p&gt;

&lt;p&gt;Did we miss anything here? Yes, the &lt;code&gt;this&lt;/code&gt; value will be different when we use an arrow function. See you in the next article.&lt;/p&gt;

&lt;p&gt;If you liked this article please give a follow &amp;amp; share. More such interesting articles with tips are on the way.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Access Windows  Folder/Files On MacOS</title>
      <author>AKINRO OLAWALE </author>
      <pubDate>Fri, 07 Jan 2022 15:20:50 +0000</pubDate>
      <link>https://dev.to/lexycodestudio/how-to-access-windows-folderfiles-on-macos-1m8i</link>
      <guid>https://dev.to/lexycodestudio/how-to-access-windows-folderfiles-on-macos-1m8i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-create-a-shared-folder"&gt;
  &lt;/a&gt;
  1 Create a Shared Folder
&lt;/h2&gt;

&lt;p&gt;Create a folder on your local drive, click on properties &amp;gt; sharing.&lt;br&gt;
Search for more &amp;gt;&amp;gt;&amp;gt; [&lt;a href="https://www.makeuseof.com/tag/how-to-easily-share-files-across-mac-windows-computers/amp/"&gt;https://www.makeuseof.com/tag/how-to-easily-share-files-across-mac-windows-computers/amp/&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-get-your-windows-ip-address"&gt;
  &lt;/a&gt;
  2 Get Your Windows IP Address
&lt;/h2&gt;

&lt;p&gt;Press &lt;em&gt;Windows button + x&lt;/em&gt;.&lt;br&gt;
Click to open command prompt as administrator.&lt;br&gt;
Type &lt;em&gt;ipconfig&lt;/em&gt; and note the IPv4 address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-get-your-windows-username"&gt;
  &lt;/a&gt;
  3 Get Your Windows Username
&lt;/h2&gt;

&lt;p&gt;On command prompt, type &lt;em&gt;echo %username%&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-access-windows-files-on-mac"&gt;
  &lt;/a&gt;
  4 Access Windows Files on Mac
&lt;/h2&gt;

&lt;p&gt;Open the Finder app. In the menu bar at the top of the screen, select Go &amp;gt; Connect to Server. Type either smb://[windows IP address] and press Enter. You will be prompted to enter your Windows username and password. Click on Connect.&lt;br&gt;
Ding Dong - Your shared windows folder and files.&lt;/p&gt;

</description>
      <category>windows</category>
      <category>mac</category>
      <category>virtualbox</category>
    </item>
    <item>
      <title>Android.js - build android apps from nodejs</title>
      <author>atordvairn</author>
      <pubDate>Fri, 07 Jan 2022 15:10:02 +0000</pubDate>
      <link>https://dev.to/atordvairn/androidjs-build-android-apps-from-nodejs-1056</link>
      <guid>https://dev.to/atordvairn/androidjs-build-android-apps-from-nodejs-1056</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9THbYPsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcR0Hvu9K0WdyyIblGyuYVe0hGtG4fRK9g4lIQ%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9THbYPsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcR0Hvu9K0WdyyIblGyuYVe0hGtG4fRK9g4lIQ%26usqp%3DCAU" alt="android.js" width="720" height="426"&gt;&lt;/a&gt;&lt;br&gt;
If You Can Build A Website, You Can Build An Android App!&lt;br&gt;
Android.js simple takes your node.js website and puts it into a WebView.&lt;/p&gt;

&lt;p&gt;Yeah, i know that's a lot of disadvantages there but it also provides different APIs for you to interact with.&lt;/p&gt;

&lt;p&gt;an android.js application isn't only a WebView like a front end of a site, it can also interact with the backend and interact with files and much more!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdKU4NmS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/0JFK3s1Xr8IAAAAC/loading-downloading.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdKU4NmS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/0JFK3s1Xr8IAAAAC/loading-downloading.gif" alt="install it" width="498" height="280"&gt;&lt;/a&gt;&lt;br&gt;
To install &lt;a href="https://android-js.github.io/"&gt;Android JS&lt;/a&gt; binaries, use npm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;androidjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install &lt;a href="https://android-js.github.io/"&gt;Android JS&lt;/a&gt; project generator and builder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; androidjs-builder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize"&gt;
  &lt;/a&gt;
  initialize
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;AndroidApp
&lt;span class="nb"&gt;cd &lt;/span&gt;AndroidApp
androidjs g
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will generate a sample project inside &lt;code&gt;AndroidApp&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Which will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AndroidApp
    |__ assets
    |       |__ ipc, css, js
    |
    |__ views
    |       |__ index.html
    |
    |__ main.js
    |__ package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;main.js&lt;/code&gt; is the main file or we can say it is back process of your app which execute all the code written in node, so you have to write all the node js code inside main.js&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;index.html&lt;/code&gt; is the first view which is render by app initially&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; to keep track of all your node packages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;assets&lt;/code&gt; to store all assets of your app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#time-to-build"&gt;
  &lt;/a&gt;
  time to build
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b4v90ZL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/archeyes.com/wp-content/uploads/2016/04/01_egypt_twitter.gif%3Fssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b4v90ZL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/archeyes.com/wp-content/uploads/2016/04/01_egypt_twitter.gif%3Fssl%3D1" alt="let's go building" width="580" height="540"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;AndroidApp
androidjs b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will generate apk file inside dist folder&lt;/p&gt;

&lt;p&gt;if this &lt;code&gt;build&lt;/code&gt; command fails or generated any error, try to build with &lt;code&gt;force command&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;androidjs b &lt;span class="nt"&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#why-not-to-use-it"&gt;
  &lt;/a&gt;
  Why &lt;em&gt;not&lt;/em&gt; to use it
&lt;/h3&gt;

&lt;p&gt;Android.js isn't better than &lt;a href="https://dev.to/react-native-javascript-is-everywhere"&gt;react-native&lt;/a&gt;&lt;br&gt;
But, at least you can (somewhat) throw your existing code in it and generate an API to work on a device just like android application.&lt;br&gt;
&lt;a href="https://reactnative.dev/"&gt;React native&lt;/a&gt; stays the best way to make Android applications with react (JavaScript).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  other resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://android-js.github.io/docs/"&gt;docs&lt;/a&gt; - documentation for android.js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/android-js/sample-app"&gt;Sample apps&lt;/a&gt; - some sample apps to go with..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  conclusion
&lt;/h3&gt;

&lt;p&gt;Android.js is an amazing framework if you don't know react&lt;/p&gt;

&lt;p&gt;But if you know react, react native comes in handy at the first place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#originally-published-here-at-my-blog"&gt;
  &lt;/a&gt;
  originally published &lt;a href="https://atordvairn.netlify.app/android-js-making-android-apps-with-pure-javascript"&gt;here&lt;/a&gt; at my blog
&lt;/h2&gt;

&lt;p&gt;Make sure you're subscribed to &lt;a href="https://www.getrevue.co/profile/atordvairn"&gt;the high dose javascript newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;of course I can't &lt;em&gt;make&lt;/em&gt; you, but it take me a considerable amount of time to write these..&lt;/p&gt;

&lt;p&gt;tweet this if you like it.&lt;br&gt;
thanks!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
