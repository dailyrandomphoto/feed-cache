<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Weekly Trending</title>
    <description>Weekly Trending of JavaScript in GitHub</description>
    <pubDate>Sat, 23 Jan 2021 02:59:07 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>Asabeneh/30-Days-Of-React</title>
      <link>https://github.com/Asabeneh/30-Days-Of-React</link>
      <description>&lt;p&gt;30 Days of React challenge is a step by step guide to learn React in 30 days. It requires HTML, CSS, and JavaScript knowledge. You should be comfortable with JavaScript before you start to React. If you are not comfortable with JavaScript check out 30DaysOfJavaScript. This is a continuation of 30 Days Of JS. This challenge may take up to 100 day…&lt;/p&gt;&lt;hr&gt;&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;Author: 
 &lt;!-- raw HTML omitted --&gt;Asabeneh Yetayeh
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; October, 2020
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;| # Day | Topics | | ----- | :-------------------------------------------------------------------------------------------------------------------------: | |00|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&quot;&gt;Introduction&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&quot;&gt;How to Use Repo&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&quot;&gt;Requirements&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&quot;&gt;Setup&lt;/a&gt;| |01|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;JavaScript Refresher&lt;/a&gt;| |02|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/02_Day_Introduction_to_React/02_introduction_to_react.md&quot;&gt;Getting Started React&lt;/a&gt;| |03|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/03_Day_Setting_Up/03_setting_up.md&quot;&gt;Setting Up&lt;/a&gt;| |04|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/04_Day_Components/04_components.md&quot;&gt;Components&lt;/a&gt;| |05|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/05_Day_Props/05_props.md&quot;&gt;Props&lt;/a&gt;| |06|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/06_Day_Map_List_Keys/06_map_list_keys.md&quot;&gt;List, Map and Keys&lt;/a&gt;| |07|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/07_Day_Class_Components/07_class_components.md&quot;&gt;Class Components&lt;/a&gt;| |08|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/08_Day_States/08_states.md&quot;&gt;States&lt;/a&gt;| |09|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/09_Day_Conditional_Rendering/09_conditional_rendering.md&quot;&gt;Conditional Rendering&lt;/a&gt;| |10|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/10_React_Project_Folder_Structure/10_react_project_folder_structure.md&quot;&gt;React Project Folder Structure&lt;/a&gt;| |11|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/11_Day_Events/11_events.md&quot;&gt;Events&lt;/a&gt;| |12|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/12_Day_Forms/12_forms.md&quot;&gt;Forms&lt;/a&gt;| |13|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/13_Day_Controlled_Versus_Uncontrolled_Input/13_uncontrolled_input.md&quot;&gt;Controlled and Uncontrolled Component&lt;/a&gt;| |14|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/14_Day_Component_Life_Cycles/14_component_life_cycles.md&quot;&gt;Component Life Cycles&lt;/a&gt;| |15|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/15_Third_Party_Packages/15_third_party_packages.md&quot;&gt;Third Party Packages&lt;/a&gt;| |16|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/16_Higher_Order_Component/16_higher_order_component.md&quot;&gt;Higher Order Components&lt;/a&gt;| |17|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/17_React_Router/17_react_router.md&quot;&gt;React Router&lt;/a&gt;| |18|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/18_Fetch_And_Axios/18_fetch_axios.md&quot;&gt;Fetch versus Axios&lt;/a&gt;| |19|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/19_projects/19_projects.md&quot;&gt;Projects&lt;/a&gt;| |20|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/20_projects/20_projects.md&quot;&gt;Projects&lt;/a&gt;| |21|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/21_Introducing_Hooks/21_introducing_hooks.md&quot;&gt;Hooks&lt;/a&gt;| |22|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/22_Form_Using_Hooks/22_form_using_hooks.md&quot;&gt;Forms Using Hook&lt;/a&gt;| |23|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/23_Fetching_Data_Using_Hooks/23_fetching_data_using_hooks.md&quot;&gt;Fetching Data Using Hooks&lt;/a&gt;| |24|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/24_projects/24_projects.md&quot;&gt;Project using Hooks&lt;/a&gt;| |25|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/25_Custom_Hooks/25_custom_hooks.md&quot;&gt;Custom Hooks&lt;/a&gt;| |26|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/26_Context/26_context.md&quot;&gt;Context&lt;/a&gt;| |27|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/27_Ref/27_ref.md&quot;&gt;Ref&lt;/a&gt;| |28|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/28_project/28_project.md&quot;&gt;project&lt;/a&gt;| |29|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/29_explore/29_explore.md&quot;&gt;Explore&lt;/a&gt;| |30|&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/30_conclusions/30_conclusions.md&quot;&gt;Conclusions&lt;/a&gt;|&lt;/p&gt; 
&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Support &lt;a href=&quot;https://www.patreon.com/asabeneh?fan_landing=true&quot;&gt;&lt;em&gt;Asabeneh&lt;/em&gt;&lt;/a&gt; to create more educational materials
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.patreon.com/asabeneh?fan_landing=true&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&quot;&gt;How to Use Repo&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#star-and-fork-this-repo&quot;&gt;Star and Fork this Repo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#clone-your-fork&quot;&gt;Clone your Fork&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#create-a-new-branch&quot;&gt;Create a New Branch&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#structure-exercise-solutions&quot;&gt;Structure Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#commit-exercise-solutions&quot;&gt;Commit Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#update-your-fork-daily&quot;&gt;Update your Fork Daily&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&quot;&gt;Setup&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#install-nodejs&quot;&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#browser&quot;&gt;Browser&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-google-chrome&quot;&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#opening-google-chrome-console&quot;&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#writing-code-on-browser-console&quot;&gt;Writing Code on Browser Console&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog&quot;&gt;Console.log&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog-with-multiple-arguments&quot;&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#arithmetics&quot;&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#code-editor&quot;&gt;Code Editor&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-visual-studio-code&quot;&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-visual-studio-code&quot;&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of React programming challenge. In this challenge you will learn everything you need to use to develop a React application. In the end of the challenge you will get a 30DaysOfReact programming challenge completion certificate. In case you need help or if you would like to help others you may join the &lt;a href=&quot;https://t.me/thirtydaysofreact&quot;&gt;telegram group&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A 30DaysOfReact&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript and React developers. Welcome to 30 Days Of React. React is a JavaScript library. I enjoy using and teaching React and I hope you will do so too. In this step by step 30 Days React challenge, you will learn React which is one of most popular user interface JavaScript libraries. React can do everything that JavaScript can do. React can be used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt;. I believe you will learn quite a lot in the next 30 days and your programming and problem solving skills will also be improved significantly.&lt;/p&gt; 
&lt;p&gt;I will use conversational English and less jargons to write this challenge. The content will be continuously updated. If you find a typo or grammar mistakes don&#39;t be surprised because I don&#39;t do any proof read before I publish it. I would recommend you to focus on the main message of the challenge instead of the English and some minor mistakes. I really appreciate if you send me pull requests for improvement and remember to pull first from master before you send pull requests. Most of the images I have used in this challenge came from 30DaysOfJavaScript challenge therefore you may need to rename file names and folders 30DaysOfReact. If you are good at arrays, loops, functions, objects, functional programming, destructuring and spreading and class then you will be able to follow the challenge properly. Otherwise, I strongly recommend you to check &lt;a href=&quot;https://github.com/Asabeneh/30-Days-Of-JavaScript&quot;&gt;30DaysOfJavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before you dive into this course, you may check the &lt;a href=&quot;https://t.me/thirtydaysofreact/992&quot;&gt;review&lt;/a&gt; of 30 Days Of React.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;To get along with the challenge you need to have the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Motivation&lt;/li&gt; 
 &lt;li&gt;A computer&lt;/li&gt; 
 &lt;li&gt;Internet&lt;/li&gt; 
 &lt;li&gt;A browser&lt;/li&gt; 
 &lt;li&gt;A code editor&lt;/li&gt; 
 &lt;li&gt;HTML, CSS and JavaScript intermediate level skill&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to Use Repo&lt;/h2&gt; 
&lt;h3&gt;Star and Fork this Repo&lt;/h3&gt; 
&lt;p&gt;Star this repo to support this work and Fork the repo to create your own copy to work from.&lt;/p&gt; 
&lt;h3&gt;Clone your Fork&lt;/h3&gt; 
&lt;p&gt;You should always work directly from your forked copy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# note that an `ssh` link is used here, but an `https` link will work the same
git clone git@github.com:username/30-Days-Of-React.git
cd 30-Days-Of-React
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Create a New Branch&lt;/h3&gt; 
&lt;p&gt;To complete daily exercises, my suggestion is to create a separate branch to house your exercise folder or any other changes you make. This will keep your master branch clean at all times, which means your master will always be similar to the original master.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout -b exercise-solutions # `-b` creates the branch if it does not exist
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Structure Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;In your new branch, you can use files/folders to structure your solutions to daily exercises&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir -p solutions/day-01 # `-p` helps create nested directories
touch solutions/day-01/level1.js # touch creates a file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commit Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;Commit your solutions to your Fork&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git add solutions/day-01/level1.js
git commit -m &quot;chore: exercise level1 complete&quot;
git push origin exercise-solutions # branch `exercise-solutions` was created earlier
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update your Fork Daily&lt;/h3&gt; 
&lt;p&gt;This repo will be updated daily throughout the month. When a new day&#39;s content becomes available, you can update your forked copy with the steps below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 1. switch to master branch
git checkout master
# 2. check if your local copy has a link to original `...Asabeneh/30-Days-Of-React.git`
git remote -v
# 3. if not, add a link to original, you can choose any name for the link or use `upstream`
git remote add upstream git@github.com:Asabeneh/30-Days-Of-React.git
# 4. check again to confirm link added
git remote -v
# 5. now you can fetch updates from original repo, assuming you named this `upstream`
git fetch upstream
# 6. merge the updates to your local master branch
git merge upstream/master master
# 7. push the merged updates to your Forked copy on GitHub
git push origin master
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that the updates are only applied to the master branch. If you wish to update any other branch, repeat steps 6-7 with the branch name. See snippet below for &lt;code&gt;exercise-solutions&lt;/code&gt; branch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git merge upstream/master exercise-solutions
git push origin exercise-solutions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. In addition to that basic to intermediate level HTML, CSS and JS. If you have those, then you have everything to get started.&lt;/p&gt; 
&lt;h3&gt;Install Node.js&lt;/h3&gt; 
&lt;p&gt;You may not need node.js right now but you may need it for later. Install &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/download_node.png&quot; alt=&quot;Node download&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After downloading double click and install&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/install_node.png&quot; alt=&quot;Install node&quot;&gt;&lt;/p&gt; 
&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;asabeneh $ node -v
v12.14.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When making this tutorial I was using node version 12.14.0, but now the recommended version of node.js for download is 12.17.0.&lt;/p&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; 
&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; 
&lt;p&gt;Install &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;google chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/google_chrome.png&quot; alt=&quot;Google Chrome&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; 
&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_developer_tool.png&quot; alt=&quot;Opening chrome&quot;&gt;&lt;/p&gt; 
&lt;p&gt;To open the Chrome console using a keyboard shortcut. It is good to know the shortcut too as a JavaScript and React developer you will spend much time on a browser console and don&#39;t be lazy to open it during development.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Mac
Command+Option+J

Windows/Linux:
Ctl+Shift+J
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_chrome_console_shortcut.png&quot; alt=&quot;Opening console&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/js_code_on_chrome_console.png&quot; alt=&quot;write code on console&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; 
&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Mac
Command+Option+I

Windows:
Ctl+Shift+I
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log&lt;/h5&gt; 
&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed &#39;Hello, World&#39; as input data or argument in the console.log() function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; 
&lt;p&gt;The &lt;strong&gt;console.log()&lt;/strong&gt; function can take multiple parameters separated by comma. The syntax looks like as follows:&lt;strong&gt;console.log(param1, param2, param3)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/console_log_multipl_arguments.png&quot; alt=&quot;console log multiple arguments&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello&#39;, &#39;World&#39;, &#39;!&#39;)
console.log(&#39;HAPPY&#39;, &#39;NEW&#39;, &#39;YEAR&#39;, 2020)
console.log(&#39;Welcome&#39;, &#39;to&#39;, 30, &#39;Days&#39;, &#39;Of&#39;, &#39;JavaScript&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;console.log()&lt;/em&gt; can take multiple arguments. It is recommended to use as many console.log() prints to check what is happening in your code but don&#39;t keep all console.log() tests on your code forever. Make your life easy by keeping the browser console open.&lt;/p&gt; 
&lt;h5&gt;Comments&lt;/h5&gt; 
&lt;p&gt;We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code.In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this /* */ is also a comment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;// This is the first comment&lt;br&gt; // This is the second comment&lt;br&gt; // I am a single line comment&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;/* This is a multiline comment&lt;br&gt; Multiline comments can take multiple lines&lt;br&gt; JavaScript is the language of the web&lt;br&gt; */&lt;/p&gt; 
&lt;h5&gt;Syntax&lt;/h5&gt; 
&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is &lt;em&gt;the structure of statements in a computer language.&lt;/em&gt; Programing languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/raising_syntax_error.png&quot; alt=&quot;Error&quot;&gt;&lt;/p&gt; 
&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&quot;Hello, World!&quot;)
console.log(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;console.log()&lt;/em&gt;. If we are printing text or string using &lt;em&gt;console.log()&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick quotes. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
console.log(&#39;Hello, World!&#39;)
console.log(`Hello, World!`)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arithmetics&lt;/h4&gt; 
&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;console.log()&lt;/em&gt; on google chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. The console can directly take arguments without the &lt;strong&gt;&lt;em&gt;console.log()&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/arithmetic.png&quot; alt=&quot;Arithmetic&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(2 + 3) // Addition
console.log(3 - 2) // Subtraction
console.log(2 * 3) // Multiplication
console.log(3 / 2) // Division
console.log(3 % 2) // Modulus - finding remainder
console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Code Editor&lt;/h3&gt; 
&lt;p&gt;We can write our codes on the browser console, but it won&#39;t do for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; 
&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Visual studio code is a very popular open-source text editor. I would recommend to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode.png&quot; alt=&quot;Vscode&quot;&gt;&lt;/p&gt; 
&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; 
&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode_ui.png&quot; alt=&quot;Vscode ui&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/adding_project_to_vscode.png&quot; alt=&quot;Vscode add project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_project_on_vscode.png&quot; alt=&quot;Vscode open project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/scripts_on_vscode.png&quot; alt=&quot;script file&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vsc_live_server.png&quot; alt=&quot;Installing Live Server&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/running_script.png&quot; alt=&quot;running script&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/launched_on_new_tab.png&quot; alt=&quot;coding running&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Congratulations! You have completed the setup you need to get started with React, but before we dive into React let&#39;s do a JavaScript refresher. If you are very comfortable with JavaScript you may skip day 1 JavaScript refresher. The JavaScript refresher section is vast and it may take more than one day. From my experience people usually get stuck in React because their JavaScript knowledge is very shallow therefore to fill that gap all the necessary JavaScript features which can be used in React are covered in the JavaScript refresher section. There are many exercises but you are not required to solve them. Click &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/30-Days-Of-React/02_Day_Introduction_to_React/02_introduction_to_react.md&quot;&gt;here&lt;/a&gt; if you want skip JavaScript and jump directly into React.&lt;/p&gt; 
&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EvineDeng/jd-base</title>
      <link>https://github.com/EvineDeng/jd-base</link>
      <description>&lt;p&gt;京东薅羊毛脚本 https://github.com/LXK9301/jd_scripts 和 https://github.com/shylocks/Loon 的shell套壳工具&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;请仔细阅读 &lt;a href=&quot;https://github.com/EvineDeng/jd-base/wiki&quot;&gt;WIKI&lt;/a&gt; 和各文件注释，95%的问题都能找到答案&lt;/h2&gt; 
&lt;h2&gt;如有帮助到你，请点亮Star&lt;/h2&gt; 
&lt;h2&gt;如有二次使用，请注明来源&lt;/h2&gt; 
&lt;p&gt;本脚本是 &lt;a href=&quot;https://github.com/LXK9301/jd_scripts&quot;&gt;https://github.com/LXK9301/jd_scripts&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/shylocks/Loon&quot;&gt;https://github.com/shylocks/Loon&lt;/a&gt; 的shell套壳工具。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/LXK9301/jd_scripts&quot;&gt;LXK9301/jd_scripts&lt;/a&gt;：主要是长期任务。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/shylocks/Loon&quot;&gt;shylocks/Loon&lt;/a&gt;：主要是短期任务、一次性任务，正因为是短期的和一次性的，所以经常会有报错，报错就报错了，不要催我也不要去催&lt;a href=&quot;https://github.com/shylocks&quot;&gt;shylocks&lt;/a&gt;大佬。&lt;/p&gt; 
&lt;h2&gt;适用于以下系统&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;ArmBian/Debian/Ubuntu/OpenMediaVault/CentOS/Fedora/RHEL等Linux系统&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;OpenWRT&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Android&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;MacOS&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Docker&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;说明&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;宠汪汪赛跑助力先让用户提供的各个账号之间相互助力，助力完成你提供的所有账号以后，再给我和lxk0301大佬助力，每个账号助力后可得30g狗粮。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;将部分临时活动修改为了我的邀请码，已取得lxk0301大佬的同意。&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;更新日志&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;只记录大的更新，小修小改不记录。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;2020-01-21，增加shylocks/Loon脚本。&lt;/p&gt; 
&lt;p&gt;2021-01-15，如果本机上安装了pm2，则挂机程序以pm2启动，否则以nohup启动。&lt;/p&gt; 
&lt;h2&gt;Star趋势&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/EvineDeng/jd-base&quot;&gt;&lt;img src=&quot;https://starchart.cc/EvineDeng/jd-base.svg&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iptv-org/iptv</title>
      <link>https://github.com/iptv-org/iptv</link>
      <description>&lt;p&gt;Collection of 5000+ publicly available IPTV channels from all over the world&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPTV&lt;/h1&gt; 
&lt;p&gt;Collection of 5000+ publicly available IPTV channels from all over the world.&lt;/p&gt; 
&lt;p&gt;Internet Protocol television (IPTV) is the delivery of television content over Internet Protocol (IP) networks.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;To watch IPTV you just need to paste this link &lt;code&gt;https://iptv-org.github.io/iptv/index.m3u&lt;/code&gt; to any player which supports M3U-playlists.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/iptv-org/iptv/master/.readme/preview.png&quot; alt=&quot;VLC Network Panel&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Also you can instead use one of these playlists:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;https://iptv-org.github.io/iptv/index.country.m3u&lt;/code&gt; (grouped by country)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;https://iptv-org.github.io/iptv/index.category.m3u&lt;/code&gt; (grouped by category)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;https://iptv-org.github.io/iptv/index.language.m3u&lt;/code&gt; (grouped by language)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Or select one of the playlists from the list below.&lt;/p&gt; 
&lt;h2&gt;Playlists by category&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Playlists by language&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Playlists by country&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;For Developers&lt;/h2&gt; 
&lt;p&gt;In addition to the above methods, you can also get a list of all available channels in JSON format.&lt;/p&gt; 
&lt;p&gt;To do this, you just have to make a GET request to:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;https://iptv-org.github.io/iptv/channels.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If successful, you should get the following response:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[
  ...
  {
    &quot;name&quot;: &quot;CNN&quot;,
    &quot;logo&quot;: &quot;https://i.imgur.com/ilZJT5s.png&quot;,
    &quot;url&quot;: &quot;http://ott-cdn.ucom.am/s27/index.m3u8&quot;,
    &quot;category&quot;: &quot;News&quot;,
    &quot;language&quot;: [
      {
        &quot;code&quot;: &quot;eng&quot;,
        &quot;name&quot;: &quot;English&quot;
      }
    ],
    &quot;country&quot;: {
      &quot;code&quot;: &quot;us&quot;,
      &quot;name&quot;: &quot;United States&quot;
    },
    &quot;tvg&quot;: {
      &quot;id&quot;: &quot;cnn.us&quot;,
      &quot;name&quot;: &quot;CNN&quot;,
      &quot;url&quot;: &quot;http://epg.streamstv.me/epg/guide-usa.xml.gz&quot;
    }
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;p&gt;You can find links to various IPTV related resources in this repository &lt;a href=&quot;https://github.com/iptv-org/awesome-iptv&quot;&gt;iptv-org/awesome-iptv&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://raw.githubusercontent.com/iptv-org/iptv/master/.github/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; before sending an issue or making a pull request.&lt;/p&gt; 
&lt;h2&gt;Legal&lt;/h2&gt; 
&lt;p&gt;No video files are stored in this repository. The repository simply contains user-submitted links to publicly available video stream URLs, which to the best of our knowledge have been intentionally made publicly by the copyright holders. If any links in these playlists infringe on your rights as a copyright holder, they may be removed by sending a pull request or opening an issue.&lt;/p&gt; 
&lt;p&gt;However, note that we have &lt;strong&gt;no control&lt;/strong&gt; over the destination of the link, and just removing the link from the playlist will not remove its contents from the web. Note that linking does not directly infringe copyright because no copy is made on the site providing the link, and thus this is &lt;strong&gt;not&lt;/strong&gt; a valid reason to send a DMCA notice to GitHub. To remove this content from the web, you should contact the web host that&#39;s actually hosting the content (&lt;strong&gt;not&lt;/strong&gt; GitHub, nor the maintainers of this repository).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>signalapp/Signal-Desktop</title>
      <link>https://github.com/signalapp/Signal-Desktop</link>
      <description>&lt;p&gt;Signal — Private Messenger for Windows, Mac, and Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Signal Desktop&lt;/h1&gt; 
&lt;p&gt;Signal Desktop is an Electron application that links with Signal on &lt;a href=&quot;https://github.com/signalapp/Signal-Android&quot;&gt;Android&lt;/a&gt; or &lt;a href=&quot;https://github.com/signalapp/Signal-iOS&quot;&gt;iOS&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Install the production version: https://signal.org/download/&lt;/h2&gt; 
&lt;h2&gt;Install the beta&lt;/h2&gt; 
&lt;p&gt;You can install the beta version of Signal Desktop alongside the production version. The beta uses different data and install locations.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;Windows:&lt;/em&gt; First, download &lt;a href=&quot;https://updates.signal.org/desktop/beta.yml&quot;&gt;this file&lt;/a&gt; and look for the &lt;code&gt;url&lt;/code&gt; property that specifies the location for the latest beta installer. Download the installer by constructing a final URL that looks like this: &lt;code&gt;https://updates.signal.org/desktop/&amp;lt;installer location&amp;gt;&lt;/code&gt;. Then run the installer.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;macOS:&lt;/em&gt; First, download &lt;a href=&quot;https://updates.signal.org/desktop/beta-mac.yml&quot;&gt;this file&lt;/a&gt; and look for the &lt;code&gt;url&lt;/code&gt; property that specifies the location for the latest beta installer. Download the installer by constructing a final URL that looks like this: &lt;code&gt;https://updates.signal.org/desktop/&amp;lt;package location&amp;gt;&lt;/code&gt;. Then unzip that package and copy the &lt;code&gt;.app&lt;/code&gt; file into the &lt;code&gt;/Applications&lt;/code&gt; folder using Finder.&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;Linux:&lt;/em&gt; Follow the production instructions to set up the APT repository and run &lt;code&gt;apt install signal-desktop-beta&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Got a question?&lt;/h2&gt; 
&lt;p&gt;You can find answers to a number of frequently asked questions on our &lt;a href=&quot;https://support.signal.org/&quot;&gt;support site&lt;/a&gt;. The &lt;a href=&quot;https://community.signalusers.org/&quot;&gt;community forum&lt;/a&gt; is another good place for questions.&lt;/p&gt; 
&lt;h2&gt;Found a Bug? Have a feature request?&lt;/h2&gt; 
&lt;p&gt;Please search for any &lt;a href=&quot;https://github.com/signalapp/Signal-Desktop/issues&quot;&gt;existing issues&lt;/a&gt; that describe your bug in order to avoid duplicate submissions.&lt;/p&gt; 
&lt;h2&gt;Contributing Translations&lt;/h2&gt; 
&lt;p&gt;Interested in helping to translate Signal? Contribute here:&lt;/p&gt; 
&lt;p&gt;https://www.transifex.com/projects/p/signal-desktop&lt;/p&gt; 
&lt;h2&gt;Contributing Code&lt;/h2&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://github.com/signalapp/Signal-Desktop/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for setup instructions and guidelines for new contributors. Don&#39;t forget to sign the &lt;a href=&quot;https://signal.org/cla/&quot;&gt;CLA&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing Funds&lt;/h2&gt; 
&lt;p&gt;You can donate to Signal development through the &lt;a href=&quot;https://signal.org/donate&quot;&gt;Signal Technology Foundation&lt;/a&gt;, an independent 501c3 nonprofit.&lt;/p&gt; 
&lt;h2&gt;Cryptography Notice&lt;/h2&gt; 
&lt;p&gt;This distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country&#39;s laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See &lt;a href=&quot;http://www.wassenaar.org/&quot;&gt;http://www.wassenaar.org/&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;p&gt;The U.S. Government Department of Commerce, Bureau of Industry and Security (BIS), has classified this software as Export Commodity Control Number (ECCN) 5D002.C.1, which includes information security software using or performing cryptographic functions with asymmetric algorithms. The form and manner of this distribution makes it eligible for export under the License Exception ENC Technology Software Unrestricted (TSU) exception (see the BIS Export Administration Regulations, Section 740.13) for both object code and source code.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright 2013–2020 Signal, a 501c3 nonprofit&lt;/p&gt; 
&lt;p&gt;Licensed under the AGPLv3: https://opensource.org/licenses/agpl-3.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>snowpackjs/snowpack</title>
      <link>https://github.com/snowpackjs/snowpack</link>
      <description>&lt;p&gt;WASM-powered frontend build tool. Fast, lightweight, unbundled ESM. ✌️&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Snowpack is a lightning-fast frontend build tool, designed to leverage JavaScript&#39;s native module system (
 &lt;!-- raw HTML omitted --&gt;known as ESM
 &lt;!-- raw HTML omitted --&gt;). It is an alternative to heavier, more complex bundlers like webpack or Parcel in your development workflow.&lt;/p&gt; 
&lt;h3&gt;Key Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Develop faster, with a dev server that starts up in &lt;strong&gt;50ms or less.&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;See changes reflected &lt;a href=&quot;https://www.snowpack.dev/concepts/hot-module-replacement&quot;&gt;instantly in the browser.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Integrate your favorite bundler for a &lt;a href=&quot;https://www.snowpack.dev/concepts/build-pipeline&quot;&gt;production-optimized build.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Enjoy out-of-the-box support for &lt;a href=&quot;https://www.snowpack.dev/reference/supported-files&quot;&gt;TypeScript, JSX, CSS Modules and more.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Connect your favorite tools with &lt;a href=&quot;https://www.snowpack.dev/plugins&quot;&gt;third-party plugins.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;💁 More info at the official &lt;a href=&quot;https://snowpack.dev&quot;&gt;Snowpack website ➞&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Contributor Guidelines:&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/snowpackjs/snowpack/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;br&gt; &lt;strong&gt;License:&lt;/strong&gt; &lt;a href=&quot;https://github.com/snowpackjs/snowpack/blob/main/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>brave/brave-browser</title>
      <link>https://github.com/brave/brave-browser</link>
      <description>&lt;p&gt;Next generation Brave browser for Android, Linux, macOS, Windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Brave Browser&lt;/h1&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This repository holds the build tools needed to build the Brave desktop browser for macOS, Windows, and Linux. In particular, it fetches and syncs code from the projects we define in &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;src/brave/DEPS&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src.git&quot;&gt;Chromium&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Fetches code via &lt;code&gt;depot_tools&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;sets the branch for Chromium (ex: 65.0.3325.181).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-core&quot;&gt;brave-core&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Mounted at &lt;code&gt;src/brave&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Maintains patches for 3rd party Chromium code.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/adblock-rust&quot;&gt;adblock-rust&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Implements Brave&#39;s ad-block engine.&lt;/li&gt; 
   &lt;li&gt;Linked through &lt;a href=&quot;https://github.com/brave/adblock-rust-ffi&quot;&gt;brave/adblock-rust-ffi&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Downloads&lt;/h2&gt; 
&lt;p&gt;You can &lt;a href=&quot;https://brave.com/download&quot;&gt;visit our website&lt;/a&gt; to get the latest stable release.&lt;/p&gt; 
&lt;h2&gt;Other repositories&lt;/h2&gt; 
&lt;p&gt;For other versions of our browser, please see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS - &lt;a href=&quot;https://github.com/brave/brave-ios&quot;&gt;brave/brave-ios&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/brave/brave-browser/master/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://community.brave.com/&quot;&gt;Join the Q&amp;amp;A community&lt;/a&gt; if you&#39;d like to get more involved with Brave. You can &lt;a href=&quot;https://community.brave.com/c/support-and-troubleshooting&quot;&gt;ask for help&lt;/a&gt;, &lt;a href=&quot;https://community.brave.com/c/brave-feature-requests&quot;&gt;discuss features you&#39;d like to see&lt;/a&gt;, and a lot more. We&#39;d love to have your help so that we can continue improving Brave.&lt;/p&gt; 
&lt;p&gt;Help us translate Brave to your language by submitting translations at https://www.transifex.com/brave/brave/&lt;/p&gt; 
&lt;p&gt;Follow &lt;a href=&quot;https://twitter.com/brave&quot;&gt;@brave&lt;/a&gt; on Twitter for important news and announcements.&lt;/p&gt; 
&lt;h2&gt;Install prerequisites&lt;/h2&gt; 
&lt;p&gt;Follow the instructions for your platform:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-browser/wiki/macOS-Development-Environment&quot;&gt;macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-browser/wiki/Windows-Development-Environment&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-browser/wiki/Linux-Development-Environment&quot;&gt;Linux/Android&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Clone and initialize the repo&lt;/h2&gt; 
&lt;p&gt;Once you have the prerequisites installed, you can get the code and initialize the build environment.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:brave/brave-browser.git
cd brave-browser
npm install

# this takes 30-45 minutes to run
# the Chromium source is downloaded which has a large history
npm run init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;brave-core based android builds should use &lt;code&gt;npm run init -- --target_os=android --target_arch=arm&lt;/code&gt; (or whatever cpu type you want to build for)&lt;/p&gt; 
&lt;p&gt;You can also set the target_os and target_arch for init and build using&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm config set target_os android
npm config set target_arch arm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Build Brave&lt;/h2&gt; 
&lt;p&gt;The default build type is component.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# start the component build compile
npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To do a release build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# start the release compile
npm run build Release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;brave-core based android builds should use &lt;code&gt;npm run build -- --target_os=android --target_arch=arm&lt;/code&gt; or set the npm config variables as specified above for &lt;code&gt;init&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Build Configurations&lt;/h3&gt; 
&lt;p&gt;Running a release build with &lt;code&gt;npm run build Release&lt;/code&gt; can be very slow and use a lot of RAM especially on Linux with the Gold LLVM plugin.&lt;/p&gt; 
&lt;p&gt;To run a statically linked build (takes longer to build, but starts faster)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build -- Static
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run a debug build (Component build with is_debug=true)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build -- Debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may also want to try [[using sccache|sccache-for-faster-builds]].&lt;/p&gt; 
&lt;h2&gt;Run Brave&lt;/h2&gt; 
&lt;p&gt;To start the build:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;npm start [Release|Component|Static|Debug]&lt;/code&gt;&lt;/p&gt; 
&lt;h1&gt;Update Brave&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;npm run sync -- [--force] [--init] [--create] [brave_core_ref]&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This will attempt to stash your local changes in brave-core, but it&#39;s safer to commit local changes before running this&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;npm run sync&lt;/code&gt; will (depending on the below flags):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;📥 Update sub-projects (chromium, brave-core) to latest commit of a git ref (e.g. tag or branch)&lt;/li&gt; 
 &lt;li&gt;🤕 Apply patches&lt;/li&gt; 
 &lt;li&gt;🔄 Update gclient DEPS dependencies&lt;/li&gt; 
 &lt;li&gt;⏩ Run hooks (e.g. to perform &lt;code&gt;npm install&lt;/code&gt; on child projects)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;| flag | Description | |---|---| |&lt;code&gt;[no flags]&lt;/code&gt;|updates chromium if needed and re-applies patches. If the chromium version did not change it will only re-apply patches that have changed. Will update child dependencies &lt;strong&gt;only if any project needed updating during this script run&lt;/strong&gt; 
 &lt;!-- raw HTML omitted --&gt; **Use this if you want the script to manage keeping you up to date instead of pulling or switching branch manually. **| |&lt;code&gt;--create&lt;/code&gt;|when used with &lt;code&gt;brave_core_ref&lt;/code&gt; it will create a branch if one does not already exist| |&lt;code&gt;--force&lt;/code&gt;|updates both &lt;em&gt;Chromium&lt;/em&gt; and &lt;em&gt;brave-core&lt;/em&gt; to the latest remote commit for the current brave-core branch and the &lt;em&gt;Chromium&lt;/em&gt; ref specified in brave-browser/package.json (e.g. &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;74.0.0.103&lt;/code&gt;). Will re-apply all patches. Will force update all child dependencies 
 &lt;!-- raw HTML omitted --&gt; **Use this if you&#39;re having trouble and want to force the branches back to a known state. **| |&lt;code&gt;--init&lt;/code&gt;|force update both &lt;em&gt;Chromium&lt;/em&gt; and &lt;em&gt;brave-core&lt;/em&gt; to the versions specified in brave-browser/package.json and force updates all dependent repos - same as &lt;code&gt;npm run init&lt;/code&gt;|&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;npm run sync brave_core_ref&lt;/code&gt; to checkout the specified &lt;em&gt;brave-core&lt;/em&gt; ref and update all dependent repos including chromium if needed&lt;/p&gt; 
&lt;h3&gt;Scenarios&lt;/h3&gt; 
&lt;h4&gt;Create a new branch&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-core&amp;gt; git checkout -b branch_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-browser&amp;gt; npm run sync -- --create branch_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Checkout an existing branch or tag&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-core&amp;gt; git fetch origin
brave-core&amp;gt; git checkout [-b] branch_name
brave-core&amp;gt; npm run sync
...Updating 2 patches...
...Updating child dependencies...
...Running hooks...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-browser&amp;gt; npm run sync --create branch_name
...Updating 2 patches...
...Updating child dependencies...
...Running hooks...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update the current branch to latest remote&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-core&amp;gt; git pull
brave-core&amp;gt; npm run sync
...Updating 2 patches...
...Updating child dependencies...
...Running hooks...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Reset to latest brave-browser master, brave-core master and chromium&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-browser&amp;gt; git checkout master
brave-browser&amp;gt; git pull
brave-browser&amp;gt; npm run sync -- --init
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;When you know that DEPS didn&#39;t change, but .patch files did (quickest)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-core&amp;gt; git checkout featureB
brave-core&amp;gt; git pull
brave-browser&amp;gt; npm run apply_patches
...Applying 2 patches...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Enabling third-party APIs:&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Google Safe Browsing&lt;/strong&gt;: Get an API key with SafeBrowsing API enabled from https://console.developers.google.com/. Update the &lt;code&gt;GOOGLE_API_KEY&lt;/code&gt; environment variable with your key as per https://www.chromium.org/developers/how-tos/api-keys to enable Google SafeBrowsing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Troubleshooting&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/brave/brave-browser/wiki/Troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt; for solutions to common problems.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Marak/faker.js</title>
      <link>https://github.com/Marak/faker.js</link>
      <description>&lt;p&gt;generate massive amounts of realistic fake data in Node.js and the browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;faker.js - generate massive amounts of fake data in the browser and node.js&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Marak/faker.js/master/logo.png&quot; alt=&quot;Faker.js&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/Marak/faker.js&quot;&gt;&lt;img src=&quot;https://travis-ci.org/Marak/faker.js.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/Marak/faker.js?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/Marak/faker.js/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://badge.fury.io/js/faker&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/faker.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Marak/faker.js/master/#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/fakerjs/backers/badge.svg&quot; alt=&quot;OpenCollective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Marak/faker.js/master/#sponsors&quot;&gt;&lt;img src=&quot;https://opencollective.com/fakerjs/sponsors/badge.svg&quot; alt=&quot;OpenCollective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/Faker-js/community&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/marak/faker.js.png&quot; alt=&quot;Gitter chat&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://rawgit.com/Marak/faker.js/master/examples/browser/index.html&quot;&gt;https://rawgit.com/Marak/faker.js/master/examples/browser/index.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;script src = &quot;faker.js&quot; type = &quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
      var randomName = faker.name.findName(); // Caitlyn Kerluke
      var randomEmail = faker.internet.email(); // Rusty@arne.info
      var randomCard = faker.helpers.createCard(); // random contact card containing many properties
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Node.js&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;    var faker = require(&#39;faker&#39;);

    var randomName = faker.name.findName(); // Rowan Nikolaus
    var randomEmail = faker.internet.email(); // Kassandra.Haley@erich.biz
    var randomCard = faker.helpers.createCard(); // random contact card containing many properties
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;JSDoc API Browser&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;http://marak.github.io/faker.js/&quot;&gt;http://marak.github.io/faker.js/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;API Methods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;address 
  &lt;ul&gt; 
   &lt;li&gt;zipCode&lt;/li&gt; 
   &lt;li&gt;zipCodeByState&lt;/li&gt; 
   &lt;li&gt;city&lt;/li&gt; 
   &lt;li&gt;cityPrefix&lt;/li&gt; 
   &lt;li&gt;citySuffix&lt;/li&gt; 
   &lt;li&gt;streetName&lt;/li&gt; 
   &lt;li&gt;streetAddress&lt;/li&gt; 
   &lt;li&gt;streetSuffix&lt;/li&gt; 
   &lt;li&gt;streetPrefix&lt;/li&gt; 
   &lt;li&gt;secondaryAddress&lt;/li&gt; 
   &lt;li&gt;county&lt;/li&gt; 
   &lt;li&gt;country&lt;/li&gt; 
   &lt;li&gt;countryCode&lt;/li&gt; 
   &lt;li&gt;state&lt;/li&gt; 
   &lt;li&gt;stateAbbr&lt;/li&gt; 
   &lt;li&gt;latitude&lt;/li&gt; 
   &lt;li&gt;longitude&lt;/li&gt; 
   &lt;li&gt;direction&lt;/li&gt; 
   &lt;li&gt;cardinalDirection&lt;/li&gt; 
   &lt;li&gt;ordinalDirection&lt;/li&gt; 
   &lt;li&gt;nearbyGPSCoordinate&lt;/li&gt; 
   &lt;li&gt;timeZone&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;commerce 
  &lt;ul&gt; 
   &lt;li&gt;color&lt;/li&gt; 
   &lt;li&gt;department&lt;/li&gt; 
   &lt;li&gt;productName&lt;/li&gt; 
   &lt;li&gt;price&lt;/li&gt; 
   &lt;li&gt;productAdjective&lt;/li&gt; 
   &lt;li&gt;productMaterial&lt;/li&gt; 
   &lt;li&gt;product&lt;/li&gt; 
   &lt;li&gt;productDescription&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;company 
  &lt;ul&gt; 
   &lt;li&gt;suffixes&lt;/li&gt; 
   &lt;li&gt;companyName&lt;/li&gt; 
   &lt;li&gt;companySuffix&lt;/li&gt; 
   &lt;li&gt;catchPhrase&lt;/li&gt; 
   &lt;li&gt;bs&lt;/li&gt; 
   &lt;li&gt;catchPhraseAdjective&lt;/li&gt; 
   &lt;li&gt;catchPhraseDescriptor&lt;/li&gt; 
   &lt;li&gt;catchPhraseNoun&lt;/li&gt; 
   &lt;li&gt;bsAdjective&lt;/li&gt; 
   &lt;li&gt;bsBuzz&lt;/li&gt; 
   &lt;li&gt;bsNoun&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;database 
  &lt;ul&gt; 
   &lt;li&gt;column&lt;/li&gt; 
   &lt;li&gt;type&lt;/li&gt; 
   &lt;li&gt;collation&lt;/li&gt; 
   &lt;li&gt;engine&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;date 
  &lt;ul&gt; 
   &lt;li&gt;past&lt;/li&gt; 
   &lt;li&gt;future&lt;/li&gt; 
   &lt;li&gt;between&lt;/li&gt; 
   &lt;li&gt;recent&lt;/li&gt; 
   &lt;li&gt;soon&lt;/li&gt; 
   &lt;li&gt;month&lt;/li&gt; 
   &lt;li&gt;weekday&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;fake&lt;/li&gt; 
 &lt;li&gt;finance 
  &lt;ul&gt; 
   &lt;li&gt;account&lt;/li&gt; 
   &lt;li&gt;accountName&lt;/li&gt; 
   &lt;li&gt;routingNumber&lt;/li&gt; 
   &lt;li&gt;mask&lt;/li&gt; 
   &lt;li&gt;amount&lt;/li&gt; 
   &lt;li&gt;transactionType&lt;/li&gt; 
   &lt;li&gt;currencyCode&lt;/li&gt; 
   &lt;li&gt;currencyName&lt;/li&gt; 
   &lt;li&gt;currencySymbol&lt;/li&gt; 
   &lt;li&gt;bitcoinAddress&lt;/li&gt; 
   &lt;li&gt;litecoinAddress&lt;/li&gt; 
   &lt;li&gt;creditCardNumber&lt;/li&gt; 
   &lt;li&gt;creditCardCVV&lt;/li&gt; 
   &lt;li&gt;ethereumAddress&lt;/li&gt; 
   &lt;li&gt;iban&lt;/li&gt; 
   &lt;li&gt;bic&lt;/li&gt; 
   &lt;li&gt;transactionDescription&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;git 
  &lt;ul&gt; 
   &lt;li&gt;branch&lt;/li&gt; 
   &lt;li&gt;commitEntry&lt;/li&gt; 
   &lt;li&gt;commitMessage&lt;/li&gt; 
   &lt;li&gt;commitSha&lt;/li&gt; 
   &lt;li&gt;shortSha&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;hacker 
  &lt;ul&gt; 
   &lt;li&gt;abbreviation&lt;/li&gt; 
   &lt;li&gt;adjective&lt;/li&gt; 
   &lt;li&gt;noun&lt;/li&gt; 
   &lt;li&gt;verb&lt;/li&gt; 
   &lt;li&gt;ingverb&lt;/li&gt; 
   &lt;li&gt;phrase&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;helpers 
  &lt;ul&gt; 
   &lt;li&gt;randomize&lt;/li&gt; 
   &lt;li&gt;slugify&lt;/li&gt; 
   &lt;li&gt;replaceSymbolWithNumber&lt;/li&gt; 
   &lt;li&gt;replaceSymbols&lt;/li&gt; 
   &lt;li&gt;replaceCreditCardSymbols&lt;/li&gt; 
   &lt;li&gt;repeatString&lt;/li&gt; 
   &lt;li&gt;regexpStyleStringParse&lt;/li&gt; 
   &lt;li&gt;shuffle&lt;/li&gt; 
   &lt;li&gt;mustache&lt;/li&gt; 
   &lt;li&gt;createCard&lt;/li&gt; 
   &lt;li&gt;contextualCard&lt;/li&gt; 
   &lt;li&gt;userCard&lt;/li&gt; 
   &lt;li&gt;createTransaction&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;image 
  &lt;ul&gt; 
   &lt;li&gt;image&lt;/li&gt; 
   &lt;li&gt;avatar&lt;/li&gt; 
   &lt;li&gt;imageUrl&lt;/li&gt; 
   &lt;li&gt;abstract&lt;/li&gt; 
   &lt;li&gt;animals&lt;/li&gt; 
   &lt;li&gt;business&lt;/li&gt; 
   &lt;li&gt;cats&lt;/li&gt; 
   &lt;li&gt;city&lt;/li&gt; 
   &lt;li&gt;food&lt;/li&gt; 
   &lt;li&gt;nightlife&lt;/li&gt; 
   &lt;li&gt;fashion&lt;/li&gt; 
   &lt;li&gt;people&lt;/li&gt; 
   &lt;li&gt;nature&lt;/li&gt; 
   &lt;li&gt;sports&lt;/li&gt; 
   &lt;li&gt;technics&lt;/li&gt; 
   &lt;li&gt;transport&lt;/li&gt; 
   &lt;li&gt;dataUri&lt;/li&gt; 
   &lt;li&gt;lorempixel&lt;/li&gt; 
   &lt;li&gt;unsplash&lt;/li&gt; 
   &lt;li&gt;lorempicsum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;internet 
  &lt;ul&gt; 
   &lt;li&gt;avatar&lt;/li&gt; 
   &lt;li&gt;email&lt;/li&gt; 
   &lt;li&gt;exampleEmail&lt;/li&gt; 
   &lt;li&gt;userName&lt;/li&gt; 
   &lt;li&gt;protocol&lt;/li&gt; 
   &lt;li&gt;url&lt;/li&gt; 
   &lt;li&gt;domainName&lt;/li&gt; 
   &lt;li&gt;domainSuffix&lt;/li&gt; 
   &lt;li&gt;domainWord&lt;/li&gt; 
   &lt;li&gt;ip&lt;/li&gt; 
   &lt;li&gt;ipv6&lt;/li&gt; 
   &lt;li&gt;userAgent&lt;/li&gt; 
   &lt;li&gt;color&lt;/li&gt; 
   &lt;li&gt;mac&lt;/li&gt; 
   &lt;li&gt;password&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;lorem 
  &lt;ul&gt; 
   &lt;li&gt;word&lt;/li&gt; 
   &lt;li&gt;words&lt;/li&gt; 
   &lt;li&gt;sentence&lt;/li&gt; 
   &lt;li&gt;slug&lt;/li&gt; 
   &lt;li&gt;sentences&lt;/li&gt; 
   &lt;li&gt;paragraph&lt;/li&gt; 
   &lt;li&gt;paragraphs&lt;/li&gt; 
   &lt;li&gt;text&lt;/li&gt; 
   &lt;li&gt;lines&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;music 
  &lt;ul&gt; 
   &lt;li&gt;genre&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;name 
  &lt;ul&gt; 
   &lt;li&gt;firstName&lt;/li&gt; 
   &lt;li&gt;lastName&lt;/li&gt; 
   &lt;li&gt;middleName&lt;/li&gt; 
   &lt;li&gt;findName&lt;/li&gt; 
   &lt;li&gt;jobTitle&lt;/li&gt; 
   &lt;li&gt;gender&lt;/li&gt; 
   &lt;li&gt;prefix&lt;/li&gt; 
   &lt;li&gt;suffix&lt;/li&gt; 
   &lt;li&gt;title&lt;/li&gt; 
   &lt;li&gt;jobDescriptor&lt;/li&gt; 
   &lt;li&gt;jobArea&lt;/li&gt; 
   &lt;li&gt;jobType&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;phone 
  &lt;ul&gt; 
   &lt;li&gt;phoneNumber&lt;/li&gt; 
   &lt;li&gt;phoneNumberFormat&lt;/li&gt; 
   &lt;li&gt;phoneFormats&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;random 
  &lt;ul&gt; 
   &lt;li&gt;number&lt;/li&gt; 
   &lt;li&gt;float&lt;/li&gt; 
   &lt;li&gt;arrayElement&lt;/li&gt; 
   &lt;li&gt;arrayElements&lt;/li&gt; 
   &lt;li&gt;objectElement&lt;/li&gt; 
   &lt;li&gt;uuid&lt;/li&gt; 
   &lt;li&gt;boolean&lt;/li&gt; 
   &lt;li&gt;word&lt;/li&gt; 
   &lt;li&gt;words&lt;/li&gt; 
   &lt;li&gt;image&lt;/li&gt; 
   &lt;li&gt;locale&lt;/li&gt; 
   &lt;li&gt;alpha&lt;/li&gt; 
   &lt;li&gt;alphaNumeric&lt;/li&gt; 
   &lt;li&gt;hexaDecimal&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;system 
  &lt;ul&gt; 
   &lt;li&gt;fileName&lt;/li&gt; 
   &lt;li&gt;commonFileName&lt;/li&gt; 
   &lt;li&gt;mimeType&lt;/li&gt; 
   &lt;li&gt;commonFileType&lt;/li&gt; 
   &lt;li&gt;commonFileExt&lt;/li&gt; 
   &lt;li&gt;fileType&lt;/li&gt; 
   &lt;li&gt;fileExt&lt;/li&gt; 
   &lt;li&gt;directoryPath&lt;/li&gt; 
   &lt;li&gt;filePath&lt;/li&gt; 
   &lt;li&gt;semver&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;time 
  &lt;ul&gt; 
   &lt;li&gt;recent&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;unique&lt;/li&gt; 
 &lt;li&gt;vehicle 
  &lt;ul&gt; 
   &lt;li&gt;vehicle&lt;/li&gt; 
   &lt;li&gt;manufacturer&lt;/li&gt; 
   &lt;li&gt;model&lt;/li&gt; 
   &lt;li&gt;type&lt;/li&gt; 
   &lt;li&gt;fuel&lt;/li&gt; 
   &lt;li&gt;vin&lt;/li&gt; 
   &lt;li&gt;color&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Faker.fake()&lt;/h3&gt; 
&lt;p&gt;faker.js contains a super useful generator method &lt;code&gt;Faker.fake&lt;/code&gt; for combining faker API methods using a mustache string format.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(faker.fake(&quot;{{name.lastName}}, {{name.firstName}} {{name.suffix}}&quot;));
// outputs: &quot;Marks, Dean Sr.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will interpolate the format string with the value of methods &lt;code&gt;name.lastName()&lt;/code&gt;, &lt;code&gt;name.firstName()&lt;/code&gt;, and &lt;code&gt;name.suffix()&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Localization&lt;/h2&gt; 
&lt;p&gt;As of version &lt;code&gt;v2.0.0&lt;/code&gt; faker.js has support for multiple localities.&lt;/p&gt; 
&lt;p&gt;The default language locale is set to English.&lt;/p&gt; 
&lt;p&gt;Setting a new locale is simple:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// sets locale to de
faker.locale = &quot;de&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;az&lt;/li&gt; 
 &lt;li&gt;ar&lt;/li&gt; 
 &lt;li&gt;cz&lt;/li&gt; 
 &lt;li&gt;de&lt;/li&gt; 
 &lt;li&gt;de_AT&lt;/li&gt; 
 &lt;li&gt;de_CH&lt;/li&gt; 
 &lt;li&gt;en&lt;/li&gt; 
 &lt;li&gt;en_AU&lt;/li&gt; 
 &lt;li&gt;en_AU_ocker&lt;/li&gt; 
 &lt;li&gt;en_BORK&lt;/li&gt; 
 &lt;li&gt;en_CA&lt;/li&gt; 
 &lt;li&gt;en_GB&lt;/li&gt; 
 &lt;li&gt;en_IE&lt;/li&gt; 
 &lt;li&gt;en_IND&lt;/li&gt; 
 &lt;li&gt;en_US&lt;/li&gt; 
 &lt;li&gt;en_ZA&lt;/li&gt; 
 &lt;li&gt;es&lt;/li&gt; 
 &lt;li&gt;es_MX&lt;/li&gt; 
 &lt;li&gt;fa&lt;/li&gt; 
 &lt;li&gt;fi&lt;/li&gt; 
 &lt;li&gt;fr&lt;/li&gt; 
 &lt;li&gt;fr_CA&lt;/li&gt; 
 &lt;li&gt;fr_CH&lt;/li&gt; 
 &lt;li&gt;ge&lt;/li&gt; 
 &lt;li&gt;id_ID&lt;/li&gt; 
 &lt;li&gt;it&lt;/li&gt; 
 &lt;li&gt;ja&lt;/li&gt; 
 &lt;li&gt;ko&lt;/li&gt; 
 &lt;li&gt;nb_NO&lt;/li&gt; 
 &lt;li&gt;nep&lt;/li&gt; 
 &lt;li&gt;nl&lt;/li&gt; 
 &lt;li&gt;nl_BE&lt;/li&gt; 
 &lt;li&gt;pl&lt;/li&gt; 
 &lt;li&gt;pt_BR&lt;/li&gt; 
 &lt;li&gt;pt_PT&lt;/li&gt; 
 &lt;li&gt;ro&lt;/li&gt; 
 &lt;li&gt;ru&lt;/li&gt; 
 &lt;li&gt;sk&lt;/li&gt; 
 &lt;li&gt;sv&lt;/li&gt; 
 &lt;li&gt;tr&lt;/li&gt; 
 &lt;li&gt;uk&lt;/li&gt; 
 &lt;li&gt;vi&lt;/li&gt; 
 &lt;li&gt;zh_CN&lt;/li&gt; 
 &lt;li&gt;zh_TW&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Individual Localization Packages&lt;/h3&gt; 
&lt;p&gt;faker.js supports incremental loading of locales.&lt;/p&gt; 
&lt;p&gt;By default, requiring &lt;code&gt;faker&lt;/code&gt; will include &lt;em&gt;all&lt;/em&gt; locale data.&lt;/p&gt; 
&lt;p&gt;In a production environment, you may only want to include the locale data for a specific set of locales.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// loads only de locale
var faker = require(&#39;faker/locale/de&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setting a randomness seed&lt;/h2&gt; 
&lt;p&gt;If you want consistent results, you can set your own seed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;faker.seed(123);

var firstRandom = faker.random.number();

// Setting the seed again resets the sequence.
faker.seed(123);

var secondRandom = faker.random.number();

console.log(firstRandom === secondRandom);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install .
make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can view a code coverage report generated in coverage/lcov-report/index.html.&lt;/p&gt; 
&lt;h2&gt;Building faker.js&lt;/h2&gt; 
&lt;p&gt;faker uses &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp&lt;/a&gt; to automate its build process. Each build operation is a separate task which can be run independently.&lt;/p&gt; 
&lt;h3&gt;Browser Bundle&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm run browser
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building JSDocs&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://jsdoc.app/&quot;&gt;JSDOC&lt;/a&gt; v3 HTML API documentation&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm run jsdoc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building ReadMe&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;ReadMe.md&lt;/code&gt; file for &lt;code&gt;faker.js&lt;/code&gt; is automatically generated and should not be modified directly. All updates to &lt;code&gt;ReadMe.md&lt;/code&gt; should be performed in &lt;code&gt;./build/src/docs.md&lt;/code&gt; and then the build script should be run.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm run readme
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Version Release Schedule&lt;/h2&gt; 
&lt;p&gt;faker.js is a popular project used by many organizations and individuals in production settings. Major and Minor version releases are generally on a monthly schedule. Bugs fixes are addressed by severity and fixed as soon as possible.&lt;/p&gt; 
&lt;p&gt;If you require the absolute latest version of &lt;code&gt;faker.js&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch @ &lt;a href=&quot;http://github.com/marak/faker.js/&quot;&gt;http://github.com/marak/faker.js/&lt;/a&gt; should always be up to date and working.&lt;/p&gt; 
&lt;h2&gt;Maintainer&lt;/h2&gt; 
&lt;h4&gt;Marak Squires&lt;/h4&gt; 
&lt;p&gt;faker.js - Copyright (c) 2020 Marak Squires www.marak.com http://github.com/marak/faker.js/&lt;/p&gt; 
&lt;p&gt;faker.js was inspired by and has used data definitions from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stympy/faker/&quot;&gt;https://github.com/stympy/faker/&lt;/a&gt; - Copyright (c) 2007-2010 Benjamin Curtis&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://search.cpan.org/%7Ejasonk/Data-Faker-0.07/&quot;&gt;http://search.cpan.org/~jasonk/Data-Faker-0.07/&lt;/a&gt; - Copyright 2004-2005 by Jason Kohles&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;h2&gt;Backers&lt;/h2&gt; 
&lt;p&gt;Support us with a monthly donation and help us continue our activities. [&lt;a href=&quot;https://opencollective.com/fakerjs#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Become a sponsor and get your logo on our README on Github with a link to your site. [&lt;a href=&quot;https://opencollective.com/fakerjs#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cypress-io/cypress</title>
      <link>https://github.com/cypress-io/cypress</link>
      <description>&lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Cypress?&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/cypress&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/cypress.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Install Cypress for Mac, Linux, or Windows, then &lt;a href=&quot;https://docs.cypress.io/guides/getting-started/installing-cypress.html&quot;&gt;get started&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1271364/31740846-7bf607f0-b420-11e7-855f-41c996040d31.gif&quot; alt=&quot;installing-cli e1693232&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/CONTRIBUTING.md&quot;&gt;Contributing Guideline&lt;/a&gt; which explains repo organization, linting, testing, and other steps.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg&quot; alt=&quot;license&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;Let the world know your project is using Cypress.io to test with this cool badge&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.cypress.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg&quot; alt=&quot;Cypress.io&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>strapi/strapi</title>
      <link>https://github.com/strapi/strapi</link>
      <description>&lt;p&gt;🚀 Open source Node.js Headless CMS to easily build customisable APIs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Strapi is a free and open-source headless CMS delivering your content anywhere you need.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Keep control over your data&lt;/strong&gt;. With Strapi, you know where your data is stored, and you keep full control at all times.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Self-hosted&lt;/strong&gt;. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Database agnostic&lt;/strong&gt;. You can choose the database you prefer. Strapi works with SQL &amp;amp; NoSQL databases: MongoDB, PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;Read the Getting Started tutorial
 &lt;!-- raw HTML omitted --&gt; or follow the steps below:&lt;/p&gt; 
&lt;h3&gt;⏳ Installation&lt;/h3&gt; 
&lt;p&gt;Install Strapi with this &lt;strong&gt;Quickstart&lt;/strong&gt; command to create a Strapi project instantly:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Use &lt;strong&gt;yarn&lt;/strong&gt; to install the Strapi project (recommended). &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/install/&quot;&gt;Install yarn with these docs&lt;/a&gt;.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn create strapi-app my-project --quickstart
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Use npm/npx to install the Strapi project.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-strapi-app my-project --quickstart
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command generates a brand new project with the default features (authentication, permissions, content management, content type builder &amp;amp; file upload). The &lt;strong&gt;Quickstart&lt;/strong&gt; command installs Strapi using a &lt;strong&gt;SQLite&lt;/strong&gt; database which is used for prototyping in development.&lt;/p&gt; 
&lt;p&gt;Enjoy 🎉&lt;/p&gt; 
&lt;h3&gt;🖐 Requirements&lt;/h3&gt; 
&lt;p&gt;Complete installation requirements can be found in the documentation under 
 &lt;!-- raw HTML omitted --&gt;Installation Requirements
 &lt;!-- raw HTML omitted --&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Supported operating systems&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ubuntu LTS/Debian 9.x&lt;/li&gt; 
 &lt;li&gt;CentOS/RHEL 8&lt;/li&gt; 
 &lt;li&gt;macOS Mojave&lt;/li&gt; 
 &lt;li&gt;Windows 10&lt;/li&gt; 
 &lt;li&gt;Docker - &lt;a href=&quot;https://github.com/strapi/strapi-docker&quot;&gt;Docker-Repo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NodeJS &amp;gt;= 10.16 &amp;lt;=14&lt;/li&gt; 
 &lt;li&gt;NPM &amp;gt;= 6.x&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MongoDB &amp;gt;= 3.6&lt;/li&gt; 
 &lt;li&gt;MySQL &amp;gt;= 5.6&lt;/li&gt; 
 &lt;li&gt;MariaDB &amp;gt;= 10.1&lt;/li&gt; 
 &lt;li&gt;PostgreSQL &amp;gt;= 10&lt;/li&gt; 
 &lt;li&gt;SQLite &amp;gt;= 3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;We recommend always using the latest version of Strapi to start your new projects&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Modern Admin Panel:&lt;/strong&gt; Elegant, entirely customizable and a fully extensible admin panel.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure by default:&lt;/strong&gt; Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Plugins Oriented:&lt;/strong&gt; Install the auth system, content management, custom plugins, and more, in seconds.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blazing Fast:&lt;/strong&gt; Built on top of Node.js, Strapi delivers amazing performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Front-end Agnostic:&lt;/strong&gt; Use any front-end framework (React, Vue, Angular, etc.), mobile apps or even IoT.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful CLI:&lt;/strong&gt; Scaffold projects and APIs on the fly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQL &amp;amp; NoSQL databases:&lt;/strong&gt; Works with MongoDB, PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://strapi.io/overview&quot;&gt;See more on our website&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href=&quot;https://raw.githubusercontent.com/strapi/strapi/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; before submitting a Pull Request to the project.&lt;/p&gt; 
&lt;h2&gt;Community support&lt;/h2&gt; 
&lt;p&gt;For general help using Strapi, please refer to &lt;a href=&quot;https://strapi.io/documentation/&quot;&gt;the official Strapi documentation&lt;/a&gt;. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://slack.strapi.io&quot;&gt;Slack&lt;/a&gt; (For live discussion with the Community and Strapi team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/strapi/strapi&quot;&gt;GitHub&lt;/a&gt; (Bug reports, Contributions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forum.strapi.io&quot;&gt;Community Forum&lt;/a&gt; (Questions and Discussions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://academy.strapi.io&quot;&gt;Academy&lt;/a&gt; (Learn the fundamentals of Strapi)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://portal.productboard.com/strapi/tabs/2-under-consideration&quot;&gt;ProductBoard&lt;/a&gt; (Roadmap, Feature requests)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/strapijs&quot;&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/Strapi-616063331867161&quot;&gt;Facebook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/strapi&quot;&gt;YouTube Channel&lt;/a&gt; (Learn from Video Tutorials)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migration&lt;/h2&gt; 
&lt;p&gt;Follow our &lt;a href=&quot;https://strapi.io/documentation/developer-docs/latest/migration-guide/#migrations-guides&quot;&gt;migration guides&lt;/a&gt; on the documentation to keep your projects up-to-date.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://portal.productboard.com/strapi&quot;&gt;roadmap&lt;/a&gt; to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See our dedicated &lt;a href=&quot;https://github.com/strapi/documentation&quot;&gt;repository&lt;/a&gt; for the Strapi documentation, or view our documentation live:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://strapi.io/documentation/developer-docs/latest&quot;&gt;Developer docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://strapi.io/documentation/user-docs/latest&quot;&gt;User docs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Try live demo&lt;/h2&gt; 
&lt;p&gt;See for yourself what&#39;s under the hood by getting access to a &lt;a href=&quot;https://strapi.io/demo&quot;&gt;hosted Strapi project&lt;/a&gt; with sample data.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/strapi/strapi/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for licensing information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavisPeng/taojinbi</title>
      <link>https://github.com/JavisPeng/taojinbi</link>
      <description>&lt;p&gt;淘宝淘金币自动执行脚本，包含蚂蚁森林收取能量，年货节浇灌福气，解放你的双手&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;taobao_taojinbi&lt;/h1&gt; 
&lt;p&gt;本项目主要用于自动执行淘金币相关任务，获取金币后参与淘金币夺宝活动(可下注抢茅台)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;后续代码持续更新，转载引用请注明出处，你的☆就是我的动力&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;测试环境&lt;/h1&gt; 
&lt;p&gt;华为P30Pro + &lt;a href=&quot;https://share.weiyun.com/owu3tBNr&quot;&gt;autojs4.1.1&lt;/a&gt; + &lt;a href=&quot;https://www.wandoujia.com/apps/32267/history&quot;&gt;淘宝v9.18.0&lt;/a&gt; (&lt;em&gt;华为P30Pro屏幕大小为1080x2340,此分辨率对特殊任务支持最佳&lt;/em&gt;)&lt;/p&gt; 
&lt;h1&gt;脚本功能列表&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;自动执行淘金币所有浏览任务&lt;/li&gt; 
 &lt;li&gt;自动执行[逛好店领一大波金币]任务 (包含浏览10s+10金币任务/收藏店铺+10金币)&lt;/li&gt; 
 &lt;li&gt;自动执行[逛蚂蚁庄园喂小鸡]任务&lt;/li&gt; 
 &lt;li&gt;自动执行[签到领取话费充值金]任务&lt;/li&gt; 
 &lt;li&gt;自动执行[淘宝成就签到任务]&lt;/li&gt; 
 &lt;li&gt;自动执行[淘宝人生逛街领能量]掷色子任务 (需截图权限)&lt;/li&gt; 
 &lt;li&gt;自动执行[逛农场领免费水果]任务 (需截图权限)&lt;/li&gt; 
 &lt;li&gt;自动执行[蚂蚁森林]任务,收取好友能量 (需截图权限)&lt;/li&gt; 
 &lt;li&gt;自动执行[淘宝通知权限任务]任务（在华为机上测试通过）&lt;/li&gt; 
 &lt;li&gt;自动执行[年货节浇灌福气]任务&lt;/li&gt; 
 &lt;li&gt;自动执行[淘金币夺宝]任务&lt;/li&gt; 
 &lt;li&gt;自动执行[天天步数红包赛]任务&lt;/li&gt; 
 &lt;li&gt;浏览任务完成立即返回，无需额外等待&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;年货节浇灌福气&quot;任务升级只加0.02%的问题，有如下2种解决方法：&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;使用淘宝执行任务后关闭autojs程序，清除淘宝的缓冲和数据，重新登录浇灌升级，本人实测可行&lt;/li&gt; 
 &lt;li&gt;使用淘宝执行任务后关闭autojs程序，到天猫浇灌升级，本人实测可行，推荐使用&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;更新日志&lt;/h1&gt; 
&lt;p&gt;v1.5.5 2021年1月22日20:04:48&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决消消乐返回界面调整为“暂时离开和集福气”而导致无法返回到主界面问题&lt;/li&gt; 
 &lt;li&gt;待会发布[taojinbiv1.5.5]apk版，支持在线秒检测并更新到最新版本&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.4&lt;/strong&gt; 2021年1月21日11:54:11&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复年货节浇灌福气运行错误问题，暂未发现升级才加0.02%的原因，实在不行请重装最新淘宝手动执吧&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.3&lt;/strong&gt; 2021年1月20日20:46:10&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;淘宝v9.0.0测试年货节浇灌福气任务&lt;/li&gt; 
 &lt;li&gt;新版年货节浇灌福气任务默认执行2次，解决漏掉新刷新的简单任务(不同的淘宝用户，特殊任务不一样)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.2&lt;/strong&gt; 2021年1月19日19:59:32&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复掷骰子任务-弹窗礼包问题&lt;/li&gt; 
 &lt;li&gt;[去年货节浇灌福气]界面布局更新，添加了[消消乐任务]，非P30Pro手机建议单独执行[去年货节浇灌福气]全任务&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.1&lt;/strong&gt; 2021年1月18日20:34:58&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决[年货节浇灌福气]任务中&quot;集福气&quot;按钮的text变化问题&lt;/li&gt; 
 &lt;li&gt;恢复[加载配置]按钮,解决脚本最新配置和用户配置不匹配问题(用户自定义配置后，请和最新脚本进行比对后再加载，否则可能会导致新脚本一些功能因为旧的配置而无法使用)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.0&lt;/strong&gt; 2021年1月17日19:28:30&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;更新UI界面，用户可以在主主界面选择执行选定的任务，在配置界面配置对应的任务关键字,用户可自行修改(&lt;strong&gt;解决活动经常更换名称问题&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;新增[年货节浇灌福气]任务,用户可在淘金币列表选择中勾选[年货节浇灌福气]任务进行执行，若未勾选[执行福气全部子任务]，只会执行[年货节浇灌福气]的签到任务和施肥;用户也可单独执行该任务(在程序主界面下拉可见，单独执行默认运行全部子任务)&lt;/li&gt; 
 &lt;li&gt;添加[保存当前配置]按钮用于保存当前用户的选择项和关键字配置信息，下一次启动默认自动加载上传保存的配置信息&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.4.2&lt;/strong&gt; 2021年1月14日19:19:03&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复直播活动更新后无法返回问题&lt;/li&gt; 
 &lt;li&gt;延长点击关注店铺时长，解决网络卡顿导致关注不成功问题&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.4.2]apk版，&lt;strong&gt;请提前为程序开启无障碍服务和悬浮框权限&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;由于个人问题(年后换工作)，以后将不定期维护该项目，望谅解&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.4.1&lt;/strong&gt; 2021年1月12日19:46:43&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复[淘金币夺宝任务]下注太快无奖励问题&lt;/li&gt; 
 &lt;li&gt;添加[保存选择项状态]按钮用于保存当前用户的任务选择状态&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.4.0&lt;/strong&gt; 2021年1月11日20:30:34&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;更新UI界面，所有特殊任务都在列表中可选择执行&lt;/li&gt; 
 &lt;li&gt;添加[淘金币夺宝任务],需花费100淘金币，做人还是需要点理想，说不定就中了呢&lt;/li&gt; 
 &lt;li&gt;新增[直接启动支付宝蚂蚁森林偷取好友能量]按钮,需提前添加蚂蚁森林到首页&lt;/li&gt; 
 &lt;li&gt;新增[取消所有关注的店铺]按钮用于取消所有关注的店铺，&lt;strong&gt;慎用&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.11&lt;/strong&gt; 2021年1月10日09:36:43&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;淘宝升级到v9.18.0&lt;/li&gt; 
 &lt;li&gt;修复淘宝新版本[天天红包赛]弹窗问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.10&lt;/strong&gt; 2021年1月7日19:50:28&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复[关注+10]单击问题，感谢Sirius2s的提醒&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.3.10]apk版&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.9&lt;/strong&gt; 2021年1月3日21:58:23&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;删掉淘金币夺宝任务(下注才能获取能量)，不知道你们中过没有，反正我全输光了- -&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.8&lt;/strong&gt; 2020年12月29日19:42:37&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;更新[淘金币夺宝任务]的关键字名称&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.7&lt;/strong&gt; 2020年12月29日19:42:37&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;应网友请求，添加[去天猫APP领红包任务]到任务选择栏中&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.6&lt;/strong&gt; 2020年12月24日19:22:57&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决消消乐完成消除回到主界面，出现[再玩一次]弹窗问题&lt;/li&gt; 
 &lt;li&gt;淘金币auto.js-v1.3.6全任务视频演示：https://www.bilibili.com/video/BV1Dt4y1k7xq/&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.5&lt;/strong&gt; 2020年12月23日20:13:04&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决[淘宝吃货任务]弹窗导致无法返回问题&lt;/li&gt; 
 &lt;li&gt;解决[消消乐任务]弹窗导致无法返回问题&lt;/li&gt; 
 &lt;li&gt;在[开启淘宝通知权限任务]中暂时关闭终端显示&lt;/li&gt; 
 &lt;li&gt;删除了活力中心脚本，有需要的可在&lt;a href=&quot;https://github.com/JavisPeng/taojinbi/tree/v1.3.4&quot;&gt;v1.3.4页面&lt;/a&gt;下载&lt;/li&gt; 
 &lt;li&gt;所有任务默认检查执行3次，每次执行后检查是否在淘金币列表界面，不在则跳转到该界面，防止back函数导致乱跳转问题&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.3.5]apk版&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.4&lt;/strong&gt; 2020年12月22日19:46:20&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;淘金币新增[淘宝通知权限任务],开启后会再执行关闭 (默认在通知关闭下才有该任务,在华为机上测试通过)&lt;/li&gt; 
 &lt;li&gt;查找‘赚金币’按钮时间由3秒修改为8秒，兼容部分机型卡顿问题&lt;/li&gt; 
 &lt;li&gt;个人精力有限，今后只重点维护淘金币任务，因而把活力中心代码分离出来(huoli.js)，后期不在维护该脚本，有需要的可在&lt;a href=&quot;https://github.com/JavisPeng/taojinbi/tree/v1.3.4&quot;&gt;v1.3.4页面&lt;/a&gt;下载&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;至此淘宝币全任务在P30Pro上测试通过&lt;/strong&gt;，当然不包含特定时间刷的任务和下单任务&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.3&lt;/strong&gt; 2020年12月21日19:50:31&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;用户可在文件开头中定义，需跳过不执行的简单浏览任务主题关键字&lt;/li&gt; 
 &lt;li&gt;用户可在文件开头中定义[去天猫APP领红包任务]是否执行&lt;/li&gt; 
 &lt;li&gt;解决活力中心[1000步换红包任务]执行失败问题&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.3.3]apk版&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.2&lt;/strong&gt; 2020年12月20日11:44:35&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复淘金币在任务列表中继续返回导致任务结束问题,&lt;/li&gt; 
 &lt;li&gt;淘宝人生掷色子任务中，添加了自动领取包裹和奖励，解决任务卡住问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.1&lt;/strong&gt; 2020年12月19日13:18:57&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;淘金币任务列表新增[100淘金币夺宝任务]&lt;/li&gt; 
 &lt;li&gt;解决活力中心训练时无法单击关闭按钮问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.0&lt;/strong&gt; 2020年12月18日19:56:49&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;应网友请求，附加&lt;strong&gt;活力中心任务&lt;/strong&gt;(包括自动浏览任务和自动点击训练按钮),默认在淘金币完成后执行，若只执行活力中心任务,可在main函数注释掉taojinbi_task()这行&lt;/li&gt; 
 &lt;li&gt;整合特殊任务[逛直播间任务]到简单浏览任务中&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.2.3&lt;/strong&gt; 2020年12月17日20:50:41&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;消消乐和蚂蚁森林任务中暂时隐藏终端,对应任务结束后再显示 (不隐藏可能收取不到全部能量)&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.2.3]apk版&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.2.2&lt;/strong&gt; 2020年12月16日19:36:39&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;新增蚂蚁森林任务，支持自定义&#39;找能量&#39;收取好友能量的次数&lt;/li&gt; 
 &lt;li&gt;解决&#39;天猫领红包任务&#39;，取消了&#39;继续逛逛&#39;按钮问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.2.1&lt;/strong&gt; 2020年12月14日19:57:06&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;新增消消乐任务，需截图权限，目前在测试P30Pro上测试通过&lt;/li&gt; 
 &lt;li&gt;考虑到不同的机型，某些需截图权限的特殊任务可能会不兼容，启动时添加了可选的额外执行的任务： [&#39;淘宝人生掷色子任务&#39;, &#39;逛农场领免费水果任务&#39;, &#39;消消乐任务&#39;]&lt;/li&gt; 
 &lt;li&gt;添加了APK发布版，用户可直接运行&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.2.0&lt;/strong&gt; 2020年12月13日20:52:53&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;简化代码删减了双12的部分&lt;/li&gt; 
 &lt;li&gt;对需要截图功能的[淘宝人生逛街领能量]和[逛农场领免费水果] 设置了是否执行的全局变量，用户可选择是否执行该任务&lt;/li&gt; 
 &lt;li&gt;任务执行等待时间设置为全局变量，默认为15秒&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.4&lt;/strong&gt; 2020年12月12日21:04:28&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复淘金币看直播任务，有时不能返回问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.3&lt;/strong&gt; 2020年12月11日20:13:13&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复天猫app没安装，等待过长问题&lt;/li&gt; 
 &lt;li&gt;修复特殊任务后，新出简单浏览任务遗漏问题&lt;/li&gt; 
 &lt;li&gt;无法修复&#39;双12红包兑现红包太少问题&#39;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.2&lt;/strong&gt; 2020年12月10日20:38:12&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决淘金币执行过程中会返回到主页面问题(本质是按钮单击没有生效)&lt;/li&gt; 
 &lt;li&gt;把淘宝人生、逛好店任务、喂小鸡任务、逛直播间任务添加到特殊任务中&lt;/li&gt; 
 &lt;li&gt;解决芭芭农场双12任务后，淘金币没有肥料问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.1&lt;/strong&gt; 2020年12月9日19:36:44&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复逛新加任务不能获取问题&lt;/li&gt; 
 &lt;li&gt;某些任务(拍照识图)只在最新版淘宝中才存在,当前淘宝已换成最新版v9.16.0,经测试金币还是同样的奖励&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.0&lt;/strong&gt; 2020年12月8日19:51:51&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;代码基本重构，为适应不同机型，添加了截图查找功能(&lt;strong&gt;需授予截图权限&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;添加任务运行选择功能，可单独执行任务&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;使用说明&lt;/h1&gt; 
&lt;h2&gt;Auto.js中运行&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;下载 &lt;a href=&quot;https://share.weiyun.com/owu3tBNr&quot;&gt;autojs4.1.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;在电脑端下载taojinbi.js文件，使用电脑端qq或微信发给手机端&lt;/li&gt; 
 &lt;li&gt;导入js文件到autojs(可直接在微信/QQ/文件浏览中选择使用其他方式打开)&lt;/li&gt; 
 &lt;li&gt;在autojs中开启无障碍服务并点击运行导入的js文件&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;auto.js视频运行教程:https://www.bilibili.com/video/BV1Dt4y1k7xq/&lt;/p&gt; 
&lt;h2&gt;淘金币app运行&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;在&lt;a href=&quot;https://github.com/JavisPeng/taojinbi/releases&quot;&gt;release页面&lt;/a&gt;下载taojinbi.apk并安装&lt;/li&gt; 
 &lt;li&gt;为淘金币开启无障碍服务和悬浮框权限(悬浮框权限在华为手机：设置-&amp;gt;应用-&amp;gt;应用功能-&amp;gt;淘金币-&amp;gt;显示在其他应用的上层-&amp;gt;允许)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;淘金币app视频运行教程：https://www.bilibili.com/video/BV1kp4y1q7CD/&lt;/p&gt; 
&lt;h1&gt;免责声明&lt;/h1&gt; 
&lt;p&gt;为本人Auto.js学习交流的开源非营利项目，仅作为程序员之间相互学习交流之用，使用需严格遵守开源许可协议。严禁用于商业用途，禁止使用进行任何盈利活动。对一切非法使用所产生的后果，本人概不负责。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>adrianhajdin/project_mern_memories</title>
      <link>https://github.com/adrianhajdin/project_mern_memories</link>
      <description>&lt;p&gt;This is a code repository for the corresponding video tutorial. Using React, Node.js, Express &amp; MongoDB you&#39;ll learn how to build a Full Stack MERN Application - from start to finish. The App is called &quot;Memories&quot; and it is a simple social media app that allows users to post interesting events that happened in their lives.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Memories&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/Z8Y0CJv/Screenshot-2020-10-30-at-11-10-04.png&quot; alt=&quot;Memories&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;This is a code repository for the corresponding video tutorial - https://youtube.com/playlist?list=PL6QREj8te1P7VSwhrMf3D3Xt4V6_SRkhu.&lt;/p&gt; 
&lt;p&gt;Using React, Node.js, Express &amp;amp; MongoDB you&#39;ll learn how to build a Full Stack MERN Application - from start to finish. The App is called &quot;Memories&quot; and it is a simple social media app that allows users to post interesting events that happened in their lives.&lt;/p&gt; 
&lt;p&gt;By the end of this video, you will have a strong understanding of how the MERN Stack works.&lt;/p&gt; 
&lt;p&gt;Setup:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;run &lt;code&gt;npm i &amp;amp;&amp;amp; npm start&lt;/code&gt; for both client and server side to start the app&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>jerrykuku/luci-app-jd-dailybonus</title>
      <link>https://github.com/jerrykuku/luci-app-jd-dailybonus</link>
      <description>&lt;p&gt;Luci for JD dailybonus Script&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;luci-app-jd-dailybonus&lt;/h1&gt; 
&lt;p&gt;Luci for JD dailybonus Script for Openwrt&lt;br&gt; 一个运行在openwrt下的京东签到插件。&lt;/p&gt; 
&lt;h3&gt;Update Log 2021-01-20&lt;/h3&gt; 
&lt;h4&gt;Updates&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;UPD: 大量代码重构，版本更新到1.0.0&lt;/li&gt; 
 &lt;li&gt;UPD: 采用扫码获取cookie(基于Lua 脚本实现)&lt;/li&gt; 
 &lt;li&gt;UPD: 增加超时时间设置&lt;/li&gt; 
 &lt;li&gt;UPD: 取消了当失败时推送消息的设定每次都会推送 包括手动&lt;/li&gt; 
 &lt;li&gt;UPD: 增加telegram推送&lt;/li&gt; 
 &lt;li&gt;UPD: 无需修改js脚本设置cookie，才用本地json缓存来读取配置文件&lt;/li&gt; 
 &lt;li&gt;UPD: 签到时间拆分为小时+分钟&lt;/li&gt; 
 &lt;li&gt;UPD: 取消语言文件，默认为中文&lt;/li&gt; 
 &lt;li&gt;UPD: 兼容性做了适配，兼容boorstrap&lt;/li&gt; 
 &lt;li&gt;UPD: 默认JS脚本更新到v1.90&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;详情见&lt;a href=&quot;https://raw.githubusercontent.com/jerrykuku/luci-app-jd-dailybonus/master/relnotes.txt&quot;&gt;具体日志&lt;/a&gt;。&lt;/p&gt; 
&lt;h3&gt;介绍&lt;/h3&gt; 
&lt;p&gt;使用NobyDa “京东多合一签到脚本”为基础，移植到openwrt实现。&lt;/p&gt; 
&lt;h3&gt;如何使用&lt;/h3&gt; 
&lt;p&gt;假设你的lean openwrt（最新版本19.07） 在 lede 目录下&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd lede/package/lean/  

git clone https://github.com/jerrykuku/luci-app-jd-dailybonus.git  

make menuconfig #Check LUCI-&amp;gt;Applications-&amp;gt;luci-app-jd-dailybonus

make package/lean/luci-app-jd-dailybonus/compile V=s  #单独编译luci-app-jd-dailybonus  

make -j1 V=s #编译固件
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;如何安装&lt;/h3&gt; 
&lt;p&gt;🛑 &lt;a href=&quot;https://github.com/jerrykuku/luci-app-jd-dailybonus/releases&quot;&gt;点击这里去下载最新的版本&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;⚠️安装步骤[重要]⚠️&lt;/p&gt; 
&lt;p&gt;目前插件已经不再需要node-request 依赖，如果之前有安装的，请到软件包进行卸载。 但是node 是必要依赖，请必须确认已经安装Node。 1.自行安装Node [命令: opkg update &amp;amp;&amp;amp; opkg install node] (如果已经安装node版本的网易云插件则可以跳过)&lt;/p&gt; 
&lt;p&gt;2.需要安装以下依赖：&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;opkg update  
opkg install luasocket lua-md5 lua-cjson luasec
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;3.安装luci-app-jd-dailybonus&lt;/p&gt; 
&lt;h3&gt;感谢&lt;/h3&gt; 
&lt;p&gt;感谢&lt;a href=&quot;https://github.com/NobyDa&quot;&gt;NobyDa&lt;/a&gt; 的脚本。&lt;/p&gt; 
&lt;h3&gt;我的其它项目&lt;/h3&gt; 
&lt;p&gt;Argon theme ：https://github.com/jerrykuku/luci-theme-argon&lt;br&gt; Argon theme config ：https://github.com/jerrykuku/luci-app-argon-config Hello World ：https://github.com/jerrykuku/luci-app-vssr&lt;br&gt; openwrt-nanopi-r1s-h5 ： https://github.com/jerrykuku/openwrt-nanopi-r1s-h5&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ebazhanov/linkedin-skill-assessments-quizzes</title>
      <link>https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes</link>
      <description>&lt;p&gt;Full reference of linkedin skill assessments, linkedin test, questions and answers (aws-lambda, rest-api, javascript, react, git, html, jquery, mongodb, java, css, python, machine-learning, power-poin, excel ...) ответы на квиз, LinkedIn quiz lösungen, linkedin quiz las respuestas&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Linkedin Quiz Answers, Skill Assessments Test&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/#contributors-&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/all_contributors-232-orange.svg?style=flat-square&quot; alt=&quot;All Contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This repository is for those looking for answers to the LinkedIn assessment quiz questions or willing to help others by contributing to the tests. Or possibly you would like to create your first pull request and be added as a contributor. Whatever is your goal - you are always welcome here!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;p&gt;| Linkedin-quiz-questions | | Status | | ---------------------------------------------------------------------------- | --------------- | ------------------------------ | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/adobe-illustrator/adobe-illustrator-quiz.md&quot;&gt;Adobe-Illustrator&lt;/a&gt; | =&amp;gt; 51 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/adobe-photoshop/adobe-photoshop-quiz.md&quot;&gt;Adobe-Photoshop&lt;/a&gt; | =&amp;gt; 36 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/agile-methodologies/agile-methodologies-quiz.md&quot;&gt;Agile Methodologies&lt;/a&gt; | =&amp;gt; 76 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/android/android-quiz.md&quot;&gt;Android&lt;/a&gt; | =&amp;gt; 44 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/angularjs/angularjs-quiz.md&quot;&gt;AngularJs&lt;/a&gt; | =&amp;gt; 15 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/aws/aws-quiz.md&quot;&gt;AWS&lt;/a&gt; | =&amp;gt; 28 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/aws-lambda/aws-lambda-quiz.md&quot;&gt;AWS-Lambda&lt;/a&gt; :fire: | =&amp;gt; 44 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/bash/bash-quiz.md&quot;&gt;Bash&lt;/a&gt; | =&amp;gt; 53 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/c%23/c-sharp-quiz.md&quot;&gt;C#&lt;/a&gt; | =&amp;gt; 48 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/c%2B%2B/c%2B%2Bquiz.md&quot;&gt;C++&lt;/a&gt; | =&amp;gt; 33 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/c-(programming-language)/c-quiz.md&quot;&gt;C (Programming Language)&lt;/a&gt; | =&amp;gt; 25 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/css/css-quiz.md&quot;&gt;CSS&lt;/a&gt; | =&amp;gt; 54 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/django/django-quiz.md&quot;&gt;Django&lt;/a&gt; | =&amp;gt; 48 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/dotnet-framework/dotnet-framework-quiz.md&quot;&gt;.NET Framework&lt;/a&gt; | =&amp;gt; 37 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/git/git-quiz.md&quot;&gt;Git&lt;/a&gt; :star: | =&amp;gt; 90 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/google-analytics/google-analytics-quiz.md&quot;&gt;Google Analytics&lt;/a&gt; | =&amp;gt; 65 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/google-cloud-platform/gcp-quiz.md&quot;&gt;Google Cloud Platform (GCP)&lt;/a&gt; | =&amp;gt; 27 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/hadoop/hadoop-quiz.md&quot;&gt;Hadoop&lt;/a&gt; | =&amp;gt; 18 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/html/html-quiz.md&quot;&gt;HTML&lt;/a&gt; | =&amp;gt; 61 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/java/java-quiz.md&quot;&gt;Java&lt;/a&gt; | =&amp;gt; 64 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/javascript/javascript-quiz.md&quot;&gt;Javascript&lt;/a&gt; | =&amp;gt; 65 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/jquery/jquery-quiz.md&quot;&gt;jQuery&lt;/a&gt; :open_mouth: | =&amp;gt; 50 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/json/json-quiz.md&quot;&gt;JSON&lt;/a&gt; | =&amp;gt; 51 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/machine-learning/machine-learning-quiz.md&quot;&gt;Machine Learning&lt;/a&gt; | =&amp;gt; 67 questions | answers required | | Kotlin | =&amp;gt; 0 questions | NO question and NO answers yet | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/matlab/matlab-quiz.md&quot;&gt;MATLAB&lt;/a&gt; | =&amp;gt; 45 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/maven/maven-quiz.md&quot;&gt;Maven&lt;/a&gt; :fire: | =&amp;gt; 34 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-azure/microsoft-azure-quiz.md&quot;&gt;Microsoft Azure&lt;/a&gt; | =&amp;gt; 44 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-excel/microsoft-excel-quiz.md&quot;&gt;Microsoft Excel&lt;/a&gt; | =&amp;gt; 48 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-power-bi/microsoft-power-bi-quiz.md&quot;&gt;Microsoft Power BI&lt;/a&gt; | =&amp;gt; 26 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-power-point/microsoft-power-point-quiz.md&quot;&gt;Microsoft Power Point&lt;/a&gt; | =&amp;gt; 21 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-project/microsoft-project-quiz.md&quot;&gt;Microsoft Project&lt;/a&gt; | =&amp;gt; 41 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-word/microsoft-word-quiz.md&quot;&gt;Microsoft Word&lt;/a&gt; | =&amp;gt; 42 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/mongodb/mongodb-quiz.md&quot;&gt;MongoDB&lt;/a&gt; | =&amp;gt; 46 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/mysql/mysql-quiz.md&quot;&gt;MySQL&lt;/a&gt; | =&amp;gt; 64 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/node.js/node.js-quiz.md&quot;&gt;node.js&lt;/a&gt; | =&amp;gt; 40 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/nosql/nosql-quiz.md&quot;&gt;NoSQL&lt;/a&gt; | =&amp;gt; 43 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/objective-c/objective-c-quiz.md&quot;&gt;objective-c&lt;/a&gt; | =&amp;gt; 33 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/oop/object-oriented-programming-quiz.md&quot;&gt;OOP&lt;/a&gt; | =&amp;gt; 50 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/php/php-quiz.md&quot;&gt;PHP&lt;/a&gt; | =&amp;gt; 29 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/python/python-quiz.md&quot;&gt;Python&lt;/a&gt; | =&amp;gt; 67 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/r/r-quiz.md&quot;&gt;R&lt;/a&gt; | =&amp;gt; 29 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/react/reactjs-quiz.md&quot;&gt;React.js&lt;/a&gt; :rose: | =&amp;gt; 51 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/rest-api/rest-api-quiz.md&quot;&gt;REST API&lt;/a&gt; :+1: | =&amp;gt; 34 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/scala/scala-quiz.md&quot;&gt;Scala&lt;/a&gt; | =&amp;gt; 25 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/seo/search-engine-optimization-quiz.md&quot;&gt;Search Engine Optimization (SEO)&lt;/a&gt; | =&amp;gt; 30 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/sharepoint/sharepoint-quiz.md&quot;&gt;SharePoint&lt;/a&gt; | =&amp;gt; 29 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/swift/swift-quiz.md&quot;&gt;Swift&lt;/a&gt; | =&amp;gt; 48 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/t-sql/t-sql-quiz.md&quot;&gt;Transact-SQL (T-SQL)&lt;/a&gt; | =&amp;gt; 28 questions | with answers | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/vba/vba-quiz.md&quot;&gt;Visual Basic for Applications (VBA)&lt;/a&gt; | =&amp;gt; 11 questions | answers required | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/windows-server/windows-server-quiz.md&quot;&gt;Windows Server&lt;/a&gt; | =&amp;gt; 46 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/wordpress/wordpress-quiz.md&quot;&gt;WordPress&lt;/a&gt; | =&amp;gt; 42 questions | partially answered | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/xml/xml-quiz.md&quot;&gt;XML&lt;/a&gt; | =&amp;gt; 21 questions | answers required |&lt;/p&gt; 
&lt;p&gt;:point_right: If you want to improve your skills on another test platform &lt;a href=&quot;https://www.pluralsight.com/product/skill-iq&quot;&gt;&lt;strong&gt;Pluralsight IQ Skill&lt;/strong&gt;&lt;/a&gt; find &lt;strong&gt;questions and answers&lt;/strong&gt; in &lt;strong&gt;@Timo Körner&lt;/strong&gt; &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-test&quot;&gt;repository&lt;/a&gt;:&lt;/p&gt; 
&lt;p&gt;| Pluralsight IQ Skill quiz | Status | | ----------------------------------------------------------------------------------------------------------------------------------- | ---------- | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/angular.md&quot;&gt;Angular&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/angularjs.md&quot;&gt;AngularJs&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/aws_big_data.md&quot;&gt;Aws Big Data&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/aws_machine_learning.md&quot;&gt;Aws Machine Learning&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/building_websites.md&quot;&gt;Building Websites&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/building_web_apps_with_react.md&quot;&gt;Building Web Apps with React&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/java.md&quot;&gt;Java&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/javascript.md&quot;&gt;Javascript&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/mysql.md&quot;&gt;Mysql&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/powershell.md&quot;&gt;Powershell&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/python_core.md&quot;&gt;Python Core&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/python_data_analysis.md&quot;&gt;Python Data Analysis&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/python_applied_data_mining.md&quot;&gt;Python applied Data Mining&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/python_web_scraping.md&quot;&gt;Python Web Scraping&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/python_exploratory_data_analysis.md&quot;&gt;Python Exploratory Data Analysis&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/python_clean_data.md&quot;&gt;Python Clean Data&lt;/a&gt; | 18 answers | | &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-tests/blob/master/python_data_visualization.md&quot;&gt;Python Data Visualization&lt;/a&gt; | 18 answers |&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Format&lt;/h2&gt; 
&lt;p&gt;We recommend formatting files using &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; code formatter. Prettier comes installed with the IDE &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/code.visualstudio.com&quot;&gt;Vscode&lt;/a&gt; which we recommend for preparing the md files. It works on all OS. If you want to run it independently, get &lt;strong&gt;npm&lt;/strong&gt; and:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm run format
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/Ebazhanov/linkedin-quiz-assessments&quot;&gt;&lt;img src=&quot;https://starchart.cc/Ebazhanov/linkedin-quiz-assessments.svg&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DrkSephy/es6-cheatsheet</title>
      <link>https://github.com/DrkSephy/es6-cheatsheet</link>
      <description>&lt;p&gt;ES2015 [ES6] cheatsheet containing tips, tricks, best practices and code snippets&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;es6-cheatsheet&lt;/h1&gt; 
&lt;p&gt;A cheatsheet containing ES2015 [ES6] tips, tricks, best practices and code snippet examples for your day to day workflow. Contributions are welcome!&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#var-versus-let--const&quot;&gt;var versus let / const&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#replacing-iifes-with-blocks&quot;&gt;Replacing IIFEs with Blocks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#arrow-functions&quot;&gt;Arrow Functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#strings&quot;&gt;Strings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#destructuring&quot;&gt;Destructuring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#modules&quot;&gt;Modules&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#parameters&quot;&gt;Parameters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#classes&quot;&gt;Classes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#symbols&quot;&gt;Symbols&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#maps&quot;&gt;Maps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#weakmaps&quot;&gt;WeakMaps&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#promises&quot;&gt;Promises&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#generators&quot;&gt;Generators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#async-await&quot;&gt;Async Await&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#getter-and-setter-functions&quot;&gt;Getter/Setter functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;var versus let / const&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Besides &lt;code&gt;var&lt;/code&gt;, we now have access to two new identifiers for storing values —&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;. Unlike &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; statements are not hoisted to the top of their enclosing scope.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;An example of using &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var snack = &#39;Meow Mix&#39;;

function getFood(food) {
    if (food) {
        var snack = &#39;Friskies&#39;;
        return snack;
    }
    return snack;
}

getFood(false); // undefined
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, observe what happens when we replace &lt;code&gt;var&lt;/code&gt; using &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let snack = &#39;Meow Mix&#39;;

function getFood(food) {
    if (food) {
        let snack = &#39;Friskies&#39;;
        return snack;
    }
    return snack;
}

getFood(false); // &#39;Meow Mix&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This change in behavior highlights that we need to be careful when refactoring legacy code which uses &lt;code&gt;var&lt;/code&gt;. Blindly replacing instances of &lt;code&gt;var&lt;/code&gt; with &lt;code&gt;let&lt;/code&gt; may lead to unexpected behavior.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are block scoped. Therefore, referencing block-scoped identifiers before they are defined will produce a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(x); // ReferenceError: x is not defined

let x = &#39;hi&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Best Practice&lt;/strong&gt;: Leave &lt;code&gt;var&lt;/code&gt; declarations inside of legacy code to denote that it needs to be carefully refactored. When working on a new codebase, use &lt;code&gt;let&lt;/code&gt; for variables that will change their value over time, and &lt;code&gt;const&lt;/code&gt; for variables which cannot be reassigned.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Replacing IIFEs with Blocks&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A common use of &lt;strong&gt;Immediately Invoked Function Expressions&lt;/strong&gt; is to enclose values within its scope. In ES6, we now have the ability to create block-based scopes and therefore are not limited purely to function-based scope.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function () {
    var food = &#39;Meow Mix&#39;;
}());

console.log(food); // Reference Error
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using ES6 Blocks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
    let food = &#39;Meow Mix&#39;;
};

console.log(food); // Reference Error
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Arrow Functions&lt;/h2&gt; 
&lt;p&gt;Often times we have nested functions in which we would like to preserve the context of &lt;code&gt;this&lt;/code&gt; from its lexical scope. An example is shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(name) {
    this.name = name;
}

Person.prototype.prefixName = function (arr) {
    return arr.map(function (character) {
        return this.name + character; // Cannot read property &#39;name&#39; of undefined
    });
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;One common solution to this problem is to store the context of &lt;code&gt;this&lt;/code&gt; using a variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(name) {
    this.name = name;
}

Person.prototype.prefixName = function (arr) {
    var that = this; // Store the context of this
    return arr.map(function (character) {
        return that.name + character;
    });
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also pass in the proper context of &lt;code&gt;this&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(name) {
    this.name = name;
}

Person.prototype.prefixName = function (arr) {
    return arr.map(function (character) {
        return this.name + character;
    }, this);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As well as bind the context:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(name) {
    this.name = name;
}

Person.prototype.prefixName = function (arr) {
    return arr.map(function (character) {
        return this.name + character;
    }.bind(this));
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;strong&gt;Arrow Functions&lt;/strong&gt;, the lexical value of &lt;code&gt;this&lt;/code&gt; isn&#39;t shadowed and we can re-write the above as shown:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(name) {
    this.name = name;
}

Person.prototype.prefixName = function (arr) {
    return arr.map(character =&amp;gt; this.name + character);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Best Practice&lt;/strong&gt;: Use &lt;strong&gt;Arrow Functions&lt;/strong&gt; whenever you need to preserve the lexical value of &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Arrow Functions are also more concise when used in function expressions which simply return a value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var squares = arr.map(function (x) { return x * x }); // Function Expression
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arr = [1, 2, 3, 4, 5];
const squares = arr.map(x =&amp;gt; x * x); // Arrow Function for terser implementation
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Best Practice&lt;/strong&gt;: Use &lt;strong&gt;Arrow Functions&lt;/strong&gt; in place of function expressions when possible.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Strings&lt;/h2&gt; 
&lt;p&gt;With ES6, the standard library has grown immensely. Along with these changes are new methods which can be used on strings, such as &lt;code&gt;.includes()&lt;/code&gt; and &lt;code&gt;.repeat()&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;.includes( )&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var string = &#39;food&#39;;
var substring = &#39;foo&#39;;

console.log(string.indexOf(substring) &amp;gt; -1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Instead of checking for a return value &lt;code&gt;&amp;gt; -1&lt;/code&gt; to denote string containment, we can simply use &lt;code&gt;.includes()&lt;/code&gt; which will return a boolean:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const string = &#39;food&#39;;
const substring = &#39;foo&#39;;

console.log(string.includes(substring)); // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;.repeat( )&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function repeat(string, count) {
    var strings = [];
    while(strings.length &amp;lt; count) {
        strings.push(string);
    }
    return strings.join(&#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In ES6, we now have access to a terser implementation:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// String.repeat(numberOfRepetitions)
&#39;meow&#39;.repeat(3); // &#39;meowmeowmeow&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Template Literals&lt;/h3&gt; 
&lt;p&gt;Using &lt;strong&gt;Template Literals&lt;/strong&gt;, we can now construct strings that have special characters in them without needing to escape them explicitly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var text = &quot;This string contains \&quot;double quotes\&quot; which are escaped.&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let text = `This string contains &quot;double quotes&quot; which don&#39;t need to be escaped anymore.`;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Template Literals&lt;/strong&gt; also support interpolation, which makes the task of concatenating strings and values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var name = &#39;Tiger&#39;;
var age = 13;

console.log(&#39;My cat is named &#39; + name + &#39; and is &#39; + age + &#39; years old.&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Much simpler:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const name = &#39;Tiger&#39;;
const age = 13;

console.log(`My cat is named ${name} and is ${age} years old.`);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In ES5, we handled new lines as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var text = (
    &#39;cat\n&#39; +
    &#39;dog\n&#39; +
    &#39;nickelodeon&#39;
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var text = [
    &#39;cat&#39;,
    &#39;dog&#39;,
    &#39;nickelodeon&#39;
].join(&#39;\n&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Template Literals&lt;/strong&gt; will preserve new lines for us without having to explicitly place them in:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let text = ( `cat
dog
nickelodeon`
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Template Literals&lt;/strong&gt; can accept expressions, as well:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let today = new Date();
let text = `The time and date is ${today.toLocaleString()}`;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Destructuring&lt;/h2&gt; 
&lt;p&gt;Destructuring allows us to extract values from arrays and objects (even deeply nested) and store them in variables with a more convenient syntax.&lt;/p&gt; 
&lt;h3&gt;Destructuring Arrays&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var arr = [1, 2, 3, 4];
var a = arr[0];
var b = arr[1];
var c = arr[2];
var d = arr[3];
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let [a, b, c, d] = [1, 2, 3, 4];

console.log(a); // 1
console.log(b); // 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Destructuring Objects&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var luke = { occupation: &#39;jedi&#39;, father: &#39;anakin&#39; };
var occupation = luke.occupation; // &#39;jedi&#39;
var father = luke.father; // &#39;anakin&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let luke = { occupation: &#39;jedi&#39;, father: &#39;anakin&#39; };
let {occupation, father} = luke;

console.log(occupation); // &#39;jedi&#39;
console.log(father); // &#39;anakin&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Modules&lt;/h2&gt; 
&lt;p&gt;Prior to ES6, we used libraries such as &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt; to create modules on the client-side, and &lt;a href=&quot;https://nodejs.org/api/modules.html#modules_module_require_id&quot;&gt;require&lt;/a&gt; in &lt;strong&gt;Node.js&lt;/strong&gt;. With ES6, we can now directly use modules of all types (AMD and CommonJS).&lt;/p&gt; 
&lt;h3&gt;Exporting in CommonJS&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = 1;
module.exports = { foo: &#39;bar&#39; };
module.exports = [&#39;foo&#39;, &#39;bar&#39;];
module.exports = function bar () {};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Exporting in ES6&lt;/h3&gt; 
&lt;p&gt;With ES6, we have various flavors of exporting. We can perform &lt;strong&gt;Named Exports&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export let name = &#39;David&#39;;
export let age  = 25;​​
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As well as &lt;strong&gt;exporting a list&lt;/strong&gt; of objects:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function sumTwo(a, b) {
    return a + b;
}

function sumThree(a, b, c) {
    return a + b + c;
}

export { sumTwo, sumThree };
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also export functions, objects and values (etc.) simply by using the &lt;code&gt;export&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export function sumTwo(a, b) {
    return a + b;
}

export function sumThree(a, b, c) {
    return a + b + c;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And lastly, we can &lt;strong&gt;export default bindings&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function sumTwo(a, b) {
    return a + b;
}

function sumThree(a, b, c) {
    return a + b + c;
}

let api = {
    sumTwo,
    sumThree
};

export default api;

/* Which is the same as
 * export { api as default };
 */
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Best Practices&lt;/strong&gt;: Always use the &lt;code&gt;export default&lt;/code&gt; method at &lt;strong&gt;the end&lt;/strong&gt; of the module. It makes it clear what is being exported, and saves time by having to figure out what name a value was exported as. More so, the common practice in CommonJS modules is to export a single value or object. By sticking to this paradigm, we make our code easily readable and allow ourselves to interpolate between CommonJS and ES6 modules.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Importing in ES6&lt;/h3&gt; 
&lt;p&gt;ES6 provides us with various flavors of importing. We can import an entire file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &#39;underscore&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;It is important to note that simply &lt;strong&gt;importing an entire file will execute all code at the top level of that file&lt;/strong&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Similar to Python, we have named imports:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { sumTwo, sumThree } from &#39;math/addition&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also rename the named imports:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import {
    sumTwo as addTwoNumbers,
    sumThree as sumThreeNumbers
} from &#39;math/addition&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In addition, we can &lt;strong&gt;import all the things&lt;/strong&gt; (also called namespace import):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as util from &#39;math/addition&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Lastly, we can import a list of values from a module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as additionUtil from &#39;math/addition&#39;;
const { sumTwo, sumThree } = additionUtil;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Importing from the default binding like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import api from &#39;math/addition&#39;;
// Same as: import { default as api } from &#39;math/addition&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While it is better to keep the exports simple, but we can sometimes mix default import and mixed import if needed. When we are exporting like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// foos.js
export { foo as default, foo1, foo2 };
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can import them like the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import foo, { foo1, foo2 } from &#39;foos&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When importing a module exported using commonjs syntax (such as React) we can do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;;
const { Component, PropTypes } = React;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This can also be simplified further, using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component, PropTypes } from &#39;react&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Values that are exported are &lt;strong&gt;bindings&lt;/strong&gt;, not references. Therefore, changing the binding of a variable in one module will affect the value within the exported module. Avoid changing the public interface of these exported values.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Parameters&lt;/h2&gt; 
&lt;p&gt;In ES5, we had varying ways to handle functions which needed &lt;strong&gt;default values&lt;/strong&gt;, &lt;strong&gt;indefinite arguments&lt;/strong&gt;, and &lt;strong&gt;named parameters&lt;/strong&gt;. With ES6, we can accomplish all of this and more using more concise syntax.&lt;/p&gt; 
&lt;h3&gt;Default Parameters&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addTwoNumbers(x, y) {
    x = x || 0;
    y = y || 0;
    return x + y;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In ES6, we can simply supply default values for parameters in a function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addTwoNumbers(x=0, y=0) {
    return x + y;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;addTwoNumbers(2, 4); // 6
addTwoNumbers(2); // 2
addTwoNumbers(); // 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Rest Parameters&lt;/h3&gt; 
&lt;p&gt;In ES5, we handled an indefinite number of arguments like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function logArguments() {
    for (var i=0; i &amp;lt; arguments.length; i++) {
        console.log(arguments[i]);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using the &lt;strong&gt;rest&lt;/strong&gt; operator, we can pass in an indefinite amount of arguments:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function logArguments(...args) {
    for (let arg of args) {
        console.log(arg);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Named Parameters&lt;/h3&gt; 
&lt;p&gt;One of the patterns in ES5 to handle named parameters was to use the &lt;strong&gt;options object&lt;/strong&gt; pattern, adopted from jQuery.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function initializeCanvas(options) {
    var height = options.height || 600;
    var width  = options.width  || 400;
    var lineStroke = options.lineStroke || &#39;black&#39;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can achieve the same functionality using destructuring as a formal parameter to a function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function initializeCanvas(
    { height=600, width=400, lineStroke=&#39;black&#39;}) {
        // Use variables height, width, lineStroke here
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If we want to make the entire value optional, we can do so by destructuring an empty object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function initializeCanvas(
    { height=600, width=400, lineStroke=&#39;black&#39;} = {}) {
        // ...
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Spread Operator&lt;/h3&gt; 
&lt;p&gt;In ES5, we could find the max of values in an array by using the &lt;code&gt;apply&lt;/code&gt; method on &lt;code&gt;Math.max&lt;/code&gt; like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Math.max.apply(null, [-1, 100, 9001, -32]); // 9001
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In ES6, we can now use the spread operator to pass an array of values to be used as parameters to a function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Math.max(...[-1, 100, 9001, -32]); // 9001
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can concat array literals easily with this intuitive syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cities = [&#39;San Francisco&#39;, &#39;Los Angeles&#39;];
let places = [&#39;Miami&#39;, ...cities, &#39;Chicago&#39;]; // [&#39;Miami&#39;, &#39;San Francisco&#39;, &#39;Los Angeles&#39;, &#39;Chicago&#39;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Classes&lt;/h2&gt; 
&lt;p&gt;Prior to ES6, we implemented Classes by creating a constructor function and adding properties by extending the prototype:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(name, age, gender) {
    this.name   = name;
    this.age    = age;
    this.gender = gender;
}

Person.prototype.incrementAge = function () {
    return this.age += 1;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And created extended classes by the following:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Personal(name, age, gender, occupation, hobby) {
    Person.call(this, name, age, gender);
    this.occupation = occupation;
    this.hobby = hobby;
}

Personal.prototype = Object.create(Person.prototype);
Personal.prototype.constructor = Personal;
Personal.prototype.incrementAge = function () {
    Person.prototype.incrementAge.call(this);
    this.age += 20;
    console.log(this.age);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ES6 provides much needed syntactic sugar for doing this under the hood. We can create Classes directly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Person {
    constructor(name, age, gender) {
        this.name   = name;
        this.age    = age;
        this.gender = gender;
    }

    incrementAge() {
      this.age += 1;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And extend them using the &lt;code&gt;extends&lt;/code&gt; keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Personal extends Person {
    constructor(name, age, gender, occupation, hobby) {
        super(name, age, gender);
        this.occupation = occupation;
        this.hobby = hobby;
    }

    incrementAge() {
        super.incrementAge();
        this.age += 20;
        console.log(this.age);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Best Practice&lt;/strong&gt;: While the syntax for creating classes in ES6 obscures how implementation and prototypes work under the hood, it is a good feature for beginners and allows us to write cleaner code.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Symbols&lt;/h2&gt; 
&lt;p&gt;Symbols have existed prior to ES6, but now we have a public interface to using them directly. Symbols are immutable and unique and can be used as keys in any hash.&lt;/p&gt; 
&lt;h3&gt;Symbol( )&lt;/h3&gt; 
&lt;p&gt;Calling &lt;code&gt;Symbol()&lt;/code&gt; or &lt;code&gt;Symbol(description)&lt;/code&gt; will create a unique symbol that cannot be looked up globally. A Use case for &lt;code&gt;Symbol()&lt;/code&gt; is to patch objects or namespaces from third parties with your own logic, but be confident that you won&#39;t collide with updates to that library. For example, if you wanted to add a method &lt;code&gt;refreshComponent&lt;/code&gt; to the &lt;code&gt;React.Component&lt;/code&gt; class, and be certain that you didn&#39;t trample a method they add in a later update:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const refreshComponent = Symbol();

React.Component.prototype[refreshComponent] = () =&amp;gt; {
    // do something
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Symbol.for(key)&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;Symbol.for(key)&lt;/code&gt; will create a Symbol that is still immutable and unique, but can be looked up globally. Two identical calls to &lt;code&gt;Symbol.for(key)&lt;/code&gt; will return the same Symbol instance. NOTE: This is not true for &lt;code&gt;Symbol(description)&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Symbol(&#39;foo&#39;) === Symbol(&#39;foo&#39;) // false
Symbol.for(&#39;foo&#39;) === Symbol(&#39;foo&#39;) // false
Symbol.for(&#39;foo&#39;) === Symbol.for(&#39;foo&#39;) // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A common use case for Symbols, and in particular with &lt;code&gt;Symbol.for(key)&lt;/code&gt; is for interoperability. This can be achieved by having your code look for a Symbol member on object arguments from third parties that contain some known interface. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function reader(obj) {
    const specialRead = Symbol.for(&#39;specialRead&#39;);
    if (obj[specialRead]) {
        const reader = obj[specialRead]();
        // do something with reader
    } else {
        throw new TypeError(&#39;object cannot be read&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And then in another library:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const specialRead = Symbol.for(&#39;specialRead&#39;);

class SomeReadableType {
    [specialRead]() {
        const reader = createSomeReaderFrom(this);
        return reader;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A notable example of Symbol use for interoperability is &lt;code&gt;Symbol.iterator&lt;/code&gt; which exists on all iterable types in ES6: Arrays, strings, generators, etc. When called as a method it returns an object with an Iterator interface.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Maps&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Maps&lt;/strong&gt; is a much needed data structure in JavaScript. Prior to ES6, we created &lt;strong&gt;hash&lt;/strong&gt; maps through objects:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var map = new Object();
map[key1] = &#39;value1&#39;;
map[key2] = &#39;value2&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, this does not protect us from accidentally overriding functions with specific property names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;gt; getOwnProperty({ hasOwnProperty: &#39;Hah, overwritten&#39;}, &#39;Pwned&#39;);
&amp;gt; TypeError: Property &#39;hasOwnProperty&#39; is not a function
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Actual &lt;strong&gt;Maps&lt;/strong&gt; allow us to &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; for values (and much more).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let map = new Map();
&amp;gt; map.set(&#39;name&#39;, &#39;david&#39;);
&amp;gt; map.get(&#39;name&#39;); // david
&amp;gt; map.has(&#39;name&#39;); // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The most amazing part of Maps is that we are no longer limited to just using strings. We can now use any type as a key, and it will not be type-cast to a string.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let map = new Map([
    [&#39;name&#39;, &#39;david&#39;],
    [true, &#39;false&#39;],
    [1, &#39;one&#39;],
    [{}, &#39;object&#39;],
    [function () {}, &#39;function&#39;]
]);

for (let key of map.keys()) {
    console.log(typeof key);
    // &amp;gt; string, boolean, number, object, function
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Using non-primitive values such as functions or objects won&#39;t work when testing equality using methods such as &lt;code&gt;map.get()&lt;/code&gt;. As such, stick to primitive values such as Strings, Booleans and Numbers.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We can also iterate over maps using &lt;code&gt;.entries()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (let [key, value] of map.entries()) {
    console.log(key, value);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;WeakMaps&lt;/h2&gt; 
&lt;p&gt;In order to store private data versions &amp;lt; ES6, we had various ways of doing this. One such method was using naming conventions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Person {
    constructor(age) {
        this._age = age;
    }

    _incrementAge() {
        this._age += 1;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But naming conventions can cause confusion in a codebase and are not always going to be upheld. Instead, we can use WeakMaps to store our values:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let _age = new WeakMap();
class Person {
    constructor(age) {
        _age.set(this, age);
    }

    incrementAge() {
        let age = _age.get(this) + 1;
        _age.set(this, age);
        if (age &amp;gt; 50) {
            console.log(&#39;Midlife crisis&#39;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The cool thing about using WeakMaps to store our private data is that their keys do not give away the property names, which can be seen by using &lt;code&gt;Reflect.ownKeys()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;gt; const person = new Person(50);
&amp;gt; person.incrementAge(); // &#39;Midlife crisis&#39;
&amp;gt; Reflect.ownKeys(person); // []
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A more practical example of using WeakMaps is to store data which is associated to a DOM element without having to pollute the DOM itself:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let map = new WeakMap();
let el  = document.getElementById(&#39;someElement&#39;);

// Store a weak reference to the element with a key
map.set(el, &#39;reference&#39;);

// Access the value of the element
let value = map.get(el); // &#39;reference&#39;

// Remove the reference
el.parentNode.removeChild(el);
el = null;

// map is empty, since the element is destroyed
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As shown above, once the object is destroyed by the garbage collector, the WeakMap will automatically remove the key-value pair which was identified by that object.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To further illustrate the usefulness of this example, consider how jQuery stores a cache of objects corresponding to DOM elements which have references. Using WeakMaps, jQuery can automatically free up any memory that was associated with a particular DOM element once it has been removed from the document. In general, WeakMaps are very useful for any library that wraps DOM elements.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Promises&lt;/h2&gt; 
&lt;p&gt;Promises allow us to turn our horizontal code (callback hell):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;func1(function (value1) {
    func2(value1, function (value2) {
        func3(value2, function (value3) {
            func4(value3, function (value4) {
                func5(value4, function (value5) {
                    // Do something with value 5
                });
            });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Into vertical code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;func1(value1)
    .then(func2)
    .then(func3)
    .then(func4)
    .then(func5, value5 =&amp;gt; {
        // Do something with value 5
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Prior to ES6, we used &lt;a href=&quot;https://github.com/petkaantonov/bluebird&quot;&gt;bluebird&lt;/a&gt; or &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Q&lt;/a&gt;. Now we have Promises natively:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new Promise((resolve, reject) =&amp;gt;
    reject(new Error(&#39;Failed to fulfill Promise&#39;)))
        .catch(reason =&amp;gt; console.log(reason));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where we have two handlers, &lt;strong&gt;resolve&lt;/strong&gt; (a function called when the Promise is &lt;strong&gt;fulfilled&lt;/strong&gt;) and &lt;strong&gt;reject&lt;/strong&gt; (a function called when the Promise is &lt;strong&gt;rejected&lt;/strong&gt;).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Benefits of Promises&lt;/strong&gt;: Error Handling using a bunch of nested callbacks can get chaotic. Using Promises, we have a clear path to bubbling errors up and handling them appropriately. Moreover, the value of a Promise after it has been resolved/rejected is immutable - it will never change.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Here is a practical example of using Promises:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var request = require(&#39;request&#39;);

return new Promise((resolve, reject) =&amp;gt; {
  request.get(url, (error, response, body) =&amp;gt; {
    if (body) {
        resolve(JSON.parse(body));
      } else {
        resolve({});
      }
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can also &lt;strong&gt;parallelize&lt;/strong&gt; Promises to handle an array of asynchronous operations by using &lt;code&gt;Promise.all()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let urls = [
  &#39;/api/commits&#39;,
  &#39;/api/issues/opened&#39;,
  &#39;/api/issues/assigned&#39;,
  &#39;/api/issues/completed&#39;,
  &#39;/api/issues/comments&#39;,
  &#39;/api/pullrequests&#39;
];

let promises = urls.map((url) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    $.ajax({ url: url })
      .done((data) =&amp;gt; {
        resolve(data);
      });
  });
});

Promise.all(promises)
  .then((results) =&amp;gt; {
    // Do something with results of all our promises
 });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Generators&lt;/h2&gt; 
&lt;p&gt;Similar to how &lt;a href=&quot;https://github.com/DrkSephy/es6-cheatsheet#promises&quot;&gt;Promises&lt;/a&gt; allow us to avoid &lt;a href=&quot;http://callbackhell.com/&quot;&gt;callback hell&lt;/a&gt;, Generators allow us to flatten our code - giving our asynchronous code a synchronous feel. Generators are essentially functions which we can &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield&quot;&gt;pause their execution&lt;/a&gt; and subsequently return the value of an expression.&lt;/p&gt; 
&lt;p&gt;A simple example of using generators is shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* sillyGenerator() {
    yield 1;
    yield 2;
    yield 3;
    yield 4;
}

var generator = sillyGenerator();
&amp;gt; console.log(generator.next()); // { value: 1, done: false }
&amp;gt; console.log(generator.next()); // { value: 2, done: false }
&amp;gt; console.log(generator.next()); // { value: 3, done: false }
&amp;gt; console.log(generator.next()); // { value: 4, done: false }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next&quot;&gt;next&lt;/a&gt; will allow us to push our generator forward and evaluate a new expression. While the above example is extremely contrived, we can utilize Generators to write asynchronous code in a synchronous manner:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Hiding asynchronousity with Generators

function request(url) {
    getJSON(url, function(response) {
        generator.next(response);
    });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And here we write a generator function that will return our data:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* getData() {
    var entry1 = yield request(&#39;http://some_api/item1&#39;);
    var data1  = JSON.parse(entry1);
    var entry2 = yield request(&#39;http://some_api/item2&#39;);
    var data2  = JSON.parse(entry2);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By the power of &lt;code&gt;yield&lt;/code&gt;, we are guaranteed that &lt;code&gt;entry1&lt;/code&gt; will have the data needed to be parsed and stored in &lt;code&gt;data1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;While generators allow us to write asynchronous code in a synchronous manner, there is no clear and easy path for error propagation. As such, as we can augment our generator with Promises:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function request(url) {
    return new Promise((resolve, reject) =&amp;gt; {
        getJSON(url, resolve);
    });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And we write a function which will step through our generator using &lt;code&gt;next&lt;/code&gt; which in turn will utilize our &lt;code&gt;request&lt;/code&gt; method above to yield a Promise:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function iterateGenerator(gen) {
    var generator = gen();
    (function iterate(val) {
        var ret = generator.next();
        if(!ret.done) {
            ret.value.then(iterate);
        }
    })();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By augmenting our Generator with Promises, we have a clear way of propagating errors through the use of our Promise &lt;code&gt;.catch&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. To use our newly augmented Generator, it is as simple as before:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;iterateGenerator(function* getData() {
    var entry1 = yield request(&#39;http://some_api/item1&#39;);
    var data1  = JSON.parse(entry1);
    var entry2 = yield request(&#39;http://some_api/item2&#39;);
    var data2  = JSON.parse(entry2);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We were able to reuse our implementation to use our Generator as before, which shows their power. While Generators and Promises allow us to write asynchronous code in a synchronous manner while retaining the ability to propagate errors in a nice way, we can actually begin to utilize a simpler construction that provides the same benefits: &lt;a href=&quot;https://github.com/DrkSephy/es6-cheatsheet#async-await&quot;&gt;async-await&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Async Await&lt;/h2&gt; 
&lt;p&gt;While this is actually an upcoming ES2016 feature, &lt;code&gt;async await&lt;/code&gt; allows us to perform the same thing we accomplished using Generators and Promises with less effort:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var request = require(&#39;request&#39;);

function getJSON(url) {
  return new Promise(function(resolve, reject) {
    request(url, function(error, response, body) {
      resolve(body);
    });
  });
}

async function main() {
  var data = await getJSON();
  console.log(data); // NOT undefined!
}

main();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Under the hood, it performs similarly to Generators. I highly recommend using them over Generators + Promises. A great resource for getting up and running with ES7 and Babel can be found &lt;a href=&quot;http://masnun.com/2015/11/11/using-es7-asyncawait-today-with-babel.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Getter and setter functions&lt;/h2&gt; 
&lt;p&gt;ES6 has started supporting getter and setter functions within classes. Using the following example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Employee {

    constructor(name) {
        this._name = name;
    }

    get name() {
      if(this._name) {
        return &#39;Mr. &#39; + this._name.toUpperCase();  
      } else {
        return undefined;
      }  
    }

    set name(newName) {
      if (newName == this._name) {
        console.log(&#39;I already have this name.&#39;);
      } else if (newName) {
        this._name = newName;
      } else {
        return false;
      }
    }
}

var emp = new Employee(&quot;James Bond&quot;);

// uses the get method in the background
if (emp.name) {
  console.log(emp.name);  // Mr. JAMES BOND
}

// uses the setter in the background
emp.name = &quot;Bond 007&quot;;
console.log(emp.name);  // Mr. BOND 007  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Latest browsers are also supporting getter/setter functions in Objects and we can use them for computed properties, adding listeners and preprocessing before setting/getting:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var person = {
  firstName: &#39;James&#39;,
  lastName: &#39;Bond&#39;,
  get fullName() {
      console.log(&#39;Getting FullName&#39;);
      return this.firstName + &#39; &#39; + this.lastName;
  },
  set fullName (name) {
      console.log(&#39;Setting FullName&#39;);
      var words = name.toString().split(&#39; &#39;);
      this.firstName = words[0] || &#39;&#39;;
      this.lastName = words[1] || &#39;&#39;;
  }
}

person.fullName; // James Bond
person.fullName = &#39;Bond 007&#39;;
person.fullName; // Bond 007
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The MIT License (MIT)&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2015 David Leonard&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/DrkSephy/es6-cheatsheet/master/#table-of-contents&quot;&gt;(back to table of contents)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ZHDeveloper/JD_Sign_Action</title>
      <link>https://github.com/ZHDeveloper/JD_Sign_Action</link>
      <description>&lt;p&gt;基于github actions的京东签到、领京豆&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;基于github action的京东自动化签到&lt;/h1&gt; 
&lt;h2&gt;介绍&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;使用NobyDa “京东多合一签到脚本”为基础，移植到github actions自动化执行。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;触发方式&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;点亮&lt;code&gt;Star&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;凌晨4点定时执行&lt;/li&gt; 
 &lt;li&gt;自定义：.github/workflows/work.yaml 编辑&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;注意问题&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;问题一：&lt;a href=&quot;https://github.com/ZHDeveloper/JD_Sign_Action/issues/3&quot;&gt;项目Fork后定时任务没有执行&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;1、建议修改README.md提交，以触发定时任务。&lt;/p&gt; 
  &lt;p&gt;2、定时任务的时间是UTC时间，跟中国时间有8小时的时差。&lt;/p&gt; 
 &lt;/blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;问题二：京东Cookie的有效期&lt;/strong&gt;&lt;/p&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;就我自己项目中的使用情况而言，一个月有效期。&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;使用用法&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;点击右上角 &lt;code&gt;Fork&lt;/code&gt; 项目；&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Secrets&lt;/code&gt; 中添加京东Cookie、Server酱SCKEY； 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;JD_COOKIE&lt;/code&gt;：账号1Cookie&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;JD_DUAL_COOKIE&lt;/code&gt;：账号2Cookie(选填)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PUSH_KEY&lt;/code&gt;：Server酱SCKEY&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;点击&lt;code&gt;Star&lt;/code&gt;，任务会自动执行，运行进度和结果可以在&lt;code&gt;Actions&lt;/code&gt;页面查看；&lt;/li&gt; 
 &lt;li&gt;当任务运行完成时，会将运行结果和错误信息打包到&lt;code&gt;Artifacts&lt;/code&gt;，可自行下载查看；&lt;/li&gt; 
 &lt;li&gt;如果配置了Server酱，运行结果会推送到微信；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;获取京东cookie&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;使用项目中的Chrome插件：&lt;code&gt;JDCookie&lt;/code&gt;；&lt;/li&gt; 
 &lt;li&gt;Chrome中拓展程序开启&lt;code&gt;开发者模式&lt;/code&gt;；&lt;/li&gt; 
 &lt;li&gt;点击&lt;code&gt;加载已解压的拓展程序&lt;/code&gt;，选择&lt;code&gt;JDCookie&lt;/code&gt;目录；&lt;/li&gt; 
 &lt;li&gt;登录&lt;a href=&quot;https://bean.m.jd.com/&quot;&gt;领京豆&lt;/a&gt;；&lt;/li&gt; 
 &lt;li&gt;点击&lt;code&gt;JDCookie&lt;/code&gt;即可拷贝京东cookie；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;获取Server酱SCKEY&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;github 授权登录&lt;a href=&quot;http://sc.ftqq.com/3.version&quot;&gt;Server酱&lt;/a&gt;官网；&lt;/li&gt; 
 &lt;li&gt;菜单栏&lt;code&gt;微信推送&lt;/code&gt;扫描绑定微信；&lt;/li&gt; 
 &lt;li&gt;菜单栏&lt;code&gt;发送消息&lt;/code&gt;拷贝SCKEY；&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;效果截图&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ZHDeveloper/JD_Sign_Action/master/images/WechatIMG3.jpeg&quot; alt=&quot;WechatIMG3&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ZHDeveloper/JD_Sign_Action/master/images/WechatIMG4.jpeg&quot; alt=&quot;WechatIMG4&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;参考项目&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NobyDa/Script/blob/master/JD-DailyBonus/JD_DailyBonus.js&quot;&gt;NobyDa/Script/JD-DailyBonus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ruicky/jd_sign_bot&quot;&gt;ruicky/jd-sign-bot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jerrykuku/luci-app-jd-dailybonus&quot;&gt;jerrykuku/luci-app-jd-dailybonus&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>facebook/react</title>
      <link>https://github.com/facebook/react</link>
      <description>&lt;p&gt;A declarative, efficient, and flexible JavaScript library for building user interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; · &lt;a href=&quot;https://github.com/facebook/react/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg&quot; alt=&quot;GitHub license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/react.svg?style=flat&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/facebook/react&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/facebook/react.svg?style=shield&amp;amp;circle-token=:circle-token&quot; alt=&quot;CircleCI Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg&quot; alt=&quot;PRs Welcome&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;React is a JavaScript library for building user interfaces.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Declarative:&lt;/strong&gt; React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Component-Based:&lt;/strong&gt; Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Learn Once, Write Anywhere:&lt;/strong&gt; We don&#39;t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using &lt;a href=&quot;https://reactnative.dev/&quot;&gt;React Native&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;Learn how to use React in your own project&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;React has been designed for gradual adoption from the start, and &lt;strong&gt;you can use as little or as much React as you need&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;a href=&quot;https://reactjs.org/docs/getting-started.html#online-playgrounds&quot;&gt;Online Playgrounds&lt;/a&gt; to get a taste of React.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/add-react-to-a-website.html&quot;&gt;Add React to a Website&lt;/a&gt; as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in one minute.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/create-a-new-react-app.html&quot;&gt;Create a New React App&lt;/a&gt; if you&#39;re looking for a powerful JavaScript toolchain.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use React as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag from a &lt;a href=&quot;https://reactjs.org/docs/cdn-links.html&quot;&gt;CDN&lt;/a&gt;, or as a &lt;code&gt;react&lt;/code&gt; package on &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find the React documentation &lt;a href=&quot;https://reactjs.org/docs&quot;&gt;on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;Getting Started&lt;/a&gt; page for a quick overview.&lt;/p&gt; 
&lt;p&gt;The documentation is divided into several sections:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hello-world.html&quot;&gt;Main Concepts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/jsx-in-depth.html&quot;&gt;Advanced Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/react-api.html&quot;&gt;API Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/community/support.html&quot;&gt;Where to Get Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/how-to-contribute.html&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can improve it by sending pull requests to &lt;a href=&quot;https://github.com/reactjs/reactjs.org&quot;&gt;this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;We have several examples &lt;a href=&quot;https://reactjs.org/&quot;&gt;on the website&lt;/a&gt;. Here is the first one to get you started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function HelloMessage({ name }) {
  return &amp;lt;div&amp;gt;Hello {name}&amp;lt;/div&amp;gt;;
}

ReactDOM.render(
  &amp;lt;HelloMessage name=&quot;Taylor&quot; /&amp;gt;,
  document.getElementById(&#39;container&#39;)
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This example will render &quot;Hello Taylor&quot; into a container on the page.&lt;/p&gt; 
&lt;p&gt;You&#39;ll notice that we used an HTML-like syntax; &lt;a href=&quot;https://reactjs.org/docs/introducing-jsx.html&quot;&gt;we call it JSX&lt;/a&gt;. JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. If you&#39;re using React as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, read &lt;a href=&quot;https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx&quot;&gt;this section&lt;/a&gt; on integrating JSX; otherwise, the &lt;a href=&quot;https://reactjs.org/docs/create-a-new-react-app.html&quot;&gt;recommended JavaScript toolchains&lt;/a&gt; handle it automatically.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://code.fb.com/codeofconduct&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read &lt;a href=&quot;https://code.fb.com/codeofconduct&quot;&gt;the full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://reactjs.org/contributing/how-to-contribute.html&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://reactjs.org/contributing/how-to-contribute.html&quot;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.&lt;/p&gt; 
&lt;h3&gt;Good First Issues&lt;/h3&gt; 
&lt;p&gt;To help you get your feet wet and get you familiar with our contribution process, we have a list of &lt;a href=&quot;https://github.com/facebook/react/labels/good%20first%20issue&quot;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;React is &lt;a href=&quot;https://raw.githubusercontent.com/facebook/react/master/LICENSE&quot;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>alpinejs/alpine</title>
      <link>https://github.com/alpinejs/alpine</link>
      <description>&lt;p&gt;A rugged, minimal framework for composing JavaScript behavior in your markup.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alpine.js&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/bundlephobia/minzip/alpinejs&quot; alt=&quot;npm bundle size&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/v/alpinejs&quot; alt=&quot;npm version&quot;&gt; &lt;a href=&quot;https://alpinejs.codewithhugo.com/chat/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg?sanitize=true&quot; alt=&quot;Chat&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Alpine.js offers you the reactive and declarative nature of big frameworks like Vue or React at a much lower cost.&lt;/p&gt; 
&lt;p&gt;You get to keep your DOM, and sprinkle in behavior as you see fit.&lt;/p&gt; 
&lt;p&gt;Think of it like &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind&lt;/a&gt; for JavaScript.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: This tool&#39;s syntax is almost entirely borrowed from &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt; (and by extension &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt;). I am forever grateful for the gift they are to the web.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Translated documentation&lt;/h2&gt; 
&lt;p&gt;| Language | Link for documentation | | --- | --- | | Arabic | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.ar.md&quot;&gt;&lt;strong&gt;التوثيق باللغة العربية&lt;/strong&gt;&lt;/a&gt; | | Chinese Traditional | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.zh-TW.md&quot;&gt;&lt;strong&gt;繁體中文說明文件&lt;/strong&gt;&lt;/a&gt; | | German | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.de.md&quot;&gt;&lt;strong&gt;Dokumentation in Deutsch&lt;/strong&gt;&lt;/a&gt; | | Indonesian | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.id.md&quot;&gt;&lt;strong&gt;Dokumentasi Bahasa Indonesia&lt;/strong&gt;&lt;/a&gt; | | Japanese | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.ja.md&quot;&gt;&lt;strong&gt;日本語ドキュメント&lt;/strong&gt;&lt;/a&gt; | | Portuguese | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.pt.md&quot;&gt;&lt;strong&gt;Documentação em Português&lt;/strong&gt;&lt;/a&gt; | | Russian | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.ru.md&quot;&gt;&lt;strong&gt;Документация на русском&lt;/strong&gt;&lt;/a&gt; | | Spanish | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.es.md&quot;&gt;&lt;strong&gt;Documentación en Español&lt;/strong&gt;&lt;/a&gt; | | Turkish | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.tr.md&quot;&gt;&lt;strong&gt;Türkçe Dokümantasyon&lt;/strong&gt;&lt;/a&gt; | | Français | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.fr.md&quot;&gt;&lt;strong&gt;Documentation en Français&lt;/strong&gt;&lt;/a&gt; | | Korean | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/README.ko.md&quot;&gt;&lt;strong&gt;한국어 문서&lt;/strong&gt;&lt;/a&gt; |&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;From CDN:&lt;/strong&gt; Add the following script to the end of your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js&quot; defer&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s it. It will initialize itself.&lt;/p&gt; 
&lt;p&gt;For production environments, it&#39;s recommended to pin a specific version number in the link to avoid unexpected breakage from newer versions. For example, to use version &lt;code&gt;2.8.0&lt;/code&gt; (latest):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.8.0/dist/alpine.min.js&quot; defer&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;From npm:&lt;/strong&gt; Install the package from npm.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npm i alpinejs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Include it in your script.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import &#39;alpinejs&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;For IE11 support&lt;/strong&gt; Use the following scripts instead.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script type=&quot;module&quot; src=&quot;https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script nomodule src=&quot;https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine-ie11.min.js&quot; defer&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The pattern above is the &lt;a href=&quot;https://philipwalton.com/articles/deploying-es2015-code-in-production-today/&quot;&gt;module/nomodule pattern&lt;/a&gt; that will result in the modern bundle automatically loaded on modern browsers, and the IE11 bundle loaded automatically on IE11 and other legacy browsers.&lt;/p&gt; 
&lt;h2&gt;Use&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Dropdown/Modal&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{ open: false }&quot;&amp;gt;
    &amp;lt;button @click=&quot;open = true&quot;&amp;gt;Open Dropdown&amp;lt;/button&amp;gt;

    &amp;lt;ul
        x-show=&quot;open&quot;
        @click.away=&quot;open = false&quot;
    &amp;gt;
        Dropdown Body
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Tabs&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{ tab: &#39;foo&#39; }&quot;&amp;gt;
    &amp;lt;button :class=&quot;{ &#39;active&#39;: tab === &#39;foo&#39; }&quot; @click=&quot;tab = &#39;foo&#39;&quot;&amp;gt;Foo&amp;lt;/button&amp;gt;
    &amp;lt;button :class=&quot;{ &#39;active&#39;: tab === &#39;bar&#39; }&quot; @click=&quot;tab = &#39;bar&#39;&quot;&amp;gt;Bar&amp;lt;/button&amp;gt;

    &amp;lt;div x-show=&quot;tab === &#39;foo&#39;&quot;&amp;gt;Tab Foo&amp;lt;/div&amp;gt;
    &amp;lt;div x-show=&quot;tab === &#39;bar&#39;&quot;&amp;gt;Tab Bar&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can even use it for non-trivial things: &lt;em&gt;Pre-fetching a dropdown&#39;s HTML content on hover.&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{ open: false }&quot;&amp;gt;
    &amp;lt;button
        @mouseenter.once=&quot;
            fetch(&#39;/dropdown-partial.html&#39;)
                .then(response =&amp;gt; response.text())
                .then(html =&amp;gt; { $refs.dropdown.innerHTML = html })
        &quot;
        @click=&quot;open = true&quot;
    &amp;gt;Show Dropdown&amp;lt;/button&amp;gt;

    &amp;lt;div x-ref=&quot;dropdown&quot; x-show=&quot;open&quot; @click.away=&quot;open = false&quot;&amp;gt;
        Loading Spinner...
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Learn&lt;/h2&gt; 
&lt;p&gt;There are 14 directives available to you:&lt;/p&gt; 
&lt;p&gt;| Directive | Description | | --- | --- | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-data&quot;&gt;&lt;code&gt;x-data&lt;/code&gt;&lt;/a&gt; | Declares a new component scope. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-init&quot;&gt;&lt;code&gt;x-init&lt;/code&gt;&lt;/a&gt; | Runs an expression when a component is initialized. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-show&quot;&gt;&lt;code&gt;x-show&lt;/code&gt;&lt;/a&gt; | Toggles &lt;code&gt;display: none;&lt;/code&gt; on the element depending on expression (true or false). | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-bind&quot;&gt;&lt;code&gt;x-bind&lt;/code&gt;&lt;/a&gt; | Sets the value of an attribute to the result of a JS expression. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-on&quot;&gt;&lt;code&gt;x-on&lt;/code&gt;&lt;/a&gt; | Attaches an event listener to the element. Executes JS expression when emitted. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-model&quot;&gt;&lt;code&gt;x-model&lt;/code&gt;&lt;/a&gt; | Adds &quot;two-way data binding&quot; to an element. Keeps input element in sync with component data. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-text&quot;&gt;&lt;code&gt;x-text&lt;/code&gt;&lt;/a&gt; | Works similarly to &lt;code&gt;x-bind&lt;/code&gt;, but will update the &lt;code&gt;innerText&lt;/code&gt; of an element. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-html&quot;&gt;&lt;code&gt;x-html&lt;/code&gt;&lt;/a&gt; | Works similarly to &lt;code&gt;x-bind&lt;/code&gt;, but will update the &lt;code&gt;innerHTML&lt;/code&gt; of an element. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-ref&quot;&gt;&lt;code&gt;x-ref&lt;/code&gt;&lt;/a&gt; | Convenient way to retrieve raw DOM elements out of your component. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-if&quot;&gt;&lt;code&gt;x-if&lt;/code&gt;&lt;/a&gt; | Remove an element completely from the DOM. Needs to be used on a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-for&quot;&gt;&lt;code&gt;x-for&lt;/code&gt;&lt;/a&gt; | Create new DOM nodes for each item in an array. Needs to be used on a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-transition&quot;&gt;&lt;code&gt;x-transition&lt;/code&gt;&lt;/a&gt; | Directives for applying classes to various stages of an element&#39;s transition. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-spread&quot;&gt;&lt;code&gt;x-spread&lt;/code&gt;&lt;/a&gt; | Allows you to bind an object of Alpine directives to an element for better reusability. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#x-cloak&quot;&gt;&lt;code&gt;x-cloak&lt;/code&gt;&lt;/a&gt; | This attribute is removed when Alpine initializes. Useful for hiding pre-initialized DOM. |&lt;/p&gt; 
&lt;p&gt;And 6 magic properties:&lt;/p&gt; 
&lt;p&gt;| Magic Properties | Description | | --- | --- | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#el&quot;&gt;&lt;code&gt;$el&lt;/code&gt;&lt;/a&gt; | Retrieve the root component DOM node. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#refs&quot;&gt;&lt;code&gt;$refs&lt;/code&gt;&lt;/a&gt; | Retrieve DOM elements marked with &lt;code&gt;x-ref&lt;/code&gt; inside the component. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#event&quot;&gt;&lt;code&gt;$event&lt;/code&gt;&lt;/a&gt; | Retrieve the native browser &quot;Event&quot; object within an event listener. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#dispatch&quot;&gt;&lt;code&gt;$dispatch&lt;/code&gt;&lt;/a&gt; | Create a &lt;code&gt;CustomEvent&lt;/code&gt; and dispatch it using &lt;code&gt;.dispatchEvent()&lt;/code&gt; internally. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#nexttick&quot;&gt;&lt;code&gt;$nextTick&lt;/code&gt;&lt;/a&gt; | Execute a given expression AFTER Alpine has made its reactive DOM updates. | | &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/#watch&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; | Will fire a provided callback when a component property you &quot;watched&quot; gets changed. |&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;Want your logo here? &lt;a href=&quot;https://twitter.com/calebporzio&quot;&gt;DM on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Community Projects&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://alpinejs.codewithhugo.com/newsletter/&quot;&gt;AlpineJS Weekly Newsletter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ryangjchandler/spruce&quot;&gt;Spruce (State Management)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SimoTod/alpine-turbolinks-adapter&quot;&gt;Turbolinks Adapter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/KevinBatdorf/alpine-magic-helpers&quot;&gt;Alpine Magic Helpers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ryangjchandler/awesome-alpine&quot;&gt;Awesome Alpine&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Directives&lt;/h3&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-data&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-data=&quot;{ foo: &#39;bar&#39; }&quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-data=&quot;[object literal]&quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-data&lt;/code&gt; declares a new component scope. It tells the framework to initialize a new component with the following data object.&lt;/p&gt; 
&lt;p&gt;Think of it like the &lt;code&gt;data&lt;/code&gt; property of a Vue component.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Extract Component Logic&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can extract data (and behavior) into reusable functions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;dropdown()&quot;&amp;gt;
    &amp;lt;button x-on:click=&quot;open&quot;&amp;gt;Open&amp;lt;/button&amp;gt;

    &amp;lt;div x-show=&quot;isOpen()&quot; x-on:click.away=&quot;close&quot;&amp;gt;
        // Dropdown
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
    function dropdown() {
        return {
            show: false,
            open() { this.show = true },
            close() { this.show = false },
            isOpen() { return this.show === true },
        }
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;For bundler users&lt;/strong&gt;, note that Alpine.js accesses functions that are in the global scope (&lt;code&gt;window&lt;/code&gt;), you&#39;ll need to explicitly assign your functions to &lt;code&gt;window&lt;/code&gt; in order to use them with &lt;code&gt;x-data&lt;/code&gt; for example &lt;code&gt;window.dropdown = function () {}&lt;/code&gt; (this is because with Webpack, Rollup, Parcel etc. &lt;code&gt;function&lt;/code&gt;&#39;s you define will default to the module&#39;s scope not &lt;code&gt;window&lt;/code&gt;).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can also mix-in multiple data objects using object destructuring:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{...dropdown(), ...tabs()}&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-init&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-data=&quot;{ foo: &#39;bar&#39; }&quot; x-init=&quot;foo = &#39;baz&#39;&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-data=&quot;...&quot; x-init=&quot;[expression]&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-init&lt;/code&gt; runs an expression when a component is initialized.&lt;/p&gt; 
&lt;p&gt;If you wish to run code AFTER Alpine has made its initial updates to the DOM (something like a &lt;code&gt;mounted()&lt;/code&gt; hook in VueJS), you can return a callback from &lt;code&gt;x-init&lt;/code&gt;, and it will be run after:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-init=&quot;() =&amp;gt; { // we have access to the post-dom-initialization state here // }&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-show&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-show=&quot;open&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-show=&quot;[expression]&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-show&lt;/code&gt; toggles the &lt;code&gt;display: none;&lt;/code&gt; style on the element depending if the expression resolves to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;x-show.transition&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-show.transition&lt;/code&gt; is a convenience API for making your &lt;code&gt;x-show&lt;/code&gt;s more pleasant using CSS transitions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-show.transition=&quot;open&quot;&amp;gt;
    These contents will be transitioned in and out.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;| Directive | Description | | --- | --- | | &lt;code&gt;x-show.transition&lt;/code&gt; | A simultaneous fade and scale. (opacity, scale: 0.95, timing-function: cubic-bezier(0.4, 0.0, 0.2, 1), duration-in: 150ms, duration-out: 75ms) | &lt;code&gt;x-show.transition.in&lt;/code&gt; | Only transition in. | | &lt;code&gt;x-show.transition.out&lt;/code&gt; | Only transition out. | | &lt;code&gt;x-show.transition.opacity&lt;/code&gt; | Only use the fade. | | &lt;code&gt;x-show.transition.scale&lt;/code&gt; | Only use the scale. | | &lt;code&gt;x-show.transition.scale.75&lt;/code&gt; | Customize the CSS scale transform &lt;code&gt;transform: scale(.75)&lt;/code&gt;. | | &lt;code&gt;x-show.transition.duration.200ms&lt;/code&gt; | Sets the &quot;in&quot; transition to 200ms. The out will be set to half that (100ms). | | &lt;code&gt;x-show.transition.origin.top.right&lt;/code&gt; | Customize the CSS transform origin &lt;code&gt;transform-origin: top right&lt;/code&gt;. | | &lt;code&gt;x-show.transition.in.duration.200ms.out.duration.50ms&lt;/code&gt; | Different durations for &quot;in&quot; and &quot;out&quot;. |&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: All of these transition modifiers can be used in conjunction with each other. This is possible (although ridiculous lol): &lt;code&gt;x-show.transition.in.duration.100ms.origin.top.right.opacity.scale.85.out.duration.200ms.origin.bottom.left.opacity.scale.95&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: &lt;code&gt;x-show&lt;/code&gt; will wait for any children to finish transitioning out. If you want to bypass this behavior, add the &lt;code&gt;.immediate&lt;/code&gt; modifer:&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-show.immediate=&quot;open&quot;&amp;gt;
    &amp;lt;div x-show.transition=&quot;open&quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-bind&lt;/code&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: You are free to use the shorter &quot;:&quot; syntax: &lt;code&gt;:type=&quot;...&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;input x-bind:type=&quot;inputType&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;input x-bind:[attribute]=&quot;[expression]&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-bind&lt;/code&gt; sets the value of an attribute to the result of a JavaScript expression. The expression has access to all the keys of the component&#39;s data object, and will update every-time its data is updated.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: attribute bindings ONLY update when their dependencies update. The framework is smart enough to observe data changes and detect which bindings care about them.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;x-bind&lt;/code&gt; for class attributes&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-bind&lt;/code&gt; behaves a little differently when binding to the &lt;code&gt;class&lt;/code&gt; attribute.&lt;/p&gt; 
&lt;p&gt;For classes, you pass in an object whose keys are class names, and values are boolean expressions to determine if those class names are applied or not.&lt;/p&gt; 
&lt;p&gt;For example: &lt;code&gt;&amp;lt;div x-bind:class=&quot;{ &#39;hidden&#39;: foo }&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;In this example, the &quot;hidden&quot; class will only be applied when the value of the &lt;code&gt;foo&lt;/code&gt; data attribute is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;x-bind&lt;/code&gt; for boolean attributes&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-bind&lt;/code&gt; supports boolean attributes in the same way as value attributes, using a variable as the condition or any JavaScript expression that resolves to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Given: --&amp;gt;
&amp;lt;button x-bind:disabled=&quot;myVar&quot;&amp;gt;Click me&amp;lt;/button&amp;gt;

&amp;lt;!-- When myVar == true: --&amp;gt;
&amp;lt;button disabled=&quot;disabled&quot;&amp;gt;Click me&amp;lt;/button&amp;gt;

&amp;lt;!-- When myVar == false: --&amp;gt;
&amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will add or remove the &lt;code&gt;disabled&lt;/code&gt; attribute when &lt;code&gt;myVar&lt;/code&gt; is true or false respectively.&lt;/p&gt; 
&lt;p&gt;Boolean attributes are supported as per the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/indices.html#attributes-3:boolean-attribute&quot;&gt;HTML specification&lt;/a&gt;, for example &lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;readonly&lt;/code&gt;, &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;checked&lt;/code&gt;, &lt;code&gt;hidden&lt;/code&gt;, &lt;code&gt;selected&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt;, etc.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you need a false state to show for your attribute, such as &lt;code&gt;aria-*&lt;/code&gt;, chain &lt;code&gt;.toString()&lt;/code&gt; to the value while binding to the attribute. For example: &lt;code&gt;:aria-expanded=&quot;isOpen.toString()&quot;&lt;/code&gt; would persist whether &lt;code&gt;isOpen&lt;/code&gt; was &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.camel&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;svg x-bind:view-box.camel=&quot;viewBox&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;camel&lt;/code&gt; modifier will bind to the camel case equivalent of the attribute name. In the example above, the value of &lt;code&gt;viewBox&lt;/code&gt; will be bound the &lt;code&gt;viewBox&lt;/code&gt; attribute as opposed to the &lt;code&gt;view-box&lt;/code&gt; attribute.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-on&lt;/code&gt;&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: You are free to use the shorter &quot;@&quot; syntax: &lt;code&gt;@click=&quot;...&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;button x-on:click=&quot;foo = &#39;bar&#39;&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;button x-on:[event]=&quot;[expression]&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-on&lt;/code&gt; attaches an event listener to the element it&#39;s declared on. When that event is emitted, the JavaScript expression set as its value is executed. You can use &lt;code&gt;x-on&lt;/code&gt; with any event available for the element you&#39;re adding the directive on, for a full list of events, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;the Event reference on MDN&lt;/a&gt; for a list of possible values.&lt;/p&gt; 
&lt;p&gt;If any data is modified in the expression, other element attributes &quot;bound&quot; to this data, will be updated.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: You can also specify a JavaScript function name.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;button x-on:click=&quot;myFunction&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;This is equivalent to: &lt;code&gt;&amp;lt;button x-on:click=&quot;myFunction($event)&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;keydown&lt;/code&gt; modifiers&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;input type=&quot;text&quot; x-on:keydown.escape=&quot;open = false&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;You can specify specific keys to listen for using keydown modifiers appended to the &lt;code&gt;x-on:keydown&lt;/code&gt; directive. Note that the modifiers are kebab-cased versions of &lt;code&gt;Event.key&lt;/code&gt; values.&lt;/p&gt; 
&lt;p&gt;Examples: &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;escape&lt;/code&gt;, &lt;code&gt;arrow-up&lt;/code&gt;, &lt;code&gt;arrow-down&lt;/code&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: You can also listen for system-modifier key combinations like: &lt;code&gt;x-on:keydown.cmd.enter=&quot;foo&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.away&lt;/code&gt; modifier&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-on:click.away=&quot;showModal = false&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;When the &lt;code&gt;.away&lt;/code&gt; modifier is present, the event handler will only be executed when the event originates from a source other than itself, or its children.&lt;/p&gt; 
&lt;p&gt;This is useful for hiding dropdowns and modals when a user clicks away from them.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.prevent&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot; x-on:click.prevent&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Adding &lt;code&gt;.prevent&lt;/code&gt; to an event listener will call &lt;code&gt;preventDefault&lt;/code&gt; on the triggered event. In the above example, this means the checkbox wouldn&#39;t actually get checked when a user clicks on it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.stop&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-on:click=&quot;foo = &#39;bar&#39;&quot;&amp;gt;&amp;lt;button x-on:click.stop&amp;gt;&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Adding &lt;code&gt;.stop&lt;/code&gt; to an event listener will call &lt;code&gt;stopPropagation&lt;/code&gt; on the triggered event. In the above example, this means the &quot;click&quot; event won&#39;t bubble from the button to the outer &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. Or in other words, when a user clicks the button, &lt;code&gt;foo&lt;/code&gt; won&#39;t be set to &lt;code&gt;&#39;bar&#39;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.self&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-on:click.self=&quot;foo = &#39;bar&#39;&quot;&amp;gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Adding &lt;code&gt;.self&lt;/code&gt; to an event listener will only trigger the handler if the &lt;code&gt;$event.target&lt;/code&gt; is the element itself. In the above example, this means the &quot;click&quot; event that bubbles from the button to the outer &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; run the handler.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.window&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-on:resize.window=&quot;isOpen = window.outerWidth &amp;gt; 768 ? false : open&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Adding &lt;code&gt;.window&lt;/code&gt; to an event listener will install the listener on the global window object instead of the DOM node on which it is declared. This is useful for when you want to modify component state when something changes with the window, like the resize event. In this example, when the window grows larger than 768 pixels wide, we will close the modal/dropdown, otherwise maintain the same state.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: You can also use the &lt;code&gt;.document&lt;/code&gt; modifier to attach listeners to &lt;code&gt;document&lt;/code&gt; instead of &lt;code&gt;window&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.once&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;button x-on:mouseenter.once=&quot;fetchSomething()&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Adding the &lt;code&gt;.once&lt;/code&gt; modifier to an event listener will ensure that the listener will only be handled once. This is useful for things you only want to do once, like fetching HTML partials and such.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.passive&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;button x-on:mousedown.passive=&quot;interactive = true&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Adding the &lt;code&gt;.passive&lt;/code&gt; modifier to an event listener will make the listener a passive one, which means &lt;code&gt;preventDefault()&lt;/code&gt; will not work on any events being processed, this can help, for example with scroll performance on touch devices.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.debounce&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;input x-on:input.debounce=&quot;fetchSomething()&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;debounce&lt;/code&gt; modifier allows you to &quot;debounce&quot; an event handler. In other words, the event handler will NOT run until a certain amount of time has elapsed since the last event that fired. When the handler is ready to be called, the last handler call will execute.&lt;/p&gt; 
&lt;p&gt;The default debounce &quot;wait&quot; time is 250 milliseconds.&lt;/p&gt; 
&lt;p&gt;If you wish to customize this, you can specify a custom wait time like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;input x-on:input.debounce.750=&quot;fetchSomething()&quot;&amp;gt;
&amp;lt;input x-on:input.debounce.750ms=&quot;fetchSomething()&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.camel&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;input x-on:event-name.camel=&quot;doSomething()&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;camel&lt;/code&gt; modifier will attach an event listener for the camel case equivalent event name. In the example above, the expression will be evaluated when the &lt;code&gt;eventName&lt;/code&gt; event is fired on the element.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-model&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;input type=&quot;text&quot; x-model=&quot;foo&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;input type=&quot;text&quot; x-model=&quot;[data item]&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-model&lt;/code&gt; adds &quot;two-way data binding&quot; to an element. In other words, the value of the input element will be kept in sync with the value of the data item of the component.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: &lt;code&gt;x-model&lt;/code&gt; is smart enough to detect changes on text inputs, checkboxes, radio buttons, textareas, selects, and multiple selects. It should behave &lt;a href=&quot;https://vuejs.org/v2/guide/forms.html&quot;&gt;how Vue would&lt;/a&gt; in those scenarios.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.number&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;input x-model.number=&quot;age&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;number&lt;/code&gt; modifier will convert the input&#39;s value to a number. If the value cannot be parsed as a valid number, the original value is returned.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.debounce&lt;/code&gt; modifier&lt;/strong&gt; &lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;input x-model.debounce=&quot;search&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;debounce&lt;/code&gt; modifier allows you to add a &quot;debounce&quot; to a value update. In other words, the event handler will NOT run until a certain amount of time has elapsed since the last event that fired. When the handler is ready to be called, the last handler call will execute.&lt;/p&gt; 
&lt;p&gt;The default debounce &quot;wait&quot; time is 250 milliseconds.&lt;/p&gt; 
&lt;p&gt;If you wish to customize this, you can specifiy a custom wait time like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;input x-model.debounce.750=&quot;search&quot;&amp;gt;
&amp;lt;input x-model.debounce.750ms=&quot;search&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-text&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;span x-text=&quot;foo&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;span x-text=&quot;[expression]&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-text&lt;/code&gt; works similarly to &lt;code&gt;x-bind&lt;/code&gt;, except instead of updating the value of an attribute, it will update the &lt;code&gt;innerText&lt;/code&gt; of an element.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-html&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;span x-html=&quot;foo&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;span x-html=&quot;[expression]&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-html&lt;/code&gt; works similarly to &lt;code&gt;x-bind&lt;/code&gt;, except instead of updating the value of an attribute, it will update the &lt;code&gt;innerHTML&lt;/code&gt; of an element.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;:warning: &lt;strong&gt;Only use on trusted content and never on user-provided content.&lt;/strong&gt; :warning:&lt;/p&gt; 
 &lt;p&gt;Dynamically rendering HTML from third parties can easily lead to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting&quot;&gt;XSS&lt;/a&gt; vulnerabilities.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-ref&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-ref=&quot;foo&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;button x-on:click=&quot;$refs.foo.innerText = &#39;bar&#39;&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-ref=&quot;[ref name]&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;button x-on:click=&quot;$refs.[ref name].innerText = &#39;bar&#39;&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-ref&lt;/code&gt; provides a convenient way to retrieve raw DOM elements out of your component. By setting an &lt;code&gt;x-ref&lt;/code&gt; attribute on an element, you are making it available to all event handlers inside an object called &lt;code&gt;$refs&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;This is a helpful alternative to setting ids and using &lt;code&gt;document.querySelector&lt;/code&gt; all over the place.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: you can also bind dynamic values for x-ref: &lt;code&gt;&amp;lt;span :x-ref=&quot;item.id&quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; if you need to.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-if&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;template x-if=&quot;true&quot;&amp;gt;&amp;lt;div&amp;gt;Some Element&amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Structure:&lt;/strong&gt; &lt;code&gt;&amp;lt;template x-if=&quot;[expression]&quot;&amp;gt;&amp;lt;div&amp;gt;Some Element&amp;lt;/div&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;For cases where &lt;code&gt;x-show&lt;/code&gt; isn&#39;t sufficient (&lt;code&gt;x-show&lt;/code&gt; sets an element to &lt;code&gt;display: none&lt;/code&gt; if it&#39;s false), &lt;code&gt;x-if&lt;/code&gt; can be used to actually remove an element completely from the DOM.&lt;/p&gt; 
&lt;p&gt;It&#39;s important that &lt;code&gt;x-if&lt;/code&gt; is used on a &lt;code&gt;&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt; tag because Alpine doesn&#39;t use a virtual DOM. This implementation allows Alpine to stay rugged and use the real DOM to work its magic.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: &lt;code&gt;x-if&lt;/code&gt; must have a single root element inside the &lt;code&gt;&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt; tag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: When using &lt;code&gt;template&lt;/code&gt; in a &lt;code&gt;svg&lt;/code&gt; tag, you need to add a &lt;a href=&quot;https://github.com/alpinejs/alpine/issues/637#issuecomment-654856538&quot;&gt;polyfill&lt;/a&gt; that should be run before Alpine.js is initialized.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-for&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template x-for=&quot;item in items&quot; :key=&quot;item&quot;&amp;gt;
    &amp;lt;div x-text=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: the &lt;code&gt;:key&lt;/code&gt; binding is optional, but HIGHLY recommended.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;code&gt;x-for&lt;/code&gt; is available for cases when you want to create new DOM nodes for each item in an array. This should appear similar to &lt;code&gt;v-for&lt;/code&gt; in Vue, with one exception of needing to exist on a &lt;code&gt;template&lt;/code&gt; tag, and not a regular DOM element.&lt;/p&gt; 
&lt;p&gt;If you want to access the current index of the iteration, use the following syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template x-for=&quot;(item, index) in items&quot; :key=&quot;index&quot;&amp;gt;
    &amp;lt;!-- You can also reference &quot;index&quot; inside the iteration if you need. --&amp;gt;
    &amp;lt;div x-text=&quot;index&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to access the array object (collection) of the iteration, use the following syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template x-for=&quot;(item, index, collection) in items&quot; :key=&quot;index&quot;&amp;gt;
    &amp;lt;!-- You can also reference &quot;collection&quot; inside the iteration if you need. --&amp;gt;
    &amp;lt;!-- Current item. --&amp;gt;
    &amp;lt;div x-text=&quot;item&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;!-- Same as above. --&amp;gt;
    &amp;lt;div x-text=&quot;collection[index]&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;!-- Previous item. --&amp;gt;
    &amp;lt;div x-text=&quot;collection[index - 1]&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: &lt;code&gt;x-for&lt;/code&gt; must have a single root element inside of the &lt;code&gt;&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt; tag.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: When using &lt;code&gt;template&lt;/code&gt; in a &lt;code&gt;svg&lt;/code&gt; tag, you need to add a &lt;a href=&quot;https://github.com/alpinejs/alpine/issues/637#issuecomment-654856538&quot;&gt;polyfill&lt;/a&gt; that should be run before Alpine.js is initialized.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Nesting &lt;code&gt;x-for&lt;/code&gt;s&lt;/h4&gt; 
&lt;p&gt;You can nest &lt;code&gt;x-for&lt;/code&gt; loops, but you MUST wrap each loop in an element. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template x-for=&quot;item in items&quot;&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;template x-for=&quot;subItem in item.subItems&quot;&amp;gt;
            &amp;lt;div x-text=&quot;subItem&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/template&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Iterating over a range&lt;/h4&gt; 
&lt;p&gt;Alpine supports the &lt;code&gt;i in n&lt;/code&gt; syntax, where &lt;code&gt;n&lt;/code&gt; is an integer, allowing you to iterate over a fixed range of elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template x-for=&quot;i in 10&quot;&amp;gt;
    &amp;lt;span x-text=&quot;i&quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-transition&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div
    x-show=&quot;open&quot;
    x-transition:enter=&quot;transition ease-out duration-300&quot;
    x-transition:enter-start=&quot;opacity-0 transform scale-90&quot;
    x-transition:enter-end=&quot;opacity-100 transform scale-100&quot;
    x-transition:leave=&quot;transition ease-in duration-300&quot;
    x-transition:leave-start=&quot;opacity-100 transform scale-100&quot;
    x-transition:leave-end=&quot;opacity-0 transform scale-90&quot;
&amp;gt;...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template x-if=&quot;open&quot;&amp;gt;
    &amp;lt;div
        x-transition:enter=&quot;transition ease-out duration-300&quot;
        x-transition:enter-start=&quot;opacity-0 transform scale-90&quot;
        x-transition:enter-end=&quot;opacity-100 transform scale-100&quot;
        x-transition:leave=&quot;transition ease-in duration-300&quot;
        x-transition:leave-start=&quot;opacity-100 transform scale-100&quot;
        x-transition:leave-end=&quot;opacity-0 transform scale-90&quot;
    &amp;gt;...&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The example above uses classes from &lt;a href=&quot;https://tailwindcss.com&quot;&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Alpine offers 6 different transition directives for applying classes to various stages of an element&#39;s transition between &quot;hidden&quot; and &quot;shown&quot; states. These directives work both with &lt;code&gt;x-show&lt;/code&gt; AND &lt;code&gt;x-if&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;These behave exactly like VueJS&#39;s transition directives, except they have different, more sensible names:&lt;/p&gt; 
&lt;p&gt;| Directive | Description | | --- | --- | | &lt;code&gt;:enter&lt;/code&gt; | Applied during the entire entering phase. | | &lt;code&gt;:enter-start&lt;/code&gt; | Added before element is inserted, removed one frame after element is inserted. | | &lt;code&gt;:enter-end&lt;/code&gt; | Added one frame after element is inserted (at the same time &lt;code&gt;enter-start&lt;/code&gt; is removed), removed when transition/animation finishes. | &lt;code&gt;:leave&lt;/code&gt; | Applied during the entire leaving phase. | | &lt;code&gt;:leave-start&lt;/code&gt; | Added immediately when a leaving transition is triggered, removed after one frame. | | &lt;code&gt;:leave-end&lt;/code&gt; | Added one frame after a leaving transition is triggered (at the same time &lt;code&gt;leave-start&lt;/code&gt; is removed), removed when the transition/animation finishes.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-spread&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;dropdown()&quot;&amp;gt;
    &amp;lt;button x-spread=&quot;trigger&quot;&amp;gt;Open Dropdown&amp;lt;/button&amp;gt;

    &amp;lt;span x-spread=&quot;dialogue&quot;&amp;gt;Dropdown Contents&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
    function dropdown() {
        return {
            open: false,
            trigger: {
                [&#39;@click&#39;]() {
                    this.open = true
                },
            },
            dialogue: {
                [&#39;x-show&#39;]() {
                    return this.open
                },
                [&#39;@click.away&#39;]() {
                    this.open = false
                },
            }
        }
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;x-spread&lt;/code&gt; allows you to extract an element&#39;s Alpine bindings into a reusable object.&lt;/p&gt; 
&lt;p&gt;The object keys are the directives (Can be any directive including modifiers), and the values are callbacks to be evaluated by Alpine.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: There are a couple of caveats to x-spread:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;When the directive being &quot;spread&quot; is &lt;code&gt;x-for&lt;/code&gt;, you should return a normal expression string from the callback. For example: &lt;code&gt;[&#39;x-for&#39;]() { return &#39;item in items&#39; }&lt;/code&gt;.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;x-data&lt;/code&gt; and &lt;code&gt;x-init&lt;/code&gt; can&#39;t be used inside a &quot;spread&quot; object.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;x-cloak&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;&amp;lt;div x-data=&quot;{}&quot; x-cloak&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;x-cloak&lt;/code&gt; attributes are removed from elements when Alpine initializes. This is useful for hiding pre-initialized DOM. It&#39;s typical to add the following global style for this to work:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;style&amp;gt;
    [x-cloak] { display: none; }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Magic Properties&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;With the exception of &lt;code&gt;$el&lt;/code&gt;, magic properties are &lt;strong&gt;not available within &lt;code&gt;x-data&lt;/code&gt;&lt;/strong&gt; as the component isn&#39;t initialized yet.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;$el&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data&amp;gt;
    &amp;lt;button @click=&quot;$el.innerHTML = &#39;foo&#39;&quot;&amp;gt;Replace me with &quot;foo&quot;&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;$el&lt;/code&gt; is a magic property that can be used to retrieve the root component DOM node.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;$refs&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span x-ref=&quot;foo&quot;&amp;gt;&amp;lt;/span&amp;gt;

&amp;lt;button x-on:click=&quot;$refs.foo.innerText = &#39;bar&#39;&quot;&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;$refs&lt;/code&gt; is a magic property that can be used to retrieve DOM elements marked with &lt;code&gt;x-ref&lt;/code&gt; inside the component. This is useful when you need to manually manipulate DOM elements.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;$event&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input x-on:input=&quot;alert($event.target.value)&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;$event&lt;/code&gt; is a magic property that can be used within an event listener to retrieve the native browser &quot;Event&quot; object.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: The $event property is only available in DOM expressions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you need to access $event inside of a JavaScript function you can pass it in directly:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;button x-on:click=&quot;myFunction($event)&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;$dispatch&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div @custom-event=&quot;console.log($event.detail.foo)&quot;&amp;gt;
    &amp;lt;button @click=&quot;$dispatch(&#39;custom-event&#39;, { foo: &#39;bar&#39; })&quot;&amp;gt;
    &amp;lt;!-- When clicked, will console.log &quot;bar&quot; --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note on Event Propagation&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Notice that, because of &lt;a href=&quot;https://en.wikipedia.org/wiki/Event_bubbling&quot;&gt;event bubbling&lt;/a&gt;, when you need to capture events dispatched from nodes that are under the same nesting hierarchy, you&#39;ll need to use the &lt;a href=&quot;https://github.com/alpinejs/alpine#x-on&quot;&gt;&lt;code&gt;.window&lt;/code&gt;&lt;/a&gt; modifier:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data&amp;gt;
    &amp;lt;span @custom-event=&quot;console.log($event.detail.foo)&quot;&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;button @click=&quot;$dispatch(&#39;custom-event&#39;, { foo: &#39;bar&#39; })&quot;&amp;gt;
&amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This won&#39;t work because when &lt;code&gt;custom-event&lt;/code&gt; is dispatched, it&#39;ll propagate to its common ancestor, the &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;Dispatching to Components&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can also take advantage of the previous technique to make your components talk to each other:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data @custom-event.window=&quot;console.log($event.detail)&quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;button x-data @click=&quot;$dispatch(&#39;custom-event&#39;, &#39;Hello World!&#39;)&quot;&amp;gt;
&amp;lt;!-- When clicked, will console.log &quot;Hello World!&quot;. --&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;$dispatch&lt;/code&gt; is a shortcut for creating a &lt;code&gt;CustomEvent&lt;/code&gt; and dispatching it using &lt;code&gt;.dispatchEvent()&lt;/code&gt; internally. There are lots of good use cases for passing data around and between components using custom events. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events&quot;&gt;Read here&lt;/a&gt; for more information on the underlying &lt;code&gt;CustomEvent&lt;/code&gt; system in browsers.&lt;/p&gt; 
&lt;p&gt;You will notice that any data passed as the second parameter to &lt;code&gt;$dispatch(&#39;some-event&#39;, { some: &#39;data&#39; })&lt;/code&gt;, becomes available through the new events &quot;detail&quot; property: &lt;code&gt;$event.detail.some&lt;/code&gt;. Attaching custom event data to the &lt;code&gt;.detail&lt;/code&gt; property is standard practice for &lt;code&gt;CustomEvent&lt;/code&gt;s in browsers. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail&quot;&gt;Read here&lt;/a&gt; for more info.&lt;/p&gt; 
&lt;p&gt;You can also use &lt;code&gt;$dispatch()&lt;/code&gt; to trigger data updates for &lt;code&gt;x-model&lt;/code&gt; bindings. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{ foo: &#39;bar&#39; }&quot;&amp;gt;
    &amp;lt;span x-model=&quot;foo&quot;&amp;gt;
        &amp;lt;button @click=&quot;$dispatch(&#39;input&#39;, &#39;baz&#39;)&quot;&amp;gt;
        &amp;lt;!-- After the button is clicked, `x-model` will catch the bubbling &quot;input&quot; event, and update foo to &quot;baz&quot;. --&amp;gt;
    &amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: The $dispatch property is only available in DOM expressions.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If you need to access $dispatch inside of a JavaScript function you can pass it in directly:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;button x-on:click=&quot;myFunction($dispatch)&quot;&amp;gt;&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;$nextTick&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{ fruit: &#39;apple&#39; }&quot;&amp;gt;
    &amp;lt;button
        x-on:click=&quot;
            fruit = &#39;pear&#39;;
            $nextTick(() =&amp;gt; { console.log($event.target.innerText) });
        &quot;
        x-text=&quot;fruit&quot;
    &amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;$nextTick&lt;/code&gt; is a magic property that allows you to only execute a given expression AFTER Alpine has made its reactive DOM updates. This is useful for times you want to interact with the DOM state AFTER it&#39;s reflected any data updates you&#39;ve made.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{ open: false }&quot; x-init=&quot;$watch(&#39;open&#39;, value =&amp;gt; console.log(value))&quot;&amp;gt;
    &amp;lt;button @click=&quot;open = ! open&quot;&amp;gt;Toggle Open&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can &quot;watch&quot; a component property with the &lt;code&gt;$watch&lt;/code&gt; magic method. In the above example, when the button is clicked and &lt;code&gt;open&lt;/code&gt; is changed, the provided callback will fire and &lt;code&gt;console.log&lt;/code&gt; the new value.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you find a security vulnerability, please send an email to &lt;a href=&quot;&quot;&gt;calebporzio@gmail.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Alpine relies on a custom implementation using the &lt;code&gt;Function&lt;/code&gt; object to evaluate its directives. Despite being more secure then &lt;code&gt;eval()&lt;/code&gt;, its use is prohibited in some environments, such as Google Chrome App, using restrictive Content Security Policy (CSP).&lt;/p&gt; 
&lt;p&gt;If you use Alpine in a website dealing with sensitive data and requiring &lt;a href=&quot;https://csp.withgoogle.com/docs/strict-csp.html&quot;&gt;CSP&lt;/a&gt;, you need to include &lt;code&gt;unsafe-eval&lt;/code&gt; in your policy. A robust policy correctly configured will help protecting your users when using personal or financial data.&lt;/p&gt; 
&lt;p&gt;Since a policy applies to all scripts in your page, it&#39;s important that other external libraries included in the website are carefully reviewed to ensure that they are trustworthy and they won&#39;t introduce any Cross Site Scripting vulnerability either using the &lt;code&gt;eval()&lt;/code&gt; function or manipulating the DOM to inject malicious code in your page.&lt;/p&gt; 
&lt;h2&gt;V3 Roadmap&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Move from &lt;code&gt;x-ref&lt;/code&gt; to &lt;code&gt;ref&lt;/code&gt; for Vue parity?&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;Alpine.directive()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;Alpine.component(&#39;foo&#39;, {...})&lt;/code&gt; (With magic &lt;code&gt;__init()&lt;/code&gt; method)&lt;/li&gt; 
 &lt;li&gt;Dispatch Alpine events for &quot;loaded&quot;, &quot;transition-start&quot;, etc... (&lt;a href=&quot;https://github.com/alpinejs/alpine/pull/299&quot;&gt;#299&lt;/a&gt;) ?&lt;/li&gt; 
 &lt;li&gt;Remove &quot;object&quot; (and array) syntax from &lt;code&gt;x-bind:class=&quot;{ &#39;foo&#39;: true }&quot;&lt;/code&gt; (&lt;a href=&quot;https://github.com/alpinejs/alpine/pull/236&quot;&gt;#236&lt;/a&gt; to add support for object syntax for the &lt;code&gt;style&lt;/code&gt; attribute)&lt;/li&gt; 
 &lt;li&gt;Improve &lt;code&gt;x-for&lt;/code&gt; mutation reactivity (&lt;a href=&quot;https://github.com/alpinejs/alpine/pull/165&quot;&gt;#165&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Add &quot;deep watching&quot; support in V3 (&lt;a href=&quot;https://github.com/alpinejs/alpine/pull/294&quot;&gt;#294&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;$el&lt;/code&gt; shortcut&lt;/li&gt; 
 &lt;li&gt;Change &lt;code&gt;@click.away&lt;/code&gt; to &lt;code&gt;@click.outside&lt;/code&gt;?&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright © 2019-2020 Caleb Porzio and contributors&lt;/p&gt; 
&lt;p&gt;Licensed under the MIT license, see &lt;a href=&quot;https://raw.githubusercontent.com/alpinejs/alpine/master/LICENSE.md&quot;&gt;LICENSE.md&lt;/a&gt; for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jgraph/drawio-desktop</title>
      <link>https://github.com/jgraph/drawio-desktop</link>
      <description>&lt;p&gt;Official electron build of diagrams.net&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;drawio-desktop&lt;/strong&gt; is a &lt;strong&gt;diagrams.net&lt;/strong&gt; desktop app based on &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt;. draw.io is the old name for diagrams.net, we just don&#39;t want the hassle of changing all the binary&#39;s names.&lt;/p&gt; 
&lt;p&gt;Download built binaries from the &lt;a href=&quot;https://github.com/jgraph/drawio-desktop/releases&quot;&gt;releases section&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;draw.io Desktop is designed to be completely isolated from the Internet, apart from the update process. This checks github.com at startup for a newer version and downloads it from an AWS S3 bucket owned by Github. All JavaScript files are self-contained, the Content Security Policy forbids running remotely loaded JavaScript.&lt;/p&gt; 
&lt;p&gt;No diagram data is ever sent externally, nor do we send any analytics about app usage externally. This means certain functionality for which we do not have a JavaScript implementation do not work in the Desktop build, namely .vsd and Gliffy import.&lt;/p&gt; 
&lt;h2&gt;Developing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;draw.io&lt;/strong&gt; is a git submodule of &lt;strong&gt;drawio-desktop&lt;/strong&gt;. To get both you need to clone recursively:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/jgraph/drawio-desktop.git&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To run this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; (in the root directory of this repo)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; (in the drawio directory of this repo &lt;code&gt;drawio/src/main/webapp&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;export DRAWIO_ENV=dev if you want to develop/debug in dev mode.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm start&lt;/code&gt; runs the app.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;To release:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Update the draw.io sub-module and push the change. Add version tag before pushing to origin.&lt;/li&gt; 
 &lt;li&gt;Wait for the builds to complete (https://travis-ci.org/jgraph/drawio-desktop and https://ci.appveyor.com/project/davidjgraph/drawio-desktop)&lt;/li&gt; 
 &lt;li&gt;Go to https://github.com/jgraph/drawio-desktop/releases, edit the preview release.&lt;/li&gt; 
 &lt;li&gt;Download the windows exe and windows portable, sign them using &lt;code&gt;signtool sign /a /tr http://timestamp.globalsign.com/?signature=sha2 /td SHA256 c:/path/to/your/file.exe&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Re-upload signed file as &lt;code&gt;draw.io-windows-installer-x.y.z.exe&lt;/code&gt; and &lt;code&gt;draw.io-windows-no-installer-x.y.z.exe&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Add release notes&lt;/li&gt; 
 &lt;li&gt;Publish release&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: In Windows release, when using both x64 and is32 as arch, the result is one big file with both archs. This is why we split them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scutan90/DeepLearning-500-questions</title>
      <link>https://github.com/scutan90/DeepLearning-500-questions</link>
      <description>&lt;p&gt;深度学习500问，以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述，以帮助自己及有需要的读者。 全书分为18个章节，50余万字。由于水平有限，书中不妥之处恳请广大读者批评指正。 未完待续............ 如有意合作，联系scutjy2015@163.com 版权所有，违权必究 Tan 2018.06&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;京东预售链接：https://item.jd.com/12785031.html&lt;/h1&gt; 
&lt;h2&gt;深度学习500问——AI工程师面试宝典(博文视点出品)，谈继勇 主编，郭子钊，李剑，佃松宜 副主编 著&lt;/h2&gt; 
&lt;h1&gt;内容简介&lt;/h1&gt; 
&lt;p&gt;本书系统地描述了深度学习的基本理论算法及应用。全书共14章，第1-3章论述了数学基础、机器学习基础和深度学习基础；第4-7章介绍了一些经典网络及计算机视觉领域中常用的CNN、RNN、GAN等网络结构技术；第8-9章介绍了深度学习在计算机视觉领域的目标检测及图像分割两大应用；第10-14章介绍了计算机视觉领域主要的优化方法及思路等，包括迁移学习、网络架构及训练、网络优化技巧、超参数调整及模型的压缩和加速等。本书凝聚了众多一线科研人员及工程师的经验，旨在培养读者发现问题、解决问题、扩展问题的能力。&lt;/p&gt; 
&lt;p&gt;本书内容取材于编者在日常学习过程中总结的知识点及各大公司常见的笔试、面试题。本书可为高等院校计算机科学、信息科学、人工智能、控制科学与工程、电子科学与技术等领域的研究及教学人员提供参考，也可为相关专业本科生及研究生提供思考方向，还可为深度学习及计算机视觉领域的初、中级研究人员和工程技术人员提供参考，尤其适合需要查漏补缺的应聘者及提供相关岗位的面试官阅读。&lt;/p&gt; 
&lt;h1&gt;作者简介&lt;/h1&gt; 
&lt;p&gt;谈继勇 主编&lt;/p&gt; 
&lt;p&gt;南方科技大学和哈尔滨工业大学联合培养博士（在读），现任瀚维智能医疗技术总监，深圳工信局专家库专家，兼任南方科技大学、四川大学研究生企业导师，南方科技大学和瀚维智能医疗联合实验室副主任，北京探工所特聘技术专家，曾先后在中科院信工所、香港中文大学（深圳）、FOXCONN机器人与人工智能实验室、顺丰科技等单位任职。主要专注于智能感知与控制、实时智能与计算机视觉方向的研究，主持/主研国家自然科学基金、省重点研发计划、深圳战略性新兴产业计划等项目20余项，发表SCI/EI论文20余篇，申请发明专利40余项，获全国发明金奖。&lt;/p&gt; 
&lt;p&gt;郭子钊 副主编&lt;/p&gt; 
&lt;p&gt;四川大学计算机科学专业博士，硕士毕业于四川大学自动化系，主要从事AI芯片、深度学习、行为检测识别、人脸检测识别等相关研究工作。&lt;/p&gt; 
&lt;p&gt;李剑 副主编&lt;/p&gt; 
&lt;p&gt;同济大学计算机科学专业博士，浙江农林大学副教授、硕士生导师，主要从事推荐系统、排序学习、凸优化等机器学习领域的科研和教学工作，发表SCI论文10余篇，曾获浙江省科技进步二等奖等多项省部级奖项。&lt;/p&gt; 
&lt;p&gt;佃松宜 副主编&lt;/p&gt; 
&lt;p&gt;日本东北大学博士，四川大学电气工程学院教授、自动化系系主任，四川省信息与自动化技术重点实验室主任。主要专注于先进控制理论与人工智能算法研究、嵌入式计算与实时智能系统的研究与开发、机器人与智能装备的智能感知与控制技术的研究、工业测控与智能物联的研究。近5年来主持包括国家重点研发计划、基金、国网总部项目等各类科研项目近30项，累计总经费近2200万元；发表论文100多篇，其中SCI/EI检索近40篇，ESI高引论文1篇。参与编撰专著3部（其中英文专著1部），参编国家九五规划教材1部。&lt;/p&gt; 
&lt;p&gt;王晋东 特邀编委&lt;/p&gt; 
&lt;p&gt;中科院计算所博士，微软亚洲研究院机器学习研究员，主要从事迁移学习和机器学习方向的研究工作，在IJCAI、CVPR、ICDM、UbiComp、ACMMM、PERCOM、IJCNN、PRICAI、IEEE TNNLS、NEUNET、PRL、PMCJ、IMWUT、IJMLC、ICME、ACM TIST等国际权威期刊和会议上发表论文20余篇，多次获得“最佳论文”奖。作品有《迁移学习简明手册》等。&lt;/p&gt; 
&lt;p&gt;王超锋&lt;/p&gt; 
&lt;p&gt;上海大学硕士，百度计算机视觉算法工程师，主研图像处理，深度学习等方向。曾多次在国内外各类知名计算机视觉挑战赛中获得优异成绩。&lt;/p&gt; 
&lt;p&gt;郭晓锋&lt;/p&gt; 
&lt;p&gt;中国科学院硕士，爱奇艺算法工程师，主要从事图像处理、深度学习等方向的研究，曾获“2017华为软件精英挑战赛”复赛第6名。&lt;/p&gt; 
&lt;p&gt;黄伟&lt;/p&gt; 
&lt;p&gt;华南理工大学硕士，顺丰科技机器人算法工程师，主要从事计算机视觉和自然语言处理方向的研究。曾在相关领域国际期刊、会议上发表论文，并在相关竞赛中获得优异成绩。&lt;/p&gt; 
&lt;p&gt;陈方杰（Amusi）&lt;/p&gt; 
&lt;p&gt;上海大学硕士，CVer（计算机视觉知识分享和学习交流平台）创始人。&lt;/p&gt; 
&lt;p&gt;李元伟&lt;/p&gt; 
&lt;p&gt;国防科技大学硕士，深圳瀚维智能医疗科技公司高级算法工程师，南方科技大学和瀚维智能医疗联合实验室委员，主要从事机器视觉、图像处理及深度学习方向的研究工作，参编普通高等教育十三五规划教材《图像通信基础》，在IEEE TCSVT、COGN COMPUT等发表学术论文多篇，曾获湖南省/全军优秀硕士论文。&lt;/p&gt; 
&lt;p&gt;陈琳&lt;/p&gt; 
&lt;p&gt;北京航空航天大学博士（在读），研究方向为无人机智能控制与决策、仿生智能计算。&lt;/p&gt; 
&lt;h1&gt;目录&lt;/h1&gt; 
&lt;p&gt;第1章 数学基础 1&lt;/p&gt; 
&lt;p&gt;1.1 向量和矩阵 1&lt;/p&gt; 
&lt;p&gt;1.1.1 标量、向量、矩阵和张量 1&lt;/p&gt; 
&lt;p&gt;1.1.2 张量与矩阵的区别 2&lt;/p&gt; 
&lt;p&gt;1.1.3 矩阵和向量相乘的结果 2&lt;/p&gt; 
&lt;p&gt;1.1.4 向量和矩阵的范数归纳 2&lt;/p&gt; 
&lt;p&gt;1.1.5 判断一个矩阵是否为正定矩阵 4&lt;/p&gt; 
&lt;p&gt;1.2 导数和偏导数 5&lt;/p&gt; 
&lt;p&gt;1.2.1 导数偏导计算 5&lt;/p&gt; 
&lt;p&gt;1.2.2 导数和偏导数的区别 6&lt;/p&gt; 
&lt;p&gt;1.3 特征值和特征向量 6&lt;/p&gt; 
&lt;p&gt;1.3.1 特征值分解 6&lt;/p&gt; 
&lt;p&gt;1.3.2 奇异值和特征值的关系 6&lt;/p&gt; 
&lt;p&gt;1.4 概率分布与随机变量 7&lt;/p&gt; 
&lt;p&gt;1.4.1 机器学习为什么要使用概率 7&lt;/p&gt; 
&lt;p&gt;1.4.2 变量与随机变量的区别 7&lt;/p&gt; 
&lt;p&gt;1.4.3 随机变量与概率分布的联系 8&lt;/p&gt; 
&lt;p&gt;1.4.4 离散型随机变量和概率质量函数 8&lt;/p&gt; 
&lt;p&gt;1.4.5 连续型随机变量和概率密度函数 8&lt;/p&gt; 
&lt;p&gt;1.4.6 举例理解条件概率 9&lt;/p&gt; 
&lt;p&gt;1.4.7 联合概率与边缘概率的区别和联系 9&lt;/p&gt; 
&lt;p&gt;1.4.8 条件概率的链式法则 10&lt;/p&gt; 
&lt;p&gt;1.4.9 独立性和条件独立性 10&lt;/p&gt; 
&lt;p&gt;1.5 常见概率分布 11&lt;/p&gt; 
&lt;p&gt;1.5.1 伯努利分布 11&lt;/p&gt; 
&lt;p&gt;1.5.2 高斯分布 11&lt;/p&gt; 
&lt;p&gt;1.5.3 何时采用正态分布 12&lt;/p&gt; 
&lt;p&gt;1.5.4 指数分布 12&lt;/p&gt; 
&lt;p&gt;1.5.5 Laplace分布 13&lt;/p&gt; 
&lt;p&gt;1.5.6 Dirac分布和经验分布 13&lt;/p&gt; 
&lt;p&gt;1.6 期望、方差、协方差、相关系数 13&lt;/p&gt; 
&lt;p&gt;1.6.1 期望 13&lt;/p&gt; 
&lt;p&gt;1.6.2 方差 14&lt;/p&gt; 
&lt;p&gt;1.6.3 协方差 14&lt;/p&gt; 
&lt;p&gt;1.6.4 相关系数 15&lt;/p&gt; 
&lt;p&gt;第2章 机器学习基础 16&lt;/p&gt; 
&lt;p&gt;2.1 基本概念 16&lt;/p&gt; 
&lt;p&gt;2.1.1 大话机器学习本质 16&lt;/p&gt; 
&lt;p&gt;2.1.2 什么是神经网络 16&lt;/p&gt; 
&lt;p&gt;2.1.3 各种常见算法图示 17&lt;/p&gt; 
&lt;p&gt;2.1.4 计算图的导数计算 17&lt;/p&gt; 
&lt;p&gt;2.1.5 理解局部最优与全局最优 18&lt;/p&gt; 
&lt;p&gt;2.1.6 大数据与深度学习之间的关系 19&lt;/p&gt; 
&lt;p&gt;2.2 机器学习的学习方式 20&lt;/p&gt; 
&lt;p&gt;2.2.1 监督学习 20&lt;/p&gt; 
&lt;p&gt;2.2.2 非监督学习 20&lt;/p&gt; 
&lt;p&gt;2.2.3 半监督学习 20&lt;/p&gt; 
&lt;p&gt;2.2.4 弱监督学习 20&lt;/p&gt; 
&lt;p&gt;2.2.5 监督学习模型的搭建步骤 21&lt;/p&gt; 
&lt;p&gt;2.3 分类算法 22&lt;/p&gt; 
&lt;p&gt;2.3.1 常用分类算法的优缺点 22&lt;/p&gt; 
&lt;p&gt;2.3.2 分类算法的评估方法 23&lt;/p&gt; 
&lt;p&gt;2.3.3 正确率能否很好地评估分类算法 25&lt;/p&gt; 
&lt;p&gt;2.3.4 什么样的分类器是最好的 26&lt;/p&gt; 
&lt;p&gt;2.4 逻辑回归 26&lt;/p&gt; 
&lt;p&gt;2.4.1 回归的种类 26&lt;/p&gt; 
&lt;p&gt;2.4.2 逻辑回归适用性 27&lt;/p&gt; 
&lt;p&gt;2.4.3 逻辑回归与朴素贝叶斯的区别 27&lt;/p&gt; 
&lt;p&gt;2.4.4 线性回归与逻辑回归的区别 27&lt;/p&gt; 
&lt;p&gt;2.5 代价函数 28&lt;/p&gt; 
&lt;p&gt;2.5.1 为什么需要代价函数 28&lt;/p&gt; 
&lt;p&gt;2.5.2 代价函数作用原理 28&lt;/p&gt; 
&lt;p&gt;2.5.3 常见代价函数 30&lt;/p&gt; 
&lt;p&gt;2.5.4 为什么代价函数要非负 31&lt;/p&gt; 
&lt;p&gt;2.5.5 为什么用交叉熵代替二次代价函数 31&lt;/p&gt; 
&lt;p&gt;2.6 损失函数 32&lt;/p&gt; 
&lt;p&gt;2.6.1 什么是损失函数 32&lt;/p&gt; 
&lt;p&gt;2.6.2 常见的损失函数 32&lt;/p&gt; 
&lt;p&gt;2.6.3 逻辑回归为什么使用对数损失函数 34&lt;/p&gt; 
&lt;p&gt;2.6.4 对数损失函数如何度量损失 34&lt;/p&gt; 
&lt;p&gt;2.7 梯度下降法 35&lt;/p&gt; 
&lt;p&gt;2.7.1 梯度下降法的作用 36&lt;/p&gt; 
&lt;p&gt;2.7.2 梯度下降法的直观理解 36&lt;/p&gt; 
&lt;p&gt;2.7.3 梯度下降法算法描述 37&lt;/p&gt; 
&lt;p&gt;2.7.4 梯度下降法的缺点 38&lt;/p&gt; 
&lt;p&gt;2.7.5 如何对梯度下降法进行调优 38&lt;/p&gt; 
&lt;p&gt;2.7.6 随机梯度下降和批量梯度下降的区别 38&lt;/p&gt; 
&lt;p&gt;2.7.7 各种梯度下降法性能比较 40&lt;/p&gt; 
&lt;p&gt;2.8 线性判别分析 40&lt;/p&gt; 
&lt;p&gt;2.8.1 LDA思想总结 40&lt;/p&gt; 
&lt;p&gt;2.8.2 图解LDA核心思想 41&lt;/p&gt; 
&lt;p&gt;2.8.3 二类LDA算法原理 41&lt;/p&gt; 
&lt;p&gt;2.8.4 LDA算法流程总结 42&lt;/p&gt; 
&lt;p&gt;2.8.5 LDA和PCA的异同 43&lt;/p&gt; 
&lt;p&gt;2.8.6 LDA的优缺点 43&lt;/p&gt; 
&lt;p&gt;2.9 主成分分析 43&lt;/p&gt; 
&lt;p&gt;2.9.1 图解PCA核心思想 43&lt;/p&gt; 
&lt;p&gt;2.9.2 PCA算法推理 44&lt;/p&gt; 
&lt;p&gt;2.9.3 PCA算法流程总结 45&lt;/p&gt; 
&lt;p&gt;2.9.4 PCA思想总结 46&lt;/p&gt; 
&lt;p&gt;2.9.5 PCA算法的优缺点 46&lt;/p&gt; 
&lt;p&gt;2.9.6 降维的必要性及目的 46&lt;/p&gt; 
&lt;p&gt;2.9.7 KPCA与PCA的区别 47&lt;/p&gt; 
&lt;p&gt;2.10 模型评估 47&lt;/p&gt; 
&lt;p&gt;2.10.1 模型评估常用方法 48&lt;/p&gt; 
&lt;p&gt;2.10.2 误差、偏差和方差的区别和联系 48&lt;/p&gt; 
&lt;p&gt;2.10.3 为什么使用标准差 49&lt;/p&gt; 
&lt;p&gt;2.10.4 经验误差与泛化误差 50&lt;/p&gt; 
&lt;p&gt;2.10.5 图解欠拟合与过拟合 50&lt;/p&gt; 
&lt;p&gt;2.10.6 如何解决欠拟合与过拟合 52&lt;/p&gt; 
&lt;p&gt;2.10.7 交叉验证的主要作用 52&lt;/p&gt; 
&lt;p&gt;2.10.8 理解K折交叉验证 53&lt;/p&gt; 
&lt;p&gt;2.10.9 理解混淆矩阵 53&lt;/p&gt; 
&lt;p&gt;2.10.10 理解查准率与查全率 53&lt;/p&gt; 
&lt;p&gt;2.10.11 理解ROC与AUC 54&lt;/p&gt; 
&lt;p&gt;2.10.12 如何绘制ROC曲线 55&lt;/p&gt; 
&lt;p&gt;2.10.13 如何计算TPR和FPR 56&lt;/p&gt; 
&lt;p&gt;2.10.14 如何计算AUC 58&lt;/p&gt; 
&lt;p&gt;2.10.15 直观理解AUC 58&lt;/p&gt; 
&lt;p&gt;2.10.16 ROC评估分类器 60&lt;/p&gt; 
&lt;p&gt;2.10.17 代价敏感错误率与代价曲线 60&lt;/p&gt; 
&lt;p&gt;2.10.18 比较检验方法 61&lt;/p&gt; 
&lt;p&gt;2.11 决策树 61&lt;/p&gt; 
&lt;p&gt;2.11.1 决策树的基本原理 62&lt;/p&gt; 
&lt;p&gt;2.11.2 决策树的生成过程 62&lt;/p&gt; 
&lt;p&gt;2.11.3 决策树学习基本算法步骤 62&lt;/p&gt; 
&lt;p&gt;2.11.4 决策树算法的优缺点 63&lt;/p&gt; 
&lt;p&gt;2.11.5 决策树和熵的联系 63&lt;/p&gt; 
&lt;p&gt;2.11.6 熵的概念及定义 63&lt;/p&gt; 
&lt;p&gt;2.11.7 理解信息增益 64&lt;/p&gt; 
&lt;p&gt;2.11.8 决策树中熵、条件熵和信息增益的联系 64&lt;/p&gt; 
&lt;p&gt;2.11.9 决策树算法中剪枝的作用及策略 65&lt;/p&gt; 
&lt;p&gt;2.12 支持向量机（SVM） 65&lt;/p&gt; 
&lt;p&gt;2.12.1 什么是SVM 65&lt;/p&gt; 
&lt;p&gt;2.12.2 SVM能解决的问题 66&lt;/p&gt; 
&lt;p&gt;2.12.3 核函数特点及其作用 67&lt;/p&gt; 
&lt;p&gt;2.12.4 SVM为什么引入对偶问题 67&lt;/p&gt; 
&lt;p&gt;2.12.5 如何理解SVM中的对偶问题 67&lt;/p&gt; 
&lt;p&gt;2.12.6 常见的核函数 69&lt;/p&gt; 
&lt;p&gt;2.12.7 SVM的主要特点 69&lt;/p&gt; 
&lt;p&gt;2.12.8 SVM的主要缺点 70&lt;/p&gt; 
&lt;p&gt;2.12.9 逻辑回归与SVM的异同 70&lt;/p&gt; 
&lt;p&gt;2.13 贝叶斯分类器 72&lt;/p&gt; 
&lt;p&gt;2.13.1 贝叶斯分类器的基本原理 72&lt;/p&gt; 
&lt;p&gt;2.13.2 朴素贝叶斯分类器 72&lt;/p&gt; 
&lt;p&gt;2.13.3 举例理解朴素贝叶斯分类器 73&lt;/p&gt; 
&lt;p&gt;2.13.4 半朴素贝叶斯分类器 75&lt;/p&gt; 
&lt;p&gt;2.13.5 极大似然估计和贝叶斯估计的联系与区别 75&lt;/p&gt; 
&lt;p&gt;2.13.6 极大似然估计原理 76&lt;/p&gt; 
&lt;p&gt;2.13.7 图解极大似然估计 76&lt;/p&gt; 
&lt;p&gt;2.14 EM算法 77&lt;/p&gt; 
&lt;p&gt;2.14.1 EM算法的基本思想 77&lt;/p&gt; 
&lt;p&gt;2.14.2 EM算法推导 77&lt;/p&gt; 
&lt;p&gt;2.14.3 图解EM算法 78&lt;/p&gt; 
&lt;p&gt;2.14.4 EM算法流程 79&lt;/p&gt; 
&lt;p&gt;2.15 降维和聚类 79&lt;/p&gt; 
&lt;p&gt;2.15.1 图解为什么会产生维数灾难 79&lt;/p&gt; 
&lt;p&gt;2.15.2 怎样避免维数灾难 83&lt;/p&gt; 
&lt;p&gt;2.15.3 聚类和降维 83&lt;/p&gt; 
&lt;p&gt;2.15.4 聚类算法优劣的衡量标准 84&lt;/p&gt; 
&lt;p&gt;2.15.5 聚类和分类 85&lt;/p&gt; 
&lt;p&gt;2.15.6 聚类算法的性能比较 85&lt;/p&gt; 
&lt;p&gt;2.15.7 4种常用聚类方法比较 85&lt;/p&gt; 
&lt;p&gt;第3章 深度学习基础 89&lt;/p&gt; 
&lt;p&gt;3.1 基本概念 89&lt;/p&gt; 
&lt;p&gt;3.1.1 神经网络的类型 89&lt;/p&gt; 
&lt;p&gt;3.1.2 神经网络的常用模型结构 92&lt;/p&gt; 
&lt;p&gt;3.1.3 深度学习和机器学习的区别与联系 93&lt;/p&gt; 
&lt;p&gt;3.1.4 为什么使用深层表示 93&lt;/p&gt; 
&lt;p&gt;3.1.5 深度学习架构分类 94&lt;/p&gt; 
&lt;p&gt;3.1.6 如何选择深度学习开发平台 94&lt;/p&gt; 
&lt;p&gt;3.2 神经网络计算 95&lt;/p&gt; 
&lt;p&gt;3.2.1 前向传播和反向传播 95&lt;/p&gt; 
&lt;p&gt;3.2.2 如何计算神经网络的输出 96&lt;/p&gt; 
&lt;p&gt;3.2.3 如何计算卷积神经网络输出值 97&lt;/p&gt; 
&lt;p&gt;3.2.4 如何计算池化层输出值 100&lt;/p&gt; 
&lt;p&gt;3.2.5 反向传播实例 101&lt;/p&gt; 
&lt;p&gt;3.2.6 神经网络更“深”的意义 104&lt;/p&gt; 
&lt;p&gt;3.3 激活函数 104&lt;/p&gt; 
&lt;p&gt;3.3.1 为什么需要激活函数 104&lt;/p&gt; 
&lt;p&gt;3.3.2 为什么激活函数需要非线性函数 105&lt;/p&gt; 
&lt;p&gt;3.3.3 常见的激活函数及其图像 105&lt;/p&gt; 
&lt;p&gt;3.3.4 常见激活函数的导数计算 107&lt;/p&gt; 
&lt;p&gt;3.3.5 激活函数有哪些性质 108&lt;/p&gt; 
&lt;p&gt;3.3.6 如何选择激活函数 108&lt;/p&gt; 
&lt;p&gt;3.3.7 为什么tanh收敛速度比sigmoid快 109&lt;/p&gt; 
&lt;p&gt;3.3.8 Relu激活函数的优点 109&lt;/p&gt; 
&lt;p&gt;3.3.9 理解Relu激活函数的稀疏激活性 109&lt;/p&gt; 
&lt;p&gt;3.3.10 什么时候可以用线性激活函数 109&lt;/p&gt; 
&lt;p&gt;3.3.11 softmax函数的定义及作用 110&lt;/p&gt; 
&lt;p&gt;3.3.12 softmax函数如何应用于多分类 110&lt;/p&gt; 
&lt;p&gt;3.4 BATCH SIZE 112&lt;/p&gt; 
&lt;p&gt;3.4.1 为什么需要Batch Size 112&lt;/p&gt; 
&lt;p&gt;3.4.2 如何选择Batch Size值 112&lt;/p&gt; 
&lt;p&gt;3.4.3 调节Batch Size对训练效果的影响 113&lt;/p&gt; 
&lt;p&gt;3.4.4 在合理范围内增大Batch Size的好处 113&lt;/p&gt; 
&lt;p&gt;3.4.5 盲目增大Batch Size的坏处 114&lt;/p&gt; 
&lt;p&gt;3.5 归一化 114&lt;/p&gt; 
&lt;p&gt;3.5.1 理解归一化含义 114&lt;/p&gt; 
&lt;p&gt;3.5.2 归一化和标准化的联系与区别 114&lt;/p&gt; 
&lt;p&gt;3.5.3 为什么要归一化或标准化 115&lt;/p&gt; 
&lt;p&gt;3.5.4 图解为什么要归一化 115&lt;/p&gt; 
&lt;p&gt;3.5.5 为什么归一化能提高求最优解速度 115&lt;/p&gt; 
&lt;p&gt;3.5.6 归一化有哪些类型 116&lt;/p&gt; 
&lt;p&gt;3.5.7 局部响应归一化作用 116&lt;/p&gt; 
&lt;p&gt;3.5.8 局部响应归一化原理 117&lt;/p&gt; 
&lt;p&gt;3.5.9 什么是批归一化 118&lt;/p&gt; 
&lt;p&gt;3.5.10 批归一化的优点 118&lt;/p&gt; 
&lt;p&gt;3.5.11 批归一化算法流程 118&lt;/p&gt; 
&lt;p&gt;3.5.12 批归一化和组归一化比较 119&lt;/p&gt; 
&lt;p&gt;3.5.13 权重归一化和批归一化比较 119&lt;/p&gt; 
&lt;p&gt;3.5.14 批归一化适用范围 120&lt;/p&gt; 
&lt;p&gt;3.5.15 BN、LN、IN和GN的对比 120&lt;/p&gt; 
&lt;p&gt;3.6 参数初始化 121&lt;/p&gt; 
&lt;p&gt;3.6.1 参数初始化应满足的条件 121&lt;/p&gt; 
&lt;p&gt;3.6.2 常用的几种初始化方式 121&lt;/p&gt; 
&lt;p&gt;3.6.3 全0初始化带来的问题 121&lt;/p&gt; 
&lt;p&gt;3.6.4 全都初始化为同样的值 122&lt;/p&gt; 
&lt;p&gt;3.6.5 初始化为小的随机数 123&lt;/p&gt; 
&lt;p&gt;3.6.6 用 校准方差 123&lt;/p&gt; 
&lt;p&gt;3.7 预训练与微调 123&lt;/p&gt; 
&lt;p&gt;3.7.1 什么是预训练和微调 123&lt;/p&gt; 
&lt;p&gt;3.7.2 预训练和微调的作用 124&lt;/p&gt; 
&lt;p&gt;3.7.3 预训练模型的复用 124&lt;/p&gt; 
&lt;p&gt;3.7.4 预训练和迁移学习 125&lt;/p&gt; 
&lt;p&gt;3.7.5 微调时网络参数是否更新 125&lt;/p&gt; 
&lt;p&gt;3.7.6 微调模型的三种状态 125&lt;/p&gt; 
&lt;p&gt;3.7.7 为什么深层神经网络难以训练 125&lt;/p&gt; 
&lt;p&gt;3.8 超参数 127&lt;/p&gt; 
&lt;p&gt;3.8.1 超参数有哪些 127&lt;/p&gt; 
&lt;p&gt;3.8.2 参数和模型的关系 127&lt;/p&gt; 
&lt;p&gt;3.8.3 参数和超参数的区别 127&lt;/p&gt; 
&lt;p&gt;3.8.4 如何寻找超参数的最优值 128&lt;/p&gt; 
&lt;p&gt;3.8.5 超参数搜索的一般过程 128&lt;/p&gt; 
&lt;p&gt;3.9 学习率 129&lt;/p&gt; 
&lt;p&gt;3.9.1 学习率的作用 129&lt;/p&gt; 
&lt;p&gt;3.9.2 学习率衰减的常用参数 129&lt;/p&gt; 
&lt;p&gt;3.9.3 常用的学习率衰减方法 129&lt;/p&gt; 
&lt;p&gt;3.10 正则化 133&lt;/p&gt; 
&lt;p&gt;3.10.1 为什么要正则化 133&lt;/p&gt; 
&lt;p&gt;3.10.2 常见正则化方法 133&lt;/p&gt; 
&lt;p&gt;3.10.3 图解L1和L2正则化 134&lt;/p&gt; 
&lt;p&gt;3.10.4 Dropout具体工作流程 135&lt;/p&gt; 
&lt;p&gt;3.10.5 为什么Dropout可以解决过拟合问题 137&lt;/p&gt; 
&lt;p&gt;3.10.6 Dropout的缺点&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>facebookexperimental/Recoil</title>
      <link>https://github.com/facebookexperimental/Recoil</link>
      <description>&lt;p&gt;Recoil is an experimental state management library for React apps. It provides several capabilities that are difficult to achieve with React alone, while being compatible with the newest features of React.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Recoil · &lt;a href=&quot;https://www.npmjs.com/package/recoil&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/recoil&quot; alt=&quot;NPM Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/facebookexperimental/Recoil/actions&quot;&gt;&lt;img src=&quot;https://github.com/facebookexperimental/Recoil/workflows/Node.js%20CI/badge.svg&quot; alt=&quot;Node.js CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/facebookexperimental/Recoil/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg&quot; alt=&quot;GitHub license&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Recoil is an experimental set of utilities for state management with React.&lt;/p&gt; 
&lt;p&gt;Please see the website: https://recoiljs.org&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;The Recoil package lives in &lt;a href=&quot;https://www.npmjs.com/get-npm&quot;&gt;npm&lt;/a&gt;. To install the latest stable version, run the following command:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install recoil
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or if you&#39;re using &lt;a href=&quot;https://classic.yarnpkg.com/en/docs/install/&quot;&gt;yarn&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;yarn add recoil
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Development of Recoil happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving Recoil.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebookexperimental/Recoil/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebookexperimental/Recoil/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;Recoil is &lt;a href=&quot;https://raw.githubusercontent.com/facebookexperimental/Recoil/master/LICENSE&quot;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sudheerj/javascript-interview-questions</title>
      <link>https://github.com/sudheerj/javascript-interview-questions</link>
      <description>&lt;p&gt;List of 1000 JavaScript Interview Questions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Interview Questions &amp;amp; Answers&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Click :star:if you like the project. Pull Requests are highly appreciated. Follow me &lt;a href=&quot;https://twitter.com/SudheerJonna&quot;&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Go to &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#coding-exercise&quot;&gt;Coding Exercise&lt;/a&gt; for coding specific questions&lt;/p&gt; 
&lt;h2&gt;Downloading PDF/Epub formats&lt;/h2&gt; 
&lt;p&gt;You can download the PDF and Epub version of this repository from the latest run on the &lt;a href=&quot;https://github.com/sudheerj/JavaScript-Interview-Questions/actions&quot;&gt;actions tab&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;The questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask — do not get discouraged if you don&#39;t know the answer to all of them ⁠— that is ok!&lt;/p&gt; 
&lt;p&gt;Good luck with your interview 😊&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;p&gt;| No. | Questions | |---- | --------- |1 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-possible-ways-to-create-objects-in-javascript&quot;&gt;What are the possible ways to create objects in JavaScript&lt;/a&gt; | |2 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-prototype-chain&quot;&gt;What is prototype chain&lt;/a&gt;| |3 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-call-apply-and-bind&quot;&gt;What is the difference between Call, Apply and Bind&lt;/a&gt;| |4 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-json-and-its-common-operations&quot;&gt;What is JSON and its common operations&lt;/a&gt;| |5 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-array-slice-method&quot;&gt;What is the purpose of the array slice method&lt;/a&gt;| |6 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-array-splice-method&quot;&gt;What is the purpose of the array splice method&lt;/a&gt;| |7 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-slice-and-splice&quot;&gt;What is the difference between slice and splice&lt;/a&gt;| |8 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-object-and-map&quot;&gt;How do you compare Object and Map&lt;/a&gt;| |9 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-==-and-===-operators&quot;&gt;What is the difference between == and === operators&lt;/a&gt;| |10 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-lambda-or-arrow-functions&quot;&gt;What are lambda or arrow functions&lt;/a&gt;| |11 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-first-class-function&quot;&gt;What is a first class function&lt;/a&gt;| |12 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-first-order-function&quot;&gt;What is a first order function&lt;/a&gt;| |13 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-higher-order-function&quot;&gt;What is a higher order function&lt;/a&gt;| |14 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-unary-function&quot;&gt;What is a unary function&lt;/a&gt;| |15 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-currying-function&quot;&gt;What is the currying function&lt;/a&gt;| |16 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-pure-function&quot;&gt;What is a pure function&lt;/a&gt;| |17 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-the-let-keyword&quot;&gt;What is the purpose of the let keyword&lt;/a&gt;| |18 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-let-and-var&quot;&gt;What is the difference between let and var&lt;/a&gt;| |19 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-reason-to-choose-the-name-let-as-a-keyword&quot;&gt;What is the reason to choose the name let as a keyword&lt;/a&gt;| |20 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-redeclare-variables-in-switch-block-without-an-error&quot;&gt;How do you redeclare variables in switch block without an error&lt;/a&gt;| |21 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-temporal-dead-zone&quot;&gt;What is the Temporal Dead Zone&lt;/a&gt;| |22 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-iife(immediately-invoked-function-expression)&quot;&gt;What is IIFE(Immediately Invoked Function Expression)&lt;/a&gt;| |23 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-benefit-of-using-modules&quot;&gt;What is the benefit of using modules&lt;/a&gt;| |24 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-memoization&quot;&gt;What is memoization&lt;/a&gt;| |25 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-hoisting&quot;&gt;What is Hoisting&lt;/a&gt;| |26 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-classes-in-es6&quot;&gt;What are classes in ES6&lt;/a&gt;| |27 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-closures&quot;&gt;What are closures&lt;/a&gt;| |28 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-modules&quot;&gt;What are modules&lt;/a&gt;| |29 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-modules&quot;&gt;Why do you need modules&lt;/a&gt;| |30 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-scope-in-javascript&quot;&gt;What is scope in javascript&lt;/a&gt;| |31 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-service-worker&quot;&gt;What is a service worker&lt;/a&gt;| |32 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-manipulate-dom-using-a-service-worker&quot;&gt;How do you manipulate DOM using a service worker&lt;/a&gt;| |33 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-reuse-information-across-service-worker-restarts&quot;&gt;How do you reuse information across service worker restarts&lt;/a&gt;| |34 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-indexeddb&quot;&gt;What is IndexedDB&lt;/a&gt;| |35 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-web-storage&quot;&gt;What is web storage&lt;/a&gt;| |36 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-post-message&quot;&gt;What is a post message&lt;/a&gt;| |37 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-cookie&quot;&gt;What is a cookie&lt;/a&gt;| |38 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-a-cookie&quot;&gt;Why do you need a Cookie&lt;/a&gt;| |39 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-options-in-a-cookie&quot;&gt;What are the options in a cookie&lt;/a&gt;| |40 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-delete-a-cookie&quot;&gt;How do you delete a cookie&lt;/a&gt;| |41 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#What-are-the-differences-between-cookie-local-storage-and-session-storage&quot;&gt;What are the differences between cookie, local storage and session storage&lt;/a&gt;| |42 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-main-difference-between-localstorage-and-sessionstorage&quot;&gt;What is the main difference between localStorage and sessionStorage&lt;/a&gt;| |43 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-access-web-storage&quot;&gt;How do you access web storage&lt;/a&gt;| |44 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-methods-available-on-session-storage&quot;&gt;What are the methods available on session storage&lt;/a&gt;| |45 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-storage-event-and-its-event-handler&quot;&gt;What is a storage event and its event handler&lt;/a&gt;| |46 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-web-storage&quot;&gt;Why do you need web storage&lt;/a&gt;| |47 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-web-storage-browser-support&quot;&gt;How do you check web storage browser support&lt;/a&gt;| |48 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-web-workers-browser-support&quot;&gt;How do you check web workers browser support&lt;/a&gt;| |49 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-of-web-worker&quot;&gt;Give an example of web worker&lt;/a&gt;| |50 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-restrictions-of-web-workers-on-dom&quot;&gt;What are the restrictions of web workers on DOM&lt;/a&gt;| |51 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-promise&quot;&gt;What is a promise&lt;/a&gt;| |52 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-a-promise&quot;&gt;Why do you need a promise&lt;/a&gt;| |53 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-three-states-of-promise&quot;&gt;What are the three states of promise&lt;/a&gt;| |54 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-callback-function&quot;&gt;What is a callback function&lt;/a&gt;| |55 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-we-need-callbacks&quot;&gt;Why do we need callbacks&lt;/a&gt;| |56 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-callback-hell&quot;&gt;What is a callback hell&lt;/a&gt;| |57 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-server-sent-events&quot;&gt;What is server-sent events&lt;/a&gt;| |58 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-receive-server-sent-event-notifications&quot;&gt;How do you receive server-sent event notifications&lt;/a&gt;| |59 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-browser-support-for-server-sent-events&quot;&gt;How do you check browser support for server-sent events&lt;/a&gt;| |60 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-events-available-for-server-sent-events&quot;&gt;What are the events available for server sent events&lt;/a&gt;| |61 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-main-rules-of-promise&quot;&gt;What are the main rules of promise&lt;/a&gt;| |62 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-callback-in-callback&quot;&gt;What is callback in callback&lt;/a&gt;| |63 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-promise-chaining&quot;&gt;What is promise chaining&lt;/a&gt;| |64 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-promise.all&quot;&gt;What is promise.all&lt;/a&gt;| |65 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-race-method-in-promise&quot;&gt;What is the purpose of race method in promise&lt;/a&gt;| |66 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-strict-mode-in-javascript&quot;&gt;What is a strict mode in javascript&lt;/a&gt;| |67 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-strict-mode&quot;&gt;Why do you need strict mode&lt;/a&gt;| |68 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-declare-strict-mode&quot;&gt;How do you declare strict mode&lt;/a&gt;| |69 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-double-exclamation&quot;&gt;What is the purpose of double exclamation&lt;/a&gt;| |70 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-delete-operator&quot;&gt;What is the purpose of delete operator&lt;/a&gt;| |71 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-typeof-operator&quot;&gt;What is typeof operator&lt;/a&gt;| |72 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-undefined-property&quot;&gt;What is undefined property&lt;/a&gt;| |73 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-null-value&quot;&gt;What is null value&lt;/a&gt;| |74 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-null-and-undefined&quot;&gt;What is the difference between null and undefined&lt;/a&gt;| |75 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#What-is-eval&quot;&gt;What is eval&lt;/a&gt;| |76 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-window-and-document&quot;&gt;What is the difference between window and document&lt;/a&gt;| |77 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-access-history-in-javascript&quot;&gt;How do you access history in javascript&lt;/a&gt;| |78 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-javascript-data-types&quot;&gt;What are the javascript data types&lt;/a&gt;| |79 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-isnan&quot;&gt;What is isNaN&lt;/a&gt;| |80 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-undeclared-and-undefined-variables&quot;&gt;What are the differences between undeclared and undefined variables&lt;/a&gt;| |81 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-global-variables&quot;&gt;What are global variables&lt;/a&gt;| |82 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-problems-with-global-variables&quot;&gt;What are the problems with global variables&lt;/a&gt;| |83 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-nan-property&quot;&gt;What is NaN property&lt;/a&gt;| |84 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-isfinite-function&quot;&gt;What is the purpose of isFinite function&lt;/a&gt; |85 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-flow&quot;&gt;What is an event flow&lt;/a&gt;| |86 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-event-bubbling&quot;&gt;What is event bubbling&lt;/a&gt;| |87 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-event-capturing&quot;&gt;What is event capturing&lt;/a&gt;| |88 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-submit-a-form-using-javascript&quot;&gt;How do you submit a form using JavaScript&lt;/a&gt;| |89 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-operating-system-details&quot;&gt;How do you find operating system details&lt;/a&gt;| |90 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-document-load-and-domcontentloaded-events&quot;&gt;What is the difference between document load and DOMContentLoaded events&lt;/a&gt;| |91 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-native,-host-and-user-objects&quot;&gt;What is the difference between native, host and user objects&lt;/a&gt;| |92 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-tools-or-techniques-used-for-debugging-javascript-code&quot;&gt;What are the tools or techniques used for debugging JavaScript code&lt;/a&gt;| |93 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-pros-and-cons-of-promises-over-callbacks&quot;&gt;What are the pros and cons of promises over callbacks&lt;/a&gt;| |94 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-an-attribute-and-a-property&quot;&gt;What is the difference between an attribute and a property&lt;/a&gt;| |95 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-same-origin-policy&quot;&gt;What is same-origin policy&lt;/a&gt;| |96 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-void-0&quot;&gt;What is the purpose of void 0&lt;/a&gt;| |97 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-a-compiled-or-interpreted-language&quot;&gt;Is JavaScript a compiled or interpreted language&lt;/a&gt;| |98 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-a-case-sensitive-language&quot;&gt;Is JavaScript a case-sensitive language&lt;/a&gt;| |99 | &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-there-any-relation-between-java-and-javascript&quot;&gt;Is there any relation between Java and JavaScript&lt;/a&gt;| |100| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-events&quot;&gt;What are events&lt;/a&gt;| |101| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#who-created-javascript&quot;&gt;Who created javascript&lt;/a&gt;| |102| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-preventdefault-method&quot;&gt;What is the use of preventDefault method&lt;/a&gt;| |103| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-stoppropagation-method&quot;&gt;What is the use of stopPropagation method&lt;/a&gt;| |104| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-steps-involved-in-return-false&quot;&gt;What are the steps involved in return false&lt;/a&gt;| |105| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-bom&quot;&gt;What is BOM&lt;/a&gt;| |106| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-settimeout&quot;&gt;What is the use of setTimeout&lt;/a&gt;| |107| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-use-of-setinterval&quot;&gt;What is the use of setInterval&lt;/a&gt;| |108| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-is-javascript-treated-as-single-threaded&quot;&gt;Why is JavaScript treated as Single threaded&lt;/a&gt;| |109| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-delegation&quot;&gt;What is an event delegation&lt;/a&gt;| |110| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-ecmascript&quot;&gt;What is ECMAScript&lt;/a&gt;| |111| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-json&quot;&gt;What is JSON&lt;/a&gt;| |112| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-syntax-rules-of-json&quot;&gt;What are the syntax rules of JSON&lt;/a&gt;| |113| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-json-stringify&quot;&gt;What is the purpose JSON stringify&lt;/a&gt;| |114| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-parse-json-string&quot;&gt;How do you parse JSON string&lt;/a&gt;| |115| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-json&quot;&gt;Why do you need JSON&lt;/a&gt;| |116| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-pwas?&quot;&gt;What are PWAs&lt;/a&gt;| |117| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-cleartimeout-method&quot;&gt;What is the purpose of clearTimeout method&lt;/a&gt;| |118| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-clearinterval-method&quot;&gt;What is the purpose of clearInterval method&lt;/a&gt;| |119| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-redirect-new-page-in-javascript&quot;&gt;How do you redirect new page in javascript&lt;/a&gt;| |120| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-a-string-contains-a-substring&quot;&gt;How do you check whether a string contains a substring&lt;/a&gt;| |121| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-validate-an-email-in-javascript&quot;&gt;How do you validate an email in javascript&lt;/a&gt;| |122| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-current-url-with-javascript&quot;&gt;How do you get the current url with javascript&lt;/a&gt;| |123| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-various-url-properties-of-location-object&quot;&gt;What are the various url properties of location object&lt;/a&gt;| |124| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-get-query-string-values-in-javascript&quot;&gt;How do get query string values in javascript&lt;/a&gt;| |125| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-if-a-key-exists-in-an-object&quot;&gt;How do you check if a key exists in an object&lt;/a&gt;| |126| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-loop-through-or-enumerate-javascript-object&quot;&gt;How do you loop through or enumerate javascript object&lt;/a&gt;| |127| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-test-for-an-empty-object&quot;&gt;How do you test for an empty object&lt;/a&gt;| |128| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-arguments-object&quot;&gt;What is an arguments object&lt;/a&gt;| |129| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-first-letter-of-the-string-in-an-uppercase&quot;&gt;How do you make first letter of the string in an uppercase&lt;/a&gt;| |130| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-pros-and-cons-of-for-loop&quot;&gt;What are the pros and cons of for loop&lt;/a&gt;| |131| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-display-the-current-date-in-javascript&quot;&gt;How do you display the current date in javascript&lt;/a&gt;| |132| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-two-date-objects&quot;&gt;How do you compare two date objects&lt;/a&gt;| |133| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-if-a-string-starts-with-another-string&quot;&gt;How do you check if a string starts with another string&lt;/a&gt;| |134| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-trim-a-string-in-javascript&quot;&gt;How do you trim a string in javascript&lt;/a&gt;| |135| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-add-a-key-value-pair-in-javascript&quot;&gt;How do you add a key value pair in javascript&lt;/a&gt;| |136| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-the-&#39;!--&#39;-notation-represents-a-special-operator&quot;&gt;Is the &#39;!--&#39; notation represents a special operator&lt;/a&gt;| |137| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-assign-default-values-to-variables&quot;&gt;How do you assign default values to variables&lt;/a&gt;| |138| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-multiline-strings&quot;&gt;How do you define multiline strings&lt;/a&gt;| |139| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-app-shell-model&quot;&gt;What is an app shell model&lt;/a&gt;| |140| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-we-define-properties-for-functions&quot;&gt;Can we define properties for functions&lt;/a&gt;| |141| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-way-to-find-the-number-of-parameters-expected-by-a-function&quot;&gt;What is the way to find the number of parameters expected by a function&lt;/a&gt;| |142| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-polyfill&quot;&gt;What is a polyfill&lt;/a&gt;| |143| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-break-and-continue-statements&quot;&gt;What are break and continue statements&lt;/a&gt;| |144| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-js-labels&quot;&gt;What are js labels&lt;/a&gt;| |145| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-benefits-of-keeping-declarations-at-the-top&quot;&gt;What are the benefits of keeping declarations at the top&lt;/a&gt;| |146| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-benefits-of-initializing-variables&quot;&gt;What are the benefits of initializing variables&lt;/a&gt;| |147| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-recommendations-to-create-new-object&quot;&gt;What are the recommendations to create new object&lt;/a&gt;| |148| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-json-arrays&quot;&gt;How do you define JSON arrays&lt;/a&gt;| |149| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-generate-random-integers&quot;&gt;How do you generate random integers&lt;/a&gt;| |150| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-you-write-a-random-integers-function-to-print-integers-with-in-a-range&quot;&gt;Can you write a random integers function to print integers with in a range&lt;/a&gt;| |151| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-tree-shaking&quot;&gt;What is tree shaking&lt;/a&gt;| |152| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-need-of-tree-shaking&quot;&gt;What is the need of tree shaking&lt;/a&gt;| |153| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-recommended-to-use-eval&quot;&gt;Is it recommended to use eval&lt;/a&gt;| |154| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-regular-expression&quot;&gt;What is a Regular Expression&lt;/a&gt;| |155| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-string-methods-available-in-regular-expression&quot;&gt;What are the string methods available in Regular expression&lt;/a&gt;| |156| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-modifiers-in-regular-expression&quot;&gt;What are modifiers in regular expression&lt;/a&gt;| |157| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-regular-expression-patterns&quot;&gt;What are regular expression patterns&lt;/a&gt;| |158| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-regexp-object&quot;&gt;What is a RegExp object&lt;/a&gt;| |159| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-search-a-string-for-a-pattern&quot;&gt;How do you search a string for a pattern&lt;/a&gt;| |160| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-exec-method&quot;&gt;What is the purpose of exec method&lt;/a&gt;| |161| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-change-style-of-a-html-element&quot;&gt;How do you change style of a HTML element&lt;/a&gt;| |162| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-would-be-the-result-of-1+2+&#39;3&#39;&quot;&gt;What would be the result of 1+2+&#39;3&#39;&lt;/a&gt;| |163| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-debugger-statement&quot;&gt;What is a debugger statement&lt;/a&gt;| |164| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-breakpoints-indebugging&quot;&gt;What is the purpose of breakpoints in debugging&lt;/a&gt;| |165| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-use-reserved-words-as-identifiers&quot;&gt;Can I use reserved words as identifiers&lt;/a&gt;| |166| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-mobile-browser&quot;&gt;How do you detect a mobile browser&lt;/a&gt;| |167| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-mobile-browser-without-regexp&quot;&gt;How do you detect a mobile browser without regexp&lt;/a&gt;| |168| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-image-width-and-height-using-js&quot;&gt;How do you get the image width and height using JS&lt;/a&gt;| |169| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-synchronous-http-request&quot;&gt;How do you make synchronous HTTP request&lt;/a&gt;| |170| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-asynchronous-http-request&quot;&gt;How do you make asynchronous HTTP request&lt;/a&gt;| |171| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-convert-date-to-another-timezone-in-javascript&quot;&gt;How do you convert date to another timezone in javascript&lt;/a&gt;| |172| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-properties-used-to-get-size-of-window&quot;&gt;What are the properties used to get size of window&lt;/a&gt;| |173| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-conditional-operator-in-javascript&quot;&gt;What is a conditional operator in javascript&lt;/a&gt;| |174| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#Can-you-apply-chaining-on-conditional-operator&quot;&gt;Can you apply chaining on conditional operator&lt;/a&gt;| |175| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-ways-to-execute-javascript-after-page-load&quot;&gt;What are the ways to execute javascript after page load&lt;/a&gt;| |176| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-proto-and-prototype&quot;&gt;What is the difference between proto and prototype&lt;/a&gt;| |177| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-where-do-you-really-need-semicolon&quot;&gt;Give an example where do you really need semicolon&lt;/a&gt;| |178| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-freeze-method&quot;&gt;What is a freeze method&lt;/a&gt;| |179| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-freeze-method&quot;&gt;What is the purpose of freeze method&lt;/a&gt;| |180| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-i-need-to-use-freeze-method&quot;&gt;Why do I need to use freeze method&lt;/a&gt;| |181| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-a-browser-language-preference&quot;&gt;How do you detect a browser language preference&lt;/a&gt;| |182| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-convert-string-to-title-case-with-javascript&quot;&gt;How to convert string to title case with javascript&lt;/a&gt;| |183| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-javascript-disabled-in-the-page&quot;&gt;How do you detect javascript disabled in the page&lt;/a&gt;| |184| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-various-operators-supported-by-javascript&quot;&gt;What are various operators supported by javascript&lt;/a&gt;| |185| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-rest-parameter&quot;&gt;What is a rest parameter&lt;/a&gt;| |186| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-you-do-not-use-rest-parameter-as-a-last-argument&quot;&gt;What happens if you do not use rest parameter as a last argument&lt;/a&gt;| |187| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-bitwise-operators-available-in-javascript&quot;&gt;What are the bitwise operators available in javascript&lt;/a&gt;| |188| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-spread-operator&quot;&gt;What is a spread operator&lt;/a&gt;| |189| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-whether-object-is-frozen-or-not&quot;&gt;How do you determine whether object is frozen or not&lt;/a&gt;| |190| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-two-values-same-or-not-using-object&quot;&gt;How do you determine two values same or not using object&lt;/a&gt;| |191| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-using-object-is-method&quot;&gt;What is the purpose of using object is method&lt;/a&gt;| |192| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-copy-properties-from-one-object-to-other&quot;&gt;How do you copy properties from one object to other&lt;/a&gt;| |193| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-applications-of-assign-method&quot;&gt;What are the applications of assign method&lt;/a&gt;| |194| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-proxy-object&quot;&gt;What is a proxy object&lt;/a&gt;| |195| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-seal-method&quot;&gt;What is the purpose of seal method&lt;/a&gt;| |196| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-applications-of-seal-method&quot;&gt;What are the applications of seal method&lt;/a&gt;| |197| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-freeze-and-seal-methods&quot;&gt;What are the differences between freeze and seal methods&lt;/a&gt;| |198| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-determine-if-an-object-is-sealed-or-not&quot;&gt;How do you determine if an object is sealed or not&lt;/a&gt;| |199| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-enumerable-key-and-value-pairs&quot;&gt;How do you get enumerable key and value pairs&lt;/a&gt;| |200| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-main-difference-between-object.values-and-object.entries-method&quot;&gt;What is the main difference between Object.values and Object.entries method&lt;/a&gt;| |201| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-can-you-get-the-list-of-keys-of-any-object&quot;&gt;How can you get the list of keys of any object&lt;/a&gt;| |202| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-object-with-prototype&quot;&gt;How do you create an object with prototype&lt;/a&gt;| |203| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-weakset&quot;&gt;What is a WeakSet&lt;/a&gt;| |204| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-weakset-and-set&quot;&gt;What are the differences between WeakSet and Set&lt;/a&gt;| |205| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-the-collection-of-methods-available-on-weakset&quot;&gt;List down the collection of methods available on WeakSet&lt;/a&gt;| |206| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-weakmap&quot;&gt;What is a WeakMap&lt;/a&gt;| |207| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-weakmap-and-map&quot;&gt;What are the differences between WeakMap and Map&lt;/a&gt;| |208| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-the-collection-of-methods-available-on-weakmap&quot;&gt;List down the collection of methods available on WeakMap&lt;/a&gt;| |209| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-uneval&quot;&gt;What is the purpose of uneval&lt;/a&gt;| |210| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-encode-an-url&quot;&gt;How do you encode an URL&lt;/a&gt;| |211| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-decode-an-url&quot;&gt;How do you decode an URL&lt;/a&gt;| |212| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-print-the-contents-of-web-page&quot;&gt;How do you print the contents of web page&lt;/a&gt;| |213| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-uneval-and-eval&quot;&gt;What is the difference between uneval and eval&lt;/a&gt;| |214| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-anonymous-function&quot;&gt;What is an anonymous function&lt;/a&gt;| |215| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-precedence-order-between-local-and-global-variables&quot;&gt;What is the precedence order between local and global variables&lt;/a&gt;| |216| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-javascript-accessors&quot;&gt;What are javascript accessors&lt;/a&gt;| |217| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-property-on-object-constructor&quot;&gt;How do you define property on Object constructor&lt;/a&gt;| |218| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-get-and-defineproperty&quot;&gt;What is the difference between get and defineProperty&lt;/a&gt;| |219| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-getters-and-setters&quot;&gt;What are the advantages of Getters and Setters&lt;/a&gt;| |220| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-add-getters-and-setters-using-defineproperty-method&quot;&gt;Can I add getters and setters using defineProperty method&lt;/a&gt;| |221| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-switch-case&quot;&gt;What is the purpose of switch-case&lt;/a&gt;| |222| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-conventions-to-be-followed-for-the-usage-of-swtich-case&quot;&gt;What are the conventions to be followed for the usage of swtich case&lt;/a&gt;| |223| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-primitive-data-types&quot;&gt;What are primitive data types&lt;/a&gt;| |224| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-access-object-properties&quot;&gt;What are the different ways to access object properties&lt;/a&gt;| |225| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-function-parameter-rules&quot;&gt;What are the function parameter rules&lt;/a&gt;| |226| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-error-object&quot;&gt;What is an error object&lt;/a&gt;| |227| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#when-you-get-a-syntax-error&quot;&gt;When you get a syntax error&lt;/a&gt;| |228| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-error-names-from-error-object&quot;&gt;What are the different error names from error object&lt;/a&gt;| |229| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-various-statements-in-error-handling&quot;&gt;What are the various statements in error handling&lt;/a&gt;| |230| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-two-types-of-loops-in-javascript&quot;&gt;What are the two types of loops in javascript&lt;/a&gt;| |231| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-nodejs&quot;&gt;What is nodejs&lt;/a&gt;| |232| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-intl-object&quot;&gt;What is an Intl object&lt;/a&gt;| |233| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-language-specific-date-and-time-formatting&quot;&gt;How do you perform language specific date and time formatting&lt;/a&gt;| |234| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-iterator&quot;&gt;What is an Iterator&lt;/a&gt;| |235| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-does-synchronous-iteration-works&quot;&gt;How does synchronous iteration works&lt;/a&gt;| |236| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-loop&quot;&gt;What is an event loop&lt;/a&gt;| |237| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-call-stack&quot;&gt;What is call stack&lt;/a&gt;| |238| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-queue&quot;&gt;What is an event queue&lt;/a&gt;| |239| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-decorator&quot;&gt;What is a decorator&lt;/a&gt;| |240| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-properties-of-intl-object&quot;&gt;What are the properties of Intl object&lt;/a&gt;| |241| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-unary-operator&quot;&gt;What is an Unary operator&lt;/a&gt;| |242| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-sort-elements-in-an-array&quot;&gt;How do you sort elements in an array&lt;/a&gt;| |243| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-comparefunction-while-sorting-arrays&quot;&gt;What is the purpose of compareFunction while sorting arrays&lt;/a&gt;| |244| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-reversing-an-array&quot;&gt;How do you reversing an array&lt;/a&gt;| |245| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-min-and-max-value-in-an-array&quot;&gt;How do you find min and max value in an array&lt;/a&gt;| |246| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-find-min-and-max-values-without--math-functions&quot;&gt;How do you find min and max values without Math functions&lt;/a&gt;| |247| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-empty-statement-and-purpose-of-it&quot;&gt;What is an empty statement and purpose of it&lt;/a&gt;| |248| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-meta-data-of-a-module&quot;&gt;How do you get meta data of a module&lt;/a&gt;| |249| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-comma-operator&quot;&gt;What is a comma operator&lt;/a&gt;| |250| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-advantage-of-a-comma-operator&quot;&gt;What is the advantage of a comma operator&lt;/a&gt;| |251| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-typescript&quot;&gt;What is typescript&lt;/a&gt;| |252| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-javascript-and-typescript&quot;&gt;What are the differences between javascript and typescript&lt;/a&gt;| |253| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-typescript-over-javascript&quot;&gt;What are the advantages of typescript over javascript&lt;/a&gt;| |254| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-object-initializer&quot;&gt;What is an object initializer&lt;/a&gt;| |255| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-constructor-method&quot;&gt;What is a constructor method&lt;/a&gt;| |256| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-you-write-constructor-more-than-once-in-a-class&quot;&gt;What happens if you write constructor more than once in a class&lt;/a&gt;| |257| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-call-the-constructor-of-a-parent-class&quot;&gt;How do you call the constructor of a parent class&lt;/a&gt;| |258| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-prototype-of-an-object&quot;&gt;How do you get the prototype of an object&lt;/a&gt;| |259| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-i-pass-string-type-for-getprototype-method&quot;&gt;What happens If I pass string type for getPrototype method&lt;/a&gt;| |260| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-set-prototype-of-one-object-to-another&quot;&gt;How do you set prototype of one object to another&lt;/a&gt;| |261| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-an-object-can-be-extendable-or-not&quot;&gt;How do you check whether an object can be extendable or not&lt;/a&gt;| |262| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-prevent-an-object-to-extend&quot;&gt;How do you prevent an object to extend&lt;/a&gt;| |263| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-make-an-object-non-extensible&quot;&gt;What are the different ways to make an object non-extensible&lt;/a&gt;| |264| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-multiple-properties-on-an-object&quot;&gt;How do you define multiple properties on an object&lt;/a&gt;| |265| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-mean-in-javascript&quot;&gt;What is MEAN in javascript&lt;/a&gt;| |266| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-obfuscation-in-javascript&quot;&gt;What Is Obfuscation in javascript&lt;/a&gt;| |267| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-obfuscation&quot;&gt;Why do you need Obfuscation&lt;/a&gt;| |268| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-minification&quot;&gt;What is Minification&lt;/a&gt;| |269| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-minification&quot;&gt;What are the advantages of minification&lt;/a&gt;| |270| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-obfuscation-and-encryption&quot;&gt;What are the differences between Obfuscation and Encryption&lt;/a&gt;| |271| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-common-tools-used-for-minification&quot;&gt;What are the common tools used for minification&lt;/a&gt;| |272| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-form-validation-using-javascript&quot;&gt;How do you perform form validation using javascript&lt;/a&gt;| |273| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-perform-form-validation-without-javascript&quot;&gt;How do you perform form validation without javascript&lt;/a&gt;| |274| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-dom-methods-available-for-constraint-validation&quot;&gt;What are the DOM methods available for constraint validation&lt;/a&gt;| |275| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-available-constraint-validation-dom-properties&quot;&gt;What are the available constraint validation DOM properties&lt;/a&gt;| |276| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-list-of-validity-properties&quot;&gt;What are the list of validity properties&lt;/a&gt;| |277| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#give-an-example-usage-of-rangeoverflow-property&quot;&gt;Give an example usage of rangeOverflow property&lt;/a&gt;| |278| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-enums-feature-available-in-javascript&quot;&gt;Is enums feature available in javascript&lt;/a&gt;| |279| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#What-is-an-enum&quot;&gt;What is an enum&lt;/a&gt;| |280| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-list-all-properties-of-an-object&quot;&gt;How do you list all properties of an object&lt;/a&gt;| |281| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-property-descriptors-of-an-object&quot;&gt;How do you get property descriptors of an object&lt;/a&gt;| |282| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-attributes-provided-by-a-property-descriptor&quot;&gt;What are the attributes provided by a property descriptor&lt;/a&gt;| |283| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-extend-classes&quot;&gt;How do you extend classes&lt;/a&gt;| |284| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-i-modify-the-url-without-reloading-the-page&quot;&gt;How do I modify the url without reloading the page&lt;/a&gt;| |285| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-whether-an-array-includes-a-particular-value-or-not&quot;&gt;How do you check whether an array includes a particular value or not&lt;/a&gt;| |286| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-compare-scalar-arrays&quot;&gt;How do you compare scalar arrays&lt;/a&gt;| |287| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-get-the-value-from-get-parameters&quot;&gt;How to get the value from get parameters&lt;/a&gt;| |288| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-print-numbers-with-commas-as-thousand-separators&quot;&gt;How do you print numbers with commas as thousand separators&lt;/a&gt;| |289| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-java-and-javascript&quot;&gt;What is the difference between java and javascript&lt;/a&gt;| |290| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-supports-namespace&quot;&gt;Is javascript supports namespace&lt;/a&gt;| |291| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-declare-namespace&quot;&gt;How do you declare namespace&lt;/a&gt;| |292| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-invoke-javascript-code-in-an-iframe-from-parent-page&quot;&gt;How do you invoke javascript code in an iframe from parent page&lt;/a&gt;| |293| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-get-the-timezone-offset-from-date&quot;&gt;How do get the timezone offset from date&lt;/a&gt;| |294| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-load-css-and-js-files-dynamically&quot;&gt;How do you load CSS and JS files dynamically&lt;/a&gt;| |295| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-methods-to-find-html-elements-in-dom&quot;&gt;What are the different methods to find HTML elements in DOM&lt;/a&gt;| |296| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-jquery&quot;&gt;What is jQuery&lt;/a&gt;| |297| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-v8-javascript-engine&quot;&gt;What is V8 JavaScript engine&lt;/a&gt;| |298| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-we-call-javascript-as-dynamic-language&quot;&gt;Why do we call javascript as dynamic language&lt;/a&gt;| |299| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-void-operator&quot;&gt;What is a void operator&lt;/a&gt;| |300| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-set-the-cursor-to-wait&quot;&gt;How to set the cursor to wait&lt;/a&gt;| |301| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-infinite-loop&quot;&gt;How do you create an infinite loop&lt;/a&gt;| |302| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#why-do-you-need-to-avoid-with-statement&quot;&gt;Why do you need to avoid with statement&lt;/a&gt;| |303| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-for-loops&quot;&gt;What is the output of below for loops&lt;/a&gt;| |304| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#list-down-some-of-the-features-of-es6&quot;&gt;List down some of the features of ES6&lt;/a&gt;| |305| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-es6&quot;&gt;What is ES6&lt;/a&gt;| |306| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-I-redeclare-let-and-const-variables&quot;&gt;Can I redeclare let and const variables&lt;/a&gt;| |307| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-const-variable-makes-the-value-immutable&quot;&gt;Is const variable makes the value immutable&lt;/a&gt;| |308| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-default-parameters&quot;&gt;What are default parameters&lt;/a&gt;| |309| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-template-literals&quot;&gt;What are template literals&lt;/a&gt;| |310| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-write-multi-line-strings-in-template-literals&quot;&gt;How do you write multi-line strings in template literals&lt;/a&gt;| |311| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-nesting-templates&quot;&gt;What are nesting templates&lt;/a&gt;| |312| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-tagged-templates&quot;&gt;What are tagged templates&lt;/a&gt;| |313| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-raw-strings&quot;&gt;What are raw strings&lt;/a&gt;| |314| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-destructuring-assignment&quot;&gt;What is destructuring assignment&lt;/a&gt;| |315| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-default-values-in-destructuring-assignment&quot;&gt;What are default values in destructuring assignment&lt;/a&gt;| |316| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-swap-variables-in-destructuring-assignment&quot;&gt;How do you swap variables in destructuring assignment&lt;/a&gt;| |317| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-enhanced-object-literals&quot;&gt;What are enhanced object literals&lt;/a&gt;| |318| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-dynamic-imports&quot;&gt;What are dynamic imports&lt;/a&gt;| |319| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-use-cases-for-dynamic-imports&quot;&gt;What are the use cases for dynamic imports&lt;/a&gt;| |320| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-typed-arrays&quot;&gt;What are typed arrays&lt;/a&gt;| |321| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-advantages-of-module-loaders&quot;&gt;What are the advantages of module loaders&lt;/a&gt;| |322| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-collation&quot;&gt;What is collation&lt;/a&gt;| |323| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-for...of-statement&quot;&gt;What is for...of statement&lt;/a&gt;| |324| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-spread-operator-array&quot;&gt;What is the output of below spread operator array&lt;/a&gt;| |325| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-postmessage-secure&quot;&gt;Is PostMessage secure&lt;/a&gt;| |326| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-problems-with-postmessage-target-origin-as-wildcard&quot;&gt;What are the problems with postmessage target origin as wildcard&lt;/a&gt;| |327| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-avoid-receiving-postmessages-from-attackers&quot;&gt;How do you avoid receiving postMessages from attackers&lt;/a&gt;| |328| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#can-i-avoid-using-postmessages-completely&quot;&gt;Can I avoid using postMessages completely&lt;/a&gt;| |329| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-postmessages-synchronous&quot;&gt;Is postMessages synchronous&lt;/a&gt;| |330| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-paradigm-is-javascript&quot;&gt;What paradigm is Javascript&lt;/a&gt;| |331| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-internal-and-external-javascript&quot;&gt;What is the difference between internal and external javascript&lt;/a&gt;| |332| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-javascript-faster-than-server-side-script&quot;&gt;Is JavaScript faster than server side script&lt;/a&gt;| |333| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-the-status-of-a-checkbox&quot;&gt;How do you get the status of a checkbox&lt;/a&gt;| |334| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-double-tilde-operator&quot;&gt;What is the purpose of double tilde operator&lt;/a&gt;| |335| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-convert-character-to-ascii-code&quot;&gt;How do you convert character to ASCII code&lt;/a&gt;| |336| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-arraybuffer&quot;&gt;What is ArrayBuffer&lt;/a&gt;| |337| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-string-expression&quot;&gt;What is the output of below string expression&lt;/a&gt;| |338| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-error-object&quot;&gt;What is the purpose of Error object&lt;/a&gt;| |339| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-evalerror-object&quot;&gt;What is the purpose of EvalError object&lt;/a&gt;| |340| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-list-of-cases-error-thrown-from-non-strict-mode-to-strict-mode&quot;&gt;What are the list of cases error thrown from non-strict mode to strict mode&lt;/a&gt;| |341| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-all-objects-have-prototypes&quot;&gt;Is all objects have prototypes&lt;/a&gt;| |342| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-a-parameter-and-an-argument&quot;&gt;What is the difference between a parameter and an argument&lt;/a&gt;| |343| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-some-method-in-arrays&quot;&gt;What is the purpose of some method in arrays&lt;/a&gt;| |344| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-combine-two-or-more-arrays&quot;&gt;How do you combine two or more arrays&lt;/a&gt;| |345| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-shallow-and-deep-copy&quot;&gt;What is the difference between Shallow and Deep copy&lt;/a&gt;| |346| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-specific-number-of-copies-of-a-string&quot;&gt;How do you create specific number of copies of a string&lt;/a&gt;| |347| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-return-all-matching-strings-against-a-regular-expression&quot;&gt;How do you return all matching strings against a regular expression&lt;/a&gt;| |348| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-trim-a-string-at-the-beginning-or-ending&quot;&gt;How do you trim a string at the beginning or ending&lt;/a&gt;| |349| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-console-statement-with-unary-operator&quot;&gt;What is the output of below console statement with unary operator&lt;/a&gt;| |350| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#does-javascript-uses-mixins&quot;&gt;Does javascript uses mixins&lt;/a&gt;| |351| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-thunk-function&quot;&gt;What is a thunk function&lt;/a&gt;| |352| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-asynchronous-thunks&quot;&gt;What are asynchronous thunks&lt;/a&gt;| |353| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-below-function-calls&quot;&gt;What is the output of below function calls&lt;/a&gt;| |354| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-remove-all-line-breaks-from-a-string&quot;&gt;How to remove all line breaks from a string&lt;/a&gt;| |355| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-reflow-and-repaint&quot;&gt;What is the difference between reflow and repaint&lt;/a&gt;| |356| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-with-negating-an-array&quot;&gt;What happens with negating an array&lt;/a&gt;| |357| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-happens-if-we-add-two-arrays&quot;&gt;What happens if we add two arrays&lt;/a&gt;| |358| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-output-of-prepend-additive-operator-on-falsy-values&quot;&gt;What is the output of prepend additive operator on falsy values&lt;/a&gt;| |359| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-self-string-using-special-characters&quot;&gt;How do you create self string using special characters&lt;/a&gt;| |360| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-remove-falsy-values-from-an-array&quot;&gt;How do you remove falsy values from an array&lt;/a&gt;| |361| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-get-unique-values-of-an-array&quot;&gt;How do you get unique values of an array&lt;/a&gt;| |362| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-destructuring-aliases&quot;&gt;What is destructuring aliases&lt;/a&gt;| |363| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-map-the-array-values-without-using-map-method&quot;&gt;How do you map the array values without using map method&lt;/a&gt;| |364| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-empty-an-array&quot;&gt;How do you empty an array&lt;/a&gt;| |365| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-rounding-numbers-to-certain-decimals&quot;&gt;How do you rounding numbers to certain decimals&lt;/a&gt;| |366| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-way-to-convert-an-array-to-an-object&quot;&gt;What is the easiest way to convert an array to an object&lt;/a&gt;| |367| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-an-array-with-some-data&quot;&gt;How do you create an array with some data&lt;/a&gt;| |368| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-placeholders-from-console-object&quot;&gt;What are the placeholders from console object&lt;/a&gt;| |369| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-possible-to-add-css-to-console-messages&quot;&gt;Is it possible to add CSS to console messages&lt;/a&gt;| |370| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-dir-method-of-console-object&quot;&gt;What is the purpose of dir method of console object&lt;/a&gt;| |371| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-it-possible-to-debug-html-elements-in-console&quot;&gt;Is it possible to debug HTML elements in console&lt;/a&gt;| |372| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-display-data-in-a-tabular-format-using-console-object&quot;&gt;How do you display data in a tabular format using console object&lt;/a&gt;| |373| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-verify-that-an-argument-is-a-number-or-not&quot;&gt;How do you verify that an argument is a Number or not&lt;/a&gt;| |374| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-create-copy-to-clipboard-button&quot;&gt;How do you create copy to clipboard button&lt;/a&gt;| |375| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-shortcut-to-get-timestamp&quot;&gt;What is the shortcut to get timestamp&lt;/a&gt;| |376| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-flattening-multi-dimensional-arrays&quot;&gt;How do you flattening multi dimensional arrays&lt;/a&gt;| |377| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-multi-condition-checking&quot;&gt;What is the easiest multi condition checking&lt;/a&gt;| |378| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-capture-browser-back-button&quot;&gt;How do you capture browser back button&lt;/a&gt;| |379| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-disable-right-click-in-the-web-page&quot;&gt;How do you disable right click in the web page&lt;/a&gt;| |380| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-wrapper-objects&quot;&gt;What are wrapper objects&lt;/a&gt;| |381| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-ajax&quot;&gt;What is AJAX&lt;/a&gt;| |382| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-ways-to-deal-with-asynchronous-code&quot;&gt;What are the different ways to deal with Asynchronous Code&lt;/a&gt;| |383| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-cancel-a-fetch-request&quot;&gt;How to cancel a fetch request&lt;/a&gt;| |384| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-web-speech-api&quot;&gt;What is web speech API&lt;/a&gt;| |385| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-minimum-timeout-throttling&quot;&gt;What is minimum timeout throttling&lt;/a&gt;| |386| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-implement-zero-timeout-in-modern-browsers&quot;&gt;How do you implement zero timeout in modern browsers&lt;/a&gt;| |387| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-tasks-in-event-loop&quot;&gt;What are tasks in event loop&lt;/a&gt;| |388| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-microtasks&quot;&gt;What are microtasks&lt;/a&gt;| |389| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-different-event-loops&quot;&gt;What are different event loops&lt;/a&gt;| |390| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-purpose-of-queuemicrotask&quot;&gt;What is the purpose of queueMicrotask&lt;/a&gt;| |391| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-use-javascript-libraries-in-typescript-file&quot;&gt;How do you use javascript libraries in typescript file&lt;/a&gt;| |392| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-promises-and-observables&quot;&gt;What are the differences between promises and observables&lt;/a&gt;| |393| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-heap&quot;&gt;What is heap&lt;/a&gt;| |394| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-event-table&quot;&gt;What is an event table&lt;/a&gt;| |395| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-microtask-queue&quot;&gt;What is a microTask queue&lt;/a&gt;| |396| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-shim-and-polyfill&quot;&gt;What is the difference between shim and polyfill&lt;/a&gt;| |397| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-detect-primitive-or-non-primitive-value-type&quot;&gt;How do you detect primitive or non primitive value type&lt;/a&gt;| |398| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-babel&quot;&gt;What is babel&lt;/a&gt;| |399| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-node.js-completely-single-threaded&quot;&gt;Is Node.js completely single threaded&lt;/a&gt;| |400| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-common-use-cases-of-observables&quot;&gt;What are the common use cases of observables&lt;/a&gt;| |401| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-rxjs&quot;&gt;What is RxJS&lt;/a&gt;| |402| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-function-constructor-and-function-declaration&quot;&gt;What is the difference between Function constructor and function declaration&lt;/a&gt;| |403| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-short-circuit-condition&quot;&gt;What is a Short circuit condition&lt;/a&gt;| |404| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-way-to-resize-an-array&quot;&gt;What is the easiest way to resize an array&lt;/a&gt;| |405| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-observable&quot;&gt;What is an observable&lt;/a&gt;| |406| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-function-and-class-declarations&quot;&gt;What is the difference between function and class declarations&lt;/a&gt;| |407| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-an-async-function&quot;&gt;What is an async function&lt;/a&gt;| |408| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-prevent-promises-swallowing-errors&quot;&gt;How do you prevent promises swallowing errors&lt;/a&gt;| |409| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-deno&quot;&gt;What is deno&lt;/a&gt;| |410| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-make-an-object-iterable-in-javascript&quot;&gt;How do you make an object iterable in javascript&lt;/a&gt;| |411| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-a-proper-tail-call&quot;&gt;What is a Proper Tail Call&lt;/a&gt;| |412| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-check-an-object-is-a-promise-or-not&quot;&gt;How do you check an object is a promise or not&lt;/a&gt;| |413| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-detect-if-a-function-is-called-as-constructor&quot;&gt;How to detect if a function is called as constructor&lt;/a&gt;| |414| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-arguments-object-and-rest-parameter&quot;&gt;What are the differences between arguments object and rest parameter&lt;/a&gt;| |415| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-spread-operator-and-rest-parameter&quot;&gt;What are the differences between spread operator and rest parameter&lt;/a&gt;| |416| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-different-kinds-of-generators&quot;&gt;What are the different kinds of generators&lt;/a&gt;| |417| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-built-in-iterables&quot;&gt;What are the built-in iterables&lt;/a&gt;| |418| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-are-the-differences-between-for...of-and-for...in-statements&quot;&gt;What are the differences between for...of and for...in statements&lt;/a&gt;| |419| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-you-define-instance-and-non-instance-properties&quot;&gt;How do you define instance and non-instance properties&lt;/a&gt;| |420| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-difference-between-isnan-and-number.isnan&quot;&gt;What is the difference between isNaN and Number.isNaN?&lt;/a&gt;| |421| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-to-invoke-an-iife-without-any-extra-brackets&quot;&gt;How to invoke an IIFE without any extra brackets?&lt;/a&gt;| |422| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#is-that-possible-to-use-expressions-in-switch-cases&quot;&gt;Is that possible to use expressions in switch cases?&lt;/a&gt;| |423| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#what-is-the-easiest-way-to-ignore-promise-errors&quot;&gt;What is the easiest way to ignore promise errors?&lt;/a&gt;| |424| &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#how-do-style-the-console-output-using-css&quot;&gt;How do style the console output using CSS?&lt;/a&gt;|&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible ways to create objects in JavaScript&lt;/h3&gt; &lt;p&gt;There are many ways to create objects in javascript as below&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object constructor:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = new Object();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object&#39;s create method:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The create method of Object creates a new object by passing the prototype object as a parameter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = Object.create(null);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Object literal syntax:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The object literal syntax is equivalent to create method when it passes null as parameter&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = {};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function constructor:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create any function and apply the new operator to create object instances,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(name){
   var object = {};
   object.name=name;
   object.age=21;
   return object;
}
var object = new Person(&quot;Sudheer&quot;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function constructor with prototype:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This is similar to function constructor but it uses prototype for their properties and methods,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person(){}
Person.prototype.name = &quot;Sudheer&quot;;
var object = new Person();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function func {};

new func(x, y, z);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Create a new instance using function prototype.
var newInstance = Object.create(func.prototype)

// Call the function
var result = func.call(newInstance, x, y, z),

// If the result is a non-null object then use it otherwise just use the new instance.
console.log(result &amp;amp;&amp;amp; typeof result === &#39;object&#39; ? result : newInstance);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;ES6 Class syntax:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;ES6 introduces class feature to create the objects&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Person {
   constructor(name) {
      this.name = name;
   }
}

var object = new Person(&quot;Sudheer&quot;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Singleton pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don&#39;t accidentally create multiple instances.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = new function(){
   this.name = &quot;Sudheer&quot;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a prototype chain&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Prototype chaining&lt;/strong&gt; is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language. The prototype on object instance is available through &lt;strong&gt;Object.getPrototypeOf(object)&lt;/strong&gt; or &lt;strong&gt;proto&lt;/strong&gt; property whereas prototype on constructors function is available through object.prototype.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/prototype_chain.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Call, Apply and Bind&lt;/h3&gt; &lt;p&gt;The difference between Call, Apply and Bind can be explained with below examples,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Call:&lt;/strong&gt; The call() method invokes a function with a given &lt;code&gt;this&lt;/code&gt; value and arguments provided one by one&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var employee1 = {firstName: &#39;John&#39;, lastName: &#39;Rodson&#39;};
var employee2 = {firstName: &#39;Jimmy&#39;, lastName: &#39;Baily&#39;};

function invite(greeting1, greeting2) {
    console.log(greeting1 + &#39; &#39; + this.firstName + &#39; &#39; + this.lastName+ &#39;, &#39;+ greeting2);
}

invite.call(employee1, &#39;Hello&#39;, &#39;How are you?&#39;); // Hello John Rodson, How are you?
invite.call(employee2, &#39;Hello&#39;, &#39;How are you?&#39;); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Apply:&lt;/strong&gt; Invokes the function and allows you to pass in arguments as an array&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var employee1 = {firstName: &#39;John&#39;, lastName: &#39;Rodson&#39;};
var employee2 = {firstName: &#39;Jimmy&#39;, lastName: &#39;Baily&#39;};

function invite(greeting1, greeting2) {
    console.log(greeting1 + &#39; &#39; + this.firstName + &#39; &#39; + this.lastName+ &#39;, &#39;+ greeting2);
}

invite.apply(employee1, [&#39;Hello&#39;, &#39;How are you?&#39;]); // Hello John Rodson, How are you?
invite.apply(employee2, [&#39;Hello&#39;, &#39;How are you?&#39;]); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;bind:&lt;/strong&gt; returns a new function, allowing you to pass in an array and any number of arguments&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var employee1 = {firstName: &#39;John&#39;, lastName: &#39;Rodson&#39;};
var employee2 = {firstName: &#39;Jimmy&#39;, lastName: &#39;Baily&#39;};

function invite(greeting1, greeting2) {
    console.log(greeting1 + &#39; &#39; + this.firstName + &#39; &#39; + this.lastName+ &#39;, &#39;+ greeting2);
}

var inviteEmployee1 = invite.bind(employee1);
var inviteEmployee2 = invite.bind(employee2);
inviteEmployee1(&#39;Hello&#39;, &#39;How are you?&#39;); // Hello John Rodson, How are you?
inviteEmployee2(&#39;Hello&#39;, &#39;How are you?&#39;); // Hello Jimmy Baily, How are you?
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether it’s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for comma (separated list) and Apply is for Array. Whereas Bind creates a new function that will have &lt;code&gt;this&lt;/code&gt; set to the first parameter passed to bind().&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSON and its common operations&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt; is a text-based data format following JavaScript object syntax, which was popularized by &lt;code&gt;Douglas Crockford&lt;/code&gt;. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/json &lt;strong&gt;Parsing:&lt;/strong&gt; Converting a string to a native object&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;JSON.parse(text)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Stringification: **converting a native object to a string so it can be transmitted across the network&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;JSON.stringify(object)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the array slice method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;slice()&lt;/strong&gt; method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end. Some of the examples of this method are,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let arrayIntegers = [1, 2, 3, 4, 5];
let arrayIntegers1 = arrayIntegers.slice(0,2); // returns [1,2]
let arrayIntegers2 = arrayIntegers.slice(2,3); // returns [3]
let arrayIntegers3 = arrayIntegers.slice(4); //returns [5]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Slice method won&#39;t mutate the original array but it returns the subset as a new array.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the array splice method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;splice()&lt;/strong&gt; method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the option second argument indicates the number of elements to be deleted. Each additional argument is added to the array. Some of the examples of this method are,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];
let arrayIntegersOriginal2 = [1, 2, 3, 4, 5];
let arrayIntegersOriginal3 = [1, 2, 3, 4, 5];

let arrayIntegers1 = arrayIntegersOriginal1.splice(0,2); // returns [1, 2]; original array: [3, 4, 5]
let arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]
let arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;); //returns [4]; original array: [1, 2, 3, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 5]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Splice method modifies the original array and returns the deleted array.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between slice and splice&lt;/h3&gt; &lt;p&gt;Some of the major difference in a tabular form&lt;/p&gt; &lt;p&gt;| Slice | Splice | |---- | --------- | Doesn&#39;t modify the original array(immutable) | Modifies the original array(mutable) | | Returns the subset of original array | Returns the deleted elements as array | | Used to pick the elements from array | Used to insert or delete elements to/from array|&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare Object and Map&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt; are similar to &lt;strong&gt;Maps&lt;/strong&gt; in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.&lt;/li&gt; 
   &lt;li&gt;The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.&lt;/li&gt; 
   &lt;li&gt;You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.&lt;/li&gt; 
   &lt;li&gt;A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.&lt;/li&gt; 
   &lt;li&gt;An Object has a prototype, so there are default keys in the map that could collide with your keys if you&#39;re not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.&lt;/li&gt; 
   &lt;li&gt;A Map may perform better in scenarios involving frequent addition and removal of key pairs.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between == and === operators&lt;/h3&gt; &lt;p&gt;JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.&lt;/li&gt; 
   &lt;li&gt;Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value. There are two special cases in this, 
    &lt;ol&gt; 
     &lt;li&gt;NaN is not equal to anything, including NaN.&lt;/li&gt; 
     &lt;li&gt;Positive and negative zeros are equal to one another.&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt;Two Boolean operands are strictly equal if both are true or both are false.&lt;/li&gt; 
   &lt;li&gt;Two objects are strictly equal if they refer to the same Object.&lt;/li&gt; 
   &lt;li&gt;Null and Undefined types are not equal with ===, but equal with ==. i.e, null===undefined --&amp;gt; false but null==undefined --&amp;gt; true&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Some of the example which covers the above cases,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;0 == false   // true
0 === false  // false
1 == &quot;1&quot;     // true
1 === &quot;1&quot;    // false
null == undefined // true
null === undefined // false
&#39;0&#39; == false // true
&#39;0&#39; === false // false
[]==[] or []===[] //false, refer different objects in memory
{}=={} or {}==={} //false, refer different objects in memory
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are lambda or arrow functions&lt;/h3&gt; &lt;p&gt;An arrow function is a shorter syntax for a function expression and does not have its own &lt;strong&gt;this, arguments, super, or new.target&lt;/strong&gt;. These functions are best suited for non-method functions, and they cannot be used as constructors.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a first class function&lt;/h3&gt; &lt;p&gt;In Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.&lt;/p&gt; &lt;p&gt;For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const handler = () =&amp;gt; console.log (&#39;This is a click handler function&#39;);
document.addEventListener (&#39;click&#39;, handler);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a first order function&lt;/h3&gt; &lt;p&gt;First-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const firstOrder = () =&amp;gt; console.log (&#39;I am a first order function!&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a higher order function&lt;/h3&gt; &lt;p&gt;Higher-order function is a function that accepts another function as an argument or returns a function as a return value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const firstOrderFunc = () =&amp;gt; console.log (&#39;Hello I am a First order function&#39;);
const higherOrder = ReturnFirstOrderFunc =&amp;gt; ReturnFirstOrderFunc ();
higherOrder (firstOrderFunc);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a unary function&lt;/h3&gt; &lt;p&gt;Unary function (i.e. monadic) is a function that accepts exactly one argument. Let us take an example of unary function. It stands for a single argument accepted by a function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const unaryFunction = a =&amp;gt; console.log (a + 10); // Add 10 to the given argument and display the value
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the currying function&lt;/h3&gt; &lt;p&gt;Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a n-ary function turns it into a unary function. Let&#39;s take an example of n-ary function and how it turns into a currying function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const multiArgFunction = (a, b, c) =&amp;gt; a + b + c;
const curryUnaryFunction = a =&amp;gt; b =&amp;gt; c =&amp;gt; a + b + c;
curryUnaryFunction (1); // returns a function: b =&amp;gt; c =&amp;gt;  1 + b + c
curryUnaryFunction (1) (2); // returns a function: c =&amp;gt; 3 + c
curryUnaryFunction (1) (2) (3); // returns the number 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Curried functions are great to improve code reusability and functional composition.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a pure function&lt;/h3&gt; &lt;p&gt;A &lt;strong&gt;Pure function&lt;/strong&gt; is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments &#39;n&#39; number of times and &#39;n&#39; number of places in the application then it will always return the same value. Let&#39;s take an example to see the difference between pure and impure functions,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Impure
let numberArray = [];
const impureAddNumber = number =&amp;gt; numberArray.push (number);
//Pure
const pureAddNumber = number =&amp;gt; argNumberArray =&amp;gt;
  argNumberArray.concat ([number]);

//Display the results
console.log (impureAddNumber (6)); // returns 1
console.log (numberArray); // returns [6]
console.log (pureAddNumber (7) (numberArray)); // returns [6, 7]
console.log (numberArray); // returns [6]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As per above code snippets, Push function is impure itself by altering the array and returning an push number index which is independent of parameter value. Whereas Concat on the other hand takes the array and concatenates it with the other array producing a whole new array without side effects. Also, the return value is a concatenation of the previous array. Remember that Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and make it harder to break your application by not having any side effects. These principles are coming together with &lt;strong&gt;Immutability&lt;/strong&gt; concept of ES6 by giving preference to &lt;strong&gt;const&lt;/strong&gt; over &lt;strong&gt;let&lt;/strong&gt; usage.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the let keyword&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;let&lt;/code&gt; statement declares a &lt;strong&gt;block scope local variable&lt;/strong&gt;. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope. Let&#39;s take an example to demonstrate the usage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let counter = 30;
if (counter === 30) {
  let counter = 31;
  console.log(counter); // 31
}
console.log(counter); // 30 (because if block variable won&#39;t exist here)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between let and var&lt;/h3&gt; &lt;p&gt;You can list out the differences in a tabular format&lt;/p&gt; &lt;p&gt;| var | let | |---- | --------- | It is been available from the beginning of JavaScript | Introduced as part of ES6 | | It has function scope | It has block scope | | Variables will be hoisted | Hoisted but not initialized |&lt;/p&gt; &lt;p&gt;Let&#39;s take an example to see the difference,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function userDetails(username) {
   if(username) {
     console.log(salary); // undefined(due to hoisting)
     console.log(age); // error: age is not defined
     let age = 30;
     var salary = 10000;
   }
   console.log(salary); //10000 (accessible to due function scope)
   console.log(age); //error: age is not defined(due to block scope)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the reason to choose the name let as a keyword&lt;/h3&gt; &lt;p&gt;Let is a mathematical statement that was adopted by early programming languages like Scheme and Basic. It has been borrowed from dozens of other languages that use let already as a traditional keyword as close to var as possible.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you redeclare variables in switch block without an error&lt;/h3&gt; &lt;p&gt;If you try to redeclare variables in a &lt;code&gt;switch block&lt;/code&gt; then it will cause errors because there is only one block. For example, the below code block throws a syntax error as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let counter = 1;
switch(x) {
  case 0:
    let name;
    break;

  case 1:
    let name; // SyntaxError for redeclaration.
    break;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical environment.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let counter = 1;
    switch(x) {
      case 0: {
        let name;
        break;
      }
      case 1: {
        let name; // No SyntaxError for redeclaration.
        break;
      }
    }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the Temporal Dead Zone&lt;/h3&gt; &lt;p&gt;The Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, accessing a let or const variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable’s binding and its declaration, is called the temporal dead zone. Let&#39;s see this behavior with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function somemethod() {
  console.log(counter1); // undefined
  console.log(counter2); // ReferenceError
  var counter1 = 1;
  let counter2 = 2;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is IIFE(Immediately Invoked Function Expression)&lt;/h3&gt; &lt;p&gt;IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function ()
    {
      // logic here
    }
 )
();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function ()
        {
          var message = &quot;IIFE&quot;;
          console.log(message);
        }
 )
();
console.log(message); //Error: message is not defined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of using modules&lt;/h3&gt; &lt;p&gt;There are a lot of benefits to using modules in favour of a sprawling. Some of the benefits are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Maintainability&lt;/li&gt; 
   &lt;li&gt;Reusability&lt;/li&gt; 
   &lt;li&gt;Namespacing&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is memoization&lt;/h3&gt; &lt;p&gt;Memoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache. Let&#39;s take an example of adding function with memoization,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const memoizAddition = () =&amp;gt; {
  let cache = {};
 return (value) =&amp;gt; {
  if (value in cache) {
   console.log(&#39;Fetching from cache&#39;);
   return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.
  }
  else {
   console.log(&#39;Calculating result&#39;);
   let result = value + 20;
   cache[value] = result;
   return result;
  }
 }
}
// returned function from memoizAddition
const addition = memoizAddition();
console.log(addition(20)); //output: 40 calculated
console.log(addition(20)); //output: 40 cached
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Hoisting&lt;/h3&gt; &lt;p&gt;Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation. Let&#39;s take a simple example of variable hoisting,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(message); //output : undefined
var message = &#39;The variable Has been hoisted&#39;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code looks like as below to the interpreter,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var message;
console.log(message);
message = &#39;The variable Has been hoisted&#39;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are classes in ES6&lt;/h3&gt; &lt;p&gt;In ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance. For example, the prototype based inheritance written in function expression as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Bike(model,color) {
    this.model = model;
    this.color = color;
}

Bike.prototype.getDetails = function() {
    return this.model + &#39; bike has&#39; + this.color + &#39; color&#39;;
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas ES6 classes can be defined as an alternative&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Bike{
  constructor(color, model) {
    this.color= color;
    this.model= model;
  }

  getDetails() {
    return this.model + &#39; bike has&#39; + this.color + &#39; color&#39;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are closures&lt;/h3&gt; &lt;p&gt;A closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables. The closure has three scope chains&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Own scope where variables defined between its curly brackets&lt;/li&gt; 
   &lt;li&gt;Outer function’s variables&lt;/li&gt; 
   &lt;li&gt;Global variables Let&#39;s take an example of closure concept,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Welcome(name){
  var greetingInfo = function(message){
   console.log(message+&#39; &#39;+name);
  }
return greetingInfo;
}
var myFunction = Welcome(&#39;John&#39;);
myFunction(&#39;Welcome &#39;); //Output: Welcome John
myFunction(&#39;Hello Mr.&#39;); //output: Hello Mr.John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As per the above code, the inner function(greetingInfo) has access to the variables in the outer function scope(Welcome) even after the outer function has returned.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are modules&lt;/h3&gt; &lt;p&gt;Modules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need modules&lt;/h3&gt; &lt;p&gt;Below are the list of benefits using modules in javascript ecosystem&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Maintainability&lt;/li&gt; 
   &lt;li&gt;Reusability&lt;/li&gt; 
   &lt;li&gt;Namespacing&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is scope in javascript&lt;/h3&gt; &lt;p&gt;Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a service worker&lt;/h3&gt; &lt;p&gt;A Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don&#39;t need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you manipulate DOM using a service worker&lt;/h3&gt; &lt;p&gt;Service worker can&#39;t access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the &lt;code&gt;postMessage&lt;/code&gt; interface, and those pages can manipulate the DOM.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you reuse information across service worker restarts&lt;/h3&gt; &lt;p&gt;The problem with service worker is that it gets terminated when not in use, and restarted when it&#39;s next needed, so you cannot rely on global state within a service worker&#39;s &lt;code&gt;onfetch&lt;/code&gt; and &lt;code&gt;onmessage&lt;/code&gt; handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is IndexedDB&lt;/h3&gt; &lt;p&gt;IndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is web storage&lt;/h3&gt; &lt;p&gt;Web storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the user&#39;s browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Local storage:&lt;/strong&gt; It stores data for current origin with no expiration date.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Session storage:&lt;/strong&gt; It stores data for one session and the data is lost when the browser tab is closed.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a post message&lt;/h3&gt; &lt;p&gt;Post message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Cookie&lt;/h3&gt; &lt;p&gt;A cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs. For example, you can create a cookie named username as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.cookie = &quot;username=John&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/cookie.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need a Cookie&lt;/h3&gt; &lt;p&gt;Cookies are used to remember information about the user profile(such as username). It basically involves two steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When a user visits a web page, the user profile can be stored in a cookie.&lt;/li&gt; 
   &lt;li&gt;Next time the user visits the page, the cookie remembers the user profile.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the options in a cookie&lt;/h3&gt; &lt;p&gt;There are few below options available for a cookie,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.cookie = &quot;username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC&quot;;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.cookie = &quot;username=John; path=/services&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you delete a cookie&lt;/h3&gt; &lt;p&gt;You can delete a cookie by setting the expiry date as a passed date. You don&#39;t need to specify a cookie value in this case. For example, you can delete a username cookie in the current page as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.cookie = &quot;username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn&#39;t allow to delete a cookie unless you specify a path parameter.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between cookie, local storage and session storage&lt;/h3&gt; &lt;p&gt;Below are some of the differences between cookie, local storage and session storage,&lt;/p&gt; &lt;p&gt;| Feature | Cookie | Local storage | Session storage | |---- | --------- | ----- | ----- | | Accessed on client or server side | Both server-side &amp;amp; client-side | client-side only | client-side only | | Lifetime | As configured using Expires option | until deleted | until tab is closed | | SSL support | Supported | Not supported | Not supported | | Maximum data size | 4KB | 5 MB | 5MB |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main difference between localStorage and sessionStorage&lt;/h3&gt; &lt;p&gt;LocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e it has no expiration time) whereas in sessionStorage data gets cleared when the page session ends.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access web storage&lt;/h3&gt; &lt;p&gt;The Window object implements the &lt;code&gt;WindowLocalStorage&lt;/code&gt; and &lt;code&gt;WindowSessionStorage&lt;/code&gt; objects which has &lt;code&gt;localStorage&lt;/code&gt;(window.localStorage) and &lt;code&gt;sessionStorage&lt;/code&gt;(window.sessionStorage) properties respectively. These properties create an instance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and storage type (session or local). For example, you can read and write on local storage objects as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;localStorage.setItem(&#39;logo&#39;, document.getElementById(&#39;logo&#39;).value);
localStorage.getItem(&#39;logo&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the methods available on session storage&lt;/h3&gt; &lt;p&gt;The session storage provided methods for reading, writing and clearing the session data&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Save data to sessionStorage
sessionStorage.setItem(&#39;key&#39;, &#39;value&#39;);

// Get saved data from sessionStorage
let data = sessionStorage.getItem(&#39;key&#39;);

// Remove saved data from sessionStorage
sessionStorage.removeItem(&#39;key&#39;);

// Remove all saved data from sessionStorage
sessionStorage.clear();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a storage event and its event handler&lt;/h3&gt; &lt;p&gt;The StorageEvent is an event that fires when a storage area has been changed in the context of another document. Whereas onstorage property is an EventHandler for processing storage events. The syntax would be as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; window.onstorage = functionRef;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take the example usage of onstorage event handler which logs the storage key and it&#39;s values&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.onstorage = function(e) {
  console.log(&#39;The &#39; + e.key +
    &#39; key has been changed from &#39; + e.oldValue +
    &#39; to &#39; + e.newValue + &#39;.&#39;);
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need web storage&lt;/h3&gt; &lt;p&gt;Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Also, the information is never transferred to the server. Hence this is a more recommended approach than Cookies.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check web storage browser support&lt;/h3&gt; &lt;p&gt;You need to check browser support for localStorage and sessionStorage before using web storage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (typeof(Storage) !== &quot;undefined&quot;) {
  // Code for localStorage/sessionStorage.
} else {
  // Sorry! No Web Storage support..
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check web workers browser support&lt;/h3&gt; &lt;p&gt;You need to check browser support for web workers before using it&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (typeof(Worker) !== &quot;undefined&quot;) {
  // code for Web worker support.
} else {
  // Sorry! No Web Worker support..
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example of a web worker&lt;/h3&gt; &lt;p&gt;You need to follow below steps to start using web workers for counting example&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create a Web Worker File: You need to write a script to increment the count value. Let&#39;s name it as counter.js&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let i = 0;

function timedCount() {
  i = i + 1;
  postMessage(i);
  setTimeout(&quot;timedCount()&quot;,500);
}

timedCount();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here postMessage() method is used to post a message back to the HTML page&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create a Web Worker Object: You can create a web worker object by checking for browser support. Let&#39;s name this file as web_worker_example.js&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (typeof(w) == &quot;undefined&quot;) {
  w = new Worker(&quot;counter.js&quot;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and we can receive messages from web worker&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;w.onmessage = function(event){
  document.getElementById(&quot;message&quot;).innerHTML = event.data;
};
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Terminate a Web Worker: Web workers will continue to listen for messages (even after the external script is finished) until it is terminated. You can use the terminate() method to terminate listening to the messages.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;w.terminate();
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Reuse the Web Worker: If you set the worker variable to undefined you can reuse the code&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;w = undefined;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the restrictions of web workers on DOM&lt;/h3&gt; &lt;p&gt;WebWorkers don&#39;t have access to below javascript objects since they are defined in an external files&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Window object&lt;/li&gt; 
   &lt;li&gt;Document object&lt;/li&gt; 
   &lt;li&gt;Parent object&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a promise&lt;/h3&gt; &lt;p&gt;A promise is an object that may produce a single value some time in the future with either a resolved value or a reason that it’s not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled, rejected, or pending.&lt;/p&gt; &lt;p&gt;The syntax of Promise creation looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    const promise = new Promise(function(resolve, reject) {
      // promise description
    })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The usage of a promise would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const promise = new Promise(resolve =&amp;gt; {
  setTimeout(() =&amp;gt; {
    resolve(&quot;I&#39;m a Promise!&quot;);
  }, 5000);
}, reject =&amp;gt; {

});

promise.then(value =&amp;gt; console.log(value));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The action flow of a promise will be as below,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/promises.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need a promise&lt;/h3&gt; &lt;p&gt;Promises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the three states of promise&lt;/h3&gt; &lt;p&gt;Promises have three states:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Pending:&lt;/strong&gt; This is an initial state of the Promise before an operation begins&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Fulfilled:&lt;/strong&gt; This state indicates that the specified operation was completed.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Rejected:&lt;/strong&gt; This state indicates that the operation did not complete. In this case an error value will be thrown.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a callback function&lt;/h3&gt; &lt;p&gt;A callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action. Let&#39;s take a simple example of how to use callback function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function callbackFunction(name) {
  console.log(&#39;Hello &#39; + name);
}

function outerFunction(callback) {
  let name = prompt(&#39;Please enter your name.&#39;);
  callback(name);
}

outerFunction(callbackFunction);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we need callbacks&lt;/h3&gt; &lt;p&gt;The callbacks are needed because javascript is an event driven language. That means instead of waiting for a response javascript will keep executing while listening for other events. Let&#39;s take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function firstFunction(){
  // Simulate a code delay
  setTimeout( function(){
    console.log(&#39;First function called&#39;);
  }, 1000 );
}
function secondFunction(){
  console.log(&#39;Second function called&#39;);
}
firstFunction();
secondFunction();

Output
// Second function called
// First function called
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As observed from the output, javascript didn&#39;t wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn’t execute until the other code finishes execution.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a callback hell&lt;/h3&gt; &lt;p&gt;Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async1(function(){
    async2(function(){
        async3(function(){
            async4(function(){
                ....
            });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are server-sent events&lt;/h3&gt; &lt;p&gt;Server-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter updates, stock price updates, news feeds etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you receive server-sent event notifications&lt;/h3&gt; &lt;p&gt;The EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if(typeof(EventSource) !== &quot;undefined&quot;) {
  var source = new EventSource(&quot;sse_generator.js&quot;);
  source.onmessage = function(event) {
    document.getElementById(&quot;output&quot;).innerHTML += event.data + &quot;&amp;lt;br&amp;gt;&quot;;
  };
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check browser support for server-sent events&lt;/h3&gt; &lt;p&gt;You can perform browser support for server-sent events before using it as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if(typeof(EventSource) !== &quot;undefined&quot;) {
  // Server-sent events supported. Let&#39;s have some code here!
} else {
  // No server-sent events supported
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the events available for server sent events&lt;/h3&gt; &lt;p&gt;Below are the list of events available for server sent events | Event | Description | |---- | --------- | onopen | It is used when a connection to the server is opened | | onmessage | This event is used when a message is received | | onerror | It happens when an error occurs|&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main rules of promise&lt;/h3&gt; &lt;p&gt;A promise must follow a specific set of rules,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;A promise is an object that supplies a standard-compliant &lt;code&gt;.then()&lt;/code&gt; method&lt;/li&gt; 
   &lt;li&gt;A pending promise may transition into either fulfilled or rejected state&lt;/li&gt; 
   &lt;li&gt;A fulfilled or rejected promise is settled and it must not transition into any other state.&lt;/li&gt; 
   &lt;li&gt;Once a promise is settled, the value must not change.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is callback in callback&lt;/h3&gt; &lt;p&gt;You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;loadScript(&#39;/script1.js&#39;, function(script) {
   console.log(&#39;first script is loaded&#39;);

  loadScript(&#39;/script2.js&#39;, function(script) {

    console.log(&#39;second script is loaded&#39;);

    loadScript(&#39;/script3.js&#39;, function(script) {

        console.log(&#39;third script is loaded&#39;);
      // after all scripts are loaded
    });

  })

});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is promise chaining&lt;/h3&gt; &lt;p&gt;The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let&#39;s take an example of promise chaining for calculating the final result,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new Promise(function(resolve, reject) {

  setTimeout(() =&amp;gt; resolve(1), 1000);

}).then(function(result) {

  console.log(result); // 1
  return result * 2;

}).then(function(result) {

  console.log(result); // 2
  return result * 3;

}).then(function(result) {

  console.log(result); // 6
  return result * 4;

});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The initial promise resolves in 1 second,&lt;/li&gt; 
   &lt;li&gt;After that &lt;code&gt;.then&lt;/code&gt; handler is called by logging the result(1) and then return a promise with the value of result * 2.&lt;/li&gt; 
   &lt;li&gt;After that the value passed to the next &lt;code&gt;.then&lt;/code&gt; handler by logging the result(2) and return a promise with result * 3.&lt;/li&gt; 
   &lt;li&gt;Finally the value passed to the last &lt;code&gt;.then&lt;/code&gt; handler by logging the result(6) and return a promise with result * 4.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is promise.all&lt;/h3&gt; &lt;p&gt;Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.all([Promise1, Promise2, Promise3]) .then(result) =&amp;gt; {   console.log(result) }) .catch(error =&amp;gt; console.log(`Error in promises ${error}`))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember that the order of the promises(output the result) is maintained as per input order.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the race method in promise&lt;/h3&gt; &lt;p&gt;Promise.race() method will return the promise instance which is firstly resolved or rejected. Let&#39;s take an example of race() method where promise2 is resolved first&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var promise1 = new Promise(function(resolve, reject) {
    setTimeout(resolve, 500, &#39;one&#39;);
});
var promise2 = new Promise(function(resolve, reject) {
    setTimeout(resolve, 100, &#39;two&#39;);
});

Promise.race([promise1, promise2]).then(function(value) {
  console.log(value); // &quot;two&quot; // Both promises will resolve, but promise2 is faster
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a strict mode in javascript&lt;/h3&gt; &lt;p&gt;Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; instructs the browser to use the javascript code in the Strict mode.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need strict mode&lt;/h3&gt; &lt;p&gt;Strict mode is useful to write &quot;secure&quot; JavaScript by notifying &quot;bad syntax&quot; into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you declare strict mode&lt;/h3&gt; &lt;p&gt;The strict mode is declared by adding &quot;use strict&quot;; to the beginning of a script or a function. If declared at the beginning of a script, it has global scope.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;use strict&quot;;
x = 3.14; // This will cause an error because x is not declared
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and if you declare inside a function, it has local scope&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;x = 3.14;       // This will not cause an error.
myFunction();

function myFunction() {
  &quot;use strict&quot;;
  y = 3.14;   // This will cause an error
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of double exclamation&lt;/h3&gt; &lt;p&gt;The double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, true. For example, you can test IE version using this expression as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let isIE8 = false;
isIE8 = !! navigator.userAgent.match(/MSIE 8.0/);
console.log(isIE8); // returns true or false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t use this expression then it returns the original value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(navigator.userAgent.match(/MSIE 8.0/));  // returns either an Array or null
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The expression !! is not an operator, but it is just twice of ! operator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the delete operator&lt;/h3&gt; &lt;p&gt;The delete keyword is used to delete the property as well as its value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user= {name: &quot;John&quot;, age:20};
delete user.age;

console.log(user); // {name: &quot;John&quot;}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the typeof operator&lt;/h3&gt; &lt;p&gt;You can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;typeof &quot;John Abraham&quot;     // Returns &quot;string&quot;
typeof (1 + 2)        // Returns &quot;number&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is undefined property&lt;/h3&gt; &lt;p&gt;The undefined property indicates that a variable has not been assigned a value, or not declared at all. The type of undefined value is undefined too.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user;    // Value is undefined, type is undefined
console.log(typeof(user)) //undefined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Any variable can be emptied by setting the value to undefined.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;user = undefined
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is null value&lt;/h3&gt; &lt;p&gt;The value null represents the intentional absence of any object value. It is one of JavaScript&#39;s primitive values. The type of null value is object. You can empty the variable by setting the value to null.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user = null;
console.log(typeof(user)) //object
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between null and undefined&lt;/h3&gt; &lt;p&gt;Below are the main differences between null and undefined,&lt;/p&gt; &lt;p&gt;| Null | Undefined | |---- | -----------| | It is an assignment value which indicates that variable points to no object. | It is not an assignment value where a variable has been declared but has not yet been assigned a value. | | Type of null is object | Type of undefined is undefined | | The null value is a primitive value that represents the null, empty, or non-existent reference. | The undefined value is a primitive value used when a variable has not been assigned a value.| | Indicates the absence of a value for a variable | Indicates absence of variable itself | | Converted to zero (0) while performing primitive operations | Converted to NaN while performing primitive operations |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is eval&lt;/h3&gt; &lt;p&gt;The eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(eval(&#39;1 + 2&#39;)); //  3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between window and document&lt;/h3&gt; &lt;p&gt;Below are the main differences between window and document,&lt;/p&gt; &lt;p&gt;| Window | Document | |---- | --------- | It is the root level element in any web page | It is the direct child of the window object. This is also known as Document Object Model(DOM) | | By default window object is available implicitly in the page | You can access it via window.document or document. | | It has methods like alert(), confirm() and properties like document, location | It provides methods like getElementById, getElementByTagName, createElement etc |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access history in javascript&lt;/h3&gt; &lt;p&gt;The window.history object contains the browser&#39;s history. You can load previous and next URLs in the history using back() and next() methods.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function goBack() {
  window.history.back()
}
function goForward() {
  window.history.forward()
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also access history without window prefix.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the javascript data types&lt;/h3&gt; &lt;p&gt;Below are the list of javascript data types available&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Number&lt;/li&gt; 
   &lt;li&gt;String&lt;/li&gt; 
   &lt;li&gt;Boolean&lt;/li&gt; 
   &lt;li&gt;Object&lt;/li&gt; 
   &lt;li&gt;Undefined&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is isNaN&lt;/h3&gt; &lt;p&gt;The isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;isNaN(&#39;Hello&#39;) //true
isNaN(&#39;100&#39;) //false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between undeclared and undefined variables&lt;/h3&gt; &lt;p&gt;Below are the major differences between undeclared and undefined variables,&lt;/p&gt; &lt;p&gt;| undeclared | undefined | |---- | --------- | These variables do not exist in a program and are not declared | These variables declared in the program but have not assigned any value | | If you try to read the value of an undeclared variable, then a runtime error is encountered | If you try to read the value of an undefined variable, an undefined value is returned. |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are global variables&lt;/h3&gt; &lt;p&gt;Global variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variable&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;msg = &quot;Hello&quot; // var is missing, it becomes global variable
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems with global variables&lt;/h3&gt; &lt;p&gt;The problem with global variables is the conflict of variable names of local and global scope. It is also difficult to debug and test the code that relies on global variables.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is NaN property&lt;/h3&gt; &lt;p&gt;The NaN property is a global property that represents &quot;Not-a-Number&quot; value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few cases&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Math.sqrt(-1)
parseInt(&quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of isFinite function&lt;/h3&gt; &lt;p&gt;The isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;isFinite(Infinity);  // false
isFinite(NaN);       // false
isFinite(-Infinity); // false

isFinite(100);         // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event flow&lt;/h3&gt; &lt;p&gt;Event flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object. There are two ways of event flow&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Top to Bottom(Event Capturing)&lt;/li&gt; 
   &lt;li&gt;Bottom to Top (Event Bubbling)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is event bubbling&lt;/h3&gt; &lt;p&gt;Event bubbling is a type of event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is event capturing&lt;/h3&gt; &lt;p&gt;Event capturing is a type of event propagation where the event is first captured by the outermost element, and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the innermost DOM element.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you submit a form using JavaScript&lt;/h3&gt; &lt;p&gt;You can submit a form using JavaScript use document.form[0].submit(). All the form input&#39;s information is submitted using onsubmit event handler&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function submit() {
    document.form[0].submit();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find operating system details&lt;/h3&gt; &lt;p&gt;The window.navigator object contains information about the visitor&#39;s browser OS details. Some of the OS properties are available under platform property,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(navigator.platform);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between document load and DOMContentLoaded events&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;DOMContentLoaded&lt;/code&gt; event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between native, host and user objects&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Native objects&lt;/code&gt; are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec. &lt;code&gt;Host objects&lt;/code&gt; are objects provided by the browser or runtime environment (Node). For example, window, XmlHttpRequest, DOM nodes etc are considered as host objects. &lt;code&gt;User objects&lt;/code&gt; are objects defined in the javascript code. For example, User objects created for profile information.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the tools or techniques used for debugging JavaScript code&lt;/h3&gt; &lt;p&gt;You can use below tools or techniques for debugging javascript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Chrome Devtools&lt;/li&gt; 
   &lt;li&gt;debugger statement&lt;/li&gt; 
   &lt;li&gt;Good old console.log statement&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the pros and cons of promises over callbacks&lt;/h3&gt; &lt;p&gt;Below are the list of pros and cons of promises over callbacks,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It avoids callback hell which is unreadable&lt;/li&gt; 
   &lt;li&gt;Easy to write sequential asynchronous code with .then()&lt;/li&gt; 
   &lt;li&gt;Easy to write parallel asynchronous code with Promise.all()&lt;/li&gt; 
   &lt;li&gt;Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It makes little complex code&lt;/li&gt; 
   &lt;li&gt;You need to load a polyfill if ES6 is not supported&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between an attribute and a property&lt;/h3&gt; &lt;p&gt;Attributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML element has 2 attributes type and value,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;input type=&quot;text&quot; value=&quot;Name:&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can retrieve the attribute value as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const input = document.querySelector(&#39;input&#39;);
console.log(input.getAttribute(&#39;value&#39;)); // Good morning
console.log(input.value); // Good morning
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And after you change the value of the text field to &quot;Good evening&quot;, it becomes like&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(input.getAttribute(&#39;value&#39;)); // Good morning
console.log(input.value); // Good evening
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is same-origin policy&lt;/h3&gt; &lt;p&gt;The same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a malicious script on one page from obtaining access to sensitive data on another web page using Document Object Model(DOM).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of void 0&lt;/h3&gt; &lt;p&gt;Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect, because it will return the undefined primitive value. It is commonly used for HTML documents that use href=&quot;JavaScript:Void(0);&quot; within an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. i.e, when you click a link, the browser loads a new page or refreshes the same page. But this behavior will be prevented using this expression. For example, the below link notify the message without reloading the page&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;a href=&quot;JavaScript:void(0);&quot; onclick=&quot;alert(&#39;Well done!&#39;)&quot;&amp;gt;Click Me!&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript a compiled or interpreted language&lt;/h3&gt; &lt;p&gt;JavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript a case-sensitive language&lt;/h3&gt; &lt;p&gt;Yes, JavaScript is a case sensitive language. The language keywords, variables, function &amp;amp; object names, and any other identifiers must always be typed with a consistent capitalization of letters.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is there any relation between Java and JavaScript&lt;/h3&gt; &lt;p&gt;No, they are entirely two different programming languages and have nothing to do with each other. But both of them are Object Oriented Programming languages and like many other languages, they follow similar syntax for basic features(if, else, for, switch, break, continue etc).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are events&lt;/h3&gt; &lt;p&gt;Events are &quot;things&quot; that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can &lt;code&gt;react&lt;/code&gt; on these events. Some of the examples of HTML events are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Web page has finished loading&lt;/li&gt; 
   &lt;li&gt;Input field was changed&lt;/li&gt; 
   &lt;li&gt;Button was clicked&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let&#39;s describe the behavior of click event for button element,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt;
   &amp;lt;script&amp;gt;
     function greeting() {
       alert(&#39;Hello! Good morning&#39;);
     }
   &amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
   &amp;lt;button type=&quot;button&quot; onclick=&quot;greeting()&quot;&amp;gt;Click me&amp;lt;/button&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Who created javascript&lt;/h3&gt; &lt;p&gt;JavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was developed under the name &lt;code&gt;Mocha&lt;/code&gt;, but later the language was officially called &lt;code&gt;LiveScript&lt;/code&gt; when it first shipped in beta releases of Netscape.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of preventDefault method&lt;/h3&gt; &lt;p&gt;The preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&quot;link&quot;).addEventListener(&quot;click&quot;, function(event){
 event.preventDefault();
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember that not all events are cancelable.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of stopPropagation method&lt;/h3&gt; &lt;p&gt;The stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;p&amp;gt;Click DIV1 Element&amp;lt;/p&amp;gt;
&amp;lt;div onclick=&quot;secondFunc()&quot;&amp;gt;DIV 2
  &amp;lt;div onclick=&quot;firstFunc(event)&quot;&amp;gt;DIV 1&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
function firstFunc(event) {
  alert(&quot;DIV 1&quot;);
  event.stopPropagation();
}

function secondFunc() {
  alert(&quot;DIV 2&quot;);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the steps involved in return false usage&lt;/h3&gt; &lt;p&gt;The return false statement in event handlers performs the below steps,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;First it stops the browser&#39;s default action or behaviour.&lt;/li&gt; 
   &lt;li&gt;It prevents the event from propagating the DOM&lt;/li&gt; 
   &lt;li&gt;Stops callback execution and returns immediately when called.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is BOM&lt;/h3&gt; &lt;p&gt;The Browser Object Model (BOM) allows JavaScript to &quot;talk to&quot; the browser. It consists of the objects navigator, history, screen, location and document which are children of the window. The Browser Object Model is not standardized and can change based on different browsers.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/bom.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of setTimeout&lt;/h3&gt; &lt;p&gt;The setTimeout() method is used to call a function or evaluate an expression after a specified number of milliseconds. For example, let&#39;s log a message after 2 seconds using setTimeout method,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;setTimeout(function(){ console.log(&quot;Good morning&quot;); }, 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of setInterval&lt;/h3&gt; &lt;p&gt;The setInterval() method is used to call a function or evaluate an expression at specified intervals (in milliseconds). For example, let&#39;s log a message after 2 seconds using setInterval method,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;setInterval(function(){ console.log(&quot;Good morning&quot;); }, 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why is JavaScript treated as Single threaded&lt;/h3&gt; &lt;p&gt;JavaScript is a single-threaded language. Because the language specification does not allow the programmer to write code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages like java, go, C++ can make multi-threaded and multi-process programs.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event delegation&lt;/h3&gt; &lt;p&gt;Event delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.&lt;/p&gt; &lt;p&gt;For example, if you wanted to detect field changes in inside a specific form, you can use event delegation technique,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var form = document.querySelector(&#39;#registration-form&#39;);

// Listen for changes to fields inside the form
form.addEventListener(&#39;input&#39;, function (event) {

// Log the field that was changed
console.log(event.target);

}, false);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ECMAScript&lt;/h3&gt; &lt;p&gt;ECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript was released in 1997.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSON&lt;/h3&gt; &lt;p&gt;JSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language in the way objects are built in JavaScript.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the syntax rules of JSON&lt;/h3&gt; &lt;p&gt;Below are the list of syntax rules of JSON&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The data is in name/value pairs&lt;/li&gt; 
   &lt;li&gt;The data is separated by commas&lt;/li&gt; 
   &lt;li&gt;Curly braces hold objects&lt;/li&gt; 
   &lt;li&gt;Square brackets hold arrays&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose JSON stringify&lt;/h3&gt; &lt;p&gt;When sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var userJSON = {&#39;name&#39;: &#39;John&#39;, age: 31}
var userString = JSON.stringify(user);
console.log(userString); //&quot;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:31}&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you parse JSON string&lt;/h3&gt; &lt;p&gt;When receiving the data from a web server, the data is always in a string format. But you can convert this string value to a javascript object using parse() method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var userString = &#39;{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:31}&#39;;
var userJSON = JSON.parse(userString);
console.log(userJSON);// {name: &quot;John&quot;, age: 31}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need JSON&lt;/h3&gt; &lt;p&gt;When exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can easily be sent to and from a server, and used as a data format by any programming language.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are PWAs&lt;/h3&gt; &lt;p&gt;Progressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and indexed by search engines.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of clearTimeout method&lt;/h3&gt; &lt;p&gt;The clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function before that. i.e, The return value of setTimeout() function is stored in a variable and it’s passed into the clearTimeout() function to clear the timer.&lt;/p&gt; &lt;p&gt;For example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be cleared by the clearTimeout() method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
var msg;
function greeting() {
   alert(&#39;Good morning&#39;);
}
function start() {
  msg =setTimeout(greeting, 3000);

}

function stop() {
    clearTimeout(msg);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of clearInterval method&lt;/h3&gt; &lt;p&gt;The clearInterval() function is used in javascript to clear the interval which has been set by setInterval() function. i.e, The return value returned by setInterval() function is stored in a variable and it’s passed into the clearInterval() function to clear the interval.&lt;/p&gt; &lt;p&gt;For example, the below setInterval method is used to display the message for every 3 seconds. This interval can be cleared by the clearInterval() method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
var msg;
function greeting() {
   alert(&#39;Good morning&#39;);
}
function start() {
  msg = setInterval(greeting, 3000);

}

function stop() {
    clearInterval(msg);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you redirect new page in javascript&lt;/h3&gt; &lt;p&gt;In vanilla javascript, you can redirect to a new page using the &lt;code&gt;location&lt;/code&gt; property of window object. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function redirect() {
   window.location.href = &#39;newPage.html&#39;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether a string contains a substring&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to check whether a string contains a substring or not,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using includes:&lt;/strong&gt; ES6 provided &lt;code&gt;String.prototype.includes&lt;/code&gt; method to test a string contains a substring&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var mainString = &quot;hello&quot;, subString = &quot;hell&quot;;
mainString.includes(subString)
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using indexOf:&lt;/strong&gt; In an ES5 or older environment, you can use &lt;code&gt;String.prototype.indexOf&lt;/code&gt; which returns the index of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var mainString = &quot;hello&quot;, subString = &quot;hell&quot;;
mainString.indexOf(subString) !== -1
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using RegEx:&lt;/strong&gt; The advanced solution is using Regular expression&#39;s test method(&lt;code&gt;RegExp.test&lt;/code&gt;), which allows for testing for against regular expressions&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var mainString = &quot;hello&quot;, regex = &quot;/hell/&quot;;
regex.test(mainString)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you validate an email in javascript&lt;/h3&gt; &lt;p&gt;You can validate an email in javascript using regular expressions. It is recommended to do validations on the server side instead of the client side. Because the javascript can be disabled on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function validateEmail(email) {
    var re = /^(([^&amp;lt;&amp;gt;()\[\]\\.,;:\s@&quot;]+(\.[^&amp;lt;&amp;gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The above regular expression accepts unicode characters.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the current url with javascript&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;window.location.href&lt;/code&gt; expression to get the current url path and you can use the same expression for updating the URL too. You can also use &lt;code&gt;document.URL&lt;/code&gt; for read-only purposes but this solution has issues in FF.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;location.href&#39;, window.location.href); // Returns full URL
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the various url properties of location object&lt;/h3&gt; &lt;p&gt;The below &lt;code&gt;Location&lt;/code&gt; object properties can be used to access URL components of the page,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;href - The entire URL&lt;/li&gt; 
   &lt;li&gt;protocol - The protocol of the URL&lt;/li&gt; 
   &lt;li&gt;host - The hostname and port of the URL&lt;/li&gt; 
   &lt;li&gt;hostname - The hostname of the URL&lt;/li&gt; 
   &lt;li&gt;port - The port number in the URL&lt;/li&gt; 
   &lt;li&gt;pathname - The path name of the URL&lt;/li&gt; 
   &lt;li&gt;search - The query portion of the URL&lt;/li&gt; 
   &lt;li&gt;hash - The anchor portion of the URL&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do get query string values in javascript&lt;/h3&gt; &lt;p&gt;You can use URLSearchParams to get query string values in javascript. Let&#39;s see an example to get the client code value from URL query string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const urlParams = new URLSearchParams(window.location.search);
const clientCode = urlParams.get(&#39;clientCode&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check if a key exists in an object&lt;/h3&gt; &lt;p&gt;You can check whether a key exists in an object or not using three approaches,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using in operator:&lt;/strong&gt; You can use the in operator whether a key exists in an object or not&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;key&quot; in obj
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and If you want to check if a key doesn&#39;t exist, remember to use parenthesis,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;!(&quot;key&quot; in obj)
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using hasOwnProperty method:&lt;/strong&gt; You can use &lt;code&gt;hasOwnProperty&lt;/code&gt; to particularly test for properties of the object instance (and not inherited properties)&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;obj.hasOwnProperty(&quot;key&quot;) // true
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using undefined comparison:&lt;/strong&gt; If you access a non-existing property from an object, the result is undefined. Let’s compare the properties against undefined to determine the existence of the property.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = {
  name: &#39;John&#39;
};

console.log(user.name !== undefined);     // true
console.log(user.nickName !== undefined); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you loop through or enumerate javascript object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;for-in&lt;/code&gt; loop to loop through javascript object. You can also make sure that the key you get is an actual property of an object, and doesn&#39;t come from the prototype using &lt;code&gt;hasOwnProperty&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = {
    &quot;k1&quot;: &quot;value1&quot;,
    &quot;k2&quot;: &quot;value2&quot;,
    &quot;k3&quot;: &quot;value3&quot;
};

for (var key in object) {
    if (object.hasOwnProperty(key)) {
        console.log(key + &quot; -&amp;gt; &quot; + object[key]); // k1 -&amp;gt; value1 ...
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you test for an empty object&lt;/h3&gt; &lt;p&gt;There are different solutions based on ECMAScript versions&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using Object entries(ECMA 7+):&lt;/strong&gt; You can use object entries length along with constructor type.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.entries(obj).length === 0 &amp;amp;&amp;amp; obj.constructor === Object // Since date object length is 0, you need to check constructor check as well
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using Object keys(ECMA 5+):&lt;/strong&gt; You can use object keys length along with constructor type.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.keys(obj).length === 0 &amp;amp;&amp;amp; obj.constructor === Object // Since date object length is 0, you need to check constructor check as well
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using for-in with hasOwnProperty(Pre-ECMA 5):&lt;/strong&gt; You can use a for-in loop along with hasOwnProperty.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isEmpty(obj) {
  for(var prop in obj) {
    if(obj.hasOwnProperty(prop)) {
      return false;
    }
  }

  return JSON.stringify(obj) === JSON.stringify({});
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an arguments object&lt;/h3&gt; &lt;p&gt;The arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function. For example, let&#39;s see how to use arguments object inside sum function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function sum() {
    var total = 0;
    for (var i = 0, len = arguments.length; i &amp;lt; len; ++i) {
        total += arguments[i];
    }
    return total;
}

sum(1, 2, 3) // returns 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can&#39;t apply array methods on arguments object. But you can convert into a regular array as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var argsArray = Array.prototype.slice.call(arguments);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make first letter of the string in an uppercase&lt;/h3&gt; &lt;p&gt;You can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to generate a string with the first letter in uppercase.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the pros and cons of for loop&lt;/h3&gt; &lt;p&gt;The for-loop is a commonly used iteration syntax in javascript. It has both pros and cons ####Pros&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Works on every environment&lt;/li&gt; 
   &lt;li&gt;You can use break and continue flow control statements&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;####Cons&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Too verbose&lt;/li&gt; 
   &lt;li&gt;Imperative&lt;/li&gt; 
   &lt;li&gt;You might face one-by-off errors&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you display the current date in javascript&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new Date()&lt;/code&gt; to generate a new Date object containing the current date and time. For example, let&#39;s display the current date in mm/dd/yyyy&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var today = new Date();
var dd = String(today.getDate()).padStart(2, &#39;0&#39;);
var mm = String(today.getMonth() + 1).padStart(2, &#39;0&#39;); //January is 0!
var yyyy = today.getFullYear();

today = mm + &#39;/&#39; + dd + &#39;/&#39; + yyyy;
document.write(today);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare two date objects&lt;/h3&gt; &lt;p&gt;You need to use date.getTime() method to compare date values instead of comparison operators (==, !=, ===, and !== operators)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var d1 = new Date();
var d2 = new Date(d1);
console.log(d1.getTime() === d2.getTime()); //True
console.log(d1 === d2); // False
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check if a string starts with another string&lt;/h3&gt; &lt;p&gt;You can use ECMAScript 6&#39;s &lt;code&gt;String.prototype.startsWith()&lt;/code&gt; method to check if a string starts with another string or not. But it is not yet supported in all browsers. Let&#39;s see an example to see this usage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;Good morning&quot;.startsWith(&quot;Good&quot;); // true
&quot;Good morning&quot;.startsWith(&quot;morning&quot;); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you trim a string in javascript&lt;/h3&gt; &lt;p&gt;JavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;  Hello World   &quot;.trim(); //Hello World
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your browser(&amp;lt;IE9) doesn&#39;t support this method then you can use below polyfill.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (!String.prototype.trim) {
    (function() {
        // Make sure we trim BOM and NBSP
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        String.prototype.trim = function() {
            return this.replace(rtrim, &#39;&#39;);
        };
    })();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you add a key value pair in javascript&lt;/h3&gt; &lt;p&gt;There are two possible solutions to add new properties to an object. Let&#39;s take a simple object to explain these solutions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var object = {
    key1: value1,
    key2: value2
};
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using dot notation:&lt;/strong&gt; This solution is useful when you know the name of the property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;object.key3 = &quot;value3&quot;;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using square bracket notation:&lt;/strong&gt; This solution is useful when the name of the property is dynamically determined.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;obj[&quot;key3&quot;] = &quot;value3&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is the !-- notation represents a special operator&lt;/h3&gt; &lt;p&gt;No,that&#39;s not a special operator. But it is a combination of 2 standard operators one after the other,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;A logical not (!)&lt;/li&gt; 
   &lt;li&gt;A prefix decrement (--)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;At first, the value decremented by one and then tested to see if it is equal to zero or not for determining the truthy/falsy value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you assign default values to variables&lt;/h3&gt; &lt;p&gt;You can use the logical or operator &lt;code&gt;||&lt;/code&gt; in an assignment expression to provide a default value. The syntax looks like as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = b || c;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As per the above expression, variable &#39;a &#39;will get the value of &#39;c&#39; only if &#39;b&#39; is falsy (if is null, false, undefined, 0, empty string, or NaN), otherwise &#39;a&#39; will get the value of &#39;b&#39;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define multiline strings&lt;/h3&gt; &lt;p&gt;You can define multiline string literals using the &#39;&#39; character followed by line terminator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var str = &quot;This is a \
very lengthy \
sentence!&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But if you have a space after the &#39;&#39; character, the code will look exactly the same, but it will raise a SyntaxError.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an app shell model&lt;/h3&gt; &lt;p&gt;An application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and instantly loads on your users&#39; screens, similar to what you see in native applications. It is useful for getting some initial HTML to the screen fast without a network.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can we define properties for functions&lt;/h3&gt; &lt;p&gt;Yes, We can define properties for functions because functions are also objects.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fn = function(x) {
   //Function code goes here
}

fn.name = &quot;John&quot;;

fn.profile = function(y) {
  //Profile code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the way to find the number of parameters expected by a function&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;function.length&lt;/code&gt; syntax to find the number of parameters expected by a function. Let&#39;s take an example of &lt;code&gt;sum&lt;/code&gt; function to calculate the sum of numbers,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function sum(num1, num2, num3, num4){
    return num1 + num2 + num3 + num4;
}
sum.length // 4 is the number of parameters expected.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a polyfill&lt;/h3&gt; &lt;p&gt;A polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are break and continue statements&lt;/h3&gt; &lt;p&gt;The break statement is used to &quot;jump out&quot; of a loop. i.e, It breaks the loop and continues executing the code after the loop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (i = 0; i &amp;lt; 10; i++) {
  if (i === 5) { break; }
  text += &quot;Number: &quot; + i + &quot;&amp;lt;br&amp;gt;&quot;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The continue statement is used to &quot;jump over&quot; one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (i = 0; i &amp;lt; 10; i++) {
    if (i === 5) { continue; }
    text += &quot;Number: &quot; + i + &quot;&amp;lt;br&amp;gt;&quot;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are js labels&lt;/h3&gt; &lt;p&gt;The label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var i, j;

loop1:
for (i = 0; i &amp;lt; 3; i++) {
   loop2:
   for (j = 0; j &amp;lt; 3; j++) {
      if (i === j) {
         continue loop1;
      }
      console.log(&#39;i = &#39; + i + &#39;, j = &#39; + j);
   }
}

// Output is:
//   &quot;i = 1, j = 0&quot;
//   &quot;i = 2, j = 0&quot;
//   &quot;i = 2, j = 1&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of keeping declarations at the top&lt;/h3&gt; &lt;p&gt;It is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Gives cleaner code&lt;/li&gt; 
   &lt;li&gt;It provides a single place to look for local variables&lt;/li&gt; 
   &lt;li&gt;Easy to avoid unwanted global variables&lt;/li&gt; 
   &lt;li&gt;It reduces the possibility of unwanted re-declarations&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of initializing variables&lt;/h3&gt; &lt;p&gt;It is recommended to initialize variables because of the below benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It gives cleaner code&lt;/li&gt; 
   &lt;li&gt;It provides a single place to initialize variables&lt;/li&gt; 
   &lt;li&gt;Avoid undefined values in the code&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the recommendations to create new object&lt;/h3&gt; &lt;p&gt;It is recommended to avoid creating new objects using &lt;code&gt;new Object()&lt;/code&gt;. Instead you can initialize values based on it&#39;s type to create the objects.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Assign {} instead of new Object()&lt;/li&gt; 
   &lt;li&gt;Assign &quot;&quot; instead of new String()&lt;/li&gt; 
   &lt;li&gt;Assign 0 instead of new Number()&lt;/li&gt; 
   &lt;li&gt;Assign false instead of new Boolean()&lt;/li&gt; 
   &lt;li&gt;Assign [] instead of new Array()&lt;/li&gt; 
   &lt;li&gt;Assign /()/ instead of new RegExp()&lt;/li&gt; 
   &lt;li&gt;Assign function (){} instead of new Function()&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;You can define them as an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var v1 = {};
var v2 = &quot;&quot;;
var v3 = 0;
var v4 = false;
var v5 = [];
var v6 = /()/;
var v7 = function(){};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define JSON arrays&lt;/h3&gt; &lt;p&gt;JSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;users&quot;:[
  {&quot;firstName&quot;:&quot;John&quot;, &quot;lastName&quot;:&quot;Abrahm&quot;},
  {&quot;firstName&quot;:&quot;Anna&quot;, &quot;lastName&quot;:&quot;Smith&quot;},
  {&quot;firstName&quot;:&quot;Shane&quot;, &quot;lastName&quot;:&quot;Warn&quot;}
]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you generate random integers&lt;/h3&gt; &lt;p&gt;You can use Math.random() with Math.floor() to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Math.floor(Math.random() * 10) + 1;     // returns a random integer from 1 to 10
Math.floor(Math.random() * 100) + 1;     // returns a random integer from 1 to 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can you write a random integers function to print integers with in a range&lt;/h3&gt; &lt;p&gt;Yes, you can create a proper random function to return a random number between min and max (both included)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function randomInteger(min, max) {
  return Math.floor(Math.random() * (max - min + 1) ) + min;
}
randomInteger(1, 100); // returns a random integer from 1 to 100
randomInteger(1, 1000); // returns a random integer from 1 to 1000
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is tree shaking&lt;/h3&gt; &lt;p&gt;Tree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler &lt;code&gt;rollup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the need of tree shaking&lt;/h3&gt; &lt;p&gt;Tree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a “Hello World” Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it recommended to use eval&lt;/h3&gt; &lt;p&gt;No, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Regular Expression&lt;/h3&gt; &lt;p&gt;A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let&#39;s see the syntax format now,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/pattern/modifiers;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example, the regular expression or search pattern with case-insensitive username would be,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/John/i
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the string methods available in Regular expression&lt;/h3&gt; &lt;p&gt;Regular Expressions has two string methods: search() and replace(). The search() method uses an expression to search for a match, and returns the position of the match.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var msg = &quot;Hello John&quot;;
var n = msg.search(/John/i); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The replace() method is used to return a modified string where the pattern is replaced.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var msg = &quot;Hello John&quot;;
var n = msg.replace(/John/i, &quot;Buttler&quot;); // Hello Buttler
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are modifiers in regular expression&lt;/h3&gt; &lt;p&gt;Modifiers can be used to perform case-insensitive and global searches. Let&#39;s list down some of the modifiers,&lt;/p&gt; &lt;p&gt;| Modifier | Description | |---- | --------- | i | Perform case-insensitive matching | | g | Perform a global match rather than stops at first match | | m | Perform multiline matching|&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of global modifier,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var text = &quot;Learn JS one by one&quot;;
var pattern = /one/g;
var result = text.match(pattern); // one,one
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are regular expression patterns&lt;/h3&gt; &lt;p&gt;Regular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3 types,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Brackets:&lt;/strong&gt; These are used to find a range of characters. For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;[abc]: Used to find any of the characters between the brackets(a,b,c)&lt;/li&gt; 
     &lt;li&gt;[0-9]: Used to find any of the digits between the brackets&lt;/li&gt; 
     &lt;li&gt;(a|b): Used to find any of the alternatives separated with |&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Metacharacters:&lt;/strong&gt; These are characters with a special meaning For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;\d: Used to find a digit&lt;/li&gt; 
     &lt;li&gt;\s: Used to find a whitespace character&lt;/li&gt; 
     &lt;li&gt;\b: Used to find a match at the beginning or ending of a word&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Quantifiers:&lt;/strong&gt; These are useful to define quantities For example, below are some use cases, 
    &lt;ol&gt; 
     &lt;li&gt;n+: Used to find matches for any string that contains at least one n&lt;/li&gt; 
     &lt;li&gt;n*: Used to find matches for any string that contains zero or more occurrences of n&lt;/li&gt; 
     &lt;li&gt;n?: Used to find matches for any string that contains zero or one occurrences of n&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a RegExp object&lt;/h3&gt; &lt;p&gt;RegExp object is a regular expression object with predefined properties and methods. Let&#39;s see the simple usage of RegExp object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var regexp = new RegExp(&#39;\\w+&#39;);
console.log(regexp);
// expected output: /\w+/
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you search a string for a pattern&lt;/h3&gt; &lt;p&gt;You can use the test() method of regular expression in order to search a string for a pattern, and return true or false depending on the result.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var pattern = /you/;
console.log(pattern.test(&quot;How are you?&quot;)); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of exec method&lt;/h3&gt; &lt;p&gt;The purpose of exec method is similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var pattern = /you/;
console.log(pattern.exec(&quot;How are you?&quot;)); //[&quot;you&quot;, index: 8, input: &quot;How are you?&quot;, groups: undefined]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you change the style of a HTML element&lt;/h3&gt; &lt;p&gt;You can change inline style or classname of a HTML element using javascript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using style property:&lt;/strong&gt; You can modify inline style using style property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&quot;title&quot;).style.fontSize = &quot;30px&quot;;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using ClassName property:&lt;/strong&gt; It is easy to modify element class using className property&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; document.getElementById(&quot;title&quot;).style.className = &quot;custom-title&quot;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What would be the result of 1+2+&#39;3&#39;&lt;/h3&gt; &lt;p&gt;The output is going to be &lt;code&gt;33&lt;/code&gt;. Since &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are numeric values, the result of the first two digits is going to be a numeric value &lt;code&gt;3&lt;/code&gt;. The next digit is a string type value because of that the addition of numeric value &lt;code&gt;3&lt;/code&gt; and string type value &lt;code&gt;3&lt;/code&gt; is just going to be a concatenation value &lt;code&gt;33&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a debugger statement&lt;/h3&gt; &lt;p&gt;The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect. For example, in the below function a debugger statement has been inserted. So execution is paused at the debugger statement just like a breakpoint in the script source.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getProfile() {
// code goes here
debugger;
// code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of breakpoints in debugging&lt;/h3&gt; &lt;p&gt;You can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining values, you can resume the execution of code using the play button.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use reserved words as identifiers&lt;/h3&gt; &lt;p&gt;No, you cannot use the reserved words as variables, labels, object or function names. Let&#39;s see one simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var else = &quot;hello&quot;; // Uncaught SyntaxError: Unexpected token else
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a mobile browser&lt;/h3&gt; &lt;p&gt;You can use regex which returns a true or false value depending on whether or not the user is browsing with a mobile.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.mobilecheck = function() {
  var mobileCheck = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) mobileCheck = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return mobileCheck;
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a mobile browser without regexp&lt;/h3&gt; &lt;p&gt;You can detect mobile browsers by simply running through a list of devices and checking if the useragent matches anything. This is an alternative solution for RegExp usage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function detectmob() {
 if( navigator.userAgent.match(/Android/i)
 || navigator.userAgent.match(/webOS/i)
 || navigator.userAgent.match(/iPhone/i)
 || navigator.userAgent.match(/iPad/i)
 || navigator.userAgent.match(/iPod/i)
 || navigator.userAgent.match(/BlackBerry/i)
 || navigator.userAgent.match(/Windows Phone/i)
 ){
    return true;
  }
 else {
    return false;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the image width and height using JS&lt;/h3&gt; &lt;p&gt;You can programmatically get the image and check the dimensions(width and height) using Javascript.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var img = new Image();
img.onload = function() {
  console.log(this.width + &#39;x&#39; + this.height);
}
img.src = &#39;http://www.google.com/intl/en_ALL/images/logo.gif&#39;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make synchronous HTTP request&lt;/h3&gt; &lt;p&gt;Browsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScript&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function httpGet(theUrl)
{
    var xmlHttpReq = new XMLHttpRequest();
    xmlHttpReq.open( &quot;GET&quot;, theUrl, false ); // false for synchronous request
    xmlHttpReq.send( null );
    return xmlHttpReq.responseText;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make asynchronous HTTP request&lt;/h3&gt; &lt;p&gt;Browsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing the 3rd parameter as true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function httpGetAsync(theUrl, callback)
{
    var xmlHttpReq = new XMLHttpRequest();
    xmlHttpReq.onreadystatechange = function() {
        if (xmlHttpReq.readyState == 4 &amp;amp;&amp;amp; xmlHttpReq.status == 200)
            callback(xmlHttpReq.responseText);
    }
    xmlHttp.open(&quot;GET&quot;, theUrl, true); // true for asynchronous
    xmlHttp.send(null);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you convert date to another timezone in javascript&lt;/h3&gt; &lt;p&gt;You can use the toLocaleString() method to convert dates in one timezone to another. For example, let&#39;s convert current date to British English timezone as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(event.toLocaleString(&#39;en-GB&#39;, { timeZone: &#39;UTC&#39; })); //29/06/2019, 09:56:00
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the properties used to get size of window&lt;/h3&gt; &lt;p&gt;You can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document body objects to find the size of a window. Let&#39;s use them combination of these properties to calculate the size of a window or document,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var width = window.innerWidth
|| document.documentElement.clientWidth
|| document.body.clientWidth;

var height = window.innerHeight
|| document.documentElement.clientHeight
|| document.body.clientHeight;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a conditional operator in javascript&lt;/h3&gt; &lt;p&gt;The conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a shortcut for if statements.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var isAuthenticated = false;
console.log(isAuthenticated ? &#39;Hello, welcome&#39; : &#39;Sorry, you are not authenticated&#39;); //Sorry, you are not authenticated
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can you apply chaining on conditional operator&lt;/h3&gt; &lt;p&gt;Yes, you can apply chaining on conditional operators similar to if … else if … else if … else chain. The syntax is going to be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function traceValue(someParam) {
    return condition1 ? value1
         : condition2 ? value2
         : condition3 ? value3
         : value4;
}

// The above conditional operator is equivalent to:

function traceValue(someParam) {
    if (condition1) { return value1; }
    else if (condition2) { return value2; }
    else if (condition3) { return value3; }
    else { return value4; }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the ways to execute javascript after page load&lt;/h3&gt; &lt;p&gt;You can execute javascript after page load in many different ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;window.onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.onload = function ...
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;document.onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.onload = function ...
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;body onload:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;body onload=&quot;script();&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between proto and prototype&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;__proto__&lt;/code&gt; object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas &lt;code&gt;prototype&lt;/code&gt; is the object that is used to build &lt;code&gt;__proto__&lt;/code&gt; when you create an object with new&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;( new Employee ).__proto__ === Employee.prototype;
( new Employee ).prototype === undefined;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example where do you really need semicolon&lt;/h3&gt; &lt;p&gt;It is recommended to use semicolons after every statement in JavaScript. For example, in the below case it throws an error &quot;.. is not a function&quot; at runtime due to missing semicolon.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// define a function
var fn = function () {
    //...
} // semicolon missing at this line

// then execute some code inside a closure
(function () {
    //...
})();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and it will be interpreted as&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fn = function () {
    //...
}(function () {
    //...
})();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this case, we are passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. Hence, the second function will fail with a &quot;... is not a function&quot; error at runtime.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a freeze method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;freeze()&lt;/strong&gt; method is used to freeze an object. Freezing an object does not allow adding new properties to an object,prevents from removing and prevents changing the enumerability, configurability, or writability of existing properties. i.e, It returns the passed object and does not create a frozen copy.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const obj = {
  prop: 100
};

Object.freeze(obj);
obj.prop = 200; // Throws an error in strict mode

console.log(obj.prop); //100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It causes a TypeError if the argument passed is not an object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of freeze method&lt;/h3&gt; &lt;p&gt;Below are the main benefits of using freeze method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for freezing objects and arrays.&lt;/li&gt; 
   &lt;li&gt;It is used to make an object immutable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do I need to use freeze method&lt;/h3&gt; &lt;p&gt;In the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended, modified, or re-used outside of their current context. Hence it works as the &lt;code&gt;final&lt;/code&gt; keyword which is used in various languages.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect a browser language preference&lt;/h3&gt; &lt;p&gt;You can use navigator object to detect a browser language preference as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var language = navigator.languages &amp;amp;&amp;amp; navigator.languages[0] || // Chrome / Firefox
               navigator.language ||   // All browsers
               navigator.userLanguage; // IE &amp;lt;= 10

console.log(language);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to convert string to title case with javascript&lt;/h3&gt; &lt;p&gt;Title case means that the first letter of each word is capitalized. You can convert a string to title case using the below function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    function toTitleCase(str) {
        return str.replace(
            /\w\S*/g,
            function(txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            }
        );
    }
    toTitleCase(&quot;good morning john&quot;); // Good Morning John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect javascript disabled in the page&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag to detect javascript disabled or not. The code block inside &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; gets executed when JavaScript is disabled, and is typically used to display alternative content when the page generated in JavaScript.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script type=&quot;javascript&quot;&amp;gt;
    // JS related code goes here
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;
    &amp;lt;a href=&quot;next_page.html?noJS=true&quot;&amp;gt;JavaScript is disabled in the page. Please click Next Page&amp;lt;/a&amp;gt;
&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are various operators supported by javascript&lt;/h3&gt; &lt;p&gt;An operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are various operators supported by JavaScript as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Arithmetic Operators:&lt;/strong&gt; Includes + (Addition),– (Subtraction), * (Multiplication), / (Division), % (Modulus), + + (Increment) and – – (Decrement)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Comparison Operators:&lt;/strong&gt; Includes = =(Equal),!= (Not Equal), ===(Equal with type), &amp;gt; (Greater than),&amp;gt; = (Greater than or Equal to),&amp;lt; (Less than),&amp;lt;= (Less than or Equal to)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Logical Operators:&lt;/strong&gt; Includes &amp;amp;&amp;amp;(Logical AND),||(Logical OR),!(Logical NOT)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Assignment Operators:&lt;/strong&gt; Includes = (Assignment Operator), += (Add and Assignment Operator), – = (Subtract and Assignment Operator), *= (Multiply and Assignment), /= (Divide and Assignment), %= (Modules and Assignment)&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Ternary Operators:&lt;/strong&gt; It includes conditional(: ?) Operator&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;typeof Operator:&lt;/strong&gt; It uses to find type of variable. The syntax looks like &lt;code&gt;typeof variable&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a rest parameter&lt;/h3&gt; &lt;p&gt;Rest parameter is an improved way to handle function parameters which allows us to represent an indefinite number of arguments as an array. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function f(a, b, ...theArgs) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For example, let&#39;s take a sum example to calculate on dynamic number of parameters,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function total(…args){
let sum = 0;
for(let i of args){
sum+=i;
}
return sum;
}
console.log(fun(1,2)); //3
console.log(fun(1,2,3)); //6
console.log(fun(1,2,3,4)); //13
console.log(fun(1,2,3,4,5)); //15
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Rest parameter is added in ES2015 or ES6&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you do not use rest parameter as a last argument&lt;/h3&gt; &lt;p&gt;The rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array. For example, if you define a function like below it doesn’t make any sense and will throw an error.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function someFunc(a,…b,c){
//You code goes here
return;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the bitwise operators available in javascript&lt;/h3&gt; &lt;p&gt;Below are the list of bitwise logical operators used in JavaScript&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Bitwise AND ( &amp;amp; )&lt;/li&gt; 
   &lt;li&gt;Bitwise OR ( | )&lt;/li&gt; 
   &lt;li&gt;Bitwise XOR ( ^ )&lt;/li&gt; 
   &lt;li&gt;Bitwise NOT ( ~ )&lt;/li&gt; 
   &lt;li&gt;Left Shift ( &amp;lt;&amp;lt; )&lt;/li&gt; 
   &lt;li&gt;Sign Propagating Right Shift ( &amp;gt;&amp;gt; )&lt;/li&gt; 
   &lt;li&gt;Zero fill Right Shift ( &amp;gt;&amp;gt;&amp;gt; )&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a spread operator&lt;/h3&gt; &lt;p&gt;Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let&#39;s take an example to see this behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function calculateSum(x, y, z) {
  return x + y + z;
}

const numbers = [1, 2, 3];

console.log(calculateSum(...numbers)); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine whether object is frozen or not&lt;/h3&gt; &lt;p&gt;Object.isFrozen() method is used to determine if an object is frozen or not.An object is frozen if all of the below conditions hold true,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If it is not extensible.&lt;/li&gt; 
   &lt;li&gt;If all of its properties are non-configurable.&lt;/li&gt; 
   &lt;li&gt;If all its data properties are non-writable. The usage is going to be as follows,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const object = {
   property: &#39;Welcome JS world&#39;
};
Object.freeze(object);
console.log(Object.isFrozen(object));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine two values same or not using object&lt;/h3&gt; &lt;p&gt;The Object.is() method determines whether two values are the same value. For example, the usage with different types of values would be,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.is(&#39;hello&#39;, &#39;hello&#39;);     // true
Object.is(window, window);   // true
Object.is([], []) // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Two values are the same if one of the following holds:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;both undefined&lt;/li&gt; 
   &lt;li&gt;both null&lt;/li&gt; 
   &lt;li&gt;both true or both false&lt;/li&gt; 
   &lt;li&gt;both strings of the same length with the same characters in the same order&lt;/li&gt; 
   &lt;li&gt;both the same object (means both object have same reference)&lt;/li&gt; 
   &lt;li&gt;both numbers and both +0 both -0 both NaN both non-zero and both not NaN and both have the same value.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of using object is method&lt;/h3&gt; &lt;p&gt;Some of the applications of Object&#39;s &lt;code&gt;is&lt;/code&gt; method are follows,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for comparison of two strings.&lt;/li&gt; 
   &lt;li&gt;It is used for comparison of two numbers.&lt;/li&gt; 
   &lt;li&gt;It is used for comparing the polarity of two numbers.&lt;/li&gt; 
   &lt;li&gt;It is used for comparison of two objects.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you copy properties from one object to other&lt;/h3&gt; &lt;p&gt;You can use the Object.assign() method which is used to copy the values and properties from one or more source objects to a target object. It returns the target object which has properties and values copied from the target object. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.assign(target, ...sources)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take example with one source and one target object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const target = { a: 1, b: 2 };
const source = { b: 3, c: 4 };

const returnedTarget = Object.assign(target, source);

console.log(target); // { a: 1, b: 3, c: 4 }

console.log(returnedTarget); // { a: 1, b: 3, c: 4 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As observed in the above code, there is a common property(&lt;code&gt;b&lt;/code&gt;) from source to target so it&#39;s value has been overwritten.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the applications of assign method&lt;/h3&gt; &lt;p&gt;Below are the some of main applications of Object.assign() method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for cloning an object.&lt;/li&gt; 
   &lt;li&gt;It is used to merge objects with the same properties.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a proxy object&lt;/h3&gt; &lt;p&gt;The Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment, enumeration, function invocation, etc. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var p = new Proxy(target, handler);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take an example of proxy object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var handler = {
    get: function(obj, prop) {
        return prop in obj ?
            obj[prop] :
            100;
    }
};

var p = new Proxy({}, handler);
p.a = 10;
p.b = null;

console.log(p.a, p.b); // 10, null
console.log(&#39;c&#39; in p, p.c); // false, 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, it uses &lt;code&gt;get&lt;/code&gt; handler which define the behavior of the proxy when an operation is performed on it&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of seal method&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Object.seal()&lt;/strong&gt; method is used to seal an object, by preventing new properties from being added to it and marking all existing properties as non-configurable. But values of present properties can still be changed as long as they are writable. Let&#39;s see the below example to understand more about seal() method&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const object = {
    property: &#39;Welcome JS world&#39;
 };
 Object.seal(object);
 object.property = &#39;Welcome to object world&#39;;
 console.log(Object.isSealed(object)); // true
 delete object.property; // You cannot delete when sealed
 console.log(object.property); //Welcome to object world
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the applications of seal method&lt;/h3&gt; &lt;p&gt;Below are the main applications of Object.seal() method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is used for sealing objects and arrays.&lt;/li&gt; 
   &lt;li&gt;It is used to make an object immutable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between freeze and seal methods&lt;/h3&gt; &lt;p&gt;If an object is frozen using the Object.freeze() method then its properties become immutable and no changes can be made in them whereas if an object is sealed using the Object.seal() method then the changes can be made in the existing properties of the object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you determine if an object is sealed or not&lt;/h3&gt; &lt;p&gt;The Object.isSealed() method is used to determine if an object is sealed or not. An object is sealed if all of the below conditions hold true&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If it is not extensible.&lt;/li&gt; 
   &lt;li&gt;If all of its properties are non-configurable.&lt;/li&gt; 
   &lt;li&gt;If it is not removable (but not necessarily non-writable). Let&#39;s see it in the action&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const object = {
property: &#39;Hello, Good morning&#39;
};

Object.seal(object); // Using seal() method to seal the object

console.log(Object.isSealed(object));      // checking whether the object is sealed or not
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get enumerable key and value pairs&lt;/h3&gt; &lt;p&gt;The Object.entries() method is used to return an array of a given object&#39;s own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop. Let&#39;s see the functionality of object.entries() method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const object = {
  a: &#39;Good morning&#39;,
  b: 100
};

for (let [key, value] of Object.entries(object)) {
  console.log(`${key}: ${value}`); // a: &#39;Good morning&#39;
                                   // b: 100
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The order is not guaranteed as object defined.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main difference between Object.values and Object.entries method&lt;/h3&gt; &lt;p&gt;The Object.values() method&#39;s behavior is similar to Object.entries() method but it returns an array of values instead [key,value] pairs.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const object = {
   a: &#39;Good morning&#39;,
   b: 100
 };

 for (let value of Object.values(object)) {
   console.log(`${value}`); // &#39;Good morning&#39;
                                100
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How can you get the list of keys of any object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.keys()&lt;/code&gt; method which is used to return an array of a given object&#39;s own property names, in the same order as we get with a normal loop. For example, you can get the keys of a user object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = {
  name: &#39;John&#39;,
  gender: &#39;male&#39;,
  age: 40
};

console.log(Object.keys(user)); //[&#39;name&#39;, &#39;gender&#39;, &#39;age&#39;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an object with prototype&lt;/h3&gt; &lt;p&gt;The Object.create() method is used to create a new object with the specified prototype object and properties. i.e, It uses an existing object as the prototype of the newly created object. It returns a new object with the specified prototype object and properties.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const user = {
   name: &#39;John&#39;,
   printInfo: function () {
     console.log(`My name is ${this.name}.`);
   }
 };

 const admin = Object.create(user);

 admin.name = &quot;Nick&quot;; // Remember that &quot;name&quot; is a property set on &quot;admin&quot; but not on &quot;user&quot; object

 admin.printInfo(); // My name is Nick
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a WeakSet&lt;/h3&gt; &lt;p&gt;WeakSet is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new WeakSet([iterable]);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s see the below example to explain it&#39;s behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var ws = new WeakSet();
var user = {};
ws.add(user);
ws.has(user);    // true
ws.delete(user); // removes user from the set
ws.has(user);    // false, user has been removed
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between WeakSet and Set&lt;/h3&gt; &lt;p&gt;The main difference is that references to objects in Set are strong while references to objects in WeakSet are weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it. Other differences are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Sets can store any value Whereas WeakSets can store only collections of objects&lt;/li&gt; 
   &lt;li&gt;WeakSet does not have size property unlike Set&lt;/li&gt; 
   &lt;li&gt;WeakSet does not have methods such as clear, keys, values, entries, forEach.&lt;/li&gt; 
   &lt;li&gt;WeakSet is not iterable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down the collection of methods available on WeakSet&lt;/h3&gt; &lt;p&gt;Below are the list of methods available on WeakSet,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;add(value): A new object is appended with the given value to the weakset&lt;/li&gt; 
   &lt;li&gt;delete(value): Deletes the value from the WeakSet collection.&lt;/li&gt; 
   &lt;li&gt;has(value): It returns true if the value is present in the WeakSet Collection, otherwise it returns false.&lt;/li&gt; 
   &lt;li&gt;length(): It returns the length of weakSetObject Let&#39;s see the functionality of all the above methods in an example,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var weakSetObject = new WeakSet();
var firstObject = {};
var secondObject = {};
// add(value)
weakSetObject.add(firstObject);
weakSetObject.add(secondObject);
console.log(weakSetObject.has(firstObject)); //true
console.log(weakSetObject.length()); //2
weakSetObject.delete(secondObject);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a WeakMap&lt;/h3&gt; &lt;p&gt;The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. In this case, keys must be objects and the values can be arbitrary values. The syntax is looking like as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new WeakMap([iterable])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s see the below example to explain it&#39;s behavior,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var ws = new WeakMap();
 var user = {};
 ws.set(user);
 ws.has(user);    // true
 ws.delete(user); // removes user from the map
 ws.has(user);    // false, user has been removed
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between WeakMap and Map&lt;/h3&gt; &lt;p&gt;The main difference is that references to key objects in Map are strong while references to key objects in WeakMap are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it. Other differences are,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Maps can store any key type Whereas WeakMaps can store only collections of key objects&lt;/li&gt; 
   &lt;li&gt;WeakMap does not have size property unlike Map&lt;/li&gt; 
   &lt;li&gt;WeakMap does not have methods such as clear, keys, values, entries, forEach.&lt;/li&gt; 
   &lt;li&gt;WeakMap is not iterable.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down the collection of methods available on WeakMap&lt;/h3&gt; &lt;p&gt;Below are the list of methods available on WeakMap,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;set(key, value): Sets the value for the key in the WeakMap object. Returns the WeakMap object.&lt;/li&gt; 
   &lt;li&gt;delete(key): Removes any value associated to the key.&lt;/li&gt; 
   &lt;li&gt;has(key): Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or not.&lt;/li&gt; 
   &lt;li&gt;get(key): Returns the value associated to the key, or undefined if there is none. Let&#39;s see the functionality of all the above methods in an example,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var weakMapObject = new WeakMap();
var firstObject = {};
var secondObject = {};
// set(key, value)
weakMapObject.set(firstObject, &#39;John&#39;);
weakMapObject.set(secondObject, 100);
console.log(weakMapObject.has(firstObject)); //true
console.log(weakMapObject.get(firstObject)); // John
weakMapObject.delete(secondObject);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of uneval&lt;/h3&gt; &lt;p&gt;The uneval() is an inbuilt function which is used to create a string representation of the source code of an Object. It is a top-level function and is not associated with any object. Let&#39;s see the below example to know more about it&#39;s functionality,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 1;
uneval(a); // returns a String containing 1
uneval(function user() {}); // returns &quot;(function user(){})&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you encode an URL&lt;/h3&gt; &lt;p&gt;The encodeURI() function is used to encode complete URI which has special characters except (, / ? : @ &amp;amp; = + $ #) characters.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var uri = &#39;https://mozilla.org/?x=шеллы&#39;;
var encoded = encodeURI(uri);
console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you decode an URL&lt;/h3&gt; &lt;p&gt;The decodeURI() function is used to decode a Uniform Resource Identifier (URI) previously created by encodeURI().&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var uri = &#39;https://mozilla.org/?x=шеллы&#39;;
 var encoded = encodeURI(uri);
 console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B
try {
  console.log(decodeURI(encoded)); // &quot;https://mozilla.org/?x=шеллы&quot;
} catch(e) { // catches a malformed URI
  console.error(e);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print the contents of web page&lt;/h3&gt; &lt;p&gt;The window object provided a print() method which is used to print the contents of the current window. It opens a Print dialog box which lets you choose between various printing options. Let&#39;s see the usage of print method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;   &amp;lt;input type=&quot;button&quot; value=&quot;Print&quot; onclick=&quot;window.print()&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In most browsers, it will block while the print dialog is open.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between uneval and eval&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;uneval&lt;/code&gt; function returns the source of a given object; whereas the &lt;code&gt;eval&lt;/code&gt; function does the opposite, by evaluating that source code in a different memory area. Let&#39;s see an example to clarify the difference,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var msg = uneval(function greeting() { return &#39;Hello, Good morning&#39;; });
var greeting = eval(msg);
greeting(); // returns &quot;Hello, Good morning&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an anonymous function&lt;/h3&gt; &lt;p&gt;An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function (optionalParameters) {
  //do something
}

const myFunction = function(){ //Anonymous function assigned to a variable
  //do something
};

[1, 2, 3].map(function(element){ //Anonymous function used as a callback function
  //do something
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s see the above anonymous function in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x = function (a, b) {return a * b};
var z = x(5, 10);
console.log(z); // 50
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the precedence order between local and global variables&lt;/h3&gt; &lt;p&gt;A local variable takes precedence over a global variable with the same name. Let&#39;s see this behavior in an example.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var msg = &quot;Good morning&quot;;
function greeting() {
   msg = &quot;Good Evening&quot;;
   console.log(msg);
}
greeting();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are javascript accessors&lt;/h3&gt; &lt;p&gt;ECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters uses the &lt;code&gt;get&lt;/code&gt; keyword whereas Setters uses the &lt;code&gt;set&lt;/code&gt; keyword.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user = {
  firstName: &quot;John&quot;,
  lastName : &quot;Abraham&quot;,
  language : &quot;en&quot;,
  get lang() {
    return this.language;
  }
  set lang(lang) {
  this.language = lang;
  }
};
console.log(user.lang); // getter access lang as en
user.lang = &#39;fr&#39;;
console.log(user.lang); // setter used to set lang as fr
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define property on Object constructor&lt;/h3&gt; &lt;p&gt;The Object.defineProperty() static method is used to define a new property directly on an object, or modify an existing property on an object, and returns the object. Let&#39;s see an example to know how to define property,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {};

Object.defineProperty(newObject, &#39;newProperty&#39;, {
  value: 100,
  writable: false
});

console.log(newObject.newProperty); // 100

newObject.newProperty = 200; // It throws an error in strict mode due to writable setting

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between get and defineProperty&lt;/h3&gt; &lt;p&gt;Both have similar results until unless you use classes. If you use &lt;code&gt;get&lt;/code&gt; the property will be defined on the prototype of the object whereas using &lt;code&gt;Object.defineProperty()&lt;/code&gt; the property will be defined on the instance it is applied to.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of Getters and Setters&lt;/h3&gt; &lt;p&gt;Below are the list of benefits of Getters and Setters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;They provide simpler syntax&lt;/li&gt; 
   &lt;li&gt;They are used for defining computed properties, or accessors in JS.&lt;/li&gt; 
   &lt;li&gt;Useful to provide equivalence relation between properties and methods&lt;/li&gt; 
   &lt;li&gt;They can provide better data quality&lt;/li&gt; 
   &lt;li&gt;Useful for doing things behind the scenes with the encapsulated logic.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I add getters and setters using defineProperty method&lt;/h3&gt; &lt;p&gt;Yes, You can use the &lt;code&gt;Object.defineProperty()&lt;/code&gt; method to add Getters and Setters. For example, the below counter object uses increment, decrement, add and subtract properties,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var obj = {counter : 0};

// Define getters
Object.defineProperty(obj, &quot;increment&quot;, {
  get : function () {this.counter++;}
});
Object.defineProperty(obj, &quot;decrement&quot;, {
  get : function () {this.counter--;}
});

// Define setters
Object.defineProperty(obj, &quot;add&quot;, {
  set : function (value) {this.counter += value;}
});
Object.defineProperty(obj, &quot;subtract&quot;, {
  set : function (value) {this.counter -= value;}
});

obj.add = 10;
obj.subtract = 5;
console.log(obj.increment); //6
console.log(obj.decrement); //5
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of switch-case&lt;/h3&gt; &lt;p&gt;The switch case statement in JavaScript is used for decision making purposes. In a few cases, using the switch case statement is going to be more convenient than if-else statements. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;switch (expression)
{
    case value1:
        statement1;
        break;
    case value2:
        statement2;
        break;
    .
    .
    case valueN:
        statementN;
        break;
    default:
        statementDefault;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on the value of the expression.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the conventions to be followed for the usage of switch case&lt;/h3&gt; &lt;p&gt;Below are the list of conventions should be taken care,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The expression can be of type either number or string.&lt;/li&gt; 
   &lt;li&gt;Duplicate values are not allowed for the expression.&lt;/li&gt; 
   &lt;li&gt;The default statement is optional. If the expression passed to switch does not match with any case value then the statement within default case will be executed.&lt;/li&gt; 
   &lt;li&gt;The break statement is used inside the switch to terminate a statement sequence.&lt;/li&gt; 
   &lt;li&gt;The break statement is optional. But if it is omitted, the execution will continue on into the next case.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are primitive data types&lt;/h3&gt; &lt;p&gt;A primitive data type is data that has a primitive value (which has no properties or methods). There are 5 types of primitive data types.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;string&lt;/li&gt; 
   &lt;li&gt;number&lt;/li&gt; 
   &lt;li&gt;boolean&lt;/li&gt; 
   &lt;li&gt;null&lt;/li&gt; 
   &lt;li&gt;undefined&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to access object properties&lt;/h3&gt; &lt;p&gt;There are 3 possible ways for accessing the property of an object.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Dot notation:&lt;/strong&gt; It uses dot for accessing the properties&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;objectName.property
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Square brackets notation:&lt;/strong&gt; It uses square brackets for property access&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;objectName[&quot;property&quot;]
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Expression notation:&lt;/strong&gt; It uses expression in the square brackets&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;objectName[expression]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the function parameter rules&lt;/h3&gt; &lt;p&gt;JavaScript functions follow below rules for parameters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The function definitions do not specify data types for parameters.&lt;/li&gt; 
   &lt;li&gt;Do not perform type checking on the passed arguments.&lt;/li&gt; 
   &lt;li&gt;Do not check the number of arguments received. i.e, The below function follows the above rules,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function functionName(parameter1, parameter2, parameter3) {
  console.log(parameter1); // 1
}
functionName(1);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an error object&lt;/h3&gt; &lt;p&gt;An error object is a built in error object that provides error information when an error occurs. It has two properties: name and message. For example, the below function logs error details,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  greeting(&quot;Welcome&quot;);
}
catch(err) {
  console.log(err.name + &quot;&amp;lt;br&amp;gt;&quot; + err.message);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;When you get a syntax error&lt;/h3&gt; &lt;p&gt;A SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for the function parameter throws a syntax error&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  eval(&quot;greeting(&#39;welcome)&quot;);   // Missing &#39; will produce an error
}
catch(err) {
  console.log(err.name);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different error names from error object&lt;/h3&gt; &lt;p&gt;There are 6 different types of error names returned from error object, | Error Name | Description | |---- | --------- | EvalError | An error has occurred in the eval() function | | RangeError | An error has occurred with a number &quot;out of range&quot; | | ReferenceError | An error due to an illegal reference| | SyntaxError | An error due to a syntax error| | TypeError | An error due to a type error | | URIError | An error due to encodeURI() |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the various statements in error handling&lt;/h3&gt; &lt;p&gt;Below are the list of statements used in an error handling,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;try:&lt;/strong&gt; This statement is used to test a block of code for errors&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;catch:&lt;/strong&gt; This statement is used to handle the error&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;throw:&lt;/strong&gt; This statement is used to create custom errors.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;finally:&lt;/strong&gt; This statement is used to execute code after try and catch regardless of the result.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the two types of loops in javascript&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Entry Controlled loops:&lt;/strong&gt; In this kind of loop type, the test condition is tested before entering the loop body. For example, For Loop and While Loop comes under this category.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Exit Controlled Loops:&lt;/strong&gt; In this kind of loop type, the test condition is tested or evaluated at the end of the loop body. i.e, the loop body will execute at least once irrespective of test condition true or false. For example, do-while loop comes under this category.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is nodejs&lt;/h3&gt; &lt;p&gt;Node.js is a server-side platform built on Chrome&#39;s JavaScript runtime for easily building fast and scalable network applications. It is an event-based, non-blocking, asynchronous I/O runtime that uses Google&#39;s V8 JavaScript engine and libuv library.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an Intl object&lt;/h3&gt; &lt;p&gt;The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. It provides access to several constructors and language sensitive functions.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform language specific date and time formatting&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; object which is a constructor for objects that enable language-sensitive date and time formatting. Let&#39;s see this behavior with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));
console.log(new Intl.DateTimeFormat(&#39;en-GB&#39;).format(date)); // 07/08/2019
console.log(new Intl.DateTimeFormat(&#39;en-AU&#39;).format(date)); // 07/08/2019
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an Iterator&lt;/h3&gt; &lt;p&gt;An iterator is an object which defines a sequence and a return value upon its termination. It implements the Iterator protocol with a &lt;code&gt;next()&lt;/code&gt; method which returns an object with two properties: &lt;code&gt;value&lt;/code&gt; (the next value in the sequence) and &lt;code&gt;done&lt;/code&gt; (which is true if the last value in the sequence has been consumed).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How does synchronous iteration works&lt;/h3&gt; &lt;p&gt;Synchronous iteration was introduced in ES6 and it works with below set of components,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Iterable:&lt;/strong&gt; It is an object which can be iterated over via a method whose key is Symbol.iterator. &lt;strong&gt;Iterator:&lt;/strong&gt; It is an object returned by invoking &lt;code&gt;[Symbol.iterator]()&lt;/code&gt; on an iterable. This iterator object wraps each iterated element in an object and returns it via &lt;code&gt;next()&lt;/code&gt; method one by one. &lt;strong&gt;IteratorResult:&lt;/strong&gt; It is an object returned by &lt;code&gt;next()&lt;/code&gt; method. The object contains two properties; the &lt;code&gt;value&lt;/code&gt; property contains an iterated element and the &lt;code&gt;done&lt;/code&gt; property determines whether the element is the last element or not.&lt;/p&gt; &lt;p&gt;Let&#39;s demonstrate synchronous iteration with an array as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const iterable = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];
const iterator = iterable[Symbol.iterator]();
console.log(iterator.next());  // { value: &#39;one&#39;, done: false }
console.log(iterator.next());  // { value: &#39;two&#39;, done: false }
console.log(iterator.next());  // { value: &#39;three&#39;, done: false }
console.log(iterator.next());  // { value: &#39;undefined, done: true }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event loop&lt;/h3&gt; &lt;p&gt;The Event Loop is a queue of callback functions. When an async function executes, the callback function is pushed into the queue. The JavaScript engine doesn&#39;t start processing the event loop until the async function has finished executing the code. &lt;strong&gt;Note:&lt;/strong&gt; It allows Node.js to perform non-blocking I/O operations even though JavaScript is single-threaded.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is call stack&lt;/h3&gt; &lt;p&gt;Call Stack is a data structure for javascript interpreters to keep track of function calls in the program. It has two major actions,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Whenever you call a function for its execution, you are pushing it to the stack.&lt;/li&gt; 
   &lt;li&gt;Whenever the execution is completed, the function is popped out of the stack.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let&#39;s take an example and it&#39;s state representation in a diagram format&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hungry() {
   eatFruits();
}
function eatFruits() {
   return &quot;I&#39;m eating fruits&quot;;
}

// Invoke the `hungry` function
hungry();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code processed in a call stack as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Add the &lt;code&gt;hungry()&lt;/code&gt; function to the call stack list and execute the code.&lt;/li&gt; 
   &lt;li&gt;Add the &lt;code&gt;eatFruits()&lt;/code&gt; function to the call stack list and execute the code.&lt;/li&gt; 
   &lt;li&gt;Delete the &lt;code&gt;eatFruits()&lt;/code&gt; function from our call stack list.&lt;/li&gt; 
   &lt;li&gt;Delete the &lt;code&gt;hungry()&lt;/code&gt; function from the call stack list since there are no items anymore.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/call-stack.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event queue&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a decorator&lt;/h3&gt; &lt;p&gt;A decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor as arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let&#39;s define admin decorator for user class at design time,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function admin(isAdmin) {
   return function(target) {
       target.isAdmin = isAdmin;
   }
}

@admin(true)
class User() {
}
console.log(User.isAdmin); //true

 @admin(false)
 class User() {
 }
 console.log(User.isAdmin); //false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the properties of Intl object&lt;/h3&gt; &lt;p&gt;Below are the list of properties available on Intl object,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Collator:&lt;/strong&gt; These are the objects that enable language-sensitive string comparison.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;DateTimeFormat:&lt;/strong&gt; These are the objects that enable language-sensitive date and time formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;ListFormat:&lt;/strong&gt; These are the objects that enable language-sensitive list formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;NumberFormat:&lt;/strong&gt; Objects that enable language-sensitive number formatting.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;PluralRules:&lt;/strong&gt; Objects that enable plural-sensitive formatting and language-specific rules for plurals.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;RelativeTimeFormat:&lt;/strong&gt; Objects that enable language-sensitive relative time formatting.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an Unary operator&lt;/h3&gt; &lt;p&gt;The unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still become a number but with the value NaN. Let&#39;s see this behavior in an action.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x = &quot;100&quot;;
var y = + x;
console.log(typeof x, typeof y); // string, number

var a = &quot;Hello&quot;;
var b = + a;
console.log(typeof a, typeof b, b); // string, number, NaN
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you sort elements in an array&lt;/h3&gt; &lt;p&gt;The sort() method is used to sort the elements of an array in place and returns the sorted array. The example usage would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var months = [&quot;Aug&quot;, &quot;Sep&quot;, &quot;Jan&quot;, &quot;June&quot;];
months.sort();
console.log(months); //  [&quot;Aug&quot;, &quot;Jan&quot;, &quot;June&quot;, &quot;Sep&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of compareFunction while sorting arrays&lt;/h3&gt; &lt;p&gt;The compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then sorted according to each character&#39;s Unicode code point value. Let&#39;s take an example to see the usage of compareFunction,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let numbers = [1, 2, 5, 3, 4];
numbers.sort((a, b) =&amp;gt; b - a);
console.log(numbers); // [5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you reversing an array&lt;/h3&gt; &lt;p&gt;You can use the reverse() method to reverse the elements in an array. This method is useful to sort an array in descending order. Let&#39;s see the usage of reverse() method in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let numbers = [1, 2, 5, 3, 4];
numbers.sort((a, b) =&amp;gt; b - a);
numbers.reverse();
console.log(numbers); // [1, 2, 3, 4 ,5]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find min and max value in an array&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;Math.min&lt;/code&gt; and &lt;code&gt;Math.max&lt;/code&gt; methods on array variables to find the minimum and maximum elements within an array. Let&#39;s create two functions to find the min and max value with in an array,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var marks = [50, 20, 70, 60, 45, 30];
function findMin(arr) {
  return Math.min.apply(null, arr);
}
function findMax(arr) {
  return Math.max.apply(null, arr);
}

console.log(findMin(marks));
console.log(findMax(marks));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you find min and max values without Math functions&lt;/h3&gt; &lt;p&gt;You can write functions which loop through an array comparing each value with the lowest value or highest value to find the min and max values. Let&#39;s create those functions to find min and max values,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var marks = [50, 20, 70, 60, 45, 30];
 function findMin(arr) {
   var length = arr.length
   var min = Infinity;
   while (length--) {
     if (arr[length] &amp;lt; min) {
       min = arr[len];
     }
   }
   return min;
 }

 function findMax(arr) {
   var length = arr.length
   var max = -Infinity;
   while (len--) {
     if (arr[length] &amp;gt; max) {
       max = arr[length];
     }
   }
   return max;
 }

 console.log(findMin(marks));
 console.log(findMax(marks));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an empty statement and purpose of it&lt;/h3&gt; &lt;p&gt;The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. Since there is no action with an empty statement you might think that it&#39;s usage is quite less, but the empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you can initialize an array with zero values as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Initialize an array a
for(int i=0; i &amp;lt; a.length; a[i++] = 0) ;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get metadata of a module&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;import.meta&lt;/code&gt; object which is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the current module, such as the module&#39;s URL. In browsers, you might get different meta data than NodeJS.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script type=&quot;module&quot; src=&quot;welcome-module.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
console.log(import.meta); // { url: &quot;file:///home/user/welcome-module.js&quot; }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a comma operator&lt;/h3&gt; &lt;p&gt;The comma operator is used to evaluate each of its operands from left to right and returns the value of the last operand. This is totally different from comma usage within arrays, objects, and function arguments and parameters. For example, the usage for numeric expressions would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x = 1;
x = (x++, x);

console.log(x); // 2
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the advantage of a comma operator&lt;/h3&gt; &lt;p&gt;It is normally used to include multiple expressions in a location that requires a single expression. One of the common usages of this comma operator is to supply multiple parameters in a &lt;code&gt;for&lt;/code&gt; loop. For example, the below for loop uses multiple expressions in a single location using comma operator,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (var a = 0, b =10; a &amp;lt;= 10; a++, b--)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use the comma operator in a return statement where it processes before returning.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFunction() {
   var a = 1;
   return (a += 10, a); // 11
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is typescript&lt;/h3&gt; &lt;p&gt;TypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async/await, and many other features, and compiles to plain JavaScript. Angular built entirely in TypeScript and used as a primary language. You can install it globally as&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g typescript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s see a simple example of TypeScript usage,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;function greeting(name: string): string {
   return &quot;Hello, &quot; + name;
}

let user = &quot;Sudheer&quot;;

console.log(greeting(user));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The greeting method allows only string type as argument.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between javascript and typescript&lt;/h3&gt; &lt;p&gt;Below are the list of differences between javascript and typescript,&lt;/p&gt; &lt;p&gt;| feature | typescript | javascript | |---- | --------- | ---- | Language paradigm | Object oriented programming language | Scripting language | | Typing support | Supports static typing | It has dynamic typing | | Modules | Supported | Not supported | | Interface | It has interfaces concept | Doesn&#39;t support interfaces | | Optional parameters | Functions support optional parameters | No support of optional parameters for functions |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of typescript over javascript&lt;/h3&gt; &lt;p&gt;Below are some of the advantages of typescript over javascript,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;TypeScript is able to find compile time errors at the development time only and it makes sures less runtime errors. Whereas javascript is an interpreted language.&lt;/li&gt; 
   &lt;li&gt;TypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile time. This is not available in javascript.&lt;/li&gt; 
   &lt;li&gt;TypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may not be supported in some browsers.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an object initializer&lt;/h3&gt; &lt;p&gt;An object initializer is an expression that describes the initialization of an Object. The syntax for this expression is represented as a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to create an object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var initObject = {a: &#39;John&#39;, b: 50, c: {}};

console.log(initObject.a); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a constructor method&lt;/h3&gt; &lt;p&gt;The constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used. The example usage of constructor would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Employee {
  constructor() {
    this.name = &quot;John&quot;;
  }
}

var employeeObject = new Employee();

console.log(employeeObject.name); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if you write constructor more than once in a class&lt;/h3&gt; &lt;p&gt;The &quot;constructor&quot; in a class is a special method and it should be defined only once in a class. i.e, If you write a constructor method more than once in a class it will throw a &lt;code&gt;SyntaxError&lt;/code&gt; error.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; class Employee {
   constructor() {
     this.name = &quot;John&quot;;
   }
   constructor() {   //  Uncaught SyntaxError: A class may only have one constructor
     this.age = 30;
   }
 }

 var employeeObject = new Employee();

 console.log(employeeObject.name);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you call the constructor of a parent class&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;super&lt;/code&gt; keyword to call the constructor of a parent class. Remember that &lt;code&gt;super()&lt;/code&gt; must be called before using &#39;this&#39; reference. Otherwise it will cause a reference error. Let&#39;s the usage of it,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Square extends Rectangle {
  constructor(length) {
    super(length, length);
    this.name = &#39;Square&#39;;
  }

  get area() {
    return this.width * this.height;
  }

  set area(value) {
    this.area = value;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the prototype of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; method to return the prototype of the specified object. i.e. The value of the internal &lt;code&gt;prototype&lt;/code&gt; property. If there are no inherited properties then &lt;code&gt;null&lt;/code&gt; value is returned.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newPrototype = {};
const newObject = Object.create(newPrototype);

console.log(Object.getPrototypeOf(newObject) === newPrototype); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens If I pass string type for getPrototype method&lt;/h3&gt; &lt;p&gt;In ES5, it will throw a TypeError exception if the obj parameter isn&#39;t an object. Whereas in ES2015, the parameter will be coerced to an &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// ES5
Object.getPrototypeOf(&#39;James&#39;); // TypeError: &quot;James&quot; is not an object
// ES2015
Object.getPrototypeOf(&#39;James&#39;); // String.prototype
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you set prototype of one object to another&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt; method that sets the prototype (i.e., the internal &lt;code&gt;Prototype&lt;/code&gt; property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Object.setPrototypeOf(Square.prototype, Rectangle.prototype);
Object.setPrototypeOf({}, null);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether an object can be extendable or not&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.isExtensible()&lt;/code&gt; method is used to determine if an object is extendable or not. i.e, Whether it can have new properties added to it or not.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {};
console.log(Object.isExtensible(newObject)); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By default, all the objects are extendable. i.e, The new properties can be added or modified.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you prevent an object to extend&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.preventExtensions()&lt;/code&gt; method is used to prevent new properties from ever being added to an object. In other words, it prevents future extensions to the object. Let&#39;s see the usage of this property,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {};
Object.preventExtensions(newObject); // NOT extendable

try {
  Object.defineProperty(newObject, &#39;newProperty&#39;, { // Adding new property
    value: 100
  });
} catch (e) {
  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to make an object non-extensible&lt;/h3&gt; &lt;p&gt;You can mark an object non-extensible in 3 ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Object.preventExtensions&lt;/li&gt; 
   &lt;li&gt;Object.seal&lt;/li&gt; 
   &lt;li&gt;Object.freeze&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var newObject = {};

Object.preventExtensions(newObject); // Prevent objects are non-extensible
Object.isExtensible(newObject); // false

var sealedObject = Object.seal({}); // Sealed objects are non-extensible
Object.isExtensible(sealedObject); // false

var frozenObject = Object.freeze({}); // Frozen objects are non-extensible
Object.isExtensible(frozenObject); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define multiple properties on an object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Object.defineProperties()&lt;/code&gt; method is used to define new or modify existing properties directly on an object and returning the object. Let&#39;s define multiple properties on an empty object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {};

Object.defineProperties(newObject, {
  newProperty1: {
    value: &#39;John&#39;,
    writable: true
  },
  newProperty2: {}
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is MEAN in javascript&lt;/h3&gt; &lt;p&gt;The MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What Is Obfuscation in javascript&lt;/h3&gt; &lt;p&gt;Obfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it. Let&#39;s see the below function before Obfuscation,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function greeting() {
   console.log(&#39;Hello, welcome to JS world&#39;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And after the code Obfuscation, it would be appeared as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;eval(function(p,a,c,k,e,d){e=function(c){return c};if(!&#39;&#39;.replace(/^/,String)){while(c--){d[c]=k[c]||c}k=[function(e){return d[e]}];e=function(){return&#39;\\w+&#39;};c=1};while(c--){if(k[c]){p=p.replace(new RegExp(&#39;\\b&#39;+e(c)+&#39;\\b&#39;,&#39;g&#39;),k[c])}}return p}(&#39;2 1(){0.3(\&#39;4, 7 6 5 8\&#39;)}&#39;,9,9,&#39;console|greeting|function|log|Hello|JS|to|welcome|world&#39;.split(&#39;|&#39;),0,{}))
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need Obfuscation&lt;/h3&gt; &lt;p&gt;Below are the few reasons for Obfuscation,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The Code size will be reduced. So data transfers between server and client will be fast.&lt;/li&gt; 
   &lt;li&gt;It hides the business logic from outside world and protects the code from others&lt;/li&gt; 
   &lt;li&gt;Reverse engineering is highly difficult&lt;/li&gt; 
   &lt;li&gt;The download time will be reduced&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is Minification&lt;/h3&gt; &lt;p&gt;Minification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it&#39;s functionality. It is also a type of obfuscation .&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of minification&lt;/h3&gt; &lt;p&gt;Normally it is recommended to use minification for heavy traffic and intensive requirements of resources. It reduces file sizes with below benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Decreases loading times of a web page&lt;/li&gt; 
   &lt;li&gt;Saves bandwidth usages&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Obfuscation and Encryption&lt;/h3&gt; &lt;p&gt;Below are the main differences between Obfuscation and Encryption,&lt;/p&gt; &lt;p&gt;| Feature | Obfuscation | Encryption | |---- | --------- | ---- | Definition | Changing the form of any data in any other form | Changing the form of information to an unreadable format by using a key | | A key to decode | It can be decoded without any key | It is required | | Target data format | It will be converted to a complex form | Converted into an unreadable format |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common tools used for minification&lt;/h3&gt; &lt;p&gt;There are many online/offline tools to minify the javascript files,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Google&#39;s Closure Compiler&lt;/li&gt; 
   &lt;li&gt;UglifyJS2&lt;/li&gt; 
   &lt;li&gt;jsmin&lt;/li&gt; 
   &lt;li&gt;javascript-minifier.com/&lt;/li&gt; 
   &lt;li&gt;prettydiff.com&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform form validation using javascript&lt;/h3&gt; &lt;p&gt;JavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs to notify, and return false, to prevent the form being submitted. Lets&#39; perform user login in an html form,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form name=&quot;myForm&quot; onsubmit=&quot;return validateForm()&quot; method=&quot;post&quot;&amp;gt;
User name: &amp;lt;input type=&quot;text&quot; name=&quot;uname&quot;&amp;gt;
&amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And the validation on user login is below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function validateForm() {
  var x = document.forms[&quot;myForm&quot;][&quot;uname&quot;].value;
  if (x == &quot;&quot;) {
    alert(&quot;The username shouldn&#39;t be empty&quot;);
    return false;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you perform form validation without javascript&lt;/h3&gt; &lt;p&gt;You can perform HTML form validation automatically without using javascript. The validation enabled by applying the &lt;code&gt;required&lt;/code&gt; attribute to prevent form submission when the input is empty.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form method=&quot;post&quot;&amp;gt;
  &amp;lt;input type=&quot;text&quot; name=&quot;uname&quot; required&amp;gt;
  &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Automatic form validation does not work in Internet Explorer 9 or earlier.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the DOM methods available for constraint validation&lt;/h3&gt; &lt;p&gt;The below DOM methods are available for constraint validation on an invalid input,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;checkValidity(): It returns true if an input element contains valid data.&lt;/li&gt; 
   &lt;li&gt;setCustomValidity(): It is used to set the validationMessage property of an input element. Let&#39;s take an user login form with DOM validations&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFunction() {
  var userName = document.getElementById(&quot;uname&quot;);
  if (!userName.checkValidity()) {
    document.getElementById(&quot;message&quot;).innerHTML = userName.validationMessage;
  } else {
    document.getElementById(&quot;message&quot;).innerHTML = &quot;Entered a valid username&quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the available constraint validation DOM properties&lt;/h3&gt; &lt;p&gt;Below are the list of some of the constraint validation DOM properties available,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;validity: It provides a list of boolean properties related to the validity of an input element.&lt;/li&gt; 
   &lt;li&gt;validationMessage: It displays the message when the validity is false.&lt;/li&gt; 
   &lt;li&gt;willValidate: It indicates if an input element will be validated or not.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the list of validity properties&lt;/h3&gt; &lt;p&gt;The validity property of an input element provides a set of properties related to the validity of data.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;customError: It returns true, if a custom validity message is set.&lt;/li&gt; 
   &lt;li&gt;patternMismatch: It returns true, if an element&#39;s value does not match its pattern attribute.&lt;/li&gt; 
   &lt;li&gt;rangeOverflow: It returns true, if an element&#39;s value is greater than its max attribute.&lt;/li&gt; 
   &lt;li&gt;rangeUnderflow: It returns true, if an element&#39;s value is less than its min attribute.&lt;/li&gt; 
   &lt;li&gt;stepMismatch: It returns true, if an element&#39;s value is invalid according to step attribute.&lt;/li&gt; 
   &lt;li&gt;tooLong: It returns true, if an element&#39;s value exceeds its maxLength attribute.&lt;/li&gt; 
   &lt;li&gt;typeMismatch: It returns true, if an element&#39;s value is invalid according to type attribute.&lt;/li&gt; 
   &lt;li&gt;valueMissing: It returns true, if an element with a required attribute has no value.&lt;/li&gt; 
   &lt;li&gt;valid: It returns true, if an element&#39;s value is valid.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example usage of rangeOverflow property&lt;/h3&gt; &lt;p&gt;If an element&#39;s value is greater than its max attribute then rangeOverflow property returns true. For example, the below form submission throws an error if the value is more than 100,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input id=&quot;age&quot; type=&quot;number&quot; max=&quot;100&quot;&amp;gt;
&amp;lt;button onclick=&quot;myOverflowFunction()&quot;&amp;gt;OK&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myOverflowFunction() {
  if (document.getElementById(&quot;age&quot;).validity.rangeOverflow) {
    alert(&quot;The mentioned age is not allowed&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is enums feature available in javascript&lt;/h3&gt; &lt;p&gt;No, javascript does not natively support enums. But there are different kinds of solutions to simulate them even though they may not provide exact equivalents. For example, you can use freeze or seal on object,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var DaysEnum = Object.freeze({&quot;monday&quot;:1, &quot;tuesday&quot;:2, &quot;wednesday&quot;:3, ...})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an enum&lt;/h3&gt; &lt;p&gt;An enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums but typescript provides built-in enum support.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;enum Color {
 RED, GREEN, BLUE
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you list all properties of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; method which returns an array of all properties found directly in a given object. Let&#39;s the usage of it in an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const newObject = {
  a: 1,
  b: 2,
  c: 3
};

console.log(Object.getOwnPropertyNames(newObject));  [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get property descriptors of an object&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Object.getOwnPropertyDescriptors()&lt;/code&gt; method which returns all own property descriptors of a given object. The example usage of this method is below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const newObject = {
   a: 1,
   b: 2,
   c: 3
 };
const descriptorsObject = Object.getOwnPropertyDescriptors(newObject);
console.log(descriptorsObject.a.writable); //true
console.log(descriptorsObject.a.configurable); //true
console.log(descriptorsObject.a.enumerable); //true
console.log(descriptorsObject.a.value); // 1
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the attributes provided by a property descriptor&lt;/h3&gt; &lt;p&gt;A property descriptor is a record which has the following attributes&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;value: The value associated with the property&lt;/li&gt; 
   &lt;li&gt;writable: Determines whether the value associated with the property can be changed or not&lt;/li&gt; 
   &lt;li&gt;configurable: Returns true if the type of this property descriptor can be changed and if the property can be deleted from the corresponding object.&lt;/li&gt; 
   &lt;li&gt;enumerable: Determines whether the property appears during enumeration of the properties on the corresponding object or not.&lt;/li&gt; 
   &lt;li&gt;set: A function which serves as a setter for the property&lt;/li&gt; 
   &lt;li&gt;get: A function which serves as a getter for the property&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you extend classes&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;extends&lt;/code&gt; keyword is used in class declarations/expressions to create a class which is a child of another class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class ChildClass extends ParentClass { ... }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take an example of Square subclass from Polygon parent class,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; class Square extends Rectangle {
   constructor(length) {
     super(length, length);
     this.name = &#39;Square&#39;;
   }

   get area() {
     return this.width * this.height;
   }

   set area(value) {
     this.area = value;
   }
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do I modify the url without reloading the page&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;window.location.url&lt;/code&gt; property will be helpful to modify the url but it reloads the page. HTML5 introduced the &lt;code&gt;history.pushState()&lt;/code&gt; and &lt;code&gt;history.replaceState()&lt;/code&gt; methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.history.pushState(&#39;page2&#39;, &#39;Title&#39;, &#39;/page2.html&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check whether an array includes a particular value or not&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;Array#includes()&lt;/code&gt; method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let&#39;s see an example to find an element(numeric and string) within an array.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var numericArray = [1, 2, 3, 4];
console.log(numericArray.includes(3)); // true

var stringArray = [&#39;green&#39;, &#39;yellow&#39;, &#39;blue&#39;];
console.log(stringArray.includes(&#39;blue&#39;)); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you compare scalar arrays&lt;/h3&gt; &lt;p&gt;You can use length and every method of arrays to compare two scalar(compared directly using ===) arrays. The combination of these expressions can give the expected result,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayFirst = [1,2,3,4,5];
const arraySecond = [1,2,3,4,5];
console.log(arrayFirst.length === arraySecond.length &amp;amp;&amp;amp; arrayFirst.every((value, index) =&amp;gt; value === arraySecond[index])); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you would like to compare arrays irrespective of order then you should sort them before,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayFirst = [2,3,1,4,5];
const arraySecond = [1,2,3,4,5];
console.log(arrayFirst.length === arraySecond.length &amp;amp;&amp;amp; arrayFirst.sort().every((value, index) =&amp;gt; value === arraySecond[index])); //true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to get the value from get parameters&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;new URL()&lt;/code&gt; object accepts the url string and &lt;code&gt;searchParams&lt;/code&gt; property of this object can be used to access the get parameters. Remember that you may need to use polyfill or &lt;code&gt;window.location&lt;/code&gt; to access the URL in older browsers(including IE).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let urlString = &quot;http://www.some-domain.com/about.html?x=1&amp;amp;y=2&amp;amp;z=3&quot;; //window.location.href
let url = new URL(urlString);
let parameterZ = url.searchParams.get(&quot;z&quot;);
console.log(parameterZ); // 3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print numbers with commas as thousand separators&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;Number.prototype.toLocaleString()&lt;/code&gt; method which returns a string with a language-sensitive representation such as thousand separator,currency etc of this number.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function convertToThousandFormat(x){
  return x.toLocaleString(); // 12,345.679
}

console.log(convertToThousandFormat(12345.6789));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between java and javascript&lt;/h3&gt; &lt;p&gt;Both are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let&#39;s see the major differences in a tabular format, | Feature | Java | JavaScript | |---- | ---- | ----- | Typed | It&#39;s a strongly typed language | It&#39;s a dynamic typed language | | Paradigm | Object oriented programming | Prototype based programming | | Scoping | Block scoped | Function-scoped | | Concurrency | Thread based | event based | | Memory | Uses more memory | Uses less memory. Hence it will be used for web pages |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is javascript supports namespace&lt;/h3&gt; &lt;p&gt;JavaScript doesn’t support namespace by default. So if you create any element(function, method, object, variable) then it becomes global and pollutes the global namespace. Let&#39;s take an example of defining two functions without any namespace,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function func1() {
    console.log(&quot;This is a first definition&quot;);

}
function func1() {
    console.log(&quot;This is a second definition&quot;);
}
func1(); // This is a second definition
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It always calls the second function definition. In this case, namespace will solve the name collision problem.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you declare namespace&lt;/h3&gt; &lt;p&gt;Even though JavaScript lacks namespaces, we can use Objects , IIFE to create namespaces.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using Object Literal Notation:&lt;/strong&gt; Let&#39;s wrap variables and functions inside an Object literal which acts as a namespace. After that you can access them using object notation&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var namespaceOne = {
   function func1() {
       console.log(&quot;This is a first definition&quot;);
   }
}
var namespaceTwo = {
     function func1() {
         console.log(&quot;This is a second definition&quot;);
     }
 }
namespaceOne.func1(); // This is a first definition
namespaceTwo.func1(); // This is a second definition
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using IIFE (Immediately invoked function expression):&lt;/strong&gt; The outer pair of parentheses of IIFE creates a local scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can create the same function in two different function expressions to act as a namespace.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function() {
 function fun1(){
   console.log(&quot;This is a first definition&quot;);
   } fun1();
}());

(function() {
    function fun1(){
       console.log(&quot;This is a second definition&quot;);
   } fun1();
 }());
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Using a block and a let/const declaration:&lt;/strong&gt; In ECMAScript 6, you can simply use a block and a let declaration to restrict the scope of a variable to a block.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; {
  let myFunction= function fun1(){
  console.log(&quot;This is a first definition&quot;);
  }
  myFunction();
 }
  //myFunction(): ReferenceError: myFunction is not defined.

 {
  let myFunction= function fun1(){
  console.log(&quot;This is a second definition&quot;);
  }
  myFunction();
 }
  //myFunction(): ReferenceError: myFunction is not defined.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you invoke javascript code in an iframe from parent page&lt;/h3&gt; &lt;p&gt;Initially iFrame needs to be accessed using either &lt;code&gt;document.getElementBy&lt;/code&gt; or &lt;code&gt;window.frames&lt;/code&gt;. After that &lt;code&gt;contentWindow&lt;/code&gt; property of iFrame gives the access for targetFunction&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;targetFrame&#39;).contentWindow.targetFunction();
window.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do get the timezone offset from date&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;getTimezoneOffset&lt;/code&gt; method of the date object. This method returns the time zone difference, in minutes, from current locale (host system settings) to UTC&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var offset = new Date().getTimezoneOffset();
console.log(offset); // -480
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you load CSS and JS files dynamically&lt;/h3&gt; &lt;p&gt;You can create both link and script elements in the DOM and append them as child to head tag. Let&#39;s create a function to add script and style resources as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function loadAssets(filename, filetype) {
  if (filetype == &quot;css&quot;) { // External CSS file
       var fileReference = document.createElement(&quot;link&quot;)
       fileReference.setAttribute(&quot;rel&quot;, &quot;stylesheet&quot;);
       fileReference.setAttribute(&quot;type&quot;, &quot;text/css&quot;);
       fileReference.setAttribute(&quot;href&quot;, filename);
  } else if (filetype == &quot;js&quot;) { // External JavaScript file
       var fileReference = document.createElement(&#39;script&#39;);
       fileReference.setAttribute(&quot;type&quot;, &quot;text/javascript&quot;);
       fileReference.setAttribute(&quot;src&quot;, filename);
  }
  if (typeof fileReference != &quot;undefined&quot;)
       document.getElementsByTagName(&quot;head&quot;)[0].appendChild(fileReference)
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different methods to find HTML elements in DOM&lt;/h3&gt; &lt;p&gt;If you want to access any element in an HTML page, you need to start with accessing the document object. Later you can use any of the below methods to find the HTML element,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;document.getElementById(id): It finds an element by Id&lt;/li&gt; 
   &lt;li&gt;document.getElementsByTagName(name): It finds an element by tag name&lt;/li&gt; 
   &lt;li&gt;document.getElementsByClassName(name): It finds an element by class name&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is jQuery&lt;/h3&gt; &lt;p&gt;jQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous with its philosophy of “Write less, do more”. For example, you can display welcome message on the page load using jQuery as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){ // It selects the document and apply the function on page load
    alert(&#39;Welcome to jQuery world&#39;);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can download it from jquery&#39;s official site or install it from CDNs, like google.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is V8 JavaScript engine&lt;/h3&gt; &lt;p&gt;V8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors. &lt;strong&gt;Note:&lt;/strong&gt; It can run standalone, or can be embedded into any C++ application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we call javascript as dynamic language&lt;/h3&gt; &lt;p&gt;JavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let age = 50;    // age is a number now
age  = &#39;old&#39;; // age is a string now
age  = true;  // age is a boolean
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a void operator&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;void&lt;/code&gt; operator evaluates the given expression and then returns undefined(i.e, without returning value). The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;void (expression)
void expression
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s display a message without any redirection or reload&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;a href=&quot;javascript:void(alert(&#39;Welcome to JS world&#39;))&quot;&amp;gt;Click here to see a message&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This operator is often used to obtain the undefined primitive value, using &quot;void(0)&quot;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to set the cursor to wait&lt;/h3&gt; &lt;p&gt;The cursor can be set to wait in JavaScript by using the property &quot;cursor&quot;. Let&#39;s perform this behavior on page load using the below function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFunction() {
window.document.body.style.cursor = &quot;wait&quot;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and this function invoked on page load&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body onload=&quot;myFunction()&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an infinite loop&lt;/h3&gt; &lt;p&gt;You can create infinite loops using for and while loops without using any expressions. The for loop construct or syntax is better approach in terms of ESLint and code optimizer tools,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (;;) {}
while(true) {
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need to avoid with statement&lt;/h3&gt; &lt;p&gt;JavaScript&#39;s with statement was intended to provide a shorthand for writing recurring accesses to objects. So it can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. Let&#39;s take an example where it is used to avoid redundancy when accessing an object several times.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;a.b.c.greeting   = &#39;welcome&#39;;
a.b.c.age = 32;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;code&gt;with&lt;/code&gt; it turns this into:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;with(a.b.c) {
        greeting   = &quot;welcome&quot;;
        age = 32;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But this &lt;code&gt;with&lt;/code&gt; statement creates performance problems since one cannot predict whether an argument will refer to a real variable or to a property inside the with argument.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below for loops&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (var i = 0; i &amp;lt; 4; i++) { // global scope
  setTimeout(() =&amp;gt; console.log(i));
}

for (let i = 0; i &amp;lt; 4; i++) { // block scope
  setTimeout(() =&amp;gt; console.log(i));
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above for loops is 4 4 4 4 and 0 1 2 3 &lt;strong&gt;Explanation:&lt;/strong&gt; Due to the event queue/loop of javascript, the &lt;code&gt;setTimeout&lt;/code&gt; callback function is called after the loop has been executed. Since the variable i is declared with the &lt;code&gt;var&lt;/code&gt; keyword it became a global variable and the value was equal to 4 using iteration when the time setTimeout function is invoked. Hence, the output of the first loop is &lt;code&gt;4 4 4 4&lt;/code&gt;. Whereas in the second loop, the variable i is declared as the &lt;code&gt;let&lt;/code&gt; keyword it becomes a block scoped variable and it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is &lt;code&gt;0 1 2 3&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;List down some of the features of ES6&lt;/h3&gt; &lt;p&gt;Below are the list of some new features of ES6,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Support for constants or immutable variables&lt;/li&gt; 
   &lt;li&gt;Block-scope support for variables, constants and functions&lt;/li&gt; 
   &lt;li&gt;Arrow functions&lt;/li&gt; 
   &lt;li&gt;Default parameters&lt;/li&gt; 
   &lt;li&gt;Rest and Spread Parameters&lt;/li&gt; 
   &lt;li&gt;Template Literals&lt;/li&gt; 
   &lt;li&gt;Multi-line Strings&lt;/li&gt; 
   &lt;li&gt;Destructuring Assignment&lt;/li&gt; 
   &lt;li&gt;Enhanced Object Literals&lt;/li&gt; 
   &lt;li&gt;Promises&lt;/li&gt; 
   &lt;li&gt;Classes&lt;/li&gt; 
   &lt;li&gt;Modules&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ES6&lt;/h3&gt; &lt;p&gt;ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old browsers there are many transpilers, like Babel.js etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I redeclare let and const variables&lt;/h3&gt; &lt;p&gt;No, you cannot redeclare let and const variables. If you do, it throws below error&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Uncaught SyntaxError: Identifier &#39;someVariable&#39; has already been declared
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; The variable declaration with &lt;code&gt;var&lt;/code&gt; keyword refers to a function scope and the variable is treated as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations contributing to the same hoisted variable without any error. Let&#39;s take an example of re-declaring variables in the same scope for both var and let/const variables.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var name = &#39;John&#39;;
function myFunc() {
    var name = &#39;Nick&#39;;
    var name = &#39;Abraham&#39;; // Re-assigned in the same function block
    alert(name); // Abraham
}
myFunc();
alert(name); // John
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The block-scoped multi-declaration throws syntax error,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let name = &#39;John&#39;;
function myFunc() {
    let name = &#39;Nick&#39;;
    let name = &#39;Abraham&#39;; // Uncaught SyntaxError: Identifier &#39;name&#39; has already been declared
    alert(name);
}

myFunc();
alert(name);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is const variable makes the value immutable&lt;/h3&gt; &lt;p&gt;No, the const variable doesn&#39;t make the value immutable. But it disallows subsequent assignments(i.e, You can declare with assignment but can&#39;t assign another value later)&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const userList = [];
userList.push(&#39;John&#39;); // Can mutate even though it can&#39;t re-assign
console.log(userList); // [&#39;John&#39;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are default parameters&lt;/h3&gt; &lt;p&gt;In E5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let&#39;s compare the behavior with an examples,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//ES5
var calculateArea = function(height, width) {
   height =  height || 50;
   width = width || 60;

   return width * height;
}
console.log(calculateArea()); //300
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The default parameters makes the initialization more simpler,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//ES6
var calculateArea = function(height = 50, width = 60) {
   return width * height;
}

console.log(calculateArea()); //300
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are template literals&lt;/h3&gt; &lt;p&gt;Template literals or template strings are string literals allowing embedded expressions. These are enclosed by the back-tick (`) character instead of double or single quotes. In E6, this feature enables using dynamic expressions as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In ES5, you need break string like below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var greeting = &#39;Welcome to JS World, Mr. &#39; + firstName + &#39; &#39; + lastName.`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can use multi-line strings and string interpolation features with template literals.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you write multi-line strings in template literals&lt;/h3&gt; &lt;p&gt;In ES5, you would have to use newline escape characters(&#39;\n&#39;) and concatenation symbols(+) in order to get multi-line strings.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;This is string sentence 1\n&#39; +
&#39;This is string sentence 2&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in ES6, You don&#39;t need to mention any newline sequence character,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(`This is string sentence
&#39;This is string sentence 2`);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are nesting templates&lt;/h3&gt; &lt;p&gt;The nesting template is a feature supported within template literals syntax to allow inner backticks inside a placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on user permissions whereas outer template checks for platform type,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const iconStyles = `icon ${ isMobilePlatform() ? &#39;&#39; :
 `icon-${user.isAuthorized ? &#39;submit&#39; : &#39;disabled&#39;}` }`;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the above use case without nesting template features as well. However, the nesting template feature is more compact and readable.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Without nesting templates
 const iconStyles = `icon ${ isMobilePlatform() ? &#39;&#39; :
  (user.isAuthorized ? &#39;icon-submit&#39; : &#39;icon-disabled&#39;}`;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are tagged templates&lt;/h3&gt; &lt;p&gt;Tagged templates are the advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions. This function can also return manipulated strings based on parameters. Let&#39;s see the usage of this tagged template behavior of an IT professional skill set in an organization,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user1 = &#39;John&#39;;
var skill1 = &#39;JavaScript&#39;;
var experience1 = 15;

var user2 = &#39;Kane&#39;;
var skill2 = &#39;JavaScript&#39;;
var experience2 = 5;

function myInfoTag(strings, userExp, experienceExp, skillExp) {
  var str0 = strings[0]; // &quot;Mr/Ms. &quot;
  var str1 = strings[1]; // &quot; is a/an &quot;
  var str2 = strings[2]; // &quot;in&quot;

  var expertiseStr;
  if (experienceExp &amp;gt; 10){
    expertiseStr = &#39;expert developer&#39;;
  } else if(skillExp &amp;gt; 5 &amp;amp;&amp;amp; skillExp &amp;lt;= 10) {
    expertiseStr = &#39;senior developer&#39;;
  } else {
    expertiseStr = &#39;junior developer&#39;;
  }

  return ${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp};
}

var output1 = myInfoTag`Mr/Ms. ${ user1 } is a/an ${ experience1 } in ${skill1}`;
var output2 = myInfoTag`Mr/Ms. ${ user2 } is a/an ${ experience2 } in ${skill2}`;

console.log(output1);// Mr/Ms. John is a/an expert developer in JavaScript
console.log(output2);// Mr/Ms. Kane is a/an junior developer in JavaScript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are raw strings&lt;/h3&gt; &lt;p&gt;ES6 provides a raw strings feature using the &lt;code&gt;String.raw()&lt;/code&gt; method which is used to get the raw string form of template strings. This feature allows you to access the raw strings as they were entered, without processing escape sequences. For example, the usage would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var calculationString = String.raw `The sum of numbers is \n${1+2+3+4}!`;
console.log(calculationString); // The sum of numbers is 10
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t use raw strings, the newline character sequence will be processed by displaying the output in multiple lines&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var calculationString = `The sum of numbers is \n${1+2+3+4}!`;
console.log(calculationString);
// The sum of numbers is
// 10
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Also, the raw property is available on the first argument to the tag function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function tag(strings) {
   console.log(strings.raw[0]);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is destructuring assignment&lt;/h3&gt; &lt;p&gt;The destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables. Let&#39;s get the month values from an array using destructuring assignment&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var [one, two, three] = [&#39;JAN&#39;, &#39;FEB&#39;, &#39;MARCH&#39;];

console.log(one); // &quot;JAN&quot;
console.log(two); // &quot;FEB&quot;
console.log(three); // &quot;MARCH&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and you can get user properties of an object using destructuring assignment,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var {name, age} = {name: &#39;John&#39;, age: 32};

console.log(name); // John
console.log(age); // 32
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are default values in destructuring assignment&lt;/h3&gt; &lt;p&gt;A variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment. It helps to avoid setting default values separately for each assignment. Let&#39;s take an example for both arrays and object use cases,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Arrays destructuring:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x, y, z;

[x=2, y=4, z=6] = [10];
console.log(x); // 10
console.log(y); // 4
console.log(z); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Objects destructuring:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var {x=2, y=4, z=6} = {x: 10};

console.log(x); // 10
console.log(y); // 4
console.log(z); // 6
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you swap variables in destructuring assignment&lt;/h3&gt; &lt;p&gt;If you don&#39;t use destructuring assignment, swapping two values requires a temporary variable. Whereas using a destructuring feature, two variable values can be swapped in one destructuring expression. Let&#39;s swap two number variables in array destructuring assignment,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var x = 10, y = 20;

[x, y] = [y, x];
console.log(x); // 20
console.log(y); // 10
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are enhanced object literals&lt;/h3&gt; &lt;p&gt;Object literals make it easy to quickly create objects with properties inside the curly braces. For example, it provides shorter syntax for common object property definition as below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//ES6
var x = 10, y = 20
obj = { x, y }
console.log(obj); // {x: 10, y:20}
//ES5
var x = 10, y = 20
obj = { x : x, y : y}
console.log(obj); // {x: 10, y:20}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are dynamic imports&lt;/h3&gt; &lt;p&gt;The dynamic imports using &lt;code&gt;import()&lt;/code&gt; function syntax allows us to load modules on demand by using promises or the async/await syntax. Currently this feature is in &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;stage4 proposal&lt;/a&gt;. The main advantage of dynamic imports is reduction of our bundle&#39;s sizes, the size/payload response of our requests and overall improvements in the user experience. The syntax of dynamic imports would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import(&#39;./Module&#39;).then(Module =&amp;gt; Module.method());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the use cases for dynamic imports&lt;/h3&gt; &lt;p&gt;Below are some of the use cases of using dynamic imports over static imports,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Import a module on-demand or conditionally. For example, if you want to load a polyfill on legacy browser&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (isLegacyBrowser()) {
    import(···)
    .then(···);
}
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Compute the module specifier at runtime. For example, you can use it for internationalization.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import(`messages_${getLocale()}.js`).then(···);
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Import a module from within a regular script instead a module.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are typed arrays&lt;/h3&gt; &lt;p&gt;Typed arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 8 Typed array types,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Int8Array: An array of 8-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Int16Array: An array of 16-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Int32Array: An array of 32-bit signed integers&lt;/li&gt; 
   &lt;li&gt;Uint8Array: An array of 8-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;Uint16Array: An array of 16-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;Uint32Array: An array of 32-bit unsigned integers&lt;/li&gt; 
   &lt;li&gt;Float32Array: An array of 32-bit floating point numbers&lt;/li&gt; 
   &lt;li&gt;Float64Array: An array of 64-bit floating point numbers&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, you can create an array of 8-bit signed integers as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = new Int8Array();
// You can pre-allocate n bytes
const bytes = 1024
const a = new Int8Array(bytes)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of module loaders&lt;/h3&gt; &lt;p&gt;The module loaders provides the below features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Dynamic loading&lt;/li&gt; 
   &lt;li&gt;State isolation&lt;/li&gt; 
   &lt;li&gt;Global namespace isolation&lt;/li&gt; 
   &lt;li&gt;Compilation hooks&lt;/li&gt; 
   &lt;li&gt;Nested virtualization&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is collation&lt;/h3&gt; &lt;p&gt;Collation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode. Let&#39;s take comparison and sorting features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Comparison:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var list = [ &quot;ä&quot;, &quot;a&quot;, &quot;z&quot; ]; // In German,  &quot;ä&quot; sorts with &quot;a&quot; Whereas in Swedish, &quot;ä&quot; sorts after &quot;z&quot;
var l10nDE = new Intl.Collator(&quot;de&quot;);
var l10nSV = new Intl.Collator(&quot;sv&quot;);
console.log(l10nDE.compare(&quot;ä&quot;, &quot;z&quot;) === -1); // true
console.log(l10nSV.compare(&quot;ä&quot;, &quot;z&quot;) === +1); // true
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Sorting:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var list = [ &quot;ä&quot;, &quot;a&quot;, &quot;z&quot; ]; // In German,  &quot;ä&quot; sorts with &quot;a&quot; Whereas in Swedish, &quot;ä&quot; sorts after &quot;z&quot;
var l10nDE = new Intl.Collator(&quot;de&quot;);
var l10nSV = new Intl.Collator(&quot;sv&quot;);
console.log(list.sort(l10nDE.compare)) // [ &quot;a&quot;, &quot;ä&quot;, &quot;z&quot; ]
console.log(list.sort(l10nSV.compare)) // [ &quot;a&quot;, &quot;z&quot;, &quot;ä&quot; ]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is for...of statement&lt;/h3&gt; &lt;p&gt;The for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array, Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage of for...of statement on arrays would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let arrayIterable = [10, 20, 30, 40, 50];

for (let value of arrayIterable) {
  value ++;
  console.log(value); // 11 21 31 41 51
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below spread operator array&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[...&#39;John Resig&#39;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the array is [&#39;J&#39;, &#39;o&#39;, &#39;h&#39;, &#39;n&#39;, &#39;&#39;, &#39;R&#39;, &#39;e&#39;, &#39;s&#39;, &#39;i&#39;, &#39;g&#39;] &lt;strong&gt;Explanation:&lt;/strong&gt; The string is an iterable type and the spread operator within an array maps every character of an iterable to one element. Hence, each character of a string becomes an element within an Array.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is PostMessage secure&lt;/h3&gt; &lt;p&gt;Yes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the origin and source of an arriving message. But if you try to send/receive a message without verifying its source will create cross-site scripting attacks.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems with postmessage target origin as wildcard&lt;/h3&gt; &lt;p&gt;The second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard “*” as an argument then any origin is allowed to receive the message. In this case, there is no way for the sender window to know if the target window is at the target origin when sending the message. If the target window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS vulnerabilities.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;targetWindow.postMessage(message, &#39;*&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you avoid receiving postMessages from attackers&lt;/h3&gt; &lt;p&gt;Since the listener listens for any message, an attacker can trick the application by sending a message from the attacker’s origin, which gives an impression that the receiver received the message from the actual sender’s window. You can avoid this issue by validating the origin of the message on the receiver&#39;s end using the “message.origin” attribute. For examples, let&#39;s check the sender&#39;s origin &lt;a href=&quot;http://www.some-sender.com&quot;&gt;http://www.some-sender.com&lt;/a&gt; on receiver side &lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/www.some-receiver.com&quot;&gt;www.some-receiver.com&lt;/a&gt;,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Listener on http://www.some-receiver.com/
window.addEventListener(&quot;message&quot;, function(message){
    if(/^http://www\.some-sender\.com$/.test(message.origin)){
         console.log(&#39;You received the data from valid sender&#39;, message.data);
   }
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Can I avoid using postMessages completely&lt;/h3&gt; &lt;p&gt;You cannot avoid using postMessages completely(or 100%). Even though your application doesn’t use postMessage considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So your application might be using postMessage without your knowledge.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is postMessages synchronous&lt;/h3&gt; &lt;p&gt;The postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (i.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the postMessage is returned.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What paradigm is Javascript&lt;/h3&gt; &lt;p&gt;JavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between internal and external javascript&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Internal JavaScript:&lt;/strong&gt; It is the source code within the script tag. &lt;strong&gt;External JavaScript:&lt;/strong&gt; The source code is stored in an external file(stored with .js extension) and referred with in the tag.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is JavaScript faster than server side script&lt;/h3&gt; &lt;p&gt;Yes, JavaScript is faster than server side script. Because JavaScript is a client-side script it does not require any web server’s help for its computation or calculation. So JavaScript is always faster than any server-side script like ASP, PHP, etc.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get the status of a checkbox&lt;/h3&gt; &lt;p&gt;You can apply the &lt;code&gt;checked&lt;/code&gt; property on the selected checkbox in the DOM. If the value is &lt;code&gt;True&lt;/code&gt; means the checkbox is checked otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;input type=&quot;checkbox&quot; name=&quot;checkboxname&quot; value=&quot;Agree&quot;&amp;gt; Agree the conditions&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(document.getElementById(‘checkboxname’).checked); // true or false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of double tilde operator&lt;/h3&gt; &lt;p&gt;The double tilde operator(~~) is known as double NOT bitwise operator. This operator is going to be a quicker substitute for Math.floor().&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you convert character to ASCII code&lt;/h3&gt; &lt;p&gt;You can use the &lt;code&gt;String.prototype.charCodeAt()&lt;/code&gt; method to convert string characters to ASCII numbers. For example, let&#39;s find ASCII code for the first letter of &#39;ABC&#39; string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;ABC&quot;.charCodeAt(0) // returns 65
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas &lt;code&gt;String.fromCharCode()&lt;/code&gt; method converts numbers to equal ASCII characters.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;String.fromCharCode(65,66,67); // returns &#39;ABC&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is ArrayBuffer&lt;/h3&gt; &lt;p&gt;An ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let buffer = new ArrayBuffer(16); // create a buffer of length 16
alert(buffer.byteLength); // 16
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To manipulate an ArrayBuffer, we need to use a “view” object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Create a DataView referring to the buffer
 let view = new DataView(buffer);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below string expression&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&quot;Welcome to JS world&quot;[0])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above expression is &quot;W&quot;. &lt;strong&gt;Explanation:&lt;/strong&gt; The bracket notation with specific index on a string returns the character at a specific location. Hence, it returns the character &quot;W&quot; of the string. Since this is not supported in IE7 and below versions, you may need to use the .charAt() method to get the desired result.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of Error object&lt;/h3&gt; &lt;p&gt;The Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new Error([message[, fileName[, lineNumber]]])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can throw user defined exceptions or errors using Error object in try...catch block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  if(withdraw &amp;gt; balance)
  throw new Error(&quot;Oops! You don&#39;t have enough balance&quot;);
} catch (e) {
  console.log(e.name + &#39;: &#39; + e.message);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of EvalError object&lt;/h3&gt; &lt;p&gt;The EvalError object indicates an error regarding the global &lt;code&gt;eval()&lt;/code&gt; function. Even though this exception is not thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;new EvalError([message[, fileName[, lineNumber]]])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can throw EvalError with in try...catch block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  throw new EvalError(&#39;Eval function error&#39;, &#39;someFile.js&#39;, 100);
} catch (e) {
  console.log(e.message, e.name, e.fileName);              // &quot;Eval function error&quot;, &quot;EvalError&quot;, &quot;someFile.js&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the list of cases error thrown from non-strict mode to strict mode&lt;/h3&gt; &lt;p&gt;When you apply &#39;use strict&#39;; syntax, some of the below cases will throw a SyntaxError before executing the script&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When you use Octal syntax&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var n = 022;
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using &lt;code&gt;with&lt;/code&gt; statement&lt;/li&gt; 
   &lt;li&gt;When you use delete operator on a variable name&lt;/li&gt; 
   &lt;li&gt;Using eval or arguments as variable or function argument name&lt;/li&gt; 
   &lt;li&gt;When you use newly reserved keywords&lt;/li&gt; 
   &lt;li&gt;When you declare a function in a block&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (someCondition) { function f() {} }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Hence, the errors from above cases are helpful to avoid errors in development/production environments.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is all objects have prototypes&lt;/h3&gt; &lt;p&gt;No. All objects have prototypes except for the base object which is created by the user, or an object that is created using the new keyword.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between a parameter and an argument&lt;/h3&gt; &lt;p&gt;Parameter is the variable name of a function definition whereas an argument represents the value given to a function when it is invoked. Let&#39;s explain this with a simple function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFunction(parameter1, parameter2, parameter3) {
  console.log(arguments[0]) // &quot;argument1&quot;
  console.log(arguments[1]) // &quot;argument2&quot;
  console.log(arguments[2]) // &quot;argument3&quot;
}
myFunction(&quot;argument1&quot;, &quot;argument2&quot;, &quot;argument3&quot;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of some method in arrays&lt;/h3&gt; &lt;p&gt;The some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let&#39;s take an example to test for any odd elements,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var array = [1, 2, 3, 4, 5, 6 ,7, 8, 9, 10];

var odd = element ==&amp;gt; element % 2 !== 0;

console.log(array.some(odd)); // true (the odd element exists)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you combine two or more arrays&lt;/h3&gt; &lt;p&gt;The concat() method is used to join two or more arrays by returning a new array containing all the elements. The syntax would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;array1.concat(array2, array3, ..., arrayX)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s take an example of array&#39;s concatenation with veggies and fruits arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  var veggies = [&quot;Tomato&quot;, &quot;Carrot&quot;, &quot;Cabbage&quot;];
  var fruits = [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Pears&quot;];
  var veggiesAndFruits = veggies.concat(fruits);
  console.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Shallow and Deep copy&lt;/h3&gt; &lt;p&gt;There are two ways to copy an object,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Shallow Copy:&lt;/strong&gt; Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var empDetails = {
  name: &quot;John&quot;, age: 25, expertise: &quot;Software Developer&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to create a duplicate&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var empDetailsShallowCopy = empDetails    //Shallow copying!
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;if we change some property value in the duplicate one like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;empDetailsShallowCopy.name = &quot;Johnson&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above statement will also change the name of &lt;code&gt;empDetails&lt;/code&gt;, since we have a shallow copy. That means we&#39;re losing the original data as well.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Deep copy:&lt;/strong&gt; A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var empDetails = {
  name: &quot;John&quot;, age: 25, expertise: &quot;Software Developer&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a deep copy by using the properties from the original object into new variable&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var empDetailsDeepCopy = {
  name: empDetails.name,
  age: empDetails.age,
  expertise: empDetails.expertise
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now if you change &lt;code&gt;empDetailsDeepCopy.name&lt;/code&gt;, it will only affect &lt;code&gt;empDetailsDeepCopy&lt;/code&gt; &amp;amp; not &lt;code&gt;empDetails&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create specific number of copies of a string&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;repeat()&lt;/code&gt; method is used to construct and return a new string which contains the specified number of copies of the string on which it was called, concatenated together. Remember that this method has been added to the ECMAScript 2015 specification. Let&#39;s take an example of Hello string to repeat it 4 times,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&#39;Hello&#39;.repeat(4);  // &#39;HelloHelloHelloHello&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you return all matching strings against a regular expression&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;matchAll()&lt;/code&gt; method can be used to return an iterator of all results matching a string against a regular expression. For example, the below example returns an array of matching string results against a regular expression,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let regexp = /Hello(\d?))/g;
let greeting = &#39;Hello1Hello2Hello3&#39;;

let greetingList = [...greeting.matchAll(regexp)];

console.log(greetingList[0]); //Hello1
console.log(greetingList[1]); //Hello2
console.log(greetingList[2]); //Hello3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you trim a string at the beginning or ending&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;trim&lt;/code&gt; method of string prototype is used to trim on both sides of a string. But if you want to trim especially at the beginning or ending of the string then you can use &lt;code&gt;trimStart/trimLeft&lt;/code&gt; and &lt;code&gt;trimEnd/trimRight&lt;/code&gt; methods. Let&#39;s see an example of these methods on a greeting message,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var greeting = &#39;   Hello, Goodmorning!   &#39;;

console.log(greeting); // &quot;   Hello, Goodmorning!   &quot;
console.log(greeting.trimStart()); // &quot;Hello, Goodmorning!   &quot;
console.log(greeting.trimLeft()); // &quot;Hello, Goodmorning!   &quot;

console.log(greeting.trimEnd()); // &quot;   Hello, Goodmorning!&quot;
console.log(greeting.trimRight()); // &quot;   Hello, Goodmorning!&quot;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below console statement with unary operator&lt;/h3&gt; &lt;p&gt;Let&#39;s take console statement with unary operator as given below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(+ &#39;Hello&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of the above console log statement returns NaN. Because the element is prefixed by the unary operator and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the value of the statement results in NaN value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Does javascript uses mixins&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a thunk function&lt;/h3&gt; &lt;p&gt;A thunk is just a function which delays the evaluation of the value. It doesn’t take any arguments but gives the value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future. Let&#39;s take a synchronous example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const add = (x,y) =&amp;gt; x + y;

const thunk = () =&amp;gt; add(2,3);

thunk() // 5
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are asynchronous thunks&lt;/h3&gt; &lt;p&gt;The asynchronous thunks are useful to make network requests. Let&#39;s see an example of network requests,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function fetchData(fn){
  fetch(&#39;https://jsonplaceholder.typicode.com/todos/1&#39;)
  .then(response =&amp;gt; response.json())
  .then(json =&amp;gt; fn(json))
}

const asyncThunk = function (){
   return fetchData(function getData(data){
      console.log(data)
  })
}

asyncThunk()
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;getData&lt;/code&gt; function won&#39;t be called immediately but it will be invoked only when the data is available from API endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux state management library which uses the asynchronous thunks to delay the actions to dispatch.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of below function calls&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Code snippet:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const circle = {
  radius: 20,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () =&amp;gt; 2 * Math.PI * this.radius
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;console.log(circle.diameter()); console.log(circle.perimeter());&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow function. The &lt;code&gt;this&lt;/code&gt; keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window object. Since there is no radius property on window objects it returns an undefined value and the multiple of number value returns NaN value.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to remove all line breaks from a string&lt;/h3&gt; &lt;p&gt;The easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we use replace function along with string to replace with, which in our case is an empty string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function remove_linebreaks( var message ) {
    return message.replace( /[\r\n]+/gm, &quot;&quot; );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above expression, g and m are for global and multiline flags.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between reflow and repaint&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;repaint&lt;/em&gt; occurs when changes are made which affect the visibility of an element, but not its layout. Examples of this include outline, visibility, or background color. A &lt;em&gt;reflow&lt;/em&gt; involves changes that affect the layout of a portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM, and changing an element&#39;s classes are a few of the things that can trigger reflow. Reflow of an element causes the subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens with negating an array&lt;/h3&gt; &lt;p&gt;Negating an array with &lt;code&gt;!&lt;/code&gt; character will coerce the array into a boolean. Since Arrays are considered to be truthy So negating it will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(![]); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What happens if we add two arrays&lt;/h3&gt; &lt;p&gt;If you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log([&#39;a&#39;] + [&#39;b&#39;]);  // &quot;ab&quot;
console.log([] + []); // &quot;&quot;
console.log(![] + []); // &quot;false&quot;, because ![] returns false.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the output of prepend additive operator on falsy values&lt;/h3&gt; &lt;p&gt;If you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, &quot;&quot;), the falsy value converts to a number value zero. Let&#39;s display them on browser console as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(+null); // 0
console.log(+undefined);// NaN
console.log(+false); // 0
console.log(+NaN); // NaN
console.log(+&quot;&quot;); // 0
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create self string using special characters&lt;/h3&gt; &lt;p&gt;The self string can be formed with the combination of &lt;code&gt;[]()!+&lt;/code&gt; characters. You need to remember the below conventions to achieve this pattern.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Since Arrays are truthful values, negating the arrays will produce false: ![] === false&lt;/li&gt; 
   &lt;li&gt;As per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === &quot;&quot;&lt;/li&gt; 
   &lt;li&gt;Prepend an array with + operator will convert an array to false, the negation will make it true and finally converting the result will produce value &#39;1&#39;: +(!(+[])) === 1&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;By applying the above rules, we can derive below conditions&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;![] + [] === &quot;false&quot;
+!+[] === 1
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now the character pattern would be created as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;      s               e               l               f
 ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^

 (![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0]
 ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^
(![] + [])[+!+[]+!+[]+!+[]] +
(![] + [])[+!+[]+!+[]+!+[]+!+[]] +
(![] + [])[+!+[]+!+[]] +
(![] + [])[+[]]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
(![]+[])[+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]]+(![]+[])[+[]]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you remove falsy values from an array&lt;/h3&gt; &lt;p&gt;You can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy values(0, undefined, null, false and &quot;&quot;) from the array.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const myArray = [false, null, 1,5, undefined]
myArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x =&amp;gt; x);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get unique values of an array&lt;/h3&gt; &lt;p&gt;You can get unique values of an array with the combination of &lt;code&gt;Set&lt;/code&gt; and rest expression/spread(...) syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is destructuring aliases&lt;/h3&gt; &lt;p&gt;Sometimes you would like to have a destructured variable with a different name than the property name. In that case, you&#39;ll use a &lt;code&gt;: newName&lt;/code&gt; to specify a name for the variable. This process is called destructuring aliases.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const obj = { x: 1 };
// Grabs obj.x as as { otherName }
const { x: otherName } = obj;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you map the array values without using map method&lt;/h3&gt; &lt;p&gt;You can map the array values without using the &lt;code&gt;map&lt;/code&gt; method by just using the &lt;code&gt;from&lt;/code&gt; method of Array. Let&#39;s map city names from Countries array,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const countries = [
    { name: &#39;India&#39;, capital: &#39;Delhi&#39; },
    { name: &#39;US&#39;, capital: &#39;Washington&#39; },
    { name: &#39;Russia&#39;, capital: &#39;Moscow&#39; },
    { name: &#39;Singapore&#39;, capital: &#39;Singapore&#39; },
    { name: &#39;China&#39;, capital: &#39;Beijing&#39; },
    { name: &#39;France&#39;, capital: &#39;Paris&#39; },
];

const cityNames = Array.from(countries, ({ capital}) =&amp;gt; capital);
console.log(cityNames); // [&#39;Delhi, &#39;Washington&#39;, &#39;Moscow&#39;, &#39;Singapore&#39;, &#39;Beijing&#39;, &#39;Paris&#39;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you empty an array&lt;/h3&gt; &lt;p&gt;You can empty an array quickly by setting the array length to zero.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cities = [&#39;Singapore&#39;, &#39;Delhi&#39;, &#39;London&#39;];
cities.length = 0; // cities becomes []
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you rounding numbers to certain decimals&lt;/h3&gt; &lt;p&gt;You can round numbers to a certain number of decimals using &lt;code&gt;toFixed&lt;/code&gt; method from native javascript.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let pie = 3.141592653;
pie = pie.toFixed(3); // 3.142
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest way to convert an array to an object&lt;/h3&gt; &lt;p&gt;You can convert an array to an object with the same data using spread(...) operator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fruits = [&quot;banana&quot;, &quot;apple&quot;, &quot;orange&quot;, &quot;watermelon&quot;];
var fruitsObject = {...fruits};
console.log(fruitsObject); // {0: &quot;banana&quot;, 1: &quot;apple&quot;, 2: &quot;orange&quot;, 3: &quot;watermelon&quot;}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create an array with some data&lt;/h3&gt; &lt;p&gt;You can create an array with some data or an array with the same values using &lt;code&gt;fill&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var newArray = new Array(5).fill(&quot;0&quot;);
console.log(newArray); // [&quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;, &quot;0&quot;]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the placeholders from console object&lt;/h3&gt; &lt;p&gt;Below are the list of placeholders available from console object,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;%o — It takes an object,&lt;/li&gt; 
   &lt;li&gt;%s — It takes a string,&lt;/li&gt; 
   &lt;li&gt;%d — It is used for a decimal or integer These placeholders can be represented in the console.log as below&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = { &quot;name&quot;:&quot;John&quot;, &quot;id&quot;: 1, &quot;city&quot;: &quot;Delhi&quot;};
console.log(&quot;Hello %s, your details %o are available in the object form&quot;, &quot;John&quot;, user); // Hello John, your details {name: &quot;John&quot;, id: 1, city: &quot;Delhi&quot;} are available in object
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to add CSS to console messages&lt;/h3&gt; &lt;p&gt;Yes, you can apply CSS styles to console messages similar to html text on the web page.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;%c The text has blue color, with large font and red background&#39;, &#39;color: blue; font-size: x-large; background: red&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The text will be displayed as below, &lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-css.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All CSS styles can be applied to console messages.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of dir method of console object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;console.dir()&lt;/code&gt; is used to display an interactive list of the properties of the specified JavaScript object as JSON.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = { &quot;name&quot;:&quot;John&quot;, &quot;id&quot;: 1, &quot;city&quot;: &quot;Delhi&quot;};
console.dir(user);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The user object displayed in JSON representation &lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-dir.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to debug HTML elements in console&lt;/h3&gt; &lt;p&gt;Yes, it is possible to get and debug HTML elements in the console just like inspecting elements.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const element = document.getElementsByTagName(&quot;body&quot;)[0];
console.log(element);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It prints the HTML element in the console,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-html.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you display data in a tabular format using console object&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;console.table()&lt;/code&gt; is used to display data in the console in a tabular format to visualize complex arrays or objects.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const users = [{ &quot;name&quot;:&quot;John&quot;, &quot;id&quot;: 1, &quot;city&quot;: &quot;Delhi&quot;}, { &quot;name&quot;:&quot;Max&quot;, &quot;id&quot;: 2, &quot;city&quot;: &quot;London&quot;}, { &quot;name&quot;:&quot;Rod&quot;, &quot;id&quot;: 3, &quot;city&quot;: &quot;Paris&quot;} ];
console.table(users);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The data visualized in a table format,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/console-table.png&quot; alt=&quot;Screenshot&quot;&gt; &lt;strong&gt;Not:&lt;/strong&gt; Remember that &lt;code&gt;console.table()&lt;/code&gt; is not supported in IE.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you verify that an argument is a Number or not&lt;/h3&gt; &lt;p&gt;The combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isNumber(n){
    return !isNaN(parseFloat(n)) &amp;amp;&amp;amp; isFinite(n);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create copy to clipboard button&lt;/h3&gt; &lt;p&gt;You need to select the content(using .select() method) of the input element and execute the copy command with execCommand (i.e, execCommand(&#39;copy&#39;)). You can also execute other system commands like cut and paste.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.querySelector(&quot;#copy-button&quot;).onclick = function() {
  // Select the content
  document.querySelector(&quot;#copy-input&quot;).select();
  // Copy to the clipboard
  document.execCommand(&#39;copy&#39;);
};
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the shortcut to get timestamp&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new Date().getTime()&lt;/code&gt; to get the current timestamp. There is an alternative shortcut to get the value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(+new Date());
console.log(Date.now());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you flattening multi dimensional arrays&lt;/h3&gt; &lt;p&gt;Flattening bi-dimensional arrays is trivial with Spread operator.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];
const flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can make it work with multi-dimensional arrays by recursive calls,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function flattenMultiArray(arr) {
    const flattened = [].concat(...arr);
    return flattened.some(item =&amp;gt; Array.isArray(item)) ? flattenMultiArray(flattened) : flattened;
 }
const multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];
const flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest multi condition checking&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;indexOf&lt;/code&gt; to compare input with multiple values instead of checking each value as one condition.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Verbose approach
if (input === &#39;first&#39; || input === 1 || input === &#39;second&#39; || input === 2) {
  someFunction();
}
// Shortcut
if ([&#39;first&#39;, 1, &#39;second&#39;, 2].indexOf(input) !== -1) {
  someFunction();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you capture browser back button&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;window.onbeforeunload&lt;/code&gt; method is used to capture browser back button events. This is helpful to warn users about losing the current data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; window.onbeforeunload = function() {
    alert(&quot;You work will be lost&quot;);
 };
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you disable right click in the web page&lt;/h3&gt; &lt;p&gt;The right click on the page can be disabled by returning false from the &lt;code&gt;oncontextmenu&lt;/code&gt; attribute on the body element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body oncontextmenu=&quot;return false;&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are wrapper objects&lt;/h3&gt; &lt;p&gt;Primitive Values like string,number and boolean don&#39;t have properties and methods but they are temporarily converted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let name = &quot;john&quot;;

console.log(name.toUpperCase());  // Behind the scenes treated as console.log(new String(name).toUpperCase());
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;i.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are String,Number,Boolean,Symbol and BigInt.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is AJAX&lt;/h3&gt; &lt;p&gt;AJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript, XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to deal with Asynchronous Code&lt;/h3&gt; &lt;p&gt;Below are the list of different ways to deal with Asynchronous code.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Callbacks&lt;/li&gt; 
   &lt;li&gt;Promises&lt;/li&gt; 
   &lt;li&gt;Async/await&lt;/li&gt; 
   &lt;li&gt;Third-party libraries such as async.js,bluebird etc&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to cancel a fetch request&lt;/h3&gt; &lt;p&gt;Until a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the new &lt;code&gt;AbortController&lt;/code&gt; from js specification allows you to use a signal to abort one or multiple fetch calls. The basic flow of cancelling a fetch request would be as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Create an &lt;code&gt;AbortController&lt;/code&gt; instance&lt;/li&gt; 
   &lt;li&gt;Get the signal property of an instance and pass the signal as a fetch option for signal&lt;/li&gt; 
   &lt;li&gt;Call the AbortController&#39;s abort property to cancel all fetches that use that signal For example, let&#39;s pass the same signal to multiple fetch calls will cancel all requests with that signal,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const controller = new AbortController();
const { signal } = controller;

fetch(&quot;http://localhost:8000&quot;, { signal }).then(response =&amp;gt; {
    console.log(`Request 1 is complete!`);
}).catch(e =&amp;gt; {
    if(e.name === &quot;AbortError&quot;) {
        // We know it&#39;s been canceled!
    }
});

fetch(&quot;http://localhost:8000&quot;, { signal }).then(response =&amp;gt; {
    console.log(`Request 2 is complete!`);
}).catch(e =&amp;gt; {
     if(e.name === &quot;AbortError&quot;) {
         // We know it&#39;s been canceled!
      }
});

// Wait 2 seconds to abort both requests
setTimeout(() =&amp;gt; controller.abort(), 2000);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is web speech API&lt;/h3&gt; &lt;p&gt;Web speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps). This API has been introduced by W3C Community in the year 2012. It has two main parts,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;SpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text):&lt;/strong&gt; It provides the ability to recognize voice context from an audio input and respond accordingly. This is accessed by the &lt;code&gt;SpeechRecognition&lt;/code&gt; interface. The below example shows on how to use this API to get text from speech,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;  // webkitSpeechRecognition for Chrome and SpeechRecognition for FF
const recognition = new window.SpeechRecognition();
recognition.onresult = (event) =&amp;gt; { // SpeechRecognitionEvent type
  const speechToText = event.results[0][0].transcript;
  console.log(speechToText);
}
recognition.start();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this API, browser is going to ask you for permission to use your microphone&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;SpeechSynthesis (Text-to-Speech):&lt;/strong&gt; It provides the ability to recognize voice context from an audio input and respond. This is accessed by the &lt;code&gt;SpeechSynthesis&lt;/code&gt; interface. For example, the below code is used to get voice/speech from text,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if(&#39;speechSynthesis&#39; in window){
    var speech = new SpeechSynthesisUtterance(&#39;Hello World!&#39;);
    speech.lang = &#39;en-US&#39;;
    window.speechSynthesis.speak(speech);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above examples can be tested on chrome(33+) browser&#39;s developer console. &lt;strong&gt;Note:&lt;/strong&gt; This API is still a working draft and only available in Chrome and Firefox browsers(ofcourse Chrome only implemented the specification) &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is minimum timeout throttling&lt;/h3&gt; &lt;p&gt;Both browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means even though setting a delay of 0ms will not happen instantaneously. &lt;strong&gt;Browsers:&lt;/strong&gt; They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to callback nesting(certain depth) or after a certain number of successive intervals. Note: The older browsers have a minimum delay of 10ms. &lt;strong&gt;Nodejs:&lt;/strong&gt; They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or less than 1. The best example to explain this timeout throttling behavior is the order of below code snippet.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function runMeFirst() {
    console.log(&#39;My script is initialized&#39;);
}
setTimeout(runMeFirst, 0);
console.log(&#39;Script loaded&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the output would be in&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;Script loaded
My script is initialized
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you don&#39;t use &lt;code&gt;setTimeout&lt;/code&gt;, the order of logs will be sequential.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function runMeFirst() {
   console.log(&#39;My script is initialized&#39;);
}
runMeFirst();
console.log(&#39;Script loaded&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the output is,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;My script is initialized
Script loaded
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you implement zero timeout in modern browsers&lt;/h3&gt; &lt;p&gt;You can&#39;t use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you can use window.postMessage() to achieve this behavior.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are tasks in event loop&lt;/h3&gt; &lt;p&gt;A task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue. Below are the list of use cases to add tasks to the task queue,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;When a new javascript program is executed directly from console or running by the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element, the task will be added to the task queue.&lt;/li&gt; 
   &lt;li&gt;When an event fires, the event callback added to task queue&lt;/li&gt; 
   &lt;li&gt;When a setTimeout or setInterval is reached, the corresponding callback added to task queue&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is microtask&lt;/h3&gt; &lt;p&gt;Microtask is the javascript code which needs to be executed immediately after the currently executing task/microtask is completed. They are kind of blocking in nature. i.e, The main thread will be blocked until the microtask queue is empty. The main sources of microtasks are Promise.resolve, Promise.reject, MutationObservers, IntersectionObservers etc&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All of these microtasks are processed in the same turn of the event loop. &lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are different event loops&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of queueMicrotask&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you use javascript libraries in typescript file&lt;/h3&gt; &lt;p&gt;It is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still want to use libraries or frameworks in our TypeScript files without getting compilation errors, the only solution is &lt;code&gt;declare&lt;/code&gt; keyword along with a variable declaration. For example, let&#39;s imagine you have a library called &lt;code&gt;customLibrary&lt;/code&gt; that doesn’t have a TypeScript declaration and have a namespace called &lt;code&gt;customLibrary&lt;/code&gt; in the global namespace. You can use this library in typescript code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;declare var customLibrary;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the runtime, typescript will provide the type to the &lt;code&gt;customLibrary&lt;/code&gt; variable as &lt;code&gt;any&lt;/code&gt; type. The another alternative without using declare keyword is below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var customLibrary: any;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between promises and observables&lt;/h3&gt; &lt;p&gt;Some of the major difference in a tabular form&lt;/p&gt; &lt;p&gt;| Promises | Observables | |---- | --------- | Emits only a single value at a time | Emits multiple values over a period of time(stream of values ranging from 0 to multiple) | | Eager in nature; they are going to be called immediately | Lazy in nature; they require subscription to be invoked | | Promise is always asynchronous even though it resolved immediately | Observable can be either synchronous or asynchronous| | Doesn&#39;t provide any operators | Provides operators such as map, forEach, filter, reduce, retry, and retryWhen etc | | Cannot be canceled | Canceled by using unsubscribe() method |&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is heap&lt;/h3&gt; &lt;p&gt;Heap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime. Whenever runtime comes across variables and function declarations in the code it stores them in the Heap.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/heap.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an event table&lt;/h3&gt; &lt;p&gt;Event Table is a data structure that stores and keeps track of all the events which will be executed asynchronously like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout function or invoke async operation, it is added to the Event Table. It doesn&#39;t not execute functions on it’s own. The main purpose of the event table is to keep track of events and send them to the Event Queue as shown in the below diagram.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/event-table.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a microTask queue&lt;/h3&gt; &lt;p&gt;Microtask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback queue. The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running for a long time then it leads to visual degradation.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between shim and polyfill&lt;/h3&gt; &lt;p&gt;A shim is a library that brings a new API to an older environment, using only the means of that environment. It isn&#39;t necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on older browsers (mainly pre IE9). Whereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. In a simple sentence, A polyfill is a shim for a browser API.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you detect primitive or non primitive value type&lt;/h3&gt; &lt;p&gt;In JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myPrimitive = 30;
var myNonPrimitive = {};
function isPrimitive(val) {
    return Object(val) !== val;
}

isPrimitive(myPrimitive);
isPrimitive(myNonPrimitive);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If the value is a non-primitive data type (an object), the Object constructor will give the same object.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is babel&lt;/h3&gt; &lt;p&gt;Babel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Some of the main features are listed below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Transform syntax&lt;/li&gt; 
   &lt;li&gt;Polyfill features that are missing in your target environment (using @babel/polyfill)&lt;/li&gt; 
   &lt;li&gt;Source code transformations (or codemods)&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;Is Node.js completely single threaded&lt;/h3&gt; &lt;p&gt;Node is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed and performance of a program.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common use cases of observables&lt;/h3&gt; &lt;p&gt;Some of the most common use cases of observables are web sockets with push notifications, user input changes, repeating intervals, etc&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is RxJS&lt;/h3&gt; &lt;p&gt;RxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and working with observables.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Function constructor and function declaration&lt;/h3&gt; &lt;p&gt;The functions which are created with &lt;code&gt;Function constructor&lt;/code&gt; do not create closures to their creation contexts but they are always created in the global scope. i.e, the function can access its own local variables and global scope variables only. Whereas function declarations can access outer function variables(closures) too.&lt;/p&gt; &lt;p&gt;Let&#39;s see this difference with an example,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Function Constructor:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 100;
function createFunction() {
    var a = 200;
    return new Function(&#39;return a;&#39;);
}
console.log(createFunction()()); // 100
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Function declaration:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 100;
function createFunction() {
    var a = 200;
    return function func() {
        return a;
    }
}
console.log(createFunction()()); // 200
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Short circuit condition&lt;/h3&gt; &lt;p&gt;Short circuit conditions are meant for condensed way of writing simple if statements. Let&#39;s demonstrate the scenario using an example. If you would like to login to a portal with an authentication condition, the expression would be as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (authenticate) {
   loginToPorta();
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since the javascript logical operators evaluated from left to right, the above expression can be simplified using &amp;amp;&amp;amp; logical operator&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;authenticate &amp;amp;&amp;amp; loginToPorta();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest way to resize an array&lt;/h3&gt; &lt;p&gt;The length property of an array is useful to resize or empty an array quickly. Let&#39;s apply length property on number array to resize the number of elements from 5 to 2,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var array = [1, 2, 3, 4, 5];
console.log(array.length); // 5

array.length = 2;
console.log(array.length); // 2
console.log(array); // [1,2]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and the array can be emptied too&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var array = [1, 2, 3, 4, 5];
array.length = 0;
console.log(array.length); // 0
console.log(array); // []
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an observable&lt;/h3&gt; &lt;p&gt;An Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time. The consumer can get the value by calling &lt;code&gt;subscribe()&lt;/code&gt; method. Let&#39;s look at a simple example of an Observable&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Observable } from &#39;rxjs&#39;;

const observable = new Observable(observer =&amp;gt; {
  setTimeout(() =&amp;gt; {
    observer.next(&#39;Message from a Observable!&#39;);
  }, 3000);
});

observable.subscribe(value =&amp;gt; console.log(value));
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/images/observables.png&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Observables are not part of the JavaScript language yet but they are being proposed to be added to the language&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between function and class declarations&lt;/h3&gt; &lt;p&gt;The main difference between function declarations and class declarations is &lt;code&gt;hoisting&lt;/code&gt;. The function declarations are hoisted but not class declarations.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = new User(); // ReferenceError

class User {}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Constructor Function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const user = new User(); // No error

 function User() {
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an async function&lt;/h3&gt; &lt;p&gt;An async function is a function declared with the &lt;code&gt;async&lt;/code&gt; keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or more &lt;code&gt;await&lt;/code&gt; expressions.&lt;/p&gt; &lt;p&gt;Let&#39;s take a below async function example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function logger() {

  let data = await fetch(&#39;http://someapi.com/users&#39;); // pause until fetch returns
  console.log(data)
}
logger();
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is basically syntax sugar over ES2015 promises and generators.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you prevent promises swallowing errors&lt;/h3&gt; &lt;p&gt;While using asynchronous code, JavaScript’s ES6 promises can make your life a lot easier without having callback pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing errors by default.&lt;/p&gt; &lt;p&gt;Let&#39;s say you expect to print an error to the console for all the below cases,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.resolve(&#39;promised value&#39;).then(function() {
      throw new Error(&#39;error&#39;);
});

Promise.reject(&#39;error value&#39;).catch(function() {
      throw new Error(&#39;error&#39;);
});

new Promise(function(resolve, reject) {
      throw new Error(&#39;error&#39;);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But there are many modern JavaScript environments that won&#39;t print any errors. You can fix this problem in different ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add catch block at the end of each chain:&lt;/strong&gt; You can add catch block to the end of each of your promise chains&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.resolve(&#39;promised value&#39;).then(function() {
    throw new Error(&#39;error&#39;);
}).catch(function(error) {
  console.error(error.stack);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But it is quite difficult to type for each promise chain and verbose too.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add done method:&lt;/strong&gt; You can replace first solution&#39;s then and catch blocks with done method&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.resolve(&#39;promised value&#39;).done(function() {
    throw new Error(&#39;error&#39;);
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s say you want to fetch data using HTTP and later perform processing on the resulting data asynchronously. You can write &lt;code&gt;done&lt;/code&gt; block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getDataFromHttp()
  .then(function(result) {
    return processDataAsync(result);
  })
  .done(function(processed) {
    displayData(processed);
  });
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In future, if the processing library API changed to synchronous then you can remove &lt;code&gt;done&lt;/code&gt; block as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; getDataFromHttp()
   .then(function(result) {
     return displayData(processDataAsync(result));
   })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and then you forgot to add &lt;code&gt;done&lt;/code&gt; block to &lt;code&gt;then&lt;/code&gt; block leads to silent errors.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extend ES6 Promises by Bluebird:&lt;/strong&gt; Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a “default” onRejection handler which will print all errors from rejected Promises to stderr. After installation, you can process unhandled rejections&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.onPossiblyUnhandledRejection(function(error){
    throw error;
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and discard a rejection, just handle it with an empty catch&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Promise.reject(&#39;error value&#39;).catch(function() {});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is deno&lt;/h3&gt; &lt;p&gt;Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make an object iterable in javascript&lt;/h3&gt; &lt;p&gt;By default, plain objects are not iterable. But you can make the object iterable by defining a &lt;code&gt;Symbol.iterator&lt;/code&gt; property on it.&lt;/p&gt; &lt;p&gt;Let&#39;s demonstrate this with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const collection = {
  one: 1,
  two: 2,
  three: 3,
  [Symbol.iterator]() {
    const values = Object.keys(this);
    let i = 0;
    return {
      next: () =&amp;gt; {
        return {
          value: this[values[i++]],
          done: i &amp;gt; values.length
        }
      }
    };
  }
};

const iterator = collection[Symbol.iterator]();

console.log(iterator.next());    // → {value: 1, done: false}
console.log(iterator.next());    // → {value: 2, done: false}
console.log(iterator.next());    // → {value: 3, done: false}
console.log(iterator.next());    // → {value: undefined, done: true}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above process can be simplified using a generator function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const collection = {
   one: 1,
   two: 2,
   three: 3,
   [Symbol.iterator]: function * () {
     for (let key in this) {
       yield this[key];
     }
   }
 };
 const iterator = collection[Symbol.iterator]();
 console.log(iterator.next());    // {value: 1, done: false}
 console.log(iterator.next());    // {value: 2, done: false}
 console.log(iterator.next());    // {value: 3, done: false}
 console.log(iterator.next());    // {value: undefined, done: true}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is a Proper Tail Call&lt;/h3&gt; &lt;p&gt;First, we should know about tail call before talking about &quot;Proper Tail Call&quot;. A tail call is a subroutine or function call performed as the final action of a calling function. Whereas &lt;strong&gt;Proper tail call(PTC)&lt;/strong&gt; is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.&lt;/p&gt; &lt;p&gt;For example, the below classic or head recursion of factorial function relies on stack for each step. Each step need to be processed upto &lt;code&gt;n * factorial(n - 1)&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function factorial(n) {
  if (n === 0) {
    return 1
  }
  return n * factorial(n - 1)
}
console.log(factorial(5)); //120
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion without relying on the stack.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function factorial(n, acc = 1) {
  if (n === 0) {
    return acc
  }
  return factorial(n - 1, n * acc)
}
console.log(factorial(5)); //120
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument without using stack memory on recursive calls.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you check an object is a promise or not&lt;/h3&gt; &lt;p&gt;If you don&#39;t know if a value is a promise or not, wrapping the value as &lt;code&gt;Promise.resolve(value)&lt;/code&gt; which returns a promise&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;   function isPromise(object){
      if(Promise &amp;amp;&amp;amp; Promise.resolve){
      return Promise.resolve(object) == object;
      }else{
      throw &quot;Promise not supported in your environment&quot;
      }
   }

   var i = 1;
   var promise = new Promise(function(resolve,reject){
      resolve()
   });

   console.log(isPromise(i)); // false
   console.log(isPromise(p)); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Another way is to check for &lt;code&gt;.then()&lt;/code&gt; handler type&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isPromise(value) {
   return Boolean(value &amp;amp;&amp;amp; typeof value.then === &#39;function&#39;);
}
var i = 1;
var promise = new Promise(function(resolve,reject){
   resolve()
});

console.log(isPromise(i)) // false
console.log(isPromise(promise)); // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to detect if a function is called as constructor&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;new.target&lt;/code&gt; pseudo-property to detect whether a function was called as a constructor(using the new operator) or as a regular function call.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;If a constructor or function invoked using the new operator, new.target returns a reference to the constructor or function.&lt;/li&gt; 
   &lt;li&gt;For function calls, new.target is undefined.&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Myfunc() {
   if (new.target) {
      console.log(&#39;called with new&#39;);
   } else {
      console.log(&#39;not called with new&#39;);
   }
}

new Myfunc(); // called with new
Myfunc(); // not called with new
Myfunc.call({}); not called with new
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between arguments object and rest parameter&lt;/h3&gt; &lt;p&gt;There are three main differences between arguments object and rest parameters&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The arguments object is an array-like but not an array. Whereas the rest parameters are array instances.&lt;/li&gt; 
   &lt;li&gt;The arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be used in rest parameters.&lt;/li&gt; 
   &lt;li&gt;The rest parameters are only the ones that haven’t been given a separate name, while the arguments object contains all arguments passed to the function&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between spread operator and rest parameter&lt;/h3&gt; &lt;p&gt;Rest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread operator.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different kinds of generators&lt;/h3&gt; &lt;p&gt;There are five kinds of generators,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator function declaration:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; function* myGenFunc() {
      yield 1;
      yield 2;
      yield 3;
 }
 const genObj = myGenFunc();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator function expressions:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const myGenFunc = function* () {
       yield 1;
       yield 2;
       yield 3;
};
const genObj = myGenFunc();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator method definitions in object literals:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const myObj = {
     * myGeneratorMethod() {
        yield 1;
        yield 2;
        yield 3;
     }
 };
 const genObj = myObj.myGeneratorMethod();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator method definitions in class:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  class MyClass {
     * myGeneratorMethod() {
        yield 1;
        yield 2;
        yield 3;
     }
  }
  const myObject = new MyClass();
  const genObj = myObject.myGeneratorMethod();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generator as a computed property:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const SomeObj = {
  *[Symbol.iterator] () {
    yield 1;
    yield 2;
    yield 3;
  }
}

console.log(Array.from(SomeObj)); // [ 1, 2, 3 ]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the built-in iterables&lt;/h3&gt; &lt;p&gt;Below are the list of built-in iterables in javascript,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Arrays and TypedArrays&lt;/li&gt; 
   &lt;li&gt;Strings: Iterate over each character or Unicode code-points&lt;/li&gt; 
   &lt;li&gt;Maps: iterate over its key-value pairs&lt;/li&gt; 
   &lt;li&gt;Sets: iterates over their elements&lt;/li&gt; 
   &lt;li&gt;arguments: An array-like special variable in functions&lt;/li&gt; 
   &lt;li&gt;DOM collection such as NodeList&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between for...of and for...in statements&lt;/h3&gt; &lt;p&gt;Both for...in and for...of statements iterate over js data structures. The only difference is over what they iterate:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;for..in iterates over all enumerable property keys of an object&lt;/li&gt; 
   &lt;li&gt;for..of iterates over the values of an iterable object.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let&#39;s explain this difference with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];

arr.newProp = &#39;newVlue&#39;;

// key are the property keys
for (let key in arr) {
  console.log(key);
}

// value are the property values
for (let value of arr) {
  console.log(value);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since for..in loop iterates over the keys of the object, the first loop logs 0, 1, 2 and newProp while iterating over the array object. The for..of loop iterates over the values of a arr data structure and logs a, b, c in the console.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you define instance and non-instance properties&lt;/h3&gt; &lt;p&gt;The Instance properties must be defined inside of class methods. For example, name and age properties defined insider constructor as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let&#39;s assign the age value for Person class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Person.staticAge = 30;
Person.prototype.prototypeAge = 40;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between isNaN and Number.isNaN?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;isNaN&lt;/strong&gt;: The global function &lt;code&gt;isNaN&lt;/code&gt; converts the argument to a Number and returns true if the resulting value is NaN.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Number.isNaN&lt;/strong&gt;: This method does not convert the argument. But it returns true when the type is a Number and value is NaN.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Let&#39;s see the difference with an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;isNaN(‘hello’);   // true
Number.isNaN(&#39;hello&#39;); // false
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to invoke an IIFE without any extra brackets?&lt;/h3&gt; &lt;p&gt;Immediately Invoked Function Expressions(IIFE) requires a pair of parenthesis to wrap the function which contains set of statements.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;(function(dt) { 
   console.log(dt.toLocaleTimeString()); 
 })(new Date()); 
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since both IIFE and void operator discard the result of an expression, you can avoid the extra brackets using &lt;code&gt;void operator&lt;/code&gt; for IIFE as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt; void function(dt) { 
   console.log(dt.toLocaleTimeString()); 
 }(new Date()); 
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;**[⬆ Back to Top](#table-of-contents)**
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;422&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is that possible to use expressions in switch cases?&lt;/h3&gt; You might have seen expressions used in switch condition but it is also possible to use for switch cases by assigning true value for the switch condition. Let&#39;s see the weather condition based on temparature as an example, &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const weather = function getWeather(temp) {
   switch(true) {
       case temp &amp;lt; 0: return &#39;freezing&#39;;
       case temp &amp;lt; 10: return &#39;cold&#39;;
       case temp &amp;lt; 24: return &#39;cool&#39;;
       default: return &#39;unknown&#39;;
   }
   }(10);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;**[⬆ Back to Top](#table-of-contents)**
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;423&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the easiest way to ignore promise errors?&lt;/h3&gt; &lt;p&gt;The easiest and safest way to ignore promise errors is void that error. This approach is ESLint friendly too.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;await promise.catch(e =&amp;gt; void e);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do style the console output using CSS?&lt;/h3&gt; &lt;p&gt;You can add CSS styling to the console output using the CSS format content specifier %c. The console string message can be appended after the specifier and CSS style in another argument. Let&#39;s print the red the color text using console.log and CSS specifier as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&quot;%cThis is a red text&quot;, &quot;color:red&quot;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is also possible to add more styles for the content. For example, the font-size can be modified for the above text&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&quot;%cThis is a red text with bigger font&quot;, &quot;color:red; font-size:20px&quot;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Coding Exercise&lt;/h3&gt; 
&lt;h4&gt;1. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var car = new Vehicle(&quot;Honda&quot;, &quot;white&quot;, &quot;2010&quot;, &quot;UK&quot;);
console.log(car);

function Vehicle(model, color, year, country) {
    this.model = model;
    this.color = color;
    this.year = year;
    this.country = country;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Undefined&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError&lt;/li&gt; 
 &lt;li&gt;3: null&lt;/li&gt; 
 &lt;li&gt;4: {model: &quot;Honda&quot;, color: &quot;white&quot;, year: &quot;2010&quot;, country: &quot;UK&quot;}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The function declarations are hoisted similar to any variables. So the placement for &lt;code&gt;Vehicle&lt;/code&gt; function declaration doesn&#39;t make any difference.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;2. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
    let x = y = 0;
    x++;
    y++;
    return x;
}

console.log(foo(), typeof x, typeof y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, undefined and undefined&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError: X is not defined&lt;/li&gt; 
 &lt;li&gt;3: 1, undefined and number&lt;/li&gt; 
 &lt;li&gt;4: 1, number and number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;Of course the return value of &lt;code&gt;foo()&lt;/code&gt; is 1 due to the increment operator. But the statement &lt;code&gt;let x = y = 0&lt;/code&gt; declares a local variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; let x;
 window.y = 0;
 x = window.y;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the global variable &lt;code&gt;y&lt;/code&gt; is available outside the function, the value is 0 and type is number.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;3. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function main(){
   console.log(&#39;A&#39;);
   setTimeout(
      function print(){ console.log(&#39;B&#39;); }
   ,0);
   console.log(&#39;C&#39;);
}
main();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: A, B and C&lt;/li&gt; 
 &lt;li&gt;2: B, A and C&lt;/li&gt; 
 &lt;li&gt;3: A and C&lt;/li&gt; 
 &lt;li&gt;4: A, C and B&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The statements order is based on the event loop mechanism. The order of statements follows the below order,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;At first, the main function is pushed to the stack.&lt;/li&gt; 
 &lt;li&gt;Then the browser pushes the fist statement of the main function( i.e, A&#39;s console.log) to the stack, executing and popping out immediately.&lt;/li&gt; 
 &lt;li&gt;But &lt;code&gt;setTimeout&lt;/code&gt; statement moved to Browser API to apply the delay for callback.&lt;/li&gt; 
 &lt;li&gt;In the meantime, C&#39;s console.log added to stack, executed and popped out.&lt;/li&gt; 
 &lt;li&gt;The callback of &lt;code&gt;setTimeout&lt;/code&gt; moved from Browser API to message queue.&lt;/li&gt; 
 &lt;li&gt;The &lt;code&gt;main&lt;/code&gt; function popped out from stack because there are no statements to execute&lt;/li&gt; 
 &lt;li&gt;The callback moved from message queue to the stack since the stack is empty.&lt;/li&gt; 
 &lt;li&gt;The console.log for B is added to the stack and display on the console.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;4. What is the output of below equality check&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(0.1 + 0.2 === 0.3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: false&lt;/li&gt; 
 &lt;li&gt;2: true&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;This is due to the float point math problem. Since the floating point numbers are encoded in binary format, the addition operations on them lead to rounding errors. Hence, the comparison of floating points doesn&#39;t give expected results. You can find more details about the explanation here &lt;a href=&quot;https://0.30000000000000004.com/&quot;&gt;0.30000000000000004.com/&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;5. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var y = 1;
  if (function f(){}) {
    y += typeof f;
  }
  console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1function&lt;/li&gt; 
 &lt;li&gt;2: 1object&lt;/li&gt; 
 &lt;li&gt;3: ReferenceError&lt;/li&gt; 
 &lt;li&gt;4: 1undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The main points in the above code snippets are,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;You can see function expression instead function declaration inside if statement. So it always returns true.&lt;/li&gt; 
 &lt;li&gt;Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;In other words, it is same as&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var y = 1;
  if (&#39;foo&#39;) {
    y += typeof f;
  }
  console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It returns 1object for MS Edge browser&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;6. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
  return
  {
    message: &quot;Hello World&quot;
  };
}
console.log(foo());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Hello World&lt;/li&gt; 
 &lt;li&gt;2: Object {message: &quot;Hello World&quot;}&lt;/li&gt; 
 &lt;li&gt;3: Undefined&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;This is a semicolon issue. Normally semicolons are optional in JavaScript. So if there are any statements(in this case, return) missing semicolon, it is automatically inserted immediately. Hence, the function returned as undefined.&lt;/p&gt; 
&lt;p&gt;Whereas if the opening curly brace is along with the return keyword then the function is going to be returned as expected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function foo() {
  return {
    message: &quot;Hello World&quot;
  };
}
console.log(foo()); // {message: &quot;Hello World&quot;}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;7. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myChars = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]
delete myChars[0];
console.log(myChars);
console.log(myChars[0]);
console.log(myChars.length);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [empty, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], empty, 3&lt;/li&gt; 
 &lt;li&gt;2: [null, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], empty, 3&lt;/li&gt; 
 &lt;li&gt;3: [empty, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], undefined, 4&lt;/li&gt; 
 &lt;li&gt;4: [null, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;], undefined, 4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;The &lt;code&gt;delete&lt;/code&gt; operator will delete the object property but it will not reindex the array or change its length. So the number or elements or length of the array won&#39;t be changed. If you try to print myChars then you can observe that it doesn&#39;t set an undefined value, rather the property is removed from the array. The newer versions of Chrome use &lt;code&gt;empty&lt;/code&gt; instead of &lt;code&gt;undefined&lt;/code&gt; to make the difference a bit clearer.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;8. What is the output of below code in latest Chrome&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var array1 = new Array(3);
console.log(array1);

var array2 = [];
array2[2] = 100;
console.log(array2);

var array3 = [,,,];
console.log(array3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [undefined × 3], [undefined × 2, 100], [undefined × 3]&lt;/li&gt; 
 &lt;li&gt;2: [empty × 3], [empty × 2, 100], [empty × 3]&lt;/li&gt; 
 &lt;li&gt;3: [null × 3], [null × 2, 100], [null × 3]&lt;/li&gt; 
 &lt;li&gt;4: [], [100], []&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;The latest chrome versions display &lt;code&gt;sparse array&lt;/code&gt;(they are filled with holes) using this empty x n notation. Whereas the older versions have undefined x n notation. &lt;strong&gt;Note:&lt;/strong&gt; The latest version of FF displays &lt;code&gt;n empty slots&lt;/code&gt; notation.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;9. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const obj = {
  prop1: function() { return 0 },
  prop2() { return 1 },
  [&#39;prop&#39; + 3]() { return 2 }
}

console.log(obj.prop1());
console.log(obj.prop2());
console.log(obj.prop3());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 0, 1, 2&lt;/li&gt; 
 &lt;li&gt;2: 0, { return 1 }, 2&lt;/li&gt; 
 &lt;li&gt;3: 0, { return 1 }, { return 2 }&lt;/li&gt; 
 &lt;li&gt;4: 0, 1, undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;ES6 provides method definitions and property shorthands for objects. So both prop2 and prop3 are treated as regular function values.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;10. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(1 &amp;lt; 2 &amp;lt; 3);
console.log(3 &amp;gt; 2 &amp;gt; 1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: true, true&lt;/li&gt; 
 &lt;li&gt;2: true, false&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError, SyntaxError,&lt;/li&gt; 
 &lt;li&gt;4: false, false&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;The important point is that if the statement contains the same operators(e.g, &amp;lt; or &amp;gt;) then it can be evaluated from left to right. The first statement follows the below order,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;console.log(1 &amp;lt; 2 &amp;lt; 3);&lt;/li&gt; 
 &lt;li&gt;console.log(true &amp;lt; 3);&lt;/li&gt; 
 &lt;li&gt;console.log(1 &amp;lt; 3); // True converted as &lt;code&gt;1&lt;/code&gt; during comparison&lt;/li&gt; 
 &lt;li&gt;True&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Whereas the second statement follows the below order,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;console.log(3 &amp;gt; 2 &amp;gt; 1);&lt;/li&gt; 
 &lt;li&gt;console.log(true &amp;gt; 1);&lt;/li&gt; 
 &lt;li&gt;console.log(1 &amp;gt; 1); // False converted as &lt;code&gt;0&lt;/code&gt; during comparison&lt;/li&gt; 
 &lt;li&gt;False&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;11. What is the output of below code in non-strict mode&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function printNumbers(first, second, first) {
  console.log(first, second, first);
}
printNumbers(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 2, 3&lt;/li&gt; 
 &lt;li&gt;2: 3, 2, 3&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError: Duplicate parameter name not allowed in this context&lt;/li&gt; 
 &lt;li&gt;4: 1, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has duplicate parameters on 1st and 3rd parameters. The value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd argument overrides the first parameter.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In strict mode, duplicate parameters will throw a Syntax Error.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;12. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const printNumbersArrow = (first, second, first) =&amp;gt; {
  console.log(first, second, first);
}
printNumbersArrow(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, 2, 3&lt;/li&gt; 
 &lt;li&gt;2: 3, 2, 3&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError: Duplicate parameter name not allowed in this context&lt;/li&gt; 
 &lt;li&gt;4: 1, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;Unlike regular functions, the arrow functions doesn&#39;t not allow duplicate parameters in either strict or non-strict mode. So you can see &lt;code&gt;SyntaxError&lt;/code&gt; in the console.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;13. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrowFunc = () =&amp;gt; arguments.length;
console.log(arrowFunc(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ReferenceError: arguments is not defined&lt;/li&gt; 
 &lt;li&gt;2: 3&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: null&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Arrow functions do not have an &lt;code&gt;arguments, super, this, or new.target&lt;/code&gt; bindings. So any reference to &lt;code&gt;arguments&lt;/code&gt; variable tries to resolve to a binding in a lexically enclosing environment. In this case, the arguments variable is not defined outside of the arrow function. Hence, you will receive a reference error.&lt;/p&gt; 
&lt;p&gt;Where as the normal function provides the number of arguments passed to the function&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const func = function () {
                    return arguments.length;
                    }
console.log(func(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But If you still want to use an arrow function then rest operator on arguments provides the expected arguments&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrowFunc = (...args) =&amp;gt; args.length;
console.log(arrowFunc(1, 2, 3));
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;14. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( String.prototype.trimLeft.name === &#39;trimLeft&#39; );
console.log( String.prototype.trimLeft.name === &#39;trimStart&#39; );
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, False&lt;/li&gt; 
 &lt;li&gt;2: False, True&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;In order to be consistent with functions like &lt;code&gt;String.prototype.padStart&lt;/code&gt;, the standard method name for trimming the whitespaces is considered as &lt;code&gt;trimStart&lt;/code&gt;. Due to web web compatibility reasons, the old method name &#39;trimLeft&#39; still acts as an alias for &#39;trimStart&#39;. Hence, the prototype for &#39;trimLeft&#39; is always &#39;trimStart&#39;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;15. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(Math.max());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: undefined&lt;/li&gt; 
 &lt;li&gt;2: Infinity&lt;/li&gt; 
 &lt;li&gt;3: 0&lt;/li&gt; 
 &lt;li&gt;4: -Infinity&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;-Infinity is the initial comparant because almost every other value is bigger. So when no arguments are provided, -Infinity is going to be returned. &lt;strong&gt;Note:&lt;/strong&gt; Zero number of arguments is a valid case.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;16. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(10 == [10]);
console.log(10 == [[[[[[[10]]]]]]]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, True&lt;/li&gt; 
 &lt;li&gt;2: True, False&lt;/li&gt; 
 &lt;li&gt;3: False, False&lt;/li&gt; 
 &lt;li&gt;4: False, True&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as below&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;10 === Number([10].valueOf().toString()) // 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So it doesn&#39;t matter about number brackets([]) around the number, it is always converted to a number in the expression.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;17. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(10 + &#39;10&#39;);
console.log(10 - &#39;10&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 20, 0&lt;/li&gt; 
 &lt;li&gt;2: 1010, 0&lt;/li&gt; 
 &lt;li&gt;3: 1010, 10-10&lt;/li&gt; 
 &lt;li&gt;4: NaN, NaN&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both operands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;18. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log([0] == false);
if([0]) {
console.log(&quot;I&#39;m True&quot;);
} else {
console.log(&quot;I&#39;m False&quot;);
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True, I&#39;m True&lt;/li&gt; 
 &lt;li&gt;2: True, I&#39;m False&lt;/li&gt; 
 &lt;li&gt;3: False, I&#39;m True&lt;/li&gt; 
 &lt;li&gt;4: False, I&#39;m False&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;In comparison operators, the expression &lt;code&gt;[0]&lt;/code&gt; converted to Number([0].valueOf().toString()) which is resolved to false. Whereas &lt;code&gt;[0]&lt;/code&gt; just becomes a truthy value without any conversion because there is no comparison operator.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;19. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log([1, 2] + [3, 4]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [1,2,3,4]&lt;/li&gt; 
 &lt;li&gt;2: [1,2][3,4]&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: 1,23,4&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;20. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const numbers = new Set([1, 1, 2, 3, 4]);
console.log(numbers);

const browser = new Set(&#39;Firefox);
console.log(browser);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: {1, 2, 3, 4}, {&quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;f&quot;, &quot;o&quot;, &quot;x&quot;}&lt;/li&gt; 
 &lt;li&gt;2: {1, 2, 3, 4}, {&quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;o&quot;, &quot;x&quot;}&lt;/li&gt; 
 &lt;li&gt;3: [1, 2, 3, 4], [&quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;o&quot;, &quot;x&quot;]&lt;/li&gt; 
 &lt;li&gt;4: {1, 1, 2, 3, 4}, {&quot;F&quot;, &quot;i&quot;, &quot;r&quot;, &quot;e&quot;, &quot;f&quot;, &quot;o&quot;, &quot;x&quot;}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Since &lt;code&gt;Set&lt;/code&gt; object is a collection of unique values, it won&#39;t allow duplicate values in the collection. At the same time, it is case sensitive data structure.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;21. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(NaN === NaN);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: True&lt;/li&gt; 
 &lt;li&gt;2: False&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;JavaScript follows IEEE 754 spec standards. As per this spec, NaNs are never equal for floating-point numbers.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;22. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let numbers = [1, 2, 3, 4, NaN];
console.log(numbers.indexOf(NaN));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 4&lt;/li&gt; 
 &lt;li&gt;2: NaN&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: -1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The &lt;code&gt;indexOf&lt;/code&gt; uses strict equality operator(===) internally and &lt;code&gt;NaN === NaN&lt;/code&gt; evaluates to false. Since indexOf won&#39;t be able to find NaN inside an array, it returns -1 always. But you can use &lt;code&gt;Array.prototype.findIndex&lt;/code&gt; method to find out the index of NaN in an array or You can use &lt;code&gt;Array.prototype.includes&lt;/code&gt; to check if NaN is present in an array or not.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let numbers = [1, 2, 3, 4, NaN];
console.log(numbers.findIndex(Number.isNaN)); // 4

console.log(numbers.includes(Number.isNaN)); // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;23. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let [a, ...b,] = [1, 2, 3, 4, 5];
console.log(a, b);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, [2, 3, 4, 5]&lt;/li&gt; 
 &lt;li&gt;2: 1, {2, 3, 4, 5}&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: 1, [2, 3, 4]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;When using rest parameters, trailing commas are not allowed and will throw a SyntaxError. If you remove the trailing comma then it displays 1st answer&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let [a, ...b,] = [1, 2, 3, 4, 5];
console.log(a, b); // 1, [2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;25. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function func() {
   return 10;
}
console.log(func());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Promise {
  &lt;!-- raw HTML omitted --&gt;: 10}&lt;/li&gt; 
 &lt;li&gt;2: 10&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Promise {
  &lt;!-- raw HTML omitted --&gt;: 10}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Async functions always return a promise. But even if the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise. The above async function is equivalent to below expression,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function func() {
   return Promise.resolve(10)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;26. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function func() {
   await 10;
}
console.log(func());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Promise {
  &lt;!-- raw HTML omitted --&gt;: 10}&lt;/li&gt; 
 &lt;li&gt;2: 10&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Promise {
  &lt;!-- raw HTML omitted --&gt;: undefined}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The await expression returns value 10 with promise resolution and the code after each await expression can be treated as existing in a &lt;code&gt;.then&lt;/code&gt; callback. In this case, there is no return expression at the end of the function. Hence, the default return value of &lt;code&gt;undefined&lt;/code&gt; is returned as the resolution of the promise. The above async function is equivalent to below expression,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function func() {
   return Promise.resolve(10).then(() =&amp;gt; undefined)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;27. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function delay() {
  return new Promise(resolve =&amp;gt; setTimeout(resolve, 2000));
}

async function delayedLog(item) {
  await delay();
  console.log(item);
}

async function processArray(array) {
  array.forEach(item =&amp;gt; {
    await delayedLog(item);
  })
}

processArray([1, 2, 3, 4]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: 1, 2, 3, 4&lt;/li&gt; 
 &lt;li&gt;3: 4, 4, 4, 4&lt;/li&gt; 
 &lt;li&gt;4: 4, 3, 2, 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Even though “processArray” is an async function, the anonymous function that we use for &lt;code&gt;forEach&lt;/code&gt; is synchronous. If you use await inside a synchronous function then it throws a syntax error.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;28. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function delay() {
  return new Promise(resolve =&amp;gt; setTimeout(resolve, 2000));
}

async function delayedLog(item) {
  await delay();
  console.log(item);
}

async function process(array) {
  array.forEach(async (item) =&amp;gt; {
    await delayedLog(item);
  });
  console.log(&#39;Process completed!&#39;);
}
process([1, 2, 3, 5]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1 2 3 5 and Process completed!&lt;/li&gt; 
 &lt;li&gt;2: 5 5 5 5 and Process completed!&lt;/li&gt; 
 &lt;li&gt;3: Process completed! and 5 5 5 5&lt;/li&gt; 
 &lt;li&gt;4: Process completed! and 1 2 3 5&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The forEach method will not wait until all items are finished but it just runs the tasks and goes next. Hence, the last statement is displayed first followed by a sequence of promise resolutions.&lt;/p&gt; 
&lt;p&gt;But you control the array sequence using for..of loop,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function processArray(array) {
  for (const item of array) {
    await delayedLog(item);
  }
  console.log(&#39;Process completed!&#39;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;29. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var set = new Set();
set.add(&quot;+0&quot;).add(&quot;-0&quot;).add(NaN).add(undefined).add(NaN);;
console.log(set);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Set(4) {&quot;+0&quot;, &quot;-0&quot;, NaN, undefined}&lt;/li&gt; 
 &lt;li&gt;2: Set(3) {&quot;+0&quot;, NaN, undefined}&lt;/li&gt; 
 &lt;li&gt;3: Set(5) {&quot;+0&quot;, &quot;-0&quot;, NaN, undefined, NaN}&lt;/li&gt; 
 &lt;li&gt;4: Set(4) {&quot;+0&quot;, NaN, undefined, NaN}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;Set has few exceptions from equality check,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;All NaN values are equal&lt;/li&gt; 
 &lt;li&gt;Both +0 and -0 considered as different values&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;30. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sym1 = Symbol(&#39;one&#39;);
const sym2 = Symbol(&#39;one&#39;);

const sym3 = Symbol.for(&#39;two&#39;);
const sym4 = Symbol.for(&#39;two&#39;);

cnsooe.log(sym1 === sym2, sym3 === sym4);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: true, true&lt;/li&gt; 
 &lt;li&gt;2: true, false&lt;/li&gt; 
 &lt;li&gt;3: false, true&lt;/li&gt; 
 &lt;li&gt;4: false, false&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;Symbol follows below conventions,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Every symbol value returned from Symbol() is unique irrespective of the optional string.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Symbol.for()&lt;/code&gt; function creates a symbol in a global symbol registry list. But it doesn&#39;t necessarily create a new symbol on every call, it checks first if a symbol with the given key is already present in the registry and returns the symbol if it is found. Otherwise a new symbol created in the registry.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The symbol description is just useful for debugging purposes.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;31. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sym1 = new Symbol(&#39;one&#39;);
console.log(sym1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: one&lt;/li&gt; 
 &lt;li&gt;3: Symbol(&#39;one&#39;)&lt;/li&gt; 
 &lt;li&gt;4: Symbol&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;Symbol&lt;/code&gt; is a just a standard function and not an object constructor(unlike other primitives new Boolean, new String and new Number). So if you try to call it with the new operator will result in a TypeError&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;32. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let myNumber = 100;
let myString = &#39;100&#39;;

if (!typeof myNumber === &quot;string&quot;) {
   console.log(&quot;It is not a string!&quot;);
} else {
    console.log(&quot;It is a string!&quot;);
}

if (!typeof myString === &quot;number&quot;){
   console.log(&quot;It is not a number!&quot;)
} else {
   console.log(&quot;It is a number!&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: It is not a string!, It is not a number!&lt;/li&gt; 
 &lt;li&gt;3: It is not a string!, It is a number!&lt;/li&gt; 
 &lt;li&gt;4: It is a string!, It is a number!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The return value of &lt;code&gt;typeof myNumber (OR) typeof myString&lt;/code&gt; is always the truthy value (either &quot;number&quot; or &quot;string&quot;). Since ! operator converts the value to a boolean value, the value of both &lt;code&gt;!typeof myNumber or !typeof myString&lt;/code&gt; is always false. Hence the if condition fails and control goes to else block.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;33. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(JSON.stringify({ myArray: [&#39;one&#39;, undefined, function(){}, Symbol(&#39;&#39;)] }));
console.log(JSON.stringify({ [Symbol.for(&#39;one&#39;)]: &#39;one&#39; }, [Symbol.for(&#39;one&#39;)]));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: {&quot;myArray&quot;:[&#39;one&#39;, undefined, {}, Symbol]}, {}&lt;/li&gt; 
 &lt;li&gt;2: {&quot;myArray&quot;:[&#39;one&#39;, null,null,null]}, {}&lt;/li&gt; 
 &lt;li&gt;3: {&quot;myArray&quot;:[&#39;one&#39;, null,null,null]}, &quot;{ [Symbol.for(&#39;one&#39;)]: &#39;one&#39; }, [Symbol.for(&#39;one&#39;)]&quot;&lt;/li&gt; 
 &lt;li&gt;4: {&quot;myArray&quot;:[&#39;one&#39;, undefined, function(){}, Symbol(&#39;&#39;)]}, {}&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;The symbols has below constraints,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The undefined, Functions, and Symbols are not valid JSON values. So those values are either omitted (in an object) or changed to null (in an array). Hence, it returns null values for the value array.&lt;/li&gt; 
 &lt;li&gt;All Symbol-keyed properties will be completely ignored. Hence it returns an empty object({}).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;34. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class A {
  constructor() {
    console.log(new.target.name)
  }
}

class B extends A { constructor() { super() } }

new A();
new B();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: A, A&lt;/li&gt; 
 &lt;li&gt;2: A, B&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Using constructors, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor (points to the class definition of class which is initialized) that was directly invoked by new. This also applies to the case if the constructor is in a parent class and was delegated from a child constructor.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;35. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const [x, ...y,] = [1, 2, 3, 4];
console.log(x, y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1, [2, 3, 4]&lt;/li&gt; 
 &lt;li&gt;2: 1, [2, 3]&lt;/li&gt; 
 &lt;li&gt;3: 1, [2]&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;It throws a syntax error because the rest element should not have a trailing comma. You should always consider using a rest operator as the last element.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;36. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const {a: x = 10, b: y = 20} = {a: 30};

console.log(x);
console.log(y);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 30, 20&lt;/li&gt; 
 &lt;li&gt;2: 10, 20&lt;/li&gt; 
 &lt;li&gt;3: 10, undefined&lt;/li&gt; 
 &lt;li&gt;4: 30, undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;The object property follows below rules,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The object properties can be retrieved and assigned to a variable with a different name&lt;/li&gt; 
 &lt;li&gt;The property assigned a default value when the retrieved value is &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;37. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function area({length = 10, width = 20}) {
  console.log(length*width);
}

area();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 200&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: 0&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;If you leave out the right-hand side assignment for the destructuring object, the function will look for at least one argument to be supplied when invoked. Otherwise you will receive an error &lt;code&gt;Error: Cannot read property &#39;length&#39; of undefined&lt;/code&gt; as mentioned above.&lt;/p&gt; 
&lt;p&gt;You can avoid the error with either of the below changes,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Pass at least an empty object:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function area({length = 10, width = 20}) {
  console.log(length*width);
}

area({});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;&lt;strong&gt;Assign default empty object:&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function area({length = 10, width = 20} = {}) {
  console.log(length*width);
}

area();
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;38. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const props = [
  { id: 1, name: &#39;John&#39;},
  { id: 2, name: &#39;Jack&#39;},
  { id: 3, name: &#39;Tom&#39;}
];

const [,, { name }] = props;
console.log(name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: Tom&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: undefined&lt;/li&gt; 
 &lt;li&gt;4: John&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;It is possible to combine Array and Object destructuring. In this case, the third element in the array props accessed first followed by name property in the object.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;39. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function checkType(num = 1) {
  console.log(typeof num);
}

checkType();
checkType(undefined);
checkType(&#39;&#39;);
checkType(null);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: number, undefined, string, object&lt;/li&gt; 
 &lt;li&gt;2: undefined, undefined, string, object&lt;/li&gt; 
 &lt;li&gt;3: number, number, string, object&lt;/li&gt; 
 &lt;li&gt;4: number, number, number, number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;If the function argument is set implicitly(not passing argument) or explicitly to undefined, the value of the argument is the default parameter. Whereas for other falsy values(&#39;&#39; or null), the value of the argument is passed as a parameter.&lt;/p&gt; 
&lt;p&gt;Hence, the result of function calls categorized as below,&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first two function calls logs number type since the type of default value is number&lt;/li&gt; 
 &lt;li&gt;The type of &#39;&#39; and null values are string and object type respectively.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;40. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function add(item, items = []) {
  items.push(item);
  return items;
}

console.log(add(&#39;Orange&#39;));
console.log(add(&#39;Apple&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [&#39;Orange&#39;], [&#39;Orange&#39;, &#39;Apple&#39;]&lt;/li&gt; 
 &lt;li&gt;2: [&#39;Orange&#39;], [&#39;Apple&#39;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Since the default argument is evaluated at call time, a new object is created each time the function is called. So in this case, the new array is created and an element pushed to the default empty array.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;41. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function greet(greeting, name, message = greeting + &#39; &#39; + name) {
  console.log([greeting, name, message]);
}

greet(&#39;Hello&#39;, &#39;John&#39;);
greet(&#39;Hello&#39;, &#39;John&#39;, &#39;Good morning!&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: [&#39;Hello&#39;, &#39;John&#39;, &#39;Hello John&#39;], [&#39;Hello&#39;, &#39;John&#39;, &#39;Good morning!&#39;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Since parameters defined earlier are available to later default parameters, this code snippet doesn&#39;t throw any error.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;42. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function outer(f = inner()) {
  function inner() { return &#39;Inner&#39; }
}
outer();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: ReferenceError&lt;/li&gt; 
 &lt;li&gt;2: Inner&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;The functions and variables declared in the function body cannot be referred from default value parameter initializers. If you still try to access, it throws a run-time ReferenceError(i.e, &lt;code&gt;inner&lt;/code&gt; is not defined).&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;43. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myFun(x, y, ...manyMoreArgs) {
  console.log(manyMoreArgs)
}

myFun(1, 2, 3, 4, 5);
myFun(1, 2);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [3, 4, 5], undefined&lt;/li&gt; 
 &lt;li&gt;2: SyntaxError&lt;/li&gt; 
 &lt;li&gt;3: [3, 4, 5], []&lt;/li&gt; 
 &lt;li&gt;4: [3, 4, 5], [undefined]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;The rest parameter is used to hold the remaining parameters of a function and it becomes an empty array if the argument is not provided.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;44. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const obj = {&#39;key&#39;: &#39;value&#39;};
const array = [...obj];
console.log(array);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: [&#39;key&#39;, &#39;value&#39;]&lt;/li&gt; 
 &lt;li&gt;2: TypeError&lt;/li&gt; 
 &lt;li&gt;3: []&lt;/li&gt; 
 &lt;li&gt;4: [&#39;key&#39;]&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Spread syntax can be applied only to iterable objects. By default, Objects are not iterable, but they become iterable when used in an Array, or with iterating functions such as &lt;code&gt;map(), reduce(), and assign()&lt;/code&gt;. If you still try to do it, it still throws &lt;code&gt;TypeError: obj is not iterable&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;45. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* myGenFunc() {
    yield 1;
    yield 2;
    yield 3;
}
var myGenObj = new myGenFunc;
console.log(myGenObj.next().value);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1&lt;/li&gt; 
 &lt;li&gt;2: undefined&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: TypeError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;Generators are not constructible type. But if you still proceed to do, there will be an error saying &quot;TypeError: myGenFunc is not a constructor&quot;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;46. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
function* yieldAndReturn() {
  yield 1;
  return 2;
  yield 3;
}

var myGenObj = yieldAndReturn()
console.log(myGenObj.next());
console.log(myGenObj.next());
console.log(myGenObj.next());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }&lt;/li&gt; 
 &lt;li&gt;2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }&lt;/li&gt; 
 &lt;li&gt;3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }&lt;/li&gt; 
 &lt;li&gt;4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;A return statement in a generator function will make the generator finish. If a value is returned, it will be set as the value property of the object and done property to true. When a generator is finished, subsequent next() calls return an object of this form: &lt;code&gt;{value: undefined, done: true}&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;47. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const myGenerator = (function *(){
  yield 1;
  yield 2;
  yield 3;
})();
for (const value of myGenerator) {
  console.log(value);
  break;
}

for (const value of myGenerator) {
  console.log(value);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 1,2,3 and 1,2,3&lt;/li&gt; 
 &lt;li&gt;2: 1,2,3 and 4,5,6&lt;/li&gt; 
 &lt;li&gt;3: 1 and 1&lt;/li&gt; 
 &lt;li&gt;4: 1&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;The generator should not be re-used once the iterator is closed. i.e, Upon exiting a loop(on completion or using break &amp;amp; return), the generator is closed and trying to iterate over it again does not yield any more results. Hence, the second loop doesn&#39;t print any value.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;48. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const num = 0o38;
console.log(num);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: 38&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;If you use an invalid number(outside of 0-7 range) in the octal literal, JavaScript will throw a SyntaxError. In ES5, it treats the octal literal as a decimal number.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;49. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const squareObj = new Square(10);
console.log(squareObj.area);

class Square {
  constructor(length) {
    this.length = length;
  }

  get area() {
    return this.length * this.length;
  }

  set area(value) {
    this.area = value;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 100&lt;/li&gt; 
 &lt;li&gt;2: ReferenceError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Unlike function declarations, class declarations are not hoisted. i.e, First You need to declare your class and then access it, otherwise it will throw a ReferenceError &quot;Uncaught ReferenceError: Square is not defined&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Class expressions also applies to the same hoisting restrictions of class declarations.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;50. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Person() { }

Person.prototype.walk = function() {
  return this;
}

Person.run = function() {
  return this;
}

let user = new Person();
let walk = user.walk;
console.log(walk());

let run = Person.run;
console.log(run());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: undefined, undefined&lt;/li&gt; 
 &lt;li&gt;2: Person, Person&lt;/li&gt; 
 &lt;li&gt;3: SyntaxError&lt;/li&gt; 
 &lt;li&gt;4: Window, Window&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;When a regular or prototype method is called without a value for &lt;strong&gt;this&lt;/strong&gt;, the methods return an initial this value if the value is not undefined. Otherwise global window object will be returned. In our case, the initial &lt;code&gt;this&lt;/code&gt; value is undefined so both methods return window objects.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;51. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Vehicle {
  constructor(name) {
    this.name = name;
  }

  start() {
    console.log(`${this.name} vehicle started`);
  }
}

class Car extends Vehicle {
  start() {
    console.log(`${this.name} car started`);
    super.start();
  }
}

const car = new Car(&#39;BMW&#39;);
console.log(car.start());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: SyntaxError&lt;/li&gt; 
 &lt;li&gt;2: BMW vehicle started, BMW car started&lt;/li&gt; 
 &lt;li&gt;3: BMW car started, BMW vehicle started&lt;/li&gt; 
 &lt;li&gt;4: BMW car started, BMW car started&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 3&lt;/h5&gt; 
&lt;p&gt;The super keyword is used to call methods of a superclass. Unlike other languages the super invocation doesn&#39;t need to be a first statement. i.e, The statements will be executed in the same order of code.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h4&gt;52. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const USER = {&#39;age&#39;: 30};
USER.age = 25;
console.log(USER.age);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: 30&lt;/li&gt; 
 &lt;li&gt;2: 25&lt;/li&gt; 
 &lt;li&gt;3: Uncaught TypeError&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Even though we used constant variables, the content of it is an object and the object&#39;s contents (e.g properties) can be altered. Hence, the change is going to be valid in this case.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;53. What is the output of below code&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;🙂&#39; === &#39;🙂&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: false&lt;/li&gt; 
 &lt;li&gt;2: true&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 2&lt;/h5&gt; 
&lt;p&gt;Emojis are unicodes and the unicode for smile symbol is &quot;U+1F642&quot;. The unicode comparision of same emojies is equivalent to string comparison. Hence, the output is always true.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;54. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(typeof typeof typeof true);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: string&lt;/li&gt; 
 &lt;li&gt;2: boolean&lt;/li&gt; 
 &lt;li&gt;3: NaN&lt;/li&gt; 
 &lt;li&gt;4: number&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;p&gt;The typeof operator on any primitive returns a string value. So even if you apply the chain of typeof operators on the return value, it is always string.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;55. What is the output of below code?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let zero = new Number(0);

if (zero) {
  console.log(&quot;If&quot;);
} else {
  console.log(&quot;Else&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: If&lt;/li&gt; 
 &lt;li&gt;2: Else&lt;/li&gt; 
 &lt;li&gt;3: NaN&lt;/li&gt; 
 &lt;li&gt;4: SyntaxError&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 1&lt;/h5&gt; 
&lt;ol&gt; 
 &lt;li&gt;The type of operator on new Number always returns object. i.e, typeof new Number(0) --&amp;gt; object.&lt;/li&gt; 
 &lt;li&gt;Objects are always truthy in if block&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Hence the above code block always goes to if section.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;55. What is the output of below code in non strict mode?&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let msg = &quot;Good morning!!&quot;;

msg.name = &quot;John&quot;; 

console.log(msg.name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1: &quot;&quot;&lt;/li&gt; 
 &lt;li&gt;2: Error&lt;/li&gt; 
 &lt;li&gt;3: John&lt;/li&gt; 
 &lt;li&gt;4: Undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Answer: 4&lt;/h5&gt; 
&lt;p&gt;It returns undefined for non-strict mode and returns Error for strict mode. In non-strict mode, the wrapper object is going to be created and get the mentioned property. But the object get disappeared after accessing the property in next line.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/javascript-interview-questions/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>signalapp/libsignal-protocol-javascript</title>
      <link>https://github.com/signalapp/libsignal-protocol-javascript</link>
      <description>&lt;p&gt;Signal Protocol library for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;libsignal-protocol-javascript&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/signalapp/libsignal-protocol-javascript&quot;&gt;&lt;img src=&quot;https://travis-ci.org/signalapp/libsignal-protocol-javascript.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Signal Protocol implementation for the browser based on &lt;a href=&quot;https://github.com/signalapp/libsignal-protocol-java&quot;&gt;libsignal-protocol-java&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/dist       # Distributables
/build      # Intermediate build files
/src        # JS source files
/native     # C source files for curve25519
/protos     # Protobuf definitions
/test       # Tests
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;A ratcheting forward secrecy protocol that works in synchronous and asynchronous messaging environments.&lt;/p&gt; 
&lt;h3&gt;PreKeys&lt;/h3&gt; 
&lt;p&gt;This protocol uses a concept called &#39;PreKeys&#39;. A PreKey is an ECPublicKey and an associated unique ID which are stored together by a server. PreKeys can also be signed.&lt;/p&gt; 
&lt;p&gt;At install time, clients generate a single signed PreKey, as well as a large list of unsigned PreKeys, and transmit all of them to the server.&lt;/p&gt; 
&lt;h3&gt;Sessions&lt;/h3&gt; 
&lt;p&gt;Signal Protocol is session-oriented. Clients establish a &quot;session,&quot; which is then used for all subsequent encrypt/decrypt operations. There is no need to ever tear down a session once one has been established.&lt;/p&gt; 
&lt;p&gt;Sessions are established in one of two ways:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;PreKeyBundles. A client that wishes to send a message to a recipient can establish a session by retrieving a PreKeyBundle for that recipient from the server.&lt;/li&gt; 
 &lt;li&gt;PreKeySignalMessages. A client can receive a PreKeySignalMessage from a recipient and use it to establish a session.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;State&lt;/h3&gt; 
&lt;p&gt;An established session encapsulates a lot of state between two clients. That state is maintained in durable records which need to be kept for the life of the session.&lt;/p&gt; 
&lt;p&gt;State is kept in the following places:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identity State. Clients will need to maintain the state of their own identity key pair, as well as identity keys received from other clients.&lt;/li&gt; 
 &lt;li&gt;PreKey State. Clients will need to maintain the state of their generated PreKeys.&lt;/li&gt; 
 &lt;li&gt;Signed PreKey States. Clients will need to maintain the state of their signed PreKeys.&lt;/li&gt; 
 &lt;li&gt;Session State. Clients will need to maintain the state of the sessions they have established.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;This implementation currently depends on the presence of the following types/interfaces, which are available in most modern browsers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;ArrayBuffer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;TypedArray&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Crypto&quot;&gt;WebCrypto&lt;/a&gt; with support for: 
  &lt;ul&gt; 
   &lt;li&gt;AES-CBC&lt;/li&gt; 
   &lt;li&gt;HMAC SHA-256&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Include &lt;code&gt;dist/libsignal-protocol.js&lt;/code&gt; in your webpage.&lt;/p&gt; 
&lt;h3&gt;Install time&lt;/h3&gt; 
&lt;p&gt;At install time, a libsignal client needs to generate its identity keys, registration id, and prekeys.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var KeyHelper = libsignal.KeyHelper;

var registrationId = KeyHelper.generateRegistrationId();
// Store registrationId somewhere durable and safe.

KeyHelper.generateIdentityKeyPair().then(function(identityKeyPair) {
    // keyPair -&amp;gt; { pubKey: ArrayBuffer, privKey: ArrayBuffer }
    // Store identityKeyPair somewhere durable and safe.
});

KeyHelper.generatePreKey(keyId).then(function(preKey) {
    store.storePreKey(preKey.keyId, preKey.keyPair);
});

KeyHelper.generateSignedPreKey(identityKeyPair, keyId).then(function(signedPreKey) {
    store.storeSignedPreKey(signedPreKey.keyId, signedPreKey.keyPair);
});

// Register preKeys and signedPreKey with the server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building a session&lt;/h3&gt; 
&lt;p&gt;A libsignal client needs to implement a storage interface that will manage loading and storing of identity, prekeys, signed prekeys, and session state. See &lt;code&gt;test/InMemorySignalProtocolStore.js&lt;/code&gt; for an example.&lt;/p&gt; 
&lt;p&gt;Once this is implemented, building a session is fairly straightforward:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var store   = new MySignalProtocolStore();
var address = new libsignal.SignalProtocolAddress(recipientId, deviceId);

// Instantiate a SessionBuilder for a remote recipientId + deviceId tuple.
var sessionBuilder = new libsignal.SessionBuilder(store, address);

// Process a prekey fetched from the server. Returns a promise that resolves
// once a session is created and saved in the store, or rejects if the
// identityKey differs from a previously seen identity for this address.
var promise = sessionBuilder.processPreKey({
    registrationId: &amp;lt;Number&amp;gt;,
    identityKey: &amp;lt;ArrayBuffer&amp;gt;,
    signedPreKey: {
        keyId     : &amp;lt;Number&amp;gt;,
        publicKey : &amp;lt;ArrayBuffer&amp;gt;,
        signature : &amp;lt;ArrayBuffer&amp;gt;
    },
    preKey: {
        keyId     : &amp;lt;Number&amp;gt;,
        publicKey : &amp;lt;ArrayBuffer&amp;gt;
    }
});

promise.then(function onsuccess() {
  // encrypt messages
});

promise.catch(function onerror(error) {
  // handle identity key conflict
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Encrypting&lt;/h3&gt; 
&lt;p&gt;Once you have a session established with an address, you can encrypt messages using SessionCipher.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var plaintext = &quot;Hello world&quot;;
var sessionCipher = new libsignal.SessionCipher(store, address);
sessionCipher.encrypt(plaintext).then(function(ciphertext) {
    // ciphertext -&amp;gt; { type: &amp;lt;Number&amp;gt;, body: &amp;lt;string&amp;gt; }
    handle(ciphertext.type, ciphertext.body);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Decrypting&lt;/h3&gt; 
&lt;p&gt;Ciphertexts come in two flavors: WhisperMessage and PreKeyWhisperMessage.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var address = new SignalProtocolAddress(recipientId, deviceId);
var sessionCipher = new SessionCipher(store, address);

// Decrypt a PreKeyWhisperMessage by first establishing a new session.
// Returns a promise that resolves when the message is decrypted or
// rejects if the identityKey differs from a previously seen identity for this
// address.
sessionCipher.decryptPreKeyWhisperMessage(ciphertext).then(function(plaintext) {
    // handle plaintext ArrayBuffer
}).catch(function(error) {
    // handle identity key conflict
});

// Decrypt a normal message using an existing session
var sessionCipher = new SessionCipher(store, address);
sessionCipher.decryptWhisperMessage(ciphertext).then(function(plaintext) {
    // handle plaintext ArrayBuffer
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;To compile curve25519 from C source files in &lt;code&gt;/native&lt;/code&gt;, install &lt;a href=&quot;https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html&quot;&gt;emscripten&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;grunt compile
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright 2015-2018 Open Whisper Systems&lt;/p&gt; 
&lt;p&gt;Licensed under the GPLv3: http://www.gnu.org/licenses/gpl-3.0.html&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JedWatson/react-select</title>
      <link>https://github.com/JedWatson/react-select</link>
      <description>&lt;p&gt;The Select Component for React.js&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-select&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/react-select.svg&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/JedWatson/react-select/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/JedWatson/react-select/tree/master.svg?style=shield&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/JedWatson/react-select?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/JedWatson/react-select/badge.svg?branch=master&amp;amp;service=github&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://thinkmill.com.au/?utm_source=github&amp;amp;utm_medium=badge&amp;amp;utm_campaign=react-select&quot;&gt;&lt;img src=&quot;https://thinkmill.github.io/badge/heart.svg&quot; alt=&quot;Supported by Thinkmill&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;React-Select&lt;/h1&gt; 
&lt;p&gt;The Select control for &lt;a href=&quot;https://reactjs.com&quot;&gt;React&lt;/a&gt;. Initially built for use in &lt;a href=&quot;http://www.keystonejs.com&quot;&gt;KeystoneJS&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://www.react-select.com&quot;&gt;react-select.com&lt;/a&gt; for live demos and comprehensive docs.&lt;/p&gt; 
&lt;p&gt;React Select is funded by &lt;a href=&quot;https://www.thinkmill.com.au&quot;&gt;Thinkmill&lt;/a&gt; and &lt;a href=&quot;https://atlaskit.atlassian.com&quot;&gt;Atlassian&lt;/a&gt;. It represents a whole new approach to developing powerful React.js components that &lt;em&gt;just work&lt;/em&gt; out of the box, while being extremely customisable.&lt;/p&gt; 
&lt;p&gt;For the story behind this component, watch Jed&#39;s talk at React Conf 2019 - &lt;a href=&quot;https://youtu.be/yS0jUnmBujE&quot;&gt;building React Select&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Features include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Flexible approach to data, with customisable functions&lt;/li&gt; 
 &lt;li&gt;Extensible styling API with &lt;a href=&quot;https://emotion.sh&quot;&gt;emotion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Component Injection API for complete control over the UI behaviour&lt;/li&gt; 
 &lt;li&gt;Controllable state props and modular architecture&lt;/li&gt; 
 &lt;li&gt;Long-requested features like option groups, portal support, animation, and more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Using an older version?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JedWatson/react-select/issues/3585&quot;&gt;v2 to v3 upgrade guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://react-select.com/upgrade-guide&quot;&gt;v1 to v2 upgrade guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;React Select v1 documentation and examples are available at &lt;a href=&quot;https://v1.react-select.com&quot;&gt;v1.react-select.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation and usage&lt;/h1&gt; 
&lt;p&gt;The easiest way to use react-select is to install it from npm and build it into your app with Webpack.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;yarn add react-select
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then use it in your app:&lt;/p&gt; 
&lt;h4&gt;With React Component&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;
import Select from &#39;react-select&#39;;

const options = [
  { value: &#39;chocolate&#39;, label: &#39;Chocolate&#39; },
  { value: &#39;strawberry&#39;, label: &#39;Strawberry&#39; },
  { value: &#39;vanilla&#39;, label: &#39;Vanilla&#39; },
];

class App extends React.Component {
  state = {
    selectedOption: null,
  };
  handleChange = selectedOption =&amp;gt; {
    this.setState(
      { selectedOption },
      () =&amp;gt; console.log(`Option selected:`, this.state.selectedOption)
    );
  };
  render() {
    const { selectedOption } = this.state;

    return (
      &amp;lt;Select
        value={selectedOption}
        onChange={this.handleChange}
        options={options}
      /&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;With React Hooks&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React, { useState } from &quot;react&quot;;
import Select from &quot;react-select&quot;;

const options = [
  { value: &#39;chocolate&#39;, label: &#39;Chocolate&#39; },
  { value: &#39;strawberry&#39;, label: &#39;Strawberry&#39; },
  { value: &#39;vanilla&#39;, label: &#39;Vanilla&#39; },
];

export default function App() {
  const [selectedOption, setSelectedOption] = useState(null);
  
  return (
    &amp;lt;div className=&quot;App&quot;&amp;gt;
      &amp;lt;Select
        defaultValue={selectedOption}
        onChange={setSelectedOption}
        options={options}
      /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Props&lt;/h2&gt; 
&lt;p&gt;Common props you may want to specify include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;autoFocus&lt;/code&gt; - focus the control when it mounts&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;className&lt;/code&gt; - apply a className to the control&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;classNamePrefix&lt;/code&gt; - apply classNames to inner elements with the given prefix&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;isDisabled&lt;/code&gt; - disable the control&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;isMulti&lt;/code&gt; - allow the user to select multiple values&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;isSearchable&lt;/code&gt; - allow the user to search for matching options&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;name&lt;/code&gt; - generate an HTML input with this name, containing the current value&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;onChange&lt;/code&gt; - subscribe to change events&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;options&lt;/code&gt; - specify the options the user can select from&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;placeholder&lt;/code&gt; - change the text displayed when no option is selected&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;noOptionsMessage&lt;/code&gt; - ({ inputValue: string }) =&amp;gt; string | null - Text to display when there are no options&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;value&lt;/code&gt; - control the current value&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://www.react-select.com/props&quot;&gt;props documentation&lt;/a&gt; for complete documentation on the props react-select supports.&lt;/p&gt; 
&lt;h2&gt;Controllable Props&lt;/h2&gt; 
&lt;p&gt;You can control the following props by providing values for them. If you don&#39;t, react-select will manage them for you.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;value&lt;/code&gt; / &lt;code&gt;onChange&lt;/code&gt; - specify the current value of the control&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;menuIsOpen&lt;/code&gt; / &lt;code&gt;onMenuOpen&lt;/code&gt; / &lt;code&gt;onMenuClose&lt;/code&gt; - control whether the menu is open&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;inputValue&lt;/code&gt; / &lt;code&gt;onInputChange&lt;/code&gt; - control the value of the search input (changing this will update the available options)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you don&#39;t provide these props, you can set the initial value of the state they control:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;defaultValue&lt;/code&gt; - set the initial value of the control&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;defaultMenuIsOpen&lt;/code&gt; - set the initial open value of the menu&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;defaultInputValue&lt;/code&gt; - set the initial value of the search input&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Methods&lt;/h2&gt; 
&lt;p&gt;React-select exposes two public methods:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;focus()&lt;/code&gt; - focus the control programatically&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;blur()&lt;/code&gt; - blur the control programatically&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Customisation&lt;/h2&gt; 
&lt;p&gt;Check the docs for more information on:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.react-select.com/styles&quot;&gt;Customising the styles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.react-select.com/components&quot;&gt;Using custom components&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.react-select.com/home#animated-components&quot;&gt;Using the built-in animated components&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.react-select.com/async&quot;&gt;Creating an async select&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.react-select.com/creatable&quot;&gt;Allowing users to create new options&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.react-select.com/advanced&quot;&gt;Advanced use-cases&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Thanks&lt;/h1&gt; 
&lt;p&gt;Thank you to everyone who has contributed to this project. It&#39;s been a wild ride.&lt;/p&gt; 
&lt;p&gt;If you like React Select, you should &lt;a href=&quot;https://twitter.com/jedwatson&quot;&gt;follow me on twitter&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;Shout out to &lt;a href=&quot;https://github.com/jossmac&quot;&gt;Joss Mackison&lt;/a&gt;, &lt;a href=&quot;https://github.com/gwyneplaine&quot;&gt;Charles Lee&lt;/a&gt;, &lt;a href=&quot;https://github.com/Noviny&quot;&gt;Ben Conolly&lt;/a&gt;, &lt;a href=&quot;https://github.com/bladey&quot;&gt;Tom Walker&lt;/a&gt;, &lt;a href=&quot;https://github.com/Methuselah96&quot;&gt;Nathan Bierema&lt;/a&gt;, &lt;a href=&quot;https://github.com/ebonow&quot;&gt;Eric Bonow&lt;/a&gt;, &lt;a href=&quot;https://github.com/mitchellhamilton&quot;&gt;Mitchell Hamilton&lt;/a&gt;, &lt;a href=&quot;https://github.com/bruderstein&quot;&gt;Dave Brotherstone&lt;/a&gt;, &lt;a href=&quot;https://github.com/bvaughn&quot;&gt;Brian Vaughn&lt;/a&gt;, and the &lt;a href=&quot;https://atlassian.design&quot;&gt;Atlassian Design System&lt;/a&gt; team who along with many other contributors have made this possible ❤️&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT Licensed. Copyright (c) Jed Watson 2021.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>graphql/graphql-js</title>
      <link>https://github.com/graphql/graphql-js</link>
      <description>&lt;p&gt;A reference implementation of GraphQL for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GraphQL.js&lt;/h1&gt; 
&lt;p&gt;The JavaScript reference implementation for GraphQL, a query language for APIs created by Facebook.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/graphql&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/graphql.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/graphql/graphql-js/actions?query=branch%3Amaster&quot;&gt;&lt;img src=&quot;https://github.com/graphql/graphql-js/workflows/CI/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/graphql/graphql-js&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/graphql/graphql-js/branch/master/graph/badge.svg&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;See more complete documentation at https://graphql.org/ and https://graphql.org/graphql-js/.&lt;/p&gt; 
&lt;p&gt;Looking for help? Find resources &lt;a href=&quot;https://graphql.org/community/&quot;&gt;from the community&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;A general overview of GraphQL is available in the &lt;a href=&quot;https://github.com/graphql/graphql-spec/blob/master/README.md&quot;&gt;README&lt;/a&gt; for the &lt;a href=&quot;https://github.com/graphql/graphql-spec&quot;&gt;Specification for GraphQL&lt;/a&gt;. That overview describes a simple set of GraphQL examples that exist as &lt;a href=&quot;https://raw.githubusercontent.com/graphql/graphql-js/master/src/__tests__&quot;&gt;tests&lt;/a&gt; in this repository. A good way to get started with this repository is to walk through that README and the corresponding tests in parallel.&lt;/p&gt; 
&lt;h3&gt;Using GraphQL.js&lt;/h3&gt; 
&lt;p&gt;Install GraphQL.js from npm&lt;/p&gt; 
&lt;p&gt;With npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install --save graphql
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or using yarn:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;yarn add graphql
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;GraphQL.js provides two important capabilities: building a type schema and serving queries against that type schema.&lt;/p&gt; 
&lt;p&gt;First, build a GraphQL type schema which maps to your codebase.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {
  graphql,
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLString,
} from &#39;graphql&#39;;

var schema = new GraphQLSchema({
  query: new GraphQLObjectType({
    name: &#39;RootQueryType&#39;,
    fields: {
      hello: {
        type: GraphQLString,
        resolve() {
          return &#39;world&#39;;
        },
      },
    },
  }),
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This defines a simple schema, with one type and one field, that resolves to a fixed value. The &lt;code&gt;resolve&lt;/code&gt; function can return a value, a promise, or an array of promises. A more complex example is included in the top-level &lt;a href=&quot;https://raw.githubusercontent.com/graphql/graphql-js/master/src/__tests__&quot;&gt;tests&lt;/a&gt; directory.&lt;/p&gt; 
&lt;p&gt;Then, serve the result of a query against that type schema.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var query = &#39;{ hello }&#39;;

graphql(schema, query).then((result) =&amp;gt; {
  // Prints
  // {
  //   data: { hello: &quot;world&quot; }
  // }
  console.log(result);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This runs a query fetching the one field defined. The &lt;code&gt;graphql&lt;/code&gt; function will first ensure the query is syntactically and semantically valid before executing it, reporting errors otherwise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var query = &#39;{ BoyHowdy }&#39;;

graphql(schema, query).then((result) =&amp;gt; {
  // Prints
  // {
  //   errors: [
  //     { message: &#39;Cannot query field BoyHowdy on RootQueryType&#39;,
  //       locations: [ { line: 1, column: 3 } ] }
  //   ]
  // }
  console.log(result);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please don&#39;t forget to set &lt;code&gt;NODE_ENV=production&lt;/code&gt; if you are running a production server. It will disable some checks that can be useful during development but will significantly improve performance.&lt;/p&gt; 
&lt;h3&gt;Want to ride the bleeding edge?&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;npm&lt;/code&gt; branch in this repository is automatically maintained to be the last commit to &lt;code&gt;master&lt;/code&gt; to pass all tests, in the same form found on npm. It is recommended to use builds deployed to npm for many reasons, but if you want to use the latest not-yet-released version of graphql-js, you can do so by depending directly on this branch:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install graphql@git://github.com/graphql/graphql-js.git#npm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Experimental features&lt;/h3&gt; 
&lt;p&gt;Each release of GraphQL.js will be accompanied by an experimental release containing support for the &lt;code&gt;@defer&lt;/code&gt; and &lt;code&gt;@stream&lt;/code&gt; directive proposal. We are hoping to get community feedback on these releases before the proposal is accepted into the GraphQL specification. You can use this experimental release of GraphQL.js by adding the following to your project&#39;s &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&quot;graphql&quot;: &quot;experimental-stream-defer&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Community feedback on this experimental release is much appreciated and can be provided on the &lt;a href=&quot;https://github.com/graphql/graphql-js/issues/2848&quot;&gt;issue created for this purpose&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using in a Browser&lt;/h3&gt; 
&lt;p&gt;GraphQL.js is a general-purpose library and can be used both in a Node server and in the browser. As an example, the &lt;a href=&quot;https://github.com/graphql/graphiql/&quot;&gt;GraphiQL&lt;/a&gt; tool is built with GraphQL.js!&lt;/p&gt; 
&lt;p&gt;Building a project using GraphQL.js with &lt;a href=&quot;https://webpack.js.org&quot;&gt;webpack&lt;/a&gt; or &lt;a href=&quot;https://github.com/rollup/rollup&quot;&gt;rollup&lt;/a&gt; should just work and only include the portions of the library you use. This works because GraphQL.js is distributed with both CommonJS (&lt;code&gt;require()&lt;/code&gt;) and ESModule (&lt;code&gt;import&lt;/code&gt;) files. Ensure that any custom build configurations look for &lt;code&gt;.mjs&lt;/code&gt; files!&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;We actively welcome pull requests. Learn how to &lt;a href=&quot;https://raw.githubusercontent.com/graphql/graphql-js/master/.github/CONTRIBUTING.md&quot;&gt;contribute&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Changelog&lt;/h3&gt; 
&lt;p&gt;Changes are tracked as &lt;a href=&quot;https://github.com/graphql/graphql-js/releases&quot;&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;GraphQL.js is &lt;a href=&quot;https://raw.githubusercontent.com/graphql/graphql-js/master/LICENSE&quot;&gt;MIT-licensed&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Credits&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;*.d.ts&lt;/code&gt; files in this project are based on &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/54712a7e28090c5b1253b746d1878003c954f3ff/types/graphql&quot;&gt;DefinitelyTyped&lt;/a&gt; definitions written by:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;TonyYang https://github.com/TonyPythoneer&lt;/li&gt; 
 &lt;li&gt;Caleb Meredith https://github.com/calebmer&lt;/li&gt; 
 &lt;li&gt;Dominic Watson https://github.com/intellix&lt;/li&gt; 
 &lt;li&gt;Firede https://github.com/firede&lt;/li&gt; 
 &lt;li&gt;Kepennar https://github.com/kepennar&lt;/li&gt; 
 &lt;li&gt;Mikhail Novikov https://github.com/freiksenet&lt;/li&gt; 
 &lt;li&gt;Ivan Goncharov https://github.com/IvanGoncharov&lt;/li&gt; 
 &lt;li&gt;Hagai Cohen https://github.com/DxCx&lt;/li&gt; 
 &lt;li&gt;Ricardo Portugal https://github.com/rportugal&lt;/li&gt; 
 &lt;li&gt;Tim Griesser https://github.com/tgriesser&lt;/li&gt; 
 &lt;li&gt;Dylan Stewart https://github.com/dyst5422&lt;/li&gt; 
 &lt;li&gt;Alessio Dionisi https://github.com/adnsio&lt;/li&gt; 
 &lt;li&gt;Divyendu Singh https://github.com/divyenduz&lt;/li&gt; 
 &lt;li&gt;Brad Zacher https://github.com/bradzacher&lt;/li&gt; 
 &lt;li&gt;Curtis Layne https://github.com/clayne11&lt;/li&gt; 
 &lt;li&gt;Jonathan Cardoso https://github.com/JCMais&lt;/li&gt; 
 &lt;li&gt;Pavel Lang https://github.com/langpavel&lt;/li&gt; 
 &lt;li&gt;Mark Caudill https://github.com/mc0&lt;/li&gt; 
 &lt;li&gt;Martijn Walraven https://github.com/martijnwalraven&lt;/li&gt; 
 &lt;li&gt;Jed Mao https://github.com/jedmao&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
