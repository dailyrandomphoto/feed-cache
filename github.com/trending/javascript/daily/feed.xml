<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Sun, 18 Apr 2021 02:01:09 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>sequelize/sequelize</title>
      <link>https://github.com/sequelize/sequelize</link>
      <description>&lt;p&gt;An easy-to-use multi SQL dialect ORM tool for Node.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sequelize&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/sequelize&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/v/sequelize&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sequelize/sequelize/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/sequelize/sequelize/workflows/CI/badge.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/sequelize&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/dm/sequelize&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sequelize/sequelize&quot;&gt;&lt;img src=&quot;https://badgen.net/github/merged-prs/sequelize/sequelize&quot; alt=&quot;Merged PRs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg&quot; alt=&quot;semantic-release&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Sequelize is a promise-based &lt;a href=&quot;https://nodejs.org/en/about/&quot;&gt;Node.js&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM tool&lt;/a&gt; for &lt;a href=&quot;https://en.wikipedia.org/wiki/PostgreSQL&quot;&gt;Postgres&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/MySQL&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/MariaDB&quot;&gt;MariaDB&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/SQLite&quot;&gt;SQLite&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_SQL_Server&quot;&gt;Microsoft SQL Server&lt;/a&gt;. It features solid transaction support, relations, eager and lazy loading, read replication and more.&lt;/p&gt; 
&lt;p&gt;Sequelize follows &lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt; and supports Node v10 and above.&lt;/p&gt; 
&lt;p&gt;New to Sequelize? Take a look at the &lt;a href=&quot;https://sequelize.org/master&quot;&gt;Tutorials and Guides&lt;/a&gt;. You might also be interested in the &lt;a href=&quot;https://sequelize.org/master/identifiers&quot;&gt;API Reference&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;v6 Release&lt;/h3&gt; 
&lt;p&gt;You can find the detailed changelog &lt;a href=&quot;https://github.com/sequelize/sequelize/blob/main/docs/manual/other-topics/upgrade-to-v6.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Note: Looking for maintainers!&lt;/h2&gt; 
&lt;p&gt;Recently, a bigger part of the former core maintainers (thanks to all your hard work!) have been rather busy. Hence, the available time to look after our beloved ORM has been shrinking and shrinking drastically, generating a great chance for you:&lt;/p&gt; 
&lt;p&gt;We are looking for more core maintainers who are interested in improving/fixing our TypeScript typings, improving the documentation, organizing issues, reviewing PRs, streamlining the overall code base and planning the future roadmap.&lt;/p&gt; 
&lt;p&gt;If that sounds interesting to you, please reach out to us on &lt;a href=&quot;https://sequelize.slack.com/&quot;&gt;our Slack channel&lt;/a&gt; by sending a direct message to &lt;em&gt;Pedro A P B&lt;/em&gt;. If you don&#39;t have access, get yourself an invite automatically via &lt;a href=&quot;http://sequelize-slack.herokuapp.com/&quot;&gt;this link&lt;/a&gt;. We are looking forward to meet you!&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ npm i sequelize # This will install v6

# And one of the following:
$ npm i pg pg-hstore # Postgres
$ npm i mysql2
$ npm i mariadb
$ npm i sqlite3
$ npm i tedious # Microsoft SQL Server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org/master&quot;&gt;v6 Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org&quot;&gt;v5/v4/v3 Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sequelize/sequelize/blob/main/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Responsible disclosure&lt;/h2&gt; 
&lt;p&gt;If you have security issues to report, please refer to our &lt;a href=&quot;https://github.com/sequelize/sequelize/blob/main/SECURITY.md&quot;&gt;Responsible Disclosure Policy&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sequelize/sequelize/releases&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sequelize-slack.herokuapp.com/&quot;&gt;Slack Inviter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/tagged/sequelize.js&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sequelize/cli&quot;&gt;CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org/master/manual/typescript.html&quot;&gt;With TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RobinBuschmann/sequelize-typescript&quot;&gt;Enhanced TypeScript with decorators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mickhansen/graphql-sequelize&quot;&gt;For GraphQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb/sequelize-cockroachdb&quot;&gt;For CockroachDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org/master/manual/resources.html&quot;&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org/master&quot;&gt;English&lt;/a&gt; (OFFICIAL)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/demopark/sequelize-docs-Zh-CN&quot;&gt;‰∏≠ÊñáÊñáÊ°£&lt;/a&gt; (UNOFFICIAL)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>GoogleChrome/web.dev</title>
      <link>https://github.com/GoogleChrome/web.dev</link>
      <description>&lt;p&gt;The frontend, backend, and content source code for web.dev&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;web.dev&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/GoogleChrome/web.dev/workflows/Continuous%20integration/badge.svg&quot; alt=&quot;Continuous integration&quot;&gt;&lt;/p&gt; 
&lt;p&gt;web.dev is the ultimate resource for developers of all backgrounds to learn, create, and solve on the web. It&#39;s meant to not only educate developers, but help them apply what they&#39;ve learned to any site they work on, be it personal or business.&lt;/p&gt; 
&lt;h2&gt;Found a bug? üë∑‚Äç‚ôÄÔ∏è&lt;/h2&gt; 
&lt;p&gt;Thanks for letting us know! Please &lt;a href=&quot;https://github.com/GoogleChrome/web.dev/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=&quot;&gt;file an issue&lt;/a&gt; and a team member should reply shortly.&lt;/p&gt; 
&lt;h2&gt;Authoring content ‚úçÔ∏è&lt;/h2&gt; 
&lt;p&gt;Before you start writing take a moment to look over the &lt;a href=&quot;https://web.dev/handbook&quot;&gt;web.dev handbook&lt;/a&gt; and familiarize yourself with the process. When you&#39;re ready, follow the steps in the &lt;a href=&quot;https://web.dev/handbook/quick-start/&quot;&gt;Quickstart&lt;/a&gt; to create your content proposal.&lt;/p&gt; 
&lt;h2&gt;Building the site üèó&lt;/h2&gt; 
&lt;p&gt;You&#39;ll need a recent version of &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node&lt;/a&gt;: v14 (LTS) or higher. To check your node version run &lt;code&gt;node -v&lt;/code&gt; in your terminal.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t have node, or if you need to upgrade, we recommend using the &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;Node Version Manager (nvm)&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Clone the repo&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/GoogleChrome/web.dev.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install dependencies&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm ci
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Start a local server to preview the site&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open &lt;code&gt;http://localhost:8080/&lt;/code&gt; to see the site locally. Changes to assets will rebuild the site. Refresh to see your changes.&lt;/p&gt; 
&lt;h3&gt;Speeding up builds&lt;/h3&gt; 
&lt;p&gt;‚ö†Ô∏è This is an experimental feature üß™üî¨&lt;/p&gt; 
&lt;p&gt;Any change to the site will cause Eleventy to rebuild. This can take 10-20s. If you want to speed things up you can isolate your directory using the &lt;code&gt;isolate&lt;/code&gt; command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run isolate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will move all of the markdown files for the site into the &lt;code&gt;_exile&lt;/code&gt; directory and it will ignore them for builds.&lt;/p&gt; 
&lt;p&gt;You may pass an optional glob (or space separated list of globs) to the &lt;code&gt;isolate&lt;/code&gt; command to tell it to preserve a directory.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Example 1: Preserve the style-focus directory
# note the -- which is needed to pass options to npm scripts
npm run isolate -- src/site/content/en/accessible/style-focus/**

# Example 2: Preserve everything in the accessible directory
npm run isolate -- src/site/content/en/accessible/**/*
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you&#39;re finished making your edits, run the &lt;code&gt;integrate&lt;/code&gt; command to restore all of the project files.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run integrate
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;‚òùÔ∏è A git commit hook will prevent you from being able to run &lt;code&gt;git commit&lt;/code&gt; until you have run the &lt;code&gt;integrate&lt;/code&gt; command.&lt;/p&gt; 
&lt;h2&gt;Environments üå≥&lt;/h2&gt; 
&lt;p&gt;Set &lt;code&gt;ELEVENTY_ENV=prod&lt;/code&gt; to force production builds. This is the default when running &quot;stage&quot; or &quot;deploy&quot;. No other options for &lt;code&gt;ELEVENTY_ENV&lt;/code&gt; are supported, although our Eleventy site config will default to &#39;dev&#39; if unspecified.&lt;/p&gt; 
&lt;h2&gt;Staging üï∫&lt;/h2&gt; 
&lt;p&gt;When you send in a pull request it will be automatically staged for you. Keep an eye out for the netlify bot to comment on the pull request with your unique URL.&lt;/p&gt; 
&lt;h2&gt;Deploying the site üöÄ&lt;/h2&gt; 
&lt;h3&gt;Automatic deploys&lt;/h3&gt; 
&lt;p&gt;The site will build and deploy the main branch automatically every hour, Mon-Fri. If you&#39;ve just merged an article then it should go live at the top of the next hour.&lt;/p&gt; 
&lt;h3&gt;Manual deploys&lt;/h3&gt; 
&lt;p&gt;To manually deploy the site you&#39;ll need to be a member of one of these GitHub teams:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;@GoogleChrome/web-dev-admins&lt;/li&gt; 
 &lt;li&gt;@GoogleChrome/web-dev-content&lt;/li&gt; 
 &lt;li&gt;@GoogleChrome/web-dev-contributors&lt;/li&gt; 
 &lt;li&gt;@GoogleChrome/web-dev-eng&lt;/li&gt; 
 &lt;li&gt;@GoogleChrome/web-devrel&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt;Navigate to &lt;a href=&quot;https://github.com/GoogleChrome/web.dev/actions?query=workflow%3ADeploy&quot;&gt;the Deploy workflow in the Actions panel&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Click the &lt;strong&gt;Run workflow&lt;/strong&gt; button. Make sure the branch says &lt;code&gt;master&lt;/code&gt;, then click the green &lt;strong&gt;Run workflow&lt;/strong&gt; button.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1066253/89584965-da6eb500-d7f1-11ea-8a43-d8b1abe2cd3b.png&quot; alt=&quot;An expanded workflow popup with a green run workflow button inside of it.&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Debugging üêõ&lt;/h2&gt; 
&lt;p&gt;If you need to debug the site&#39;s build process:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Add a &lt;code&gt;debugger&lt;/code&gt; statement to &lt;code&gt;.eleventy.js&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;npm run debug:eleventy&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Go to &lt;code&gt;chrome://inspect&lt;/code&gt; to attach to the running process.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>twbs/bootstrap</title>
      <link>https://github.com/twbs/bootstrap</link>
      <description>&lt;p&gt;The most popular HTML, CSS, and JavaScript framework for developing responsive, mobile first projects on the web.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Bootstrap 4&lt;/h2&gt; 
&lt;p&gt;Our default branch is for development of our upcoming Bootstrap 5 release. Head to the &lt;a href=&quot;https://github.com/twbs/bootstrap/tree/v4-dev&quot;&gt;&lt;code&gt;v4-dev&lt;/code&gt; branch&lt;/a&gt; to view the readme, documentation, and source code for Bootstrap 4.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#quick-start&quot;&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#status&quot;&gt;Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#whats-included&quot;&gt;What&#39;s included&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#bugs-and-feature-requests&quot;&gt;Bugs and feature requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#versioning&quot;&gt;Versioning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#creators&quot;&gt;Creators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#thanks&quot;&gt;Thanks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#copyright-and-license&quot;&gt;Copyright and license&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;Several quick start options are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/twbs/bootstrap/archive/v5.0.0-beta3.zip&quot;&gt;Download the latest release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/twbs/bootstrap.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;: &lt;code&gt;npm install bootstrap@next&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn&lt;/a&gt;: &lt;code&gt;yarn add bootstrap@next&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;: &lt;code&gt;composer require twbs/bootstrap:5.0.0-beta3&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://www.nuget.org/&quot;&gt;NuGet&lt;/a&gt;: CSS: &lt;code&gt;Install-Package bootstrap&lt;/code&gt; Sass: &lt;code&gt;Install-Package bootstrap.sass&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://getbootstrap.com/docs/5.0/getting-started/introduction/&quot;&gt;Getting started page&lt;/a&gt; for information on the framework contents, templates and examples, and more.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://bootstrap-slack.herokuapp.com/&quot;&gt;&lt;img src=&quot;https://bootstrap-slack.herokuapp.com/badge.svg&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/actions?query=workflow%3AJS+Tests+branch%3Amain&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/workflow/status/twbs/bootstrap/JS%20Tests/main?label=JS%20Tests&amp;amp;logo=github&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/bootstrap&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://rubygems.org/gems/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/bootstrap&quot; alt=&quot;Gem version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://atmospherejs.com/twbs/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/meteor-twbs%3Abootstrap-blue&quot; alt=&quot;Meteor Atmosphere&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/twbs/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/packagist/vpre/twbs/bootstrap&quot; alt=&quot;Packagist Prerelease&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.nuget.org/packages/bootstrap/absoluteLatest&quot;&gt;&lt;img src=&quot;https://img.shields.io/nuget/vpre/bootstrap&quot; alt=&quot;NuGet&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/twbs/bootstrap?type=peer&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/peer/twbs/bootstrap&quot; alt=&quot;peerDependencies Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/twbs/bootstrap?type=dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/dev/twbs/bootstrap&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/twbs/bootstrap?branch=main&quot;&gt;&lt;img src=&quot;https://img.shields.io/coveralls/github/twbs/bootstrap/main&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/css/bootstrap.min.css&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/css/bootstrap.min.css?compression=gzip&amp;amp;label=CSS%20gzip%20size&quot; alt=&quot;CSS gzip size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/css/bootstrap.min.css&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/css/bootstrap.min.css?compression=brotli&amp;amp;label=CSS%20Brotli%20size&quot; alt=&quot;CSS Brotli size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/js/bootstrap.min.js&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/js/bootstrap.min.js?compression=gzip&amp;amp;label=JS%20gzip%20size&quot; alt=&quot;JS gzip size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/js/bootstrap.min.js&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/js/bootstrap.min.js?compression=brotli&amp;amp;label=JS%20Brotli%20size&quot; alt=&quot;JS Brotli size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.browserstack.com/automate/public-build/SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229&quot;&gt;&lt;img src=&quot;https://www.browserstack.com/automate/badge.svg?badge_key=SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229&quot; alt=&quot;BrowserStack Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#backers&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/backers/bootstrap&quot; alt=&quot;Backers on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#sponsors&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/sponsors/bootstrap&quot; alt=&quot;Sponsors on Open Collective&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What&#39;s included&lt;/h2&gt; 
&lt;p&gt;Within the download you&#39;ll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You&#39;ll see something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;bootstrap/
‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.rtl.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.rtl.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.rtl.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-grid.rtl.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.rtl.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.rtl.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.rtl.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-reboot.rtl.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.rtl.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.rtl.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.rtl.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap-utilities.rtl.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.min.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.min.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.rtl.css
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.rtl.css.map
‚îÇ   ‚îú‚îÄ‚îÄ bootstrap.rtl.min.css
‚îÇ   ‚îî‚îÄ‚îÄ bootstrap.rtl.min.css.map
‚îî‚îÄ‚îÄ js/
    ‚îú‚îÄ‚îÄ bootstrap.bundle.js
    ‚îú‚îÄ‚îÄ bootstrap.bundle.js.map
    ‚îú‚îÄ‚îÄ bootstrap.bundle.min.js
    ‚îú‚îÄ‚îÄ bootstrap.bundle.min.js.map
    ‚îú‚îÄ‚îÄ bootstrap.esm.js
    ‚îú‚îÄ‚îÄ bootstrap.esm.js.map
    ‚îú‚îÄ‚îÄ bootstrap.esm.min.js
    ‚îú‚îÄ‚îÄ bootstrap.esm.min.js.map
    ‚îú‚îÄ‚îÄ bootstrap.js
    ‚îú‚îÄ‚îÄ bootstrap.js.map
    ‚îú‚îÄ‚îÄ bootstrap.min.js
    ‚îî‚îÄ‚îÄ bootstrap.min.js.map
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We provide compiled CSS and JS (&lt;code&gt;bootstrap.*&lt;/code&gt;), as well as compiled and minified CSS and JS (&lt;code&gt;bootstrap.min.*&lt;/code&gt;). &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;source maps&lt;/a&gt; (&lt;code&gt;bootstrap.*.map&lt;/code&gt;) are available for use with certain browsers&#39; developer tools. Bundled JS files (&lt;code&gt;bootstrap.bundle.js&lt;/code&gt; and minified &lt;code&gt;bootstrap.bundle.min.js&lt;/code&gt;) include &lt;a href=&quot;https://popper.js.org/&quot;&gt;Popper&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Bugs and feature requests&lt;/h2&gt; 
&lt;p&gt;Have a bug or a feature request? Please first read the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.github/CONTRIBUTING.md#using-the-issue-tracker&quot;&gt;issue guidelines&lt;/a&gt; and search for existing and closed issues. If your problem or idea is not addressed yet, &lt;a href=&quot;https://github.com/twbs/bootstrap/issues/new&quot;&gt;please open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Bootstrap&#39;s documentation, included in this repo in the root directory, is built with &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; and publicly hosted on GitHub Pages at &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;https://getbootstrap.com/&lt;/a&gt;. The docs may also be run locally.&lt;/p&gt; 
&lt;p&gt;Documentation search is powered by &lt;a href=&quot;https://community.algolia.com/docsearch/&quot;&gt;Algolia&#39;s DocSearch&lt;/a&gt;. Working on our search? Be sure to set &lt;code&gt;debug: true&lt;/code&gt; in &lt;code&gt;site/assets/js/search.js&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Running documentation locally&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the Node.js dependencies, including Hugo (the site builder).&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;npm run test&lt;/code&gt; (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.&lt;/li&gt; 
 &lt;li&gt;From the root &lt;code&gt;/bootstrap&lt;/code&gt; directory, run &lt;code&gt;npm run docs-serve&lt;/code&gt; in the command line.&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;http://localhost:9001/&lt;/code&gt; in your browser, and voil√†.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Learn more about using Hugo by reading its &lt;a href=&quot;https://gohugo.io/documentation/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Documentation for previous releases&lt;/h3&gt; 
&lt;p&gt;You can find all our previous releases docs on &lt;a href=&quot;https://getbootstrap.com/docs/versions/&quot;&gt;https://getbootstrap.com/docs/versions/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/twbs/bootstrap/releases&quot;&gt;Previous releases&lt;/a&gt; and their documentation are also available for download.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read through our &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.github/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt;. Included are directions for opening issues, coding standards, and notes on development.&lt;/p&gt; 
&lt;p&gt;Moreover, if your pull request contains JavaScript patches or features, you must include &lt;a href=&quot;https://github.com/twbs/bootstrap/tree/main/js/tests&quot;&gt;relevant unit tests&lt;/a&gt;. All HTML and CSS should conform to the &lt;a href=&quot;https://github.com/mdo/code-guide&quot;&gt;Code Guide&lt;/a&gt;, maintained by &lt;a href=&quot;https://github.com/mdo&quot;&gt;Mark Otto&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Editor preferences are available in the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.editorconfig&quot;&gt;editor config&lt;/a&gt; for easy use in common text editors. Read more and download plugins at &lt;a href=&quot;https://editorconfig.org/&quot;&gt;https://editorconfig.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Get updates on Bootstrap&#39;s development and chat with the project maintainers and community members.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow &lt;a href=&quot;https://twitter.com/getbootstrap&quot;&gt;@getbootstrap on Twitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read and subscribe to &lt;a href=&quot;https://blog.getbootstrap.com/&quot;&gt;The Official Bootstrap Blog&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join &lt;a href=&quot;https://bootstrap-slack.herokuapp.com/&quot;&gt;the official Slack room&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Chat with fellow Bootstrappers in IRC. On the &lt;code&gt;irc.freenode.net&lt;/code&gt; server, in the &lt;code&gt;##bootstrap&lt;/code&gt; channel.&lt;/li&gt; 
 &lt;li&gt;Implementation help may be found at Stack Overflow (tagged &lt;a href=&quot;https://stackoverflow.com/questions/tagged/bootstrap-5&quot;&gt;&lt;code&gt;bootstrap-5&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Developers should use the keyword &lt;code&gt;bootstrap&lt;/code&gt; on packages which modify or add to the functionality of Bootstrap when distributing through &lt;a href=&quot;https://www.npmjs.com/browse/keyword/bootstrap&quot;&gt;npm&lt;/a&gt; or similar delivery mechanisms for maximum discoverability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under &lt;a href=&quot;https://semver.org/&quot;&gt;the Semantic Versioning guidelines&lt;/a&gt;. Sometimes we screw up, but we adhere to those rules whenever possible.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/twbs/bootstrap/releases&quot;&gt;the Releases section of our GitHub project&lt;/a&gt; for changelogs for each release version of Bootstrap. Release announcement posts on &lt;a href=&quot;https://blog.getbootstrap.com/&quot;&gt;the official Bootstrap blog&lt;/a&gt; contain summaries of the most noteworthy changes made in each release.&lt;/p&gt; 
&lt;h2&gt;Creators&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Mark Otto&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/mdo&quot;&gt;https://twitter.com/mdo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mdo&quot;&gt;https://github.com/mdo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Jacob Thornton&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/fat&quot;&gt;https://twitter.com/fat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fat&quot;&gt;https://github.com/fat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://www.browserstack.com/&quot;&gt;BrowserStack&lt;/a&gt; for providing the infrastructure that allows us to test in real browsers!&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/bootstrap#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/0/avatar.svg&quot; alt=&quot;OC sponsor 0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/1/avatar.svg&quot; alt=&quot;OC sponsor 1&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/2/avatar.svg&quot; alt=&quot;OC sponsor 2&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/3/avatar.svg&quot; alt=&quot;OC sponsor 3&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/4/avatar.svg&quot; alt=&quot;OC sponsor 4&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/5/avatar.svg&quot; alt=&quot;OC sponsor 5&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/6/avatar.svg&quot; alt=&quot;OC sponsor 6&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/7/avatar.svg&quot; alt=&quot;OC sponsor 7&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/8/avatar.svg&quot; alt=&quot;OC sponsor 8&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/9/avatar.svg&quot; alt=&quot;OC sponsor 9&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Backers&lt;/h2&gt; 
&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&quot;https://opencollective.com/bootstrap#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/bootstrap#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/backers.svg?width=890&quot; alt=&quot;Backers&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Copyright and license&lt;/h2&gt; 
&lt;p&gt;Code and documentation copyright 2011‚Äì2021 the &lt;a href=&quot;https://github.com/twbs/bootstrap/graphs/contributors&quot;&gt;Bootstrap Authors&lt;/a&gt; and &lt;a href=&quot;https://twitter.com&quot;&gt;Twitter, Inc.&lt;/a&gt; Code released under the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;. Docs released under &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dessant/buster</title>
      <link>https://github.com/dessant/buster</link>
      <description>&lt;p&gt;Captcha solver extension for humans&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Supporting the Project&lt;/h2&gt; 
&lt;p&gt;The continued development of Buster is made possible thanks to the support of awesome backers. If you&#39;d like to join them, please consider contributing with &lt;a href=&quot;https://armin.dev/go/patreon?pr=buster&amp;amp;src=repo&quot;&gt;Patreon&lt;/a&gt;, &lt;a href=&quot;https://armin.dev/go/paypal?pr=buster&amp;amp;src=repo&quot;&gt;PayPal&lt;/a&gt; or &lt;a href=&quot;https://armin.dev/go/bitcoin?pr=buster&amp;amp;src=repo&quot;&gt;Bitcoin&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Description&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Obviously, this blue part here is the land.&lt;/p&gt; 
 &lt;p&gt;‚Äî 
  &lt;!-- raw HTML omitted --&gt;Byron &quot;Buster&quot; Bluth, reading a map
  &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Buster is a browser extension which helps you to solve difficult captchas by completing reCAPTCHA audio challenges using speech recognition. Challenges are solved by clicking on the extension button at the bottom of the reCAPTCHA widget.&lt;/p&gt; 
&lt;p&gt;reCAPTCHA challenges remain a considerable burden on the web, delaying and often blocking our access to services and information depending on our physical and cognitive abilities, our social and cultural background, and the devices or networks we connect from.&lt;/p&gt; 
&lt;p&gt;The difficulty of captchas can be so out of balance, that sometimes they seem friendlier to bots than they are to humans.&lt;/p&gt; 
&lt;p&gt;The goal of this project is to improve our experience with captchas, by giving us easy access to solutions already utilized by automated systems.&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2018-2021 Armin Sebastian&lt;/p&gt; 
&lt;p&gt;This software is released under the terms of the GNU General Public License v3.0. See the &lt;a href=&quot;https://raw.githubusercontent.com/dessant/buster/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for further information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>covid19india/covid19india-react</title>
      <link>https://github.com/covid19india/covid19india-react</link>
      <description>&lt;p&gt;Tracking the impact of COVID-19 in India&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;yarn install &amp;amp;&amp;amp; yarn start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;If you&#39;re new to contributing to Open Source on Github, &lt;a href=&quot;https://guides.github.com/activities/contributing-to-open-source/&quot;&gt;this guide&lt;/a&gt; can help you get started. Please check out the &lt;a href=&quot;https://raw.githubusercontent.com/covid19india/covid19india-react/master/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt; for more details on how issues and pull requests work.&lt;/p&gt; 
&lt;h6&gt;This repository is just a small subset of work put together by a much larger pool of voluntary efforts contributed by generous people all around the world. Reach out to us through hello@covid19india.org&lt;/h6&gt;</description>
    </item>
    
    <item>
      <title>mozilla/pdf.js</title>
      <link>https://github.com/mozilla/pdf.js</link>
      <description>&lt;p&gt;PDF Reader in JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PDF.js &lt;a href=&quot;https://github.com/mozilla/pdf.js/actions?query=workflow%3ACI+branch%3Amaster&quot;&gt;&lt;img src=&quot;https://github.com/mozilla/pdf.js/workflows/CI/badge.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://mozilla.github.io/pdf.js/&quot;&gt;PDF.js&lt;/a&gt; is a Portable Document Format (PDF) viewer that is built with HTML5.&lt;/p&gt; 
&lt;p&gt;PDF.js is community-driven and supported by Mozilla. Our goal is to create a general-purpose, web standards-based platform for parsing and rendering PDFs.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;PDF.js is an open source project and always looking for more contributors. To get involved, visit:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/pdf.js/blob/master/.github/CONTRIBUTING.md&quot;&gt;Issue Reporting Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/pdf.js/wiki/Contributing&quot;&gt;Code Contribution Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/pdf.js/issues?direction=desc&amp;amp;labels=5-good-beginner-bug&amp;amp;page=1&amp;amp;sort=created&amp;amp;state=open&quot;&gt;Good Beginner Bugs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/pdf.js/projects&quot;&gt;Projects&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Feel free to stop by our &lt;a href=&quot;https://chat.mozilla.org/#/room/#pdfjs:mozilla.org&quot;&gt;Matrix room&lt;/a&gt; for questions or guidance.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Online demo&lt;/h3&gt; 
&lt;p&gt;Please note that the &quot;Modern browsers&quot; version assumes native support for features such as e.g. &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, &lt;code&gt;ReadableStream&lt;/code&gt;, optional chaining, and nullish coalescing.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Modern browsers: https://mozilla.github.io/pdf.js/web/viewer.html&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Older browsers: https://mozilla.github.io/pdf.js/legacy/web/viewer.html&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Browser Extensions&lt;/h3&gt; 
&lt;h4&gt;Firefox&lt;/h4&gt; 
&lt;p&gt;PDF.js is built into version 19+ of Firefox.&lt;/p&gt; 
&lt;h4&gt;Chrome&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The official extension for Chrome can be installed from the &lt;a href=&quot;https://chrome.google.com/webstore/detail/pdf-viewer/oemmndcbldboiebfnladdacbdfmadadm&quot;&gt;Chrome Web Store&lt;/a&gt;. &lt;em&gt;This extension is maintained by &lt;a href=&quot;https://github.com/Rob--W&quot;&gt;@Rob--W&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;Build Your Own - Get the code as explained below and issue &lt;code&gt;gulp chromium&lt;/code&gt;. Then open Chrome, go to &lt;code&gt;Tools &amp;gt; Extension&lt;/code&gt; and load the (unpackaged) extension from the directory &lt;code&gt;build/chromium&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting the Code&lt;/h2&gt; 
&lt;p&gt;To get a local copy of the current code, clone it using git:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/mozilla/pdf.js.git
$ cd pdf.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Next, install Node.js via the &lt;a href=&quot;https://nodejs.org&quot;&gt;official package&lt;/a&gt; or via &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt;. You need to install the gulp package globally (see also &lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md#getting-started&quot;&gt;gulp&#39;s getting started&lt;/a&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ npm install -g gulp-cli
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If everything worked out, install all dependencies for PDF.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, you need to start a local web server as some browsers do not allow opening PDF files using a &lt;code&gt;file://&lt;/code&gt; URL. Run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ gulp server
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and then you can open:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;http://localhost:8888/web/viewer.html&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please keep in mind that this requires a modern and fully up-to-date browser; refer to &lt;a href=&quot;https://github.com/mozilla/pdf.js/blob/master/README.md#building-pdfjs&quot;&gt;Building PDF.js&lt;/a&gt; for non-development usage of the PDF.js library.&lt;/p&gt; 
&lt;p&gt;It is also possible to view all test PDF files on the right side by opening:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;http://localhost:8888/test/pdfs/?frame&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building PDF.js&lt;/h2&gt; 
&lt;p&gt;In order to bundle all &lt;code&gt;src/&lt;/code&gt; files into two production scripts and build the generic viewer, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ gulp generic
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to support older browsers, run:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ gulp generic-legacy
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will generate &lt;code&gt;pdf.js&lt;/code&gt; and &lt;code&gt;pdf.worker.js&lt;/code&gt; in the &lt;code&gt;build/generic/build/&lt;/code&gt; directory (respectively &lt;code&gt;build/generic-legacy/build/&lt;/code&gt;). Both scripts are needed but only &lt;code&gt;pdf.js&lt;/code&gt; needs to be included since &lt;code&gt;pdf.worker.js&lt;/code&gt; will be loaded by &lt;code&gt;pdf.js&lt;/code&gt;. The PDF.js files are large and should be minified for production.&lt;/p&gt; 
&lt;h2&gt;Using PDF.js in a web application&lt;/h2&gt; 
&lt;p&gt;To use PDF.js in a web application you can choose to use a pre-built version of the library or to build it from source. We supply pre-built versions for usage with NPM and Bower under the &lt;code&gt;pdfjs-dist&lt;/code&gt; name. For more information and examples please refer to the &lt;a href=&quot;https://github.com/mozilla/pdf.js/wiki/Setup-pdf.js-in-a-website&quot;&gt;wiki page&lt;/a&gt; on this subject.&lt;/p&gt; 
&lt;h2&gt;Including via a CDN&lt;/h2&gt; 
&lt;p&gt;PDF.js is hosted on several free CDNs:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://www.jsdelivr.com/package/npm/pdfjs-dist&lt;/li&gt; 
 &lt;li&gt;https://cdnjs.com/libraries/pdf.js&lt;/li&gt; 
 &lt;li&gt;https://unpkg.com/pdfjs-dist/&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learning&lt;/h2&gt; 
&lt;p&gt;You can play with the PDF.js API directly from your browser using the live demos below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mozilla.github.io/pdf.js/examples/index.html#interactive-examples&quot;&gt;Interactive examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;More examples can be found in the &lt;a href=&quot;https://github.com/mozilla/pdf.js/tree/master/examples/&quot;&gt;examples folder&lt;/a&gt;. Some of them are using the pdfjs-dist package, which can be built and installed in this repo directory via &lt;code&gt;gulp dist-install&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;For an introduction to the PDF.js code, check out the presentation by our contributor Julian Viereck:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://www.youtube.com/watch?v=Iv15UY-4Fg8&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;More learning resources can be found at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://github.com/mozilla/pdf.js/wiki/Additional-Learning-Resources&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The API documentation can be found at:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://mozilla.github.io/pdf.js/api/&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Questions&lt;/h2&gt; 
&lt;p&gt;Check out our FAQs and get answers to common questions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Talk to us on Matrix:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://chat.mozilla.org/#/room/#pdfjs:mozilla.org&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;File an issue:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://github.com/mozilla/pdf.js/issues/new&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Follow us on twitter: @pdfjs&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://twitter.com/pdfjs&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>moment/moment</title>
      <link>https://github.com/moment/moment</link>
      <description>&lt;p&gt;Parse, validate, manipulate, and display dates in javascript.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;http://momentjs.com/&quot;&gt;Moment.js&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/moment&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/moment.svg?style=flat&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmcharts.com/compare/moment?minimal=true&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/moment.svg?style=flat&quot; alt=&quot;NPM downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/moment/moment/develop/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?style=flat&quot; alt=&quot;MIT License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/moment/moment&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/moment/moment/develop.svg?style=flat&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/moment/moment?branch=develop&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/moment/moment/badge.svg?branch=develop&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fmoment%2Fmoment?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fmoment%2Fmoment.svg?type=shield&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dependabot.com/compatibility-score.html?dependency-name=moment&amp;amp;package-manager=npm_and_yarn&amp;amp;version-scheme=semver&quot;&gt;&lt;img src=&quot;https://api.dependabot.com/badges/compatibility_score?dependency-name=moment&amp;amp;package-manager=npm_and_yarn&amp;amp;version-scheme=semver&quot; alt=&quot;SemVer compatibility&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/p&gt; 
&lt;h2&gt;Project Status&lt;/h2&gt; 
&lt;p&gt;Moment.js is a legacy project, now in maintenance mode. In most cases, you should choose a different library.&lt;/p&gt; 
&lt;p&gt;For more details and recommendations, please see &lt;a href=&quot;https://momentjs.com/docs/#/-project-status/&quot;&gt;Project Status&lt;/a&gt; in the docs.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Thank you.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://momentjs.com/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/moment/moment/develop/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/tagged/momentjs&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Moment.js is freely distributable under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/moment/moment/develop/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fmoment%2Fmoment?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fmoment%2Fmoment.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lgwebdream/FE-Interview</title>
      <link>https://github.com/lgwebdream/FE-Interview</link>
      <description>&lt;p&gt;üî•üî•üî• ÂâçÁ´ØÈù¢ËØïÔºåÁã¨ÊúâÂâçÁ´ØÈù¢ËØïÈ¢òËØ¶Ëß£ÔºåÂâçÁ´ØÈù¢ËØïÂà∑È¢òÂøÖÂ§áÔºå1000+ÂâçÁ´ØÈù¢ËØïÁúüÈ¢òÔºåHtml„ÄÅCss„ÄÅJavaScript„ÄÅVue„ÄÅReact„ÄÅNode„ÄÅTypeScript„ÄÅWebpack„ÄÅÁÆóÊ≥ï„ÄÅÁΩëÁªú‰∏éÂÆâÂÖ®„ÄÅÊµèËßàÂô®&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;‚òï ÂâçÁ´ØÈù¢ËØïÊØèÊó•‰∏ÄÈ¢ò&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;ÊØèÂ§© get ‰∏Ä‰∏™Áü•ËØÜÁÇπ&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Day282:Ê†πÊçÆÊØèÊó•Ê∞îÊ∏©ÂàóË°®ÔºåËØ∑ÈáçÊñ∞ÁîüÊàê‰∏Ä‰∏™ÂàóË°®ÔºåÂØπÂ∫î‰ΩçÁΩÆÁöÑËæìÂá∫ÊòØÈúÄË¶ÅÂÜçÁ≠âÂæÖÂ§ö‰πÖÊ∏©Â∫¶Êâç‰ºöÂçáÈ´òË∂ÖËøáËØ•Êó•ÁöÑÂ§©Êï∞„ÄÇÂ¶ÇÊûú‰πãÂêéÈÉΩ‰∏ç‰ºöÂçáÈ´òÔºåËØ∑Âú®ËØ•‰ΩçÁΩÆÁî® 0 Êù•‰ª£Êõø„ÄÇ&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ‰æãÂ¶ÇÔºåÁªôÂÆö‰∏Ä‰∏™ÂàóË°® temperatures = [73, 74, 75, 71, 69, 72, 76, 73]Ôºå‰Ω†ÁöÑËæìÂá∫Â∫îËØ•ÊòØ [1, 1, 4, 2, 1, 1, 0, 0]„ÄÇ
// ÊèêÁ§∫ÔºöÊ∞îÊ∏© ÂàóË°®ÈïøÂ∫¶ÁöÑËåÉÂõ¥ÊòØ [1, 30000]„ÄÇÊØè‰∏™Ê∞îÊ∏©ÁöÑÂÄºÁöÑÂùá‰∏∫ÂçéÊ∞èÂ∫¶ÔºåÈÉΩÊòØÂú® [30, 10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1103&quot;&gt;Á≠îÊ°à&amp;amp;Ëß£Êûê&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;üìö ÂâçÁ´ØÈù¢ËØïÈ¢òÊ±áÊÄª&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues&quot;&gt;ÂÖ®ÈÉ®Èù¢ËØïÈ¢òÊ±áÊÄª&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;üì± ÊâãÊú∫Âà∑È¢ò(ÈôÑÂ∏¶ËØ¶ÁªÜÁ≠îÊ°à)&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‰∫åÁª¥Á†ÅÂä†ËΩΩÂ§±Ë¥•ËØ∑ÁÇπÂáª &lt;a href=&quot;http://img-static.yidengxuetang.com/wxapp/issue-img/wxqr-github.png&quot;&gt;ÂÖ•Âè£&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;‚è±Ô∏è ÊúÄËøëÊõ¥Êñ∞&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1102&quot;&gt;Day281:ÁªôÂÆö‰∏Ä‰∏™ÈìæË°®ÔºåËøîÂõûÈìæË°®ÂºÄÂßãÂÖ•ÁéØÁöÑÁ¨¨‰∏Ä‰∏™ÁªìÁÇπ„ÄÇ Â¶ÇÊûúÈìæË°®Êó†ÁéØÔºåÂàôËøîÂõû null„ÄÇ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1101&quot;&gt;Day280:ÁªôÂÆö‰∏Ä‰∏™ÈìæË°®ÔºåÂ¶Ç‰ΩïÂà§Êñ≠ÈìæË°®ÊòØÂê¶ÊúâÁéØÔºü&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1100&quot;&gt;Day279:ÂèçËΩ¨‰ªé‰ΩçÁΩÆ m Âà∞ n ÁöÑÈìæË°®„ÄÇËØ∑‰ΩøÁî®‰∏ÄË∂üÊâ´ÊèèÂÆåÊàêÂèçËΩ¨„ÄÇ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1099&quot;&gt;Day278:ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËæìÂÖ•‰∏Ä‰∏™ÈìæË°®ÁöÑÂ§¥ÁªìÁÇπÔºåÂèçËΩ¨ËØ•ÈìæË°®Âπ∂ËæìÂá∫ÂèçËΩ¨ÂêéÈìæË°®ÁöÑÂ§¥ÁªìÁÇπ„ÄÇ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1098&quot;&gt;Day277:ÁªôÂÆö‰∏Ä‰∏™ÈìæË°®ÔºåÂà†Èô§ÈìæË°®ÁöÑÂÄíÊï∞Á¨¨ n ‰∏™ÁªìÁÇπÔºåÂπ∂‰∏îËøîÂõûÈìæË°®ÁöÑÂ§¥ÁªìÁÇπ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1097&quot;&gt;Day276:ÁªôÂÆö‰∏Ä‰∏™ÊéíÂ∫èÈìæË°®ÔºåÂà†Èô§ÊâÄÊúâÂê´ÊúâÈáçÂ§çÊï∞Â≠óÁöÑÁªìÁÇπÔºåÂè™‰øùÁïôÂéüÂßãÈìæË°®‰∏≠Ê≤°ÊúâÈáçÂ§çÂá∫Áé∞ÁöÑÊï∞Â≠ó„ÄÇ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1096&quot;&gt;Day275:ËæìÂÖ•‰∏§‰∏™ÈÄíÂ¢ûÊéíÂ∫èÁöÑÈìæË°®ÔºåÂêàÂπ∂Ëøô‰∏§‰∏™ÈìæË°®Âπ∂‰ΩøÊñ∞ÈìæË°®‰∏≠ÁöÑËäÇÁÇπ‰ªçÁÑ∂ÊòØÈÄíÂ¢ûÊéíÂ∫èÁöÑ„ÄÇ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1095&quot;&gt;Day274:ËÆæËÆ° AutoComplete ÁªÑ‰ª∂(ÂèàÂè´ÊêúÁ¥¢ÁªÑ‰ª∂„ÄÅËá™Âä®Ë°•ÂÖ®ÁªÑ‰ª∂Á≠â)Êó∂ÔºåÈúÄË¶ÅËÄÉËôë‰ªÄ‰πàÈóÆÈ¢òÔºü&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1094&quot;&gt;Day273:ÂÜôÂá∫ÊâßË°åÁªìÊûúÔºåÂπ∂Ëß£Èáä‰∏∫‰ªÄ‰πàÔºü&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1093&quot;&gt;Day272:ËÆæËÆ°‰∏Ä‰∏™ÊîØÊåÅ‰∏§ÁßçÊìç‰ΩúÁöÑÊï∞ÊçÆÁªìÊûÑ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1092&quot;&gt;Day271:ÁªôÂÆö‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ sÔºåÊúÄÂ§öÂà†Èô§‰∏Ä‰∏™Â≠óÁ¨¶„ÄÇÂà§Êñ≠ÊòØÂê¶ËÉΩÊàê‰∏∫ÂõûÊñáÂ≠óÁ¨¶‰∏≤„ÄÇ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1091&quot;&gt;Day270:Áªô‰Ω†‰∏Ä‰∏™ÂåÖÂê´ n ‰∏™Êï¥Êï∞ÁöÑÊï∞ÁªÑ numsÔºåÂà§Êñ≠ nums ‰∏≠ÊòØÂê¶Â≠òÂú®‰∏â‰∏™ÂÖÉÁ¥† aÔºåbÔºåc Ôºå‰ΩøÂæó a + b + c = 0 ÔºüËØ∑‰Ω†ÊâæÂá∫ÊâÄÊúâÊª°Ë∂≥Êù°‰ª∂‰∏î‰∏çÈáçÂ§çÁöÑ‰∏âÂÖÉÁªÑ„ÄÇ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1090&quot;&gt;Day269:Áªô‰Ω†‰∏§‰∏™ÊúâÂ∫èÊï¥Êï∞Êï∞ÁªÑ nums1 Âíå nums2ÔºåËØ∑‰Ω†Â∞Ü nums2 ÂêàÂπ∂Âà∞ nums1 ‰∏≠Ôºå‰Ωø nums1 Êàê‰∏∫‰∏Ä‰∏™ÊúâÂ∫èÊï∞ÁªÑ„ÄÇ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1089&quot;&gt;Day268:ËØ∑‰øÆÊîπ‰ª£Á†ÅË∑≥Âá∫Ê≠ªÂæ™ÁéØ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1088&quot;&gt;Day267:ËØ∑ÂÜôÂá∫ÊâßË°åÁªìÊûú,Âπ∂Ëß£ÈáäÂéüÂõ†&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1087&quot;&gt;Day266:ÂÜôÂá∫‰∏ãÈù¢‰ª£Á†ÅÁªìÊûúÔºåÂπ∂Ëß£Èáä‰∏∫‰ªÄ‰πàÔºü&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1085&quot;&gt;Day265:‰∫ÜËß£Ëøá RPC ÂêóÔºåÁÆÄÂçïËØ¥‰∏Ä‰∏ã?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1084&quot;&gt;Day264:ËØ∑ÂÆûÁé∞ uncurring ÂÆåÊàêÂáΩÊï∞ÊüØÈáåÂåñ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1082&quot;&gt;Day263:ËØ∑ÂÜôÂá∫‰ª•‰∏ã‰ª£Á†ÅÁªìÊûúÔºåÂπ∂Ëß£Èáä‰∏∫‰ªÄ‰πàÔºü&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1081&quot;&gt;Day262:‰∏∫‰ªÄ‰πà WeakMap Âíå WeakSet ÁöÑÈîÆÂè™ËÉΩ‰ΩøÁî®ÂØπË±°ÔºüÂú®‰ªÄ‰πàÂú∫ÊôØ‰∏ã‰ΩøÁî®Ôºü&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üè† ÂâçÁ´ØÈù¢ËØï Family&lt;/h2&gt; 
&lt;p&gt;Â¶ÇÊûú‰Ω†Âú®Â∑•‰Ωú‰∏≠ÈÅáÂà∞ÈóÆÈ¢ò„ÄÅÂú®Èù¢ËØï‰∏≠ÈÅáÂà∞ÁñëÊÉë„ÄÅÂú®ÂâçÁ´ØË∑Ø‰∏äÈÅáÂà∞‰∫ÜÈòªÁ¢çÔºåÈÉΩÂèØ‰ª•Âä†ÂÖ•Êàë‰ª¨ÂâçÁ´ØÊòüÁêÉ FamilyÔºåÊàë‰ª¨‰ºöÁ´≠Â∞ΩÂÖ®Âäõ‰∏∫Â§ßÂÆ∂Á≠îÁñëËß£ÊÉëÔºåËÆ©Êàë‰ª¨ÂÖ±ÂêåÂä™ÂäõÔºå‰∏ÄÂêåÊàêÈïø„ÄÇ&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;ÁâàÊùÉËÆ∏ÂèØ&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;http://img-static.yidengxuetang.com/wxapp/github-img/copyright.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Êú¨‰ΩúÂìÅÈááÁî®&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot;&gt;Áü•ËØÜÂÖ±‰∫´ÁΩ≤Âêç-ÈùûÂïÜ‰∏öÊÄß‰ΩøÁî® 4.0 ÂõΩÈôÖËÆ∏ÂèØÂçèËÆÆ&lt;/a&gt;ËøõË°åËÆ∏ÂèØÔºåÂè™Ë¶Å‰øùÊåÅÂéü‰ΩúËÄÖÁΩ≤ÂêçÂíåÈùûÂïÜÁî®ÔºåÊÇ®ÂèØ‰ª•Ëá™Áî±Âú∞ÈòÖËØª„ÄÅÂàÜ‰∫´„ÄÅ‰øÆÊîπ„ÄÇ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bradtraversy/proshop_mern</title>
      <link>https://github.com/bradtraversy/proshop_mern</link>
      <description>&lt;p&gt;Shopping cart built with MERN &amp; Redux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ProShop eCommerce Platform&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;eCommerce platform built with the MERN stack &amp;amp; Redux.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This is the course project for my &lt;a href=&quot;https://www.udemy.com/course/mern-ecommerce&quot;&gt;MERN eCommerce From Scratch&lt;/a&gt; course&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/bradtraversy/proshop_mern/blob/master/uploads/Screen%20Shot%202020-09-29%20at%205.50.52%20PM.png&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Full featured shopping cart&lt;/li&gt; 
 &lt;li&gt;Product reviews and ratings&lt;/li&gt; 
 &lt;li&gt;Top products carousel&lt;/li&gt; 
 &lt;li&gt;Product pagination&lt;/li&gt; 
 &lt;li&gt;Product search feature&lt;/li&gt; 
 &lt;li&gt;User profile with orders&lt;/li&gt; 
 &lt;li&gt;Admin product management&lt;/li&gt; 
 &lt;li&gt;Admin user management&lt;/li&gt; 
 &lt;li&gt;Admin Order details page&lt;/li&gt; 
 &lt;li&gt;Mark orders as delivered option&lt;/li&gt; 
 &lt;li&gt;Checkout process (shipping, payment method, etc)&lt;/li&gt; 
 &lt;li&gt;PayPal / credit card integration&lt;/li&gt; 
 &lt;li&gt;Database seeder (products &amp;amp; users)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Note on Issues&lt;/h2&gt; 
&lt;p&gt;Please do not post issues here that are related to your own code when taking the course. Add those in the Udemy Q/A. If you clone THIS repo and there are issues, then you can submit&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;ES Modules in Node&lt;/h3&gt; 
&lt;p&gt;We us ECMAScript Modules in the backend in this project. Be sure to have at least Node v14.6+ or you will need to add the &quot;--experimental-modules&quot; flag.&lt;/p&gt; 
&lt;p&gt;Also, when importing a file (not a package), be sure to add .js at the end or you will get a &quot;module not found&quot; error&lt;/p&gt; 
&lt;p&gt;You can also install and setup Babel if you would like&lt;/p&gt; 
&lt;h3&gt;Env Variables&lt;/h3&gt; 
&lt;p&gt;Create a .env file in then root and add the following&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;NODE_ENV = development
PORT = 5000
MONGO_URI = your mongodb uri
JWT_SECRET = &#39;abc123&#39;
PAYPAL_CLIENT_ID = your paypal client id
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install Dependencies (frontend &amp;amp; backend)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm install
cd frontend
npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;# Run frontend (:3000) &amp;amp; backend (:5000)
npm run dev

# Run backend only
npm run server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Build &amp;amp; Deploy&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;# Create frontend prod build
cd frontend
npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is a Heroku postbuild script, so if you push to Heroku, no need to build manually for deployment to Heroku&lt;/p&gt; 
&lt;h3&gt;Seed Database&lt;/h3&gt; 
&lt;p&gt;You can use the following commands to seed the database with some sample users and products as well as destroy all data&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Import data
npm run data:import

# Destroy data
npm run data:destroy
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code&gt;Sample User Logins

admin@example.com (Admin)
123456

john@example.com (Customer)
123456

jane@example.com (Customer)
123456
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The MIT License&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2020 Traversy Media https://traversymedia.com&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>haizlin/fe-interview</title>
      <link>https://github.com/haizlin/fe-interview</link>
      <description>&lt;p&gt;ÂâçÁ´ØÈù¢ËØïÊØèÊó• 3+1Ôºå‰ª•Èù¢ËØïÈ¢òÊù•È©±Âä®Â≠¶‰π†ÔºåÊèêÂÄ°ÊØèÊó•Â≠¶‰π†‰∏éÊÄùËÄÉÔºåÊØèÂ§©ËøõÊ≠•‰∏ÄÁÇπÔºÅÊØèÂ§©Êó©‰∏ä5ÁÇπÁ∫ØÊâãÂ∑•ÂèëÂ∏ÉÈù¢ËØïÈ¢òÔºàÊ≠ªÁ£ïËá™Â∑±ÔºåÊÑâÊÇ¶Â§ßÂÆ∂ÔºâÔºå4000+ÈÅìÂâçÁ´ØÈù¢ËØïÈ¢òÂÖ®Èù¢Ë¶ÜÁõñÔºåHTML/CSS/JavaScript/Vue/React/Nodejs/TypeScript/ECMAScritpt/Webpack/Jquery/Â∞èÁ®ãÂ∫è/ËΩØÊäÄËÉΩ‚Ä¶‚Ä¶&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://www.h-camel.com/index.html&quot;&gt;ÂÆòÁΩë&lt;/a&gt; | &lt;a href=&quot;https://github.com/haizlin/fe-interview/blob/master/README.md&quot;&gt;‰∏≠Êñá&lt;/a&gt; | &lt;a href=&quot;https://github.com/haizlin/fe-interview/blob/master/README-en.md&quot;&gt;English&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;:star: ËøôÊòØ‰∏Ä‰∏™Ê∂âÂèäÂâçÁ´ØÁü•ËØÜÈ¢òÂ∫ì &lt;strong&gt;ÊúÄÂ§öÔºà4000+Ôºâ„ÄÅÊúÄÂÖ®&lt;/strong&gt;ÔºåÂèÇ‰∏é‰∫∫Êï∞ÊúÄÂ§öÁöÑÂÖçË¥πÂºÄÊ∫êÈ°πÁõÆÔºÅ&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;:hash: &lt;a href=&quot;http://www.h-camel.com/contribution.html&quot;&gt;Êàë‰πüË¶ÅÂá∫È¢ò&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;| :bulb: Âü∫Á°Ä | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/html.md&quot;&gt;HTML 700+&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/css.md&quot;&gt;CSS 700+&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/js.md&quot;&gt;JS 700+&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/skill.md&quot;&gt;ËΩØÊäÄËÉΩ 700+&lt;/a&gt; | | | | | :---: | :---- | :--- | :---- | :---- | :---- | :---- | :---- | | :newspaper: ‰∏ìÈ¢ò | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/lib/Vue.md&quot;&gt;Vue 296+&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/lib/React.md&quot;&gt;React 338+&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/lib/AngularJs.md&quot;&gt;AngularJs&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/ECMAScript.md&quot;&gt;ECMAScript 45+&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/nodejs.md&quot;&gt;NodeJs 90+&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/lib/jQuery.md&quot;&gt;jQuery&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/lib/wxapp.md&quot;&gt;Â∞èÁ®ãÂ∫è&lt;/a&gt; | | :hammer: Â∑•ÂÖ∑ | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/tools/webpack.md&quot;&gt;webpack 13+&lt;/a&gt; | | :coffee: Ê±áÊÄª | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/week.md&quot;&gt;Âë®&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/history.md&quot;&gt;ÂéÜÂè≤È¢òÁõÆ&lt;/a&gt; |&lt;/p&gt; 
&lt;h2&gt;:clock430: ‰ªäÂ§©ÁöÑÁü•ËØÜÁÇπ (2021.04.18) ‚Äî‚Äî Á¨¨733Â§©&lt;/h2&gt; 
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;:one: [html] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3829&quot;&gt;H5Â¶Ç‰ΩïÁ¶ÅÊ≠¢ÊóãËΩ¨Â±èÂπïÊó∂ÁöÑÂ≠ó‰ΩìË∞ÉÊï¥Ôºü&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;:two: [css] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3830&quot;&gt;Áî®cssÁîª‰∏ÄÊääÂ∏¶ÂàªÂ∫¶ÁöÑÂ∞∫ÂØ∏&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;:three: [js] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3831&quot;&gt;ËØ¥ËØ¥‰Ω†ÂØπhasOwnPropertyÁöÑÁêÜËß£&lt;/a&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;:four: [ËΩØÊäÄËÉΩ] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3832&quot;&gt;‰Ω†ËÆ§‰∏∫ÂºÄÂèë‰∫∫ÂëòÂíå‰∫ßÂìÅ‰∫∫ÂëòÊÄéÊ†∑ÊâçËÉΩÂÅöÂà∞Êõ¥Â•ΩÁöÑÂπ≥Ë°°Ôºü&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;:camel: ÂéÜÂè≤È¢òÁõÆ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Á¨¨1Â§© (2019.04.17)&lt;br&gt; :one: [html] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/1&quot;&gt;È°µÈù¢ÂØºÂÖ•Ê†∑ÂºèÊó∂Ôºå‰ΩøÁî®linkÂíå@importÊúâ‰ªÄ‰πàÂå∫Âà´Ôºü&lt;/a&gt;&lt;br&gt; :two: [css] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/2&quot;&gt;Âú£ÊùØÂ∏ÉÂ±ÄÂíåÂèåÈ£ûÁøºÂ∏ÉÂ±ÄÁöÑÁêÜËß£ÂíåÂå∫Âà´ÔºåÂπ∂Áî®‰ª£Á†ÅÂÆûÁé∞&lt;/a&gt;&lt;br&gt; :three: [js] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3&quot;&gt;Áî®ÈÄíÂΩíÁÆóÊ≥ïÂÆûÁé∞ÔºåÊï∞ÁªÑÈïøÂ∫¶‰∏∫5‰∏îÂÖÉÁ¥†ÁöÑÈöèÊú∫Êï∞Âú®2-32Èó¥‰∏çÈáçÂ§çÁöÑÂÄº&lt;/a&gt;&lt;/p&gt; &lt;p&gt;‚Ä¶‚Ä¶‚Ä¶‚Ä¶&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Á¨¨732Â§© (2021.04.17)&lt;br&gt; :one: [html] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3825&quot;&gt;H5Â¶Ç‰ΩïÊîØÊåÅÂºπÊÄßÊªöÂä®Ôºü&lt;/a&gt;&lt;br&gt; :two: [css] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3826&quot;&gt;Áî®cssÁÆÄÁîª‰∏Ä‰∏™Ë°åËµ∞ÁöÑ‰∫∫Âä®ÁîªÊïàÊûú&lt;/a&gt;&lt;br&gt; :three: [js] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3827&quot;&gt;‰∏çÂêåËøõÂà∂Êï∞Â≠óÂ¶Ç‰ΩïË°®Á§∫Ôºü&lt;/a&gt;&lt;br&gt; :four: [ËΩØÊäÄËÉΩ] &lt;a href=&quot;https://github.com/haizlin/fe-interview/issues/3828&quot;&gt;ËØ¥ËØ¥‰Ω†ÂØπÂÜ∞Â±±ÁêÜËÆ∫ÁöÑÁêÜËß£&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/category/history.md&quot;&gt;Êü•ÁúãÂÖ®ÈÉ®&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;:baby_chick: ‰∫§ÊµÅËÆ®ËÆ∫&lt;/h3&gt; 
&lt;p&gt;Ê¨¢ËøéÂ§ßÂÆ∂ÂâçÊù•ËÆ®ËÆ∫ÔºåÂ¶ÇÊûúËßâÂæóÂØπ‰Ω†ÁöÑÂ≠¶‰π†Êúâ‰∏ÄÂÆöÁöÑÂ∏ÆÂä©ÔºåÊ¨¢ËøéÁÇπ‰∏™&lt;a href=&quot;https://github.com/haizlin/fe-interview&quot;&gt;&lt;strong&gt;Star&lt;/strong&gt;&lt;/a&gt;, ÂêåÊó∂Ê¨¢ËøéÂæÆ‰ø°Êâ´Á†ÅÂÖ≥Ê≥® &lt;strong&gt;ÂâçÁ´ØÂâëËß£&lt;/strong&gt; ÂÖ¨‰ºóÂè∑ÔºåÂπ∂Âä†ÂÖ• &lt;strong&gt;‚ÄúÂâçÁ´ØÂ≠¶‰π†ÊØèÊó•3+1‚Äù&lt;/strong&gt; ÂæÆ‰ø°Áæ§Áõ∏‰∫í‰∫§ÊµÅÔºàÁÇπÂáªÂÖ¨‰ºóÂè∑ÁöÑËèúÂçïÔºöËøõÁæ§‰∫§ÊµÅÔºâ„ÄÇ&lt;/p&gt; 
&lt;p&gt;:point_right: &lt;a href=&quot;https://v.youku.com/v_show/id_XNDI2NDUyOTY2MA==.html?spm=a2h3j.8428770.3416059.1&quot;&gt;ÁÇπÂáªÊü•Áúã ‚ÄúÂçìË∂ä-‰πùÂë®Âπ¥‚Äù ËßÜÈ¢ë&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:smiley: ÂØÑËØ≠&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;„ÄäËÆ∫ËØ≠„ÄãÔºåÊõæÂ≠êÊõ∞Ôºö&lt;strong&gt;‚ÄúÂêæÊó•‰∏âÁúÅÂêæË∫´‚Äù&lt;/strong&gt;ÔºàÊàëÊØèÂ§©Â§öÊ¨°ÂèçÁúÅËá™Â∑±Ôºâ&lt;/li&gt; 
 &lt;li&gt;Â≠îÂ≠êÊõ∞Ôºö&lt;strong&gt;‚Äú‰∏çÊÑ§‰∏çÂêØÔºå‰∏çÊÇ±‰∏çÂèë„ÄÇ‰∏æ‰∏ÄÈöÖ‰∏ç‰ª•‰∏âÈöÖÂèçÔºåÂàô‰∏çÂ§ç‰πü‚Äù&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;ÂâçÁ´ØÈù¢ËØïÊØèÊó•3+1Ôºå‰ª•Èù¢ËØïÈ¢òÊù•È©±Âä®Â≠¶‰π†ÔºåÊØèÂ§©ËøõÊ≠•‰∏ÄÁÇπÔºÅ&lt;/li&gt; 
 &lt;li&gt;Â≠¶‰π†‰∏çÊâìÁÉäÔºåÂÖÖÁîµÂä†Ê≤πÂè™‰∏∫&lt;strong&gt;ÈÅáÂà∞Êõ¥Â•ΩÁöÑËá™Â∑±&lt;/strong&gt;Ôºå365Â§©Êó†ËäÇÂÅáÊó•Ôºå&lt;strong&gt;ÊØèÂ§©Êó©‰∏ä5ÁÇπ&lt;/strong&gt;Á∫ØÊâãÂ∑•ÂèëÂ∏ÉÈù¢ËØïÈ¢òÔºà&lt;strong&gt;Ê≠ªÁ£ïËá™Â∑±ÔºåÊÑâÊÇ¶Â§ßÂÆ∂&lt;/strong&gt;Ôºâ„ÄÇ&lt;/li&gt; 
 &lt;li&gt;Â∏åÊúõÂ§ßÂÆ∂Âú®Ëøô&lt;strong&gt;ÊµÆÂ§∏&lt;/strong&gt;ÁöÑÂâçÁ´ØÂúàÈáåÔºå‰øùÊåÅ&lt;strong&gt;ÂÜ∑Èùô&lt;/strong&gt;ÔºåÂùöÊåÅÊØèÂ§©Ëä±20ÂàÜÈíüÊù•Â≠¶‰π†‰∏éÊÄùËÄÉ„ÄÇ&lt;/li&gt; 
 &lt;li&gt;Âú®ËøôÂçÉÂèò‰∏áÂåñÔºåÁ±ªÂ∫ìÂ±ÇÂá∫‰∏çÁ©∑ÁöÑÂâçÁ´ØÔºåÂª∫ËÆÆÂ§ßÂÆ∂‰∏çË¶ÅÁ≠âÂà∞ÊâæÂ∑•‰ΩúÊó∂ÔºåÊâçÁãÇÂà∑È¢òÔºåÊèêÂÄ°&lt;strong&gt;ÊØèÊó•Â≠¶‰π†&lt;/strong&gt;ÔºÅÔºà&lt;strong&gt;‰∏çÂøòÂàùÂøÉ&lt;/strong&gt;Ôºåhtml„ÄÅcss„ÄÅjavascriptÊâçÊòØÂü∫Áü≥ÔºÅÔºâ&lt;/li&gt; 
 &lt;li&gt;ËÆ©Âä™ÂäõÊàê‰∏∫‰∏ÄÁßç‰π†ÊÉØÔºåËÆ©Â•ãÊñóÊàê‰∏∫‰∏ÄÁßç‰∫´ÂèóÔºÅ&lt;/li&gt; 
 &lt;li&gt;Áõ∏‰ø° &lt;strong&gt;ÂùöÊåÅ&lt;/strong&gt; ÁöÑÂäõÈáèÔºÅÔºÅÔºÅ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;:question: Â¶Ç‰ΩïÂ≠¶‰π†&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;‰∏çÁÆ°È¢òÁõÆÊáÇ‰∏é‰∏çÊáÇÈÉΩË¶ÅÂÖàÊÄùËÄÉÂÜçÁôæÂ∫¶ÔºåÊÄùËÄÉÂêé‰∏ÄÂÆöË¶ÅÂéªÂÜôÂá∫Êù•&lt;/li&gt; 
 &lt;li&gt;Â¶ÇÊûúÊòØÂéüÁîüjsÁöÑÈ¢òÔºå‰∏çË¶Å‰æùËµñ‰ΩøÁî®Á¨¨‰∏âÊñπÂ∫ìÔºåÂ¶ÇjqueryÁ≠â&lt;/li&gt; 
 &lt;li&gt;ÊØèÂ§©ÁöÑÈ¢òÁõÆÈÉΩÊòØÁã¨Á´ãÁöÑÔºå‰∏çÈúÄË¶ÅÊåâÈ°∫Â∫èÊù•Ôºå‰ΩÜÂª∫ËÆÆÊØèÈÅìÈ¢òÈÉΩÂéªÁ≠î‰∏ãÔºåÊúâ‰Ω†‰ºöÁöÑÂíåÊúâ‰Ω†‰∏ç‰ºöÁöÑÔºåÁ≠î‰∫ÜÊâçÁü•ÈÅì&lt;/li&gt; 
 &lt;li&gt;‰∏çÊáÇÁöÑÈ¢òÁôæÂ∫¶Â≠¶‰π†ÂêéÔºå‰∏çË¶ÅÁõ¥Êé•Â§çÂà∂‰∏ÄÂ§ßÊÆµËøáÊù•ÔºåË¶ÅÁî®Ëá™Â∑±ÁöÑËØùÁ≤æÁÆÄÂú∞ÊÄªÁªìÊ¶ÇÊã¨Âá∫Êù•&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;:palm_tree: ÂêåÊ≠•Êõ¥Êñ∞&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/u013778905&quot;&gt;ÂâçÁ´ØÂêëÊúî-CSDN&lt;/a&gt; | &lt;a href=&quot;https://juejin.im/user/5b5ff865f265da0f6b771700/posts&quot;&gt;ÊéòÈáë‰∏ìÊ†è&lt;/a&gt; | &lt;a href=&quot;https://zhuanlan.zhihu.com/fe-interview&quot;&gt;Áü•‰πé‰∏ìÊ†è&lt;/a&gt; | &lt;a href=&quot;https://github.com/haizlin/fe-interview&quot;&gt;Github&lt;/a&gt; | &lt;a href=&quot;https://gitee.com/haizhilin/fe-interview&quot;&gt;Gitee&lt;/a&gt; | &lt;a href=&quot;https://www.jianshu.com/c/1ba24fbe0006&quot;&gt;ÁÆÄ‰π¶‰∏ìÊ†è&lt;/a&gt; | &lt;a href=&quot;https://segmentfault.com/blog/frontend-interview&quot;&gt;segmentfault‰∏ìÊ†è&lt;/a&gt; | &lt;a href=&quot;https://weibo.com/haizlin&quot;&gt;Êñ∞Êµ™ÂæÆÂçö&lt;/a&gt; | &lt;a href=&quot;https://toutiao.io/subjects/359261&quot;&gt;ÂºÄÂèëËÄÖÂ§¥Êù°‰∏ìÊ†è&lt;/a&gt; | &lt;a href=&quot;https://www.kancloud.cn/aya001001/fe-interview&quot;&gt;Áúã‰∫ë&lt;/a&gt; | ÂâçÁ´ØÂâëËß£(Êâ´Á†ÅÂÖ≥Ê≥®)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;:fire: ÈáçÂ§ß‰∫ã‰ª∂&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/resource/md/event.md&quot;&gt;Êü•ÁúãÊõ¥Â§ö&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;:family: ÂèãÊÉÖÈìæÊé•&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;„ÄêÊé®Ëçê„ÄëÊ¨¢ËøéË∑ü jsliang ‰∏ÄËµ∑ÊäòËÖæÂâçÁ´ØÔºåÁ≥ªÁªüÊï¥ÁêÜÂâçÁ´ØÁü•ËØÜÔºåÁõÆÂâçÊ≠£Âú®ÊäòËÖæ LeetCodeÔºåÊâìÁÆóÊâìÈÄöÁÆóÊ≥ï‰∏éÊï∞ÊçÆÁªìÊûÑÁöÑ‰ªªÁù£‰∫åËÑâ„ÄÇ&lt;a href=&quot;https://github.com/LiangJunrong/document-library&quot;&gt;GitHub Âú∞ÂùÄ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/haizlin/fe-interview/master/resource/md/link.md&quot;&gt;Êü•ÁúãÊõ¥Â§ö&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;:trophy: ÊÑüË∞¢&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;ÊÑüË∞¢ÊâÄÊúâ‰∏∫&quot;ÂâçÁ´ØÈù¢ËØïÊØèÊó•3+1&quot;ÂÅöÂá∫Ë¥°ÁåÆÁöÑÊúãÂèãÔºÅÔºåÂΩìÁÑ∂‰∏ç‰ªÖ‰ªÖÂè™ÊúâËøô‰∫õË¥°ÁåÆËÄÖÔºåËøôÈáåÂ∞±‰∏ç‰∏Ä‰∏ÄÂàó‰∏æ‰∫ÜÔºåÂ¶ÇÊûúÊú™Ê∑ªÂä†Âà∞Ëøô‰∏™ÂêçÂçï‰∏≠ÔºåËØ∑‰∏éÊàëËÅîÁ≥ª„ÄÇ&lt;/li&gt; 
 &lt;li&gt;ËØ∑Âú®Êèê‰∫§PRÂâçÂÖàÈòÖËØª&lt;a href=&quot;https://github.com/haizlin/fe-interview/blob/master/.github/PULL_REQUEST_TEMPLATE.md&quot;&gt;Ë¥°ÁåÆÊåáÂçó&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:exclamation: ËΩ¨ËΩΩÂ£∞Êòé&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;ËøëÊúüÔºåÁúãÂà∞ÂæàÂ§öÁΩëÁªú‰∏äÁöÑÊúãÂèãÊª•Áî®ÈìæÊé•ÔºåÊª•Áî®Èù¢ËØïÈ¢òÔºåÂåÖË£Ö‰∫Ü‰∏ãÂ∞±Êî∂Ë¥π‰∫ÜÔºåËÆ©ÊúâÈúÄË¶ÅÁöÑÊúãÂèãÊâæ‰∏çÂà∞ÊúÄÊñ∞ÁöÑËØïÈ¢òÔºåËøùËÉå‰∫ÜÊàëÁöÑÂàùË°∑ÔºåÁâπÊ∑ªÂä†‰∫Ü‰∫õÂ£∞ÊòéÔºö&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Â£∞Êòé 
  &lt;ol&gt; 
   &lt;li&gt;ÂèØ‰ª•ËΩ¨ËΩΩÈáåÈù¢ÁöÑÊâÄÊúâÈù¢ËØïÈ¢òÁî®Âà∞‰ªª‰ΩïÂú∞ÊñπÔºå‰ΩÜËØ∑Ê∑ªÂä†‰ªìÂ∫ìÁöÑÂú∞ÂùÄÔºåÂõ†‰∏∫ËΩ¨ËΩΩÂêé‰Ω†‰ª¨ÂæàÂ∞ë‰ºöÊõ¥Êñ∞‰∫ÜÔºå‰ΩÜÊ≠§‰ªìÂ∫ìÊØèÂ§©ÈÉΩ‰ºöÂáÜÊó∂Êõ¥Êñ∞„ÄÇ&lt;/li&gt; 
   &lt;li&gt;Ê≠§ÂºÄÊ∫ê‰ªìÂ∫ì‰ªé‰∏çÊî∂Âèñ‰ªª‰ΩïË¥πÁî®Ôºå&lt;strong&gt;Áé∞Âú®‰∏ç‰ºöÔºå‰ª•Âêé‰πü‰∏ç‰ºö&lt;/strong&gt;Ôºå‰πü‰∏ç‰ºöÊéàÊùÉ‰ªª‰Ωï‰∫∫/Êú∫ÊûÑËøõË°åÊî∂Ë¥π„ÄÇ&lt;/li&gt; 
   &lt;li&gt;Â§ßÂÆ∂‰∏çÈúÄË¶ÅÂØπÊ≠§‰ªìÂ∫ìËøõË°åÁà¨Ëô´ÔºåÂ¶ÇÊúâÈúÄË¶Å‰ªÄ‰πàÊ†ºÂºèÁöÑÔºåÂèØ‰ª•ÁßÅËÅäÊàëÔºåÊØîÂ¶ÇÊú¨Âú∞ÈòÖËØªÁöÑPDFÔºåÊàëÊúâÊó∂Èó¥‰ºöÂÅöÊàêPDFÁöÑÔºåÊñπ‰æøÂ§ßÂÆ∂ÔºÅ&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;:copyright: License&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/haizlin/fe-interview/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;http://api.haizlin.cn/api?mod=interview&amp;amp;ctr=issues&amp;amp;act=generateSVG&amp;amp;type=a.svg&quot; alt=&quot;MIT&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>facebook/react-native</title>
      <link>https://github.com/facebook/react-native</link>
      <description>&lt;p&gt;A framework for building native apps with React.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;React Native brings &lt;a href=&quot;https://reactjs.org/&quot;&gt;&lt;strong&gt;React&lt;/strong&gt;&#39;s&lt;/a&gt; declarative UI framework to iOS and Android. With React Native, you use native UI controls and have full access to the native platform.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Declarative.&lt;/strong&gt; React makes it painless to create interactive UIs. Declarative views make your code more predictable and easier to debug.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Component-Based.&lt;/strong&gt; Build encapsulated components that manage their state, then compose them to make complex UIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Developer Velocity.&lt;/strong&gt; See local changes in seconds. Changes to JavaScript code can be live reloaded without rebuilding the native app.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Portability.&lt;/strong&gt; Reuse code across iOS, Android, and &lt;a href=&quot;https://reactnative.dev/docs/out-of-tree-platforms&quot;&gt;other platforms&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;React Native is developed and supported by many companies and individual core contributors. Find out more in our &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ECOSYSTEM.md&quot;&gt;ecosystem overview&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-building-your-first-react-native-app&quot;&gt;Building your first React Native app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-upgrading&quot;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-how-to-contribute&quot;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üìã Requirements&lt;/h2&gt; 
&lt;p&gt;React Native apps may target iOS 11.0 and Android 5.0 (API 21) or newer. You may use Windows, macOS, or Linux as your development operating system, though building and running iOS apps is limited to macOS. Tools like &lt;a href=&quot;https://expo.io&quot;&gt;Expo&lt;/a&gt; can be used to work around this.&lt;/p&gt; 
&lt;h2&gt;üéâ Building your first React Native app&lt;/h2&gt; 
&lt;p&gt;Follow the &lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;Getting Started guide&lt;/a&gt;. The recommended way to install React Native depends on your project. Here you can find short guides for the most common scenarios:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://snack.expo.io/@hramos/hello,-world!&quot;&gt;Trying out React Native&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;Creating a New Application&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactnative.dev/docs/integration-with-existing-apps&quot;&gt;Adding React Native to an Existing Application&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üìñ Documentation&lt;/h2&gt; 
&lt;p&gt;The full documentation for React Native can be found on our &lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The React Native documentation discusses components, APIs, and topics that are specific to React Native. For further documentation on the React API that is shared between React Native and React DOM, refer to the &lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;React documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The source for the React Native documentation and website is hosted on a separate repo, &lt;a href=&quot;https://github.com/facebook/react-native-website&quot;&gt;&lt;strong&gt;@facebook/react-native-website&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üöÄ Upgrading&lt;/h2&gt; 
&lt;p&gt;Upgrading to new versions of React Native may give you access to more APIs, views, developer tools, and other goodies. See the &lt;a href=&quot;https://reactnative.dev/docs/upgrading&quot;&gt;Upgrading Guide&lt;/a&gt; for instructions.&lt;/p&gt; 
&lt;p&gt;React Native releases are discussed in the React Native Community, &lt;a href=&quot;https://github.com/react-native-community/react-native-releases&quot;&gt;&lt;strong&gt;@react-native-community/react-native-releases&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üëè How to Contribute&lt;/h2&gt; 
&lt;p&gt;The main purpose of this repository is to continue evolving React Native core. We want to make contributing to this project as easy and transparent as possible, and we are grateful to the community for contributing bug fixes and improvements. Read below to learn how you can take part in improving React Native.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://code.fb.com/codeofconduct/&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the &lt;a href=&quot;https://code.fb.com/codeofconduct/&quot;&gt;full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://reactnative.dev/docs/contributing&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://reactnative.dev/docs/contributing&quot;&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React Native.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/facebook/react-native/wiki/Roadmap&quot;&gt;Open Source Roadmap&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can learn more about our vision for React Native in the &lt;a href=&quot;https://github.com/facebook/react-native/wiki/Roadmap&quot;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Good First Issues&lt;/h3&gt; 
&lt;p&gt;We have a list of &lt;a href=&quot;https://github.com/facebook/react-native/labels/good%20first%20issue&quot;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; 
&lt;h3&gt;Discussions&lt;/h3&gt; 
&lt;p&gt;Larger discussions and proposals are discussed in &lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals&quot;&gt;&lt;strong&gt;@react-native-community/discussions-and-proposals&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üìÑ License&lt;/h2&gt; 
&lt;p&gt;React Native is MIT licensed, as found in the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;React Native documentation is Creative Commons licensed, as found in the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/LICENSE-docs&quot;&gt;LICENSE-docs&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flybywiresim/a32nx</title>
      <link>https://github.com/flybywiresim/a32nx</link>
      <description>&lt;p&gt;The A32NX Project is a community driven open source project to create a free Airbus A320neo in Microsoft Flight Simulator that is as close to reality as possible. It aims to enhance the default A320neo by improving the systems depth and functionality to bring it up to payware-level, all for free.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/UjzuHMU&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/738864299392630914.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/flybywiresim/a32nx/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/v/release/flybywiresim/a32nx.svg?style=flat&quot; alt=&quot;GitHub latest release version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/flybywiresim/a32nx/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/flybywiresim/a32nx/total.svg?style=flat&quot; alt=&quot;Github All Releases download count&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/flybywiresim/a32nx/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/flybywiresim/a32nx.svg?style=flat&quot; alt=&quot;GitHub contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;The A32NX Project is a community-driven open source project to create a free Airbus A320neo in Microsoft Flight Simulator that is as close to reality as possible. It aims to enhance the default A320neo by improving the systems depth and functionality to bring it up to payware-level, all for free.&lt;/p&gt; 
&lt;p&gt;The following aircraft configuration is currently simulated:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Model      A320-251N
Engine     LEAP 1A-26
FMGS       Honeywell Pegasus II
FWC Std.   H2F9C
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note that this configuration may change in the future as the A32NX project evolves and changes.&lt;/p&gt; 
&lt;h3&gt;SimBrief Integration&lt;/h3&gt; 
&lt;p&gt;‚úà&lt;a href=&quot;https://www.simbrief.com/system/dispatch.php?sharefleet=eyJ0cyI6IjE2MDU4MjAwNzg5NDYiLCJiYXNldHlwZSI6IkEzMjAiLCJjb21tZW50cyI6IkZMWSBCWSBXSVJFIiwiaWNhbyI6IkEyME4iLCJuYW1lIjoiQTMyME5FTyBGQlciLCJlbmdpbmVzIjoiTEVBUC0xQTI2IiwicmVnIjoiQTIwTiIsImZpbiI6IiIsInNlbGNhbCI6IiIsImhleGNvZGUiOiIiLCJjYXQiOiJNIiwicGVyIjoiQyIsImVxdWlwIjoiU0RFM0ZHSElSV1kiLCJ0cmFuc3BvbmRlciI6IkxCMSIsInBibiI6IkExQjFDMUQxTzFTMSIsImV4dHJhcm1rIjoiIiwibWF4cGF4IjoiMTgwIiwid2d0dW5pdHMiOiJLR1MiLCJvZXciOiI0MTAwMCIsIm16ZnciOiI2MjUwMCIsIm10b3ciOiI3OTAwMCIsIm1sdyI6IjY2MDAwIiwibWF4ZnVlbCI6IjIxMjczIiwicGF4d2d0IjoiMTA0IiwiZGVmYXVsdGNpIjoiIiwiZnVlbGZhY3RvciI6IlAwMCIsImNydWlzZW9mZnNldCI6IlAwMDAwIn0-&quot;&gt;SimBrief Airframe with the correct weights&lt;/a&gt; Credits: &lt;a href=&quot;https://github.com/viniciusfont&quot;&gt;@viniciusfont&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Pilot ID can be found in the Optional Entries section of the Dispatch Options page.&lt;/p&gt; 
&lt;h2&gt;Downloads&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The development (master) and experimental versions have been forked as a separate package/aircraft in MSFS, and will appear separate from the default A320neo. Existing Asobo A320neo liveries will be incompatible with the new package.&lt;/p&gt; 
&lt;h3&gt;A32NX Installer&lt;/h3&gt; 
&lt;p&gt;Download the new A32NX installer where you can select either the Stable or Developer build, and download and install the mod directly into your community folder, &lt;a href=&quot;https://api.flybywiresim.com/installer&quot;&gt;download here&lt;/a&gt; (&lt;a href=&quot;https://github.com/flybywiresim/installer/&quot;&gt;source&lt;/a&gt;).&lt;/p&gt; 
&lt;h3&gt;Traditional Download Methods&lt;/h3&gt; 
&lt;h4&gt;Latest Stable Release&lt;/h4&gt; 
&lt;p&gt;This is the recommended stable release, as it has been thoroughly tested.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/flybywiresim/a32nx/releases/latest/download/flybywiresim-a32nx.zip&quot;&gt;Download the stable release here.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can see the changelog on the releases page: &lt;a href=&quot;https://github.com/flybywiresim/a32nx/releases&quot;&gt;View Here.&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Unstable Master Branch Build&lt;/h4&gt; 
&lt;p&gt;This has the latest features, but is much more unstable, use at your own risk.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/flybywiresim/a32nx/releases/download/vmaster/A32NX-master.zip&quot;&gt;Download developer build here.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/flybywiresim/a32nx/releases/tag/vmaster&quot;&gt;View info about the latest build here.&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Unstable Master Branch Build (with custom autopilot)&lt;/h4&gt; 
&lt;p&gt;This version is the same as the regular master/development version, but with the WIP custom fly-by-wire, autopilot and autothrust system. Expect issues with autopilot, engines, autothrust and the PFD if you intend to use this version. No support will be provided via Discord.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://api.flybywiresim.com/api/v1/download?url=https://flybywiresim-packages.b-cdn.net/vmaster-cfbw-cap/A32NX-master-cfbw-cap.zip&quot;&gt;Download custom autopilot development build here.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/flybywiresim/a32nx/tree/autopilot/docs&quot;&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; view warnings and info for the custom autopilot build here.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Please follow ALL steps in this README if you encounter any issues with installation before seeking support.&lt;/h3&gt; 
&lt;p&gt;Open the zip that you downloaded from one of the links above, and drag the A32NX folder inside the zip into your Community folder.&lt;/p&gt; 
&lt;p&gt;See below for the location of your Community folder:&lt;/p&gt; 
&lt;p&gt;For the Microsoft Store edition AND/OR Gamepass edition:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Copy the &quot;A32NX&quot; folder into your community package folder. It is located in: &lt;code&gt;C:\Users\[YOUR USERNAME]\AppData\Local\Packages\Microsoft.FlightSimulator_&amp;lt;RANDOMLETTERS&amp;gt;\LocalCache\Packages\Community&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the Steam edition:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Copy the &quot;A32NX&quot; folder into your community package folder. It is located in: &lt;code&gt;C:\Users\[YOUR USERNAME]\AppData\Roaming\Microsoft Flight Simulator\Packages\Community&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the Boxed edition:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Copy the &quot;A32NX&quot; folder into your community package folder. It is located in: &lt;code&gt;C:\Users\[YOUR USERNAME]\AppData\Local\MSFSPackages\Community&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If the above methods do not work:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can find your community folder by going into FS2020 general options and enabling developer mode. You will see a menu appear on top. Go to tools and virtual file system. Click on watch bases and your community folder will be listed in one of the folders.&lt;/li&gt; 
 &lt;li&gt;Please make sure you&#39;re copying the &quot;A32NX&quot; folder into your community package folder, NOT the &quot;flybywiresim-a32nx&quot; folder.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/flybywiresim/a32nx/master/.github/Contributing.md&quot;&gt;Contributing.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Known Issues (Please note that most issues are being worked on and some of them may even be fixed in the master branch)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Captain&#39;s PFD may occasionally turn off during flight&lt;/li&gt; 
 &lt;li&gt;No Smoking switch doesn&#39;t use a full range of motion.&lt;/li&gt; 
 &lt;li&gt;Automatic ECAM page switching has minor bugs.&lt;/li&gt; 
 &lt;li&gt;AP not following the flight plan (leaking input values affect, but don&#39;t disconnect the AP) [Workaround: Set dead-zones for your input device higher]&lt;/li&gt; 
 &lt;li&gt;Autopilot goes direct to RWY on APP (same with the default A320) [Workaround: Use DIR to a waypoint or selected heading]&lt;/li&gt; 
 &lt;li&gt;Upper ECAM displays wrong THR levers position / N1 rating.&lt;/li&gt; 
 &lt;li&gt;Newly added ASOBO A320 liveries are incompatible with the A32NX mod.&lt;/li&gt; 
 &lt;li&gt;Ruder keybindings not working (you have to set your keybinding to rudder axis right and left)&lt;/li&gt; 
 &lt;li&gt;Wing dips on landing (due to bad transition to direct law in flare, same with the default A320) [Workaround use minimal aileron input on landing]&lt;/li&gt; 
 &lt;li&gt;Black screens / unable to start (conflict with another mod/livery or incorrect installation of the A32NX mod, use the &lt;a href=&quot;https://api.flybywiresim.com/installer&quot;&gt;installer&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The original contents of this repository are licensed under the MIT license.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Microsoft Flight Simulator ¬© Microsoft Corporation. The FlyByWire Simulations A32NX was created under Microsoft&#39;s &quot;Game Content Usage Rules&quot; using assets from Microsoft Flight Simulator, and it is not endorsed by or affiliated with Microsoft.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Q: Can I download the aircraft in the current state?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: Yes, see &lt;a href=&quot;https://raw.githubusercontent.com/flybywiresim/a32nx/master/#Downloads&quot;&gt;Downloads&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Where is the plane in-sim?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: The mod is added on top of the default A320neo from Asobo. If you want to uninstall it and revert to the original aircraft, just delete the A32NX folder in your community folder.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: What are the liveries available?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: All liveries for the default A320 are compatible with the A32NX Mod. You can download some of your favourite liveries at &lt;a href=&quot;https://flightsim.to&quot;&gt;Flightsim.to&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: When will it be released?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: The project is an ongoing rolling release. See &lt;a href=&quot;https://raw.githubusercontent.com/flybywiresim/a32nx/master/#Downloads&quot;&gt;Downloads&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: When is the next update?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: We don&#39;t know, since it depends on many factors. We will announce each Stable build update via &lt;a href=&quot;https://discord.gg/flybywire&quot;&gt;discord&lt;/a&gt; and our social media: &lt;a href=&quot;https://www.facebook.com/FlyByWireSimulations&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/FlybywireSim&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How do I join the team?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: Head over to &lt;a href=&quot;https://raw.githubusercontent.com/flybywiresim/a32nx/master/.github/Contributing.md&quot;&gt;Contributing.md&lt;/a&gt; and join our Discord to get started.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Is it payware?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: No, it is a completely free aircraft, open-source.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: How do we report bugs?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: Report bugs to us in the &lt;a href=&quot;https://discord.gg/flybywire&quot;&gt;Discord server&lt;/a&gt;, under the #help channel, or by creating a GitHub issue. Just make sure to search for existing issues first before creating a new one.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Q: Why is my version not the same as what I see others using?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A: We have two versions, the Stable and Developer (Master). The Stable version is a &#39;snapshot&#39; of the development which we regard as stable with the current version of the simulator. The Developer build is updated daily and is a constant work in progress and although we test thoroughly each update, minor issues may occur from time to time. If you find this to be the case, you can report these issues in #help in discord or via GitHub Issues (Check there is not an existing issue of the same nature as yours).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Leaflet/Leaflet</title>
      <link>https://github.com/Leaflet/Leaflet</link>
      <description>&lt;p&gt;üçÉ JavaScript library for mobile-friendly interactive maps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Leaflet is the leading open-source JavaScript library for &lt;strong&gt;mobile-friendly interactive maps&lt;/strong&gt;. Weighing just about 39 KB of gzipped JS plus 4 KB of gzipped CSS code, it has all the mapping &lt;a href=&quot;http://leafletjs.com/#features&quot;&gt;features&lt;/a&gt; most developers ever need.&lt;/p&gt; 
&lt;p&gt;Leaflet is designed with &lt;em&gt;simplicity&lt;/em&gt;, &lt;em&gt;performance&lt;/em&gt; and &lt;em&gt;usability&lt;/em&gt; in mind. It works efficiently across all major desktop and mobile platforms out of the box, taking advantage of HTML5 and CSS3 on modern browsers while being accessible on older ones too. It can be extended with a huge amount of &lt;a href=&quot;http://leafletjs.com/plugins.html&quot;&gt;plugins&lt;/a&gt;, has a beautiful, easy to use and &lt;a href=&quot;http://leafletjs.com/reference.html&quot; title=&quot;Leaflet API reference&quot;&gt;well-documented&lt;/a&gt; API and a simple, readable &lt;a href=&quot;https://github.com/Leaflet/Leaflet&quot; title=&quot;Leaflet GitHub repository&quot;&gt;source code&lt;/a&gt; that is a joy to &lt;a href=&quot;https://github.com/Leaflet/Leaflet/blob/master/CONTRIBUTING.md&quot; title=&quot;A guide to contributing to Leaflet&quot;&gt;contribute&lt;/a&gt; to.&lt;/p&gt; 
&lt;p&gt;For more info, docs and tutorials, check out the &lt;a href=&quot;http://leafletjs.com&quot;&gt;official website&lt;/a&gt;.
 &lt;!-- raw HTML omitted --&gt; For &lt;strong&gt;Leaflet downloads&lt;/strong&gt; (including the built master version), check out the &lt;a href=&quot;http://leafletjs.com/download.html&quot;&gt;download page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We&#39;re happy to meet new contributors. If you want to &lt;strong&gt;get involved&lt;/strong&gt; with Leaflet development, check out the &lt;a href=&quot;https://github.com/Leaflet/Leaflet/blob/master/CONTRIBUTING.md&quot; title=&quot;A guide to contributing to Leaflet&quot;&gt;contribution guide&lt;/a&gt;. Let&#39;s make the best mapping library that will ever exist, and push the limits of what&#39;s possible with online maps!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/Leaflet/Leaflet&quot;&gt;&lt;img src=&quot;https://travis-ci.org/Leaflet/Leaflet.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>typescript-cheatsheets/react</title>
      <link>https://github.com/typescript-cheatsheets/react</link>
      <description>&lt;p&gt;Cheatsheets for experienced React developers getting started with TypeScript&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/basic/setup&quot;&gt;&lt;strong&gt;Web docs&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/fi3ework/blog/tree/master/react-typescript-cheatsheet-cn&quot;&gt;‰∏≠ÊñáÁøªËØë&lt;/a&gt; | &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet-es&quot;&gt;&lt;strong&gt;Espa√±ol&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-pt&quot;&gt;&lt;strong&gt;Portugu√™s&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/blob/master/CONTRIBUTING.md&quot;&gt;Contribute!&lt;/a&gt; | &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new/choose&quot;&gt;Ask!&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;:wave: This repo is maintained by &lt;a href=&quot;https://twitter.com/swyx&quot;&gt;@swyx&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ferdaber&quot;&gt;@ferdaber&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/sebsilbermann&quot;&gt;@eps1lon&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jsjoeio&quot;&gt;@jsjoeio&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/arvincheenu&quot;&gt;@arvindcheenu&lt;/a&gt;, we&#39;re so happy you want to try out TypeScript with React! If you see anything wrong or missing, please &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new/choose&quot;&gt;file an issue&lt;/a&gt;! :+1:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/CONTRIBUTORS.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/typescript-cheatsheets/react-typescript-cheatsheet?color=orange&amp;amp;style=flat-square&quot; alt=&quot;All Contributors&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://discord.gg/wTGS5z9&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/508357248330760243.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;http://twitter.com/home?status=Awesome%20%40Reactjs%20%2B%20%40TypeScript%20cheatsheet%20by%20%40ferdaber%2C%20%40sebsilbermann%2C%20%40swyx%20%26%20others!%20https%3A%2F%2Fgithub.com%2Ftypescript-cheatsheets%2Freact&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/url?label=Help%20spread%20the%20word%21&amp;amp;style=social&amp;amp;url=https%3A%2F%2Fgithub.com%2Ftypescript-cheatsheets%2Freact&quot; alt=&quot;Tweet&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;All React + TypeScript Cheatsheets&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;The Basic Cheatsheet&lt;/strong&gt; (&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/README.md#basic-cheatsheet-table-of-contents&quot;&gt;&lt;code&gt;/README.md&lt;/code&gt;&lt;/a&gt;) is focused on helping React devs just start using TS in React &lt;strong&gt;apps&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Focus on opinionated best practices, copy+pastable examples.&lt;/li&gt; 
   &lt;li&gt;Explains some basic TS types usage and setup along the way.&lt;/li&gt; 
   &lt;li&gt;Answers the most Frequently Asked Questions.&lt;/li&gt; 
   &lt;li&gt;Does not cover generic type logic in detail. Instead we prefer to teach simple troubleshooting techniques for newbies.&lt;/li&gt; 
   &lt;li&gt;The goal is to get effective with TS without learning &lt;em&gt;too much&lt;/em&gt; TS.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;The Advanced Cheatsheet&lt;/strong&gt; (&lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/advanced/intro&quot;&gt;&lt;code&gt;/ADVANCED.md&lt;/code&gt;&lt;/a&gt;) helps show and explain advanced usage of generic types for people writing reusable type utilities/functions/render prop/higher order components and TS+React &lt;strong&gt;libraries&lt;/strong&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;It also has miscellaneous tips and tricks for pro users.&lt;/li&gt; 
   &lt;li&gt;Advice for contributing to DefinitelyTyped.&lt;/li&gt; 
   &lt;li&gt;The goal is to take &lt;em&gt;full advantage&lt;/em&gt; of TypeScript.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;The Migrating Cheatsheet&lt;/strong&gt; (&lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/migration/intro&quot;&gt;&lt;code&gt;/MIGRATING.md&lt;/code&gt;&lt;/a&gt;) helps collate advice for incrementally migrating large codebases from JS or Flow, &lt;strong&gt;from people who have done it&lt;/strong&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;We do not try to convince people to switch, only to help people who have already decided.&lt;/li&gt; 
   &lt;li&gt;‚ö†Ô∏èThis is a new cheatsheet, all assistance is welcome.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;The HOC Cheatsheet&lt;/strong&gt; (&lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/hoc/intro&quot;&gt;&lt;code&gt;/HOC.md&lt;/code&gt;&lt;/a&gt;) specifically teaches people to write HOCs with examples. 
  &lt;ul&gt; 
   &lt;li&gt;Familiarity with &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/generics.html&quot;&gt;Generics&lt;/a&gt; is necessary.&lt;/li&gt; 
   &lt;li&gt;‚ö†Ô∏èThis is the newest cheatsheet, all assistance is welcome.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;Basic Cheatsheet Table of Contents&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#section-1-setup-typescript-with-react&quot;&gt;Section 1: Setup TypeScript with React&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#react--typescript-starter-kits&quot;&gt;React + TypeScript Starter Kits&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#import-react&quot;&gt;Import React&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#section-2-getting-started&quot;&gt;Section 2: Getting Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#function-components&quot;&gt;Function Components&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#hooks&quot;&gt;Hooks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#usestate&quot;&gt;useState&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#usereducer&quot;&gt;useReducer&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#useeffect&quot;&gt;useEffect&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#useref&quot;&gt;useRef&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#useimperativehandle&quot;&gt;useImperativeHandle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#custom-hooks&quot;&gt;Custom Hooks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#class-components&quot;&gt;Class Components&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#you-may-not-need-defaultprops&quot;&gt;You May Not Need &lt;code&gt;defaultProps&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#typing-defaultprops&quot;&gt;Typing &lt;code&gt;defaultProps&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#consuming-props-of-a-component-with-defaultprops&quot;&gt;Consuming Props of a Component with defaultProps&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#problem-statement&quot;&gt;Problem Statement&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#solution&quot;&gt;Solution&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#misc-discussions-and-knowledge&quot;&gt;Misc Discussions and Knowledge&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#basic-prop-types-examples&quot;&gt;Basic Prop Types Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#useful-react-prop-type-examples&quot;&gt;Useful React Prop Type Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#getderivedstatefromprops&quot;&gt;getDerivedStateFromProps&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#forms-and-events&quot;&gt;Forms and Events&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#context&quot;&gt;Context&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#basic-example&quot;&gt;Basic Example&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#extended-example&quot;&gt;Extended Example&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#forwardrefcreateref&quot;&gt;forwardRef/createRef&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#portals&quot;&gt;Portals&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#error-boundaries&quot;&gt;Error Boundaries&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#option-1-using-react-error-boundary&quot;&gt;Option 1: Using react-error-boundary&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#options-2-writing-your-custom-error-boundary-component&quot;&gt;Options 2: Writing your custom error boundary component&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#concurrent-reactreact-suspense&quot;&gt;Concurrent React/React Suspense&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-types&quot;&gt;Troubleshooting Handbook: Types&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#union-types-and-type-guarding&quot;&gt;Union Types and Type Guarding&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#optional-types&quot;&gt;Optional Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#enum-types&quot;&gt;Enum Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#type-assertion&quot;&gt;Type Assertion&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#simulating-nominal-types&quot;&gt;Simulating Nominal Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#intersection-types&quot;&gt;Intersection Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#union-types&quot;&gt;Union Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#overloading-function-types&quot;&gt;Overloading Function Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#using-inferred-types&quot;&gt;Using Inferred Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#using-partial-types&quot;&gt;Using Partial Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#the-types-i-need-werent-exported&quot;&gt;The Types I need weren&#39;t exported!&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#the-types-i-need-dont-exist&quot;&gt;The Types I need don&#39;t exist!&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#slapping-any-on-everything&quot;&gt;Slapping &lt;code&gt;any&lt;/code&gt; on everything&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#autogenerate-types&quot;&gt;Autogenerate types&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#typing-exported-hooks&quot;&gt;Typing Exported Hooks&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#typing-exported-components&quot;&gt;Typing Exported Components&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-operators&quot;&gt;Troubleshooting Handbook: Operators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-utilities&quot;&gt;Troubleshooting Handbook: Utilities&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-tsconfigjson&quot;&gt;Troubleshooting Handbook: tsconfig.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-fixing-bugs-in-official-typings&quot;&gt;Troubleshooting Handbook: Fixing bugs in official typings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-globals-images-and-other-non-ts-files&quot;&gt;Troubleshooting Handbook: Globals, Images and other non-TS files&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#other-react--typescript-resources&quot;&gt;Other React + TypeScript resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#editor-tooling-and-integration&quot;&gt;Editor Tooling and Integration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#linting&quot;&gt;Linting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#other-react--typescript-resources-1&quot;&gt;Other React + TypeScript resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#recommended-react--typescript-talks&quot;&gt;Recommended React + TypeScript talks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#time-to-really-learn-typescript&quot;&gt;Time to Really Learn TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#example-app&quot;&gt;Example App&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#my-question-isnt-answered-here&quot;&gt;My question isn&#39;t answered here!&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#contributors&quot;&gt;Contributors&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#react--typescript-starter-kits&quot;&gt;React + TypeScript Starter Kits&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#import-react&quot;&gt;Import React&lt;/a&gt;
    &lt;!-- raw HTML omitted --&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#section-2-getting-started&quot;&gt;Section 2: Getting Started&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#function-components&quot;&gt;Function Components&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#hooks&quot;&gt;Hooks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#class-components&quot;&gt;Class Components&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#typing-defaultprops&quot;&gt;Typing defaultProps&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#types-or-interfaces&quot;&gt;Types or Interfaces?&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#basic-prop-types-examples&quot;&gt;Basic Prop Types Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#useful-react-prop-type-examples&quot;&gt;Useful React Prop Type Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#getDerivedStateFromProps&quot;&gt;getDerivedStateFromProps&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#forms-and-events&quot;&gt;Forms and Events&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#context&quot;&gt;Context&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#forwardrefcreateref&quot;&gt;forwardRef/createRef&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#portals&quot;&gt;Portals&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#error-boundaries&quot;&gt;Error Boundaries&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#concurrent-reactreact-suspense&quot;&gt;Concurrent React/React Suspense&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#basic-troubleshooting-handbook-types&quot;&gt;Basic Troubleshooting Handbook: Types&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#union-types-and-type-guarding&quot;&gt;Union Types and Type Guarding&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#optional-types&quot;&gt;Optional Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#enum-types&quot;&gt;Enum Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#type-assertion&quot;&gt;Type Assertion&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#simulating-nominal-types&quot;&gt;Simulating Nominal Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#intersection-types&quot;&gt;Intersection Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#union-types&quot;&gt;Union Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#overloading-function-types&quot;&gt;Overloading Function Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#using-inferred-types&quot;&gt;Using Inferred Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#using-partial-types&quot;&gt;Using Partial Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#the-types-i-need-werent-exported&quot;&gt;The Types I need weren&#39;t exported!&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#the-types-i-need-dont-exist&quot;&gt;The Types I need don&#39;t exist!&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#slapping-any-on-everything&quot;&gt;Slapping &lt;code&gt;any&lt;/code&gt; on everything&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#autogenerate-types&quot;&gt;Autogenerate types&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#typing-exported-hooks&quot;&gt;Typing Exported Hooks&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#typing-exported-components&quot;&gt;Typing Exported Components&lt;/a&gt;
      &lt;!-- raw HTML omitted --&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-operators&quot;&gt;Troubleshooting Handbook: Operators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-utilities&quot;&gt;Troubleshooting Handbook: Utilties&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-tsconfigjson&quot;&gt;Troubleshooting Handbook: tsconfig.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#troubleshooting-handbook-bugs-in-official-typings&quot;&gt;Troubleshooting Handbook: Bugs in official typings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#recommended-react--typescript-codebases-to-learn-from&quot;&gt;Recommended React + TypeScript codebases to learn from&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#editor-tooling-and-integration&quot;&gt;Editor Tooling and Integration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#linting&quot;&gt;Linting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#other-react--typescript-resources&quot;&gt;Other React + TypeScript resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#recommended-react--typescript-talks&quot;&gt;Recommended React + TypeScript talks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#time-to-really-learn-typescript&quot;&gt;Time to Really Learn TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#example-app&quot;&gt;Example App&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/#my-question-isnt-answered-here&quot;&gt;My question isn&#39;t answered here!&lt;/a&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Section 1: Setup TypeScript with React&lt;/h1&gt; 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;good understanding of &lt;a href=&quot;https://reactjs.org&quot;&gt;React&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;familiarity with &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/basic-types.html&quot;&gt;TypeScript Types&lt;/a&gt; (&lt;a href=&quot;http://2ality.com/2018/04/type-notation-typescript.html&quot;&gt;2ality&#39;s guide&lt;/a&gt; is helpful. If you‚Äôre an absolute beginner in TypeScript, check out &lt;a href=&quot;https://ts.chibicode.com/todo/&quot;&gt;chibicode‚Äôs tutorial&lt;/a&gt;.)&lt;/li&gt; 
 &lt;li&gt;having read &lt;a href=&quot;https://reactjs.org/docs/static-type-checking.html#typescript&quot;&gt;the TypeScript section in the official React docs&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;having read &lt;a href=&quot;http://www.typescriptlang.org/play/index.html?jsx=2&amp;amp;esModuleInterop=true&amp;amp;e=181#example/typescript-with-react&quot;&gt;the React section of the new TypeScript playground&lt;/a&gt; (optional: also step through the 40+ examples under &lt;a href=&quot;http://www.typescriptlang.org/play/index.html&quot;&gt;the playground&#39;s&lt;/a&gt; Examples section)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This guide will always assume you are starting with the latest TypeScript version. Notes for older versions will be in expandable &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; tags.&lt;/p&gt; 
&lt;h2&gt;React + TypeScript Starter Kits&lt;/h2&gt; 
&lt;p&gt;Cloud setups:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUKJLHAN5wCuqWAyjMhhYANFx4BRAgSz44AXzhES5Snhi1GjLAA8W8XBAB2qeAGEInQ0KjjtycABsscALxwAFAEpXAPnaM4OANjeABtA0sYUR4Yc0iAXVcxPgEhdwAGT3oGAOTJaXx3L19-BkDAgBMIXE4QLCsAOhhgGCckgAMATQsgh2BcAGssCrgAEjYIqwVmutR27MC5LM0yuEoYTihDD1zAgB4K4AA3H13yvbAfbs5e-qGRiYspuBmsVD2Aekuz-YAjThgMCMcCMpj6gxcbGKLj8MTiVnck3gAGo4ABGTxyU6rcrlMF3OB1H5wT7-QFGbG4z6HE65ZYMOSMIA&quot;&gt;TypeScript Playground with React&lt;/a&gt; just if you are debugging types (and reporting issues), not for running code&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://ts.react.new&quot;&gt;CodeSandbox&lt;/a&gt; - cloud IDE, boots up super fast&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://stackblitz.com/edit/react-typescript-base&quot;&gt;Stackblitz&lt;/a&gt; - cloud IDE, boots up super fast&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Local dev setups:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nextjs.org/docs/basic-features/typescript&quot;&gt;Next.js&lt;/a&gt;: &lt;code&gt;npx create-next-app -e with-typescript&lt;/code&gt; will create in your current folder&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/create-react-app/docs/adding-typescript&quot;&gt;Create React App&lt;/a&gt;: &lt;code&gt;npx create-react-app name-of-app --template typescript&lt;/code&gt; will create in new folder&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://guide.meteor.com/build-tool.html#typescript&quot;&gt;Meteor&lt;/a&gt;: &lt;code&gt;meteor create --typescript name-of-my-new-typescript-app&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/infinitered/ignite#use-ignite-andross-infinite-red-andross-boilerplate&quot;&gt;Ignite&lt;/a&gt; for React Native: &lt;code&gt;ignite new myapp&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tsdx.io/&quot;&gt;TSDX&lt;/a&gt;: &lt;code&gt;npx tsdx create mylib&lt;/code&gt; for Creating React+TS &lt;em&gt;libraries&lt;/em&gt;. (in future: &lt;a href=&quot;https://twitter.com/jaredpalmer/status/1346217789942591488&quot;&gt;TurboRepo&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Less mature tools still worth checking out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/swyx/status/1282727239230996480?lang=en&quot;&gt;Vite&lt;/a&gt;: &lt;code&gt;npm init vite-app my-react-project --template react-ts&lt;/code&gt; (note - not yet v1.0, but very fast)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.snowpack.dev/#create-snowpack-app-(csa)&quot;&gt;Snowpack&lt;/a&gt;: &lt;code&gt;npx create-snowpack-app my-app --template app-template-react-typescript&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://v2.docusaurus.io/docs/installation&quot;&gt;Docusaurus v2&lt;/a&gt; with &lt;a href=&quot;https://v2.docusaurus.io/docs/typescript-support&quot;&gt;TypeScript Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://v2.parceljs.org/languages/typescript/&quot;&gt;Parcel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jpmorganchase/modular&quot;&gt;JP Morgan&#39;s &lt;code&gt;modular&lt;/code&gt;&lt;/a&gt;: CRA + TS + Yarn Workspaces toolkit. &lt;code&gt;yarn create modular-react-app &amp;lt;project-name&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Manual setup:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/basarat/typescript-react/tree/master/01%20bootstrap&quot;&gt;Basarat&#39;s guide&lt;/a&gt; for &lt;strong&gt;manual setup&lt;/strong&gt; of React + TypeScript + Webpack + Babel&lt;/li&gt; 
 &lt;li&gt;In particular, make sure that you have &lt;code&gt;@types/react&lt;/code&gt; and &lt;code&gt;@types/react-dom&lt;/code&gt; installed (&lt;a href=&quot;https://definitelytyped.org/&quot;&gt;Read more about the DefinitelyTyped project if you are unfamiliar&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;There are also many React + TypeScript boilerplates, please see &lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/basic/recommended/resources/&quot;&gt;our Other Resources list&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Import React&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import * as React from &quot;react&quot;;
import * as ReactDOM from &quot;react-dom&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is the &lt;a href=&quot;https://www.reddit.com/r/reactjs/comments/iyehol/import_react_from_react_will_go_away_in_distant/&quot;&gt;most futureproof way&lt;/a&gt; to import React. If you set &lt;code&gt;--allowSyntheticDefaultImports&lt;/code&gt; (or add &lt;code&gt;&quot;allowSyntheticDefaultImports&quot;: true&lt;/code&gt;) in your &lt;code&gt;tsconfig.json&lt;/code&gt; you can use more familiar imports:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import React from &quot;react&quot;;
import ReactDOM from &quot;react-dom&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Why &lt;code&gt;allowSyntheticDefaultImports&lt;/code&gt; over &lt;code&gt;esModuleInterop&lt;/code&gt;? &lt;a href=&quot;https://twitter.com/drosenwasser/status/1003097042653073408&quot;&gt;Daniel Rosenwasser&lt;/a&gt; has said that it&#39;s better for webpack/parcel. For more discussion check out &lt;a href=&quot;https://github.com/wmonk/create-react-app-typescript/issues/214&quot;&gt;https://github.com/wmonk/create-react-app-typescript/issues/214&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You should also check &lt;a href=&quot;https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports&quot;&gt;the new TypeScript docs for official descriptions between each compiler flag&lt;/a&gt;!&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Section 2: Getting Started&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Function Components&lt;/h2&gt; 
&lt;p&gt;These can be written as normal functions that take a &lt;code&gt;props&lt;/code&gt; argument and return a JSX element.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// Declaring type of props - see &quot;Typing Component Props&quot; for more examples
type AppProps = {
  message: string;
}; /* use `interface` if exporting so that consumers can extend */

// Easiest way to declare a Function Component; return type is inferred.
const App = ({ message }: AppProps) =&amp;gt; &amp;lt;div&amp;gt;{message}&amp;lt;/div&amp;gt;;

// you can choose annotate the return type so an error is raised if you accidentally return some other type
const App = ({ message }: AppProps): JSX.Element =&amp;gt; &amp;lt;div&amp;gt;{message}&amp;lt;/div&amp;gt;;

// you can also inline the type declaration; eliminates naming the prop types, but looks repetitive
const App = ({ message }: { message: string }) =&amp;gt; &amp;lt;div&amp;gt;{message}&amp;lt;/div&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;You may see this in many React+TypeScript codebases:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const App: React.FunctionComponent&amp;lt;{ message: string }&amp;gt; = ({ message }) =&amp;gt; (
  &amp;lt;div&amp;gt;{message}&amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, the general consensus today is that &lt;code&gt;React.FunctionComponent&lt;/code&gt; (or the shorthand &lt;code&gt;React.FC&lt;/code&gt;) is &lt;a href=&quot;https://github.com/facebook/create-react-app/pull/8177&quot;&gt;discouraged&lt;/a&gt;. This is a nuanced opinion of course, but if you agree and want to remove &lt;code&gt;React.FC&lt;/code&gt; from your codebase, you can use &lt;a href=&quot;https://github.com/gndelia/codemod-replace-react-fc-typescript&quot;&gt;this jscodeshift codemod&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Some differences from the &quot;normal function&quot; version:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;React.FunctionComponent&lt;/code&gt; is explicit about the return type, while the normal function version is implicit (or else needs additional annotation).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It provides typechecking and autocomplete for static properties like &lt;code&gt;displayName&lt;/code&gt;, &lt;code&gt;propTypes&lt;/code&gt;, and &lt;code&gt;defaultProps&lt;/code&gt;.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Note that there are some known issues using &lt;code&gt;defaultProps&lt;/code&gt; with &lt;code&gt;React.FunctionComponent&lt;/code&gt;. See &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/87&quot;&gt;this issue for details&lt;/a&gt;. We maintain a separate &lt;code&gt;defaultProps&lt;/code&gt; section you can also look up.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It provides an implicit definition of &lt;code&gt;children&lt;/code&gt; (see below) - however there are some issues with the implicit &lt;code&gt;children&lt;/code&gt; type (e.g. &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/issues/33006&quot;&gt;DefinitelyTyped#33006&lt;/a&gt;), and it might be better to be explicit about components that consume &lt;code&gt;children&lt;/code&gt;, anyway.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const Title: React.FunctionComponent&amp;lt;{ title: string }&amp;gt; = ({
  children,
  title,
}) =&amp;gt; &amp;lt;div title={title}&amp;gt;{children}&amp;lt;/div&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;As of &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46643&quot;&gt;@types/react 16.9.48&lt;/a&gt;, you can also use &lt;code&gt;React.VoidFunctionComponent&lt;/code&gt; or &lt;code&gt;React.VFC&lt;/code&gt; type if you want to type &lt;code&gt;children&lt;/code&gt; explicitly. This is an interim solution until &lt;code&gt;FunctionComponent&lt;/code&gt; will accept no children by default (planned for &lt;code&gt;@types/react@^18.0.0&lt;/code&gt;).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;type Props = { foo: string };

// OK now, in future, error
const FunctionComponent: React.FunctionComponent&amp;lt;Props&amp;gt; = ({
  foo,
  children,
}: Props) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      {foo} {children}
    &amp;lt;/div&amp;gt;
  ); // OK
};

// Error now, in future, deprecated
const VoidFunctionComponent: React.VoidFunctionComponent&amp;lt;Props&amp;gt; = ({
  foo,
  children,
}) =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;
      {foo}
      {children}
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;In the future&lt;/em&gt;, it may&amp;nbsp;automatically mark props as &lt;code&gt;readonly&lt;/code&gt;, though that&#39;s a moot point if the props object is destructured in the parameter list.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In most cases it makes very little difference which syntax is used, but you may prefer the more explicit nature of &lt;code&gt;React.FunctionComponent&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;These patterns are not supported:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Conditional rendering&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const MyConditionalComponent = ({ shouldRender = false }) =&amp;gt;
  shouldRender ? &amp;lt;div /&amp;gt; : false; // don&#39;t do this in JS either
const el = &amp;lt;MyConditionalComponent /&amp;gt;; // throws an error
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is because due to limitations in the compiler, function components cannot return anything other than a JSX expression or &lt;code&gt;null&lt;/code&gt;, otherwise it complains with a cryptic error message saying that the other type is not assignable to &lt;code&gt;Element&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const MyArrayComponent = () =&amp;gt; Array(5).fill(&amp;lt;div /&amp;gt;);
const el2 = &amp;lt;MyArrayComponent /&amp;gt;; // throws an error
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Array.fill&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Unfortunately just annotating the function type will not help so if you really need to return other exotic types that React supports, you&#39;d need to perform a type assertion:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const MyArrayComponent = () =&amp;gt; (Array(5).fill(&amp;lt;div /&amp;gt;) as any) as JSX.Element;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/57&quot;&gt;See commentary by @ferdaber here&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Hooks&lt;/h2&gt; 
&lt;p&gt;Hooks are &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L800-L1031&quot;&gt;supported in &lt;code&gt;@types/react&lt;/code&gt; from v16.8 up&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;useState&lt;/h2&gt; 
&lt;p&gt;Type inference works very well most of the time:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const [val, toggle] = React.useState(false);
// `val` is inferred to be a boolean
// `toggle` only takes booleans
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See also the &lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/basic/troubleshooting/types/#using-inferred-types&quot;&gt;Using Inferred Types&lt;/a&gt; section if you need to use a complex type that you&#39;ve relied on inference for.&lt;/p&gt; 
&lt;p&gt;However, many hooks are initialized with null-ish default values, and you may wonder how to provide types. Explicitly declare the type, and use a union type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const [user, setUser] = React.useState&amp;lt;IUser | null&amp;gt;(null);

// later...
setUser(newUser);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;useReducer&lt;/h2&gt; 
&lt;p&gt;You can use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#discriminated-unions&quot;&gt;Discriminated Unions&lt;/a&gt; for reducer actions. Don&#39;t forget to define the return type of reducer, otherwise TypeScript will infer it.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const initialState = { count: 0 };

type ACTIONTYPE =
  | { type: &quot;increment&quot;; payload: number }
  | { type: &quot;decrement&quot;; payload: string };

function reducer(state: typeof initialState, action: ACTIONTYPE) {
  switch (action.type) {
    case &quot;increment&quot;:
      return { count: state.count + action.payload };
    case &quot;decrement&quot;:
      return { count: state.count - Number(action.payload) };
    default:
      throw new Error();
  }
}

function Counter() {
  const [state, dispatch] = React.useReducer(reducer, initialState);
  return (
    &amp;lt;&amp;gt;
      Count: {state.count}
      &amp;lt;button onClick={() =&amp;gt; dispatch({ type: &quot;decrement&quot;, payload: &quot;5&quot; })}&amp;gt;
        -
      &amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch({ type: &quot;increment&quot;, payload: 5 })}&amp;gt;
        +
      &amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play?#code/LAKFEsFsAcHsCcAuACAVMghgZ2QJQKYYDGKAZvLJMgOTyEnUDcooRsAdliuO+IuBgA2AZUQZE+ZAF5kAbzYBXdogBcyAAwBfZmBCIAntEkBBAMIAVAJIB5AHLmAmgAUAotOShkyAD5zkBozVqHiI6SHxlagAaZGgMfUFYDAATNXYFSAAjfHhNDxAvX1l-Q3wg5PxQ-HDImLiEpNTkLngeAHM8ll1SJRJwDmQ6ZIUiHIAKLnEykqNYUmQePgERMQkY4n4ONTMrO0dXAEo5T2aAdz4iAAtkMY3+9gA6APwj2ROvImxJYPYqmsRqCp3l5BvhEAp4Ow5IplGpJhIHjCUABqTB9DgPeqJFLaYGfLDfCp-CIAoEFEFeOjgyHQ2BKVTNVb4RF05TIAC0yFsGWy8Fu6MeWMaB1x5K8FVIGAUglUwK8iEuFFOyHY+GVLngFD5Bx0Xk0oH13V6myhplZEm1x3JbE4KAA2vD8DFkuAsHFEFcALruAgbB4KAkEYajPlDEY5GKLfhCURTHUnKkQqFjYEAHgAfHLkGb6WpZI6WfTDRSvKnMgpEIgBhxTIJwEQANZSWRjI5SdPIF1u8RXMayZ7lSphEnRWLxbFNagAVmomhF6fZqYA9OXKxxM2KQWWK1WoTW643m63pB2u+7e-3SkEQsPamOGik1FO55p08jl6vdxuKcvv8h4yAmhAA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In case you use the &lt;a href=&quot;https://github.com/reduxjs/redux&quot;&gt;redux&lt;/a&gt; library to write reducer function, It provides a convenient helper of the format &lt;code&gt;Reducer&amp;lt;State, Action&amp;gt;&lt;/code&gt; which takes care of the return type for you.&lt;/p&gt; 
&lt;p&gt;So the above reducer example becomes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import { Reducer } from &#39;redux&#39;;

export function reducer: Reducer&amp;lt;AppState, Action&amp;gt;() {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;useEffect&lt;/h2&gt; 
&lt;p&gt;When using &lt;code&gt;useEffect&lt;/code&gt;, take care not to return anything other than a function or &lt;code&gt;undefined&lt;/code&gt;, otherwise both TypeScript and React will yell at you. This can be subtle when using arrow functions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function DelayedEffect(props: { timerMs: number }) {
  const { timerMs } = props;

  useEffect(
    () =&amp;gt;
      setTimeout(() =&amp;gt; {
        /* do stuff */
      }, timerMs),
    [timerMs]
  );
  // bad example! setTimeout implicitly returns a number
  // because the arrow function body isn&#39;t wrapped in curly braces
  return null;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;function DelayedEffect(props: { timerMs: number }) {
  const { timerMs } = props;

  useEffect(() =&amp;gt; {
    setTimeout(() =&amp;gt; {
      /* do stuff */
    }, timerMs);
  }, [timerMs]);
  // better; use the void keyword to make sure you return undefined
  return null;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;useRef&lt;/h2&gt; 
&lt;p&gt;When using &lt;code&gt;useRef&lt;/code&gt;, you have two options when creating a ref container that does not have an initial value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const ref1 = useRef&amp;lt;HTMLElement&amp;gt;(null!);
const ref2 = useRef&amp;lt;HTMLElement&amp;gt;(null);
const ref3 = useRef&amp;lt;HTMLElement | null&amp;gt;(null);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see the difference in &lt;a href=&quot;https://www.typescriptlang.org/play#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwCwAUI7hAHarwCCYYcAvHAAUASn4A+OAG9GjOHAD0CBLLnKGcxHABiwKBzgQwMYGxS4WUACbBWAczgwIcSxFwBXEFlYxkxtgDoVTQBJVmBjZAAbOAA3KLcsOAB3YEjogCNE1jc0-zgAGQBPG3tHOAAVQrAsAGVcKGAjOHTCuDdUErhWNgBabLSUVFQsWBNWA2qoX2hA9VU4AGFKXyx0AFk3H3TIxOwCOAB5dIArLHwgpHcoSm84MGJJmFbgdG74ZcsDVkjC2Y01f7yFQsdjvLAEACM-EwVBg-naWD2AB4ABLlNb5GpgZCsACiO083jEgn6kQAhMJ6HMQfpKJCFpE2IkBNg8HCEci0RisTj8VhCTBiaSKVSVIoAaoLnBQuFgFFYvFEikBpkujkMps4FgAB7VfCdLmY7F4gleOFwAByEHg7U63VYfXVg2Go1MhhG0ygf3mAHVUtF6jgYLtwUdTvguta4Bstjs9mGznCpVcbvB7u7YM90B8vj9vYgLkDqWxaeCAEzQ1n4eHDTnoo2801EknqykyObii5SmpnNifA5GMZmCzWOwOJwudwC3xjKUyiLROKRBLJf3NLJO9KanV64xj0koVifQ08k38s1Sv0DJZBxIx5DbRGhk6J5Nua5mu4PEZPOAvSNgsgnxsHmXZzIgRZyDSYIEAAzJWsI1k+BCovWp58gKcAAD5qmkQqtqKHbyCexoYRecw7IQugcAs76ptCdIQv4KZmoRcjyMRaGkU28A4aSKiUXAwwgpYtEfrcAh0mWzF0ax7bsZx3Lceetx8eqAlYPAMAABa6KJskSXAdKwTJ4kwGxCjyKy-bfK05SrDA8mWVagHAbZeScOY0CjqUE6uOgqDaRAOSfKqOYgb8KiMaZ9GSeCEIMkyMVyUwRHWYc7nSvAgUQEk6AjMQXpReWyWGdFLHeBZHEuTCQEZT8xVwaV8BxZCzUWZQMDvuMghBHASJVnCWhTLYApiH1chIqgxpGeCfCSIxAC+Yj3o+8YvvgSLyNNOLjeBGhTTNdLzVJy3reGMBbTtrB7RoB3XbNBAneCsHLatcbPhdV3GrdB1WYhw3IKNZq-W2DCLYRO7QPAljgsgORcDwVJAA&quot;&gt;this playground&lt;/a&gt;, thanks to &lt;a href=&quot;https://github.com/typescript-cheatsheets/react/issues/388&quot;&gt;this discussion with @rajivpunjabi&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The first option will bypass nullchecks on &lt;code&gt;ref1.current&lt;/code&gt;, and is intended to be passed in to built-in &lt;code&gt;ref&lt;/code&gt; attributes that React will manage (because React handles setting the &lt;code&gt;current&lt;/code&gt; value for you).&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;code&gt;null!&lt;/code&gt; is a non-null assertion operator (the &lt;code&gt;!&lt;/code&gt;). It asserts that any expression before it is not &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, so if you have &lt;code&gt;useRef&amp;lt;HTMLElement&amp;gt;(null!)&lt;/code&gt; it means that you&#39;re instantiating the ref with a current value of &lt;code&gt;null&lt;/code&gt; but lying to TypeScript that it&#39;s not &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function MyComponent() {
  const ref1 = useRef&amp;lt;HTMLDivElement&amp;gt;(null!);
  useEffect(() =&amp;gt; {
    doSomethingWith(ref1.current);
    // TypeScript won&#39;t require null-check e.g. ref1 &amp;amp;&amp;amp; ref1.current
  });
  return &amp;lt;div ref={ref1}&amp;gt; etc &amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The second option will infer a &lt;code&gt;RefObject&lt;/code&gt; instead of a &lt;code&gt;MutableRefObject&lt;/code&gt;. This means there will be a type error if you try to assign to &lt;code&gt;ref2.current&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The third option will make &lt;code&gt;ref3.current&lt;/code&gt; mutable, and is intended for &quot;instance variables&quot; that you manage yourself.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;function TextInputWithFocusButton() {
  // initialise with null, but tell TypeScript we are looking for an HTMLInputElement
  const inputEl = React.useRef&amp;lt;HTMLInputElement&amp;gt;(null);
  const onButtonClick = () =&amp;gt; {
    // strict null checks need us to check if inputEl and current exist.
    // but once current exists, it is of type HTMLInputElement, thus it
    // has the method focus! ‚úÖ
    if (inputEl &amp;amp;&amp;amp; inputEl.current) {
      inputEl.current.focus();
    }
  };
  return (
    &amp;lt;&amp;gt;
      {/* in addition, inputEl only can be used with input elements. Yay! */}
      &amp;lt;input ref={inputEl} type=&quot;text&quot; /&amp;gt;
      &amp;lt;button onClick={onButtonClick}&amp;gt;Focus the input&amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgIilQ3wFgAoCzAVwDsNgJa4AVJADxgElaxqYA6sBgALAGIQ01AM4AhfjCYAKAJRwA3hThwA9DrjBaw4CgA2waUjgB3YSLi1qp0wBo4AI35wYSZ6wCeYEgAymhQwGDw1lYoRHCmEBAA1oYA5nCY0HAozAASLACyADI8fDAAoqZIIEi0MFpwaEzS8IZllXAAvIjEMAB0MkjImAA8+cWl-JXVtTAAfEqOzioA3A1NtC1wTPIwirQAwuZoSV1wql1zGg3aenAt4RgOTqaNIkgn0g5ISAAmcDJvBA3h9TsBMAZeFNXjl-lIoEQ6nAOBZ+jddPpPPAmGgrPDEfAUS1pG5hAYvhAITBAlZxiUoRUqjU6m5RIDhOi7iIUF9RFYaqIIP9MlJpABCOCAUHJ0eDzm1oXAAGSKyHtUx9fGzNSacjaPWq6Ea6gI2Z9EUyVRrXV6gC+DRtVu0RBgxuYSnRIzm6O06h0ACpIdlfr9jExSQyOkxTP5GjkPFZBv9bKIDYSmbNpH04ABNFD+CV+nR2636kby+BETCddTlyo27w0zr4HycfC6L0lvUjLH7baHY5Jas7BRMI7AE42uYSUXed6pkY6HtMDulnQruCrCg2oA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;example from &lt;a href=&quot;https://fettblog.eu/typescript-react/hooks/#useref&quot;&gt;Stefan Baumgartner&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;useImperativeHandle&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;we dont have much here, but this is from &lt;a href=&quot;https://github.com/typescript-cheatsheets/react/issues/106&quot;&gt;a discussion in our issues&lt;/a&gt;. Please contribute if you have anything to add!&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type ListProps&amp;lt;ItemType&amp;gt; = {
  items: ItemType[];
  innerRef?: React.Ref&amp;lt;{ scrollToItem(item: ItemType): void }&amp;gt;;
};

function List&amp;lt;ItemType&amp;gt;(props: ListProps&amp;lt;ItemType&amp;gt;) {
  useImperativeHandle(props.innerRef, () =&amp;gt; ({
    scrollToItem() {},
  }));
  return null;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Custom Hooks&lt;/h2&gt; 
&lt;p&gt;If you are returning an array in your Custom Hook, you will want to avoid type inference as TypeScript will infer a union type (when you actually want different types in each position of the array). Instead, use &lt;a href=&quot;https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#const-assertions&quot;&gt;TS 3.4 const assertions&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;export function useLoading() {
  const [isLoading, setState] = React.useState(false);
  const load = (aPromise: Promise&amp;lt;any&amp;gt;) =&amp;gt; {
    setState(true);
    return aPromise.finally(() =&amp;gt; setState(false));
  };
  return [isLoading, load] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?target=5&amp;amp;jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCpAD0ljkwFcA7DYCZuRgZyQBkIKACbBmAcwAUASjgBvCnDhoO3eAG1g3AcNFiANHF4wAyjBQwkAXTgBeRMRgA6HklPmkEzCgA2vKQG4FJRV4b0EhWzgJFAAFHBBNJAAuODjcRIAeFGYATwA+GRs8uSDFIzcLCRgoRiQA0rgiGEYoTlj4xMdMUR9vHIlpW2Lys0qvXzr68kUAX0DpxqRm1rgNLXDdAzDhaxRuYOZVfzgAehO4UUwkKH21ACMICG9UZgMYHLAkCEw4baFrUSqVARb5RB5PF5wAA+cHen1BfykaksFBmQA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This way, when you destructure you actually get the right types based on destructure position.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;If you are &lt;a href=&quot;https://github.com/babel/babel/issues/9800&quot;&gt;having trouble with const assertions&lt;/a&gt;, you can also assert or define the function return types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;export function useLoading() {
  const [isLoading, setState] = React.useState(false);
  const load = (aPromise: Promise&amp;lt;any&amp;gt;) =&amp;gt; {
    setState(true);
    return aPromise.finally(() =&amp;gt; setState(false));
  };
  return [isLoading, load] as [
    boolean,
    (aPromise: Promise&amp;lt;any&amp;gt;) =&amp;gt; Promise&amp;lt;any&amp;gt;
  ];
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A helper function that automatically types tuples can also be helpful if you write a lot of custom hooks:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;function tuplify&amp;lt;T extends any[]&amp;gt;(...elements: T) {
  return elements;
}

function useArray() {
  const numberValue = useRef(3).current;
  const functionValue = useRef(() =&amp;gt; {}).current;
  return [numberValue, functionValue]; // type is (number | (() =&amp;gt; void))[]
}

function useTuple() {
  const numberValue = useRef(3).current;
  const functionValue = useRef(() =&amp;gt; {}).current;
  return tuplify(numberValue, functionValue); // type is [number, () =&amp;gt; void]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Note that the React team recommends that custom hooks that return more than two values should use proper objects instead of tuples, however.&lt;/p&gt; 
&lt;h2&gt;More Hooks + TypeScript reading:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://medium.com/@jrwebdev/react-hooks-in-typescript-88fce7001d0d&lt;/li&gt; 
 &lt;li&gt;https://fettblog.eu/typescript-react/hooks/#useref&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you are writing a React Hooks library, don&#39;t forget that you should also expose your types for users to use.&lt;/p&gt; 
&lt;h2&gt;Example React Hooks + TypeScript Libraries:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://github.com/mweststrate/use-st8&lt;/li&gt; 
 &lt;li&gt;https://github.com/palmerhq/the-platform&lt;/li&gt; 
 &lt;li&gt;https://github.com/sw-yx/hooks&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Class Components&lt;/h2&gt; 
&lt;p&gt;Within TypeScript, &lt;code&gt;React.Component&lt;/code&gt; is a generic type (aka &lt;code&gt;React.Component&amp;lt;PropType, StateType&amp;gt;&lt;/code&gt;), so you want to provide it with (optional) prop and state type parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type MyProps = {
  // using `interface` is also ok
  message: string;
};
type MyState = {
  count: number; // like this
};
class App extends React.Component&amp;lt;MyProps, MyState&amp;gt; {
  state: MyState = {
    // optional second annotation for better type inference
    count: 0,
  };
  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.props.message} {this.state.count}
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgFlqAFHMAZzgF44BvCuHAD0QuAFd2wAHYBzOAANpMJFEzok8uME4oANuwhwIAawFwQSduxQykALjjsYUaTIDcFAL4fyNOo2oAZRgUZW4+MzQIMSkYBykxEAAjFTdhUV1gY3oYAAttLx80XRQrOABBMDA4JAAPZSkAE05kdBgAOgBhXEgpJFiAHiZWCA4AGgDg0KQAPgjyQSdphyYpsJ5+BcF0ozAYYAgpPUckKKa4FCkpCBD9w7hMaDgUmGUoOD96aUwVfrQkMyCKIxOJwAAMZm8ZiITRUAAoAJTzbZwIgwMRQKRwOGA7YDRrAABuM1xKN4eW07TAbHY7QsVhsSE8fAptKWynawNinlJcAGQgJxNxCJ8gh55E8QA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Don&#39;t forget that you can export/import/extend these types/interfaces for reuse.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;It isn&#39;t strictly necessary to annotate the &lt;code&gt;state&lt;/code&gt; class property, but it allows better type inference when accessing &lt;code&gt;this.state&lt;/code&gt; and also initializing the state.&lt;/p&gt; 
&lt;p&gt;This is because they work in two different ways, the 2nd generic type parameter will allow &lt;code&gt;this.setState()&lt;/code&gt; to work correctly, because that method comes from the base class, but initializing &lt;code&gt;state&lt;/code&gt; inside the component overrides the base implementation so you have to make sure that you tell the compiler that you&#39;re not actually doing anything different.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/57&quot;&gt;See commentary by @ferdaber here&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;You often see sample code include &lt;code&gt;readonly&lt;/code&gt; to mark props and state immutable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type MyProps = {
  readonly message: string;
};
type MyState = {
  readonly count: number;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is not necessary as &lt;code&gt;React.Component&amp;lt;P,S&amp;gt;&lt;/code&gt; already marks them as immutable. (&lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26813&quot;&gt;See PR and discussion!&lt;/a&gt;)&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;Class Methods&lt;/strong&gt;: Do it like normal, but just remember any arguments for your functions also need to be typed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class App extends React.Component&amp;lt;{ message: string }, { count: number }&amp;gt; {
  state = { count: 0 };
  render() {
    return (
      &amp;lt;div onClick={() =&amp;gt; this.increment(1)}&amp;gt;
        {this.props.message} {this.state.count}
      &amp;lt;/div&amp;gt;
    );
  }
  increment = (amt: number) =&amp;gt; {
    // like this
    this.setState((state) =&amp;gt; ({
      count: state.count + amt,
    }));
  };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BBMMOJADxiQDsATRsnQwAdAGFckHrxgAeAN5wQSBigDmSAFxw6MKMB5q4AXwA0cRWggBXHjG09rIAEZIoJgHwWKcHTBTccAC8FnBWtvZwAAwmANw+cET8bgAUAJTe5L6+RDDWUDxwKQnZcLJ8wABucBA8YtTAaADWQfLpwV4wABbAdCIGaETKdikAjGnGHiWlFt29ImA4YH3KqhrGsz19ugFIIuF2xtO+sgD0FZVTWdlp8ddH1wNDMsFFKCCRji5uGUFe8tNTqc4A0mkg4HM6NNISI6EgYABlfzcFI7QJ-IoA66lA6RNF7XFwADUcHeMGmxjStwSxjuxiAA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Class Properties&lt;/strong&gt;: If you need to declare class properties for later use, just declare it like &lt;code&gt;state&lt;/code&gt;, but without assignment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class App extends React.Component&amp;lt;{
  message: string;
}&amp;gt; {
  pointer: number; // like this
  componentDidMount() {
    this.pointer = 3;
  }
  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.props.message} and {this.pointer}
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BBMMOJADxiQDsATRsnQwAdAGFckHrxgAeAN4U4cEEgYoA5kgBccOjCjAeGgNwUAvgD44i8sshHuUXTwCuIAEZIoJuAHo-OGpgAGskOBgAC2A6JTg0SQhpHhgAEWA+AFkIVxSACgBKGzjlKJiRBxTvOABeOABmMzs4cziifm9C4ublIhhXKB44PJLlOFk+YAA3S1GxmzK6CpwwJdV1LXM4FH4F6KXKp1aesdk-SZnRgqblY-MgA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Typing getDerivedStateFromProps&lt;/h2&gt; 
&lt;p&gt;Before you start using &lt;code&gt;getDerivedStateFromProps&lt;/code&gt;, please go through the &lt;a href=&quot;https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&quot;&gt;You Probably Don&#39;t Need Derived State&lt;/a&gt;. Derived State can be implemented using hooks which can also help set up memoization.&lt;/p&gt; 
&lt;p&gt;Here are a few ways in which you can annotate &lt;code&gt;getDerivedStateFromProps&lt;/code&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;If you have explicitly typed your derived state and want to make sure that the return value from &lt;code&gt;getDerivedStateFromProps&lt;/code&gt; conforms to it.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class Comp extends React.Component&amp;lt;Props, State&amp;gt; {
  static getDerivedStateFromProps(
    props: Props,
    state: State
  ): Partial&amp;lt;State&amp;gt; | null {
    //
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;When you want the function&#39;s return value to determine your state.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class Comp extends React.Component&amp;lt;
  Props,
  ReturnType&amp;lt;typeof Comp[&quot;getDerivedStateFromProps&quot;]&amp;gt;
&amp;gt; {
  static getDerivedStateFromProps(props: Props) {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;When you want derived state with other state fields and memoization&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type CustomValue = any;
interface Props {
  propA: CustomValue;
}
interface DefinedState {
  otherStateField: string;
}
type State = DefinedState &amp;amp; ReturnType&amp;lt;typeof transformPropsToState&amp;gt;;
function transformPropsToState(props: Props) {
  return {
    savedPropA: props.propA, // save for memoization
    derivedState: props.propA,
  };
}
class Comp extends React.PureComponent&amp;lt;Props, State&amp;gt; {
  constructor(props: Props) {
    super(props);
    this.state = {
      otherStateField: &quot;123&quot;,
      ...transformPropsToState(props),
    };
  }
  static getDerivedStateFromProps(props: Props, state: State) {
    if (isEqual(props.propA, state.savedPropA)) return null;
    return transformPropsToState(props);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoUSWOYAZwFEBHAVxQBs5tcD2IATFHQAWAOnpJWHMuQowAnmCRwAwizoxcANQ4tlAXjgoAdvIDcFYMZhIomdMoAKOMHTgBvCnDhgXAQQAuVXVNEB12PQtyAF9La1t7NGUAESRMKyR+AGUYFBsPLzgIGGFbHLykADFgJHZ+II0oKwBzKNjyBSU4cvzDVPTjTJ7lADJEJBgWKGMAFUUkAB5OpAhMOBgoEzpMaBBnCFcZiGGAPijMFmMMYAhjdc3jbd39w+PcmwAKXwO6IJe6ACUBXI3iIk2mwO83joKAAbpkXoEfC46KJvmA-AAaOAAehxcBh8K40DgICQIAgwAAXnkbsZCt5+LZgPDsu8kEF0aj0X5CtE2hQ0OwhG4VLgwHAkAAPGzGfhuZDoGCiRxTJBi8C3JDWBb-bGnSFwNC3RosDDQL4ov4ooGeEFQugsJRQS0-AFRKHrYT0UQaCpwQx2z3eYqlKDDaq1epwABEAEYAEwAZhjmIZUNEmY2Wx2UD2KKOw1drgB6f5fMKfpgwDQcGaE1STVZEZw+Z+xd+cD1BPZQWGtvTwDWH3ozDY7A7aP82KrSF9cIR-gBQLBUzuxhY7HYHqhq4h2ceubbryLXPdFZiQA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;You May Not Need &lt;code&gt;defaultProps&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;As per &lt;a href=&quot;https://twitter.com/dan_abramov/status/1133878326358171650&quot;&gt;this tweet&lt;/a&gt;, defaultProps will eventually be deprecated. You can check the discussions here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://twitter.com/hswolff/status/1133759319571345408&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The consensus is to use object default values.&lt;/p&gt; 
&lt;p&gt;Function Components:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type GreetProps = { age?: number };

const Greet = ({ age = 21 }: GreetProps) =&amp;gt; // etc
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Class Components:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type GreetProps = {
  age?: number;
};

class Greet extends React.Component&amp;lt;GreetProps&amp;gt; {
  render() {
    const { age = 21 } = this.props;
    /*...*/
  }
}

let el = &amp;lt;Greet age={3} /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Typing &lt;code&gt;defaultProps&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;Type inference improved greatly for &lt;code&gt;defaultProps&lt;/code&gt; in &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html&quot;&gt;TypeScript 3.0+&lt;/a&gt;, although &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/61&quot;&gt;some edge cases are still problematic&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Function Components&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type GreetProps = { age: number } &amp;amp; typeof defaultProps;
const defaultProps = {
  age: 21,
};

const Greet = (props: GreetProps) =&amp;gt; {
  // etc
};
Greet.defaultProps = defaultProps;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwBQdMAnmFnAOKVYwAKxY6ALxwA3igDmWAFxwAdgFcQAIyxQ4AXzgAyOM1YQCcACZYCyeQBte-VPVwRZqeCbOXrEAXGEi6cCdLgAJgBGABo6dXo6e0d4TixuLzgACjAbGXjuPg9UAEovAD5RXzhKGHkoWTgAHiNgADcCkTScgDpkSTgAeiQFZVVELvVqrrrGiPpMmFaXcytsz2FZtwXbOiA&quot;&gt;See this in TS Playground&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;Class components&lt;/strong&gt;, there are &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/pull/103#issuecomment-481061483&quot;&gt;a couple ways to do it&lt;/a&gt;(including using the &lt;code&gt;Pick&lt;/code&gt; utility type) but the recommendation is to &quot;reverse&quot; the props definition:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type GreetProps = typeof Greet.defaultProps &amp;amp; {
  age: number;
};

class Greet extends React.Component&amp;lt;GreetProps&amp;gt; {
  static defaultProps = {
    age: 21,
  };
  /*...*/
}

// Type-checks! No type assertions needed!
let el = &amp;lt;Greet age={3} /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;code&gt;JSX.LibraryManagedAttributes&lt;/code&gt; nuance for library authors&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The above implementations work fine for App creators, but sometimes you want to be able to export &lt;code&gt;GreetProps&lt;/code&gt; so that others can consume it. The problem here is that the way &lt;code&gt;GreetProps&lt;/code&gt; is defined, &lt;code&gt;age&lt;/code&gt; is a required prop when it isn&#39;t because of &lt;code&gt;defaultProps&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The insight to have here is that &lt;a href=&quot;https://github.com/typescript-cheatsheets/react/issues/66#issuecomment-453878710&quot;&gt;&lt;code&gt;GreetProps&lt;/code&gt; is the &lt;em&gt;internal&lt;/em&gt; contract for your component, not the &lt;em&gt;external&lt;/em&gt;, consumer facing contract&lt;/a&gt;. You could create a separate type specifically for export, or you could make use of the &lt;code&gt;JSX.LibraryManagedAttributes&lt;/code&gt; utility:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// internal contract, should not be exported out
type GreetProps = {
  age?: number;
};

class Greet extends Component&amp;lt;GreetProps&amp;gt; {
  static defaultProps = { age: 21 };
}

// external contract
export type ApparentGreetProps = JSX.LibraryManagedAttributes&amp;lt;
  typeof Greet,
  GreetProps
&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will work properly, although hovering over&lt;code&gt;ApparentGreetProps&lt;/code&gt;may be a little intimidating. You can reduce this boilerplate with the&lt;code&gt;ComponentProps&lt;/code&gt; utility detailed below.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Consuming Props of a Component with defaultProps&lt;/h2&gt; 
&lt;p&gt;A component with &lt;code&gt;defaultProps&lt;/code&gt; may seem to have some required props that actually aren&#39;t.&lt;/p&gt; 
&lt;h3&gt;Problem Statement&lt;/h3&gt; 
&lt;p&gt;Here&#39;s what you want to do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;interface IProps {
  name: string;
}
const defaultProps = {
  age: 25,
};
const GreetComponent = ({ name, age }: IProps &amp;amp; typeof defaultProps) =&amp;gt; (
  &amp;lt;div&amp;gt;{`Hello, my name is ${name}, ${age}`}&amp;lt;/div&amp;gt;
);
GreetComponent.defaultProps = defaultProps;

const TestComponent = (props: React.ComponentProps&amp;lt;typeof GreetComponent&amp;gt;) =&amp;gt; {
  return &amp;lt;h1 /&amp;gt;;
};

// Property &#39;age&#39; is missing in type &#39;{ name: string; }&#39; but required in type &#39;{ age: number; }&#39;
const el = &amp;lt;TestComponent name=&quot;foo&quot; /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Solution&lt;/h3&gt; 
&lt;p&gt;Define a utility that applies &lt;code&gt;JSX.LibraryManagedAttributes&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type ComponentProps&amp;lt;T&amp;gt; = T extends
  | React.ComponentType&amp;lt;infer P&amp;gt;
  | React.Component&amp;lt;infer P&amp;gt;
  ? JSX.LibraryManagedAttributes&amp;lt;T, P&amp;gt;
  : never;

const TestComponent = (props: ComponentProps&amp;lt;typeof GreetComponent&amp;gt;) =&amp;gt; {
  return &amp;lt;h1 /&amp;gt;;
};

// No error
const el = &amp;lt;TestComponent name=&quot;foo&quot; /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwBQdMAnmFnAMImQB2W3MABWJhUAHgAqAPjgBeOOLhYAHjD4ATdNjwwAdJ3ARe-cSyyjg3AlihwB0gD6Yqu-Tz4xzl67cl04cAH44ACkAZQANHQAZYAAjKGQoJgBZZG5kAHMsNQBBGBgoOIBXVTFxABofPzgALjheADdrejoLVSgCPDYASSEIETgAb2r0kCw61AKLDPoAXzpcQ0m4NSxOooAbQWF0OWH-TPG4ACYAVnK6WfpF7mWAcUosGFdDd1k4AApB+uQxysO4LM6r0dnAAGRwZisCAEFZrZCbbb9VAASlk0g+1VEamADUkgwABgAJLAbDYQSogJg-MZwYDoAAkg1GWFmlSZh1mBNmogA9Di8XQUfQHlgni8jLpVustn0BnJpQjZTsWrzeXANsh2gwbstxFhJhK3nIPmAdnUjfw5WIoVgYXBReKuK9+JI0TJpPs4JQYEUoNw4KIABYARjgvN8VwYargADkIIooMQoAslvBSe8JAbns7JTSsDIyAQIBAyOHJDQgA&quot;&gt;&lt;em&gt;See this in TS Playground&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Misc Discussions and Knowledge&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;You can check the discussions here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://medium.com/@martin_hotell/10-typescript-pro-tips-patterns-with-or-without-react-5799488d6680&lt;/li&gt; 
 &lt;li&gt;https://github.com/DefinitelyTyped/DefinitelyTyped/issues/30695&lt;/li&gt; 
 &lt;li&gt;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/87&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This is just the current state and may be fixed in future.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;For TypeScript 2.9 and earlier, there&#39;s more than one way to do it, but this is the best advice we&#39;ve yet seen:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;type Props = Required&amp;lt;typeof MyComponent.defaultProps&amp;gt; &amp;amp; {
  /* additional props here */
};

export class MyComponent extends React.Component&amp;lt;Props&amp;gt; {
  static defaultProps = {
    foo: &quot;foo&quot;,
  };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Our former recommendation used the &lt;code&gt;Partial type&lt;/code&gt; feature in TypeScript, which means that the current interface will fulfill a partial version on the wrapped interface. In that way we can extend defaultProps without any changes in the types!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;interface IMyComponentProps {
  firstProp?: string;
  secondProp: IPerson[];
}

export class MyComponent extends React.Component&amp;lt;IMyComponentProps&amp;gt; {
  public static defaultProps: Partial&amp;lt;IMyComponentProps&amp;gt; = {
    firstProp: &quot;default&quot;,
  };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The problem with this approach is it causes complex issues with the type inference working with &lt;code&gt;JSX.LibraryManagedAttributes&lt;/code&gt;. Basically it causes the compiler to think that when creating a JSX expression with that component, that all of its props are optional.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/57&quot;&gt;See commentary by @ferdaber here&lt;/a&gt; and &lt;a href=&quot;https://github.com/typescript-cheatsheets/react/issues/61&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Typing Component Props&lt;/h2&gt; 
&lt;p&gt;This is intended as a basic orientation and reference for React developers familiarizing with TypeScript.&lt;/p&gt; 
&lt;h2&gt;Basic Prop Types Examples&lt;/h2&gt; 
&lt;p&gt;A list of TypeScript types you will likely use in a React+TypeScript app:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type AppProps = {
  message: string;
  count: number;
  disabled: boolean;
  /** array of a type! */
  names: string[];
  /** string literals to specify exact string values, with a union type to join them together */
  status: &quot;waiting&quot; | &quot;success&quot;;
  /** any object as long as you dont use its properties (NOT COMMON but useful as placeholder) */
  obj: object;
  obj2: {}; // almost the same as `object`, exactly the same as `Object`
  /** an object with any number of properties (PREFERRED) */
  obj3: {
    id: string;
    title: string;
  };
  /** array of objects! (common) */
  objArr: {
    id: string;
    title: string;
  }[];
  /** a dict object with any number of properties of the same type */
  dict1: {
    [key: string]: MyTypeHere;
  };
  dict2: Record&amp;lt;string, MyTypeHere&amp;gt;; // equivalent to dict1
  /** any function as long as you don&#39;t invoke it (not recommended) */
  onSomething: Function;
  /** function that doesn&#39;t take or return anything (VERY COMMON) */
  onClick: () =&amp;gt; void;
  /** function with named prop (VERY COMMON) */
  onChange: (id: number) =&amp;gt; void;
  /** alternative function type syntax that takes an event (VERY COMMON) */
  onClick(event: React.MouseEvent&amp;lt;HTMLButtonElement&amp;gt;): void;
  /** an optional prop (VERY COMMON!) */
  optional?: OptionalType;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice we have used the TSDoc &lt;code&gt;/** comment */&lt;/code&gt; style here on each prop. You can and are encouraged to leave descriptive comments on reusable components. For a fuller example and discussion, see our &lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/advanced/misc_concerns/#commenting-components&quot;&gt;Commenting Components&lt;/a&gt; section in the Advanced Cheatsheet.&lt;/p&gt; 
&lt;h2&gt;Useful React Prop Type Examples&lt;/h2&gt; 
&lt;p&gt;Relevant for components that accept other React components as props.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;export declare interface AppProps {
  children1: JSX.Element; // bad, doesnt account for arrays
  children2: JSX.Element | JSX.Element[]; // meh, doesn&#39;t accept strings
  children3: React.ReactChildren; // despite the name, not at all an appropriate type; it is a utility
  children4: React.ReactChild[]; // better, accepts array children
  children: React.ReactNode; // best, accepts everything (see edge case below)
  functionChildren: (name: string) =&amp;gt; React.ReactNode; // recommended function as a child render prop type
  style?: React.CSSProperties; // to pass through style props
  onChange?: React.FormEventHandler&amp;lt;HTMLInputElement&amp;gt;; // form events! the generic parameter is the type of event.target
  //  more info: https://react-typescript-cheatsheet.netlify.app/docs/advanced/patterns_by_usecase/#wrappingmirroring
  props: Props &amp;amp; React.ComponentPropsWithoutRef&amp;lt;&quot;button&quot;&amp;gt;; // to impersonate all the props of a button element and explicitly not forwarding its ref
  props2: Props &amp;amp; React.ComponentPropsWithRef&amp;lt;MyButtonWithForwardRef&amp;gt;; // to impersonate all the props of MyButtonForwardedRef and explicitly forwarding its ref
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This code typechecks but has a runtime error:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type Props = {
  children: React.ReactNode;
};

function Comp({ children }: Props) {
  return &amp;lt;div&amp;gt;{children}&amp;lt;/div&amp;gt;;
}
function App() {
  return &amp;lt;Comp&amp;gt;{{}}&amp;lt;/Comp&amp;gt;; // Runtime Error: Objects not valid as React Child!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is because &lt;code&gt;ReactNode&lt;/code&gt; includes &lt;code&gt;ReactFragment&lt;/code&gt; which allows a &lt;code&gt;{}&lt;/code&gt; type, which is &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/issues/37596#issue-480260937&quot;&gt;too wide&lt;/a&gt;. Fixing this would break a lot of libraries, so for now you just have to be mindful that &lt;code&gt;ReactNode&lt;/code&gt; is not absolutely bulletproof.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react/issues/357&quot;&gt;Thanks @pomle for raising this.&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Quote &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/57&quot;&gt;@ferdaber&lt;/a&gt;: A more technical explanation is that a valid React node is not the same thing as what is returned by &lt;code&gt;React.createElement&lt;/code&gt;. Regardless of what a component ends up rendering, &lt;code&gt;React.createElement&lt;/code&gt; always returns an object, which is the &lt;code&gt;JSX.Element&lt;/code&gt; interface, but &lt;code&gt;React.ReactNode&lt;/code&gt; is the set of all possible return values of a component.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;JSX.Element&lt;/code&gt; -&amp;gt; Return value of &lt;code&gt;React.createElement&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;React.ReactNode&lt;/code&gt; -&amp;gt; Return value of a component&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/129&quot;&gt;More discussion: Where ReactNode does not overlap with JSX.Element&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Types or Interfaces?&lt;/h2&gt; 
&lt;p&gt;You can use either Types or Interfaces to type Props and State, so naturally the question arises - which do you use?&lt;/p&gt; 
&lt;h3&gt;TL;DR&lt;/h3&gt; 
&lt;p&gt;Use Interface until You Need Type - &lt;a href=&quot;https://twitter.com/orta/status/1356129195835973632?s=20&quot;&gt;orta&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;More Advice&lt;/h3&gt; 
&lt;p&gt;Here&#39;s a helpful rule of thumb:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;always use &lt;code&gt;interface&lt;/code&gt; for public API&#39;s definition when authoring a library or 3rd party ambient type definitions, as this allows a consumer to extend them via &lt;em&gt;declaration merging&lt;/em&gt; if some definitions are missing.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;consider using &lt;code&gt;type&lt;/code&gt; for your React Component Props and State, for consistency and because it is more constrained.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can read more about the reasoning behind this rule of thumb in &lt;a href=&quot;https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c&quot;&gt;Interface vs Type alias in TypeScript 2.7&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The TypeScript Handbook now also includes guidance on &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces&quot;&gt;Differences Between Type Aliases and Interfaces&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: At scale, there are performance reasons to prefer interfaces (&lt;a href=&quot;https://github.com/microsoft/TypeScript/wiki/Performance#preferring-interfaces-over-intersections&quot;&gt;see official Microsoft notes on this&lt;/a&gt;) but &lt;a href=&quot;https://news.ycombinator.com/item?id=25201887&quot;&gt;take this with a grain of salt&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Types are useful for union types (e.g. &lt;code&gt;type MyType = TypeA | TypeB&lt;/code&gt;) whereas Interfaces are better for declaring dictionary shapes and then &lt;code&gt;implementing&lt;/code&gt; or &lt;code&gt;extending&lt;/code&gt; them.&lt;/p&gt; 
&lt;h3&gt;Useful table for Types vs Interfaces&lt;/h3&gt; 
&lt;p&gt;It&#39;s a nuanced topic, don&#39;t get too hung up on it. Here&#39;s a handy table:&lt;/p&gt; 
&lt;p&gt;| Aspect | Type | Interface | | ----------------------------------------------- | :--: | :-------: | | Can describe functions | ‚úÖ | ‚úÖ | | Can describe constructors | ‚úÖ | ‚úÖ | | Can describe tuples | ‚úÖ | ‚úÖ | | Interfaces can extend it | ‚ö†Ô∏è | ‚úÖ | | Classes can extend it | üö´ | ‚úÖ | | Classes can implement it (&lt;code&gt;implements&lt;/code&gt;) | ‚ö†Ô∏è | ‚úÖ | | Can intersect another one of its kind | ‚úÖ | ‚ö†Ô∏è | | Can create a union with another one of its kind | ‚úÖ | üö´ | | Can be used to create mapped types | ‚úÖ | üö´ | | Can be mapped over with mapped types | ‚úÖ | ‚úÖ | | Expands in error messages and logs | ‚úÖ | üö´ | | Can be augmented | üö´ | ‚úÖ | | Can be recursive | ‚ö†Ô∏è | ‚úÖ |&lt;/p&gt; 
&lt;p&gt;‚ö†Ô∏è In some cases&lt;/p&gt; 
&lt;p&gt;(source: &lt;a href=&quot;https://twitter.com/karoljmajewski/status/1082413696075382785&quot;&gt;Karol Majewski&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;getDerivedStateFromProps&lt;/h2&gt; 
&lt;p&gt;Before you start using &lt;code&gt;getDerivedStateFromProps&lt;/code&gt;, please go through the &lt;a href=&quot;https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&quot;&gt;You Probably Don&#39;t Need Derived State&lt;/a&gt;. Derived State can be easily achieved using hooks which can also help set up memoization easily.&lt;/p&gt; 
&lt;p&gt;Here are a few ways in which you can annotate &lt;code&gt;getDerivedStateFromProps&lt;/code&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;If you have explicitly typed your derived state and want to make sure that the return value from &lt;code&gt;getDerivedStateFromProps&lt;/code&gt; conforms to it.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class Comp extends React.Component&amp;lt;Props, State&amp;gt; {
  static getDerivedStateFromProps(
    props: Props,
    state: State
  ): Partial&amp;lt;State&amp;gt; | null {
    //
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;When you want the function&#39;s return value to determine your state.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class Comp extends React.Component&amp;lt;
  Props,
  ReturnType&amp;lt;typeof Comp[&quot;getDerivedStateFromProps&quot;]&amp;gt;
&amp;gt; {
  static getDerivedStateFromProps(props: Props) {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;3&quot;&gt; 
 &lt;li&gt;When you want derived state with other state fields and memoization&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type CustomValue = any;
interface Props {
  propA: CustomValue;
}
interface DefinedState {
  otherStateField: string;
}
type State = DefinedState &amp;amp; ReturnType&amp;lt;typeof transformPropsToState&amp;gt;;
function transformPropsToState(props: Props) {
  return {
    savedPropA: props.propA, // save for memoization
    derivedState: props.propA,
  };
}
class Comp extends React.PureComponent&amp;lt;Props, State&amp;gt; {
  constructor(props: Props) {
    super(props);
    this.state = {
      otherStateField: &quot;123&quot;,
      ...transformPropsToState(props),
    };
  }
  static getDerivedStateFromProps(props: Props, state: State) {
    if (isEqual(props.propA, state.savedPropA)) return null;
    return transformPropsToState(props);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoUSWOYAZwFEBHAVxQBs5tcD2IATFHQAWAOnpJWHMuQowAnmCRwAwizoxcANQ4tlAXjgoAdvIDcFYMZhIomdMoAKOMHTgBvCnDhgXAQQAuVXVNEB12PQtyAF9La1t7NGUAESRMKyR+AGUYFBsPLzgIGGFbHLykADFgJHZ+II0oKwBzKNjyBSU4cvzDVPTjTJ7lADJEJBgWKGMAFUUkAB5OpAhMOBgoEzpMaBBnCFcZiGGAPijMFmMMYAhjdc3jbd39w+PcmwAKXwO6IJe6ACUBXI3iIk2mwO83joKAAbpkXoEfC46KJvmA-AAaOAAehxcBh8K40DgICQIAgwAAXnkbsZCt5+LZgPDsu8kEF0aj0X5CtE2hQ0OwhG4VLgwHAkAAPGzGfhuZDoGCiRxTJBi8C3JDWBb-bGnSFwNC3RosDDQL4ov4ooGeEFQugsJRQS0-AFRKHrYT0UQaCpwQx2z3eYqlKDDaq1epwABEAEYAEwAZhjmIZUNEmY2Wx2UD2KKOw1drgB6f5fMKfpgwDQcGaE1STVZEZw+Z+xd+cD1BPZQWGtvTwDWH3ozDY7A7aP82KrSF9cIR-gBQLBUzuxhY7HYHqhq4h2ceubbryLXPdFZiQA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Forms and Events&lt;/h2&gt; 
&lt;p&gt;If performance is not an issue (and it usually isn&#39;t!), inlining handlers is easiest as you can just use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-typing&quot;&gt;type inference and contextual typing&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const el = (
  &amp;lt;button
    onClick={(event) =&amp;gt; {
      /* event will be correctly typed automatically! */
    }}
  /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But if you need to define your event handler separately, IDE tooling really comes in handy here, as the @type definitions come with a wealth of typing. Type what you are looking for and usually the autocomplete will help you out. Here is what it looks like for an &lt;code&gt;onChange&lt;/code&gt; for a form event:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type State = {
  text: string;
};
class App extends React.Component&amp;lt;Props, State&amp;gt; {
  state = {
    text: &quot;&quot;,
  };

  // typing on RIGHT hand side of =
  onChange = (e: React.FormEvent&amp;lt;HTMLInputElement&amp;gt;): void =&amp;gt; {
    this.setState({ text: e.currentTarget.value });
  };
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;input type=&quot;text&quot; value={this.state.text} onChange={this.onChange} /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BBMMOJADxiQDsATRsnQwAdAGFckHrxgAeCnDgBvAL4AaBcs2KA9Drg8IcMDjB1tcblwBccOjCjAeAcwDcmlRQB8W8ovso3HAAvL6KilYwtgBE0R7ulH5wepYAnmBOznAQPIgAkgDiABIAKnAAFij8dsB8SNmYIZo5YpUu9aEAFEi2QhgiAGLQIACiAG4ysqUAsgAyeTxgAK4wI9RIIDJeAJS2YxC1IT5KFjDlwHQidEgwAMowgUidSpacUewiaEtQRDwwJSgoM4biIxihqEt6iptglFCpYXBfnUoJ1tmFwkQYN9cp0LIpZHxgGMvHjwrInMt4DB0khgtFItE4GCIbSlGcLlcHtwRJEVNkeK0qsDgmzzpcWm1gXydCSkuE4LIdITiRYYR4KCogA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Instead of typing the arguments and return values with &lt;code&gt;React.FormEvent&amp;lt;&amp;gt;&lt;/code&gt; and &lt;code&gt;void&lt;/code&gt;, you may alternatively apply types to the event handler itself (&lt;em&gt;contributed by @TomasHubelbauer&lt;/em&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;  // typing on LEFT hand side of =
  onChange: React.ChangeEventHandler&amp;lt;HTMLInputElement&amp;gt; = (e) =&amp;gt; {
    this.setState({text: e.currentTarget.value})
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The first method uses an inferred method signature &lt;code&gt;(e: React.FormEvent&amp;lt;HTMLInputElement&amp;gt;): void&lt;/code&gt; and the second method enforces a type of the delegate provided by &lt;code&gt;@types/react&lt;/code&gt;. So &lt;code&gt;React.ChangeEventHandler&amp;lt;&amp;gt;&lt;/code&gt; is simply a &quot;blessed&quot; typing by &lt;code&gt;@types/react&lt;/code&gt;, whereas you can think of the inferred method as more... &lt;em&gt;artisanally hand-rolled&lt;/em&gt;. Either way it&#39;s a good pattern to know. &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/pull/24&quot;&gt;See our Github PR for more&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;Typing onSubmit, with Uncontrolled components in a Form&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you don&#39;t quite care about the type of the event, you can just use React.SyntheticEvent. If your target form has custom named inputs that you&#39;d like to access, you can use type widening:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;&amp;lt;form
  ref={formRef}
  onSubmit={(e: React.SyntheticEvent) =&amp;gt; {
    e.preventDefault();
    const target = e.target as typeof e.target &amp;amp; {
      email: { value: string };
      password: { value: string };
    };
    const email = target.email.value; // typechecks!
    const password = target.password.value; // typechecks!
    // etc...
  }}
&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;label&amp;gt;
      Email:
      &amp;lt;input type=&quot;email&quot; name=&quot;email&quot; /&amp;gt;
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;label&amp;gt;
      Password:
      &amp;lt;input type=&quot;password&quot; name=&quot;password&quot; /&amp;gt;
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;input type=&quot;submit&quot; value=&quot;Log in&quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtCAOwGctoRlM4BeRYmAOgFc6kLABQBKClVoM4AMSbs4o9gD4FFOHAA8mJmrhFMbAN7aozJJgC+u2gGVeAIxDAYRoUgBcndDxsBPGjAAFkgwwGgAogBuSAEiynCGuupI3GBE0QEAIuYovAA2MKIA3Elw1PTwMChQAOYh8ilVtfUodHAwvmBIEKyN1XXwAGQJpckgKMB5noZwkSh5vB5wDFDANDVwFiXk6rtwYK10AO7QACbTs-OLnitrG1ulDzu75VJI45PyTQPc7xN53DmCyQRTgAHowe1Okg0ME0ABrOgAQlKr3gBzoxzOX36IVShxOUFOgKuIPBkI6XVhMMRKOe6ghcBCaG4rN0Fis5CUug0p2AkW59M0eRQ9iQeUFe3U4Q+U1GmjWYF4lWhbAARH9Jmq4DQUCAkOrNXltWDJbsNGCRWKJTywXyBTz7Wb1BoreLnbsAAoEs7ueUaRXKqFddUYrFE7W6-Whn0R8Eei1um3PC1Ox38hOBlUhtV0BxOGDaoGLdUAGQgGzWJrNqYzFAtJhAgpEQA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Of course, if you&#39;re making any sort of significant form, &lt;a href=&quot;https://jaredpalmer.com/formik&quot;&gt;you should use Formik&lt;/a&gt; or &lt;a href=&quot;https://react-hook-form.com/&quot;&gt;React Hook Form&lt;/a&gt;, which are written in TypeScript.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Context&lt;/h2&gt; 
&lt;h2&gt;Basic Example&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import * as React from &quot;react&quot;;

interface AppContextInterface {
  name: string;
  author: string;
  url: string;
}

const AppCtx = React.createContext&amp;lt;AppContextInterface | null&amp;gt;(null);

// Provider in your app

const sampleAppContext: AppContextInterface = {
  name: &quot;Using React Context in a Typescript App&quot;,
  author: &quot;thehappybug&quot;,
  url: &quot;http://www.example.com&quot;,
};

export const App = () =&amp;gt; (
  &amp;lt;AppCtx.Provider value={sampleAppContext}&amp;gt;...&amp;lt;/AppCtx.Provider&amp;gt;
);

// Consume in your app

export const PostInfo = () =&amp;gt; {
  const appContext = React.useContext(AppCtx);
  return (
    &amp;lt;div&amp;gt;
      Name: {appContext.name}, Author: {appContext.author}, Url:{&quot; &quot;}
      {appContext.url}
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use the &lt;a href=&quot;https://reactjs.org/docs/context.html#classcontexttype&quot;&gt;Class.contextType&lt;/a&gt; or &lt;a href=&quot;https://reactjs.org/docs/context.html#contextconsumer&quot;&gt;Context.Consumer&lt;/a&gt; API, let us know if you have trouble with that.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react/issues/97&quot;&gt;Thanks to @AlvSovereign&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Extended Example&lt;/h2&gt; 
&lt;p&gt;Using &lt;code&gt;React.createContext&lt;/code&gt; with an empty object as default value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;interface ContextState {
  // set the type of state you want to handle with context e.g.
  name: string | null;
}
//set an empty object as default state
const Context = React.createContext({} as ContextState);
// set up context provider as you normally would in JavaScript [React Context API](https://reactjs.org/docs/context.html#api)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;code&gt;React.createContext&lt;/code&gt; and &lt;a href=&quot;https://kentcdodds.com/blog/application-state-management-with-react/&quot;&gt;context getters&lt;/a&gt; to make a &lt;code&gt;createCtx&lt;/code&gt; with &lt;strong&gt;no &lt;code&gt;defaultValue&lt;/code&gt;, yet no need to check for &lt;code&gt;undefined&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import * as React from &quot;react&quot;;

const currentUserContext = React.createContext&amp;lt;string | undefined&amp;gt;(undefined);

function EnthusasticGreeting() {
  const currentUser = React.useContext(currentUserContext);
  return &amp;lt;div&amp;gt;HELLO {currentUser!.toUpperCase()}!&amp;lt;/div&amp;gt;;
}

function App() {
  return (
    &amp;lt;currentUserContext.Provider value=&quot;Anders&quot;&amp;gt;
      &amp;lt;EnthusasticGreeting /&amp;gt;
    &amp;lt;/currentUserContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Notice the explicit type arguments which we need because we don&#39;t have a default &lt;code&gt;string&lt;/code&gt; value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const currentUserContext = React.createContext&amp;lt;string | undefined&amp;gt;(undefined);
//                                             ^^^^^^^^^^^^^^^^^^
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;along with the non-null assertion to tell TypeScript that &lt;code&gt;currentUser&lt;/code&gt; is definitely going to be there:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;return &amp;lt;div&amp;gt;HELLO {currentUser!.toUpperCase()}!&amp;lt;/div&amp;gt;;
//                              ^
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is unfortunate because &lt;em&gt;we know&lt;/em&gt; that later in our app, a &lt;code&gt;Provider&lt;/code&gt; is going to fill in the context.&lt;/p&gt; 
&lt;p&gt;There are a few solutions for this:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;You can get around this by asserting non null:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const currentUserContext = React.createContext&amp;lt;string&amp;gt;(undefined!);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(&lt;a href=&quot;https://www.typescriptlang.org/play/index.html?jsx=1#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwBQduEAdqvLgK5SXMwCqqLFADCLGFgAe8ALyYqMAHS5KycaN6SYAHjZRgzAOYA+ABQdmAEywF9WCwEIAlPQLn8wFnACivABYdUNBhgXABxSixgwxNHOABvOjg4JlZ2Lh5+QSg4WWw8RQCsdXEpE05uLF4BIWLNZ0S4ShguZjgtC2AANyMACS8AGX6AeXjyjOqoBRgIPjAwGrQsGIBfey0Aeg7u+mW6V2Z3TwBBOZj4hqaWtrHKzJqxTQUABWJO4CtszuQAGw4saTIAGVfMgAO7MMhGBpJLQ+GD+QJsELhLCRfQGODrKEw9Y3KpZWpSZ6vd5CIw7IA&quot;&gt;Playground here&lt;/a&gt;) This is a quick and easy fix, but this loses type-safety, and if you forget to supply a value to the Provider, you will get an error.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;We can write a helper function called &lt;code&gt;createCtx&lt;/code&gt; that guards against accessing a &lt;code&gt;Context&lt;/code&gt; whose value wasn&#39;t provided. By doing this, API instead, &lt;strong&gt;we never have to provide a default and never have to check for &lt;code&gt;undefined&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import * as React from &quot;react&quot;;

/**
 * A helper to create a Context and Provider with no upfront default value, and
 * without having to check for undefined all the time.
 */
function createCtx&amp;lt;A extends {} | null&amp;gt;() {
  const ctx = React.createContext&amp;lt;A | undefined&amp;gt;(undefined);
  function useCtx() {
    const c = React.useContext(ctx);
    if (c === undefined)
      throw new Error(&quot;useCtx must be inside a Provider with a value&quot;);
    return c;
  }
  return [useCtx, ctx.Provider] as const; // &#39;as const&#39; makes TypeScript infer a tuple
}

// Usage:

// We still have to specify a type, but no default!
export const [useCurrentUserName, CurrentUserProvider] = createCtx&amp;lt;string&amp;gt;();

function EnthusasticGreeting() {
  const currentUser = useCurrentUserName();
  return &amp;lt;div&amp;gt;HELLO {currentUser.toUpperCase()}!&amp;lt;/div&amp;gt;;
}

function App() {
  return (
    &amp;lt;CurrentUserProvider value=&quot;Anders&quot;&amp;gt;
      &amp;lt;EnthusasticGreeting /&amp;gt;
    &amp;lt;/CurrentUserProvider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href=&quot;http://www.typescriptlang.org/play/index.html?jsx=1&amp;amp;ssl=1&amp;amp;ssc=1&amp;amp;pln=31&amp;amp;pc=2#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwBQdA9AgnYnAIJwAWWANmCxQ4MCHFyVkMLCjgBhCADtpAD3jJFAEzgAFYgDdgmoXADuwGNziKxAVzBEl8YwWS2+8fcj62sAGhQtNiRzSwhbeG5kQ0UAcxExXF5cAGs4Amg4Wy0sAmBFLG1vPhFeEVAsADpgxjoCbPxgJXFJaTkYFQAeLiw1LC10AG8AXzgAH2t3PgA+AAoASjhBtnElVHh8FTgAXkwqGEqJHDanXphu8aycvILNOeyXfML5+jh0hpgmxSzULHaVBZLFZvXBrDY7PZ4A62X4KZRnWabF7AuDAAhwRE7ba7B65J6aRaWYimaxYEkAUSgxCgszIML+HTgIBh8AARjJ8qgjDJkLoDNzhKErLyvD4sGRkW83pQYLYoN9cK84MMVjK5d8ANr0-4BTaVPQQQzGKAAXRQ6FBinWNDgjEYcAA5GhVlaYA6mcgUlh0AAVACeggAyhJgGB4PkCCZebKwHwsHQVUx7QBVVDIWJYABcDDtcAA6jJ1sA+CUovoZKI4KhBLg0X7ZDAA-44KyItYxC43B4AIR0XqQWAu9ZwLWwuWUZSpoQAOWQIGbcnH-RgU6gBqNQjNuyOUgZXXWUHysTmyLqHy+cHJym4MLQn1wAHFKFhPnFAcsQWDxEvJ79hDixypZdV1necFiVNV5TgTpNGAfRpgACXJAAZZCAHkllwH8Vz-SpRGTMBBCgOQ0CwBZhm7TpGFg+D6ETepFEaZoOEI99VRfdVoMXIDfyEdcBTgUVfG2MhAyiUxFDIaYUU6K9LFvItH2fV94kYaS3io7iJxwvj+WNaY6KAA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You can go even further and combine this idea using &lt;code&gt;React.createContext&lt;/code&gt; and &lt;a href=&quot;https://kentcdodds.com/blog/application-state-management-with-react/&quot;&gt;context getters&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;/**
 * A helper to create a Context and Provider with no upfront default value, and
 * without having to check for undefined all the time.
 */
function createCtx&amp;lt;A extends {} | null&amp;gt;() {
  const ctx = React.createContext&amp;lt;A | undefined&amp;gt;(undefined);
  function useCtx() {
    const c = React.useContext(ctx);
    if (c === undefined)
      throw new Error(&quot;useCtx must be inside a Provider with a value&quot;);
    return c;
  }
  return [useCtx, ctx.Provider] as const; // &#39;as const&#39; makes TypeScript infer a tuple
}

// usage

export const [useCtx, SettingProvider] = createCtx&amp;lt;string&amp;gt;(); // specify type, but no need to specify value upfront!
export function App() {
  const key = useCustomHook(&quot;key&quot;); // get a value from a hook, must be in a component
  return (
    &amp;lt;SettingProvider value={key}&amp;gt;
      &amp;lt;Component /&amp;gt;
    &amp;lt;/SettingProvider&amp;gt;
  );
}
export function Component() {
  const key = useCtx(); // can still use without null check!
  return &amp;lt;div&amp;gt;{key}&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtCAOwGd4BXOpAYWZlwAkIIBrOAF44ACj5IAngC44DKMBoBzAJRCAfHADeFOHGr14AbQYoYSADSykMAMoxTSALpDExGADpmSOw5GaAvso6cEQwjFA0svZmhuISjhT+FAD0yXpEDnq0ZgAe8ADuwDAAFnA0EHCMYNjZcAAmSJgojAA2MABqKC2MSClphSUQjPDFKABuCopwnPUVjDQNmApIdXrFSGgCXS3T69OgveSY8xjAtOmoZqwwOQA8AIJqIqra5Lr6DHo3LsjoHmgZK7ZJB5B5wAA+lQWjWWdSe80WsOUAG5gscaKdzl5rjlnlpgu9aJ80D83J4WKxgXkRBgciiCXBgJhRABCNCqEo4fJlJDcgCiUBwUBEACJsd8QBw4AAjJCM+jABpwFBwAAKOAmDSgcAGpRVYy6PRF9LeuhC1nCkTQqNNSVNoUtcEM4pyllp7nVEE1SCgzhQdCyBmRcFScBAKHEcAAKhIwN4AcAwPAFJgfcrplUWhYyhB4ChIihBSgJHAIMz5mdIjBY0g6IkKH1KnQUIpDhQQZBYIHPs6KTdLDZrDBJp7vb6XADLmwbrc5JMniiQ2k6HG0EyS9W45ZpcMczyVtMKiuNuu4AbunKqjUaDAWe2cp2sCdh+d7mAwHjXoSDHA4i5sRw3C8HwopxMawahq2eZnoaco1HgKrFMBliSp8sryum1DgLQSA3sEDoRKIDK3IOMDDkoo6Kmm549IImhxP4agMrotyUthNC4fAyRMaaLHJKR5GKJRWo8boJp2h20BPhiL6RGxkAcTen7BB88B-sILrPBBaRoPmUTAC0OxeDqRRIbuNCtDsaDrJsd72hahG3HUwBjGo9GSP4tzJM5rk2v4QA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Using &lt;code&gt;React.createContext&lt;/code&gt; and &lt;code&gt;useContext&lt;/code&gt; to make a &lt;code&gt;createCtx&lt;/code&gt; with &lt;a href=&quot;https://github.com/jamiebuilds/unstated&quot;&gt;&lt;code&gt;unstated&lt;/code&gt;&lt;/a&gt;-like context setters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;export function createCtx&amp;lt;A&amp;gt;(defaultValue: A) {
  type UpdateType = React.Dispatch&amp;lt;
    React.SetStateAction&amp;lt;typeof defaultValue&amp;gt;
  &amp;gt;;
  const defaultUpdate: UpdateType = () =&amp;gt; defaultValue;
  const ctx = React.createContext({
    state: defaultValue,
    update: defaultUpdate,
  });
  function Provider(props: React.PropsWithChildren&amp;lt;{}&amp;gt;) {
    const [state, update] = React.useState(defaultValue);
    return &amp;lt;ctx.Provider value={{ state, update }} {...props} /&amp;gt;;
  }
  return [ctx, Provider] as const; // alternatively, [typeof ctx, typeof Provider]
}

// usage

const [ctx, TextProvider] = createCtx(&quot;someText&quot;);
export const TextContext = ctx;
export function App() {
  return (
    &amp;lt;TextProvider&amp;gt;
      &amp;lt;Component /&amp;gt;
    &amp;lt;/TextProvider&amp;gt;
  );
}
export function Component() {
  const { state, update } = React.useContext(TextContext);
  return (
    &amp;lt;label&amp;gt;
      {state}
      &amp;lt;input type=&quot;text&quot; onChange={(e) =&amp;gt; update(e.target.value)} /&amp;gt;
    &amp;lt;/label&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCpAD0ljkwFcA7DYCZuNIlGJAYRjUAPAEEAfAAoAJkkwpGAGxgA1FIsZIAXHFEBKOAG8KcODACeYJHACqYabyQAVS9YC8iYjAB0AEWAAzmC8aAAWwsjoPgDKSDDRMI6ibBzCFlYQmHCy8kqq6pri4gDcJlwcAfA5Csp2Dnw6dY4uVnAekgZu4tlyNfkaSKXkpmgV8BjUbZ5R3tyofPwcfNQwksbDpnCVjjrVeWoDADRlpoz2Oz25ted8ZQC+ekOmTKww7JwACjgAbsCyUJIwDgwAEdJEMN4vhAQQB1YAwUL8ULARTSIjMYSGO7iAzrTblZiVOAAbW2fEOcDO9SQAF0puCfIwAkgEo4ZL19gUkI8TnAiDBGFBOMIJpCfn8kFA4N8uW5DIYtolyZSbtY7ncjN4tUDoQENQB6Er3Mr8wWcYkTClQ37-OkoAIEyrFOD6-VwdR8IW8YDfJCKcwU4npJCZLhCCnB0PWiVQGkUO4UCiuykBFAAcyQifIo0J8At4bgThoMGjtqmc0cgmokgARAFcM5izWeeQaHRxmNC8XFsxlvAPBMhm3oFgWClOKIwGAOkYTXEzXBJLzhEWVqXJeJeaZhItwBwkL2XZuNtv9auS+L-sfTC2E63aCOGGO3hw4LvIMwD6tcWUc0SFWSSAUlSjhwBqHgMt4TICEsxaSOePZ9i2pimkKi7LooKAAEZ+te+JGIBd74XAwjAMwYCMPAwZuDWfY1nAHBIigzAZnK7jdCBfCSEg3iJFAGY+DKAx6AaeGnphOGKHht5AA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;A &lt;a href=&quot;https://gist.github.com/sw-yx/f18fe6dd4c43fddb3a4971e80114a052&quot;&gt;useReducer-based version&lt;/a&gt; may also be helpful.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;em&gt;Contributed by: &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/pull/13&quot;&gt;@jpavon&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;interface ProviderState {
  themeColor: string;
}

interface UpdateStateArg {
  key: keyof ProviderState;
  value: string;
}

interface ProviderStore {
  state: ProviderState;
  update: (arg: UpdateStateArg) =&amp;gt; void;
}

const Context = React.createContext({} as ProviderStore); // type assertion on empty object

class Provider extends React.Component&amp;lt;{}, ProviderState&amp;gt; {
  public readonly state = {
    themeColor: &quot;red&quot;,
  };

  private update = ({ key, value }: UpdateStateArg) =&amp;gt; {
    this.setState({ [key]: value });
  };

  public render() {
    const store: ProviderStore = {
      state: this.state,
      update: this.update,
    };

    return (
      &amp;lt;Context.Provider value={store}&amp;gt;{this.props.children}&amp;lt;/Context.Provider&amp;gt;
    );
  }
}

const Consumer = Context.Consumer;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;forwardRef/createRef&lt;/h2&gt; 
&lt;p&gt;Check the &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/blob/master/README.md#hooks&quot;&gt;Hooks section&lt;/a&gt; for &lt;code&gt;useRef&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;createRef&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class CssThemeProvider extends React.PureComponent&amp;lt;Props&amp;gt; {
  private rootRef = React.createRef&amp;lt;HTMLDivElement&amp;gt;(); // like this
  render() {
    return &amp;lt;div ref={this.rootRef}&amp;gt;{this.props.children}&amp;lt;/div&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;forwardRef&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type Props = { children: React.ReactNode; type: &quot;submit&quot; | &quot;button&quot; };
export type Ref = HTMLButtonElement;
export const FancyButton = React.forwardRef&amp;lt;Ref, Props&amp;gt;((props, ref) =&amp;gt; (
  &amp;lt;button ref={ref} className=&quot;MyClassName&quot; type={props.type}&amp;gt;
    {props.children}
  &amp;lt;/button&amp;gt;
));
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code&gt;Side note: the `ref` you get from `forwardRef` is mutable so you can assign to it if needed.
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This was done &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43265/&quot;&gt;on purpose&lt;/a&gt;. You can make it immutable if you have to - assign &lt;code&gt;React.Ref&lt;/code&gt; if you want to ensure nobody reassigns it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type Props = { children: React.ReactNode; type: &quot;submit&quot; | &quot;button&quot; };
export type Ref = HTMLButtonElement;
export const FancyButton = React.forwardRef((
  props: Props,
  ref: React.Ref&amp;lt;Ref&amp;gt; // &amp;lt;-- here!
) =&amp;gt; (
  &amp;lt;button ref={ref} className=&quot;MyClassName&quot; type={props.type}&amp;gt;
    {props.children}
  &amp;lt;/button&amp;gt;
));
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;If you are grabbing the props of a component that forwards refs, use &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L770&quot;&gt;&lt;code&gt;ComponentPropsWithRef&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;More info: https://medium.com/@martin_hotell/react-refs-with-typescript-a32d56c4d315&lt;/p&gt; 
&lt;p&gt;You may also wish to do &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/167&quot;&gt;Conditional Rendering with &lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Portals&lt;/h2&gt; 
&lt;p&gt;Using &lt;code&gt;ReactDOM.createPortal&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const modalRoot = document.getElementById(&quot;modal-root&quot;) as HTMLElement;
// assuming in your html file has a div with id &#39;modal-root&#39;;

export class Modal extends React.Component {
  el: HTMLElement = document.createElement(&quot;div&quot;);

  componentDidMount() {
    modalRoot.appendChild(this.el);
  }

  componentWillUnmount() {
    modalRoot.removeChild(this.el);
  }

  render() {
    return ReactDOM.createPortal(this.props.children, this.el);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoUSWRYmAEQHkBZObXAo9GAWgBNcZchTQQAdgGd4ICHxQAbBBAjwAvHAFoAriCRiYAOgDmSGAFF5SXfoBCATwCSfABQAiGXPk8cK1wEo4FAk4AAkAFWYAGQsrPRgAbgoAeiTAiQkdYDEjOCy4OwgtKDgACxgQeTZgS1KgwI1gADc4AHdgGBLcvgIPBW9lGHxE4XIkAA9qeDR5IODmWQU4cZg9PmDkbgMAYVxIMTi4AG8KOCX5AC5QiOjLazUNCG07gzQuFZi7tz4m-2GTuFE4HEcXowD48y0+mcAWO5FOp16igGBhQYDAqy2JWqLg6wAkBiQ8j8w1OAF8KP9AXs4gB1aryACqYhkkJg0KO-wRCyRKgMRBkjSQmOxzlx+MJxP+5JGpyIYj4SCg7Nh8LgRBgRTEtG4TGYLzeSAACtAYApRVj8WAcGB8WgsfI+HKADRwMUEokkuDS0lAA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Same as above but using hooks&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import React, { useEffect, useRef } from &quot;react&quot;;
import { createPortal } from &quot;react-dom&quot;;

const modalRoot = document.querySelector(&quot;#modal-root&quot;) as HTMLElement;

const Modal: React.FC&amp;lt;{}&amp;gt; = ({ children }) =&amp;gt; {
  const el = useRef(document.createElement(&quot;div&quot;));

  useEffect(() =&amp;gt; {
    // Use this in case CRA throws an error about react-hooks/exhaustive-deps
    const current = el.current;

    // We assume `modalRoot` exists with &#39;!&#39;
    modalRoot!.appendChild(current);
    return () =&amp;gt; void modalRoot!.removeChild(current);
  }, []);

  return createPortal(children, el.current);
};

export default Modal;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoUSWOAbzjSJRiQAVoYUAbOAXzmy4CTDAFoAJrjLkKAellwUAZyUBXEMAB2Aczha4ATwiqocABYwQPTMC5JzyxXHHAAbnADuwGGb3iCIBDi3KI4EDD4ANwUFGgQmkrwALJB3ABciMQwAHQAYgDCADy0vAB8cAC8cAAU9GhmtuJEmnwAlJXltBRwcPJwAKIgqlzM9j72aCMqDLiQmkiaEUp6CZyaaPauKFDAKABGdp7evihwRJjdM6twSDxVyOg5qkpIyJjVkmjqCzmMqCz9OwgH7VABELlcoNarWiMnIPQeGGyzyQ-UwmCQGGq1XaFU6lx6fQA6vZlGpgXAAAaBYJcBAQcKUm4AD2AiWWXh8BAAhNIej04tcadx6eFKs4IF9gYtsgBHVRIKAGADKt0xMGgYIAxMKuKEGTAoYplgAJAAqSQAMoCkNKYLD+XBdaKYNzsigwGAFuJ8g0uOJqrdsl8oM0YDCCWckDATC0cR04K4IMB-M6DW6iIFXEhfY1A1xgyYwxH4XwADRwADaAF0S5c+gBJVaofwQTBU26UivjK6cLSKvTLHuU86F0M-SmXIgxqAtP6jdiwbjVeqNZoVoMh4uw3iwuQKZ4obRIGLkTCqdYwYDxOAAQU98a6pcFiSrSjMEA8KVpFZeMGVH5fqkXDVuKiJPC8yqcCw1SYNwLwlj006xjUkaFBCpSRoSChGKoDAoC08EQHAYCqPAPhsishjGKYiTMMAaDmJY1i2CepaOuhbh+BUoK6vq4SgqUhSyBhWF0O+n7ftwcAAGQyah7GOnAhRSVwmGKUpykQmJmmJAYdgVLQT6aSZzhsmAIwGBkoLaDs4igmWOkmRZ6BIA2LAgEo1kbIsioOU5mlmEgwDaBY1kAIwAAyRa4Zj+RpplHOIPgZPgUUxWY+COQlpl7OgADWtnGJo4jWVA2h5dUkVltVtXZOFrTxYlSkAF5NuISDMhkACc3XZc1PS8LwAVwOpA1wA2+B4KcurcrQoJwKCw05UphR7GRGotHpBlGXlaCFTgF6lYtYAegYKAeA0YBLfw8T5FwDH5YZ8Z4nAf4AZJwGwfBSCtGUkwQC8wnrTAm1jYlwmiStwmqeDjp-WJa0bTed0Pftz24uU72Aap1QwFACp-aUEkeHAqnA8jmhw-yfREK+bbUSYiiemhIluODrQULwQA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Modal Component Usage Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;function App() {
  const [showModal, setShowModal] = React.useState(false);
  return (
    &amp;lt;div&amp;gt;
      // you can also put this in your static html file
      &amp;lt;div id=&quot;modal-root&quot;&amp;gt;&amp;lt;/div&amp;gt;
      {showModal &amp;amp;&amp;amp; (
        &amp;lt;Modal&amp;gt;
          &amp;lt;div
            style={{
              display: &quot;grid&quot;,
              placeItems: &quot;center&quot;,
              height: &quot;100vh&quot;,
              width: &quot;100vh&quot;,
              background: &quot;rgba(0,0,0,0.1)&quot;,
              zIndex: 99,
            }}
          &amp;gt;
            I&#39;m a modal!{&quot; &quot;}
            &amp;lt;button
              style={{ background: &quot;papyawhip&quot; }}
              onClick={() =&amp;gt; setShowModal(false)}
            &amp;gt;
              close
            &amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/Modal&amp;gt;
      )}
      &amp;lt;button onClick={() =&amp;gt; setShowModal(true)}&amp;gt;show Modal&amp;lt;/button&amp;gt;
      // rest of your app
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This example is based on the &lt;a href=&quot;https://reactjs.org/docs/portals.html#event-bubbling-through-portals&quot;&gt;Event Bubbling Through Portal&lt;/a&gt; example of React docs.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Error Boundaries&lt;/h2&gt; 
&lt;h3&gt;Option 1: Using react-error-boundary&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/bvaughn/react-error-boundary&quot;&gt;React-error-boundary&lt;/a&gt; - is a lightweight package ready to use for this scenario with TS support built-in. This approach also lets you avoid class components that are not that popular anymore.&lt;/p&gt; 
&lt;h3&gt;Options 2: Writing your custom error boundary component&lt;/h3&gt; 
&lt;p&gt;If you don&#39;t want to add a new npm package for this, you can also write your own &lt;code&gt;ErrorBoundary&lt;/code&gt; component.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React, { Component, ErrorInfo, ReactNode } from &quot;react&quot;;

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

class ErrorBoundary extends Component&amp;lt;Props, State&amp;gt; {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(_: Error): State {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error(&quot;Uncaught error:&quot;, error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return &amp;lt;h1&amp;gt;Sorry.. there was an error&amp;lt;/h1&amp;gt;;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Concurrent React/React Suspense&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Not written yet.&lt;/em&gt; watch &lt;a href=&quot;https://github.com/sw-yx/fresh-async-react&quot;&gt;https://github.com/sw-yx/fresh-async-react&lt;/a&gt; for more on React Suspense and Time Slicing.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;Something to add? File an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Troubleshooting Handbook: Types&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ö†Ô∏è Have you read &lt;a href=&quot;https://github.com/microsoft/TypeScript/wiki/FAQ?&quot;&gt;the TypeScript FAQ&lt;/a&gt; Your answer might be there!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Facing weird type errors? You aren&#39;t alone. This is the hardest part of using TypeScript with React. Be patient - you are learning a new language after all. However, the more you get good at this, the less time you&#39;ll be working &lt;em&gt;against&lt;/em&gt; the compiler and the more the compiler will be working &lt;em&gt;for&lt;/em&gt; you!&lt;/p&gt; 
&lt;p&gt;Try to avoid typing with &lt;code&gt;any&lt;/code&gt; as much as possible to experience the full benefits of TypeScript. Instead, let&#39;s try to be familiar with some of the common strategies to solve these issues.&lt;/p&gt; 
&lt;h2&gt;Union Types and Type Guarding&lt;/h2&gt; 
&lt;p&gt;Union types are handy for solving some of these typing problems:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class App extends React.Component&amp;lt;
  {},
  {
    count: number | null; // like this
  }
&amp;gt; {
  state = {
    count: null,
  };
  render() {
    return &amp;lt;div onClick={() =&amp;gt; this.increment(1)}&amp;gt;{this.state.count}&amp;lt;/div&amp;gt;;
  }
  increment = (amt: number) =&amp;gt; {
    this.setState((state) =&amp;gt; ({
      count: (state.count || 0) + amt,
    }));
  };
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BBMMOJADxiQDsATRsnQwAdAGFckHrxgAeCnDgBvAL4AaBcs2K0EAK48YALjg89IAEZIocAD6m91agG44AejdxqwANZI4MAAWwHSaKhQAfFrkinQwKNxwALzRijr6hiZmTmHOmkT81gAUAJSpaUQwelA8cLJ8wABucBA8Yt5oPklKpclRQSEiwDxoRCAyRQCMJSoRSgN0InEJSCK6BjAqsm4NjRF5MXDhh8OjSOOGyXBFKCDGDpbWZUlRStoBwYt0SDAAyvHcIrLRIva5vQ5pODrTLXYGraHwWz2AAMZQA1HBbjB3ioSiUDooVAcVEA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Type Guarding&lt;/strong&gt;: Sometimes Union Types solve a problem in one area but create another downstream. If &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are both object types, &lt;code&gt;A | B&lt;/code&gt; isn&#39;t &quot;either A or B&quot;, it is &quot;A or B or both at once&quot;, which causes some confusion if you expected it to be the former. Learn how to write checks, guards, and assertions (also see the Conditional Rendering section below). For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;interface Admin {
  role: string;
}
interface User {
  email: string;
}

// Method 1: use `in` keyword
function redirect(user: Admin | User) {
  if (&quot;role&quot; in user) {
    // use the `in` operator for typeguards since TS 2.7+
    routeToAdminPage(user.role);
  } else {
    routeToHomePage(user.email);
  }
}

// Method 2: custom type guard, does the same thing in older TS versions or where `in` isnt enough
function isAdmin(user: Admin | User): user is Admin {
  return (user as any).role !== undefined;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoC4AOxiSk3STgEEATEGuAbwrjhwAbJAC44AZxhQaAcwDcFAL5Va9RmmYBVcfR584SECmCCxk6dXlKKFTAFdqGYBGoCIdugBUI7TtQAKKDJIABTiwDLUwJjA9ACUeuT80XBhEVExugC8OQR2OlAIEML4CbxJ-AJIMHZQrvi+NGQVinDWlOT2jjDOrjgeSN4AErhIgcFpkdGxUGX6KZMZM3A5WQSGxoKliZVVNXUEIyBIYEFIzfzK5FcUAPS3cACy1QAWEGxwAIxi+cwABjQ-nAANZIACeAHdoGxbA4nC4qmxgEQMCFflAxI1XAAfODaeI7ODREIAIiESBJRNc6LKcHucF+cBgL3+gLgEDA9BQMGgcEwvJgYM5MjsKCgbHEEhoGjgngAynAAEwAOgA7ABqfT8fpeHwcGjjULo5XkuIKFoGQQ6Qna9y6o5jM5ogrKjYmM36K43cj057M95KsRofI8vCCzlwEVitgAGjgbAgSElzOY4hQxyZL1kVPZgjYunlcAAbvRwi5JbyISyiHAAdQgcBxLQDNR3DIXrDur0ieIsc76Jj9Ti8QU4j8Cj3WEPCUR9q5+1A4ChJShqGC4ibiswAIS5Bz5mLUJAw65AA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Method 2 is also known as &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards&quot;&gt;User-Defined Type Guards&lt;/a&gt; and can be really handy for readable code. This is how TS itself refines types with &lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you need &lt;code&gt;if...else&lt;/code&gt; chains or the &lt;code&gt;switch&lt;/code&gt; statement instead, it should &quot;just work&quot;, but look up &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions&quot;&gt;Discriminated Unions&lt;/a&gt; if you need help. (See also: &lt;a href=&quot;https://basarat.gitbook.io/typescript/type-system/discriminated-unions&quot;&gt;Basarat&#39;s writeup&lt;/a&gt;). This is handy in typing reducers for &lt;code&gt;useReducer&lt;/code&gt; or Redux.&lt;/p&gt; 
&lt;h2&gt;Optional Types&lt;/h2&gt; 
&lt;p&gt;If a component has an optional prop, add a question mark and assign during destructure (or use defaultProps).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class MyComponent extends React.Component&amp;lt;{
  message?: string; // like this
}&amp;gt; {
  render() {
    const { message = &quot;default&quot; } = this.props;
    return &amp;lt;div&amp;gt;{message}&amp;lt;/div&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use a &lt;code&gt;!&lt;/code&gt; character to assert that something is not undefined, but this is not encouraged.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Something to add? &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;File an issue&lt;/a&gt; with your suggestions!&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Enum Types&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;We recommend avoiding using enums as far as possible&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Enums have a few &lt;a href=&quot;https://fettblog.eu/tidy-typescript-avoid-enums/&quot;&gt;documented issues&lt;/a&gt; (the TS team &lt;a href=&quot;https://twitter.com/orta/status/1348966323271987201?s=20&quot;&gt;agrees&lt;/a&gt;). A simpler alternative to enums is just declaring a union type of string literals:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;export declare type Position = &quot;left&quot; | &quot;right&quot; | &quot;top&quot; | &quot;bottom&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you must use enums, remember that enums in TypeScript default to numbers. You will usually want to use them as strings instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;export enum ButtonSizes {
  default = &quot;default&quot;,
  small = &quot;small&quot;,
  large = &quot;large&quot;,
}

// usage
export const PrimaryButton = (
  props: Props &amp;amp; React.HTMLProps&amp;lt;HTMLButtonElement&amp;gt;
) =&amp;gt; &amp;lt;Button size={ButtonSizes.default} {...props} /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Type Assertion&lt;/h2&gt; 
&lt;p&gt;Sometimes you know better than TypeScript that the type you&#39;re using is narrower than it thinks, or union types need to be asserted to a more specific type to work with other APIs, so assert with the &lt;code&gt;as&lt;/code&gt; keyword. This tells the compiler you know better than it does.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;class MyComponent extends React.Component&amp;lt;{
  message: string;
}&amp;gt; {
  render() {
    const { message } = this.props;
    return (
      &amp;lt;Component2 message={message as SpecialMessageType}&amp;gt;{message}&amp;lt;/Component2&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgGU61gUAbAWSQGduUBzJABVa9ALwFuMKMAB2-fAG4KFOTCRRM6egAUcYbnADeFOHBA8+ggFxwpM+XAA+cAK6yAJkkxykH5eQAvirkaBCyUnAAwriQskiyMABMtsjoMAB0AGJRADx6EAYAfHASABRG5pYCSIEAlKUlZaZwuR7AAG5FLWa5ABYAjEVGFrw1gbkA9IPd5L2T7V0UdSFobCi8cBzUMeDhCfBIAB7qnoZpGBm7cQe5JnNVYzZ20nL8AYEl92ZEnhplDW+ZjgYQi8Eqoys9ECpTgMD6wG4GTA+m4AWBcCIMFcUFkcGaDwxuWu+0SSUeULEI2qgjgG0YzFYnBpwlEn2pT1qUxJ8TJswxdXRcGCQSAA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Note that you cannot assert your way to anything - basically it is only for refining types. Therefore it is not the same as &quot;casting&quot; a type.&lt;/p&gt; 
&lt;p&gt;You can also assert a property is non-null, when accessing it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;element.parentNode!.removeChild(element) // ! before the period
myFunction(document.getElementById(dialog.id!)! // ! after the property accessing
let userID!: string // definite assignment assertion... be careful!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Of course, try to actually handle the null case instead of asserting :)&lt;/p&gt; 
&lt;h2&gt;Simulating Nominal Types&lt;/h2&gt; 
&lt;p&gt;TS&#39; structural typing is handy, until it is inconvenient. However you can simulate nominal typing with &lt;a href=&quot;https://basarat.gitbook.io/typescript/main-1/nominaltyping&quot;&gt;&lt;code&gt;type branding&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;type OrderID = string &amp;amp; { readonly brand: unique symbol };
type UserID = string &amp;amp; { readonly brand: unique symbol };
type ID = OrderID | UserID;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We can create these values with the Companion Object Pattern:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function OrderID(id: string) {
  return id as OrderID;
}
function UserID(id: string) {
  return id as UserID;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now TypeScript will disallow you from using the wrong ID in the wrong place:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function queryForUser(id: UserID) {
  // ...
}
queryForUser(OrderID(&quot;foobar&quot;)); // Error, Argument of type &#39;OrderID&#39; is not assignable to parameter of type &#39;UserID&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In future you can use the &lt;code&gt;unique&lt;/code&gt; keyword to brand. &lt;a href=&quot;https://github.com/microsoft/TypeScript/pull/33038&quot;&gt;See this PR&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Intersection Types&lt;/h2&gt; 
&lt;p&gt;Adding two types together can be handy, for example when your component is supposed to mirror the props of a native component like a &lt;code&gt;button&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;export interface PrimaryButtonProps {
  label: string;
}
export const PrimaryButton = (
  props: PrimaryButtonProps &amp;amp; React.ButtonHTMLAttributes&amp;lt;HTMLButtonElement&amp;gt;
) =&amp;gt; {
  // do custom buttony stuff
  return &amp;lt;button {...props}&amp;gt; {props.label} &amp;lt;/button&amp;gt;;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Playground &lt;a href=&quot;https://www.typescriptlang.org/play?ssl=4&amp;amp;ssc=1&amp;amp;pln=12&amp;amp;pc=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCipAD0ljmADsYkpN0k4AFKUFKAE8AQgFcYMCE14QwAZzgBvCnDgAbFACMkagFxw5MPkwDmAbgoBfanWjw0Uwzz4gBI8ZKZwAvHAAUKnBgOPL6vPxCYhJSMvJwAGSIxDAAdFGeABIAKgCyADIAghJ8muJIcgA82fnpUgCiakggSCwAfBQAlD6tSoEA9H1wACYQcGiihrhwpdFMggYwopiYgUSLUF4VM55KKXvBsnKWPYoH8ika2mqWcBV921KtFuSWQA&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;You can also use Intersection Types to make reusable subsets of props for similar components:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;type BaseProps = {
   className?: string,
   style?: React.CSSProperties
   name: string // used in both
}
type DogProps = {
  tailsCount: number
}
type HumanProps = {
  handsCount: number
}
export const Human: React.FC&amp;lt;BaseProps &amp;amp; HumanProps&amp;gt; = // ...
export const Dog: React.FC&amp;lt;BaseProps &amp;amp; DogProps&amp;gt; = // ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgCEUBnJABRzGbgF44BvCnGFoANi2YA5FCCQB+AFxxmMKMAB2AcwA0Q4Suqj5S5OhgA6AMIBlaxwh1YwJMz1x1MpEpVqtcAPT+cACurAAmcBpwAEYQMAAWFAC+VLT0ACIQmvZcvAJ6MCjAosyWEMHqMErqwSDRSFDJqXRwABK1KOo53HyC5MLxnWGl5ZXVtfWN5CnkSAAekLBwaBDqKm0d6ibEFgBilgA8TKzdcABkGyCd3QB8eQAUAJS8d-d6B2HAAG4BNxSPFAo80W8BWa3gmU02zM5n2RxY7E43AukNuD2ePFe70+P38f3IjyAA&quot;&gt;View in the TypeScript Playground&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Make sure not to confuse Intersection Types (which are &lt;strong&gt;and&lt;/strong&gt; operations) with Union Types (which are &lt;strong&gt;or&lt;/strong&gt; operations).&lt;/p&gt; 
&lt;h2&gt;Union Types&lt;/h2&gt; 
&lt;p&gt;This section is yet to be written (please contribute!). Meanwhile, see our &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/blob/master/README.md#union-types-and-type-guarding&quot;&gt;commentary on Union Types usecases&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The ADVANCED cheatsheet also has information on Discriminated Union Types, which are helpful when TypeScript doesn&#39;t seem to be narrowing your union type as you expect.&lt;/p&gt; 
&lt;h2&gt;Overloading Function Types&lt;/h2&gt; 
&lt;p&gt;Specifically when it comes to functions, you may need to overload instead of union type. The most common way function types are written uses the shorthand:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;type FunctionType1 = (x: string, y: number) =&amp;gt; number;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But this doesn&#39;t let you do any overloading. If you have the implementation, you can put them after each other with the function keyword:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function pickCard(x: { suit: string; card: number }[]): number;
function pickCard(x: number): { suit: string; card: number };
function pickCard(x): any {
  // implementation with combined signature
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, if you don&#39;t have an implementation and are just writing a &lt;code&gt;.d.ts&lt;/code&gt; definition file, this won&#39;t help you either. In this case you can forego any shorthand and write them the old-school way. The key thing to remember here is as far as TypeScript is concerned, &lt;code&gt;functions are just callable objects with no key&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;type pickCard = {
  (x: { suit: string; card: number }[]): number;
  (x: number): { suit: string; card: number };
  // no need for combined signature in this form
  // you can also type static properties of functions here eg `pickCard.wasCalled`
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that when you implement the actual overloaded function, the implementation will need to declare the combined call signature that you&#39;ll be handling, it won&#39;t be inferred for you. You can see readily see examples of overloads in DOM APIs, e.g. &lt;code&gt;createElement&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/functions.html#overloads&quot;&gt;Read more about Overloading in the Handbook.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Using Inferred Types&lt;/h2&gt; 
&lt;p&gt;Leaning on TypeScript&#39;s Type Inference is great... until you realize you need a type that was inferred, and have to go back and explicitly declare types/interfaces so you can export them for reuse.&lt;/p&gt; 
&lt;p&gt;Fortunately, with &lt;code&gt;typeof&lt;/code&gt;, you won&#39;t have to do that. Just use it on any value:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const [state, setState] = React.useState({
  foo: 1,
  bar: 2,
}); // state&#39;s type inferred to be {foo: number, bar: number}

const someMethod = (obj: typeof state) =&amp;gt; {
  // grabbing the type of state even though it was inferred
  // some code using obj
  setState(obj); // this works
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using Partial Types&lt;/h2&gt; 
&lt;p&gt;Working with slicing state and props is common in React. Again, you don&#39;t really have to go and explicitly redefine your types if you use the &lt;code&gt;Partial&lt;/code&gt; generic type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const [state, setState] = React.useState({
  foo: 1,
  bar: 2,
}); // state&#39;s type inferred to be {foo: number, bar: number}

// NOTE: stale state merging is not actually encouraged in React.useState
// we are just demonstrating how to use Partial here
const partialStateUpdate = (obj: Partial&amp;lt;typeof state&amp;gt;) =&amp;gt;
  setState({ ...state, ...obj });

// later on...
partialStateUpdate({ foo: 2 }); // this works
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Note that there are some TS users who don&#39;t agree with using &lt;code&gt;Partial&lt;/code&gt; as it behaves today. See &lt;a href=&quot;https://twitter.com/ferdaber/status/1084798596027957248&quot;&gt;subtle pitfalls of the above example here&lt;/a&gt;, and check out this long discussion on &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365&quot;&gt;why @types/react uses Pick instead of Partial&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;The Types I need weren&#39;t exported!&lt;/h2&gt; 
&lt;p&gt;This can be annoying but here are ways to grab the types!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Grabbing the Prop types of a component: Use &lt;code&gt;React.ComponentProps&lt;/code&gt; and &lt;code&gt;typeof&lt;/code&gt;, and optionally &lt;code&gt;Omit&lt;/code&gt; any overlapping types&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import { Button } from &quot;library&quot;; // but doesn&#39;t export ButtonProps! oh no!
type ButtonProps = React.ComponentProps&amp;lt;typeof Button&amp;gt;; // no problem! grab your own!
type AlertButtonProps = Omit&amp;lt;ButtonProps, &quot;onClick&quot;&amp;gt;; // modify
const AlertButton: React.FC&amp;lt;AlertButtonProps&amp;gt; = (props) =&amp;gt; (
  &amp;lt;Button onClick={() =&amp;gt; alert(&quot;hello&quot;)} {...props} /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may also use &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L774&quot;&gt;&lt;code&gt;ComponentPropsWithoutRef&lt;/code&gt;&lt;/a&gt; (instead of ComponentProps) and &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L770&quot;&gt;&lt;code&gt;ComponentPropsWithRef&lt;/code&gt;&lt;/a&gt; (if your component specifically forwards refs)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Grabbing the return type of a function: use &lt;code&gt;ReturnType&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// inside some library - return type { baz: number } is inferred but not exported
function foo(bar: string) {
  return { baz: 1 };
}

//  inside your app, if you need { baz: number }
type FooReturn = ReturnType&amp;lt;typeof foo&amp;gt;; // { baz: number }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In fact you can grab virtually anything public: &lt;a href=&quot;http://ikoshelev.azurewebsites.net/search/id/11/Pragmatic-uses-of-TypeScript-type-system-My-type-of-type&quot;&gt;see this blogpost from Ivan Koshelev&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;function foo() {
  return {
    a: 1,
    b: 2,
    subInstArr: [
      {
        c: 3,
        d: 4,
      },
    ],
  };
}

type InstType = ReturnType&amp;lt;typeof foo&amp;gt;;
type SubInstArr = InstType[&quot;subInstArr&quot;];
type SubIsntType = SubInstArr[0];

let baz: SubIsntType = {
  c: 5,
  d: 6, // type checks ok!
};

//You could just write a one-liner,
//But please make sure it is forward-readable
//(you can understand it from reading once left-to-right with no jumps)
type SubIsntType2 = ReturnType&amp;lt;typeof foo&amp;gt;[&quot;subInstArr&quot;][0];
let baz2: SubIsntType2 = {
  c: 5,
  d: 6, // type checks ok!
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;TS also ships with a &lt;code&gt;Parameters&lt;/code&gt; utility type for extracting the parameters of a function&lt;/li&gt; 
 &lt;li&gt;for anything more &quot;custom&quot;, the &lt;code&gt;infer&lt;/code&gt; keyword is the basic building block for this, but takes a bit of getting used to. Look at the source code for the above utility types, and &lt;a href=&quot;https://twitter.com/mgechev/status/1211030455224422401?s=20&quot;&gt;this example&lt;/a&gt; to get the idea. Basarat &lt;a href=&quot;https://www.youtube.com/watch?v=ijK-1R-LFII&amp;amp;list=PLYvdvJlnTOjF6aJsWWAt7kZRJvzw-en8B&amp;amp;index=3&amp;amp;t=0s&quot;&gt;also has a good video on &lt;code&gt;infer&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The Types I need don&#39;t exist!&lt;/h2&gt; 
&lt;p&gt;What&#39;s more annoying than modules with unexported types? Modules that are &lt;strong&gt;untyped&lt;/strong&gt;!&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Before you proceed - make sure you have checked that types don&#39;t exist in &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;DefinitelyTyped&lt;/a&gt; or &lt;a href=&quot;https://microsoft.github.io/TypeSearch/&quot;&gt;TypeSearch&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Fret not! There are more than a couple of ways in which you can solve this problem.&lt;/p&gt; 
&lt;h3&gt;Slapping &lt;code&gt;any&lt;/code&gt; on everything&lt;/h3&gt; 
&lt;p&gt;A &lt;strong&gt;lazier&lt;/strong&gt; way would be to create a new type declaration file, say &lt;code&gt;typedec.d.ts&lt;/code&gt;‚Äì if you don&#39;t already have one. Ensure that the path to file is resolvable by TypeScript by checking the &lt;code&gt;include&lt;/code&gt; array in the &lt;code&gt;tsconfig.json&lt;/code&gt; file at the root of your directory.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// inside tsconfig.json
{
  // ...
  &quot;include&quot;: [
    &quot;src&quot; // automatically resolves if the path to declaration is src/typedec.d.ts
  ]
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Within this file, add the &lt;code&gt;declare&lt;/code&gt; syntax for your desired module, say &lt;code&gt;my-untyped-module&lt;/code&gt;‚Äì to the declaration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// inside typedec.d.ts
declare module &quot;my-untyped-module&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This one-liner alone is enough if you just need it to work without errors. A even hackier, write-once-and-forget way would be to use &lt;code&gt;&quot;*&quot;&lt;/code&gt; instead which would then apply the &lt;code&gt;Any&lt;/code&gt; type for all existing and future untyped modules.&lt;/p&gt; 
&lt;p&gt;This solution works well as a workaround if you have less than a couple untyped modules. Anything more, you now have a ticking type-bomb in your hands. The only way of circumventing this problem would be to define the missing types for those untyped modules as explained in the following sections.&lt;/p&gt; 
&lt;h3&gt;Autogenerate types&lt;/h3&gt; 
&lt;p&gt;You can use TypeScript with &lt;code&gt;--allowJs&lt;/code&gt; and &lt;code&gt;--declaration&lt;/code&gt; to see TypeScript&#39;s &quot;best guess&quot; at the types of the library.&lt;/p&gt; 
&lt;p&gt;If this doesn&#39;t work well enough, use &lt;a href=&quot;https://github.com/Microsoft/dts-gen&quot;&gt;&lt;code&gt;dts-gen&lt;/code&gt;&lt;/a&gt; to use the runtime shape of the object to accurately enumerate all available properties. This tends to be very accurate, BUT the tool does not yet support scraping JSDoc comments to populate additional types.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g dts-gen
dts-gen -m &amp;lt;your-module&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are other automated JS to TS conversion tools and migration strategies - see &lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/migration/from_js&quot;&gt;our MIGRATION cheatsheet&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Typing Exported Hooks&lt;/h3&gt; 
&lt;p&gt;Typing Hooks is just like typing pure functions.&lt;/p&gt; 
&lt;p&gt;The following steps work under two assumptions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You have already created a type declaration file as stated earlier in the section.&lt;/li&gt; 
 &lt;li&gt;You have access to the source code - specifically the code that directly exports the functions you will be using. In most cases, it would be housed in an &lt;code&gt;index.js&lt;/code&gt; file. Typically you need a minimum of &lt;strong&gt;two&lt;/strong&gt; type declarations (one for &lt;strong&gt;Input Prop&lt;/strong&gt; and the other for &lt;strong&gt;Return Prop&lt;/strong&gt;) to define a hook completely. Suppose the hook you wish to type follows the following structure,&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ...
const useUntypedHook = (prop) =&amp;gt; {
  // some processing happens here
  return {
    /* ReturnProps */
  };
};
export default useUntypedHook;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;then, your type declaration should most likely follow the following syntax.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;declare module &#39;use-untyped-hook&#39; {
  export interface InputProps { ... }   // type declaration for prop
  export interface ReturnProps { ... } // type declaration for return props
  export default function useUntypedHook(
    prop: InputProps
    // ...
  ): ReturnProps;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;For instance, the &lt;a href=&quot;https://github.com/donavon/use-dark-mode&quot;&gt;useDarkMode hook&lt;/a&gt; exports the functions that follows a similar structure.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// inside src/index.js
const useDarkMode = (
  initialValue = false, // -&amp;gt; input props / config props to be exported
  {
    // -&amp;gt; input props / config props to be exported
    element,
    classNameDark,
    classNameLight,
    onChange,
    storageKey = &quot;darkMode&quot;,
    storageProvider,
    global,
  } = {}
) =&amp;gt; {
  // ...
  return {
    // -&amp;gt; return props to be exported
    value: state,
    enable: useCallback(() =&amp;gt; setState(true), [setState]),
    disable: useCallback(() =&amp;gt; setState(false), [setState]),
    toggle: useCallback(() =&amp;gt; setState((current) =&amp;gt; !current), [setState]),
  };
};
export default useDarkMode;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As the comments suggest, exporting these config props and return props following the aforementioned structure will result in the following type export.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;declare module &quot;use-dark-mode&quot; {
  /**
   * A config object allowing you to specify certain aspects of `useDarkMode`
   */
  export interface DarkModeConfig {
    classNameDark?: string; // A className to set &quot;dark mode&quot;. Default = &quot;dark-mode&quot;.
    classNameLight?: string; // A className to set &quot;light mode&quot;. Default = &quot;light-mode&quot;.
    element?: HTMLElement; // The element to apply the className. Default = `document.body`
    onChange?: (val?: boolean) =&amp;gt; void; // Overide the default className handler with a custom callback.
    storageKey?: string; // Specify the `localStorage` key. Default = &quot;darkMode&quot;. Set to `null` to disable persistent storage.
    storageProvider?: WindowLocalStorage; // A storage provider. Default = `localStorage`.
    global?: Window; // The global object. Default = `window`.
  }
  /**
   * An object returned from a call to `useDarkMode`.
   */
  export interface DarkMode {
    readonly value: boolean;
    enable: () =&amp;gt; void;
    disable: () =&amp;gt; void;
    toggle: () =&amp;gt; void;
  }
  /**
   * A custom React Hook to help you implement a &quot;dark mode&quot; component for your application.
   */
  export default function useDarkMode(
    initialState?: boolean,
    config?: DarkModeConfig
  ): DarkMode;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Typing Exported Components&lt;/h3&gt; 
&lt;p&gt;In case of typing untyped class components, there&#39;s almost no difference in approach except for the fact that after declaring the types, you export the extend the type using &lt;code&gt;class UntypedClassComponent extends React.Component&amp;lt;UntypedClassComponentProps, any&amp;gt; {}&lt;/code&gt; where &lt;code&gt;UntypedClassComponentProps&lt;/code&gt; holds the type declaration.&lt;/p&gt; 
&lt;p&gt;For instance, &lt;a href=&quot;https://gist.github.com/sw-yx/37a6a3d248c2d4031801f0d568904df8&quot;&gt;sw-yx&#39;s Gist on React Router 6 types&lt;/a&gt; implemented a similar method for typing the then untyped RR6.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;declare module &quot;react-router-dom&quot; {
  import * as React from &#39;react&#39;;
  // ...
  type NavigateProps&amp;lt;T&amp;gt; = {
    to: string | number,
    replace?: boolean,
    state?: T
  }
  //...
  export class Navigate&amp;lt;T = any&amp;gt; extends React.Component&amp;lt;NavigateProps&amp;lt;T&amp;gt;&amp;gt;{}
  // ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on creating type definitions for class components, you can refer to this &lt;a href=&quot;https://templecoding.com/blog/2016/03/31/creating-typescript-typings-for-existing-react-components&quot;&gt;post&lt;/a&gt; for reference.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Troubleshooting Handbook: Operators&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt;: type query used for refinement&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;keyof&lt;/code&gt;: get keys of an object&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;O[K]&lt;/code&gt;: property lookup&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;[K in O]&lt;/code&gt;: mapped types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;readonly&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt;: addition and subtraction and readonly and optional modifiers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;x ? Y : Z&lt;/code&gt;: Conditional types for generic types, type aliases, function parameter types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;!&lt;/code&gt;: Nonnull assertion for nullable types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;=&lt;/code&gt;: Generic type parameter default for generic types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;as&lt;/code&gt;: type assertion&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;is&lt;/code&gt;: type guard for function return types&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Conditional Types are a difficult topic to get around so here are some extra resources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;fully walked through explanation https://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/&lt;/li&gt; 
 &lt;li&gt;Bailing out and other advanced topics https://github.com/sw-yx/ts-spec/blob/master/conditional-types.md&lt;/li&gt; 
 &lt;li&gt;Basarat&#39;s video https://www.youtube.com/watch?v=SbVgPQDealg&amp;amp;list=PLYvdvJlnTOjF6aJsWWAt7kZRJvzw-en8B&amp;amp;index=2&amp;amp;t=0s&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PJjeHzvi_VQ&amp;amp;feature=youtu.be&quot;&gt;Generics, Conditional types and Mapped types&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Troubleshooting Handbook: Utilities&lt;/h1&gt; 
&lt;p&gt;These are all built in, &lt;a href=&quot;https://github.com/microsoft/TypeScript/blob/2c458c0d1ccb96442bca9ce43aa987fb0becf8a9/src/lib/es5.d.ts#L1401-L1474&quot;&gt;see source in es5.d.ts&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ConstructorParameters&lt;/code&gt;: a tuple of class constructor&#39;s parameter types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Exclude&lt;/code&gt;: exclude a type from another type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Extract&lt;/code&gt;: select a subtype that is assignable to another type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;InstanceType&lt;/code&gt;: the instance type you get from a &lt;code&gt;new&lt;/code&gt;ing a class constructor&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NonNullable&lt;/code&gt;: exclude &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; from a type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Parameters&lt;/code&gt;: a tuple of a function&#39;s parameter types&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Partial&lt;/code&gt;: Make all properties in an object optional&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Readonly&lt;/code&gt;: Make all properties in an object readonly&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ReadonlyArray&lt;/code&gt;: Make an immutable array of the given type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Pick&lt;/code&gt;: A subtype of an object type with a subset of its keys&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Record&lt;/code&gt;: A map from a key type to a value type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Required&lt;/code&gt;: Make all properties in an object required&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ReturnType&lt;/code&gt;: A function&#39;s return type&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Troubleshooting Handbook: tsconfig.json&lt;/h1&gt; 
&lt;p&gt;You can find &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;all the Compiler options in the TypeScript docs&lt;/a&gt;. &lt;a href=&quot;https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports&quot;&gt;The new TS docs also has per-flag annotations of what each does&lt;/a&gt;. This is the setup I roll with for APPS (not libraries - for libraries you may wish to see the settings we use in &lt;code&gt;tsdx&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;compilerOptions&quot;: {
    &quot;incremental&quot;: true,
    &quot;outDir&quot;: &quot;build/lib&quot;,
    &quot;target&quot;: &quot;es5&quot;,
    &quot;module&quot;: &quot;esnext&quot;,
    &quot;lib&quot;: [&quot;dom&quot;, &quot;esnext&quot;],
    &quot;sourceMap&quot;: true,
    &quot;importHelpers&quot;: true,
    &quot;declaration&quot;: true,
    &quot;rootDir&quot;: &quot;src&quot;,
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;noImplicitReturns&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;allowJs&quot;: false,
    &quot;jsx&quot;: &quot;react&quot;,
    &quot;moduleResolution&quot;: &quot;node&quot;,
    &quot;baseUrl&quot;: &quot;src&quot;,
    &quot;forceConsistentCasingInFileNames&quot;: true,
    &quot;esModuleInterop&quot;: true,
    &quot;suppressImplicitAnyIndexErrors&quot;: true,
    &quot;allowSyntheticDefaultImports&quot;: true,
    &quot;experimentalDecorators&quot;: true
  },
  &quot;include&quot;: [&quot;src/**/*&quot;],
  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;build&quot;, &quot;scripts&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find more &lt;a href=&quot;https://github.com/tsconfig/bases&quot;&gt;recommended TS config here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please open an issue and discuss if there are better recommended choices for React.&lt;/p&gt; 
&lt;p&gt;Selected flags and why we like them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;esModuleInterop&lt;/code&gt;: disables namespace imports (&lt;code&gt;import * as foo from &quot;foo&quot;&lt;/code&gt;) and enables CJS/AMD/UMD style imports (&lt;code&gt;import fs from &quot;fs&quot;&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;strict&lt;/code&gt;: &lt;code&gt;strictPropertyInitialization&lt;/code&gt; forces you to initialize class properties or explicitly declare that they can be undefined. You can opt out of this with a definite assignment assertion.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&quot;typeRoots&quot;: [&quot;./typings&quot;, &quot;./node_modules/@types&quot;]&lt;/code&gt;: By default, TypeScript looks in &lt;code&gt;node_modules/@types&lt;/code&gt; and parent folders for third party type declarations. You may wish to override this default resolution so you can put all your global type declarations in a special &lt;code&gt;typings&lt;/code&gt; folder.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Compilation speed grows linearly with size of codebase. For large projects, you will want to use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/project-references.html&quot;&gt;Project References&lt;/a&gt;. See our &lt;a href=&quot;https://react-typescript-cheatsheet.netlify.app/docs/advanced/intro/&quot;&gt;ADVANCED&lt;/a&gt; cheatsheet for commentary.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Troubleshooting Handbook: Fixing bugs in official typings&lt;/h1&gt; 
&lt;p&gt;If you run into bugs with your library&#39;s official typings, you can copy them locally and tell TypeScript to use your local version using the &quot;paths&quot; field. In your &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;compilerOptions&quot;: {
    &quot;paths&quot;: {
      &quot;mobx-react&quot;: [&quot;../typings/modules/mobx-react&quot;]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/AdamRackis/status/1024827730452520963&quot;&gt;Thanks to @adamrackis for the tip.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you just need to add an interface, or add missing members to an existing interface, you don&#39;t need to copy the whole typing package. Instead, you can use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/declaration-merging.html&quot;&gt;declaration merging&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// my-typings.ts
declare module &quot;plotly.js&quot; {
  interface PlotlyHTMLElement {
    removeAllListeners(): void;
  }
}

// MyComponent.tsx
import { PlotlyHTMLElement } from &quot;plotly.js&quot;;

const f = (e: PlotlyHTMLElement) =&amp;gt; {
  e.removeAllListeners();
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You dont always have to implement the module, you can simply import the module as &lt;code&gt;any&lt;/code&gt; for a quick start:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;// my-typings.ts
declare module &quot;plotly.js&quot;; // each of its imports are `any`
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Because you don&#39;t have to explicitly import this, this is known as an &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html#pitfalls-of-namespaces-and-modules&quot;&gt;ambient module declaration&lt;/a&gt;. You can do AMD&#39;s in a script-mode &lt;code&gt;.ts&lt;/code&gt; file (no imports or exports), or a &lt;code&gt;.d.ts&lt;/code&gt; file anywhere in your project.&lt;/p&gt; 
&lt;p&gt;You can also do ambient variable and ambient type declarations:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;// ambient utiltity type
type ToArray&amp;lt;T&amp;gt; = T extends unknown[] ? T : T[];
// ambient variable
declare let process: {
  env: {
    NODE_ENV: &quot;development&quot; | &quot;production&quot;;
  };
};
process = {
  env: {
    NODE_ENV: &quot;production&quot;,
  },
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can see examples of these included in the built in type declarations in the &lt;code&gt;lib&lt;/code&gt; field of &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Time to Really Learn TypeScript&lt;/h1&gt; 
&lt;p&gt;Believe it or not, we have only barely introduced TypeScript here in this cheatsheet. If you are still facing TypeScript troubleshooting issues, it is likely that your understanding of TS is still too superficial.&lt;/p&gt; 
&lt;p&gt;There is a whole world of generic type logic that you will eventually get into, however it becomes far less dealing with React than just getting good at TypeScript so it is out of scope here. But at least you can get productive in React now :)&lt;/p&gt; 
&lt;p&gt;It is worth mentioning some resources to help you get started:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Step through the 40+ examples under &lt;a href=&quot;http://www.typescriptlang.org/play/index.html&quot;&gt;the playground&#39;s&lt;/a&gt; Examples section, written by @Orta&lt;/li&gt; 
 &lt;li&gt;Anders Hejlsberg&#39;s overview of TS: https://www.youtube.com/watch?v=ET4kT88JRXs&lt;/li&gt; 
 &lt;li&gt;Marius Schultz: https://blog.mariusschulz.com/series/typescript-evolution with an &lt;a href=&quot;https://egghead.io/courses/advanced-static-types-in-typescript&quot;&gt;Egghead.io course&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Basarat&#39;s Deep Dive: https://basarat.gitbook.io/typescript/&lt;/li&gt; 
 &lt;li&gt;Axel Rauschmeyer&#39;s &lt;a href=&quot;https://exploringjs.com/tackling-ts/&quot;&gt;Tackling TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rares Matei: &lt;a href=&quot;https://egghead.io/courses/practical-advanced-typescript&quot;&gt;Egghead.io course&lt;/a&gt;&#39;s advanced TypeScript course on Egghead.io is great for newer typescript features and practical type logic applications (e.g. recursively making all properties of a type &lt;code&gt;readonly&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Learn about &lt;a href=&quot;https://www.youtube.com/watch?v=PJjeHzvi_VQ&amp;amp;feature=youtu.be&quot;&gt;Generics, Conditional types and Mapped types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Shu Uesugi: &lt;a href=&quot;https://ts.chibicode.com/&quot;&gt;TypeScript for Beginner Programmers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Here is another &lt;a href=&quot;https://github.com/threehams/typescript-error-guide/&quot;&gt;TypeScript Error Guide&lt;/a&gt; that you can check for your errors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Other React + TypeScript resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;me! &lt;a href=&quot;https://twitter.com/swyx&quot;&gt;https://twitter.com/swyx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;https://www.freecodecamp.org/news/how-to-build-a-todo-app-with-react-typescript-nodejs-and-mongodb/&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/piotrwitek/react-redux-typescript-guide&quot;&gt;https://github.com/piotrwitek/react-redux-typescript-guide&lt;/a&gt; - &lt;strong&gt;HIGHLY HIGHLY RECOMMENDED&lt;/strong&gt;, i wrote this repo before knowing about this one, this has a lot of stuff I don&#39;t cover, including &lt;strong&gt;REDUX&lt;/strong&gt; and &lt;strong&gt;JEST&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://startup-cto.net/10-bad-typescript-habits-to-break-this-year/&quot;&gt;10 Bad TypeScript Habits&lt;/a&gt;: 
  &lt;ol&gt; 
   &lt;li&gt;not using &lt;code&gt;&quot;strict&quot;: true&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;using &lt;code&gt;||&lt;/code&gt; for default values when we have &lt;code&gt;??&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;Using &lt;code&gt;any&lt;/code&gt; instead of &lt;code&gt;unknown&lt;/code&gt; for API responses&lt;/li&gt; 
   &lt;li&gt;using &lt;code&gt;as&lt;/code&gt; assertion instead of Type Guards (&lt;code&gt;function isFoo(obj: unknown): obj is Foo {}&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;as any&lt;/code&gt; in tests&lt;/li&gt; 
   &lt;li&gt;Marking optional properties instead of modeling which combinations exist by extending interfaces&lt;/li&gt; 
   &lt;li&gt;One letter generics&lt;/li&gt; 
   &lt;li&gt;Non-boolean &lt;code&gt;if (nonboolean)&lt;/code&gt; checks&lt;/li&gt; 
   &lt;li&gt;bangbang checks &lt;code&gt;if (!!nonboolean)&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;!= null&lt;/code&gt; to check for &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://levelup.gitconnected.com/ultimate-react-component-patterns-with-typescript-2-8-82990c516935&quot;&gt;Ultimate React Component Patterns with TypeScript 2.8&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://basarat.gitbook.io/typescript/tsx/react&quot;&gt;Basarat&#39;s TypeScript gitbook has a React section&lt;/a&gt; with an &lt;a href=&quot;https://egghead.io/courses/use-typescript-to-develop-react-applications&quot;&gt;Egghead.io course&lt;/a&gt; as well.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/palmerhq/typescript&quot;&gt;Palmer Group&#39;s TypeScript + React Guidelines&lt;/a&gt; as well as Jared&#39;s other work like &lt;a href=&quot;https://github.com/jaredpalmer/disco.chat&quot;&gt;disco.chat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/typescript-definition-style-guide&quot;&gt;Sindre Sorhus&#39; TypeScript Style Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript-React-Starter&quot;&gt;TypeScript React Starter Template by Microsoft&lt;/a&gt; A starter template for TypeScript and React with a detailed README describing how to use the two together. Note: this doesnt seem to be frequently updated anymore.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://frontendmasters.com/courses/intermediate-react/converting-the-app-to-typescript/&quot;&gt;Brian Holt&#39;s Intermediate React course on Frontend Masters (paid)&lt;/a&gt; - Converting App To TypeScript Section&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://frontendmasters.com/courses/production-typescript/&quot;&gt;Mike North&#39;s Production TypeScript course on Frontend Masters (paid)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jenil.github.io/chota/&quot;&gt;TSX Guide&lt;/a&gt; by &lt;a href=&quot;https://github.com/gojutin/www.tsx.guide&quot;&gt;gojutin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;TypeScript conversion: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/lyft/react-javascript-to-typescript-transform&quot;&gt;Lyft&#39;s React-To-TypeScript conversion CLI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://www.gustavwengel.dk/converting-typescript-to-javascript-part-1&quot;&gt;Gustav Wengel&#39;s blogpost - converting a React codebase to TypeScript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript-React-Conversion-Guide#typescript-react-conversion-guide&quot;&gt;Microsoft React TypeScript conversion guide&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;You?&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Editor Tooling and Integration&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;VSCode 
  &lt;ul&gt; 
   &lt;li&gt;swyx&#39;s VSCode Extension: https://github.com/sw-yx/swyx-react-typescript-snippets&lt;/li&gt; 
   &lt;li&gt;amVim: https://marketplace.visualstudio.com/items?itemName=auiworks.amvim&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;VIM 
  &lt;ul&gt; 
   &lt;li&gt;https://github.com/Quramy/tsuquyomi&lt;/li&gt; 
   &lt;li&gt;nvim-typescript?&lt;/li&gt; 
   &lt;li&gt;https://github.com/leafgarland/typescript-vim&lt;/li&gt; 
   &lt;li&gt;peitalin/vim-jsx-typescript&lt;/li&gt; 
   &lt;li&gt;NeoVim: https://github.com/neoclide/coc.nvim&lt;/li&gt; 
   &lt;li&gt;other discussion: https://mobile.twitter.com/ryanflorence/status/1085715595994095620&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You are free to use this repo&#39;s TSX logo if you wish:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/6764957/53868378-2b51fc80-3fb3-11e9-9cee-0277efe8a927.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/6764957/53868378-2b51fc80-3fb3-11e9-9cee-0277efe8a927.png&quot; alt=&quot;https://user-images.githubusercontent.com/6764957/53868378-2b51fc80-3fb3-11e9-9cee-0277efe8a927.png&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You may also wish to use alternative logos - &lt;a href=&quot;https://github.com/Protectator/jsx-tsx-logos&quot;&gt;jsx-tsx-logos&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/Protectator/jsx-tsx-logos/raw/master/example.png&quot; alt=&quot;https://github.com/Protectator/jsx-tsx-logos/raw/master/example.png&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Linting&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ö†Ô∏èNote that &lt;a href=&quot;https://medium.com/palantir/tslint-in-2019-1a144c2317a9&quot;&gt;TSLint is now in maintenance and you should try to use ESLint instead&lt;/a&gt;. If you are interested in TSLint tips, please check this PR from &lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/pull/14&quot;&gt;@azdanov&lt;/a&gt;. The rest of this section just focuses on ESLint. &lt;a href=&quot;https://github.com/typescript-eslint/tslint-to-eslint-config&quot;&gt;You can convert TSlint to ESlint with this tool&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ö†Ô∏èThis is an evolving topic. &lt;code&gt;typescript-eslint-parser&lt;/code&gt; is no longer maintained and &lt;a href=&quot;https://eslint.org/blog/2019/01/future-typescript-eslint&quot;&gt;work has recently begun on &lt;code&gt;typescript-eslint&lt;/code&gt; in the ESLint community&lt;/a&gt; to bring ESLint up to full parity and interop with TSLint.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Follow the TypeScript + ESLint docs at https://github.com/typescript-eslint/typescript-eslint:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;yarn add -D @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;add a &lt;code&gt;lint&lt;/code&gt; script to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;  &quot;scripts&quot;: {
    &quot;lint&quot;: &quot;eslint &#39;src/**/*.ts&#39;&quot;
  },
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and a suitable &lt;code&gt;.eslintrc.js&lt;/code&gt; (using &lt;code&gt;.js&lt;/code&gt; over &lt;code&gt;.json&lt;/code&gt; here so we can add comments):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = {
  env: {
    es6: true,
    node: true,
    jest: true,
  },
  extends: &quot;eslint:recommended&quot;,
  parser: &quot;@typescript-eslint/parser&quot;,
  plugins: [&quot;@typescript-eslint&quot;],
  parserOptions: {
    ecmaVersion: 2017,
    sourceType: &quot;module&quot;,
  },
  rules: {
    indent: [&quot;error&quot;, 2],
    &quot;linebreak-style&quot;: [&quot;error&quot;, &quot;unix&quot;],
    quotes: [&quot;error&quot;, &quot;single&quot;],
    &quot;no-console&quot;: &quot;warn&quot;,
    &quot;no-unused-vars&quot;: &quot;off&quot;,
    &quot;@typescript-eslint/no-unused-vars&quot;: [
      &quot;error&quot;,
      { vars: &quot;all&quot;, args: &quot;after-used&quot;, ignoreRestSiblings: false },
    ],
    &quot;@typescript-eslint/explicit-function-return-type&quot;: &quot;warn&quot;, // Consider using explicit annotations for object literals and function return types even when they can be inferred.
    &quot;no-empty&quot;: &quot;warn&quot;,
  },
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Most of this is taken from &lt;a href=&quot;https://github.com/palmerhq/tsdx/pull/70/files&quot;&gt;the &lt;code&gt;tsdx&lt;/code&gt; PR&lt;/a&gt; which is for &lt;strong&gt;libraries&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;More &lt;code&gt;.eslintrc.json&lt;/code&gt; options to consider with more options you may want for &lt;strong&gt;apps&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;extends&quot;: [
    &quot;airbnb&quot;,
    &quot;prettier&quot;,
    &quot;prettier/react&quot;,
    &quot;plugin:prettier/recommended&quot;,
    &quot;plugin:jest/recommended&quot;,
    &quot;plugin:unicorn/recommended&quot;
  ],
  &quot;plugins&quot;: [&quot;prettier&quot;, &quot;jest&quot;, &quot;unicorn&quot;],
  &quot;parserOptions&quot;: {
    &quot;sourceType&quot;: &quot;module&quot;,
    &quot;ecmaFeatures&quot;: {
      &quot;jsx&quot;: true
    }
  },
  &quot;env&quot;: {
    &quot;es6&quot;: true,
    &quot;browser&quot;: true,
    &quot;jest&quot;: true
  },
  &quot;settings&quot;: {
    &quot;import/resolver&quot;: {
      &quot;node&quot;: {
        &quot;extensions&quot;: [&quot;.js&quot;, &quot;.jsx&quot;, &quot;.ts&quot;, &quot;.tsx&quot;]
      }
    }
  },
  &quot;overrides&quot;: [
    {
      &quot;files&quot;: [&quot;**/*.ts&quot;, &quot;**/*.tsx&quot;],
      &quot;parser&quot;: &quot;typescript-eslint-parser&quot;,
      &quot;rules&quot;: {
        &quot;no-undef&quot;: &quot;off&quot;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can read a &lt;a href=&quot;https://blog.matterhorn.dev/posts/learn-typescript-linting-part-1/&quot;&gt;fuller TypeScript + ESLint setup guide here&lt;/a&gt; from Matterhorn, in particular check https://github.com/MatterhornDev/learn-typescript-linting.&lt;/p&gt; 
&lt;p&gt;Another great resource is &lt;a href=&quot;https://dev.to/robertcoopercode/using-eslint-and-prettier-in-a-typescript-project-53jb&quot;&gt;&quot;Using ESLint and Prettier in a TypeScript Project&quot;&lt;/a&gt; by @robertcoopercode.&lt;/p&gt; 
&lt;p&gt;Wes Bos is also working on &lt;a href=&quot;https://github.com/wesbos/eslint-config-wesbos/issues/68&quot;&gt;TypeScript support for his eslint+prettier config.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you&#39;re looking for information on Prettier, check out the &lt;a href=&quot;https://github.com/typescript-cheatsheets/react/blob/main/docs/advanced/misc-concerns.md#prettier&quot;&gt;Prettier&lt;/a&gt; guide.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Other React + TypeScript resources&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;me! &lt;a href=&quot;https://twitter.com/swyx&quot;&gt;https://twitter.com/swyx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/piotrwitek/react-redux-typescript-guide&quot;&gt;https://github.com/piotrwitek/react-redux-typescript-guide&lt;/a&gt; - &lt;strong&gt;HIGHLY HIGHLY RECOMMENDED&lt;/strong&gt;, i wrote this repo before knowing about this one, this has a lot of stuff I don&#39;t cover, including &lt;strong&gt;REDUX&lt;/strong&gt; and &lt;strong&gt;JEST&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://levelup.gitconnected.com/ultimate-react-component-patterns-with-typescript-2-8-82990c516935&quot;&gt;Ultimate React Component Patterns with TypeScript 2.8&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://basarat.gitbook.io/typescript/tsx/react&quot;&gt;Basarat&#39;s TypeScript gitbook has a React section&lt;/a&gt; with an &lt;a href=&quot;https://egghead.io/courses/use-typescript-to-develop-react-applications&quot;&gt;Egghead.io course&lt;/a&gt; as well.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/palmerhq/typescript&quot;&gt;Palmer Group&#39;s TypeScript + React Guidelines&lt;/a&gt; as well as Jared&#39;s other work like &lt;a href=&quot;https://github.com/jaredpalmer/disco.chat&quot;&gt;disco.chat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fettblog.eu/typescript-react&quot;&gt;Stefan Baumgartner&#39;s TypeScript + React Guide&lt;/a&gt;, which serves as a side-by-side guide to the official docs with extra articles on styling, custom hooks and patterns&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/typescript-definition-style-guide&quot;&gt;Sindre Sorhus&#39; TypeScript Style Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript-React-Starter&quot;&gt;TypeScript React Starter Template by Microsoft&lt;/a&gt; A starter template for TypeScript and React with a detailed README describing how to use the two together. Note: this doesnt seem to be frequently updated anymore.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://frontendmasters.com/courses/intermediate-react/converting-the-app-to-typescript/&quot;&gt;Brian Holt&#39;s Intermediate React course on Frontend Masters (paid)&lt;/a&gt; - Converting App To TypeScript Section&lt;/li&gt; 
 &lt;li&gt;TypeScript conversion: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/lyft/react-javascript-to-typescript-transform&quot;&gt;Lyft&#39;s React-To-TypeScript conversion CLI&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://www.gustavwengel.dk/converting-typescript-to-javascript-part-1&quot;&gt;Gustav Wengel&#39;s blogpost - converting a React codebase to TypeScript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript-React-Conversion-Guide#typescript-react-conversion-guide&quot;&gt;Microsoft React TypeScript conversion guide&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react&quot;&gt;DefinitelyTyped React source code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;You?&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Recommended React + TypeScript talks&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=_PBQ3if6Fmg&quot;&gt;Ultimate React Component Patterns with TypeScript&lt;/a&gt;, by Martin Hochel, GeeCon Prague 2018&lt;/li&gt; 
 &lt;li&gt;Please help contribute this new section!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Time to Really Learn TypeScript&lt;/h1&gt; 
&lt;p&gt;Believe it or not, we have only barely introduced TypeScript here in this cheatsheet. If you are still facing TypeScript troubleshooting issues, it is likely that your understanding of TS is still too superficial.&lt;/p&gt; 
&lt;p&gt;There is a whole world of generic type logic that you will eventually get into, however it becomes far less dealing with React than just getting good at TypeScript so it is out of scope here. But at least you can get productive in React now :)&lt;/p&gt; 
&lt;p&gt;It is worth mentioning some resources to help you get started:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Step through the 40+ examples under &lt;a href=&quot;http://www.typescriptlang.org/play/index.html&quot;&gt;the playground&#39;s&lt;/a&gt; Examples section, written by @Orta&lt;/li&gt; 
 &lt;li&gt;Anders Hejlsberg&#39;s overview of TS: https://www.youtube.com/watch?v=ET4kT88JRXs&lt;/li&gt; 
 &lt;li&gt;Marius Schultz: https://blog.mariusschulz.com/series/typescript-evolution with an &lt;a href=&quot;https://egghead.io/courses/advanced-static-types-in-typescript&quot;&gt;Egghead.io course&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Basarat&#39;s Deep Dive: https://basarat.gitbook.io/typescript/&lt;/li&gt; 
 &lt;li&gt;Axel Rauschmeyer&#39;s &lt;a href=&quot;https://exploringjs.com/tackling-ts/&quot;&gt;Tackling TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Rares Matei: &lt;a href=&quot;https://egghead.io/courses/practical-advanced-typescript&quot;&gt;Egghead.io course&lt;/a&gt;&#39;s advanced TypeScript course on Egghead.io is great for newer typescript features and practical type logic applications (e.g. recursively making all properties of a type &lt;code&gt;readonly&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Learn about &lt;a href=&quot;https://www.youtube.com/watch?v=PJjeHzvi_VQ&amp;amp;feature=youtu.be&quot;&gt;Generics, Conditional types and Mapped types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Shu Uesugi: &lt;a href=&quot;https://ts.chibicode.com/&quot;&gt;TypeScript for Beginner Programmers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Here is another &lt;a href=&quot;https://github.com/threehams/typescript-error-guide/&quot;&gt;TypeScript Error Guide&lt;/a&gt; that you can check for your errors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Example App&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/laststance/create-react-app-typescript-todo-example-2020&quot;&gt;Create React App TypeScript Todo Example 2020&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=I6ypD7qv3Z8&quot;&gt;Ben Awad&#39;s 14 hour Fullstack React/GraphQL/TypeScript Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress-realworld-app&quot;&gt;Cypress Realworld App&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;My question isn&#39;t answered here!&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new&quot;&gt;File an issue&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. See &lt;a href=&quot;https://raw.githubusercontent.com/typescript-cheatsheets/react/main/CONTRIBUTORS.md&quot;&gt;CONTRIBUTORS.md&lt;/a&gt; for the full list. Contributions of any kind welcome!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ebazhanov/linkedin-skill-assessments-quizzes</title>
      <link>https://github.com/Ebazhanov/linkedin-skill-assessments-quizzes</link>
      <description>&lt;p&gt;Full reference of LinkedIn answers 2021 for skill assessments, LinkedIn test, questions and answers (aws-lambda, rest-api, javascript, react, git, html, jquery, mongodb, java, css, python, machine-learning, power-poin, excel ...) linkedin –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–≤–∏–∑, linkedin –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç—ã, LinkedIn quiz l√∂sungen, linkedin quiz las respuestas, linkedin odp‚Ä¶&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Linkedin Quiz Answers, Skill Assessments Test&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/#contributors-&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/all_contributors-331-orange.svg?style=flat-square&quot; alt=&quot;All Contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This repository is for those looking for answers to the LinkedIn assessment quiz questions or willing to help others by contributing to the tests. Or possibly you would like to create your first pull request and be added as a contributor. Whatever is your goal - you are always welcome here! Feel free to use https://www.grammarly.com/ for online grammar checker when you contribute!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Announcement:&lt;/h4&gt; 
&lt;p&gt;if you want to meet each other or discuss quiz related problems join the &lt;code&gt;Discord&lt;/code&gt; chat&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/Ucs6BM55M3&quot;&gt;&lt;img src=&quot;https://invidget.switchblade.xyz/Ucs6BM55M3?theme=light&quot; alt=&quot;Join our Discord server!&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;p&gt;| Linkedin-quiz-questions | Translation | | Status | Your resource for answers. In case you have doubts please contact this person or add him to review your PR. | | ---------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------- | ------------- | ----------------------------------------------------------------------------------------------------------- | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/adobe-illustrator/adobe-illustrator-quiz.md&quot;&gt;Adobe-Illustrator&lt;/a&gt; | | =&amp;gt; 51 questions | =&amp;gt; 0 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/adobe-photoshop/adobe-photoshop-quiz.md&quot;&gt;Adobe-Photoshop&lt;/a&gt; | | =&amp;gt; 36 questions | =&amp;gt; 36 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/adobe-premiere-pro/adobe-premiere-pro-quiz.md&quot;&gt;Adobe Premiere Pro&lt;/a&gt; | | =&amp;gt; 47 questions | =&amp;gt; 0 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/agile-methodologies/agile-methodologies-quiz.md&quot;&gt;Agile Methodologies&lt;/a&gt; | | =&amp;gt; 76 questions | =&amp;gt; 76 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/android/android-quiz.md&quot;&gt;Android&lt;/a&gt; | | =&amp;gt; 44 questions | =&amp;gt; 40 answers | &lt;a href=&quot;https://github.com/surajsahani&quot;&gt;@surajsahani&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/angularjs/angularjs-quiz.md&quot;&gt;AngularJs&lt;/a&gt; | | =&amp;gt; 15 questions | =&amp;gt; 2 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/aws/aws-quiz.md&quot;&gt;AWS&lt;/a&gt; | | =&amp;gt; 38 questions | =&amp;gt; 36 answers | &lt;a href=&quot;https://github.com/jokerkeny&quot;&gt;@jokerkeny&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/aws-lambda/aws-lambda-quiz.md&quot;&gt;AWS-Lambda&lt;/a&gt; :fire: | | =&amp;gt; 44 questions | =&amp;gt; 44 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/bash/bash-quiz.md&quot;&gt;Bash&lt;/a&gt; | | =&amp;gt; 53 questions | =&amp;gt; 53 answers | &lt;a href=&quot;https://github.com/D4RIO&quot;&gt;@D4RIO&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/c%23/c-sharp-quiz.md&quot;&gt;C#&lt;/a&gt; | | =&amp;gt; 48 questions | =&amp;gt; 47 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/c%2B%2B/c%2B%2Bquiz.md&quot;&gt;C++&lt;/a&gt; | | =&amp;gt; 33 questions | =&amp;gt; 26 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/c-(programming-language)/c-quiz.md&quot;&gt;C (Programming Language)&lt;/a&gt; | | =&amp;gt; 25 questions | =&amp;gt; 25 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/css/css-quiz.md&quot;&gt;CSS&lt;/a&gt; | | =&amp;gt; 77 questions | =&amp;gt; 77 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/django/django-quiz.md&quot;&gt;Django&lt;/a&gt; | | =&amp;gt; 48 questions | =&amp;gt; 48 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/dotnet-framework/dotnet-framework-quiz.md&quot;&gt;.NET Framework&lt;/a&gt; | | =&amp;gt; 37 questions | =&amp;gt; 34 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/eclipse/eclipse-quiz.md&quot;&gt;Eclipse&lt;/a&gt; | | =&amp;gt; 22 questions | =&amp;gt; 15 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/git/git-quiz.md&quot;&gt;Git&lt;/a&gt; :star: | | =&amp;gt; 92 questions | =&amp;gt; 92 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/google-analytics/google-analytics-quiz.md&quot;&gt;Google Analytics&lt;/a&gt; | | =&amp;gt; 65 questions | =&amp;gt; 45 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/google-cloud-platform/gcp-quiz.md&quot;&gt;Google Cloud Platform (GCP)&lt;/a&gt; | | =&amp;gt; 27 questions | =&amp;gt; 27 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/hadoop/hadoop-quiz.md&quot;&gt;Hadoop&lt;/a&gt; | | =&amp;gt; 18 questions | =&amp;gt; 18 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/html/html-quiz.md&quot;&gt;HTML&lt;/a&gt; | | =&amp;gt; 62 questions | =&amp;gt; 62 answers | &lt;a href=&quot;https://github.com/harman052&quot;&gt;@harman052&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/java/java-quiz.md&quot;&gt;Java&lt;/a&gt; | | =&amp;gt; 65 questions | =&amp;gt; 65 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/javascript/javascript-quiz.md&quot;&gt;Javascript&lt;/a&gt; | | =&amp;gt; 70 questions | =&amp;gt; 70 answers | &lt;a href=&quot;https://github.com/harman052&quot;&gt;@harman052&lt;/a&gt;, &lt;a href=&quot;https://github.com/taletski&quot;&gt;@taletski&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/jquery/jquery-quiz.md&quot;&gt;jQuery&lt;/a&gt; :open_mouth: | | =&amp;gt; 50 questions | =&amp;gt; 50 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/json/json-quiz.md&quot;&gt;JSON&lt;/a&gt; | | =&amp;gt; 51 questions | =&amp;gt; 51 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/kotlin/kotlin-quiz.md&quot;&gt;Kotlin&lt;/a&gt; | | =&amp;gt; 44 questions | =&amp;gt; 34 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/linux/linux-assesment.md&quot;&gt;Linux&lt;/a&gt; | | =&amp;gt; 34 questions | =&amp;gt; 30 answers | &lt;a href=&quot;https://github.com/D4RIO&quot;&gt;@D4RIO&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/machine-learning/machine-learning-quiz.md&quot;&gt;Machine Learning&lt;/a&gt; | | =&amp;gt; 70 questions | =&amp;gt; 70 answers | &lt;a href=&quot;https://github.com/aaronwangj&quot;&gt;@aaronwangj&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/matlab/matlab-quiz.md&quot;&gt;MATLAB&lt;/a&gt; | | =&amp;gt; 45 questions | =&amp;gt; 45 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/maven/maven-quiz.md&quot;&gt;Maven&lt;/a&gt; :fire: | | =&amp;gt; 35 questions | =&amp;gt; 35 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-access/microsoft-access.md&quot;&gt;Microsoft Access&lt;/a&gt; | | =&amp;gt; 26 questions | =&amp;gt; 0 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-azure/microsoft-azure-quiz.md&quot;&gt;Microsoft Azure&lt;/a&gt; | | =&amp;gt; 44 questions | =&amp;gt; 45 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-excel/microsoft-excel-quiz.md&quot;&gt;Microsoft Excel&lt;/a&gt; | 
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-excel/microsoft-excel-quiz-de.md&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; | =&amp;gt; 52 questions | =&amp;gt; 52 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-outlook/microsoft-outlook-quiz.md&quot;&gt;Microsoft Outlook&lt;/a&gt; | | =&amp;gt; 12 questions | =&amp;gt; 0 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-power-bi/microsoft-power-bi-quiz.md&quot;&gt;Microsoft Power BI&lt;/a&gt; | | =&amp;gt; 26 questions | =&amp;gt; 23 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-power-point/microsoft-power-point-quiz.md&quot;&gt;Microsoft Power Point&lt;/a&gt; | | =&amp;gt; 38 questions | =&amp;gt; 38 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-project/microsoft-project-quiz.md&quot;&gt;Microsoft Project&lt;/a&gt; | | =&amp;gt; 41 questions | =&amp;gt; 41 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/microsoft-word/microsoft-word-quiz.md&quot;&gt;Microsoft Word&lt;/a&gt; | | =&amp;gt; 54 questions | =&amp;gt; 52 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/mongodb/mongodb-quiz.md&quot;&gt;MongoDB&lt;/a&gt; | | =&amp;gt; 54 questions | =&amp;gt; 54 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/mysql/mysql-quiz.md&quot;&gt;MySQL&lt;/a&gt; | | =&amp;gt; 68 questions | =&amp;gt; 68 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/node.js/node.js-quiz.md&quot;&gt;node.js&lt;/a&gt; | | =&amp;gt; 41 questions | =&amp;gt; 41 answers | &lt;a href=&quot;https://github.com/harman052&quot;&gt;@harman052&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/nosql/nosql-quiz.md&quot;&gt;NoSQL&lt;/a&gt; | | =&amp;gt; 43 questions | =&amp;gt; 43 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/objective-c/objective-c-quiz.md&quot;&gt;objective-c&lt;/a&gt; | | =&amp;gt; 33 questions | =&amp;gt; 31 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/oop/object-oriented-programming-quiz.md&quot;&gt;OOP&lt;/a&gt; | | =&amp;gt; 51 questions | =&amp;gt; 51 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/php/php-quiz.md&quot;&gt;PHP&lt;/a&gt; | | =&amp;gt; 34 questions | =&amp;gt; 34 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/python/python-quiz.md&quot;&gt;Python&lt;/a&gt; | | =&amp;gt; 67 questions | =&amp;gt; 67 answers | &lt;a href=&quot;https://github.com/tik9&quot;&gt;@tik9&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/quickbooks/quickbooks-quiz.md&quot;&gt;QuickBooks&lt;/a&gt; | | =&amp;gt; 46 questions | =&amp;gt; 0 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/r/r-quiz.md&quot;&gt;R&lt;/a&gt; | | =&amp;gt; 29 questions | =&amp;gt; 29 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/react/reactjs-quiz.md&quot;&gt;React.js&lt;/a&gt; :rose: | | =&amp;gt; 52 questions | =&amp;gt; 52 answers | &lt;a href=&quot;https://github.com/harman052&quot;&gt;@harman052&lt;/a&gt;, &lt;a href=&quot;https://github.com/RobTables&quot;&gt;@RobTables&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/rest-api/rest-api-quiz.md&quot;&gt;REST API&lt;/a&gt; :+1: | | =&amp;gt; 34 questions | =&amp;gt; 34 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/ruby-on-rails/ruby-on-rails-quiz.md&quot;&gt;Rubi on Rails&lt;/a&gt; :+1: | | =&amp;gt; 24 questions | =&amp;gt; 4 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/scala/scala-quiz.md&quot;&gt;Scala&lt;/a&gt; | | =&amp;gt; 25 questions | =&amp;gt; 25 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/seo/search-engine-optimization-quiz.md&quot;&gt;Search Engine Optimization (SEO)&lt;/a&gt; | | =&amp;gt; 29 questions | =&amp;gt; 28 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/sharepoint/sharepoint-quiz.md&quot;&gt;SharePoint&lt;/a&gt; | | =&amp;gt; 29 questions | =&amp;gt; 29 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/spring-framework/spring-framework-quiz.md&quot;&gt;Spring Framework&lt;/a&gt; | | =&amp;gt; 15 questions | =&amp;gt; 15 answers | &lt;a href=&quot;https://github.com/sumanas27&quot;&gt;@sumanas27&lt;/a&gt;, &lt;a href=&quot;https://github.com/rradfar&quot;&gt;@rradfar&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/swift/swift-quiz.md&quot;&gt;Swift&lt;/a&gt; | | =&amp;gt; 48 questions | =&amp;gt; 48 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/t-sql/t-sql-quiz.md&quot;&gt;Transact-SQL (T-SQL)&lt;/a&gt; | | =&amp;gt; 28 questions | =&amp;gt; 28 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/vba/vba-quiz.md&quot;&gt;Visual Basic for Applications (VBA)&lt;/a&gt; | | =&amp;gt; 11 questions | =&amp;gt; 0 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/visio/visio-quiz.md&quot;&gt;Visio&lt;/a&gt; | | =&amp;gt; 32 questions | =&amp;gt; 0 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/windows-server/windows-server-quiz.md&quot;&gt;Windows Server&lt;/a&gt; | | =&amp;gt; 46 questions | =&amp;gt; 44 answers | | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/wordpress/wordpress-quiz.md&quot;&gt;WordPress&lt;/a&gt; | | =&amp;gt; 42 questions | =&amp;gt; 39 answers | &lt;a href=&quot;https://github.com/harman052&quot;&gt;@harman052&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/xml/xml-quiz.md&quot;&gt;XML&lt;/a&gt; | | =&amp;gt; 21 questions | =&amp;gt; 19 answers | |&lt;/p&gt; 
&lt;h2&gt;Format&lt;/h2&gt; 
&lt;p&gt;We recommend formatting files using &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; code formatter. Prettier comes installed with the IDE &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/code.visualstudio.com&quot;&gt;Vscode&lt;/a&gt; which we recommend for preparing the md files. It works on all OS. If you want to run it independently, get &lt;strong&gt;npm&lt;/strong&gt; and:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm run format
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/Ebazhanov/linkedin-quiz-assessments&quot;&gt;&lt;img src=&quot;https://starchart.cc/Ebazhanov/linkedin-quiz-assessments.svg&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wekan/wekan</title>
      <link>https://github.com/wekan/wekan</link>
      <description>&lt;p&gt;The Open Source kanban (built with Meteor). Keep variable/table/field names camelCase. For translations, only add Pull Request changes to wekan/i18n/en.i18n.json , other translations are done at https://transifex.com/wekan/wekan only.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/wekan/wekan&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&quot; alt=&quot;Gitpod Ready-to-Code&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Wekan - Open Source kanban&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wekan/wekan/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/wekan/wekan.svg&quot; alt=&quot;Contributors&quot; title=&quot;Contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://quay.io/repository/wekan/wekan&quot;&gt;&lt;img src=&quot;https://quay.io/repository/wekan/wekan/status&quot; alt=&quot;Docker Repository on Quay&quot; title=&quot;Docker Repository on Quay&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/wekanteam/wekan&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/build/wekanteam/wekan.svg&quot; alt=&quot;Docker Hub container status&quot; title=&quot;Docker Hub container status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://hub.docker.com/r/wekanteam/wekan&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/wekanteam/wekan.svg&quot; alt=&quot;Docker Hub pulls&quot; title=&quot;Docker Hub Pulls&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/wekan/wekan&quot;&gt;&lt;img src=&quot;https://travis-ci.org/wekan/wekan.svg?branch=devel&quot; alt=&quot;Wekan Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.codacy.com/app/xet7/wekan?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=wekan/wekan&amp;amp;utm_campaign=Badge_Grade&quot;&gt;&lt;img src=&quot;https://api.codacy.com/project/badge/Grade/02137ecec4e34c5aa303f57637196a93&quot; alt=&quot;Codacy Badge&quot; title=&quot;Codacy Badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/github/wekan/wekan&quot;&gt;&lt;img src=&quot;https://codeclimate.com/github/wekan/wekan/badges/gpa.svg&quot; alt=&quot;Code Climate&quot; title=&quot;Code Climate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/wekan/wekan&quot;&gt;&lt;img src=&quot;https://david-dm.org/wekan/wekan.svg&quot; alt=&quot;Project Dependencies&quot; title=&quot;Project Dependencies&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.openhub.net/p/wekan&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20analysis-at%20Open%20Hub-brightgreen.svg&quot; alt=&quot;Code analysis at Open Hub&quot; title=&quot;Code analysis at Open Hub&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.fossa.io/projects/git%2Bgithub.com%2Fwekan%2Fwekan?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fwekan%2Fwekan.svg?type=shield&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bestpractices.coreinfrastructure.org/projects/4619&quot;&gt;&lt;img src=&quot;https://bestpractices.coreinfrastructure.org/projects/4619/badge&quot; alt=&quot;CII Best Practices&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://transifex.com/wekan/wekan&quot;&gt;Translate Wekan at Transifex&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Translations to non-English languages are accepted only at &lt;a href=&quot;https://transifex.com/wekan/wekan&quot;&gt;Transifex&lt;/a&gt; using webbrowser. New English strings of new features can be added as PRs to edge branch file wekan/i18n/en.i18n.json .&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/wekan/wekan/issues&quot;&gt;Wekan feature requests and bugs&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Please add most of your questions as GitHub issue: &lt;a href=&quot;https://github.com/wekan/wekan/issues&quot;&gt;Wekan Feature Requests and Bugs&lt;/a&gt;. It&#39;s better than at chat where details get lost when chat scrolls up.&lt;/p&gt; 
&lt;h2&gt;Chat&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wekan/wekan/discussions&quot;&gt;Discussions&lt;/a&gt; - Wekan Community GitHub Discussions, that are not &lt;a href=&quot;https://github.com/wekan/wekan/issues&quot;&gt;Feature Requests and Bugs&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wekan/wekan/wiki/IRC-FAQ&quot;&gt;Wekan IRC FAQ&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please read the &lt;a href=&quot;https://github.com/wekan/wekan/wiki/FAQ&quot;&gt;FAQ&lt;/a&gt; first&lt;/li&gt; 
 &lt;li&gt;Please don&#39;t feed the &lt;a href=&quot;https://github.com/wekan/wekan/wiki/FAQ#why-am-i-called-a-troll&quot;&gt;trolls&lt;/a&gt; and &lt;a href=&quot;https://github.com/wekan/wekan/wiki/FAQ#why-am-i-called-a-spammer&quot;&gt;spammers&lt;/a&gt; that are mentioned in the FAQ :)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About Wekan&lt;/h2&gt; 
&lt;p&gt;Wekan is an completely &lt;a href=&quot;https://en.wikipedia.org/wiki/Open-source_software&quot;&gt;Open Source&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Free_software&quot;&gt;Free software&lt;/a&gt; collaborative kanban board application with MIT license.&lt;/p&gt; 
&lt;p&gt;Whether you‚Äôre maintaining a personal todo list, planning your holidays with some friends, or working in a team on your next revolutionary idea, Kanban boards are an unbeatable tool to keep your things organized. They give you a visual overview of the current state of your project, and make you productive by allowing you to focus on the few items that matter the most.&lt;/p&gt; 
&lt;p&gt;Since Wekan is a free software, you don‚Äôt have to trust us with your data and can install Wekan on your own computer or server. In fact we encourage you to do that by providing one-click installation on various platforms.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Wekan is used in &lt;a href=&quot;https://snapcraft.io/wekan&quot;&gt;most countries of the world&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Wekan largest user has 13k users using Wekan in their company.&lt;/li&gt; 
 &lt;li&gt;Wekan has been &lt;a href=&quot;https://transifex.com/wekan/wekan&quot;&gt;translated&lt;/a&gt; to about 63 languages.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wekan/wekan/wiki/Features&quot;&gt;Features&lt;/a&gt;: Wekan has real-time user interface.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wekan/wekan/wiki/Platforms&quot;&gt;Platforms&lt;/a&gt;: Wekan supports many platforms. Wekan is critical part of new platforms Wekan is currently being integrated to.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;64bit: Linux &lt;a href=&quot;https://github.com/wekan/wekan-snap/wiki/Install&quot;&gt;Snap&lt;/a&gt; or &lt;a href=&quot;https://sandstorm.io&quot;&gt;Sandstorm&lt;/a&gt; / &lt;a href=&quot;https://github.com/wekan/wekan/wiki/Mac&quot;&gt;Mac&lt;/a&gt; / &lt;a href=&quot;https://github.com/wekan/wekan/wiki/Install-Wekan-from-source-on-Windows&quot;&gt;Windows&lt;/a&gt;. &lt;a href=&quot;https://github.com/wekan/wekan/wiki/Platforms&quot;&gt;More Platforms&lt;/a&gt;, bundle for RasPi3 ARM and other CPUs where Node.js and MongoDB exists.&lt;/li&gt; 
 &lt;li&gt;1 GB RAM minimum free for Wekan. Production server should have minimum total 4 GB RAM. For thousands of users, for example with &lt;a href=&quot;https://github.com/wekan/wekan/blob/master/docker-compose.yml&quot;&gt;Docker&lt;/a&gt;: 3 frontend servers, each having 2 CPU and 2 wekan-app containers. One backend wekan-db server with many CPUs.&lt;/li&gt; 
 &lt;li&gt;Enough disk space and alerts about low disk space. If you run out disk space, MongoDB database gets corrupted.&lt;/li&gt; 
 &lt;li&gt;SECURITY: Updating to newest Wekan version very often. Please check you do not have automatic updates of Sandstorm or Snap turned off. Old versions have security issues because of old versions Node.js etc. Only newest Wekan is supported. Wekan on Sandstorm is not usually affected by any Standalone Wekan (Snap/Docker/Source) security issues.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wekan/wekan/issues&quot;&gt;Reporting all new bugs immediately&lt;/a&gt;. New features and fixes are added to Wekan &lt;a href=&quot;https://github.com/wekan/wekan/blob/devel/CHANGELOG.md&quot;&gt;many times a day&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wekan/wekan/wiki/Backup&quot;&gt;Backups&lt;/a&gt; of Wekan database once a day miminum. Bugs, updates, users deleting list or card, harddrive full, harddrive crash etc can eat your data. There is no undo yet. Some bug can cause Wekan board to not load at all, requiring manual fixing of database content.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Roadmap and Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://boards.wekan.team/b/D2SzJKZDS4Z48yeQH/wekan-open-source-kanban-board-with-mit-license&quot;&gt;Roadmap&lt;/a&gt; - Public read-only board at Wekan demo.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wekan/wekan/wiki/Developer-Documentation&quot;&gt;Developer Documentation&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;There is many companies and individuals contributing code to Wekan, to add features and bugfixes &lt;a href=&quot;https://github.com/wekan/wekan/blob/devel/CHANGELOG.md&quot;&gt;many times a day&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wekan/wekan/issues&quot;&gt;Please add Add new Feature Requests and Bug Reports immediately&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wekan.team/commercial-support/&quot;&gt;Commercial Support&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We also welcome sponsors for features and bugfixes. By working directly with Wekan you get the benefit of active maintenance and new features added by growing Wekan developer community.&lt;/p&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/wekan/wekan/wiki/Features&quot;&gt;More screenshots at Features page&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://boards.wekan.team/b/D2SzJKZDS4Z48yeQH/wekan-open-source-kanban-board-with-mit-license&quot;&gt;&lt;img src=&quot;https://wekan.github.io/wekan-markdown.png&quot; alt=&quot;Screenshot of Wekan&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Wekan is released under the very permissive &lt;a href=&quot;https://raw.githubusercontent.com/wekan/wekan/master/LICENSE&quot;&gt;MIT license&lt;/a&gt;, and made with &lt;a href=&quot;https://www.meteor.com&quot;&gt;Meteor&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bgithub.com%2Fwekan%2Fwekan?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fwekan%2Fwekan.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>react-grid-layout/react-draggable</title>
      <link>https://github.com/react-grid-layout/react-draggable</link>
      <description>&lt;p&gt;React draggable component&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React-Draggable&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/react-grid-layout/react-draggable&quot;&gt;&lt;img src=&quot;https://api.travis-ci.org/react-grid-layout/react-draggable.svg?branch=master&quot; alt=&quot;TravisCI Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/react-grid-layout/react-draggable&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/32r7s2skrgm9ubva?svg=true&quot; alt=&quot;Appveyor Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://npmjs.com/package/react-draggable&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/react-draggable.svg?maxAge=2592000&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;http://img.badgesize.io/https://npmcdn.com/react-draggable/build/web/react-draggable.min.js?compression=gzip&quot; alt=&quot;gzip size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/react-draggable.svg&quot; alt=&quot;version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A simple component for making elements draggable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;Draggable&amp;gt;
  &amp;lt;div&amp;gt;I can now be moved around!&amp;lt;/div&amp;gt;
&amp;lt;/Draggable&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://react-grid-layout.github.io/react-draggable/example/&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;|Version | Compatibility| |------------|--------------| |4.x | React 16.3+ | |3.x | React 15-16 | |2.x | React 0.14 - 15 | |1.x | React 0.13 - 0.14 | |0.x | React 0.10 - 0.13 |&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;Technical Documentation&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#installing&quot;&gt;Installing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#exports&quot;&gt;Exports&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#draggable&quot;&gt;Draggable&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#draggable-usage&quot;&gt;Draggable Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#draggable-api&quot;&gt;Draggable API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#controlled-vs-uncontrolled&quot;&gt;Controlled vs. Uncontrolled&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#draggablecore&quot;&gt;DraggableCore&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#draggablecore-api&quot;&gt;DraggableCore API&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Installing&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install react-draggable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you aren&#39;t using browserify/webpack, a &lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/dist/react-draggable.js&quot;&gt;UMD version of react-draggable&lt;/a&gt; is available. It is updated per-release only. This bundle is also what is loaded when installing from npm. It expects external &lt;code&gt;React&lt;/code&gt; and &lt;code&gt;ReactDOM&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;If you want a UMD version of the latest &lt;code&gt;master&lt;/code&gt; revision, you can generate it yourself from master by cloning this repository and running &lt;code&gt;$ make&lt;/code&gt;. This will create umd dist files in the &lt;code&gt;dist/&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h3&gt;Exports&lt;/h3&gt; 
&lt;p&gt;The default export is &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt;. At the &lt;code&gt;.DraggableCore&lt;/code&gt; property is &lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#draggablecore&quot;&gt;&lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt;&lt;/a&gt;. Here&#39;s how to use it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ES6
import Draggable from &#39;react-draggable&#39;; // The default
import {DraggableCore} from &#39;react-draggable&#39;; // &amp;lt;DraggableCore&amp;gt;
import Draggable, {DraggableCore} from &#39;react-draggable&#39;; // Both at the same time

// CommonJS
let Draggable = require(&#39;react-draggable&#39;);
let DraggableCore = Draggable.DraggableCore;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;A &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt; element wraps an existing element and extends it with new event handlers and styles. It does not create a wrapper element in the DOM.&lt;/p&gt; 
&lt;p&gt;Draggable items are moved using CSS Transforms. This allows items to be dragged regardless of their current positioning (relative, absolute, or static). Elements can also be moved between drags without incident.&lt;/p&gt; 
&lt;p&gt;If the item you are dragging already has a CSS Transform applied, it will be overwritten by &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt;. Use an intermediate wrapper (&lt;code&gt;&amp;lt;Draggable&amp;gt;&amp;lt;span&amp;gt;...&amp;lt;/span&amp;gt;&amp;lt;/Draggable&amp;gt;&lt;/code&gt;) in this case.&lt;/p&gt; 
&lt;h3&gt;Draggable Usage&lt;/h3&gt; 
&lt;p&gt;View the &lt;a href=&quot;http://react-grid-layout.github.io/react-draggable/example/&quot;&gt;Demo&lt;/a&gt; and its &lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/example/example.js&quot;&gt;source&lt;/a&gt; for more.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import Draggable from &#39;react-draggable&#39;;

class App extends React.Component {

  eventLogger = (e: MouseEvent, data: Object) =&amp;gt; {
    console.log(&#39;Event: &#39;, e);
    console.log(&#39;Data: &#39;, data);
  };

  render() {
    return (
      &amp;lt;Draggable
        axis=&quot;x&quot;
        handle=&quot;.handle&quot;
        defaultPosition={{x: 0, y: 0}}
        position={null}
        grid={[25, 25]}
        scale={1}
        onStart={this.handleStart}
        onDrag={this.handleDrag}
        onStop={this.handleStop}&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;div className=&quot;handle&quot;&amp;gt;Drag from here&amp;lt;/div&amp;gt;
          &amp;lt;div&amp;gt;This readme is really dragging on...&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/Draggable&amp;gt;
    );
  }
}

ReactDOM.render(&amp;lt;App/&amp;gt;, document.body);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Draggable API&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;&amp;lt;Draggable/&amp;gt;&lt;/code&gt; component transparently adds draggability to its children.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Only a single child is allowed or an Error will be thrown.&lt;/p&gt; 
&lt;p&gt;For the &lt;code&gt;&amp;lt;Draggable/&amp;gt;&lt;/code&gt; component to correctly attach itself to its child, the child element must provide support for the following props:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;style&lt;/code&gt; is used to give the transform css to the child.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;className&lt;/code&gt; is used to apply the proper classes to the object being dragged.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;onMouseDown&lt;/code&gt;, &lt;code&gt;onMouseUp&lt;/code&gt;, &lt;code&gt;onTouchStart&lt;/code&gt;, and &lt;code&gt;onTouchEnd&lt;/code&gt; are used to keep track of dragging state.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;React.DOM elements support the above properties by default, so you may use those elements as children without any changes. If you wish to use a React component you created, you&#39;ll need to be sure to &lt;a href=&quot;https://facebook.github.io/react/docs/transferring-props.html&quot;&gt;transfer prop&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt; Props:&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//
// Types:
//
type DraggableEventHandler = (e: Event, data: DraggableData) =&amp;gt; void | false;
type DraggableData = {
  node: HTMLElement,
  // lastX + deltaX === x
  x: number, y: number,
  deltaX: number, deltaY: number,
  lastX: number, lastY: number
};

//
// Props:
//
{
// If set to `true`, will allow dragging on non left-button clicks.
allowAnyClick: boolean,

// Determines which axis the draggable can move. This only affects
// flushing to the DOM. Callbacks will still include all values.
// Accepted values:
// - `both` allows movement horizontally and vertically (default).
// - `x` limits movement to horizontal axis.
// - `y` limits movement to vertical axis.
// - &#39;none&#39; stops all movement.
axis: string,

// Specifies movement boundaries. Accepted values:
// - `parent` restricts movement within the node&#39;s offsetParent
//    (nearest node with position relative or absolute), or
// - a selector, restricts movement within the targeted node
// - An object with `left, top, right, and bottom` properties.
//   These indicate how far in each direction the draggable
//   can be moved.
bounds: {left?: number, top?: number, right?: number, bottom?: number} | string,

// Specifies a selector to be used to prevent drag initialization. The string is passed to
// Element.matches, so it&#39;s possible to use multiple selectors like `.first, .second`.
// Example: &#39;.body&#39;
cancel: string,

// Class names for draggable UI.
// Default to &#39;react-draggable&#39;, &#39;react-draggable-dragging&#39;, and &#39;react-draggable-dragged&#39;
defaultClassName: string,
defaultClassNameDragging: string,
defaultClassNameDragged: string,

// Specifies the `x` and `y` that the dragged item should start at.
// This is generally not necessary to use (you can use absolute or relative
// positioning of the child directly), but can be helpful for uniformity in
// your callbacks and with css transforms.
defaultPosition: {x: number, y: number},

// If true, will not call any drag handlers.
disabled: boolean,

// Specifies the x and y that dragging should snap to.
grid: [number, number],

// Specifies a selector to be used as the handle that initiates drag.
// Example: &#39;.handle&#39;
handle: string,

// If desired, you can provide your own offsetParent for drag calculations.
// By default, we use the Draggable&#39;s offsetParent. This can be useful for elements
// with odd display types or floats.
offsetParent: HTMLElement,

// Called whenever the user mouses down. Called regardless of handle or
// disabled status.
onMouseDown: (e: MouseEvent) =&amp;gt; void,

// Called when dragging starts. If `false` is returned any handler,
// the action will cancel.
onStart: DraggableEventHandler,

// Called while dragging.
onDrag: DraggableEventHandler,

// Called when dragging stops.
onStop: DraggableEventHandler,

// If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.
// Unfortunately, in order for &amp;lt;Draggable&amp;gt; to work properly, we need raw access
// to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`
// as in this example:
//
// function MyComponent() {
//   const nodeRef = React.useRef(null);
//   return (
//     &amp;lt;Draggable nodeRef={nodeRef}&amp;gt;
//       &amp;lt;div ref={nodeRef}&amp;gt;Example Target&amp;lt;/div&amp;gt;
//     &amp;lt;/Draggable&amp;gt;
//   );
// }
//
// This can be used for arbitrarily nested components, so long as the ref ends up
// pointing to the actual child DOM node and not a custom component.
//
// Thanks to react-transition-group for the inspiration.
//
// `nodeRef` is also available on &amp;lt;DraggableCore&amp;gt;.
nodeRef: React.Ref&amp;lt;typeof React.Component&amp;gt;,

// Much like React form elements, if this property is present, the item
// becomes &#39;controlled&#39; and is not responsive to user input. Use `position`
// if you need to have direct control of the element.
position: {x: number, y: number}

// A position offset to start with. Useful for giving an initial position
// to the element. Differs from `defaultPosition` in that it does not
// affect the position returned in draggable callbacks, and in that it
// accepts strings, like `{x: &#39;10%&#39;, y: &#39;10%&#39;}`.
positionOffset: {x: number | string, y: number | string},

// Specifies the scale of the canvas your are dragging this element on. This allows
// you to, for example, get the correct drag deltas while you are zoomed in or out via
// a transform or matrix in the parent of this element.
scale: number
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that sending &lt;code&gt;className&lt;/code&gt;, &lt;code&gt;style&lt;/code&gt;, or &lt;code&gt;transform&lt;/code&gt; as properties will error - set them on the child element directly.&lt;/p&gt; 
&lt;h2&gt;Controlled vs. Uncontrolled&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt; is a &#39;batteries-included&#39; component that manages its own state. If you want to completely control the lifecycle of the component, use &lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For some users, they may want the nice state management that &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt; provides, but occasionally want to programmatically reposition their components. &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt; allows this customization via a system that is similar to how React handles form components.&lt;/p&gt; 
&lt;p&gt;If the prop &lt;code&gt;position: {x: number, y: number}&lt;/code&gt; is defined, the &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt; will ignore its internal state and use the provided position instead. Alternatively, you can seed the position using &lt;code&gt;defaultPosition&lt;/code&gt;. Technically, since &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt; works only on position deltas, you could also seed the initial position using CSS &lt;code&gt;top/left&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;We make one modification to the React philosophy here - we still allow dragging while a component is controlled. We then expect you to use at least an &lt;code&gt;onDrag&lt;/code&gt; or &lt;code&gt;onStop&lt;/code&gt; handler to synchronize state.&lt;/p&gt; 
&lt;p&gt;To disable dragging while controlled, send the prop &lt;code&gt;disabled={true}&lt;/code&gt; - at this point the &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt; will operate like a completely static component.&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;For users that require absolute control, a &lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt; element is available. This is useful as an abstraction over touch and mouse events, but with full control. &lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt; has no internal state.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/react-grid-layout/react-resizable&quot;&gt;React-Resizable&lt;/a&gt; and &lt;a href=&quot;https://github.com/react-grid-layout/react-grid-layout&quot;&gt;React-Grid-Layout&lt;/a&gt; for some usage examples.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt; is a useful building block for other libraries that simply want to abstract browser-specific quirks and receive callbacks when a user attempts to move an element. It does not set styles or transforms on itself and thus must have callbacks attached to be useful.&lt;/p&gt; 
&lt;h3&gt;DraggableCore API&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt; takes a limited subset of options:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  allowAnyClick: boolean,
  cancel: string,
  disabled: boolean,
  enableUserSelectHack: boolean,
  offsetParent: HTMLElement,
  grid: [number, number],
  handle: string,
  onStart: DraggableEventHandler,
  onDrag: DraggableEventHandler,
  onStop: DraggableEventHandler,
  onMouseDown: (e: MouseEvent) =&amp;gt; void,
  scale: number
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that there is no start position. &lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt; simply calls &lt;code&gt;drag&lt;/code&gt; handlers with the below parameters, indicating its position (as inferred from the underlying MouseEvent) and deltas. It is up to the parent to set actual positions on &lt;code&gt;&amp;lt;DraggableCore&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Drag callbacks (&lt;code&gt;onStart&lt;/code&gt;, &lt;code&gt;onDrag&lt;/code&gt;, &lt;code&gt;onStop&lt;/code&gt;) are called with the &lt;a href=&quot;https://raw.githubusercontent.com/react-grid-layout/react-draggable/master/#draggable-api&quot;&gt;same arguments as &lt;code&gt;&amp;lt;Draggable&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fork the project&lt;/li&gt; 
 &lt;li&gt;Run the project in development mode: &lt;code&gt;$ npm run dev&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Make changes.&lt;/li&gt; 
 &lt;li&gt;Add appropriate tests&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$ npm test&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;If tests don&#39;t pass, make them pass.&lt;/li&gt; 
 &lt;li&gt;Update README with appropriate docs.&lt;/li&gt; 
 &lt;li&gt;Commit and PR&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Release checklist&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Update CHANGELOG&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make release-patch&lt;/code&gt;, &lt;code&gt;make release-minor&lt;/code&gt;, or &lt;code&gt;make-release-major&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;make publish&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;MIT&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>integrations/slack</title>
      <link>https://github.com/integrations/slack</link>
      <description>&lt;p&gt;Bring your code to the conversations you care about with the GitHub and Slack integration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub + Slack Integration&lt;/h1&gt; 
&lt;p&gt;| Build | Code Coverage | Dependencies | |-------|---------------|--------------| | &lt;a href=&quot;https://travis-ci.org/integrations/slack&quot;&gt;&lt;img src=&quot;https://travis-ci.org/integrations/slack.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/integrations/slack&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/integrations/slack/branch/master/graph/badge.svg?token=wGV2kENgLx&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://greenkeeper.io/&quot;&gt;&lt;img src=&quot;https://badges.greenkeeper.io/integrations/slack.svg&quot; alt=&quot;Greenkeeper badge&quot;&gt;&lt;/a&gt; |&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Heads Up!&lt;/strong&gt; The GitHub and Slack app has a few new features to help you turn conversations into next steps. Take action on pull requests, issues, and more right from your Slack channels to start moving work forward, faster. &lt;a href=&quot;https://blog.github.com/2018-05-17-new-improvements-to-slack-and-github-integration/&quot;&gt;Read more about it on the GitHub blog&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;The GitHub integration for Slack gives you and your teams full visibility into your GitHub projects right in Slack channels, where you can generate ideas, triage issues and collaborate with other teams to move projects forward. This integration is an open source project, built and maintained by GitHub.&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#installing-the-github-integration-for-slack&quot;&gt;Installing the GitHub integration for Slack&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#authorization&quot;&gt;Authorization&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Getting Started 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#repository-activity&quot;&gt;Repository Activity&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#link-previews&quot;&gt;Link previews&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#take-action&quot;&gt;Take action&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#moving-away-from-the-legacy-workspace-app-model-in-slack&quot;&gt;Moving away from the legacy workspace app model in Slack&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#questions-need-help&quot;&gt;Need help?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Installing the GitHub integration for Slack&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;This app officially supports GitHub.com (which includes our GitHub Enterprise cloud-hosted offering) and Slack.com, but the team plans to support GitHub Enterprise Server (our self-hosted product) and Slack Enterprise Grid in the future.&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://slack.com/apps/A8GBNUWU8-github&quot;&gt;Install the GitHub integration for Slack&lt;/a&gt;. After you&#39;ve signed in to your Slack workspace, you will be prompted to give the app access:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;After the app is installed, and once you&#39;ve added the GitHub integration to the relevant channels using &lt;code&gt;/invite @github&lt;/code&gt;, you will see previews of links to GitHub issues, pull-requests, and code rendered as rich text in your workspace.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Subscribing and Unsubscribing&lt;/h3&gt; 
&lt;p&gt;At this point, your Slack and GitHub user accounts are not linked. To link the two accounts, authenticate to GitHub using a &lt;code&gt;/github&lt;/code&gt; slash command, &lt;code&gt;/github signin&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;/github&lt;/code&gt; slash command also accepts a &lt;code&gt;subscribe&lt;/code&gt; argument that you can use to subscribe to an Organization or Repository&#39;s activity &lt;code&gt;/github subscribe &amp;lt;organization&amp;gt;/&amp;lt;repository&amp;gt;&lt;/code&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;If you originally gave the app access to &quot;All repositories&quot; and you&#39;ve created a new private repository on GitHub after installing the GitHub integration for Slack, the &lt;code&gt;/github subscribe&lt;/code&gt; command will work automatically on your new repository. If you installed the app on a subset of repositories, the app will prompt you to install it on the new repository.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;/github&lt;/code&gt; slash command also supports &lt;code&gt;unsubscribe&lt;/code&gt;. To unsubscribe to notifications from a repository, use &lt;code&gt;/github unsubscribe &amp;lt;organization&amp;gt;/&amp;lt;repository&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Authorization&lt;/h3&gt; 
&lt;p&gt;By granting the app access, you are providing the following authorizations to your GitHub and Slack accounts:&lt;/p&gt; 
&lt;h4&gt;Slack Permission Scopes&lt;/h4&gt; 
&lt;p&gt;|Permission scope|Why we need it| |---|---| |Access private conversations between you and the App | To message you with instructions. | |View links to GitHub.com in messages| To render rich links from &lt;code&gt;github.com&lt;/code&gt;| |Add link previews to GitHub.com to messages| To render rich links to &lt;code&gt;github.com&lt;/code&gt;| |Add slash commands| To add the &lt;code&gt;/github&lt;/code&gt; slash command to your Slack workspace | |View the workspace or organization&#39;s name, email domain, and icon| To store subscriptions you set up| |Post messages as the app| To notify you of activity that happens on GitHub, in Slack|&lt;/p&gt; 
&lt;h4&gt;GitHub Permission Scopes&lt;/h4&gt; 
&lt;p&gt;|Permission scope|Why we need it| |---|---| |Read access to code| To render code snippets in Slack| |Read access to commit statuses, checks, issues, metadata, pull requests, and repository projects | To render previews of links shared in Slack| |Write access to issues, deployments, and pull requests | To take action from Slack with the &lt;code&gt;/github&lt;/code&gt; command and directly from messages|&lt;/p&gt; 
&lt;h4&gt;Repository Activity&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Subscribe to an Organization or a Repository&lt;/strong&gt; On repositories, the app notifies of &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, and &lt;code&gt;re-open&lt;/code&gt; events on pull requests and issues in repositories you&#39;ve subscribed to. It also notifies of any &lt;code&gt;push&lt;/code&gt; directly to the repository&#39;s default branch as well as &lt;code&gt;comments&lt;/code&gt; on issues and pull requests.&lt;/p&gt; 
&lt;h4&gt;Link previews&lt;/h4&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;When a user posts a GitHub link to &lt;strong&gt;issues and pull requests&lt;/strong&gt;, directly linked &lt;strong&gt;comments&lt;/strong&gt;, code &lt;strong&gt;blobs&lt;/strong&gt; with line numbers, as well as &lt;strong&gt;organizations, repositories, and users&lt;/strong&gt; in Slack, a preview of the link will be shown.&lt;/p&gt; 
&lt;p&gt;Previews of links will not be shown if:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;link previews for &lt;code&gt;github.com&lt;/code&gt; have been &lt;a href=&quot;https://get.slack.help/hc/en-us/articles/204399343-Share-links-in-Slack#turn-off-link-previews-for-specific-sites&quot;&gt;disabled for your workspace&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;the same link was already shared in the last 30 minutes in the same channel&lt;/li&gt; 
 &lt;li&gt;3 or more links are shared in the same chat message&lt;/li&gt; 
 &lt;li&gt;The repository is private and the user that shared the link: 
  &lt;ul&gt; 
   &lt;li&gt;has not signed in to their GitHub account&lt;/li&gt; 
   &lt;li&gt;asked not to show a preview when prompted&lt;/li&gt; 
   &lt;li&gt;the GitHub app is not in the channel, which you can remedy with &lt;code&gt;/invite @github&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Take action&lt;/h4&gt; 
&lt;p&gt;Slack conversations often lead to decisions and actionable takeaways. Now it‚Äôs easier to start on next steps from Slack with slash commands for common GitHub actions, using &lt;code&gt;/github [action] [resource]&lt;/code&gt;. These commands let you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Close an issue or pull request with &lt;code&gt;/github close [issue link]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Reopen an issue or pull request with &lt;code&gt;/github open [pull request link]&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Open a new issue with &lt;code&gt;/github open [owner/repo]&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also take action on GitHub directly from a Slack message by clicking on the &#39;&lt;code&gt;...&lt;/code&gt; More Actions&#39; menu available on every Slack message. From there you can:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Attach a message as a comment to an existing issue or pull request 
  &lt;ul&gt; 
   &lt;li&gt;Select an issue by choosing from an automatically loaded list of recently active issues and pull requests that involve you or by entering a URL to an issue or pull request&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Configuration&lt;/h3&gt; 
&lt;p&gt;You can customize your notifications by subscribing to activity that is relevant to your Slack channel, and unsubscribing from activity that is less helpful to your project.&lt;/p&gt; 
&lt;p&gt;Settings are configured with the &lt;code&gt;/github&lt;/code&gt; slash command:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/github subscribe owner/repo [feature]
/github unsubscribe owner/repo [feature]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These are enabled by default, and can be disabled with the &lt;code&gt;/github unsubscribe owner/repo [feature]&lt;/code&gt; command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;issues&lt;/code&gt; - Opened or closed issues&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pulls&lt;/code&gt; - New or merged pull requests, as well as draft pull requests marked &quot;Ready for Review&quot;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;commits&lt;/code&gt; - New commits on the default branch (usually &lt;code&gt;master&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;releases&lt;/code&gt; - Published releases&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These are disabled by default, and can be enabled with the &lt;code&gt;/github subscribe owner/repo [feature]&lt;/code&gt; command:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;reviews&lt;/code&gt; - Pull request reviews&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;comments&lt;/code&gt; - New comments on issues and pull requests&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;branches&lt;/code&gt; - Created or deleted branches&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;commits:*&lt;/code&gt; - All commits pushed to any branch&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;+label:&quot;your label&quot;&lt;/code&gt; - Filter issues, pull-requests and comments based on their labels.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can subscribe or unsubscribe from multiple settings at once. For example, to turn on activity for pull request reviews and comments:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/github subscribe owner/repo reviews comments
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And to turn it back off:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/github unsubscribe owner/repo reviews comments
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Filters&lt;/h4&gt; 
&lt;h5&gt;Branch filters for commit&lt;/h5&gt; 
&lt;p&gt;Branch filters allow filtering commit notifications. By default when you subscribe for commits feature, you will get notifications for your default branch (i.e. main). However, you can choose to filter on a specific branch, or a pattern of branches or all branches.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;/github subscribe org/repo commits&lt;/code&gt; for commit notifications from a default branch.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/github subscribe org/repo commits:*&lt;/code&gt; for commit notifications across all the branches.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/github subscribe org/repo commits:myBranch&lt;/code&gt; for commit notifications from a specific branch.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;/github subscribe org/repo commits:users/*&lt;/code&gt; for commit notifications from a pattern of branches.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can unsubscribe commits feature using `@github unsubscribe org/repo commits.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Previously we you might have used &lt;code&gt;commits:all&lt;/code&gt; to represent all branches. &#39;all&#39; is no longer a reserved keyword. Going forward, you need to use &#39;*&#39; to represent all branches. If you have already configured with &#39;commits:all&#39; previosly, dont worry, it will continue to work until you update the commits configuration.&lt;/p&gt; 
&lt;h5&gt;Label filters for prs and issues&lt;/h5&gt; 
&lt;p&gt;Label filters allow filtering incoming events based on a whitelist of &lt;strong&gt;required&lt;/strong&gt; labels.&lt;/p&gt; 
&lt;p&gt;This is an overview of the event types that are affected by the required-label filter.&lt;/p&gt; 
&lt;p&gt;| Event | Is filtered | | ---------------------- | ----------------- | | Pull | ‚úÖ Yes | | Comment (PR and Issue) | ‚úÖ Yes | | Issue | ‚úÖ Yes | | Review | ‚úÖ Yes | | Commit/Push | ‚ùå No | | Branch | ‚ùå No |&lt;/p&gt; 
&lt;h5&gt;Creating a filter&lt;/h5&gt; 
&lt;p&gt;Create a filter with:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/github subscribe owner/repo +label:priority:HIGH
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This creates a required-label filter with the value &lt;code&gt;priority:HIGH&lt;/code&gt;. Incoming events that support filters discarded unless they have that label.&lt;/p&gt; 
&lt;h5&gt;Updating a filter&lt;/h5&gt; 
&lt;p&gt;To update the exiting filter just enter a new one, the old one will be updated. Currently, we only support having one filter. Multiple filters might be supported in the future.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/github subscribe owner/repo +label:&quot;teams/designers&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now the exiting filter &lt;code&gt;priority:HIGH&lt;/code&gt; has been replaced by &lt;code&gt;teams/designers&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Removing filters&lt;/h5&gt; 
&lt;p&gt;Removing a filter is available via &lt;code&gt;unsubscribe&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/github unsubscribe owner/repo +label:teams/designers
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This removes the &lt;code&gt;priority:HIGH&lt;/code&gt; filter.&lt;/p&gt; 
&lt;h5&gt;Listing filters&lt;/h5&gt; 
&lt;p&gt;To see the currently active filters use&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;/github subscribe list features
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Valid filters&lt;/h5&gt; 
&lt;p&gt;It is common to have certain special characters in labels. Therefore we added support for the most common special characters for label filters. Here a few examples:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;label:priority:HIGH&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;label:teams/designers&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;label:&quot;DO NOT MERGE&quot;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;label:&quot;very important&quot;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;label:&quot;:construction: WIP&quot;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Most labels will work seamlessly, this includes all emojis that slack and github provide out of the box. However in the following rare circumstances you might run into difficulties:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Multibyte characters that are not encoded as &lt;code&gt;:foo:&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;,&lt;/code&gt; is reserved&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Moving away from the legacy workspace app model in Slack&lt;/h3&gt; 
&lt;p&gt;You need to update your GitHub app if you have installed the GitHub Slack integration in your workspace before &lt;strong&gt;April 09, 2021&lt;/strong&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;1. Why do I need to upgrade?&lt;/h4&gt; 
&lt;p&gt;Previous GitHub integration for Slack is built on top of Slack&#39;s &lt;a href=&quot;https://api.slack.com/legacy/workspace-apps&quot;&gt;workspace apps&lt;/a&gt;. Unfortunately, Slack deprecated the workspace apps. More details about the announcement can be found on the &lt;a href=&quot;https://api.slack.com/changelog/2021-03-workspace-apps-to-retire-in-august-2021&quot;&gt;Slack documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our workspace app relies on Slack APIs that are now deprecated and will be retired soon. We now need to move to Slack&#39;s newly supported bot app framework.&lt;/p&gt; 
&lt;h4&gt;2. How do I upgrade?&lt;/h4&gt; 
&lt;p&gt;You can upgrade the GitHub app in two ways.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;By installing the new GitHub app from the Marketplace or click on the install link &lt;a href=&quot;https://slack.github.com/&quot;&gt;here&lt;/a&gt;. We will automatically detect and update the old app and migrate your subscriptions.&lt;/li&gt; 
 &lt;li&gt;If you are on the old app, you will start receiving alerts in your channels to update. The old app will be upgraded, and you will get a confirmation message once the upgrade is completed. Also, a message will be posted in all your channels once all your subscriptions are successfully migrated.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;3. What changes after the upgrade?&lt;/h4&gt; 
&lt;p&gt;No change in the way our GitHub app for Slack works. Once you upgrade, we will migrate all your subscriptions and replace the old legacy GitHub app.&lt;/p&gt; 
&lt;p&gt;In terms of notifications, if you have subscriptions configured only in public Slack channels, everything works seamlessly after the upgrade. However, if you are using GitHub app in private channels, you need to invite the GitHub app to the channel for your subscriptions to work again.&lt;/p&gt; 
&lt;p&gt;Once you upgrade, GitHub will send a message to invite the bot again if you have any private channels.&lt;/p&gt; 
&lt;p&gt;Along with this upgrade, we have also made few changes to the app.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Enhanced security for &lt;strong&gt;sign in&lt;/strong&gt; experience: As part of this upgrade, we have also updated the sign in flow to have a multistep process with verification code. This is necessary to make sign in to GitHub from Slack more secure.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Introduced Branch filters for &lt;strong&gt;commit notifications&lt;/strong&gt;: Commit notifications now support filtering based on branches. You can choose to filter on a specific branch, or a pattern of branches or all branches. You can find more details &lt;a href=&quot;https://github.com/integrations/slack#configuration&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Removed &lt;strong&gt;deploy command and notification&lt;/strong&gt; support: Today, the functionality provided by deploy command is very limited and doesn&#39;t address all the scenarios. We are removing deploy command and notifications support as part of this version. We want to relook at the scenarios and build a more holistic experience that customers need.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Public&lt;/strong&gt; feature i.e. repo notification is always enabled: Going forward, you will not see &#39;Public&#39; in the subscribe features list. However, whenever a change happens to the repo it will be notified in the channels where it is subscribed and user will not have option to disable &#39;public&#39; notifications. Repo is a core entity and when some change happens to the repo that user choose to subscribe, it is the basic info that has to be notified to the user.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;4. When do I need to migrate by?&lt;/h4&gt; 
&lt;p&gt;All your workspaces need to be upgraded by &lt;strong&gt;July 15, 2021&lt;/strong&gt; after which the old version of the app will stop working. If you have any questions or concerns, please reach out to us by logging an issue &lt;a href=&quot;https://github.com/integrations/slack/issues/new/choose&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Questions? Need help?&lt;/h2&gt; 
&lt;p&gt;Please fill out GitHub&#39;s &lt;a href=&quot;https://github.com/contact?form%5Bsubject%5D=Re:+GitHub%2BSlack+Integration&quot;&gt;Support form&lt;/a&gt; and your request will be routed to the right team at GitHub.&lt;/p&gt; 
&lt;h2&gt;~~Contributing~~&lt;/h2&gt; 
&lt;p&gt;We are currently making platform changes and &lt;strong&gt;not&lt;/strong&gt; accepting any contributions to this app. You can raise a feature request from &lt;a href=&quot;https://github.com/integrations/slack/issues/new/choose&quot;&gt;here&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The project is available as open source under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/integrations/slack/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When using the GitHub logos, be sure to follow the &lt;a href=&quot;https://github.com/logos&quot;&gt;GitHub logo guidelines&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rjsf-team/react-jsonschema-form</title>
      <link>https://github.com/rjsf-team/react-jsonschema-form</link>
      <description>&lt;p&gt;A React component for building Web forms from JSON Schema.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/rjsf-team/react-jsonschema-form/actions&quot;&gt;&lt;img src=&quot;https://github.com/rjsf-team/react-jsonschema-form/workflows/CI/badge.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/rjsf-team/react-jsonschema-form/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors/rjsf-team/react-jsonschema-form.svg&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://choosealicense.com/licenses/apache-2.0/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202.0-blue.svg?style=flat-square&quot; alt=&quot;Apache 2.0 License&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://rjsf-team.github.io/react-jsonschema-form/&quot;&gt;&lt;img src=&quot;https://i.imgur.com/M8ZCES5.gif&quot; alt=&quot;playground animation&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Supported Themes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rjsf-team/react-jsonschema-form/tree/master/packages/antd&quot;&gt;Ant Design&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rjsf-team/react-jsonschema-form/tree/master/packages/core&quot;&gt;Bootstrap 3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rjsf-team/react-jsonschema-form/tree/master/packages/bootstrap-4&quot;&gt;Bootstrap 4&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rjsf-team/react-jsonschema-form/tree/master/packages/fluent-ui&quot;&gt;Fluent UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rjsf-team/react-jsonschema-form/tree/master/packages/material-ui&quot;&gt;Material UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rjsf-team/react-jsonschema-form/tree/master/packages/semantic-ui&quot;&gt;Semantic UI&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://react-jsonschema-form.readthedocs.io/en/latest/&quot;&gt;documentation&lt;/a&gt; on Read the Docs.&lt;/p&gt; 
&lt;h2&gt;Live Playground&lt;/h2&gt; 
&lt;p&gt;A &lt;a href=&quot;https://rjsf-team.github.io/react-jsonschema-form/&quot;&gt;live playground&lt;/a&gt; is hosted on gh-pages.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://react-jsonschema-form.readthedocs.io/en/latest/contributing/&quot;&gt;contributors&#39; guide&lt;/a&gt; to get started.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;Testing powered by BrowserStack
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>electerm/electerm</title>
      <link>https://github.com/electerm/electerm</link>
      <description>&lt;p&gt;üìªTerminal/ssh/sftp client(linux, mac, win)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;electerm&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/electerm/electerm/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/electerm/electerm/all.svg&quot; alt=&quot;GitHub version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/electerm/electerm/actions&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fatrox%2Fsync-dotenv%2Fbadge&quot; alt=&quot;GitHub Actions&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/electerm/electerm/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/electerm/electerm.svg&quot; alt=&quot;license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://standardjs.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code_style-standard-brightgreen.svg&quot; alt=&quot;JavaScript Style Guide&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://snapcraft.io/electerm&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Snap-Store-green&quot; alt=&quot;Get it from the Snap Store&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Terminal/ssh/sftp client(linux, mac, win) based on electron/ssh2/node-pty/xterm/antd/&lt;a href=&quot;https://github.com/tylerlong/subx&quot;&gt;subx&lt;/a&gt; and other libs.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Download/install&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://electerm.github.io/electerm&quot;&gt;https://electerm.github.io/electerm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;From release: &lt;a href=&quot;https://github.com/electerm/electerm/releases&quot;&gt;https://github.com/electerm/electerm/releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For some linux OS, rpm pack may not work, you can try the &lt;code&gt;.snap&lt;/code&gt; release.&lt;/li&gt; 
 &lt;li&gt;For Mac user: &lt;code&gt;brew install --cask electerm&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;With snap: &lt;code&gt;sudo snap install electerm&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;For Deepin Linux user, you can find it from App store.&lt;/li&gt; 
 &lt;li&gt;For Windows users, command-line installer &lt;a href=&quot;https://github.com/lukesampson/scoop&quot;&gt;scoop&lt;/a&gt; is recommended:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;scoop bucket add dorado https://github.com/chawyehsu/dorado
scoop install dorado/electerm
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install from npm&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g electerm

# after install it will open at once for windows and linux,
# for mac, will open the drag to install panel

&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Upgrade&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Auto upgrade: When new version released, you will get upgrade notification after you start electerm again, then you click the upgrade button to upgrade.&lt;/li&gt; 
 &lt;li&gt;Download: Just download the latest edition, reinstall.&lt;/li&gt; 
 &lt;li&gt;Npm: If you install from npm, just run &lt;code&gt;npm i -g electerm&lt;/code&gt; again.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Work as a terminal/file manager or ssh/sftp client(similar to xshell)&lt;/li&gt; 
 &lt;li&gt;Global hotkey to toggle window visibility (simliar to guake, default is &lt;code&gt;ctrl + 2&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Multi platform(linux, mac, win)&lt;/li&gt; 
 &lt;li&gt;üá∫üá∏ üá®üá≥ üáßüá∑ üá∑üá∫ üá™üá∏ üá´üá∑ üáπüá∑ üá≠üá∞ üáØüáµ Support multi-language(&lt;a href=&quot;https://github.com/electerm/electerm-locales&quot;&gt;electerm-locales&lt;/a&gt;, contribute/fix welcome)&lt;/li&gt; 
 &lt;li&gt;Double click to directly edit remote file(small ones).&lt;/li&gt; 
 &lt;li&gt;Edit local file with built-in editor(small ones).&lt;/li&gt; 
 &lt;li&gt;Auth with publickey + password.&lt;/li&gt; 
 &lt;li&gt;Zmodem(rz, sz).&lt;/li&gt; 
 &lt;li&gt;Transparent window(Mac, win).&lt;/li&gt; 
 &lt;li&gt;Terminal background image.&lt;/li&gt; 
 &lt;li&gt;Global/session proxy.&lt;/li&gt; 
 &lt;li&gt;Quick commands&lt;/li&gt; 
 &lt;li&gt;Sync bookmarks/themes/quick commands to github/gitee secret gist&lt;/li&gt; 
 &lt;li&gt;~~Serial Port support~~(removed after version 1.10.14)&lt;/li&gt; 
 &lt;li&gt;Quick input to one or all terminal&lt;/li&gt; 
 &lt;li&gt;Command line usage: check &lt;a href=&quot;https://github.com/electerm/electerm/wiki/Command-line-usage&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Known issues&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/electerm/electerm/wiki/Know-issues&quot;&gt;https://github.com/electerm/electerm/wiki/Know-issues&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Troubleshoot&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/electerm/electerm/wiki/Troubleshoot&quot;&gt;https://github.com/electerm/electerm/wiki/Troubleshoot&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Without users&#39;s feedbacks/suggestions/pull requests/language files, this project would not get this far, would love to hear from you, please tell me what you think, &lt;a href=&quot;https://github.com/electerm/electerm/issues&quot;&gt;submit an issue&lt;/a&gt;, &lt;a href=&quot;mailto:zxdong@gmail.com&quot;&gt;send me an email&lt;/a&gt;, &lt;a href=&quot;https://github.com/electerm/electerm-locales&quot;&gt;create/fix language files&lt;/a&gt; or create a pull requests, all welcome.&lt;/p&gt; 
&lt;h2&gt;Dev&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# tested in ubuntu16.04+/mac os 10.13+ only
# need nodejs/npm, suggest using nvm to install nodejs/npm
# https://github.com/creationix/nvm
# with node 8.6+

git clone git@github.com:electerm/electerm.git
cd electerm
npm i

# start webpack dev server, requires 5570 port
npm start

# in a separate terminal session run app
npm run app

# code format check
npm run lint

# code format fix
npm run fix
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Test&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run pre-test
cp .sample.env .env
# then edit .env, fill your test host/username/password
npm run test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Test build&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Tested only in ubuntu 16.04 x64+
# Install yarn first(to do yarn autoclean)
# See https://yarnpkg.com/en/docs/install

# Build linux only with -l
npm i
npm run pre-test
npm run release -l
# visit dist/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Use&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/electerm/electerm/wiki/autorun-electerm-when-login-to-os&quot;&gt;Set autorun when login to os&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Change log&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://github.com/electerm/electerm/releases&quot;&gt;Releases&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>visgl/deck.gl</title>
      <link>https://github.com/visgl/deck.gl</link>
      <description>&lt;p&gt;WebGL2 powered geospatial visualization layers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://visgl.github.io/deck.gl&quot;&gt;&lt;img src=&quot;http://i.imgur.com/mvfvgf0.jpg&quot; alt=&quot;docs&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;deck.gl is designed to simplify high-performance, WebGL-based visualization of large data sets. Users can quickly get impressive visual results with minimal effort by composing existing layers, or leverage deck.gl&#39;s extensible architecture to address custom needs.&lt;/p&gt; 
&lt;p&gt;deck.gl maps &lt;strong&gt;data&lt;/strong&gt; (usually an array of JSON objects) into a stack of visual &lt;strong&gt;layers&lt;/strong&gt; - e.g. icons, polygons, texts; and look at them with &lt;strong&gt;views&lt;/strong&gt;: e.g. map, first-person, orthographic.&lt;/p&gt; 
&lt;p&gt;deck.gl handles a number of challenges out of the box:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Performant rendering and updating of large data sets&lt;/li&gt; 
 &lt;li&gt;Interactive event handling such as picking, highlighting and filtering&lt;/li&gt; 
 &lt;li&gt;Cartographic projections and integration with major basemap providers&lt;/li&gt; 
 &lt;li&gt;A catalog of proven, well-tested layers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Deck.gl is designed to be highly customizable. All layers come with flexible APIs to allow programmatic control of each aspect of the rendering. All core classes such are easily extendable by the users to address custom use cases.&lt;/p&gt; 
&lt;h2&gt;Flavors&lt;/h2&gt; 
&lt;h3&gt;Script Tag&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://unpkg.com/deck.gl@latest/dist.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/visgl/deck.gl/master/docs/get-started/using-standalone.md#using-the-scripting-api&quot;&gt;Get started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/visgl/deck.gl/tree/master/examples/get-started/scripting&quot;&gt;Full examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;NPM Module&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install deck.gl
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Pure JS&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/visgl/deck.gl/master/docs/get-started/using-standalone.md&quot;&gt;Get started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/visgl/deck.gl/master/examples/get-started/pure-js&quot;&gt;Full examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;React&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/visgl/deck.gl/master/docs/get-started/using-with-react.md&quot;&gt;Get started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/visgl/deck.gl/master/examples/get-started/react&quot;&gt;Full examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Python&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pip install pydeck
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pydeck.gl/installation.html&quot;&gt;Get started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pydeck.gl/&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Third-Party Bindings&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danmarshall/deckgl-typings&quot;&gt;deckgl-typings&lt;/a&gt; (Typescript)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://symbolixau.github.io/mapdeck/articles/mapdeck.html&quot;&gt;mapdeck&lt;/a&gt; (R)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/SandDance/tree/master/packages/vega-deck.gl&quot;&gt;vega-deck.gl&lt;/a&gt; (&lt;a href=&quot;https://vega.github.io/&quot;&gt;Vega&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://earthengine-layers.com/&quot;&gt;earthengine-layers&lt;/a&gt; (&lt;a href=&quot;https://earthengine.google.com/&quot;&gt;Google Earth Engine&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UnfoldedInc/deck.gl-native&quot;&gt;deck.gl-native&lt;/a&gt; (C++)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Learning Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://deck.gl/#/documentation&quot;&gt;API documentation&lt;/a&gt; for the latest release&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://deck.gl/#/examples&quot;&gt;Website demos&lt;/a&gt; with links to source&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://deck.gl/playground&quot;&gt;Interactive playground&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codepen.io/vis-gl/&quot;&gt;deck.gl Codepen demos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://beta.observablehq.com/@pessimistress&quot;&gt;deck.gl Observable demos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/vis-gl&quot;&gt;vis.gl Medium blog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://join.slack.com/t/deckgl/shared_invite/zt-7oeoqie8-NQqzSp5SLTFMDeNSPxi7eg&quot;&gt;deck.gl Slack workspace&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;deck.gl is part of vis.gl, a &lt;a href=&quot;https://uc.foundation/&quot;&gt;Urban Computing Foundation&lt;/a&gt; project. Read the &lt;a href=&quot;https://raw.githubusercontent.com/visgl/deck.gl/master/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt; if you are intrested in contributing.&lt;/p&gt; 
&lt;h2&gt;Attributions&lt;/h2&gt; 
&lt;h4&gt;Data sources&lt;/h4&gt; 
&lt;p&gt;Data sources are listed in each example.&lt;/p&gt; 
&lt;h4&gt;The deck.gl project is supported by&lt;/h4&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>jquery-form/form</title>
      <link>https://github.com/jquery-form/form</link>
      <description>&lt;p&gt;jQuery Form Plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jQuery Form &lt;a href=&quot;https://travis-ci.org/jquery-form/form&quot;&gt;&lt;img src=&quot;https://travis-ci.org/jquery-form/form.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;The jQuery Form Plugin allows you to easily and unobtrusively upgrade HTML forms to use AJAX. The main methods, ajaxForm and ajaxSubmit, gather information from the form element to determine how to manage the submit process. Both of these methods support numerous options which allow you to have full control over how the data is submitted.&lt;/p&gt; 
&lt;p&gt;No special markup is needed, just a normal form. Submitting a form with AJAX doesn&#39;t get any easier than this!&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Want to contribute to jQuery Form? Awesome! See &lt;a href=&quot;https://raw.githubusercontent.com/jquery-form/form/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h3&gt;Code of Conduct&lt;/h3&gt; 
&lt;p&gt;Please note that this project is released with a &lt;a href=&quot;https://raw.githubusercontent.com/jquery-form/form/master/CODE_OF_CONDUCT.md&quot;&gt;Contributor Code of Conduct&lt;/a&gt; to ensure that this project is a welcoming place for &lt;strong&gt;everyone&lt;/strong&gt; to contribute to. By participating in this project you agree to abide by its terms.&lt;/p&gt; 
&lt;h3&gt;Pull Requests Needed&lt;/h3&gt; 
&lt;h4&gt;Enhancements needed to to be fully compatible with jQuery 3&lt;/h4&gt; 
&lt;p&gt;jQuery 3 is removing a lot of features that have been deprecated for a long time. Some of these are still in use by jQuery Form.&lt;br&gt; Pull requests and assistance in updating jQuery Form to be compatible with jQuery 3 are greatly appreciated.&lt;br&gt; See &lt;a href=&quot;https://github.com/jquery-form/form/issues/544&quot;&gt;issue #544&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Requires jQuery 1.7.2 or later.&lt;/li&gt; 
 &lt;li&gt;Compatible with jQuery 2.&lt;/li&gt; 
 &lt;li&gt;Partially compatible with jQuery 3.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Not&lt;/strong&gt; compatible with jQuery 3 Slim. (&lt;a href=&quot;https://github.com/jquery-form/form/issues/544&quot;&gt;issue #544&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Development:&lt;/strong&gt; &lt;a href=&quot;https://github.com/jquery-form/form/blob/master/src/jquery.form.js&quot;&gt;src/jquery.form.js &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Production/Minified:&lt;/strong&gt; &lt;a href=&quot;https://github.com/jquery-form/form/blob/master/dist/jquery.form.min.js&quot;&gt;dist/jquery.form.min.js &lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;CDN&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.3.0/jquery.form.min.js&quot; integrity=&quot;sha384-qlmct0AOBiA2VPZkMY3+2WqkHtIQ9lSdAsAn5RUJD/3vA5MKDgSGcdmIv4ycVxyn&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/gh/jquery-form/form@4.3.0/dist/jquery.form.min.js&quot; integrity=&quot;sha384-qlmct0AOBiA2VPZkMY3+2WqkHtIQ9lSdAsAn5RUJD/3vA5MKDgSGcdmIv4ycVxyn&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;jqXHR&lt;/h3&gt; 
&lt;p&gt;The jqXHR object is stored in element 
 &lt;!-- raw HTML omitted --&gt;data
 &lt;!-- raw HTML omitted --&gt;-cache with the 
 &lt;!-- raw HTML omitted --&gt;jqxhr
 &lt;!-- raw HTML omitted --&gt; key after each 
 &lt;!-- raw HTML omitted --&gt;ajaxSubmit
 &lt;!-- raw HTML omitted --&gt; call. It can be accessed like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var form = $(&#39;#myForm&#39;).ajaxSubmit({ /* options */ });
var xhr = form.data(&#39;jqxhr&#39;);

xhr.done(function() {
...
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ajaxForm( options )&lt;/h3&gt; 
&lt;p&gt;Prepares a form to be submitted via AJAX by adding all of the necessary event listeners. It does &lt;strong&gt;not&lt;/strong&gt; submit the form. Use &lt;code&gt;ajaxForm&lt;/code&gt; in your document&#39;s &lt;code&gt;ready&lt;/code&gt; function to prepare existing forms for AJAX submission, or with the &lt;code&gt;delegation&lt;/code&gt; option to handle forms not yet added to the DOM.&lt;br&gt; Use ajaxForm when you want the plugin to manage all the event binding for you.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// prepare all forms for ajax submission
$(&#39;form&#39;).ajaxForm({
    target: &#39;#myResultsDiv&#39;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ajaxSubmit( options )&lt;/h3&gt; 
&lt;p&gt;Immediately submits the form via AJAX. In the most common use case this is invoked in response to the user clicking a submit button on the form. Use ajaxSubmit if you want to bind your own submit handler to the form.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// bind submit handler to form
$(&#39;form&#39;).on(&#39;submit&#39;, function(e) {
    e.preventDefault(); // prevent native submit
    $(this).ajaxSubmit({
        target: &#39;#myResultsDiv&#39;
    })
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All standard &lt;a href=&quot;http://api.jquery.com/jQuery.ajax&quot;&gt;$.ajax&lt;/a&gt; options can be used.&lt;/p&gt; 
&lt;h3&gt;beforeSerialize&lt;/h3&gt; 
&lt;p&gt;Callback function invoked before form serialization. Provides an opportunity to manipulate the form before its values are retrieved. Returning &lt;code&gt;false&lt;/code&gt; from the callback will prevent the form from being submitted. The callback is invoked with two arguments: the jQuery wrapped form object and the options object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;beforeSerialize: function($form, options) {
    // return false to cancel submit
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;beforeSubmit&lt;/h3&gt; 
&lt;p&gt;Callback function invoked before form submission. Returning &lt;code&gt;false&lt;/code&gt; from the callback will prevent the form from being submitted. The callback is invoked with three arguments: the form data in array format, the jQuery wrapped form object, and the options object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;beforeSubmit: function(arr, $form, options) {
    // form data array is an array of objects with name and value properties
    // [ { name: &#39;username&#39;, value: &#39;jresig&#39; }, { name: &#39;password&#39;, value: &#39;secret&#39; } ]
    // return false to cancel submit
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;beforeFormUnbind&lt;/h3&gt; 
&lt;p&gt;Callback function invoked before form events unbind and bind again. Provides an opportunity to manipulate the form before events will be remounted. The callback is invoked with two arguments: the jQuery wrapped form object and the options object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;beforeFormUnbind: function($form, options) {
    // your callback code
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;filtering&lt;/h3&gt; 
&lt;p&gt;Callback function invoked before processing fields. This provides a way to filter elements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;filtering: function(el, index) {
    if ( !$(el).hasClass(&#39;ignore&#39;) ) {
        return el;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;clearForm&lt;/h3&gt; 
&lt;p&gt;Boolean flag indicating whether the form should be cleared if the submit is successful&lt;/p&gt; 
&lt;h3&gt;data&lt;/h3&gt; 
&lt;p&gt;An object containing extra data that should be submitted along with the form.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;data: { key1: &#39;value1&#39;, key2: &#39;value2&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;dataType&lt;/h3&gt; 
&lt;p&gt;Expected data type of the response. One of: null, &#39;xml&#39;, &#39;script&#39;, or &#39;json&#39;. The dataType option provides a means for specifying how the server response should be handled. This maps directly to jQuery&#39;s dataType method. The following values are supported:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&#39;xml&#39;: server response is treated as XML and the &#39;success&#39; callback method, if specified, will be passed the responseXML value&lt;/li&gt; 
 &lt;li&gt;&#39;json&#39;: server response will be evaluated and passed to the &#39;success&#39; callback, if specified&lt;/li&gt; 
 &lt;li&gt;&#39;script&#39;: server response is evaluated in the global context&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;delegation&lt;/h3&gt; 
&lt;p&gt;true to enable support for event delegation &lt;em&gt;requires jQuery v1.7+&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// prepare all existing and future forms for ajax submission
$(&#39;form&#39;).ajaxForm({
    delegation: true
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;error&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;&lt;br&gt; Callback function to be invoked upon error.&lt;/p&gt; 
&lt;h3&gt;forceSync&lt;/h3&gt; 
&lt;p&gt;Only applicable when explicity using the iframe option or when uploading files on browsers that don&#39;t support XHR2. Set to &lt;code&gt;true&lt;/code&gt; to remove the short delay before posting form when uploading files. The delay is used to allow the browser to render DOM updates before performing a native form submit. This improves usability when displaying notifications to the user, such as &quot;Please Wait...&quot;&lt;/p&gt; 
&lt;h3&gt;iframe&lt;/h3&gt; 
&lt;p&gt;Boolean flag indicating whether the form should &lt;em&gt;always&lt;/em&gt; target the server response to an iframe instead of leveraging XHR when possible.&lt;/p&gt; 
&lt;h3&gt;iframeSrc&lt;/h3&gt; 
&lt;p&gt;String value that should be used for the iframe&#39;s src attribute when an iframe is used.&lt;/p&gt; 
&lt;h3&gt;iframeTarget&lt;/h3&gt; 
&lt;p&gt;Identifies the iframe element to be used as the response target for file uploads. By default, the plugin will create a temporary iframe element to capture the response when uploading files. This option allows you to use an existing iframe if you wish. When using this option the plugin will not attempt handling the response from the server.&lt;/p&gt; 
&lt;h3&gt;method&lt;/h3&gt; 
&lt;p&gt;The HTTP method to use for the request (e.g. &#39;POST&#39;, &#39;GET&#39;, &#39;PUT&#39;).&lt;/p&gt; 
&lt;h3&gt;replaceTarget&lt;/h3&gt; 
&lt;p&gt;Optionally used along with the target option. Set to true if the target should be replaced or false if only the target contents should be replaced.&lt;/p&gt; 
&lt;h3&gt;resetForm&lt;/h3&gt; 
&lt;p&gt;Boolean flag indicating whether the form should be reset if the submit is successful&lt;/p&gt; 
&lt;h3&gt;semantic&lt;/h3&gt; 
&lt;p&gt;Boolean flag indicating whether data must be submitted in strict semantic order (slower). Note that the normal form serialization is done in semantic order except for input elements of &lt;code&gt;type=&quot;image&quot;&lt;/code&gt;. You should only set the semantic option to true if your server has strict semantic requirements and your form contains an input element of &lt;code&gt;type=&quot;image&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;success&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Deprecated&lt;/strong&gt;&lt;br&gt; Callback function to be invoked after the form has been submitted. If a &#39;success&#39; callback function is provided it is invoked after the response has been returned from the server. It is passed the following standard jQuery arguments:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;code&gt;data&lt;/code&gt;, formatted according to the dataType parameter or the dataFilter callback function, if specified&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;textStatus&lt;/code&gt;, string&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;jqXHR&lt;/code&gt;, object&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$form&lt;/code&gt; jQuery object containing form element&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;target&lt;/h3&gt; 
&lt;p&gt;Identifies the element(s) in the page to be updated with the server response. This value may be specified as a jQuery selection string, a jQuery object, or a DOM element.&lt;/p&gt; 
&lt;h3&gt;type&lt;/h3&gt; 
&lt;p&gt;The HTTP method to use for the request (e.g. &#39;POST&#39;, &#39;GET&#39;, &#39;PUT&#39;).&lt;br&gt; An alias for &lt;code&gt;method&lt;/code&gt; option. Overridden by the &lt;code&gt;method&lt;/code&gt; value if both are present.&lt;/p&gt; 
&lt;h3&gt;uploadProgress&lt;/h3&gt; 
&lt;p&gt;Callback function to be invoked with upload progress information (if supported by the browser). The callback is passed the following arguments:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;event; the browser event&lt;/li&gt; 
 &lt;li&gt;position (integer)&lt;/li&gt; 
 &lt;li&gt;total (integer)&lt;/li&gt; 
 &lt;li&gt;percentComplete (integer)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;url&lt;/h3&gt; 
&lt;p&gt;URL to which the form data will be submitted.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Utility Methods&lt;/h2&gt; 
&lt;h3&gt;formSerialize&lt;/h3&gt; 
&lt;p&gt;Serializes the form into a query string. This method will return a string in the format: &lt;code&gt;name1=value1&amp;amp;name2=value2&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var queryString = $(&#39;#myFormId&#39;).formSerialize();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;fieldSerialize&lt;/h3&gt; 
&lt;p&gt;Serializes field elements into a query string. This is handy when you need to serialize only part of a form. This method will return a string in the format: &lt;code&gt;name1=value1&amp;amp;name2=value2&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var queryString = $(&#39;#myFormId .specialFields&#39;).fieldSerialize();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;fieldValue&lt;/h3&gt; 
&lt;p&gt;Returns the value(s) of the element(s) in the matched set in an array. This method always returns an array. If no valid value can be determined the array will be empty, otherwise it will contain one or more values.&lt;/p&gt; 
&lt;h3&gt;resetForm&lt;/h3&gt; 
&lt;p&gt;Resets the form to its original state by invoking the form element&#39;s native DOM method.&lt;/p&gt; 
&lt;h3&gt;clearForm&lt;/h3&gt; 
&lt;p&gt;Clears the form elements. This method empties all of the text inputs, password inputs and textarea elements, clears the selection in any select elements, and unchecks all radio and checkbox inputs. It does &lt;em&gt;not&lt;/em&gt; clear hidden field values.&lt;/p&gt; 
&lt;h3&gt;clearFields&lt;/h3&gt; 
&lt;p&gt;Clears selected field elements. This is handy when you need to clear only a part of the form.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;File Uploads&lt;/h2&gt; 
&lt;p&gt;The Form Plugin supports the use of &lt;a href=&quot;https://raw.githubusercontent.com/jquery-form/form/master/%22http://www.w3.org/TR/XMLHttpRequest/%22&quot;&gt;XMLHttpRequest Level 2&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en/XMLHttpRequest/FormData&quot;&gt;FormData&lt;/a&gt; objects on browsers that support these features. As of today (March 2012) that includes Chrome, Safari, and Firefox. On these browsers (and future Opera and IE10) files uploads will occur seamlessly through the XHR object and progress updates are available as the upload proceeds. For older browsers, a fallback technology is used which involves iframes. &lt;a href=&quot;http://malsup.com/jquery/form/#file-upload&quot;&gt;More Info&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;This project has transferred from &lt;a href=&quot;https://github.com/malsup/form/&quot;&gt;github.com/malsup/form&lt;/a&gt;, courtesy of &lt;a href=&quot;https://github.com/malsup&quot;&gt;Mike Alsup&lt;/a&gt;.&lt;br&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/jquery-form/form/master/CONTRIBUTORS.md&quot;&gt;CONTRIBUTORS&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is dual-licensed under the LGPLv2.1 (or later) or MIT licenses:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jquery-form/form/master/LICENSE&quot;&gt;GNU Lesser General Public License v2.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jquery-form/form/master/LICENSE-MIT&quot;&gt;MIT&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;Additional documentation and examples for version 3.51- at: &lt;a href=&quot;http://malsup.com/jquery/form/&quot;&gt;http://malsup.com/jquery/form/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jamiebuilds/the-super-tiny-compiler</title>
      <link>https://github.com/jamiebuilds/the-super-tiny-compiler</link>
      <description>&lt;p&gt;‚õÑ Possibly the smallest compiler ever&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jamiebuilds/the-super-tiny-compiler/master/the-super-tiny-compiler.js&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/952783/21579290/5755288a-cf75-11e6-90e0-029529a44a38.png&quot; alt=&quot;The Super Tiny Compiler&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Welcome to The Super Tiny Compiler!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;This is an ultra-simplified example of all the major pieces of a modern compiler written in easy to read JavaScript.&lt;/p&gt; 
&lt;p&gt;Reading through the guided code will help you learn about how &lt;em&gt;most&lt;/em&gt; compilers work from end to end.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jamiebuilds/the-super-tiny-compiler/master/the-super-tiny-compiler.js&quot;&gt;Want to jump into the code? Click here&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;&lt;a href=&quot;https://the-super-tiny-compiler.glitch.me/&quot;&gt;You can also check it out on Glitch&lt;/a&gt;&lt;/h3&gt; 
&lt;hr&gt; 
&lt;h3&gt;Why should I care?&lt;/h3&gt; 
&lt;p&gt;That&#39;s fair, most people don&#39;t really have to think about compilers in their day jobs. However, compilers are all around you, tons of the tools you use are based on concepts borrowed from compilers.&lt;/p&gt; 
&lt;h3&gt;But compilers are scary!&lt;/h3&gt; 
&lt;p&gt;Yes, they are. But that&#39;s our fault (the people who write compilers), we&#39;ve taken something that is reasonably straightforward and made it so scary that most think of it as this totally unapproachable thing that only the nerdiest of the nerds are able to understand.&lt;/p&gt; 
&lt;h3&gt;Okay so where do I begin?&lt;/h3&gt; 
&lt;p&gt;Awesome! Head on over to the &lt;a href=&quot;https://raw.githubusercontent.com/jamiebuilds/the-super-tiny-compiler/master/the-super-tiny-compiler.js&quot;&gt;the-super-tiny-compiler.js&lt;/a&gt; file.&lt;/p&gt; 
&lt;h3&gt;I&#39;m back, that didn&#39;t make sense&lt;/h3&gt; 
&lt;p&gt;Ouch, I&#39;m really sorry. Let me know how it can be improved.&lt;/p&gt; 
&lt;h3&gt;Tests&lt;/h3&gt; 
&lt;p&gt;Run with &lt;code&gt;node test.js&lt;/code&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;a href=&quot;http://creativecommons.org/licenses/by/4.0/&quot;&gt;&lt;img src=&quot;https://licensebuttons.net/l/by/4.0/80x15.png&quot; alt=&quot;cc-by-4.0&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>module-federation/module-federation-examples</title>
      <link>https://github.com/module-federation/module-federation-examples</link>
      <description>&lt;p&gt;Implementation examples of module federation , by the creators of module federation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Module Federation Examples&lt;/h1&gt; 
&lt;p&gt;This repository is to showcase examples on Webpack 5&#39;s new Module Federation can be used.&lt;/p&gt; 
&lt;p&gt;| If you need &lt;strong&gt;support&lt;/strong&gt;, consider looking at my sponsor profile &lt;a href=&quot;https://module-federation.github.io/redirect?utm_source=ModuleFederationExamples&amp;amp;utm_medium=https://github.com/sponsors/ScriptedAlchemy&amp;amp;utm_campaign=sponsor_link&quot;&gt;https://github.com/sponsors/ScriptedAlchemy&lt;/a&gt; | For companies that require consultations, contact me on twitter or email (on github profile) | |----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | &lt;strong&gt;Youtube Screencasts&lt;/strong&gt; | &lt;a href=&quot;https://module-federation.github.io/redirect?utm_source=ModuleFederationExamples&amp;amp;utm_medium=https%3A%2F%2Fwww.youtube.com%2Fplaylist%3Flist%3DPLWSiF9YHHK-DqsFHGYbeAMwbd9xcZbEWJ&amp;amp;utm_campaign=youtube_playlist&quot;&gt;https://www.youtube.com/playlist?list=PLWSiF9YHHK-DqsFHGYbeAMwbd9xcZbEWJ&lt;/a&gt; | | &lt;strong&gt;Info site&lt;/strong&gt; | &lt;a href=&quot;https://module-federation.github.io/redirect?utm_source=ModuleFederationExamples&amp;amp;utm_campaign=github_pages&amp;amp;utm_medium=https://module-federation.github.io/&quot;&gt;https://module-federation.github.io/&lt;/a&gt; | | &lt;strong&gt;Official Docs&lt;/strong&gt; | &lt;a href=&quot;https://module-federation.github.io/redirect?utm_source=ModuleFederationExamples&amp;amp;utm_campaign=webpack_docs&amp;amp;utm_medium=https://webpack.js.org/concepts/module-federation&quot;&gt;https://webpack.js.org/concepts/module-federation&lt;/a&gt; | | &lt;strong&gt;Original Webpack Issue&lt;/strong&gt; | &lt;a href=&quot;https://module-federation.github.io/redirect?utm_source=ModuleFederationExamples&amp;amp;utm_campaign=merge_proposal_issue&amp;amp;utm_medium=https://github.com/webpack/webpack/issues/10352&quot;&gt;https://github.com/webpack/webpack/issues/10352&lt;/a&gt; | | &lt;strong&gt;Medium post&lt;/strong&gt; | &lt;a href=&quot;https://cb.run/fd40&quot;&gt;https://link.medium.com/xzFgBBtAx6&lt;/a&gt; | | &lt;strong&gt;JSNation Presentation&lt;/strong&gt; | &lt;a href=&quot;https://cb.run/N9py&quot;&gt;https://github.com/sokra/slides/blob/master/content/ModuleFederationWebpack5.md&lt;/a&gt; |&lt;/p&gt; 
&lt;h1&gt;Check out our book&lt;/h1&gt; 
&lt;p&gt;| 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt;We will be actively updating this book over the next year as we learn more about best practices and what issues people are running into with Module Federation, as well as with every release of Webpack as it moves towards a release candidate and release. So with your one purchase you are buying a whole year of updates.
 &lt;!-- raw HTML omitted --&gt; | | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |&lt;/p&gt; 
&lt;h1&gt;Consultations&lt;/h1&gt; 
&lt;p&gt;| 
 &lt;!-- raw HTML omitted --&gt;1 Hour group consultation
 &lt;!-- raw HTML omitted --&gt; | $100 | |------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | 
 &lt;!-- raw HTML omitted --&gt;30 Min 1:1 consultation
 &lt;!-- raw HTML omitted --&gt; | $60 | | 
 &lt;!-- raw HTML omitted --&gt;15 Min 1:1 consultation
 &lt;!-- raw HTML omitted --&gt; | $30 | | Bespoke API modifications and hands on code | $300-$500/hr |&lt;/p&gt; 
&lt;h1&gt;Examples&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Legend:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;‚ö†Ô∏è: In Progress/Incomplete&lt;/li&gt; 
  &lt;li&gt;üîí: Depends on proprietary code that isn&#39;t free.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/advanced-api&quot;&gt;Advanced API&lt;/a&gt; ‚Äî showcasing advanced API use, also seen in other examples&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/basic-host-remote/README.md&quot;&gt;Basic Host-Remote&lt;/a&gt; ‚Äî App 1 consumes remote components from App2.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/startup-code/README.md&quot;&gt;Startup Code&lt;/a&gt; ‚Äî Advanced implementation that attaches initialization code to the remote container itself. Useful for dynamically setting publicPath in the remote.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/bi-directional/README.md&quot;&gt;Bi-Directional Hosts&lt;/a&gt; ‚Äî App1 consumes App2 components; App2 consumes App1 components.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/self-healing/README.md&quot;&gt;Self-Healing&lt;/a&gt; ‚Äî Fallback to remote apps vendors if a dependency fails to load.&lt;/li&gt; 
 &lt;li&gt;[x] ‚ö†Ô∏è &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/server-side-rendering/README.md&quot;&gt;Server-Side Rendering&lt;/a&gt; ‚Äî App1 and App2 with SSR (Broken because of @loadable/component - check readme in demo.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/server-side-render-only/README.md&quot;&gt;Server-Side Rendering (simplified)&lt;/a&gt; ‚Äî Less complex boilerplate.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/comprehensive-demo/README.md&quot;&gt;Multi UI Framework Federation&lt;/a&gt; ‚Äî Multiple Apps in different technologies federated.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/dynamic-system-host/README.md&quot;&gt;Dynamic System Host&lt;/a&gt; ‚Äî Swap between remotes at runtime.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/redux-reducer-injection/README.md&quot;&gt;Redux Reducer Injection&lt;/a&gt; ‚Äî Dynamically inject reducers to host store at runtime.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/shared-routes2&quot;&gt;Shared Routes&lt;/a&gt; ‚Äî Compose federated routes for a seamless user experience.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/nested/README.md&quot;&gt;Nested Components&lt;/a&gt; ‚Äî Nested remote components.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/shared-context/README.md&quot;&gt;Share Context Provider&lt;/a&gt; ‚Äî App1 and App2 with shared Context Provider.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/dashboard-example/README.md&quot;&gt;Federation Dashboard Example&lt;/a&gt; ‚Äî Single example implementing &lt;a href=&quot;https://www.npmjs.com/package/@module-federation/dashboard-plugin&quot;&gt;Module Federation Dashboard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[x] üîí &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/streamed-federation/README.md&quot;&gt;Streaming Federated Code&lt;/a&gt; ‚Äî App1 and federated-middleware deploy to s3. App1 then stream&#39;s federated code directly from S3&lt;/li&gt; 
 &lt;li&gt;[x] Non-UI Module&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/shared-routing/README.md&quot;&gt;Routing&lt;/a&gt; ‚Äî An example of sharing router context. Also worth looking at - &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/shared-routes2/README.md&quot;&gt;Routing 2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/version-discrepancy/README.md&quot;&gt;Version Discrepancy&lt;/a&gt; ‚Äî Federated apps depending on different versions of a dependency without side-effects.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/typescript/README.md&quot;&gt;TypeScript&lt;/a&gt; ‚Äî Simple host/remote example using TypeScript.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/angular-universal-ssr/README.md&quot;&gt;Angular Universal&lt;/a&gt; ‚Äî Remote and Host app with SSR, lazy modules and components.&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/nextjs-sidecar/README.md&quot;&gt;NextJS Sidecar Build&lt;/a&gt; ‚Äî Sidecar build to enable module-federation alongside Next codebases&lt;/li&gt; 
 &lt;li&gt;[x] ‚ö†Ô∏è &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/nextjs/README.md&quot;&gt;NextJS&lt;/a&gt; ‚Äî Operation, with workarounds. v10 will support async&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://github.com/manfredsteyer/module-federation-with-angular-dynamic-workflow-designer&quot;&gt;Building A Plugin-based Workflow Designer With Angular and Module Federation&lt;/a&gt; ‚Äî External Example&lt;/li&gt; 
 &lt;li&gt;[x] &lt;a href=&quot;https://raw.githubusercontent.com/module-federation/module-federation-examples/master/vue3-demo/README.md&quot;&gt;Vue.js&lt;/a&gt; ‚Äî Simple host/remote (render function / sfc) example using Vue 3.0.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Notes&lt;/h1&gt; 
&lt;p&gt;To run from a git checkout locally, remove all of the proprietary example directories and then run &lt;code&gt;yarn&lt;/code&gt; at the repo root. You can then run &lt;code&gt;yarn &amp;amp;&amp;amp; yarn start&lt;/code&gt; from any of the non-proprietary examples.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Module federation will work with any type of file that youre able to import, that webpack underestands how to process. It is not a JS only, or react only feature. Images, CSS, JSON, WASM, and anything else can be federated.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>learning-zone/nodejs-interview-questions</title>
      <link>https://github.com/learning-zone/nodejs-interview-questions</link>
      <description>&lt;p&gt;Frequently Asked Node.js Interview Questions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Interview Questions&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Click 
  &lt;!-- raw HTML omitted --&gt; if you like the project. Pull Request are highly appreciated.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/nodejs-api.md&quot;&gt;NodeJS APIs&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;| Sl.No| Questions | |------|------------------| | 01. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-does-the-runtime-environment-mean-in-nodejs&quot;&gt;What does the runtime environment mean in Node.js?&lt;/a&gt;| | 02. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-nodejs&quot;&gt;What is Node.js?&lt;/a&gt;| | 03. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-nodejs-process-model&quot;&gt;What is Node.js Process Model?&lt;/a&gt;| | 04. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-data-types-in-nodejs&quot;&gt;What are the data types in Node.js?&lt;/a&gt;| | 05. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-create-a-simple-server-in-nodejs-that-returns-hello-world&quot;&gt;How to create a simple server in Node.js that returns Hello World?&lt;/a&gt;| | 06. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-do-nodejs-works&quot;&gt;How do Node.js works?&lt;/a&gt;| | 07. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-an-error-first-callback&quot;&gt;What is an error-first callback?&lt;/a&gt;| | 08. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-callback-hell-in-nodejs&quot;&gt;What is callback hell in Node.js?&lt;/a&gt;| | 09. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-promises-in-nodejs&quot;&gt;What are Promises in Node.js?&lt;/a&gt;| | 10. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-tools-can-be-used-to-assure-consistent-style&quot;&gt;What tools can be used to assure consistent style?&lt;/a&gt;| | 11. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-when-should-you-npm-and-when-yarn&quot;&gt;When should you npm and when yarn?&lt;/a&gt;| | 12. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-stub&quot;&gt;What is a stub?&lt;/a&gt;| | 13. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-test-pyramid-how-can-you-implement-it-when-talking-about-http-apis&quot;&gt;What is a test pyramid? How can you implement it when talking about HTTP APIs?&lt;/a&gt;| | 14. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-secure-your-http-cookies-against-xss-attacks&quot;&gt;How can you secure your HTTP cookies against XSS attacks?&lt;/a&gt;| | 15. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-make-sure-your-dependencies-are-safe&quot;&gt;How can you make sure your dependencies are safe?&lt;/a&gt;| | 16. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-event-loop-in-nodejs-and-how-does-it-work&quot;&gt;What is Event loop in Node.js? And How does it work?&lt;/a&gt;| | 17. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-repl-what-purpose-it-is-used-for&quot;&gt;What is REPL? What purpose it is used for?&lt;/a&gt;| | 18. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-asynchronous-and-non-blocking&quot;&gt;What is the difference between Asynchronous and Non-blocking?&lt;/a&gt;| | 19. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-debug-an-application-in-nodejs&quot;&gt;How to debug an application in Node.js?&lt;/a&gt;| | 20. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-some-of-the-most-popular-modules-of-nodejs&quot;&gt;What are some of the most popular modules of Node.js?&lt;/a&gt;| | 21. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-eventemitter-in-nodejs&quot;&gt;What is EventEmitter in Node.js?&lt;/a&gt;| | 22. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-many-types-of-streams-are-present-in-nodejs&quot;&gt;How many types of streams are present in node.js?&lt;/a&gt;| | 23. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-crypto-in-nodejs-how-do-you-cipher-the-secure-information-in-nodejs&quot;&gt;What is crypto in Node.js? How do you cipher the secure information in Node.js?&lt;/a&gt;| | 24. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-use-of-dns-module-in-nodejs&quot;&gt;What is the use of DNS module in Node.js?&lt;/a&gt;| | 25. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-security-mechanisms-available-in-nodejs&quot;&gt;What are the security mechanisms available in Node.js?&lt;/a&gt;| | 26. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-name-the-types-of-api-functions-in-nodejs&quot;&gt;Name the types of API functions in Node.js.&lt;/a&gt; | 27. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-nodejs-handle-child-threads&quot;&gt;How does Node.js handle child threads?&lt;/a&gt;| | 28. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-preferred-method-of-resolving-unhandled-exceptions-in-nodejs&quot;&gt;What is the preferred method of resolving unhandled exceptions in Node.js?&lt;/a&gt;| | 29. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-nodejs-support-multi-processor-platforms-and-does-it-fully-utilize-all-processor-resources&quot;&gt;How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?&lt;/a&gt;| | 30. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-typically-the-first-argument-passed-to-a-nodejs-callback-handler&quot;&gt;What is typically the first argument passed to a Node.js callback handler?&lt;/a&gt;| | 31. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-nodejs-read-the-content-of-a-file&quot;&gt;How Node.js read the content of a file?&lt;/a&gt;| | 32. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-jit-and-how-is-it-related-to-nodejs&quot;&gt;What is JIT and how is it related to Node.js?&lt;/a&gt;| | 33. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-put-and-patch&quot;&gt;What is difference between put and patch?&lt;/a&gt;| | 34. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-list-types-of-http-requests-supported-by-nodejs&quot;&gt;List types of Http requests supported by Node.js.&lt;/a&gt; | 35. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-to-use-expressjs&quot;&gt;Why to use Express.js?&lt;/a&gt;| | 36. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-write-the-steps-for-setting-up-an-express-js-application&quot;&gt;Write the steps for setting up an Express JS application.&lt;/a&gt; | 37. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-since-node-is-a-single-threaded-process-how-to-make-use-of-all-cpus&quot;&gt;Since node is a single threaded process, how to make use of all CPUs?&lt;/a&gt;| | 38. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-does-emitter-do-and-what-is-dispatcher&quot;&gt;What does emitter do and what is dispatcher?&lt;/a&gt;| | 39. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-kill-child-processes-that-spawn-their-own-child-processes-in-nodejs&quot;&gt;How to kill child processes that spawn their own child processes in Node.js?&lt;/a&gt;| | 40. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-do-you-understand-by-reactor-pattern-in-nodejs&quot;&gt;What do you understand by Reactor Pattern in Node.js?&lt;/a&gt;| | 41. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-key-features-of-nodejs&quot;&gt;What are the key features of Node.js?&lt;/a&gt;| | 42. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-globals-in-nodejs&quot;&gt;What are globals in Node.js?&lt;/a&gt;| | 43. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-chaining-process-in-nodejs&quot;&gt;What is chaining process in Node.js?&lt;/a&gt;| | 44. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-control-flow-function-what-are-the-steps-does-it-execute&quot;&gt;What is a control flow function? what are the steps does it execute?&lt;/a&gt;| | 45. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-npm-in-nodejs&quot;&gt;What is npm in Node.js?&lt;/a&gt;| | 46. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-when-to-use-nodejs-and-when-not-to-use-it&quot;&gt;When to use Node.js and when not to use it?&lt;/a&gt;| | 47. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-how-does-nodejs-work&quot;&gt;Explain how does Node.js work?&lt;/a&gt;| | 48. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-is-nodejs-entirely-based-on-a-single-thread&quot;&gt;Is Node.js entirely based on a single-thread?&lt;/a&gt;| | 49. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-make-post-request-in-nodejs&quot;&gt;How to make post request in Node.js?&lt;/a&gt;| | 50. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-can-you-create-http-server-in-nodejs-explain-the-code-used-for-it&quot;&gt;Can you create http server in Node.js, explain the code used for it?&lt;/a&gt;| | 51. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-load-html-in-nodejs&quot;&gt;How to load html in Node.js?&lt;/a&gt;| | 52. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-listen-on-port-80-with-node&quot;&gt;How can you listen on port 80 with Node?&lt;/a&gt;| | 53. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-operational-and-programmer-errors&quot;&gt;What is the difference between operational and programmer errors?&lt;/a&gt;| | 54. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-npm-shrinkwrap-is-useful&quot;&gt;Why npm shrinkwrap is useful?&lt;/a&gt;| | 55. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-your-favourite-http-framework-and-why&quot;&gt;What is your favourite HTTP framework and why?&lt;/a&gt;| | 56. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-challenges-with-nodejs&quot;&gt;What are the Challenges with Node.js?&lt;/a&gt;| | 57. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-nodejs-vs-ajax&quot;&gt;What is the difference between Node.js vs Ajax?&lt;/a&gt;| | 58. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-nodejs-overcomes-the-problem-of-blocking-of-i-o-operations&quot;&gt;How Node.js overcomes the problem of blocking of I/O operations?&lt;/a&gt;| | 59. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-mention-the-steps-by-which-you-can-async-in-nodejs&quot;&gt;Mention the steps by which you can async in Node.js?&lt;/a&gt;| | 60. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-timing-features-of-nodejs&quot;&gt;What are the timing features of Node.js?&lt;/a&gt;| | 61. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-lts-releases-of-nodejs-why-should-you-care&quot;&gt;What is LTS releases of Node.js why should you care?&lt;/a&gt;| | 62. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-should-you-separate-express-app-and-server&quot;&gt;Why should you separate Express &#39;app&#39; and &#39;server&#39;?&lt;/a&gt;| | 63. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-processnexttick-and-setimmediate&quot;&gt;What is the difference between process.nextTick() and setImmediate()?&lt;/a&gt;| | 64. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-javascript-and-nodejs&quot;&gt;What is difference between JavaScript and Node.js?&lt;/a&gt;| | 65. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-difference-between-events-and-callbacks&quot;&gt;What are the difference between Events and Callbacks?&lt;/a&gt;| | 66. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-restful-web-services-in-nodejs&quot;&gt;Explain RESTful Web Services in Node.js?&lt;/a&gt;| | 67. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-handle-file-upload-in-node-js&quot;&gt;How to handle file upload in Node js?&lt;/a&gt;| | 68. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-the-terms-body-parser-cookie-parser-debug-jade-morgan-nodemon-pm2-serve-favicon-cors-in-express-js&quot;&gt;Explain the terms body-parser, cookie-parser, debug, jade, morgan, nodemon, pm2, serve-favicon, cors in Express JS?&lt;/a&gt;| | 69. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-routing-work-in-node-js&quot;&gt;How does routing work in Node.js&lt;/a&gt;| | 70. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-node-prevents-blocking-code&quot;&gt;How Node prevents blocking code?&lt;/a&gt;| | 71. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-promise-and-async-await-in-node-js&quot;&gt;What is difference between promise and async await in node js?&lt;/a&gt;| | 72. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-json-web-token-jwt-for-authentication-in-node-js&quot;&gt;How to use JSON Web Token (JWT) for authentication in node js?&lt;/a&gt;| | 73. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-build-a-microservices-architecture-with-node-js&quot;&gt;How to build a microservices architecture with node js?&lt;/a&gt;| | 74. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-q-promise-in-node-js&quot;&gt;How to use Q promise in node js?&lt;/a&gt;| | 75. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-locale-i18n-in-node-js&quot;&gt;How to use locale (i18n) in node js?&lt;/a&gt;| | 76. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-implement-memcached-in-nodejs&quot;&gt;How to Implement Memcached in Nodejs?&lt;/a&gt;| | 77. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-error-handling-in-nodejs&quot;&gt;Explain Error Handling in Nodejs?&lt;/a&gt;| | 78. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-generate-and-verify-checksum-of-the-given-string-in-nodejs&quot;&gt;How to generate and verify checksum of the given string in Nodejs&lt;/a&gt;|&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What does the runtime environment mean in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The Node.js runtime is the software stack responsible for installing your web service&#39;s code and its dependencies and running your service.&lt;/p&gt; 
&lt;p&gt;The Node.js runtime for App Engine in the standard environment is declared in the &lt;code&gt;app.yaml&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;runtime: nodejs10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The runtime environment is literally just the environment your application is running in. This can be used to describe both the hardware and the software that is running your application. How much RAM, what version of node, what operating system, how much CPU cores, can all be referenced when talking about a runtime environment.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is an open-source server side runtime environment built on Chrome&#39;s V8 JavaScript engine. It provides an event driven, non-blocking (asynchronous) I/O and cross-platform runtime environment for building highly scalable server-side applications using JavaScript.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Node.js Process Model?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js runs in a single process and the application code runs in a single thread and thereby needs less resources than other platforms. All the user requests to your web application will be handled by a single thread and all the I/O work or long running job is performed asynchronously for a particular request. So, this single thread doesn&#39;t have to wait for the request to complete and is free to handle the next request. When asynchronous I/O work completes then it processes the request further and sends the response.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the data types in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Primitive Types&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;String&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Number&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Boolean&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Undefined&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Null&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;RegExp&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Buffer&lt;/code&gt;: Node.js includes an additional data type called Buffer (not available in browser&#39;s JavaScript). Buffer is mainly used to store binary data, while reading from a file or receiving packets over the network.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to create a simple server in Node.js that returns Hello World?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Step 01&lt;/strong&gt;: Create a project directory&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir myapp
cd myapp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 02&lt;/strong&gt;: Initialize project and link it to npm&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This creates a &lt;code&gt;package.json&lt;/code&gt; file in your myapp folder. The file contains references for all npm packages you have downloaded to your project. The command will prompt you to enter a number of things. You can enter your way through all of them EXCEPT this one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;entry point: (index.js)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Rename this to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 03&lt;/strong&gt;: Install Express in the myapp directory&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 04&lt;/strong&gt;: app.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Hello World!&#39;);
});

app.listen(3000, function () {
  console.log(&#39;Example app listening on port 3000!&#39;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 05&lt;/strong&gt;: Run the app&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bah&quot;&gt;node app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How do Node.js works?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Node is completely event-driven. Basically the server consists of one thread processing one event after another.&lt;/p&gt; 
&lt;p&gt;A new request coming in is one kind of event. The server starts processing it and when there is a blocking IO operation, it does not wait until it completes and instead registers a callback function. The server then immediately starts to process another event (maybe another request). When the IO operation is finished, that is another kind of event, and the server will process it (i.e. continue working on the request) by executing the callback as soon as it has time.&lt;/p&gt; 
&lt;p&gt;So the server never needs to create additional threads or switch between threads, which means it has very little overhead. If you want to make full use of multiple hardware cores, you just start multiple instances of node.js&lt;/p&gt; 
&lt;p&gt;Node JS Platform does not follow Request/Response Multi-Threaded Stateless Model. It follows Single Threaded with Event Loop Model. Node JS Processing model mainly based on Javascript Event based model with Javascript callback mechanism.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Single Threaded Event Loop Model Processing Steps:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clients Send request to Web Server.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server internally maintains a Limited Thread pool to provide services to the Client Requests.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server receives those requests and places them into a Queue. It is known as ‚ÄúEvent Queue‚Äù.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server internally has a Component, known as ‚ÄúEvent Loop‚Äù. Why it got this name is that it uses indefinite loop to receive requests and process them.&lt;/li&gt; 
 &lt;li&gt;Event Loop uses Single Thread only. It is main heart of Node JS Platform Processing Model.&lt;/li&gt; 
 &lt;li&gt;Even Loop checks any Client Request is placed in Event Queue. If no, then wait for incoming requests for indefinitely.&lt;/li&gt; 
 &lt;li&gt;If yes, then pick up one Client Request from Event Queue 
  &lt;ul&gt; 
   &lt;li&gt;Starts process that Client Request&lt;/li&gt; 
   &lt;li&gt;If that Client Request Does Not requires any Blocking IO Operations, then process everything, prepare response and send it back to client.&lt;/li&gt; 
   &lt;li&gt;If that Client Request requires some Blocking IO Operations like interacting with Database, File System, External Services then it will follow different approach 
    &lt;ul&gt; 
     &lt;li&gt;Checks Threads availability from Internal Thread Pool&lt;/li&gt; 
     &lt;li&gt;Picks up one Thread and assign this Client Request to that thread.&lt;/li&gt; 
     &lt;li&gt;That Thread is responsible for taking that request, process it, perform Blocking IO operations, prepare response and send it back to the Event Loop&lt;/li&gt; 
     &lt;li&gt;Event Loop in turn, sends that Response to the respective Client.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is an error-first callback?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The pattern used across all the asynchronous methods in Node.js is called &lt;em&gt;Error-first Callback&lt;/em&gt;. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile( &quot;file.json&quot;, function ( err, data ) {
  if ( err ) {
    console.error( err );
  }
  console.log( data );
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Any asynchronous method expects one of the arguments to be a callback. The full callback argument list depends on the caller method, but the first argument is always an error object or null. When we go for the asynchronous method, an exception thrown during function execution cannot be detected in a try/catch statement. The event happens after the JavaScript engine leaves the try block.&lt;/p&gt; 
&lt;p&gt;In the preceding example, if any exception is thrown during the reading of the file, it lands on the callback function as the first and mandatory parameter.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is callback hell in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;Callback hell&lt;/code&gt; is a phenomenon that afflicts a JavaScript developer when he tries to execute multiple asynchronous operations one after the other.&lt;/p&gt; 
&lt;p&gt;An asynchronous function is one where some external activity must complete before a result can be processed; it is ‚Äúasynchronous‚Äù in the sense that there is an unpredictable amount of time before a result becomes available. Such functions require a callback function to handle errors and process the result.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getData(function(a){
    getMoreData(a, function(b){
        getMoreData(b, function(c){ 
            getMoreData(c, function(d){ 
	            getMoreData(d, function(e){ 
		            ...
		        });
	        });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Techniques for avoiding callback hell&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Using Async.js&lt;/li&gt; 
 &lt;li&gt;Using Promises&lt;/li&gt; 
 &lt;li&gt;Using Async-Await&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Managing callbacks using Async.js&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;Async&lt;/code&gt; is a really powerful npm module for managing asynchronous nature of JavaScript. Along with Node.js, it also works for JavaScript written for browsers.&lt;/p&gt; 
&lt;p&gt;Async provides lots of powerful utilities to work with asynchronous processes under different scenarios.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save async
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ASYNC WATERFALL&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var async = require(&#39;async&#39;);
async.waterfall([
    function(callback) {
        //doSomething
        callback(null, paramx); //paramx will be availaible as the first parameter to the next function
        /**
            The 1st parameter passed in callback.
            @null or @undefined or @false control moves to the next function
            in the array
            if @true or @string the control is immedeatly moved
            to the final callback fucntion
            rest of the functions in the array
            would not be executed
        */
    },
    function(arg1, callback) {
        //doSomething else
      // arg1 now equals paramx
        callback(null, result);
    },
    function(arg1, callback) {
        //do More
        // arg1 now equals &#39;result&#39;
        callback(null, &#39;done&#39;);
    },
    function(arg1, callback) {
        //even more
        // arg1 now equals &#39;done&#39;
        callback(null, &#39;done&#39;);
    }
], function (err, result) {
    //final callback function
    //finally do something when all function are done.
    // result now equals &#39;done&#39;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ASYNC SERIES&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var async = require(&#39;async&#39;);
async.series([
    function(callback){
        // do some stuff ...
        callback(null, &#39;one&#39;);
        /**
            The 1st parameter passed in callback.
            @null or @undefined or @false control moves to the next function
            in the array
            if @true or @string the control is immedeatly moved
            to the final callback fucntion with the value of err same as
            passed over here and
            rest of the functions in the array
            would not be executed
        */
    },
    function(callback){
        // do some more stuff ...
        callback(null, &#39;two&#39;);
    }
],
// optional callback
function(err, results){
    // results is now equal to [&#39;one&#39;, &#39;two&#39;]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Managing callbacks hell using promises&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Promises are alternative to callbacks while dealing with asynchronous code. Promises return the value of the result or an error exception. The core of the promises is the &lt;code&gt;.then()&lt;/code&gt; function, which waits for the promise object to be returned. The &lt;code&gt;.then()&lt;/code&gt; function takes two optional functions as arguments and depending on the state of the promise only one will ever be called. The first function is called when the promise if fulfilled (A successful result). The second function is called when the promise is rejected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var outputPromise = getInputPromise().then(function (input) {
    //handle success
}, function (error) {
    //handle error
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Using Async Await&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Async await makes asynchronous code look like it\‚Äôs synchronous. This has only been possible because of the reintroduction of promises into node.js. Async-Await only works with functions that return a promise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const getrandomnumber = function(){
    return new Promise((resolve, reject)=&amp;gt;{
        setTimeout(() =&amp;gt; {
            resolve(Math.floor(Math.random() * 20));
        }, 1000);
    });
}

const addRandomNumber = async function(){
    const sum = await getrandomnumber() + await getrandomnumber();
    console.log(sum);
}

addRandomNumber();
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are Promises in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It allows to associate handlers to an asynchronous action&#39;s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of the final value, the asynchronous method returns a promise for the value at some point in the future.&lt;/p&gt; 
&lt;p&gt;Promises in node.js promised to do some work and then had separate callbacks that would be executed for success and failure as well as handling timeouts. Another way to think of promises in node.js was that they were emitters that could emit only two events: success and error.The cool thing about promises is you can combine them into dependency chains (do Promise C only when Promise A and Promise B complete).&lt;/p&gt; 
&lt;p&gt;The core idea behind promises is that a promise represents the result of an asynchronous operation. A promise is in one of three different states:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;pending - The initial state of a promise.&lt;/li&gt; 
 &lt;li&gt;fulfilled - The state of a promise representing a successful operation.&lt;/li&gt; 
 &lt;li&gt;rejected - The state of a promise representing a failed operation. Once a promise is fulfilled or rejected, it is immutable (i.e. it can never change again).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Creating a Promise&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myPromise = new Promise(function(resolve, reject){
   ....
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What tools can be used to assure consistent style?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ESLint&lt;/li&gt; 
 &lt;li&gt;Standard&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;When should you npm and when yarn?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;npm&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is the default method for managing packages in the Node.js runtime environment. It relies upon a command line client and a database made up of public and premium packages known as the the npm registry. Users can access the registry via the client and browse the many packages available through the npm website. Both npm and its registry are managed by npm, Inc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Yarn&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Yarn was developed by Facebook in attempt to resolve some of npm‚Äôs shortcomings. Yarn isn‚Äôt technically a replacement for npm since it relies on modules from the npm registry. Think of Yarn as a new installer that still relies upon the same npm structure. The registry itself hasn‚Äôt changed, but the installation method is different. Since Yarn gives you access to the same packages as npm, moving from npm to Yarn doesn‚Äôt require you to make any changes to your workflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install yarn --global
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Comparing Yarn vs npm&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fast: Yarn caches every package it downloads so it never needs to again. It also parallelizes operations to maximize resource utilization so install times are faster than ever.&lt;/li&gt; 
 &lt;li&gt;Reliable: Using a detailed, but concise, lockfile format, and a deterministic algorithm for installs, Yarn is able to guarantee that an install that worked on one system will work exactly the same way on any other system.&lt;/li&gt; 
 &lt;li&gt;Secure: Yarn uses checksums to verify the integrity of every installed package before its code is executed.&lt;/li&gt; 
 &lt;li&gt;Offline Mode: If you&#39;ve installed a package before, you can install it again without any internet connection.&lt;/li&gt; 
 &lt;li&gt;Deterministic: The same dependencies will be installed the same exact way across every machine regardless of install order.&lt;/li&gt; 
 &lt;li&gt;Network Performance: Yarn efficiently queues up requests and avoids request waterfalls in order to maximize network utilization.&lt;/li&gt; 
 &lt;li&gt;Multiple Registries: Install any package from either npm or Bower and keep your package workflow the same.&lt;/li&gt; 
 &lt;li&gt;Network Resilience: A single request failing won&#39;t cause an install to fail. Requests are retried upon failure.&lt;/li&gt; 
 &lt;li&gt;Flat Mode: Resolve mismatching versions of dependencies to a single version to avoid creating duplicates.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a stub?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Stubbing and verification for node.js tests. Enables you to validate and override behaviour of nested pieces of code such as methods, require() and npm modules or even instances of classes. This library is inspired on node-gently, MockJS and mock-require.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Features of Stub:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Produces simple, lightweight Objects capable of extending down their tree&lt;/li&gt; 
 &lt;li&gt;Compatible with Nodejs&lt;/li&gt; 
 &lt;li&gt;Easily extendable directly or through an ExtensionManager&lt;/li&gt; 
 &lt;li&gt;Comes with predefined, usable extensions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Stubs are functions/programs that simulate the behaviours of components/modules. Stubs provide canned answers to function calls made during test cases. Also, you can assert on with what these stubs were called.&lt;/p&gt; 
&lt;p&gt;A use-case can be a file read, when you do not want to read an actual file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&#39;fs&#39;);

var readFileStub = sinon.stub(fs, &#39;readFile&#39;, function (path, cb) {  
  return cb(null, &#39;filecontent&#39;);
});

expect(readFileStub).to.be.called;  
readFileStub.restore();
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a test pyramid? How can you implement it when talking about HTTP APIs?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &quot;Test Pyramid&quot; is a metaphor that tells us to group software tests into buckets of different granularity. It also gives an idea of how many tests we should have in each of these groups. It shows which kinds of tests you should be looking for in the different levels of the pyramid and gives practical examples on how these can be implemented.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Mike Cohn&#39;s original test pyramid consists of three layers that your test suite should consist of (bottom to top):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Unit Tests&lt;/li&gt; 
 &lt;li&gt;Service Tests&lt;/li&gt; 
 &lt;li&gt;User Interface Tests&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you secure your HTTP cookies against XSS attacks?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; When the web server sets cookies, it can provide some additional attributes to make sure the cookies won&#39;t be accessible by using malicious JavaScript. One such attribute is HttpOnly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Set-Cookie: [name]=[value]; HttpOnly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;HttpOnly makes sure the cookies will be submitted only to the domain they originated from.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; The &quot;Secure&quot; attribute can make sure the cookies are sent over secured channel only.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Set-Cookie: [name]=[value]; Secure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; The web server can use X-XSS-Protection response header to make sure pages do not load when they detect reflected cross-site scripting (XSS) attacks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;X-XSS-Protection: 1; mode=block
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; The web server can use HTTP Content-Security-Policy response header to control what resources a user agent is allowed to load for a certain page. It can help to prevent various types of attacks like Cross Site Scripting (XSS) and data injection attacks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Content-Security-Policy: default-src &#39;self&#39; *.http://sometrustedwebsite.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you make sure your dependencies are safe?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The only option is to automate the update / security audit of your dependencies. For that there are free and paid options:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;npm outdated&lt;/li&gt; 
 &lt;li&gt;Trace by RisingStack&lt;/li&gt; 
 &lt;li&gt;NSP&lt;/li&gt; 
 &lt;li&gt;GreenKeeper&lt;/li&gt; 
 &lt;li&gt;Snyk&lt;/li&gt; 
 &lt;li&gt;npm audit&lt;/li&gt; 
 &lt;li&gt;npm audit fix&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Event loop in Node.js? And How does it work?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The event loop is what allows Node.js to perform non-blocking I/O operations ‚Äî despite the fact that JavaScript is single-threaded ‚Äî by offloading operations to the system kernel whenever possible.&lt;/p&gt; 
&lt;p&gt;Node.js is a single-threaded application, but it can support concurrency via the concept of &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;callbacks&lt;/code&gt;. Every API of Node.js is asynchronous and being single-threaded, they use &lt;code&gt;async function calls&lt;/code&gt; to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Event-Driven Programming&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In an event-driven application, there is generally a main loop that listens for events, and then triggers a callback function when one of those events is detected.&lt;/p&gt; 
&lt;p&gt;Although events look quite similar to callbacks, the difference lies in the fact that callback functions are called when an asynchronous function returns its result, whereas event handling works on the observer pattern. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners as follows&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Import events module
var events = require(&#39;events&#39;);

// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Import events module
var events = require(&#39;events&#39;);

// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();

// Create an event handler as follows
var connectHandler = function connected() {
   console.log(&#39;connection succesful.&#39;);
  
   // Fire the data_received event 
   eventEmitter.emit(&#39;data_received&#39;);
}

// Bind the connection event with the handler
eventEmitter.on(&#39;connection&#39;, connectHandler);
 
// Bind the data_received event with the anonymous function
eventEmitter.on(&#39;data_received&#39;, function() {
   console.log(&#39;data received succesfully.&#39;);
});

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

console.log(&quot;Program Ended.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is REPL? What purpose it is used for?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;REPL (READ, EVAL, PRINT, LOOP) is a computer environment similar to Shell (Unix/Linux) and command prompt. Node comes with the REPL environment when it is installed. System interacts with the user through outputs of commands/expressions used. It is useful in writing and debugging the codes. The work of REPL can be understood from its full form:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt;: It reads the inputs from users and parses it into JavaScript data structure. It is then stored to memory.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Eval&lt;/strong&gt;: The parsed JavaScript data structure is evaluated for the results.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Print&lt;/strong&gt;: The result is printed after the evaluation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Loop&lt;/strong&gt;: Loops the input command. To come out of NODE REPL, press ctrl+c twice&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Simple Expression&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$ node
&amp;gt; 10 + 20
30
&amp;gt; 10 + ( 20 * 30 ) - 40
570
&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between Asynchronous and Non-blocking?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Asynchronous&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The architecture of asynchronous explains that the message sent will not give the reply on immediate basis just like we send the mail but do not get the reply on an immediate basis. It does not have any dependency or order. Hence improving the system efficiency and performance. The server stores the information and when the action is done it will be notified.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Non-Blocking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nonblocking immediately responses with whatever data available. Moreover, it does not block any execution and keeps on running as per the requests. If an answer could not be retrieved than in those cases API returns immediately with an error. Nonblocking is mostly used with I/O(input/output). Node.js is itself based on nonblocking I/O model. There are few ways of communication that a nonblocking I/O has completed. The callback function is to be called when the operation is completed. Nonblocking call uses the help of javascript which provides a callback function.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous VS Non-Blocking&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt;Asynchronous does not respond immediately, While Nonblocking responds immediately if the data is available and if not that simply returns an error.&lt;/li&gt; 
 &lt;li&gt;Asynchronous improves the efficiency by doing the task fast as the response might come later, meanwhile, can do complete other tasks. Nonblocking does not block any execution and if the data is available it retrieves the information quickly.&lt;/li&gt; 
 &lt;li&gt;Asynchronous is the opposite of synchronous while nonblocking I/O is the opposite of blocking. They both are fairly similar but they are also different as asynchronous is used with a broader range of operations while nonblocking is mostly used with I/O.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to debug an application in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;node-inspector&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g node-inspector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node-debug app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Debugger&lt;/li&gt; 
   &lt;li&gt;Node Inspector&lt;/li&gt; 
   &lt;li&gt;Visual Studio Code&lt;/li&gt; 
   &lt;li&gt;Cloud9&lt;/li&gt; 
   &lt;li&gt;Brackets&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profiling&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;1. node --prof ./app.js
2. node --prof-process ./the-generated-log-file
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Heapdumps&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;node-heapdump with Chrome Developer Tools&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tracing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Interactive Stack Traces with TraceGL&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Logging&lt;/strong&gt;&lt;br&gt; Libraries that output debugging information&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Caterpillar&lt;/li&gt; 
   &lt;li&gt;Tracer&lt;/li&gt; 
   &lt;li&gt;scribbles&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Libraries that enhance stack trace information&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Longjohn&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are some of the most popular modules of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Async&lt;/strong&gt;: Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Browserify&lt;/strong&gt;: Browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single 
  &lt;!-- raw HTML omitted --&gt; tag.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bower&lt;/strong&gt;: Bower is a package manager for the web. It works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you‚Äôre looking for.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backbone&lt;/strong&gt;: Backbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Csv&lt;/strong&gt;: csv module has four sub modules which provides CSV generation, parsing, transformation and serialization for Node.js.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;: Debug is a tiny node.js debugging utility modelled after node core&#39;s debugging technique.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Express&lt;/strong&gt;: Express is a fast, un-opinionated, minimalist web framework. It provides small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Forever&lt;/strong&gt;: A simple CLI tool for ensuring that a given node script runs continuously (i.e. forever).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Grunt&lt;/strong&gt;: is a JavaScript Task Runner that facilitates creating new projects and makes performing repetitive but necessary tasks such as linting, unit testing, concatenating and minifying files (among other things) trivial.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Gulp&lt;/strong&gt;: is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hapi&lt;/strong&gt;: is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Http-server&lt;/strong&gt;: is a simple, zero-configuration command-line http server. It is powerful enough for production usage, but it&#39;s simple and hackable enough to be used for testing, local development, and learning.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Inquirer&lt;/strong&gt;: A collection of common interactive command line user interfaces.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jquery&lt;/strong&gt;: jQuery is a fast, small, and feature-rich JavaScript library.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jshint&lt;/strong&gt;: Static analysis tool to detect errors and potential problems in JavaScript code and to enforce your team&#39;s coding conventions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Koa&lt;/strong&gt;: Koa is web app framework. It is an expressive HTTP middleware for node.js to make web applications and APIs more enjoyable to write.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lodash&lt;/strong&gt;: The lodash library exported as a node module. Lodash is a modern JavaScript utility library delivering modularity, performance, &amp;amp; extras.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Less&lt;/strong&gt;: The less library exported as a node module.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Moment&lt;/strong&gt;: A lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mongoose&lt;/strong&gt;: It is a MongoDB object modeling tool designed to work in an asynchronous environment.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;: The official MongoDB driver for Node.js. It provides a high-level API on top of mongodb-core that is meant for end users.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Npm&lt;/strong&gt;: is package manager for javascript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nodemon&lt;/strong&gt;: It is a simple monitor script for use during development of a node.js app, It will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nodemailer&lt;/strong&gt;: This module enables e-mail sending from a Node.js applications.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optimist&lt;/strong&gt;: is a node.js library for option parsing with an argv hash.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Phantomjs&lt;/strong&gt;: An NPM installer for PhantomJS, headless webkit with JS API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Passport&lt;/strong&gt;: A simple, unobtrusive authentication middleware for Node.js. Passport uses the strategies to authenticate requests. Strategies can range from verifying username and password credentials or authentication using OAuth or OpenID.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: Q is a library for promises. A promise is an object that represents the return value or the thrown exception that the function may eventually provide.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: Request is Simplified HTTP request client make it possible to make http calls. It supports HTTPS and follows redirects by default.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Socket.io&lt;/strong&gt;: Its a node.js realtime framework server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sails&lt;/strong&gt;: Sails : API-driven framework for building realtime apps, using MVC conventions (based on Express and Socket.io)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Through&lt;/strong&gt;: It enables simplified stream construction. It is easy way to create a stream that is both readable and writable.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Underscore&lt;/strong&gt;: Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Validator&lt;/strong&gt;: A nodejs module for a library of string validators and sanitizers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Winston&lt;/strong&gt;: A multi-transport async logging library for Node.js&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ws&lt;/strong&gt;: A simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xml2js&lt;/strong&gt;: A Simple XML to JavaScript object converter.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Yo&lt;/strong&gt;: A CLI tool for running Yeoman generators&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Zmq&lt;/strong&gt;: Bindings for node.js and io.js to ZeroMQ .It is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is EventEmitter in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;All objects that emit events are members of EventEmitter class. These objects expose an &lt;code&gt;eventEmitter.on()&lt;/code&gt; function that allows one or more functions to be attached to named events emitted by the object.&lt;/p&gt; 
&lt;p&gt;When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. All values returned by the called listeners are ignored and will be discarded.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var events = require(&#39;events&#39;);
var eventEmitter = new events.EventEmitter();

// listener #1
var listner1 = function listner1() {
   console.log(&#39;listner1 executed.&#39;);
}

// listener #2
var listner2 = function listner2() {
   console.log(&#39;listner2 executed.&#39;);
}

// Bind the connection event with the listner1 function
eventEmitter.addListener(&#39;connection&#39;, listner1);

// Bind the connection event with the listner2 function
eventEmitter.on(&#39;connection&#39;, listner2);

var eventListeners = require(&#39;events&#39;).EventEmitter.listenerCount
   (eventEmitter,&#39;connection&#39;);
console.log(eventListeners + &quot; Listner(s) listening to connection event&quot;);

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

// Remove the binding of listner1 function
eventEmitter.removeListener(&#39;connection&#39;, listner1);
console.log(&quot;Listner1 will not listen now.&quot;);

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

eventListeners = require(&#39;events&#39;).EventEmitter.listenerCount(eventEmitter,&#39;connection&#39;);
console.log(eventListeners + &quot; Listner(s) listening to connection event&quot;);

console.log(&quot;Program Ended.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now run the main.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node main.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;2 Listner(s) listening to connection event
listner1 executed.
listner2 executed.
Listner1 will not listen now.
listner2 executed.
1 Listner(s) listening to connection event
Program Ended.
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How many types of streams are present in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Streams are objects that let you read data from a source or write data to a destination in continuous fashion. There are four types of streams&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Readable&lt;/strong&gt; ‚àí Stream which is used for read operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Writable&lt;/strong&gt; ‚àí Stream which is used for write operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Duplex&lt;/strong&gt; ‚àí Stream which can be used for both read and write operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt; ‚àí A type of duplex stream where the output is computed based on input.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each type of Stream is an EventEmitter instance and throws several events at different instance of times.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt; ‚àí This event is fired when there is data is available to read.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt; ‚àí This event is fired when there is no more data to read.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;error&lt;/strong&gt; ‚àí This event is fired when there is any error receiving or writing data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;finish&lt;/strong&gt; ‚àí This event is fired when all the data has been flushed to underlying system.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Reading from a Stream&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var data = &#39;&#39;;

// Create a readable stream
var readerStream = fs.createReadStream(&#39;input.txt&#39;);

// Set the encoding to be utf8. 
readerStream.setEncoding(&#39;UTF8&#39;);

// Handle stream events --&amp;gt; data, end, and error
readerStream.on(&#39;data&#39;, function(chunk) {
   data += chunk;
});

readerStream.on(&#39;end&#39;,function() {
   console.log(data);
});

readerStream.on(&#39;error&#39;, function(err) {
   console.log(err.stack);
});

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Writing to a Stream&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var data = &#39;Simply Easy Learning&#39;;

// Create a writable stream
var writerStream = fs.createWriteStream(&#39;output.txt&#39;);

// Write the data to stream with encoding to be utf8
writerStream.write(data,&#39;UTF8&#39;);

// Mark the end of file
writerStream.end();

// Handle stream events --&amp;gt; finish, and error
writerStream.on(&#39;finish&#39;, function() {
   console.log(&quot;Write completed.&quot;);
});

writerStream.on(&#39;error&#39;, function(err) {
   console.log(err.stack);
});

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Piping the Streams&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Piping is a mechanism where we provide the output of one stream as the input to another stream. It is normally used to get data from one stream and to pass the output of that stream to another stream. There is no limit on piping operations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);

// Create a readable stream
var readerStream = fs.createReadStream(&#39;input.txt&#39;);

// Create a writable stream
var writerStream = fs.createWriteStream(&#39;output.txt&#39;);

// Pipe the read and write operations
// read input.txt and write data to output.txt
readerStream.pipe(writerStream);

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Chaining the Streams&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Chaining is a mechanism to connect the output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var zlib = require(&#39;zlib&#39;);

// Compress the file input.txt to input.txt.gz
fs.createReadStream(&#39;input.txt&#39;)
   .pipe(zlib.createGzip())
   .pipe(fs.createWriteStream(&#39;input.txt.gz&#39;));
  
console.log(&quot;File Compressed.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is crypto in Node.js? How do you cipher the secure information in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The Node.js Crypto module supports cryptography. It provides cryptographic functionality that includes a set of wrappers for open SSL&#39;s hash HMAC, cipher, decipher, sign and verify functions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hash&lt;/strong&gt;: A hash is a fixed-length string of bits i.e. procedurally and deterministically generated from some arbitrary block of source data.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;HMAC&lt;/strong&gt;: HMAC stands for Hash-based Message Authentication Code. It is a process for applying a hash algorithm to both data and a secret key that results in a single final hash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Encryption Example using Hash and HMAC&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const secret = &#39;abcdefg&#39;;  
const hash = crypto.createHmac(&#39;sha256&#39;, secret)  
                   .update(&#39;Welcome to JavaTpoint&#39;)  
                   .digest(&#39;hex&#39;);  
console.log(hash);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Encryption example using Cipher&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);  
var encrypted = cipher.update(&#39;Hello JavaTpoint&#39;, &#39;utf8&#39;, &#39;hex&#39;);  
encrypted += cipher.final(&#39;hex&#39;);  
console.log(encrypted);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Decryption example using Decipher&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);  
var encrypted = &#39;4ce3b761d58398aed30d5af898a0656a3174d9c7d7502e781e83cf6b9fb836d5&#39;;  
var decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);  
decrypted += decipher.final(&#39;utf8&#39;);  
console.log(decrypted);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the use of DNS module in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;DNS is a node module used to do name resolution facility which is provided by the operating system as well as used to do an actual DNS lookup. No need for memorising IP addresses ‚Äì DNS servers provide a nifty solution of converting domain or subdomain names to IP addresses. This module provides an asynchronous network wrapper and can be imported using the following syntax.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;dns.lookup()&lt;/code&gt; function&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.lookup(&#39;www.google.com&#39;, (err, addresses, family) =&amp;gt; {  
  console.log(&#39;addresses:&#39;, addresses);  
  console.log(&#39;family:&#39;,family);  
});  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;resolve4()&lt;/code&gt; and &lt;code&gt;reverse()&lt;/code&gt; functions&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.resolve4(&#39;www.google.com&#39;, (err, addresses) =&amp;gt; {  
  if (err) throw err;  
  console.log(`addresses: ${JSON.stringify(addresses)}`);  
  addresses.forEach((a) =&amp;gt; {  
    dns.reverse(a, (err, hostnames) =&amp;gt; {  
      if (err) {  
        throw err;  
      }  
      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);  
    });  
  });  
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: print the localhost name using &lt;code&gt;lookupService()&lt;/code&gt; function&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&amp;gt; {  
  console.log(hostname, service);  
    // Prints: localhost  
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the security mechanisms available in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Using the Helmet module&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Helmet helps to secure your Express applications by setting various HTTP headers, like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;X-Frame-Options to mitigates clickjacking attacks,&lt;/li&gt; 
 &lt;li&gt;Strict-Transport-Security to keep your users on HTTPS,&lt;/li&gt; 
 &lt;li&gt;X-XSS-Protection to prevent reflected XSS attacks,&lt;/li&gt; 
 &lt;li&gt;X-DNS-Prefetch-Control to disable browsers DNS prefetching.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const express = require(&#39;express&#39;)
const helmet = require(&#39;helmet&#39;)
const app = express()

app.use(helmet())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Validating user input&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Validating user input is one of the most important things to do when it comes to the security of your application. Failing to do it correctly can open up your application and users to a wide range of attacks, including command injection, SQL injection or stored cross-site scripting.&lt;/p&gt; 
&lt;p&gt;To validate user input, one of the best libraries you can pick is joi. Joi is an object schema description language and validator for JavaScript objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Joi = require(&#39;joi&#39;);

const schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(30).required(),
    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),
    access_token: [Joi.string(), Joi.number()],
    birthyear: Joi.number().integer().min(1900).max(2013),
    email: Joi.string().email()
}).with(&#39;username&#39;, &#39;birthyear&#39;).without(&#39;password&#39;, &#39;access_token&#39;)

// Return result
const result = Joi.validate({
    username: &#39;abc&#39;,
    birthyear: 1994
}, schema)
// result.error === null -&amp;gt; valid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Securing your Regular Expressions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Regular Expressions are a great way to manipulate texts and get the parts that you need from them. However, there is an attack vector called Regular Expression Denial of Service attack, which exposes the fact that most Regular Expression implementations may reach extreme situations for specially crafted input, that cause them to work extremely slowly.&lt;/p&gt; 
&lt;p&gt;The Regular Expressions that can do such a thing are commonly referred as Evil Regexes. These expressions contain: *grouping with repetition, *inside the repeated group: *repetition, or *alternation with overlapping&lt;/p&gt; 
&lt;p&gt;Examples of Evil Regular Expressions patterns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(a+)+
([a-zA-Z]+)*
(a|aa)+
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Security.txt&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Security.txt defines a standard to help organizations define the process for security researchers to securely disclose security vulnerabilities.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const express = require(&#39;express&#39;)
const securityTxt = require(&#39;express-security.txt&#39;)

const app = express()

app.get(&#39;/security.txt&#39;, securityTxt({
  // your security address
  contact: &#39;email@example.com&#39;,
  // your pgp key
  encryption: &#39;encryption&#39;,
  // if you have a hall of fame for securty resourcers, include the link here
  acknowledgements: &#39;http://acknowledgements.example.com&#39;
}))
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Name the types of API functions in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;There are two types of API functions in Node.js:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Asynchronous, Non-blocking functions&lt;/li&gt; 
 &lt;li&gt;Synchronous, Blocking functions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;1. Blocking functions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In a blocking operation, all other code is blocked from executing until an I/O event that is being waited on occurs. Blocking functions execute synchronously.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fs = require(&#39;fs&#39;);
const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read
console.log(data);
// moreWork(); will run after console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The second line of code blocks the execution of additional JavaScript until the entire file is read. moreWork () will only be called after Console.log&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Non-blocking functions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In a non-blocking operation, multiple I/O calls can be performed without the execution of the program being halted. Non-blocking functions execute asynchronously.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fs = require(&#39;fs&#39;);
fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {
  if (err) throw err;
  console.log(data);
});
// moreWork(); will run before console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since &lt;code&gt;fs.readFile()&lt;/code&gt; is non-blocking, moreWork() does not have to wait for the file read to complete before being called. This allows for higher throughput.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does Node.js handle child threads?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nodejs Primary application runs in an event loop, which is in a single thread.&lt;/li&gt; 
 &lt;li&gt;Background I/O is running in a thread pool that is only accessible to C/C++ or other compiled/native modules and mostly transparent to the JS.&lt;/li&gt; 
 &lt;li&gt;Node v11/12 now has experimental worker_threads, which is another option.&lt;/li&gt; 
 &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; 
 &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; 
 &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the preferred method of resolving unhandled exceptions in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Unhandled exceptions in Node.js can be caught at the Process level by attaching a handler for uncaughtException event.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;process.on(&#39;uncaughtException&#39;, function(err) {
    console.log(&#39;Caught exception: &#39; + err);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Process is a global object that provides information about the current Node.js process. Process is a listener function that is always listening to events.&lt;/p&gt; 
&lt;p&gt;Few events are :&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Exit&lt;/li&gt; 
 &lt;li&gt;disconnect&lt;/li&gt; 
 &lt;li&gt;unhandledException&lt;/li&gt; 
 &lt;li&gt;rejectionHandled&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Since Node.js is by default a single thread application, it will run on a single processor core and will not take full advantage of multiple core resources. However, Node.js provides support for deployment on multiple-core systems, to take greater advantage of the hardware. The Cluster module is one of the core Node.js modules and it allows running multiple Node.js worker processes that will share the same port.&lt;/p&gt; 
&lt;p&gt;The cluster module helps to spawn new processes on the operating system. Each process works independently, so you cannot use shared state between child processes. Each process communicates with the main process by IPC and pass server handles back and forth.&lt;/p&gt; 
&lt;p&gt;Cluster supports two types of load distribution:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The main process listens on a port, accepts new connection and assigns it to a child process in a round robin fashion.&lt;/li&gt; 
 &lt;li&gt;The main process assigns the port to a child process and child process itself listen the port.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is typically the first argument passed to a Node.js callback handler?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The first argument to any callback handler is an optional error object&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function callback(err, results) {
    // usually we&#39;ll check for the error before handling results
    if(err) {
        // handle error somehow and return
    }
    // no error, perform standard callback handling
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How Node.js read the content of a file?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &quot;normal&quot; way in Node.js is probably to read in the content of a file in a non-blocking, asynchronous way. That is, to tell Node to read in the file, and then to get a callback when the file-reading has been finished. That would allow us to hand several requests in parallel.&lt;/p&gt; 
&lt;p&gt;Common use for the File System module:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read files&lt;/li&gt; 
 &lt;li&gt;Create files&lt;/li&gt; 
 &lt;li&gt;Update files&lt;/li&gt; 
 &lt;li&gt;Delete files&lt;/li&gt; 
 &lt;li&gt;Rename files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Read Files&lt;/strong&gt;&lt;br&gt; index.html&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;My Header&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;My paragraph.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// read_file.js

var http = require(&#39;http&#39;);
var fs = require(&#39;fs&#39;);
http.createServer(function (req, res) {
  fs.readFile(&#39;index.html&#39;, function(err, data) {
    res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;});
    res.write(data);
    res.end();
  });
}).listen(8080);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Initiate read_file.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node read_file.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is JIT and how is it related to Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js has depended on the V8 JavaScript engine to provide code execution in the language. The V8 is a JavaScript engine built at the google development center, in Germany. It is open source and written in C++. It is used for both client side (Google Chrome) and server side (node.js) JavaScript applications. A central piece of the V8 engine that allows it to execute JavaScript at high speed is the JIT (Just In Time) compiler. This is a dynamic compiler that can optimize code during runtime. When V8 was first built the JIT Compiler was dubbed FullCodegen. Then, the V8 team implemented Crankshaft, which included many performance optimizations that FullCodegen did not implement.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;V8&lt;/code&gt; was first designed to increase the performance of the JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler like a lot of modern JavaScript engines such as SpiderMonkey or Rhino (Mozilla) are doing. The main difference with V8 is that it doesn‚Äôt produce bytecode or any intermediate code.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between put and patch?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;PUT and PATCH are HTTP verbs and they both relate to updating a resource. The main difference between PUT and PATCH requests are in the way the server processes the enclosed entity to modify the resource identified by the Request-URI.&lt;/p&gt; 
&lt;p&gt;In a PUT request, the enclosed entity is considered to be a modified version of the resource stored on the origin server, and the client is requesting that the stored version be replaced.&lt;/p&gt; 
&lt;p&gt;With PATCH, however, the enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version.&lt;/p&gt; 
&lt;p&gt;Also, another difference is that when you want to update a resource with PUT request, you have to send the full payload as the request whereas with PATCH, you only send the parameters which you want to update.&lt;/p&gt; 
&lt;p&gt;The most commonly used HTTP verbs POST, GET, PUT, DELETE are similar to CRUD (Create, Read, Update and Delete) operations in database. We specify these HTTP verbs in the capital case. So, the below is the comparison between them.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; - create&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; - read&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; - update&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; - delete&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: Submits a partial modification to a resource. If you only need to update one field for the resource, you may want to use the PATCH method.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;List types of Http requests supported by Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The HTTP core module is a key module to Node.js networking.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const http = require(&#39;http&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;http.METHODS&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;require(&#39;http&#39;).METHODS
[ &#39;ACL&#39;,
  &#39;BIND&#39;,
  &#39;CHECKOUT&#39;,
  &#39;CONNECT&#39;,
  &#39;COPY&#39;,
  &#39;DELETE&#39;,
  &#39;GET&#39;,
  &#39;HEAD&#39;,
  &#39;LINK&#39;,
  &#39;LOCK&#39;,
  &#39;M-SEARCH&#39;,
  &#39;MERGE&#39;,
  &#39;MKACTIVITY&#39;,
  &#39;MKCALENDAR&#39;,
  &#39;MKCOL&#39;,
  &#39;MOVE&#39;,
  &#39;NOTIFY&#39;,
  &#39;OPTIONS&#39;,
  &#39;PATCH&#39;,
  &#39;POST&#39;,
  &#39;PROPFIND&#39;,
  &#39;PROPPATCH&#39;,
  &#39;PURGE&#39;,
  &#39;PUT&#39;,
  &#39;REBIND&#39;,
  &#39;REPORT&#39;,
  &#39;SEARCH&#39;,
  &#39;SUBSCRIBE&#39;,
  &#39;TRACE&#39;,
  &#39;UNBIND&#39;,
  &#39;UNLINK&#39;,
  &#39;UNLOCK&#39;,
  &#39;UNSUBSCRIBE&#39; ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;http.STATUS_CODES&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;require(&#39;http&#39;).STATUS_CODES
{ &#39;100&#39;: &#39;Continue&#39;,
&#39;101&#39;: &#39;Switching Protocols&#39;,
&#39;102&#39;: &#39;Processing&#39;,
&#39;200&#39;: &#39;OK&#39;,
&#39;201&#39;: &#39;Created&#39;,
&#39;202&#39;: &#39;Accepted&#39;,
&#39;203&#39;: &#39;Non-Authoritative Information&#39;,
&#39;204&#39;: &#39;No Content&#39;,
&#39;205&#39;: &#39;Reset Content&#39;,
&#39;206&#39;: &#39;Partial Content&#39;,
&#39;207&#39;: &#39;Multi-Status&#39;,
&#39;208&#39;: &#39;Already Reported&#39;,
&#39;226&#39;: &#39;IM Used&#39;,
&#39;300&#39;: &#39;Multiple Choices&#39;,
&#39;301&#39;: &#39;Moved Permanently&#39;,
&#39;302&#39;: &#39;Found&#39;,
&#39;303&#39;: &#39;See Other&#39;,
&#39;304&#39;: &#39;Not Modified&#39;,
&#39;305&#39;: &#39;Use Proxy&#39;,
&#39;307&#39;: &#39;Temporary Redirect&#39;,
&#39;308&#39;: &#39;Permanent Redirect&#39;,
&#39;400&#39;: &#39;Bad Request&#39;,
&#39;401&#39;: &#39;Unauthorized&#39;,
&#39;402&#39;: &#39;Payment Required&#39;,
&#39;403&#39;: &#39;Forbidden&#39;,
&#39;404&#39;: &#39;Not Found&#39;,
&#39;405&#39;: &#39;Method Not Allowed&#39;,
&#39;406&#39;: &#39;Not Acceptable&#39;,
&#39;407&#39;: &#39;Proxy Authentication Required&#39;,
&#39;408&#39;: &#39;Request Timeout&#39;,
&#39;409&#39;: &#39;Conflict&#39;,
&#39;410&#39;: &#39;Gone&#39;,
&#39;411&#39;: &#39;Length Required&#39;,
&#39;412&#39;: &#39;Precondition Failed&#39;,
&#39;413&#39;: &#39;Payload Too Large&#39;,
&#39;414&#39;: &#39;URI Too Long&#39;,
&#39;415&#39;: &#39;Unsupported Media Type&#39;,
&#39;416&#39;: &#39;Range Not Satisfiable&#39;,
&#39;417&#39;: &#39;Expectation Failed&#39;,
&#39;418&#39;: &#39;I\&#39;m a teapot&#39;,
&#39;421&#39;: &#39;Misdirected Request&#39;,
&#39;422&#39;: &#39;Unprocessable Entity&#39;,
&#39;423&#39;: &#39;Locked&#39;,
&#39;424&#39;: &#39;Failed Dependency&#39;,
&#39;425&#39;: &#39;Unordered Collection&#39;,
&#39;426&#39;: &#39;Upgrade Required&#39;,
&#39;428&#39;: &#39;Precondition Required&#39;,
&#39;429&#39;: &#39;Too Many Requests&#39;,
&#39;431&#39;: &#39;Request Header Fields Too Large&#39;,
&#39;451&#39;: &#39;Unavailable For Legal Reasons&#39;,
&#39;500&#39;: &#39;Internal Server Error&#39;,
&#39;501&#39;: &#39;Not Implemented&#39;,
&#39;502&#39;: &#39;Bad Gateway&#39;,
&#39;503&#39;: &#39;Service Unavailable&#39;,
&#39;504&#39;: &#39;Gateway Timeout&#39;,
&#39;505&#39;: &#39;HTTP Version Not Supported&#39;,
&#39;506&#39;: &#39;Variant Also Negotiates&#39;,
&#39;507&#39;: &#39;Insufficient Storage&#39;,
&#39;508&#39;: &#39;Loop Detected&#39;,
&#39;509&#39;: &#39;Bandwidth Limit Exceeded&#39;,
&#39;510&#39;: &#39;Not Extended&#39;,
&#39;511&#39;: &#39;Network Authentication Required&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Making HTTP Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const request = require(&#39;request&#39;);

request(&#39;https://nodejs.org/&#39;, function(err, res, body) {
    console.log(body);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The first argument to request can either be a URL string, or an object of options. Here are some of the more common options you&#39;ll encounter in your applications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt;: The destination URL of the HTTP request&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt;: The HTTP method to be used (GET, POST, DELETE, etc)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt;: An object of HTTP headers (key-value) to be set in the request&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;form&lt;/strong&gt;: An object containing key-value form data&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const request = require(&#39;request&#39;);

const options = {
    url: &#39;https://nodejs.org/file.json&#39;,
    method: &#39;GET&#39;,
    headers: {
        &#39;Accept&#39;: &#39;application/json&#39;,
        &#39;Accept-Charset&#39;: &#39;utf-8&#39;,
        &#39;User-Agent&#39;: &#39;my-reddit-client&#39;
    }
};

request(options, function(err, res, body) {
    let json = JSON.parse(body);
    console.log(json);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using the options object, this request uses the GET method to retrieve JSON data directly from Reddit, which is returned as a string in the body field. From here, you can use &lt;code&gt;JSON.parse&lt;/code&gt; and use the data as a normal JavaScript object.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why to use Express.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;ExpressJS is a prebuilt NodeJS framework that can help you in creating server-side web applications faster and smarter. Simplicity, minimalism, flexibility, scalability are some of its characteristics and since it is made in NodeJS itself, it inherited its performance as well.&lt;/p&gt; 
&lt;p&gt;Express 3.x is a light-weight web application framework to help organize your web application into an MVC architecture on the server side. You can then use a database like &lt;code&gt;MongoDB&lt;/code&gt; with &lt;code&gt;Mongoose&lt;/code&gt; (for modeling) to provide a backend for your Node.js application. Express.js basically helps you manage everything, from routes, to handling requests and views.&lt;/p&gt; 
&lt;p&gt;It has become the standard server framework for node.js. Express is the backend part of something known as the MEAN stack. The MEAN is a free and open-source JavaScript software stack for building dynamic web sites and web applications which has the following components;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; - The standard NoSQL database&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Express.js&lt;/strong&gt; - The default web applications framework&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Angular.js&lt;/strong&gt; - The JavaScript MVC framework used for web applications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; - Framework used for scalable server-side and networking applications.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The Express.js framework makes it very easy to develop an application which can be used to handle multiple types of requests like the GET, PUT, and POST and DELETE requests.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;using Express&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var express=require(&#39;express&#39;);
var app=express();
app.get(&#39;/&#39;,function(req,res) {
  res.send(&#39;Hello World!&#39;);
});
var server=app.listen(3000,function() {});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Write the steps for setting up an Express JS application?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Install Express Generator&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node&amp;gt;npm install -g express-generator
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Create an Express Project&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node&amp;gt;express --view=&quot;ejs&quot; nodetest1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3. Edit Dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MAKE SURE TO CD INTO YOUR nodetest FOLDER. OK, now we have some basic structure in there, but we&#39;re not quite done. You&#39;ll note that the express-generator routine created a file called package.json in your nodetest1 directory. Open this up in a text editor and it&#39;ll look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// C:\node\nodetest1\package.json
{
  &quot;name&quot;: &quot;nodetest1&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;
  },
  &quot;dependencies&quot;: {
    &quot;cookie-parser&quot;: &quot;~1.4.3&quot;,
    &quot;debug&quot;: &quot;~2.6.9&quot;,
    &quot;ejs&quot;: &quot;~2.5.7&quot;,
    &quot;express&quot;: &quot;~4.16.0&quot;,
    &quot;http-errors&quot;: &quot;~1.6.2&quot;,
    &quot;morgan&quot;: &quot;~1.9.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a basic JSON file describing our app and its dependencies. We need to add a few things to it. Specifically, calls for MongoDB and Monk.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node\nodetest1&amp;gt;npm install --save monk@^6.0.6 mongodb@^3.1.13
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4. Install Dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node\nodetest1&amp;gt;npm install
C:\node\nodetest1&amp;gt;npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Node Console&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt; nodetest1@0.0.0 start C:\node\nodetest1
&amp;gt; node ./bin/www
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Since node is a single threaded process, how to make use of all CPUs?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; 
 &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; 
 &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A single instance of Node.js runs in a single thread. To take advantage of multi-core systems, the user will sometimes want to launch a cluster of Node.js processes to handle the load. The cluster module allows easy creation of child processes that all share server ports.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const cluster = require(&#39;cluster&#39;);
const http = require(&#39;http&#39;);
const numCPUs = require(&#39;os&#39;).cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i &amp;lt; numCPUs; i++) {
    cluster.fork();
  }

  cluster.on(&#39;exit&#39;, (worker, code, signal) =&amp;gt; {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) =&amp;gt; {
    res.writeHead(200);
    res.end(&#39;hello world\n&#39;);
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Running Node.js will now share port 8000 between the workers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node server.js
Master 3596 is running
Worker 4324 started
Worker 4520 started
Worker 6056 started
Worker 5644 started
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The worker processes are spawned using the &lt;code&gt;child_process.fork()&lt;/code&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.&lt;/p&gt; 
&lt;p&gt;The cluster module supports two methods of distributing incoming connections.&lt;/p&gt; 
&lt;p&gt;The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.&lt;/p&gt; 
&lt;p&gt;The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What does emitter do and what is dispatcher?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js core API is based on asynchronous event-driven architecture in which certain kind of objects called emitters periodically emit events that cause listener objects to be called.&lt;/p&gt; 
&lt;p&gt;All objects that emit events are members of EventEmitter class. These objects expose an eventEmitter.on() function that allows one or more functions to be attached to named events emitted by the object.&lt;/p&gt; 
&lt;p&gt;When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. All values returned by the called listeners are ignored and will be discarded.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const EventEmitter = require(&#39;events&#39;);
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on(&#39;event&#39;, function(a, b) {
  console.log(a, b, this);
  // Prints:
  //   Technoetics Club MyEmitter {
  //     domain: null,
  //     _events: { event: [Function] },
  //     _eventsCount: 1,
  //     _maxListeners: undefined }
});
myEmitter.emit(&#39;event&#39;,&#39;Technoetics&#39;, &#39;Club&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here we create a myEmitter object and emit event at the end which triggers the callback function and we are able to get the desired output.&lt;/p&gt; 
&lt;p&gt;By default, all listeners attached to a particular event object are called by the EventListener object synchronously in the order in which they are registered or attached to the event object.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Dispatcher&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Dispatcher has functionality not provided nor expected in EventEmitter, the most notable being waitFor, which allows a store to ensure that another store has been updated in response to an action before it proceeds.&lt;/p&gt; 
&lt;p&gt;Pattern-wise, the Dispatcher is also a singleton, whereas EventEmitter is an API that you might object-assign onto multiple stores.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to kill child processes that spawn their own child processes in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;If a child process in Node.js spawn their own child processes, kill() method will not kill the child process‚Äôs own child processes. For example, if I start a process that starts it‚Äôs own child processes via child_process module, killing that child process will not make my program to quit.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var spawn = require(&#39;child_process&#39;).spawn;
var child = spawn(&#39;my-command&#39;);

child.kill();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The program above will not quit if &lt;code&gt;my-command&lt;/code&gt; spins up some more processes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PID range hack&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;We can start child processes with {detached: true} option so those processes will not be attached to main process but they will go to a new group of processes. Then using process.kill(-pid) method on main process we can kill all processes that are in the same group of a child process with the same pid group. In my case, I only have one processes in this group.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var spawn = require(&#39;child_process&#39;).spawn;
var child = spawn(&#39;my-command&#39;, {detached: true});

process.kill(-child.pid);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note - before pid. This converts a pid to a group of pids for process kill() method.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What do you understand by Reactor Pattern in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Reactor Pattern is an idea of non-blocking I/O operations in Node.js. This pattern provides a handler(in case of Node.js, a callback function) that is associated with each I/O operation. When an I/O request is generated, it is submitted to a demultiplexer.&lt;/p&gt; 
&lt;p&gt;This demultiplexer is a notification interface that is used to handle concurrency in non-blocking I/O mode and collects every request in form of an event and queues each event in a queue. Thus, the demultiplexer provides the Event Queue, which we often hear. When a request is collected by the demultiplexer, it returns the control back to the system and does not blocks the I/O. At the same time, there is an Event Loop which iterates over the items in the Event Queue. Every event has a callback function associated with it, and that callback function is invoked when the Event Loop iterates.&lt;/p&gt; 
&lt;p&gt;The callback function further mostly have other callbacks associated within representing some asynchronous operations. These operations are inserted in the Event Queue by the demultiplexer and are ready to be processed once the Event Loop iterates over them. That is why calls to other operations must be asynchronous.&lt;/p&gt; 
&lt;p&gt;When all the items in the Event Queue are processed and there are no pending operations left, Node.js terminates the application automatically.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ol&gt; 
 &lt;li&gt;The application generates a new I/O operation by submitting a request to the Event Demultiplexer. The application also specifies a handler, which will be invoked when the operation completes. Submitting a new request to the Event Demultiplexer is a non-blocking call and it immediately returns the control back to the application.&lt;/li&gt; 
 &lt;li&gt;When a set of I/O operations completes, the Event Demultiplexer pushes the new events into the Event Queue.&lt;/li&gt; 
 &lt;li&gt;At this point, the Event Loop iterates over the items of the Event Queue.&lt;/li&gt; 
 &lt;li&gt;For each event, the associated handler is invoked.&lt;/li&gt; 
 &lt;li&gt;The handler, which is part of the application code, will give back the control to the Event Loop when its execution completes (5a). However, new asynchronous operations might be requested during the execution of the handler (5b), causing new operations to be inserted in the Event Demultiplexer (1), before the control is given back to the Event Loop.&lt;/li&gt; 
 &lt;li&gt;When all the items in the Event Queue are processed, the loop will block again on the Event Demultiplexer which will then trigger another cycle.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the key features of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous event driven IO helps concurrent request handling&lt;/strong&gt; ‚Äì All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the processing of other requests. Thus it will not wait for the response from the previous requests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast in Code execution&lt;/strong&gt; ‚Äì Node.js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node.js also become faster.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Single Threaded but Highly Scalable&lt;/strong&gt; ‚Äì Node.js uses a single thread model for event looping. The response from these events may or may not reach the server immediately. However, this does not block other operations. Thus making Node.js highly scalable. Traditional servers create limited threads to handle requests while Node.js creates a single thread that provides service to much larger numbers of such requests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js library uses JavaScript&lt;/strong&gt; ‚Äì This is another important aspect of Node.js from the developer‚Äôs point of view. The majority of developers are already well-versed in JavaScript. Hence, development in Node.js becomes easier for a developer who knows JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;There is an Active and vibrant community for the Node.js framework&lt;/strong&gt; ‚Äì The active community always keeps the framework updated with the latest trends in the web development.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No Buffering&lt;/strong&gt; ‚Äì Node.js applications never buffer any data. They simply output the data in chunks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are globals in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;There are three keywords in Node.js which constitute as Globals. These are Global, Process, and Buffer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Global&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Global keyword represents the global namespace object. It acts as a container for all other &lt;code&gt;global&lt;/code&gt; objects. If we type &lt;code&gt;console.log(global)&lt;/code&gt;, it will print out all of them.&lt;/p&gt; 
&lt;p&gt;An important point to note about the global objects is that not all of them are in the global scope, some of them fall in the module scope. So, it is wise to declare them without using the var keyword or add them to Global object.&lt;/p&gt; 
&lt;p&gt;Variables declared using the var keyword become local to the module whereas those declared without it get subscribed to the global object.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Process&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is also one of the global objects but includes additional functionality to turn a synchronous function into an async callback. There is no boundation to access it from anywhere in the code. It is the instance of the EventEmitter class. And each node application object is an instance of the Process object.&lt;/p&gt; 
&lt;p&gt;It primarily gives back the information about the application or the environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.execPath&amp;gt;&lt;/code&gt; ‚Äì to get the execution path of the Node app.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.Version&amp;gt;&lt;/code&gt; ‚Äì to get the Node version currently running.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.platform&amp;gt;&lt;/code&gt; ‚Äì to get the server platform.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some of the other useful Process methods are as follows.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.memoryUsage&amp;gt;&lt;/code&gt; ‚Äì To know the memory used by Node application.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.NextTick&amp;gt;&lt;/code&gt; ‚Äì To attach a callback function that will get called during the next loop. It can cause a delay in executing a function.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. Buffer&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Buffer is a class in Node.js to handle binary data. It is similar to a list of integers but stores as a raw memory outside the V8 heap.&lt;/p&gt; 
&lt;p&gt;We can convert JavaScript string objects into Buffers. But it requires mentioning the encoding type explicitly.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;ascii&amp;gt;&lt;/code&gt; ‚Äì Specifies 7-bit ASCII data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;utf8&amp;gt;&lt;/code&gt; ‚Äì Represents multibyte encoded Unicode char set.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;utf16le&amp;gt;&lt;/code&gt; ‚Äì Indicates 2 or 4 bytes, little endian encoded Unicode chars.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;base64&amp;gt;&lt;/code&gt; ‚Äì Used for Base64 string encoding.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;hex&amp;gt;&lt;/code&gt; ‚Äì Encodes each byte as two hexadecimal chars.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is the syntax to use the Buffer class.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var buffer = new Buffer(string, [encoding]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command will allocate a new buffer holding the string with &lt;code&gt;utf8&lt;/code&gt; as the default encoding. However, if you like to write a &lt;code&gt;string&lt;/code&gt; to an existing buffer object, then use the following line of code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;buffer.write(string)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This class also offers other methods like &lt;code&gt;readInt8&lt;/code&gt; and &lt;code&gt;writeUInt8&lt;/code&gt; that allows read/write from various types of data to the buffer.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is chaining process in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It is an approach to connect the output of one stream to the input of another stream, thus creating a chain of multiple stream operations.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a control flow function? what are the steps does it execute?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It is a generic piece of code which runs in between several asynchronous function calls is known as control flow function.&lt;/p&gt; 
&lt;p&gt;It executes the following steps.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Control the order of execution.&lt;/li&gt; 
 &lt;li&gt;Collect data.&lt;/li&gt; 
 &lt;li&gt;Limit concurrency.&lt;/li&gt; 
 &lt;li&gt;Call the next step in the program.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is npm in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;NPM stands for Node Package Manager. It provides following two main functionalities.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It works as an Online repository for node.js packages/modules which are present at &amp;lt;nodejs.org&amp;gt;.&lt;/li&gt; 
 &lt;li&gt;It works as Command line utility to install packages, do version management and dependency management of Node.js packages. NPM comes bundled along with Node.js installable. We can verify its version using the following command-&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NPM helps to install any Node.js module using the following command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install &amp;lt;Module Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, following is the command to install a famous Node.js web framework module called express-&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;When to use Node.js and when not to use it?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;When to use Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is ideal to use Node.js for developing streaming or event-based real-time applications that require less CPU usage such as.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Chat applications.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Game servers -- Node.js is good for fast and high-performance servers, that face the need to handle thousands of user requests simultaneously.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Good For A Collaborative Environment -- It is suitable for environments where multiple people work together. For example, they post their documents, modify them by doing check-out and check-in of these documents. Node.js supports such situations by creating an event loop for every change made to the document. The ‚ÄúEvent loop‚Äù feature of Node.js enables it to handle multiple events simultaneously without getting blocked.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Advertisement Servers -- Here again, we have servers that handle thousands of request for downloading advertisements from a central host. And Node.js is an ideal solution to handle such tasks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Streaming Servers -- Another ideal scenario to use Node.js is for multimedia streaming servers where clients fire request‚Äôs towards the server to download different multimedia contents from it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To summarize, it‚Äôs good to use Node.js, when you need high levels of concurrency but less amount of dedicated CPU time.&lt;/p&gt; 
&lt;p&gt;Last but not the least, since Node.js uses JavaScript internally, so it fits best for building client-side applications that also use JavaScript.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When to not use Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;However, we can use Node.js for a variety of applications. But it is a single threaded framework, so we should not use it for cases where the application requires long processing time. If the server is doing some calculation, it won‚Äôt be able to process any other requests. Hence, Node.js is best when processing needs less dedicated CPU time.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain how does Node.js work?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;A Node.js application creates a single thread on its invocation. Whenever Node.js receives a request, it first completes its processing before moving on to the next request.&lt;/p&gt; 
&lt;p&gt;Node.js works asynchronously by using the event loop and callback functions, to handle multiple requests coming in parallel. An Event Loop is a functionality which handles and processes all your external events and just converts them to a callback function. It invokes all the event handlers at a proper time. Thus, lots of work is done on the back-end, while processing a single request, so that the new incoming request doesn‚Äôt have to wait if the processing is not complete.&lt;/p&gt; 
&lt;p&gt;While processing a request, Node.js attaches a callback function to it and moves it to the back-end. Now, whenever its response is ready, an event is called which triggers the associated callback function to send this response.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Is Node.js entirely based on a single-thread?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Yes, it is true that Node.js processes all requests on a single thread. But it is just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.&lt;/p&gt; 
&lt;p&gt;Moreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.&lt;/p&gt; 
&lt;p&gt;To explain it practically, let‚Äôs assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to make post request in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Following code snippet can be used to make a Post Request in Node.js.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var request = require(&#39;request&#39;);
    request.post(&#39;http://www.example.com/action&#39;, { form: { key: &#39;value&#39; } },
    function (error, response, body) {
        if (!error &amp;amp;&amp;amp; response.statusCode == 200) {
            console.log(body)
        }
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Can you create http server in Node.js, explain the code used for it?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Yes, we can create HTTP Server in Node.js. We can use the &lt;code&gt;&amp;lt;http-server&amp;gt;&lt;/code&gt; command to do so.&lt;/p&gt; 
&lt;p&gt;Following is the sample code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var http = require(&#39;http&#39;);
var requestListener = function (request, response) {
    response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
    response.end(&#39;Welcome Viewers\n&#39;);
}
var server = http.createServer(requestListener);
server.listen(4200); // The port where you want to start with.
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to load html in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;To load HTML in Node.js we have to change the ‚ÄúContent-type‚Äù in the HTML code from text/plain to text/html.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile(filename, &quot;binary&quot;, function(err, file) {
    if(err) { 
        response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
        response.write(err + &quot;\n&quot;);
        response.end();
        return;
    }

response.writeHead(200);
response.write(file, &quot;binary&quot;);
response.end();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we will modify this code to load an HTML page instead of plain text.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile(filename, &quot;binary&quot;, function(err, file) {
    if(err) { 
        response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/html&quot;});
        response.write(err + &quot;\n&quot;);
        response.end();
        return;
    }

response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
response.write(file);
response.end();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you listen on port 80 with Node?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Instead of running on port 80 we can redirect port 80 to your application&#39;s port (&amp;gt;1024) using&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between operational and programmer errors?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Operation errors are not bugs, but problems with the system, like request timeout or hardware failure. On the other hand programmer errors are actual bugs.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why npm shrinkwrap is useful?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;NPM shrinkwrap lets you lock down the ver¬≠sions of installed pack¬≠ages and their descen¬≠dant pack¬≠ages. It helps you use same package versions on all environments (development, staging, production) and also improve download and installation speed. Having same versions of packages on all environments can help you test systems and deploy with confidence. If all tests pass on one machine, you can be sure that it will pass on all other because you know that you use same code!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm shrinkwrap
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It should create new npm-shrinkwrap.json file with information about all packages you use.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is your favourite HTTP framework and why?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Express.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Express provides a thin layer on top of Node.js with web application features such as basic routing, middleware, template engine and static files serving, so the drastic I/O performance of Node.js doesn‚Äôt get compromised.&lt;/p&gt; 
&lt;p&gt;Express is a minimal, un-opinionated framework. it doesn‚Äôt apply any of the prevalent design patterns such as MVC, MVP, MVVM or whatever is trending out of the box. For fans of simplicity, this is a big plus among all other frameworks because you can build your application with your own preference and no unnecessary learning curve. This is especially advantageous when creating a new personal project with no historical burden, but as the project or developing team grows, lack of standardization may lead to extra work for project/code management, and worst case scenario it may lead to the inability to maintain.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Generator&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Even though the framework is un-opinionated, it does have the generator that generates specific project folder structure. After installing express-generator npm package and creating application skeleton with generator command, an application folder with clear hierarchy will be created to help you organize images, front-end static JavaScript, stylesheet files and HTML template files.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express-generator -g
express helloapp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Middleware&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Middleware are basically just functions that have full access to both request and response objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = express();

app.use(cookieParser());
app.use(bodyParser());
app.use(logger());
app.use(authentication());

app.get(&#39;/&#39;, function (req, res) {
  // ...
});

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An Express application is essentially Node.js with a host of middleware functions, whether you want to customize your own middleware or take advantage of the built-in middlewares of the framework, Express made the process natural and intuitive.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Template Engine&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Template engines allow developer to embed backend variables into HTML files, and when requested the template file will be rendered to plain HTML format with the variables interpolated with their actual values. By default, the express-generator uses Pug (originally known as Jade) template engine, but other options like Mustache and EJS also work with Express seamlessly.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Database Integration&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;As a minimal framework, Express does not consider database integration as a required aspect within its package, thus it leans toward no specific database usage whatsoever. While adopting a particular data storage technology, be it MySQL, MongoDB, PostgreSQL, Redis, ElasticSearch or something else, it‚Äôs just a matter of installing the particular npm package as database driver. These third party database drivers do not conform to unified syntax when doing CRUD instructions, which makes switching databases a big hassle and error prone.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the Challenges with Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Challenges with Node.js Application Maintenance&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Improper maintenance of an application can result in issues related to stability or flexibility, often leading to the app&#39;s failure. If the code is not well-written or if developers use outdated tools, the performance can suffer, and users might experience more bugs and app crashes. On top of that, poor-quality code can hamper the app‚Äôs scaling capacity and the further development of the application. In the worst case scenario, it might become impossible to introduce new features without rewriting the codebase from scratch.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Extensive stack&lt;/li&gt; 
 &lt;li&gt;Technical Debt&lt;/li&gt; 
 &lt;li&gt;Scalability challanges&lt;/li&gt; 
 &lt;li&gt;Poor documentation&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;How to Deal With Maintenance Problems&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Conduct code review&lt;/li&gt; 
 &lt;li&gt;Use microservices&lt;/li&gt; 
 &lt;li&gt;Improve code quality&lt;/li&gt; 
 &lt;li&gt;Test before new feature implementation&lt;/li&gt; 
 &lt;li&gt;Improve documentation&lt;/li&gt; 
 &lt;li&gt;Update the stack&lt;/li&gt; 
 &lt;li&gt;Dig into the roots&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between Node.js vs Ajax?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. AJAX&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;AJAX stands for Asynchronous Javascript and XML, it‚Äôs used to allow web pages (client-side) to update asynchronously by communicating with a web server and by exchanging data. This essentially means that applications can talk to a server in the background of the application. It uses some core components to function:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The browser &lt;code&gt;XMLHttpRequest&lt;/code&gt; object to request data from a server&lt;/li&gt; 
 &lt;li&gt;HTML/CSS to display or collect data&lt;/li&gt; 
 &lt;li&gt;DOM for dynamic display&lt;/li&gt; 
 &lt;li&gt;JSON/XML for interchanging the data&lt;/li&gt; 
 &lt;li&gt;Javascript to unify everything&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;2. Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Node.js allows the developers to develop a web application in a single language called JavaScript for both client side and server side.&lt;/p&gt; 
&lt;p&gt;Unlike the other programming languages, Node.js has its cycle of the event in the form of language which is very beneficial for high-performance and scalable application development.&lt;/p&gt; 
&lt;p&gt;It is required for those web applications where traffic rate is very high. Node.js is an event based I/O language and its response time is very high rather than the other traditional languages. It is being used by the famous websites like Linked in, Twitter and Gmail.&lt;/p&gt; 
&lt;p&gt;The runtime environment of Node.js interprets JavaScript, which is very easy and simple to understand and code. Due to this reason, even the developers find it easy going which keeps them happy and relaxed. It is pertinent for real-time collaborative apps.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How Node.js overcomes the problem of blocking of I/O operations?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js solves this problem by putting the event based model at its core, using an event loop instead of threads.&lt;/p&gt; 
&lt;p&gt;Node.js uses an event loop for this. An event loop is ‚Äúan entity that handles and processes external events and converts them into callback invocations‚Äù. Whenever data is needed nodejs registers a callback and sends the operation to this event loop. Whenever the data is available the callback is called.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Mention the steps by which you can async in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;ES 2017 introduced Asynchronous functions. Async functions are essentially a cleaner way to work with asynchronous code in JavaScript.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Async/Await&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The newest way to write asynchronous code in JavaScript.&lt;/li&gt; 
 &lt;li&gt;It is non blocking (just like promises and callbacks).&lt;/li&gt; 
 &lt;li&gt;Async/Await was created to simplify the process of working with and writing chained promises.&lt;/li&gt; 
 &lt;li&gt;Async functions return a Promise. If the function throws an error, the Promise will be rejected. If the function returns a value, the Promise will be resolved.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Syntax&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Normal Function
function add(x,y){
  return x + y;
}
// Async Function
async function add(x,y){
  return x + y;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Await&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Async functions can make use of the await expression. This will pause the async function and wait for the Promise to resolve prior to moving on.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function doubleAfter2Seconds(x) {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      resolve(x * 2);
    }, 2000);
  });
}

async function addAsync(x) {
  const a = await doubleAfter2Seconds(10);
  const b = await doubleAfter2Seconds(20);
  const c = await doubleAfter2Seconds(30);
  return x + a + b + c;
}


addAsync(10).then((sum) =&amp;gt; {
  console.log(sum);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the timing features of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The Performance Timing API provides an implementation of the W3C Performance Timeline specification. The purpose of the API is to support collection of high resolution performance metrics. This is the same Performance API as implemented in modern Web browsers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { PerformanceObserver, performance } = require(&#39;perf_hooks&#39;);

const obs = new PerformanceObserver((items) =&amp;gt; {
  console.log(items.getEntries()[0].duration);
  performance.clearMarks();
});
obs.observe({ entryTypes: [&#39;measure&#39;] });

performance.mark(&#39;A&#39;);
doSomeLongRunningProcess(() =&amp;gt; {
  performance.mark(&#39;B&#39;);
  performance.measure(&#39;A to B&#39;, &#39;A&#39;, &#39;B&#39;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;request&lt;/code&gt; module&lt;/strong&gt;&lt;br&gt; The popular request module has a built-in method to measure HTTP timings. You can enable it with the time property.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const request = require(&#39;request&#39;)

request({
  uri: &#39;https://nodejs.org&#39;,
  method: &#39;GET&#39;,
  time: true
}, (err, resp) =&amp;gt; {
  console.log(err || resp.timings)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is LTS releases of Node.js why should you care?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;An LTS(Long Term Support) version of Node.js receives all the critical bug fixes, security updates and performance&lt;/p&gt; 
&lt;p&gt;LTS versions of Node.js are supported for at least 18 months and are indicated by even version numbers (e.g. 4, 6, 8). They‚Äôre best for production since the LTS release line is focussed on stability and security, whereas the Current release line has a shorter lifespan and more frequent updates to the code. Changes to LTS versions are limited to bug fixes for stability, security updates, possible npm updates, documentation updates and certain performance improvements that can be demonstrated to not break existing applications.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why should you separate Express &#39;app&#39; and &#39;server&#39;?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Keeping the API declaration separated from the network related configuration (port, protocol, etc) allows testing the API in-process, without performing network calls, with all the benefits that it brings to the table: fast testing execution and getting coverage metrics of the code. It also allows deploying the same API under flexible and different network conditions. Bonus: better separation of concerns and cleaner code.&lt;/p&gt; 
&lt;p&gt;API declaration, should reside in app.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = express();
app.use(bodyParser.json());
app.use(&quot;/api/events&quot;, events.API);
app.use(&quot;/api/forms&quot;, forms);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Server network declaration, should reside in /bin/www:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = require(&#39;../app&#39;);
var http = require(&#39;http&#39;);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || &#39;3000&#39;);
app.set(&#39;port&#39;, port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between process.nextTick() and setImmediate()?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The difference between &lt;code&gt;process.nextTick()&lt;/code&gt; and &lt;code&gt;setImmediate()&lt;/code&gt; is that &lt;code&gt;process.nextTick()&lt;/code&gt; defers the execution of an action till the next pass around the event loop or it simply calls the callback function once the ongoing execution of the event loop is finished whereas &lt;code&gt;setImmediate()&lt;/code&gt; executes a callback on the next cycle of the event loop and it gives back to the event loop for executing any I/O operations.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between JavaScript and Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;| |JavaScript |Node JS | |-------|-----------|-----------| |Type |JavaScript is a programming language. It running in any web browser with a proper browser engine.| It is an interpreter and environment for JavaScript with some specific useful libraries which JavaScript programming can use separately.| |Utility |Mainly using for any client-side activity for a web application, like possible attribute validation or refreshing the page in a specific interval or provide some dynamic changes in web pages without refreshing the page.| It mainly used for accessing or performing any non-blocking operation of any operating system, like creating or executing a shell script or accessing any hardware specific information or running any backend job.| |Running Engine| JavaScript running any engine like Spider monkey (FireFox), JavaScript Core (Safari), V8 (Google Chrome).| Node JS only run in a V8 engine which mainly used by google chrome. And javascript program which will be written under this Node JS will be always run in V8 Engine.|&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the difference between Events and Callbacks?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single-threaded application, but it support concurrency via the concept of &lt;strong&gt;event&lt;/strong&gt; and &lt;strong&gt;callbacks&lt;/strong&gt;. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.&lt;/p&gt; 
&lt;p&gt;callback functions are called when an asynchronous function returns its result, whereas event handling works on the &lt;strong&gt;observer pattern&lt;/strong&gt;. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Callback&lt;/strong&gt;: A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: synchronous callback&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function greeting(name) {
  alert(&#39;Hello &#39; + name);
}

function processUserInput(callback) {
  var name = prompt(&#39;Please enter your name.&#39;);
  callback(name);
}

processUserInput(greeting);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Events&lt;/strong&gt;: Every action on a computer is an event. Node.js allows us to create and handle custom events easily by using events module. Event module includes &lt;code&gt;EventEmitter&lt;/code&gt; class which can be used to raise and handle custom events.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var event = require(&#39;events&#39;);  
var eventEmitter = new event.EventEmitter();  
  
//  Add listener function for Sum event  
eventEmitter.on(&#39;Sum&#39;, function(num1, num2) {  
    console.log(&#39;Total: &#39; + (Number(num1) + Number(num2)));  
});  

//  Call Event.  
eventEmitter.emit(&#39;Sum&#39;, &#39;10&#39;, &#39;20&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain RESTful Web Services in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It is an architectural style as well as an approach for communications purposes that is often used in various web services development. A REST Server simply provides access to resources and REST client accesses and modifies the resources using HTTP protocol.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;HTTP methods&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; ‚àí Provides read-only access to a resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; ‚àí Creates a new resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; ‚àí Removes a resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; ‚àí Updates an existing resource or creates a new resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;‚àí Update/modify a resource&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Principles of REST&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Uniform Interface&lt;/li&gt; 
 &lt;li&gt;Stateless&lt;/li&gt; 
 &lt;li&gt;Cacheable&lt;/li&gt; 
 &lt;li&gt;Client-Server&lt;/li&gt; 
 &lt;li&gt;Layered System&lt;/li&gt; 
 &lt;li&gt;Code on Demand (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;users.json&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
   &quot;user1&quot; : {
      &quot;id&quot;: 1,
      &quot;name&quot; : &quot;Ehsan Philip&quot;,
      &quot;age&quot; : 24
   },

   &quot;user2&quot; : {
      &quot;id&quot;: 2,
      &quot;name&quot; : &quot;Karim Jimenez&quot;,
      &quot;age&quot; : 22
   },

   &quot;user3&quot; : {
      &quot;id&quot;: 3,
      &quot;name&quot; : &quot;Giacomo Weir&quot;,
      &quot;age&quot; : 18
   }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;List Users&lt;/strong&gt; ( &lt;code&gt;GET&lt;/code&gt; method)&lt;/p&gt; 
&lt;p&gt;Let&#39;s implement our first RESTful API listUsers using the following code in a server.js file ‚àí&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

app.get(&#39;/listUsers&#39;, function (req, res) {
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      console.log( data );
      res.end( data );
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Add User&lt;/strong&gt; ( &lt;code&gt;POST&lt;/code&gt; method )&lt;/p&gt; 
&lt;p&gt;Following API will show you how to add new user in the list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

var user = {
   &quot;user4&quot; : {
      &quot;id&quot;: 4,
      &quot;name&quot; : &quot;Spencer Amos&quot;,
      &quot;age&quot; : 28
   }
}

app.post(&#39;/addUser&#39;, function (req, res) {
   // First read existing users.
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      data = JSON.parse( data );
      data[&quot;user4&quot;] = user[&quot;user4&quot;];
      console.log( data );
      res.end( JSON.stringify(data));
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Delete User&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

var id = 2;

app.delete(&#39;/deleteUser&#39;, function (req, res) {
   // First read existing users.
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      data = JSON.parse( data );
      delete data[&quot;user&quot; + 2];
      console.log( data );
      res.end( JSON.stringify(data));
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to handle file upload in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;express&lt;/strong&gt;: Popular web framework built on top of Node.js, used for creating REST-API.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;body-parser&lt;/strong&gt;: Parse incoming request bodies in a middleware&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;multer&lt;/strong&gt;: Middleware for handling multipart/form-data ‚Äî file uploads&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;1. Installing the dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express body-parser multer --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Package.json&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;name&quot;: &quot;file_upload&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;4.13.3&quot;,
    &quot;multer&quot;: &quot;1.1.0&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;should&quot;: &quot;~7.1.0&quot;,
    &quot;mocha&quot;: &quot;~2.3.3&quot;,
    &quot;supertest&quot;: &quot;~1.1.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3. Server.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&quot;express&quot;);
var bodyParser = require(&#39;body-parser&#39;);
var multer  = require(&#39;multer&#39;);
var app = express();

// for text/number data transfer between clientg and server
app.use(bodyParser());

var storage =   multer.diskStorage({
  destination: function (req, file, callback) {
    callback(null, &#39;./uploads&#39;);
  },
  filename: function (req, file, callback) {
    callback(null, file.fieldname + &#39;-&#39; + Date.now());
  }
});

var upload = multer({ storage : storage}).single(&#39;userPhoto&#39;);

app.get(&#39;/&#39;, function(req, res) {
      res.sendFile(__dirname + &quot;/index.html&quot;);
});

// POST: upload for single file upload
app.post(&#39;/api/photo&#39;, function(req, res) {
    upload(req,res,function(err) {
        if(err) {
            return res.end(&quot;Error uploading file.&quot;);
        }
        res.end(&quot;File is uploaded&quot;);
    });
});

app.listen(3000, function(){
    console.log(&quot;Listening on port 3000&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4. index.html&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Multer-File-Upload&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;MULTER File Upload | Single File Upload&amp;lt;/h1&amp;gt; 

    &amp;lt;form id = &quot;uploadForm&quot;
         enctype = &quot;multipart/form-data&quot;
         action = &quot;/api/photo&quot;
         method = &quot;post&quot;
    &amp;gt;
      &amp;lt;input type=&quot;file&quot; name=&quot;userPhoto&quot; /&amp;gt;
      &amp;lt;input type=&quot;submit&quot; value=&quot;Upload Image&quot; name=&quot;submit&quot;&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain the terms body-parser, cookie-parser, morgan, nodemon, pm2, serve-favicon, cors, dotenv, fs-extra, moment in Express JS?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;a) body-parser&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;body-parser&lt;/code&gt; extract the entire body portion of an incoming request stream and exposes it on &lt;code&gt;req.body&lt;/code&gt;. This body-parser module parses the JSON, buffer, string and URL encoded data submitted using HTTP POST request.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express ejs body-parser
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// server.js

var express = require(&#39;express&#39;)
var bodyParser = require(&#39;body-parser&#39;)

var app = express()

// create application/json parser
var jsonParser = bodyParser.json()

// create application/x-www-form-urlencoded parser
var urlencodedParser = bodyParser.urlencoded({ extended: false })

// POST /login gets urlencoded bodies
app.post(&#39;/login&#39;, urlencodedParser, function (req, res) {
  res.send(&#39;welcome, &#39; + req.body.username)
})

// POST /api/users gets JSON bodies
app.post(&#39;/api/users&#39;, jsonParser, function (req, res) {
  // create user in req.body
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;b) cookie-parser&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A cookie is a piece of data that is sent to the client-side with a request and is stored on the client-side itself by the Web Browser the user is currently using.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;cookie-parser&lt;/code&gt; middleware&#39;s cookieParser function takes a &lt;code&gt;secret&lt;/code&gt; string or array of strings as the first argument and an &lt;code&gt;options&lt;/code&gt; object as the second argument.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cookie-parser
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cookieParser = require(&#39;cookie-parser&#39;)

var app = express()
app.use(cookieParser())

app.get(&#39;/&#39;, function (req, res) {
  // Cookies that have not been signed
  console.log(&#39;Cookies: &#39;, req.cookies)

  // Cookies that have been signed
  console.log(&#39;Signed Cookies: &#39;, req.signedCookies)
})

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;c) morgan&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;HTTP request logger middleware for node.js.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install morgan
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: write logs to a file&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var fs = require(&#39;fs&#39;)
var morgan = require(&#39;morgan&#39;)
var path = require(&#39;path&#39;)

var app = express()

// create a write stream (in append mode)
var accessLogStream = fs.createWriteStream(path.join(__dirname, &#39;access.log&#39;), { flags: &#39;a&#39; })

// setup the logger
app.use(morgan(&#39;combined&#39;, { stream: accessLogStream }))

app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;hello, world!&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;d) nodemon&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nodemon is a utility that will monitor for any changes in source and automatically restart your server.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g nodemon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  // ...
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;nodemon server.js&quot;
  },
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;e) pm2&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;(rocess) &lt;strong&gt;M&lt;/strong&gt;(anager) &lt;strong&gt;2&lt;/strong&gt; (pm2) is a production process manager for Node.js applications with a built-in load balancer. It allows to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install pm2 -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Start an application&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pm2 start app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;[&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/quick-start/&quot;&gt;Read More&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;f) serve-favicon&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Node.js middleware for serving a favicon. The &lt;code&gt;serve-favicon&lt;/code&gt; module lets us exclude requests for the favicon in our logger middleware. It also caches the icon in memory to improve performance by reducing disk access. In addition, it provides an &lt;code&gt;ETag&lt;/code&gt; based on the contents of the icon, rather than file system properties.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install serve-favicon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var favicon = require(&#39;serve-favicon&#39;)
var path = require(&#39;path&#39;)

var app = express()
app.use(favicon(path.join(__dirname, &#39;public&#39;, &#39;favicon.ico&#39;)))

// Add your routes here, etc.

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;g) cors&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ross-&lt;strong&gt;O&lt;/strong&gt;rigin &lt;strong&gt;R&lt;/strong&gt;esource &lt;strong&gt;S&lt;/strong&gt;haring (CORS) headers allow apps running in the browser to make requests to servers on different domains (also known as origins). CORS headers are set on the server side - the HTTP server is responsible for indicating that a given HTTP request can be cross-origin. CORS defines a way in which a browser and server can interact and determine whether or not it is safe to allow a cross-origin request.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cors
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example: Enable All CORS Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cors = require(&#39;cors&#39;)
var app = express()

app.use(cors())

app.get(&#39;/products/:id&#39;, function (req, res, next) {
  res.json({msg: &#39;This is CORS-enabled for all origins!&#39;})
})

app.listen(8080, function () {
  console.log(&#39;CORS-enabled web server listening on port 80&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example: Enable CORS for a Single Route&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cors = require(&#39;cors&#39;)
var app = express()

app.get(&#39;/products/:id&#39;, cors(), function (req, res, next) {
  res.json({msg: &#39;This is CORS-enabled for a Single Route&#39;})
})

app.listen(8080, function () {
  console.log(&#39;CORS-enabled web server listening on port 80&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;h) dotenv&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;When a NodeJs application runs, it injects a global variable called &lt;code&gt;process.env&lt;/code&gt; which contains information about the state of environment in which the application is running. The &lt;code&gt;dotenv&lt;/code&gt; loads environment variables stored in the &lt;code&gt;.env&lt;/code&gt; file into &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install dotenv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .env

DB_HOST=localhost
DB_USER=admin
DB_PASS=root
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// config.js

const db = require(&#39;db&#39;)

db.connect({
  host: process.env.DB_HOST,
  username: process.env.DB_USER,
  password: process.env.DB_PASS
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;i) fs-extra&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fs-extra&lt;/code&gt; contains methods that aren&#39;t included in the vanilla Node.js fs package. Such as recursive &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, and &lt;code&gt;remove&lt;/code&gt;. It also uses graceful-fs to prevent &lt;code&gt;EMFILE&lt;/code&gt; errors.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install fs-extra
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs-extra&#39;)


// Async with callbacks:
fs.copy(&#39;/tmp/myfile&#39;, &#39;/tmp/mynewfile&#39;, err =&amp;gt; {
  if (err) return console.error(err)
  console.log(&#39;success!&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;j) moment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install moment --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Format Dates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment().format(&#39;MMMM Do YYYY, h:mm:ss a&#39;); // October 24th 2020, 3:15:22 pm
moment().format(&#39;dddd&#39;);                    // Saturday
moment().format(&quot;MMM Do YY&quot;);               // Oct 24th 20
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Relative Time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment(&quot;20111031&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 9 years ago
moment(&quot;20120620&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 8 years ago
moment().startOf(&#39;day&#39;).fromNow();        // 15 hours ago
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Calendar Time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment().subtract(10, &#39;days&#39;).calendar(); // 10/14/2020
moment().subtract(6, &#39;days&#39;).calendar();  // Last Sunday at 3:18 PM
moment().subtract(3, &#39;days&#39;).calendar();  // Last Wednesday at 3:18 PM
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does routing work in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Routing defines the way in which the client requests are handled by the application endpoints. We define routing using methods of the Express app object that correspond to HTTP methods; for example, &lt;code&gt;app.get()&lt;/code&gt; to handle &lt;code&gt;GET&lt;/code&gt; requests and &lt;code&gt;app.post&lt;/code&gt; to handle &lt;code&gt;POST&lt;/code&gt; requests, &lt;code&gt;app.all()&lt;/code&gt; to handle all HTTP methods and &lt;code&gt;app.use()&lt;/code&gt; to specify middleware as the callback function.&lt;/p&gt; 
&lt;p&gt;These routing methods &quot;listens&quot; for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Syntax&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.METHOD(PATH, HANDLER)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;app is an instance of express.&lt;/li&gt; 
 &lt;li&gt;METHOD is an &lt;code&gt;HTTP request method&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;PATH is a path on the server.&lt;/li&gt; 
 &lt;li&gt;HANDLER is the function executed when the route is matched.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;a) Route methods&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// GET method route
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;GET request&#39;)
})

// POST method route
app.post(&#39;/login&#39;, function (req, res) {
  res.send(&#39;POST request&#39;)
})

// ALL method route
app.all(&#39;/secret&#39;, function (req, res, next) {
  console.log(&#39;Accessing the secret section ...&#39;)
  next() // pass control to the next handler
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;b) Route paths&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Route paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.&lt;/p&gt; 
&lt;p&gt;The characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;()&lt;/code&gt; are subsets of their regular expression counterparts. The hyphen &lt;code&gt;(-)&lt;/code&gt; and the dot &lt;code&gt;(.)&lt;/code&gt; are interpreted literally by string-based paths.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This route path will match requests to /about.
app.get(&#39;/about&#39;, function (req, res) {
  res.send(&#39;about&#39;)
})


// This route path will match acd and abcd.
app.get(&#39;/ab?cd&#39;, function (req, res) {
  res.send(&#39;ab?cd&#39;)
})


// This route path will match butterfly and dragonfly
app.get(/.*fly$/, function (req, res) {
  res.send(&#39;/.*fly$/&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;c) Route parameters&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the &lt;code&gt;req.params&lt;/code&gt; object, with the name of the route parameter specified in the path as their respective keys.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/users/:userId&#39;, function (req, res) {
  res.send(req.params)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Response methods&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;| Method | Description | |-------------------|-------------------------------| |&lt;code&gt;res.download()&lt;/code&gt; |Prompt a file to be downloaded.| |&lt;code&gt;res.end()&lt;/code&gt; |End the response process.| |&lt;code&gt;res.json()&lt;/code&gt; |Send a JSON response.| |&lt;code&gt;res.jsonp()&lt;/code&gt; |Send a JSON response with JSONP support.| |&lt;code&gt;res.redirect()&lt;/code&gt; |Redirect a request.| |&lt;code&gt;res.render()&lt;/code&gt; |Render a view template.| |&lt;code&gt;res.send()&lt;/code&gt; |Send a response of various types.| |&lt;code&gt;res.sendFile()&lt;/code&gt; |Send a file as an octet stream.| |&lt;code&gt;res.sendStatus()&lt;/code&gt; |Set the response status code and send its string representation as the response body.|&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;d) Router method&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var router = express.Router()

// middleware that is specific to this router
router.use(function timeLog (req, res, next) {
  console.log(&#39;Time: &#39;, Date.now())
  next()
})

// define the home page route
router.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Birds home page&#39;)
})

// define the about route
router.get(&#39;/about&#39;, function (req, res) {
  res.send(&#39;About birds&#39;)
})

module.exports = router
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How node.js prevents blocking code?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Blocking vs Non-blocking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Blocking&lt;/strong&gt; is when the execution of additional JavaScript in the Node.js process must wait until a non-JavaScript operation completes. This happens because the event loop is unable to continue running JavaScript while a &lt;strong&gt;blocking&lt;/strong&gt; operation is occurring.&lt;/p&gt; 
&lt;p&gt;Synchronous methods in the Node.js standard library that use &lt;strong&gt;libuv&lt;/strong&gt; are the most commonly used blocking operations. Native modules may also have blocking methods. Blocking methods execute &lt;code&gt;synchronously&lt;/code&gt; and non-blocking methods execute &lt;code&gt;asynchronously&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Blocking
const fs = require(&#39;fs&#39;);
const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read
console.log(data);
moreWork(); // will run after console.log

// Non-blocking
const fs = require(&#39;fs&#39;);
fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {
  if (err) throw err;
  console.log(data);
});
moreWork(); // will run before console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between promises and async-await in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Promises&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A promise is used to handle the asynchronous result of an operation. JavaScript is designed to not wait for an asynchronous block of code to completely execute before other synchronous parts of the code can run. With Promises, we can defer the execution of a code block until an async request is completed. This way, other operations can keep running without interruption.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;States of Promises:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Pending&lt;/code&gt;: Initial State, before the Promise succeeds or fails.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Resolved&lt;/code&gt;: Completed Promise&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Rejected&lt;/code&gt;: Failed Promise, throw an error&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function logFetch(url) {
  return fetch(url)
    .then(response =&amp;gt; {
      console.log(response);
    })
    .catch(err =&amp;gt; {
      console.error(&#39;fetch failed&#39;, err);
    });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Async-Await&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Await&lt;/code&gt; is basically syntactic sugar for &lt;strong&gt;Promises&lt;/strong&gt;. It makes asynchronous code look more like synchronous/procedural code, which is easier for humans to understand.&lt;/p&gt; 
&lt;p&gt;Putting the keyword &lt;code&gt;async&lt;/code&gt; before a function tells the function to return a Promise. If the code returns something that is not a &lt;code&gt;Promise&lt;/code&gt;, then JavaScript automatically wraps it into a resolved promise with that value. The &lt;code&gt;await&lt;/code&gt; keyword simply makes JavaScript wait until that &lt;code&gt;Promise&lt;/code&gt; settles and then returns its result.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function logFetch(url) {
  try {
    const response = await fetch(url);
    console.log(response);
  }
  catch (err) {
    console.log(&#39;fetch failed&#39;, err);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;72Q. &lt;em&gt;&lt;strong&gt;How to use JSON Web Token (JWT) for authentication in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;p&gt;JSON Web Token (JWT) is an open standard that defines a compact and self-contained way of securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.&lt;/p&gt; 
&lt;p&gt;There are some advantages of using JWT for authorization:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Purely stateless. No additional server or infra required to store session information.&lt;/li&gt; 
 &lt;li&gt;It can be easily shared among services.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;JSON Web Tokens consist of three parts separated by dots (.), which are:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jwt.sign(payload, secretOrPrivateKey, [options, callback])
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt; - Consists of two parts: the type of token (i.e., JWT) and the signing algorithm (i.e., HS512)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Payload&lt;/strong&gt; - Contains the claims that provide information about a user who has been authenticated along with other information such as token expiration time.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt; - Final part of a token that wraps in the encoded header and payload, along with the algorithm and a secret&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install jsonwebtoken bcryptjs --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: AuthController.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var router = express.Router();
var bodyParser = require(&#39;body-parser&#39;);
var User = require(&#39;../user/User&#39;);

var jwt = require(&#39;jsonwebtoken&#39;);
var bcrypt = require(&#39;bcryptjs&#39;);
var config = require(&#39;../config&#39;);


router.use(bodyParser.urlencoded({ extended: false }));
router.use(bodyParser.json());

router.post(&#39;/register&#39;, function(req, res) {
  
  var hashedPassword = bcrypt.hashSync(req.body.password, 8);
  
  User.create({
    name : req.body.name,
    email : req.body.email,
    password : hashedPassword
  },
  function (err, user) {
    if (err) return res.status(500).send(&quot;There was a problem registering the user.&quot;)
    // create a token
    var token = jwt.sign({ id: user._id }, config.secret, {
      expiresIn: 86400 // expires in 24 hours
    });
    res.status(200).send({ auth: true, token: token });
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;config.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// config.js
module.exports = {
  &#39;secret&#39;: &#39;supersecret&#39;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;jwt.sign()&lt;/code&gt; method takes a payload and the secret key defined in &lt;code&gt;config.js&lt;/code&gt; as parameters. It creates a unique string of characters representing the payload. In our case, the payload is an object containing only the id of the user.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://www.npmjs.com/package/jsonwebtoken&quot;&gt;Reference&lt;/a&gt;]&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to build a microservices architecture with Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Microservices&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Microservices are a style of &lt;strong&gt;service-oriented architecture&lt;/strong&gt; (SOA) where the app is structured on an assembly of interconnected services. With microservices, the application architecture is built with lightweight protocols. The services are finely seeded in the architecture. Microservices disintegrate the app into smaller services and enable improved modularity.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;There are few things worth emphasizing about the superiority of microservices, and distributed systems generally, over monolithic architecture:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modularity ‚Äî responsibility for specific operations is assigned to separate pieces of the application&lt;/li&gt; 
 &lt;li&gt;Uniformity ‚Äî microservices interfaces (API endpoints) consist of a base URI identifying a data object and standard HTTP methods (GET, POST, PUT, PATCH and DELETE) used to manipulate the object&lt;/li&gt; 
 &lt;li&gt;Robustness ‚Äî component failures cause only the absence or reduction of a specific unit of functionality&lt;/li&gt; 
 &lt;li&gt;Maintainability ‚Äî system components can be modified and deployed independently&lt;/li&gt; 
 &lt;li&gt;Scalability ‚Äî instances of a service can be added or removed to respond to changes in demand.&lt;/li&gt; 
 &lt;li&gt;Availability ‚Äî new features can be added to the system while maintaining 100% availability.&lt;/li&gt; 
 &lt;li&gt;Testability ‚Äî new solutions can be tested directly in the production environment by implementing them for restricted segments of users to see how they behave in real life.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Creating Microservices with Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Step 01: Creating a Server to Accept Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This file is creating our server and assigns routes to process all requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//  server.js

const express = require(&#39;express&#39;)
const app = express();
const port = process.env.PORT || 3000;

const routes = require(&#39;./api/routes&#39;);
routes(app);
app.listen(port, function() {
   console.log(&#39;Server started on port: &#39; + port);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 02: Defining the routes&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The next step is to define the routes for the microservices and then assign each to a target in the controller. We have two endpoints. One endpoint called &quot;about&quot; that returns information about the application. And a &quot;distance&quot; endpoint that includes two path parameters, both Zip Codes of the Lego store. This endpoint returns the distance, in miles, between these two Zip Codes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const controller = require(&#39;./controller&#39;);

module.exports = function(app) {
   app.route(&#39;/about&#39;)
       .get(controller.about);
   app.route(&#39;/distance/:zipcode1/:zipcode2&#39;)
       .get(controller.getDistance);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 03: Adding Controller Logic&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Within the controller file, we are going to create a controller object with two properties. Those properties are the functions to handle the requests we defined in the routes module.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var properties = require(&#39;../package.json&#39;)
var distance = require(&#39;../service/distance&#39;);

var controllers = {
   about: function(req, res) {
       var aboutInfo = {
           name: properties.name,
           version: properties.version
       }
       res.json(aboutInfo);
   },
   getDistance: function(req, res) {
           distance.find(req, res, function(err, dist) {
               if (err)
                   res.send(err);
               res.json(dist);
           });
       },
};

module.exports = controllers;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to use Q promise in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;A promise is an object that represents the return value or the thrown exception that the function may eventually provide. A promise can also be used as a proxy for a remote object to overcome latency.&lt;/p&gt; 
&lt;p&gt;Promise is relatively an easy implementation for asynchronous operation. The promise object returned from the function represents an operation which is not completed yet, but it guarantees to the caller of the operation that the operation will be completed in future.&lt;/p&gt; 
&lt;p&gt;Promise has the following states:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Pending&lt;/strong&gt; - asynchronous operation is not yet completed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fulfilled&lt;/strong&gt; - asynchronous operation is completed successfully.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rejected&lt;/strong&gt; - asynchronous operation is terminated with an error.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Settled&lt;/strong&gt; - asynchronous operation is either fulfilled or rejected.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Callback&lt;/strong&gt; - function is executed if the promise is executed with value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Errback&lt;/strong&gt; - function is executed if the promise is rejected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Moving to Promises from Callback&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;On the first pass, promises can mitigate the &lt;strong&gt;Pyramid of Doom&lt;/strong&gt;: the situation where code marches to the right faster than it marches forward.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;step1(function (value1) {
    step2(value1, function(value2) {
        step3(value2, function(value3) {
            step4(value3, function(value4) {
                // Do something with value4
            });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With a promise library, it can flatten the pyramid.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Q.fcall(promisedStep1)
.then(promisedStep2)
.then(promisedStep3)
.then(promisedStep4)
.then(function (value4) {
    // Do something with value4
})
.catch(function (error) {
    // Handle any error from all above steps
})
.done();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://www.npmjs.com/package/q&quot;&gt;Reference&lt;/a&gt;]&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to implement Memcached in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Memcached&lt;/strong&gt; is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. Memcached is free and open-source software, licensed under the Revised BSD licence. Memcached runs on Unix-like operating systems (at least LINUX and OS X) and on Microsoft windows.&lt;/p&gt; 
&lt;p&gt;We can store data to memcached server in key pair format. So whenever any request come from the app can be matched with memcached server without any query from mysql/Nosql server. This increases the performance of the application.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install memcached
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Setting up the client&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The constructor of the memcached client take 2 different arguments server locations and options. Syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;var Memcached = require(&#39;memcached&#39;);
var memcached = new Memcached(Server locations, options);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example usage&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var Memcached = require(&#39;memcached&#39;);
// all global configurations should be applied to the .config object of the Client.
Memcached.config.poolSize = 25;

var memcached = new Memcached(&#39;localhost:11211&#39;, {retries:10,retry:10000,remove:true,failOverServers:[&#39;192.168.0.103:11211&#39;]});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;[&lt;a href=&quot;https://www.npmjs.com/package/memcached&quot;&gt;Reference&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to generate and verify checksum of the given string in Nodejs&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &lt;strong&gt;checksum&lt;/strong&gt; (aka &lt;strong&gt;hash sum&lt;/strong&gt;) calculation is a one-way process of mapping an extensive data set of variable length (e.g., message, file), to a smaller data set of a fixed length (hash). The length depends on a hashing algorithm.&lt;/p&gt; 
&lt;p&gt;For the checksum generation, we can use node &lt;code&gt;crypto()&lt;/code&gt; module. The module uses &lt;code&gt;createHash(algorithm)&lt;/code&gt; to create a checksum (hash) generator. The algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const crypto = require(&#39;crypto&#39;);

// To get a list of all available hash algorithms
crypto.getHashes() // [ &#39;md5&#39;, &#39;sha1&#39;, &#39;sha3-256&#39;, ... ]

  
// Create hash of SHA1 type
const key = &quot;MY_SECRET_KEY&quot;;


// &#39;digest&#39; is the output of hash function containing  
// only hexadecimal digits
hashPwd = crypto.createHash(&#39;sha1&#39;).update(key).digest(&#39;hex&#39;);
  
console.log(hashPwd); //ef5225a03e4f9cc953ab3c4dd41f5c4db7dc2e5b
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;Explain Error Handling in Nodejs?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to use locale (i18n) in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;What are the types of memory leaks in node.js&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to implement a Sleep function?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How does the cluster load balance work in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;What is daemon process? how to implement it in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to synchronize data between multiple clients on node.js server?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
  </channel>
</rss>
