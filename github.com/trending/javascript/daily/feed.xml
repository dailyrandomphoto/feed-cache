<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Fri, 18 Dec 2020 01:50:01 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>vercel/next.js</title>
      <link>https://github.com/vercel/next.js</link>
      <description>&lt;p&gt;The React Framework&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit 
 &lt;!-- raw HTML omitted --&gt;https://nextjs.org/learn
 &lt;!-- raw HTML omitted --&gt; to get started with Next.js.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://nextjs.org/docs&quot;&gt;https://nextjs.org/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; 
&lt;h2&gt;Who is using Next.js?&lt;/h2&gt; 
&lt;p&gt;Next.js is used by the world&#39;s leading companies. Check out the &lt;a href=&quot;https://nextjs.org/showcase&quot;&gt;Next.js Showcase&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The Next.js community can be found on &lt;a href=&quot;https://github.com/vercel/next.js/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; 
&lt;p&gt;To chat with other community members you can join the &lt;a href=&quot;https://nextjs.org/discord&quot;&gt;Next.js Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/vercel/next.js/blob/canary/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; applies to all Next.js community channels.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/vercel/next.js/canary/contributing.md&quot;&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Arunoda Susiripala (&lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;@arunoda&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/arunoda-zeit&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tim Neutkens (&lt;a href=&quot;https://twitter.com/timneutkens&quot;&gt;@timneutkens&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/timneutkens&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Naoyuki Kanezawa (&lt;a href=&quot;https://twitter.com/nkzawa&quot;&gt;@nkzawa&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/nkzawa&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tony Kovanen (&lt;a href=&quot;https://twitter.com/tonykovanen&quot;&gt;@tonykovanen&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Guillermo Rauch (&lt;a href=&quot;https://twitter.com/rauchg&quot;&gt;@rauchg&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/rauchg&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dan Zajdband (&lt;a href=&quot;https://twitter.com/impronunciable&quot;&gt;@impronunciable&lt;/a&gt;) – Knight-Mozilla / Coral Project&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>RobinLinus/snapdrop</title>
      <link>https://github.com/RobinLinus/snapdrop</link>
      <description>&lt;p&gt;A Progressive Web App for local file sharing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Snapdrop&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://snapdrop.net&quot;&gt;Snapdrop&lt;/a&gt;: local file sharing in your browser. Inspired by Apple&#39;s Airdrop.&lt;/p&gt; 
&lt;h4&gt;Snapdrop is built with the following awesome technologies:&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vanilla HTML5 / ES6 / CSS3&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://de.wikipedia.org/wiki/Progressive_Web_App&quot;&gt;Progressive Web App&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://webrtc.org/&quot;&gt;WebRTC&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.websocket.org/&quot;&gt;WebSockets&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Have any questions? You can read our &lt;a href=&quot;https://raw.githubusercontent.com/RobinLinus/snapdrop/master/docs/faq.md&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you want to self-host your own instance, &lt;a href=&quot;https://raw.githubusercontent.com/RobinLinus/snapdrop/master/docs/local-dev.md&quot;&gt;you can with docker&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Support the Snapdrop Community&lt;/h2&gt; 
&lt;p&gt;Snapdrop is free. Still, we have to pay for the server. If you want to contribute, please use PayPal:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=74D2NE84JHCWG&amp;amp;source=url&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;or Bitcoin:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://coins.github.io/thx/#1K9zQ8f4iTyhKyHWmiDKt21cYX2QSDckWB?label=Snapdrop&amp;amp;message=Thanks!%20Your%20contribution%20helps%20to%20keep%20Snapdrop%20free%20for%20everybody!&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Alternatively, you can become a &lt;a href=&quot;https://github.com/sponsors/RobinLinus&quot;&gt;Github Sponsor&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Thanks a lot for supporting free and open software!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PipedreamHQ/pipedream</title>
      <link>https://github.com/PipedreamHQ/pipedream</link>
      <description>&lt;p&gt;Serverless integration and compute platform. Free for developers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://i.ibb.co/LPhXtH1/logo.png&quot; alt=&quot;pipedream&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Pipedream is a serverless integration and compute platform.&lt;/p&gt; 
&lt;p&gt;We provide a free, hosted platform that makes it easy to connect apps and develop, execute and maintain event-driven workflows. The platform has over 300 fully integrated applications with managed authentication and support for over 1M npm packages.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Key Features&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/#event-sources&quot;&gt;Event Sources&lt;/a&gt; - Open source &lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/components&quot;&gt;components&lt;/a&gt; that emit events from services (Github, Slack, Airtable, RSS &amp;amp; more)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/#workflows&quot;&gt;Workflows&lt;/a&gt; - A sequence of linear steps - just Node.js code - triggered by an event (via event source, HTTP or timer)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/#actions&quot;&gt;Actions&lt;/a&gt; - Pre-built code steps that you can use in a workflow to perform common operations across Pipedream&#39;s 300+ API integrations, for example: sending email, adding a row to a Google Sheet, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/#destinations&quot;&gt;Destinations&lt;/a&gt; - Deliver events asynchronously to common destinations like Amazon S3, Snowflake, HTTP and email&lt;/li&gt; 
 &lt;li&gt;Serverless - No server or cloud resources to manage&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/#pricing&quot;&gt;Free&lt;/a&gt; - No fees for individual developers (see &lt;a href=&quot;https://docs.pipedream.com/limits/&quot;&gt;limits&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Product Demo&lt;/strong&gt;: &lt;a href=&quot;https://www.youtube.com/watch?v=hJ-KRbp6EO8&amp;amp;feature=youtu.be&quot;&gt;YouTube&lt;/a&gt; (5 minutes)&lt;/p&gt; 
&lt;p&gt;You can also &lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/#getting-support&quot;&gt;get support&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/#found-a-bug-have-a-feature-to-suggest&quot;&gt;raise a bug or feature request&lt;/a&gt;, or &lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/#security-disclosures&quot;&gt;file a security disclosure&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Event Sources&lt;/h2&gt; 
&lt;p&gt;Pipedream receives data via event sources. Event sources are open source, run on Pipedream&#39;s infrastructure and collect data from your own application and/or services like Github, DropBox, Zoom, RSS feeds, and more.&lt;/p&gt; 
&lt;p&gt;Event sources emit new events produced by the service, which can trigger Pipedream workflows, or which you can consume using &lt;a href=&quot;https://docs.pipedream.com/api/rest/&quot;&gt;Pipedream&#39;s REST API&lt;/a&gt; or a private, real-time &lt;a href=&quot;https://docs.pipedream.com/api/sse/&quot;&gt;SSE stream&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here is the simplest event source possible, an HTTP event source:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = {
  name: &quot;http&quot;,
  version: &quot;0.0.1&quot;,
  props: {
    http: &quot;$.interface.http&quot;,
  },
  run(event) {
    console.log(event); // event contains the method, payload, etc.
  },
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Popular Event Sources:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/components/airtable&quot;&gt;Airtable&lt;/a&gt; (&lt;a href=&quot;https://pipedream.com/sources/new?app=airtable&quot;&gt;deploy&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/components/aws&quot;&gt;AWS&lt;/a&gt; (&lt;a href=&quot;https://pipedream.com/sources/new?app=aws&quot;&gt;deploy&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/components/dropbox&quot;&gt;Dropbox&lt;/a&gt; (&lt;a href=&quot;https://pipedream.com/sources/new?app=dropbox&quot;&gt;deploy&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/blob/master/components/github/readme.md&quot;&gt;Github&lt;/a&gt; (&lt;a href=&quot;https://pipedream.com/sources/new?app=github&quot;&gt;deploy&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/components/google-calendar&quot;&gt;Google Calendar&lt;/a&gt; (&lt;a href=&quot;https://pipedream.com/sources/new?app=google-calendar&quot;&gt;deploy&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/components/google-drive&quot;&gt;Google Drive&lt;/a&gt; (&lt;a href=&quot;https://pipedream.com/sources/new?app=google-drive&quot;&gt;deploy&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/components/rss&quot;&gt;RSS&lt;/a&gt; (&lt;a href=&quot;https://pipedream.com/sources/new?app=rss&quot;&gt;deploy&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/blob/master/components/twitter/readme.md&quot;&gt;Twitter&lt;/a&gt; (&lt;a href=&quot;https://pipedream.com/sources/new?app=twitter&quot;&gt;deploy&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Event sources can also be deployed via the &lt;a href=&quot;https://docs.pipedream.com/cli/reference/&quot;&gt;Pipedream CLI&lt;/a&gt;. Once installed, you can deploy an event source by running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pd deploy   # prompts you to select a component and pass required options
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also create your own event sources for your own personal use. If you think others would benefit from your source, you can publish them to all Pipedream users by opening a PR in this repo. See these docs to get started:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/PipedreamHQ/pipedream/master/COMPONENT-API.md&quot;&gt;Component API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/interfaces/http&quot;&gt;HTTP Event Sources Quickstart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/tree/master/interfaces/timer&quot;&gt;Timer-based Event Sources Quickstart&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Workflows&lt;/h2&gt; 
&lt;p&gt;Workflows are a sequence of linear &lt;a href=&quot;https://docs.pipedream.com/workflows/steps&quot;&gt;steps&lt;/a&gt; - just Node.js code - triggered by an event (via event source, HTTP endpoint, or timer). Workflows make it easy to transform data and integrate with 300+ APIs from various apps and services.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Trigger your workflow on any event (e.g. &lt;a href=&quot;https://docs.pipedream.com/workflows/steps/triggers/#http&quot;&gt;HTTP requests&lt;/a&gt; or a &lt;a href=&quot;https://docs.pipedream.com/workflows/steps/triggers/#cron-scheduler&quot;&gt;schedule&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Add steps to run &lt;a href=&quot;https://docs.pipedream.com/workflows/steps/code/&quot;&gt;Node.js code&lt;/a&gt; (using virtually any npm package) and &lt;a href=&quot;https://docs.pipedream.com/workflows/steps/actions/&quot;&gt;pre-built actions&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Steps are executed in the order they appear in your workflow.&lt;/li&gt; 
 &lt;li&gt;Data is shared between steps via &lt;a href=&quot;https://docs.pipedream.com/workflows/steps/#step-exports&quot;&gt;step exports&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Workflow code is &lt;a href=&quot;https://docs.pipedream.com/public-workflows/&quot;&gt;public by default&lt;/a&gt; so the community can discover and &lt;a href=&quot;https://docs.pipedream.com/workflows/copy/&quot;&gt;copy them&lt;/a&gt;. Your workflow execution and event data is private.&lt;/p&gt; 
&lt;p&gt;You can copy &lt;a href=&quot;https://pipedream.com/@tod/use-http-requests-to-trigger-a-workflow-p_6lCy5y/readme&quot;&gt;this example workflow&lt;/a&gt; to get started, or review some &lt;a href=&quot;https://pipedream.com/explore&quot;&gt;community-developed workflows&lt;/a&gt; to see what others are building.&lt;/p&gt; 
&lt;p&gt;As you build more advanced workflows, you may also find these docs helpful:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/workflows/events/&quot;&gt;What are events?&lt;/a&gt; - events trigger workflow executions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/workflows/steps/&quot;&gt;What are steps?&lt;/a&gt; - building blocks you use to create workflows&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/workflows/steps/code/state/&quot;&gt;Managing workflow state&lt;/a&gt; - how to store state in one execution of a workflow that you can read in subsequent executions&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/workflows/steps/#passing-data-to-steps-step-parameters&quot;&gt;Passing data to steps&lt;/a&gt; - steps are just Node functions, and can accept input via step parameters.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/connected-accounts/&quot;&gt;Connected Accounts&lt;/a&gt; - how to authenticate to APIs within code steps.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/workflows/error-handling/global-error-workflow/#modifying-the-global-error-workflow&quot;&gt;Error Handling&lt;/a&gt; - how to use the Global Error workflow to manage errors raised by workflows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Actions&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.pipedream.com/workflows/steps/actions/&quot;&gt;Actions&lt;/a&gt; are pre-built code steps that you can use to perform common operations across Pipedream&#39;s 300+ API integrations, for example: sending email, adding a row to a Google Sheet, and more. Pipedream currently supports over 1000+ actions.&lt;/p&gt; 
&lt;p&gt;Typically, integrating with these services requires a custom code to manage authentication, error handling, etc. Actions abstract that for you - you just pass the necessary params as input and the action handles the rest. For example, the &lt;strong&gt;Send HTTP Request&lt;/strong&gt; action accepts the data you want to send and the URL you want to send it to, returning the HTTP response for use in future steps.&lt;/p&gt; 
&lt;p&gt;Actions come pre-built to solve a common use case, but you can modify them in any way you&#39;d like. Actions are just Node.js functions. When you add an action, you&#39;ll see its code in your workflow - just click into the code and start editing to modify it.&lt;/p&gt; 
&lt;p&gt;Finally, you can &lt;a href=&quot;https://docs.pipedream.com/workflows/steps/actions/#creating-your-own-actions&quot;&gt;create your own actions&lt;/a&gt;, allowing you to re-use them across workflows in your account. You can even &lt;a href=&quot;https://docs.pipedream.com/workflows/steps/actions/#save-vs-publish&quot;&gt;publish actions&lt;/a&gt; to the entire Pipedream community, making them available for anyone to use.&lt;/p&gt; 
&lt;p&gt;Here&#39;s the code for the &lt;strong&gt;Send HTTP Request&lt;/strong&gt; action:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async (params) =&amp;gt; {
  const config = {
    method: params.method || &quot;post&quot;,
    url: params.url,
  };
  for (const { key, value } of params.query || []) {
    if (!config.params) config.params = {};
    config.params[key] = value;
  }
  for (const { key, value } of params.headers || []) {
    if (!config.headers) config.headers = {};
    config.headers[key] = value;
  }
  if (params.auth) {
    config.auth = {
      username: params.auth.username,
      password: params.auth.password,
    };
  }
  if (params.responseType) {
    config.responseType = params.responseType;
  }
  if (params.payload) config.data = params.payload;
  return await require(&quot;@pipedreamhq/platform&quot;).axios(this, config);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Destinations&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.pipedream.com/destinations/&quot;&gt;Destinations&lt;/a&gt;, like Actions, abstract the connection, batching, and delivery logic required to send events to services like Amazon S3 and Snowflake, or targets like HTTP and email.&lt;/p&gt; 
&lt;p&gt;For example, sending data to an Amazon S3 bucket is as simple as calling &lt;code&gt;$send.s3()&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$send.s3({
  bucket: &quot;your-bucket-here&quot;,
  prefix: &quot;your-prefix/&quot;,
  payload: event.body,
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Pipedream supports the following destinations today:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/destinations/s3/&quot;&gt;Amazon S3&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/destinations/snowflake/&quot;&gt;Snowflake&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/destinations/http/&quot;&gt;HTTP&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/destinations/email/&quot;&gt;Email&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/destinations/sql/&quot;&gt;Pipedream SQL Service&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.pipedream.com/destinations/sse/&quot;&gt;SSE&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Pricing&lt;/h2&gt; 
&lt;p&gt;Pipedream has a &lt;a href=&quot;https://docs.pipedream.com/pricing/#developer-tier&quot;&gt;generous free tier&lt;/a&gt;. You can run sources and workflows for free within the limits of the free tier. If you hit these limits, you can upgrade to one of our &lt;a href=&quot;https://docs.pipedream.com/pricing/#professional-tier&quot;&gt;paid tiers&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you exceed any of these limits, please &lt;a href=&quot;https://docs.pipedream.com/support/&quot;&gt;reach out&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Limits&lt;/h2&gt; 
&lt;p&gt;The Pipedream platform imposes some runtime limits on sources and workflows. &lt;a href=&quot;https://docs.pipedream.com/limits/&quot;&gt;Read more about those in our docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Support&lt;/h2&gt; 
&lt;p&gt;You can get help &lt;a href=&quot;https://pipedream.com/community&quot;&gt;on our public Slack&lt;/a&gt; or &lt;a href=&quot;https://docs.pipedream.com/support/&quot;&gt;reach out to our team directly&lt;/a&gt; with any questions or feedback. We&#39;d love to hear from you!&lt;/p&gt; 
&lt;h2&gt;Found a Bug? Have a Feature to suggest?&lt;/h2&gt; 
&lt;p&gt;Before adding an issue, please search the &lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/issues&quot;&gt;existing issues&lt;/a&gt; or &lt;a href=&quot;https://docs.pipedream.com/support/&quot;&gt;reach out to our team&lt;/a&gt; to see if a similar request already exists.&lt;/p&gt; 
&lt;p&gt;If an issue exists, please &lt;a href=&quot;https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-conversations-on-github&quot;&gt;add a reaction&lt;/a&gt; or comment on your specific use case.&lt;/p&gt; 
&lt;p&gt;If an issue &lt;em&gt;doesn&#39;t&lt;/em&gt; yet exist, please use these templates to create one:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/issues/new?assignees=&amp;amp;labels=enhancement&amp;amp;template=feature_request.md&amp;amp;title=&quot;&gt;New feature&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/issues/new?assignees=&amp;amp;labels=bug&amp;amp;template=bug_report.md&amp;amp;title=&quot;&gt;Report a bug&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/issues/new?assignees=&amp;amp;labels=enhancement%2C+trigger&amp;amp;template=trigger-request.md&amp;amp;title=%5BTRIGGER%5D&quot;&gt;New trigger / source&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/issues/new?assignees=&amp;amp;labels=app&amp;amp;template=app---service-integration.md&amp;amp;title=%5BAPP%5D&quot;&gt;New API integration&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/PipedreamHQ/pipedream/issues/new?assignees=&amp;amp;labels=action%2C+enhancement&amp;amp;template=action-request.md&amp;amp;title=%5BACTION%5D&quot;&gt;New action&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Security disclosures&lt;/h2&gt; 
&lt;p&gt;If you&#39;d like to report a suspected vulnerability or security issue, or have any questions about the security of the product, please contact our security team at &lt;strong&gt;security@pipedream.com&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>discordjs/discord.js</title>
      <link>https://github.com/discordjs/discord.js</link>
      <description>&lt;p&gt;A powerful JavaScript library for interacting with the Discord API&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#audio-engines&quot;&gt;Audio engines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#optional-packages&quot;&gt;Optional packages&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#example-usage&quot;&gt;Example Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#links&quot;&gt;Links&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#help&quot;&gt;Help&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;discord.js is a powerful &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; module that allows you to easily interact with the &lt;a href=&quot;https://discord.com/developers/docs/intro&quot;&gt;Discord API&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Object-oriented&lt;/li&gt; 
 &lt;li&gt;Predictable abstractions&lt;/li&gt; 
 &lt;li&gt;Performant&lt;/li&gt; 
 &lt;li&gt;100% coverage of the Discord API&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Node.js 14.0.0 or newer is required.&lt;/strong&gt;&lt;br&gt; Ignore any warnings about unmet peer dependencies, as they&#39;re all optional.&lt;/p&gt; 
&lt;p&gt;Without voice support: &lt;code&gt;npm install discord.js&lt;/code&gt;&lt;br&gt; With voice support (&lt;a href=&quot;https://www.npmjs.com/package/@discordjs/opus&quot;&gt;@discordjs/opus&lt;/a&gt;): &lt;code&gt;npm install discord.js @discordjs/opus&lt;/code&gt;&lt;br&gt; With voice support (&lt;a href=&quot;https://www.npmjs.com/package/opusscript&quot;&gt;opusscript&lt;/a&gt;): &lt;code&gt;npm install discord.js opusscript&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Audio engines&lt;/h3&gt; 
&lt;p&gt;The preferred audio engine is @discordjs/opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose @discordjs/opus. Using opusscript is only recommended for development environments where @discordjs/opus is tough to get working. For production bots, using @discordjs/opus should be considered a necessity, especially if they&#39;re going to be running on multiple servers.&lt;/p&gt; 
&lt;h3&gt;Optional packages&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/zlib-sync&quot;&gt;zlib-sync&lt;/a&gt; for WebSocket data compression and inflation (&lt;code&gt;npm install zlib-sync&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/discord/erlpack&quot;&gt;erlpack&lt;/a&gt; for significantly faster WebSocket data (de)serialisation (&lt;code&gt;npm install discord/erlpack&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;One of the following packages can be installed for faster voice packet encryption and decryption: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/sodium&quot;&gt;sodium&lt;/a&gt; (&lt;code&gt;npm install sodium&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/libsodium-wrappers&quot;&gt;libsodium.js&lt;/a&gt; (&lt;code&gt;npm install libsodium-wrappers&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/bufferutil&quot;&gt;bufferutil&lt;/a&gt; for a much faster WebSocket connection (&lt;code&gt;npm install bufferutil&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/utf-8-validate&quot;&gt;utf-8-validate&lt;/a&gt; in combination with &lt;code&gt;bufferutil&lt;/code&gt; for much faster WebSocket processing (&lt;code&gt;npm install utf-8-validate&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Discord = require(&#39;discord.js&#39;);
const client = new Discord.Client();

client.on(&#39;ready&#39;, () =&amp;gt; {
  console.log(`Logged in as ${client.user.tag}!`);
});

client.on(&#39;message&#39;, msg =&amp;gt; {
  if (msg.content === &#39;ping&#39;) {
    msg.channel.send(&#39;pong&#39;);
  }
});

client.login(&#39;token&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.js.org/&quot;&gt;Website&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/website&quot;&gt;source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.js.org/#/docs/main/master/general/welcome&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discordjs.guide/&quot;&gt;Guide&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/guide&quot;&gt;source&lt;/a&gt;) - this is still for stable&lt;br&gt; See also the &lt;a href=&quot;https://discordjs.guide/additional-info/changes-in-v12.html&quot;&gt;Update Guide&lt;/a&gt;, including updated and removed items in the library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/bRCvFy9&quot;&gt;Discord.js Discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/discord-api&quot;&gt;Discord API Discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/discordjs/discord.js&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/discord.js&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discordapi.com/unofficial/libs.html&quot;&gt;Related libraries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/discord-rpc&quot;&gt;RPC&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/RPC&quot;&gt;source&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before creating an issue, please ensure that it hasn&#39;t already been reported/suggested, and double-check the &lt;a href=&quot;https://discord.js.org/#/docs&quot;&gt;documentation&lt;/a&gt;.&lt;br&gt; See &lt;a href=&quot;https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md&quot;&gt;the contribution guide&lt;/a&gt; if you&#39;d like to submit a PR.&lt;/p&gt; 
&lt;h2&gt;Help&lt;/h2&gt; 
&lt;p&gt;If you don&#39;t understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don&#39;t hesitate to join our official &lt;a href=&quot;https://discord.gg/bRCvFy9&quot;&gt;Discord.js Server&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>discord/discord-api-docs</title>
      <link>https://github.com/discord/discord-api-docs</link>
      <description>&lt;p&gt;Official Discord API Documentation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Discord Official API Documentation&lt;/h1&gt; 
&lt;p&gt;This repo contains the official Discord API documentation, which can be viewed online &lt;a href=&quot;https://discord.com/developers/docs/intro&quot;&gt;HERE&lt;/a&gt;. Before submitting pull-requests, please remember to &lt;em&gt;fully&lt;/em&gt; read the &lt;a href=&quot;https://raw.githubusercontent.com/discord/discord-api-docs/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; guidelines.&lt;/p&gt; 
&lt;h2&gt;Markdown Syntax&lt;/h2&gt; 
&lt;p&gt;This repository uses special markdown syntax that helps style the resulting web version of the documentation.&lt;/p&gt; 
&lt;h3&gt;H6 Headings&lt;/h3&gt; 
&lt;p&gt;H6 headings should be used above tables and code blocks to properly label them.&lt;/p&gt; 
&lt;h3&gt;Linking&lt;/h3&gt; 
&lt;p&gt;Links between docs can be achieved by using a hash symbol (#), plus the markdown file name, plus a slash, and finally the dash-separated anchor. For instance, to link to the above H6 heading section:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-md&quot;&gt;[Links to README.md H6](#README/h6-headings)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Alert Boxes&lt;/h3&gt; 
&lt;p&gt;Alert boxes are achieved by using a block quote that has one of &#39;warn&#39;, &#39;danger&#39; or &#39;info&#39; on the first line.&lt;/p&gt; 
&lt;h2&gt;Join the Unofficial Discord API Server&lt;/h2&gt; 
&lt;p&gt;The Unofficial Discord API server is a common hangout for library and bot developers alike. It&#39;s a great starting point for those looking to dive in and learn bot-creation with the Discord API.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/discord-api&quot;&gt;&lt;img src=&quot;https://discord.com/api/guilds/81384788765712384/widget.png?style=banner1&quot; alt=&quot;Widget for the Discord API guild&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>locomotivemtl/locomotive-scroll</title>
      <link>https://github.com/locomotivemtl/locomotive-scroll</link>
      <description>&lt;p&gt;🛤 Detection of elements in viewport &amp; smooth scrolling with parallax.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/locomotive-scroll&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/locomotive-scroll&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/locomotive-scroll&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/locomotive-scroll&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install locomotive-scroll
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Basic&lt;/h3&gt; 
&lt;p&gt;With simple detection.&lt;/p&gt; 
&lt;h4&gt;HTML&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h1 data-scroll&amp;gt;Hey&amp;lt;/h1&amp;gt;
&amp;lt;p data-scroll&amp;gt;👋&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;CSS&lt;/h4&gt; 
&lt;p&gt;Add the base styles to your CSS file.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/locomotivemtl/locomotive-scroll/blob/master/dist/locomotive-scroll.css&quot;&gt;&lt;code&gt;locomotive-scroll.css&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;JS&lt;/h4&gt; 
&lt;h5&gt;With a bundler&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import LocomotiveScroll from &#39;locomotive-scroll&#39;;

const scroll = new LocomotiveScroll();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Or without&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;script src=&quot;locomotive-scroll.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
    (function () {
        var scroll = new LocomotiveScroll();
    })();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Get the &lt;a href=&quot;https://github.com/locomotivemtl/locomotive-scroll/blob/master/dist/locomotive-scroll.min.js&quot;&gt;JS file&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Smooth&lt;/h3&gt; 
&lt;p&gt;With smooth scrolling and parallax.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div data-scroll-container&amp;gt;
    &amp;lt;div data-scroll-section&amp;gt;
        &amp;lt;h1 data-scroll&amp;gt;Hey&amp;lt;/h1&amp;gt;
        &amp;lt;p data-scroll&amp;gt;👋&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div data-scroll-section&amp;gt;
        &amp;lt;h2 data-scroll data-scroll-speed=&quot;1&quot;&amp;gt;What&#39;s up?&amp;lt;/h2&amp;gt;
        &amp;lt;p data-scroll data-scroll-speed=&quot;2&quot;&amp;gt;😬&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import LocomotiveScroll from &#39;locomotive-scroll&#39;;

const scroll = new LocomotiveScroll({
    el: document.querySelector(&#39;[data-scroll-container]&#39;),
    smooth: true
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Note: scroll-sections are optional but recommended to improve performance, particularly in long pages.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Advanced&lt;/h3&gt; 
&lt;p&gt;Make it do what you want.&lt;/p&gt; 
&lt;h4&gt;With methods&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;section id=&quot;js-target&quot;&amp;gt;Come here please.&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import LocomotiveScroll from &#39;locomotive-scroll&#39;;

const scroll = new LocomotiveScroll();
const target = document.querySelector(&#39;#js-target&#39;);

scroll.scrollTo(target);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;With events&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Using modularJS --&amp;gt;
&amp;lt;div data-scroll data-scroll-call=&quot;function, module&quot;&amp;gt;Trigger&amp;lt;/div&amp;gt;
&amp;lt;!-- Using jQuery events --&amp;gt;
&amp;lt;div data-scroll data-scroll-call=&quot;EVENT_NAME&quot;&amp;gt;Trigger&amp;lt;/div&amp;gt;
&amp;lt;!-- Or do it your own way 😎 --&amp;gt;
&amp;lt;div data-scroll data-scroll-call=&quot;{y,o,l,o}&quot;&amp;gt;Trigger&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import LocomotiveScroll from &#39;locomotive-scroll&#39;;

const scroll = new LocomotiveScroll();

scroll.on(&#39;call&#39;, func =&amp;gt; {
    // Using modularJS
    this.call(...func);
    // Using jQuery events
    $(document).trigger(func);
    // Or do it your own way 😎
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Instance options&lt;/h2&gt; 
&lt;p&gt;| Option | Type | Default | Description | | ----------------------- | --------- | ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | &lt;code&gt;el&lt;/code&gt; | &lt;code&gt;object&lt;/code&gt; | &lt;code&gt;document&lt;/code&gt; | Scroll container element. | | &lt;code&gt;name&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;&#39;scroll&#39;&lt;/code&gt; | Data attribute prefix (&lt;code&gt;data-scroll-xxxx&lt;/code&gt;). | | &lt;code&gt;offset&lt;/code&gt; | &lt;code&gt;array(2)&lt;/code&gt;| &lt;code&gt;[0,0]&lt;/code&gt; | Global in-view trigger offset : &lt;code&gt;[bottom,top]&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;Use a string with &lt;code&gt;%&lt;/code&gt; to use a percentage of the viewport height.
 &lt;!-- raw HTML omitted --&gt;Use a numeric value for absolute pixels unit.
 &lt;!-- raw HTML omitted --&gt;E.g. &lt;code&gt;[&quot;30%&quot;,0]&lt;/code&gt;, &lt;code&gt;[100,0]&lt;/code&gt;, &lt;code&gt;[&quot;30%&quot;, 100]&lt;/code&gt; | | &lt;code&gt;repeat&lt;/code&gt; | &lt;code&gt;boolean&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | Repeat in-view detection. | | &lt;code&gt;smooth&lt;/code&gt; | &lt;code&gt;boolean&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | Smooth scrolling. | | &lt;code&gt;direction&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;vertical&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Scroll direction: &lt;code&gt;vertical&lt;/code&gt; or &lt;code&gt;horizontal&lt;/code&gt; | | &lt;code&gt;lerp&lt;/code&gt; | &lt;code&gt;number&lt;/code&gt; | &lt;code&gt;0.1&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Linear interpolation (lerp) intensity. Float between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.
 &lt;!-- raw HTML omitted --&gt;This defines the &quot;smoothness&quot; intensity. The closer to &lt;code&gt;0&lt;/code&gt;, the smoother. | | &lt;code&gt;getDirection&lt;/code&gt; | &lt;code&gt;boolean&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | Add direction to scroll event. | | &lt;code&gt;getSpeed&lt;/code&gt; | &lt;code&gt;boolean&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | Add speed to scroll event. | | &lt;code&gt;class&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;is-inview&lt;/code&gt; | Element in-view class. | | &lt;code&gt;initClass&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;has-scroll-init&lt;/code&gt; | Initialize class. | | &lt;code&gt;scrollingClass&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;has-scroll-scrolling&lt;/code&gt; | Is scrolling class. | | &lt;code&gt;draggingClass&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;has-scroll-dragging&lt;/code&gt; | Is dragging class. | | &lt;code&gt;smoothClass&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;has-scroll-smooth&lt;/code&gt; | Has smooth scrolling class. | | &lt;code&gt;scrollbarContainer&lt;/code&gt; | &lt;code&gt;object&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Specifies the container element for the scrollbar to be appended in. If false, scrollbar will be appended to the body. | | &lt;code&gt;scrollbarClass&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;c-scrollbar&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Scrollbar element class. | | &lt;code&gt;multiplier&lt;/code&gt; | &lt;code&gt;number&lt;/code&gt; | &lt;code&gt;1&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Factor applied to the scroll delta, allowing to boost/reduce scrolling speed (regardless of the platform). | | &lt;code&gt;firefoxMultiplier&lt;/code&gt; | &lt;code&gt;number&lt;/code&gt; | &lt;code&gt;50&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Boost scrolling speed of Firefox on Windows. | | &lt;code&gt;touchMultiplier&lt;/code&gt; | &lt;code&gt;number&lt;/code&gt; | &lt;code&gt;2&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Mutiply touch action to scroll faster than finger movement. | | &lt;code&gt;scrollFromAnywhere&lt;/code&gt; | &lt;code&gt;boolean&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;By default locomotive-scroll listens for scroll events only on the scroll container (&lt;code&gt;el&lt;/code&gt; option). With this option set to true, it listens on the whole document instead. | | &lt;code&gt;gestureDirection&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;vertical&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Defines which gesture direction(s) scrolls in your instance. You can use : 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;vertical&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;horizontal&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;both&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | | &lt;code&gt;tablet&lt;/code&gt; &amp;amp; &lt;code&gt;smartphone&lt;/code&gt; | &lt;code&gt;object&lt;/code&gt; | | Object allowing to override some options for a particular context. You can specify: 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;smooth&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;direction&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;horizontalGesture&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;For &lt;code&gt;tablet&lt;/code&gt; context you can also define &lt;code&gt;breakpoint&lt;/code&gt; (&lt;em&gt;integer&lt;/em&gt;, defaults to 1024) to set the max-width breakpoint for tablets. | | &lt;code&gt;reloadOnContextChange&lt;/code&gt; | &lt;code&gt;boolean&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | Allows to reload the page when switching between &lt;code&gt;desktop&lt;/code&gt;, &lt;code&gt;tablet&lt;/code&gt; and &lt;code&gt;smartphone&lt;/code&gt; contexts. It can be useful if your page changes a lot between contexts and you want to reset everything. | | &lt;code&gt;resetNativeScroll&lt;/code&gt; | &lt;code&gt;boolean&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt; | Sets &lt;code&gt;history.scrollRestoration = &#39;manual&#39;&lt;/code&gt; and calls &lt;code&gt;window.scrollTo(0, 0)&lt;/code&gt; on locomotive-scroll init in Native Class. Useful if you use transitions with native scrolling, otherwise we advise to set it to &lt;code&gt;false&lt;/code&gt; if you don&#39;t want to break History API&#39;s scroll restoration feature. |&lt;/p&gt; 
&lt;h2&gt;Element attributes&lt;/h2&gt; 
&lt;p&gt;| Attribute | Values | Description | | ----------------------- | ------------------------ | ---------------------------------------------------------------------------------------- | | &lt;code&gt;data-scroll&lt;/code&gt; | | Detect if in-view. | | &lt;code&gt;data-scroll-id&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | (Optional) Useful if you want to scope your element and get the progress of your element in the viewport for example. | | &lt;code&gt;data-scroll-container&lt;/code&gt; | | Defines the scroll container. Required for &lt;a href=&quot;https://github.com/locomotivemtl/locomotive-scroll/blob/master/dist/locomotive-scroll.css&quot;&gt;basic styling&lt;/a&gt;. | | &lt;code&gt;data-scroll-section&lt;/code&gt; | | Defines a scrollable section. Splitting your page into sections may improve performance. | | &lt;code&gt;data-scroll-class&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | Element in-view class. | | &lt;code&gt;data-scroll-offset&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | Element in-view trigger offset : &lt;code&gt;bottom,top&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;First value is &lt;code&gt;bottom&lt;/code&gt; offset, second (optional) is &lt;code&gt;top&lt;/code&gt; offset.
 &lt;!-- raw HTML omitted --&gt; Percent is relative to viewport height, otherwise it&#39;s absolute pixels.
 &lt;!-- raw HTML omitted --&gt;E.g. &lt;code&gt;&quot;10&quot;&lt;/code&gt;, &lt;code&gt;&quot;100,50%&quot;&lt;/code&gt;, &lt;code&gt;&quot;25%, 15%&quot;&lt;/code&gt; | | &lt;code&gt;data-scroll-repeat&lt;/code&gt; | &lt;code&gt;boolean&lt;/code&gt; | Element in-view detection repeat. | | &lt;code&gt;data-scroll-call&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | Element in-view trigger call event. | | &lt;code&gt;data-scroll-position&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;Window position of in-view trigger. | | &lt;code&gt;data-scroll-speed&lt;/code&gt; | &lt;code&gt;number&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Element parallax speed. A negative value will reverse the direction. | | &lt;code&gt;data-scroll-delay&lt;/code&gt; | &lt;code&gt;number&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Element&#39;s parallax lerp delay. | | &lt;code&gt;data-scroll-direction&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Element&#39;s parallax direction. &lt;code&gt;vertical&lt;/code&gt; or &lt;code&gt;horizontal&lt;/code&gt; | | &lt;code&gt;data-scroll-sticky&lt;/code&gt; | | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Sticky element. Starts and stops at &lt;code&gt;data-scroll-target&lt;/code&gt; position. | | &lt;code&gt;data-scroll-target&lt;/code&gt; | &lt;code&gt;string&lt;/code&gt; | &lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;Target element&#39;s in-view position. |&lt;/p&gt; 
&lt;h2&gt;Instance methods&lt;/h2&gt; 
&lt;p&gt;| Method | Description | Arguments | | -------------------------- | ------------------------------ | ------------------------------------------------------------------------------- | | &lt;code&gt;init()&lt;/code&gt; | Reinitializes the scroll. | | | &lt;code&gt;on(eventName, function)&lt;/code&gt; | Listen &lt;a href=&quot;https://raw.githubusercontent.com/locomotivemtl/locomotive-scroll/master/#instance-events&quot;&gt;instance events&lt;/a&gt; ⬇. | | | &lt;code&gt;update()&lt;/code&gt; | Updates all element positions. | | | &lt;code&gt;destroy()&lt;/code&gt; | Destroys the scroll events. | | | &lt;code&gt;start()&lt;/code&gt; | Restarts the scroll events. | | | &lt;code&gt;stop()&lt;/code&gt; | Stops the scroll events. | | | &lt;code&gt;scrollTo(target, options)&lt;/code&gt;| Scroll to a target. | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;target&lt;/code&gt;: Defines where you want to scroll. Available values types are :
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;node&lt;/code&gt; : a dom element
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;string&lt;/code&gt; : you can type your own selector, or use values &lt;code&gt;&quot;top&quot;&lt;/code&gt; and &lt;code&gt;&quot;bottom&quot;&lt;/code&gt; to reach scroll boundaries
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;int&lt;/code&gt; : An absolute scroll coordinate in pixels
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;options&lt;/code&gt; (optional, &lt;em&gt;object&lt;/em&gt;) : Settings object. Available values are: 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;offset&lt;/code&gt; (&lt;em&gt;integer&lt;/em&gt;) : Defines an offset from your target. E.g. &lt;code&gt;-100&lt;/code&gt; if you want to scroll 100 pixels above your target
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;callback&lt;/code&gt; (&lt;em&gt;function&lt;/em&gt;) : Called when scrollTo completes (note that it won&#39;t wait for lerp to stabilize)
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;duration&lt;/code&gt; (&lt;em&gt;integer&lt;/em&gt;) : Defines the duration of the scroll animation in milliseconds. Defaults to &lt;code&gt;1000&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;easing&lt;/code&gt; (&lt;em&gt;array&lt;/em&gt;) : An &lt;code&gt;array&lt;/code&gt; of 4 floats between 0 and 1 defining the bezier curve for the animation&#39;s easing. 
 &lt;!-- raw HTML omitted --&gt;Defaults to &lt;code&gt;[0.25, 0.00, 0.35, 1.00]&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;See &lt;a href=&quot;http://greweb.me/bezier-easing-editor/example/&quot;&gt;http://greweb.me/bezier-easing-editor/example/&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;em&gt;Keep in mind this will also be affected by the lerp unless you set &lt;code&gt;disableLerp&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/em&gt;.
 &lt;!-- raw HTML omitted --&gt;&lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;disableLerp&lt;/code&gt; (&lt;em&gt;boolean&lt;/em&gt;) : Lerp effect won&#39;t be applied if set to &lt;code&gt;true&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;img src=&quot;https://img.shields.io/badge/smooth-only-blue&quot; alt=&quot;Smooth only&quot;&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; |&lt;/p&gt; 
&lt;h2&gt;Instance events&lt;/h2&gt; 
&lt;p&gt;| Event | Arguments | Description | | -------- | --------- | --------------------------------------------------------------------- | | &lt;code&gt;scroll&lt;/code&gt; | &lt;code&gt;obj&lt;/code&gt; | Returns scroll instance (position, limit, speed, direction and current in-view elements). | | &lt;code&gt;call&lt;/code&gt; | &lt;code&gt;func&lt;/code&gt; | Trigger if in-view. Returns your &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;array&lt;/code&gt; if contains &lt;code&gt;,&lt;/code&gt;. |&lt;/p&gt; 
&lt;h2&gt;Progressive playing animations example (like gsap)&lt;/h2&gt; 
&lt;p&gt;All &lt;code&gt;data-scroll&lt;/code&gt; elements have a progress value. In the on scroll event you can get all current in-view elements.&lt;/p&gt; 
&lt;h4&gt;HTML&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h1 data-scroll data-scroll-id=&quot;hey&quot;&amp;gt;Hey&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;JS&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;scroll.on(&#39;scroll&#39;, (args) =&amp;gt; {
    // Get all current elements : args.currentElements
    if(typeof args.currentElements[&#39;hey&#39;] === &#39;object&#39;) {
        let progress = args.currentElements[&#39;hey&#39;].progress;
        console.log(progress);
        // ouput log example: 0.34
        // gsap example : myGsapAnimation.progress(progress);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;| Name | Description | | ---------------- | ------------------------------------------------------------------ | | &lt;a href=&quot;https://github.com/ayamflow/virtual-scroll&quot;&gt;Virtual Scroll&lt;/a&gt; | Custom scroll event with inertia/momentum. | | &lt;a href=&quot;https://github.com/modularorg/modularscroll&quot;&gt;modularScroll&lt;/a&gt; | Elements in viewport detection. Forked from it, not a dependency. | | &lt;a href=&quot;https://github.com/gre/bezier-easing&quot;&gt;bezier-easing&lt;/a&gt; | Allows to define an easing to &lt;code&gt;scrollTo&lt;/code&gt; movement |&lt;/p&gt; 
&lt;h2&gt;Browser support&lt;/h2&gt; 
&lt;p&gt;Works on most modern browsers. Chrome, Firefox, Safari, Edge...&lt;/p&gt; 
&lt;p&gt;To get IE 11 support, you need polyfills. You can use your own or include these before our script.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script nomodule src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.6.0/polyfill.min.js&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script nomodule src=&quot;https://polyfill.io/v3/polyfill.min.js?features=Object.assign%2CElement.prototype.append%2CNodeList.prototype.forEach%2CCustomEvent%2Csmoothscroll&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Who&#39;s using Locomotive Scroll?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://thierrychopain.com/&quot;&gt;thierrychopain.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://clmt.paris/&quot;&gt;clmt.paris&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.miragefestival.com/2020/&quot;&gt;miragefestival.com/2020&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mazellier.design/&quot;&gt;mazellier.design&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ccccontemple.com/&quot;&gt;ccccontemple.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://abhishekjha.me/muteza/&quot;&gt;abhishekjha.me/muteza&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://normal.studio/en/&quot;&gt;normal.studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mixlegno.com/&quot;&gt;mixlegno.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nfq.group/&quot;&gt;nfq.group&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://works.studio/&quot;&gt;works.studio&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.beangels.eu/&quot;&gt;beangels.eu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.izakaya-caen.fr/&quot;&gt;izakaya-caen.fr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.white-elephant.fr/&quot;&gt;white-elephant.fr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.henge07.com/&quot;&gt;henge07.com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://loirevalleylodges.com/&quot;&gt;loirevalleylodges.com&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Related&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/locomotivemtl/locomotive-boilerplate&quot;&gt;Locomotive Boilerplate 🚂&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nolimits4web/swiper</title>
      <link>https://github.com/nolimits4web/swiper</link>
      <description>&lt;p&gt;Most modern mobile touch slider with hardware accelerated transitions&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/nolimits4web/swiper&quot;&gt;&lt;img src=&quot;https://travis-ci.org/nolimits4web/swiper.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.jsdelivr.com/package/npm/swiper&quot;&gt;&lt;img src=&quot;https://data.jsdelivr.com/v1/package/npm/swiper/badge?style=rounded&quot; alt=&quot;jsDelivr Hits&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Swiper&lt;/h1&gt; 
&lt;p&gt;Swiper - is the free and most modern mobile touch slider with hardware accelerated transitions and amazing native behavior. It is intended to be used in mobile websites, mobile web apps, and mobile native/hybrid apps.&lt;/p&gt; 
&lt;p&gt;Swiper is not compatible with all platforms, it is a modern touch slider which is focused only on modern apps/platforms to bring the best experience and simplicity.&lt;/p&gt; 
&lt;h1&gt;Getting Started&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiperjs.com/get-started/&quot;&gt;Getting Started Guide&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiperjs.com/api/&quot;&gt;API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://swiperjs.com/demos/&quot;&gt;Demos&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Dist / Build&lt;/h1&gt; 
&lt;p&gt;On production use files (JS and CSS) only from &lt;code&gt;package/&lt;/code&gt; folder, there will be the most stable versions, &lt;code&gt;build/&lt;/code&gt; folder is only for development purpose.&lt;/p&gt; 
&lt;h3&gt;Development Build&lt;/h3&gt; 
&lt;p&gt;Install all dependencies, in repo&#39;s root:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
$ npm install

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And build development version of Swiper:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;
$ npm run build:dev

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The result is available in &lt;code&gt;build/&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h3&gt;Running demos:&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Core:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;folder: &lt;code&gt;./playground/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;$ npm run dev&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;folder: &lt;code&gt;./playground-react/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;$ npm run react:dev&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Vue:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;folder: &lt;code&gt;./playground-vue/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;$ npm run vue:dev&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Svelte:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;folder: &lt;code&gt;./playground-svelte/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;$ npm run svelte:dev&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Angular:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;folder: &lt;code&gt;./playground-angular/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;$ npm run angular:dev&lt;/code&gt; or &lt;code&gt;$ ng serve&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Production Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;
$ npm run build:prod

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Production version will available in &lt;code&gt;package/&lt;/code&gt; folder.&lt;/p&gt; 
&lt;h1&gt;Contributing&lt;/h1&gt; 
&lt;p&gt;All changes should be committed to &lt;code&gt;src/&lt;/code&gt; files only. Before you open an issue please review the &lt;a href=&quot;https://github.com/nolimits4web/swiper/blob/master/CONTRIBUTING.md&quot;&gt;contributing&lt;/a&gt; guideline.&lt;/p&gt; 
&lt;h1&gt;Swiper 5.x&lt;/h1&gt; 
&lt;p&gt;If you are still using Swiper 5.x.x, you may find it in &lt;a href=&quot;https://github.com/nolimits4web/swiper/tree/Swiper5&quot;&gt;Swiper5 Branch&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/archive/v5.4.5.zip&quot;&gt;Download Latest Swiper 5.4.5&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/tree/Swiper5/src&quot;&gt;Source Files&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/blob/Swiper5/API.md&quot;&gt;API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Swiper 4.x&lt;/h1&gt; 
&lt;p&gt;If you are still using Swiper 4.x.x, you may find it in &lt;a href=&quot;https://github.com/nolimits4web/swiper/tree/Swiper4&quot;&gt;Swiper4 Branch&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/archive/v4.5.3.zip&quot;&gt;Download Latest Swiper 4.5.3&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/tree/Swiper4/src&quot;&gt;Source Files&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/blob/Swiper4/API.md&quot;&gt;API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Swiper 3.x&lt;/h1&gt; 
&lt;p&gt;If you are still using Swiper 3.x.x, you may find it in &lt;a href=&quot;https://github.com/nolimits4web/swiper/tree/Swiper3&quot;&gt;Swiper3 Branch&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/archive/v3.4.2.zip&quot;&gt;Download Latest Swiper 3.4.2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/tree/Swiper3/src&quot;&gt;Source Files&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/blob/Swiper3/API.md&quot;&gt;API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Swiper 2.x&lt;/h1&gt; 
&lt;p&gt;If you are still using Swiper 2.x.x or you need old browsers support, you may find it in &lt;a href=&quot;https://github.com/nolimits4web/swiper/tree/Swiper2&quot;&gt;Swiper2 Branch&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/archive/v2.7.6.zip&quot;&gt;Download Latest Swiper 2.7.6&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/tree/Swiper2/src&quot;&gt;Source Files&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nolimits4web/swiper/blob/Swiper2/API.md&quot;&gt;API&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>moonad/Formality</title>
      <link>https://github.com/moonad/Formality</link>
      <description>&lt;p&gt;A modern proof language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Formality&lt;/h1&gt; 
&lt;p&gt;A modern programming language featuring formal proofs. Now written in itself!&lt;/p&gt; 
&lt;h2&gt;Why formal proofs?&lt;/h2&gt; 
&lt;p&gt;When most people hear about formal proofs, they naturally think about mathematics and security, or, &quot;boring stuff&quot;. While it is true that formal proofs can be used to formalize theorems and verify software correctness, Formality&#39;s approach is different: we focus on using proofs as a tool to &lt;strong&gt;enhance developer productivity&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;There is little doubt left that adding types to untyped languages greatly increases productivity, specially when the codebase grows past a certain point: just see the surge of TypeScript. Formal proofs are, in a way, an evolution of the simple types used in common languages.&lt;/p&gt; 
&lt;p&gt;We believe that proofs are superpowers waiting to be explored, and the proper usage of them can enhance the productivity of a developer in a disruptive manner: think of Haskell&#39;s Hackage on steroids. Formality was designed to explore and enable that side of formal proofs, and we&#39;ll be publishing more about that soon.&lt;/p&gt; 
&lt;h2&gt;Why Formality?&lt;/h2&gt; 
&lt;p&gt;There are some interesting proof languages, or proof assistants, as they&#39;re often called, in the market. &lt;a href=&quot;https://github.com/agda/agda&quot;&gt;Agda&lt;/a&gt;, &lt;a href=&quot;https://github.com/coq/coq&quot;&gt;Coq&lt;/a&gt;, &lt;a href=&quot;https://github.com/leanprover/lean&quot;&gt;Lean&lt;/a&gt;, &lt;a href=&quot;https://github.com/idris-lang/Idris-dev&quot;&gt;Idris&lt;/a&gt;, to name a few. But these (perhaps with exception of Idris, which we love!) aren&#39;t aligned with the vision highlighted above, in some key aspects:&lt;/p&gt; 
&lt;h3&gt;Auditability&lt;/h3&gt; 
&lt;p&gt;Formality is entirely compiled to a small &lt;a href=&quot;https://github.com/moonad/formcorejs&quot;&gt;trusted core&lt;/a&gt; that has 700 lines of code. This is 1 to 2 orders of magnitude smaller than existing alternatives. Because of that, auditing Formality is much easier, decreasing the need for trust and solving the &quot;who verifies that the verifier&quot; problem.&lt;/p&gt; 
&lt;h3&gt;Portability&lt;/h3&gt; 
&lt;p&gt;Being compiled to such a small core also allows Formality to be easily compiled to multiple targets, making it very portable. For example, out &lt;a href=&quot;https://github.com/moonad/FormCoreJS/blob/master/FmcToHs.js&quot;&gt;Formality-to-Haskell&lt;/a&gt; compiler was developed in an evening and has less than 1000 lines of code. This allows Formality to be used as a a lazy, pure functional language that is compiled directly by Haskell&#39;s GHC.&lt;/p&gt; 
&lt;h3&gt;Performance&lt;/h3&gt; 
&lt;p&gt;Formality has a long-term approach to performance: make the language fast in theory, then build great compilers for each specific target. Our &lt;a href=&quot;https://github.com/moonad/FormCoreJS/blob/master/FmcToJs.js&quot;&gt;JavaScript compiler&lt;/a&gt;, for example, is tuned to generate small, fast JS, allowing Formality to be used for web development. Other targets may have different optimizations, and we&#39;re constantly researching new ways of evaluating functional programs; see our post about interaction nets and optimal reduction (&lt;a href=&quot;https://medium.com/@maiavictor/solving-the-mystery-behind-abstract-algorithms-magical-optimizations-144225164b07&quot;&gt;Absal&lt;/a&gt;).&lt;/p&gt; 
&lt;h3&gt;Market Readiness&lt;/h3&gt; 
&lt;p&gt;For a programming language to be used in real-world applications, it must satisfy certain minimal requirements. It must have a great package manager, a good editor, friendly error messages, a fast compiler and a clear, non-cryptic syntax that everyone can use and understand. All of these are non-goals for some of the existing alternatives, but are high priorities for Formality.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Install&lt;/p&gt; &lt;p&gt;Using the JavaScript release (&lt;code&gt;fmjs&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -g formality-js
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using the Haskell release (uses &lt;code&gt;fmhs&lt;/code&gt; instead of &lt;code&gt;fmjs&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/moonad/formality
cd formality/bin/hs
cabal build
cabal install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Clone the base libraries&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/moonad/formality
cd formality/src
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Edit, check and run&lt;/p&gt; &lt;p&gt;Edit &lt;code&gt;Main.fm&lt;/code&gt; on &lt;code&gt;formality/src&lt;/code&gt; to add your code:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;Main: IO(Unit)
  do IO {
    IO.print(&quot;Hello, world!&quot;)
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Type-check to see errors and goals:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;fmjs Main.fm
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run to see results:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;fmjs Main --run
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since Formality doesn&#39;t have a module system yet, you must be at &lt;code&gt;formality/src&lt;/code&gt; to use the base types (lists, strings, etc.). In this early phase, we&#39;d like all the development to be contained in that directory. Feel encouraged to send your programs and proofs as a PR!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Quick Introduction&lt;/h2&gt; 
&lt;h3&gt;A simple, clear, and unsurprising syntax&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you can&#39;t explain it simply, you don&#39;t understand it well enough.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Why make it hard? Formality aims to frame advanced concepts in ways that everyone can understand. For example, if you ask a Haskeller to sum a list of positive ints (Nats), they might write:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;sum(list: List(Nat)): Nat
  case list {
    nil  : 0
    cons : list.head + sum(list.tail)
  }

Main: IO(Unit)
  do IO {
    IO.print(&quot;Sum is: &quot; | Nat.show(sum([1, 2, 3])))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, if they are enlightened enough:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;sum(list: List(Nat)): Nat
  List.fold&amp;lt;_&amp;gt;(list)&amp;lt;_&amp;gt;(0, Nat.add)

Main: IO(Unit)
  do IO {
    IO.print(&quot;Sum is: &quot; | Nat.show(sum([1, 2, 3])))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But, while recursion and folds are nice, this is fine too:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;sum(list: List(Nat)): Nat
  let sum = 0
  for x in list:
    sum = x + sum
  sum
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The code above isn&#39;t impure, Formality translates loops to pure folds. It is just written in a way that is more familiar to some. Proof languages are already hard enough, so why make syntax yet another obstacle?&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;(You can test the examples above by editing &lt;code&gt;Main.fm&lt;/code&gt;, and typing &lt;code&gt;fmjs Main.fm&lt;/code&gt; and &lt;code&gt;fmjs Main --run&lt;/code&gt; on the &lt;code&gt;Formality/src&lt;/code&gt; directory.)&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Powerful types&lt;/h3&gt; 
&lt;p&gt;Let&#39;s now see how to write structures with increasingly complex types. Below is the simple list, a &quot;variant type&quot; with two constructors, one for the &lt;code&gt;empty&lt;/code&gt; list, and one to &lt;code&gt;push&lt;/code&gt; a positive number (&lt;code&gt;Nat&lt;/code&gt;) to another list:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// NatList is a linked list of Nats
type NatList {
  empty
  push(head: Nat, tail: NatList)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As usual, we can make it &lt;strong&gt;more generic&lt;/strong&gt; with polymorphic types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// List is a linked list of A&#39;s (for any type A)
type List (A: Type) {
  empty
  push(head: A, tail: List(A))
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But we can make it &lt;strong&gt;more specific&lt;/strong&gt; with indexed types:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// Vector is a linked list of Nats with a statically known size
type Vector ~ (len: Nat) {
  empty                                        ~ (len: 0) 
  push(len: Nat, head: Nat, tail: Vector(len)) ~ (len: 1 + len)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The type above isn&#39;t of a &lt;em&gt;fixed length&lt;/em&gt; list, but of one that has a length that is &lt;em&gt;statically known&lt;/em&gt;. The difference is that we can still grow and shrink it, but we can&#39;t, for example, get the &lt;code&gt;head&lt;/code&gt; of an empty list. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;Main: IO(Unit)
  def list = [1,2,3]
  def vect = Vector.from_list&amp;lt;Nat&amp;gt;(list)
  def head = Vector.head&amp;lt;Nat,_&amp;gt;(vect)
  do IO {
    IO.print(&quot;First is: &quot; | Nat.show(head))
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Works fine, but, if you change the list to be empty, it will result in a type error! This is in contrast to Haskell, where &lt;code&gt;head []&lt;/code&gt; results in a runtime crash. &lt;strong&gt;Formality programs can&#39;t crash. Ever!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;(You can also check the program above by editing &lt;code&gt;Main.fm&lt;/code&gt;.)&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Theorem proving&lt;/h3&gt; 
&lt;p&gt;Proof languages go beyond checking lengths though. Everything you can think of can be statically verified by the type system. With subset types, written as &lt;code&gt;{x: A} -&amp;gt; B(x)&lt;/code&gt;, you can restrict a type arbitrarily. For example, here we use subsets to represent even numbers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// An &quot;EvenNat&quot; is a Nat `x`, such that `(x % 2) == 0`
EvenNat: Type
  {x: Nat} (x % 2) == 0

six_as_even: EvenNat
  6 ~ refl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This program only type-checks because &lt;code&gt;6&lt;/code&gt; is even: try changing it to &lt;code&gt;7&lt;/code&gt; and it will be a type error! But what about &lt;code&gt;~ refl&lt;/code&gt;? This is a &lt;strong&gt;proof&lt;/strong&gt; that &lt;code&gt;6&lt;/code&gt; is indeed even. Since &lt;code&gt;6&lt;/code&gt; is a compile-time constant, it is very easy for Formality to verify that it is even (it just needs to run &lt;code&gt;6 % 2&lt;/code&gt;), so we write &lt;code&gt;refl&lt;/code&gt;, which stands for &quot;reflexive&quot;, or &quot;just reduce it&quot;.&lt;/p&gt; 
&lt;p&gt;But what if it was an expression instead? For example, what if we wanted to write a function that receives a Nat &lt;code&gt;x&lt;/code&gt;, and returns &lt;code&gt;x*2&lt;/code&gt; as an EvenNat? It makes sense because the double of every number is even. But if we just write:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;double_as_even(n: Nat): EvenNat
  (2 * n) ~ refl
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Formality will complain:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Type mismatch.
- Expected: Nat.mod(Nat.double(n),2) == 0
- Detected: 0 == 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;That&#39;s because Formality doesn&#39;t know that &lt;code&gt;(n*2)%2 == 0&lt;/code&gt; is necessarily true for every &lt;code&gt;n&lt;/code&gt;. We need to convince the type-checker by proving it. Proofs are like functions, we just create a separate function that, given a &lt;code&gt;n: Nat&lt;/code&gt;, returns a proof that &lt;code&gt;((n*2)%2)==0&lt;/code&gt;. That proof will be done by case analysis and induction, but we won&#39;t get into details on how it works; for now, suffice to say it is just pattern-matching and recursion. Here is it:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;EvenNat: Type
  {x: Nat} (x % 2) == 0

six_as_even: EvenNat
  6 ~ refl

double_as_even(n: Nat): EvenNat
  (2 * n) ~ double_is_even(n)

double_is_even(n: Nat): ((2 * n) % 2) == 0
  case n {
    zero: refl
    succ: double_is_even(n.pred)
  }!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To sum up, &lt;code&gt;EvenNat&lt;/code&gt; is the type of &lt;code&gt;Nat&lt;/code&gt;s that are even. &lt;code&gt;six_as_even&lt;/code&gt; is just the number &lt;code&gt;6&lt;/code&gt;, viewed as an &lt;code&gt;EvenNat&lt;/code&gt;; since Formality can verify that 6 is even, we write &lt;code&gt;~ refl&lt;/code&gt; on it. &lt;code&gt;double_as_even&lt;/code&gt; is a function that, for any &lt;code&gt;Nat&lt;/code&gt; &lt;code&gt;n&lt;/code&gt;, returns &lt;code&gt;n*2&lt;/code&gt; as an &lt;code&gt;EvenNat&lt;/code&gt;. Formality can&#39;t verify that &lt;code&gt;n*2&lt;/code&gt; is always even by itself, so, to convince it, we write a separate proof called &lt;code&gt;double_is_even(n)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For a quick tutorial on how to prove theorems in Formality, check &lt;a href=&quot;https://raw.githubusercontent.com/moonad/Formality/master/THEOREMS.md&quot;&gt;THEOREMS.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;More information&lt;/h2&gt; 
&lt;p&gt;For a list of available syntaxes, check &lt;a href=&quot;https://raw.githubusercontent.com/moonad/Formality/master/SYNTAX.md&quot;&gt;SYNTAX.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For a tutorial about theorem proving, check &lt;a href=&quot;https://raw.githubusercontent.com/moonad/Formality/master/THEOREMS.md&quot;&gt;THEOREMS.md&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you&#39;re brave, browse the &lt;a href=&quot;https://github.com/moonad/Formality/tree/master/src&quot;&gt;base libraries&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Join our &lt;a href=&quot;https://t.me/formality_lang&quot;&gt;Telegram chat room&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>carbon-app/carbon</title>
      <link>https://github.com/carbon-app/carbon</link>
      <description>&lt;p&gt;🖤 Create and share beautiful images of your source code&lt;/p&gt;&lt;hr&gt;&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h5&gt;Translations&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;You know &lt;a href=&quot;https://twitter.com/dan_abramov/status/890191815567175680&quot;&gt;all&lt;/a&gt; &lt;a href=&quot;https://twitter.com/reactjs/status/890511993261654017&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://twitter.com/notquiteleo/status/873483329345028096&quot;&gt;those code&lt;/a&gt; &lt;a href=&quot;https://twitter.com/zeithq/status/805779711154647040&quot;&gt;screenshots&lt;/a&gt; you see on Twitter? Though the code&#39;s usually impressive, we saw room for improvement in the aesthetic department. Carbon makes it easy to create and share beautiful images of your source code. So what are you waiting for? Go impress all of your followers with your newfound design prowess.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Customization&lt;/strong&gt;. Customize things like your image&#39;s syntax theme, font style, and more&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Share quickly&lt;/strong&gt;. Save your image or a link with one click&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Save snippets&lt;/strong&gt;. Create an account to save snippets for later. Shared snippets are automatically unfurled on Twitter and Slack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h4&gt;Import&lt;/h4&gt; 
&lt;p&gt;There are a few different ways to import code into Carbon:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Drop a file onto the editor&lt;/li&gt; 
 &lt;li&gt;Append a GitHub gist ID to the URL (e.g. &lt;a href=&quot;https://carbon.now.sh/3208813b324d82a9ebd197e4b1c3bae8&quot;&gt;&lt;code&gt;carbon.now.sh/&amp;lt;gist_id_goes_here&amp;gt;&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Or just start typing!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Customization&lt;/h4&gt; 
&lt;p&gt;Once you&#39;ve got all of your code into Carbon, you can customize your image by changing the syntax theme, background color, window theme, padding, shadows, fonts, and more.&lt;/p&gt; 
&lt;h4&gt;Exporting &amp;amp; Sharing&lt;/h4&gt; 
&lt;p&gt;After you&#39;ve customized your image you can share your snippet in a number of ways&lt;/p&gt; 
&lt;h5&gt;Create a saved snippet&lt;/h5&gt; 
&lt;p&gt;Sharing a saved snippet will automatically unfurl the image on platforms like Twitter and Slack. This lets users see your creation, while also giving them access to the source code via the link. Better yet, if you need to make an update, simply follow the link yourself to edit the snippet directly.&lt;/p&gt; 
&lt;p&gt;To create a saved snippet:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Login using the &quot;Sign in/Sign up&quot; button&lt;/li&gt; 
 &lt;li&gt;Edit as you normally would — your snippet will get saved automatically&lt;/li&gt; 
 &lt;li&gt;Copy the URL from your browser window and share away!&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h5&gt;Embed a snippet&lt;/h5&gt; 
&lt;p&gt;This is the recommended method for sharing Carbon on your own website or blog. Readers can even copy the code with the click of a button.&lt;/p&gt; 
&lt;p&gt;You can embed any Carbon snippet in your website directly using the &lt;code&gt;carbon.now.sh/embed&lt;/code&gt; URL. The &quot;Copy Menu&quot; lets you quickly copy the correct iFrame snippet, or the encoded URL for embedding on platforms like Medium.&lt;/p&gt; 
&lt;p&gt;Finally, you can also embed saved snippets or GitHub gists using &lt;code&gt;carbon.now.sh/embed/:id&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;Use the Tweet button&lt;/h5&gt; 
&lt;p&gt;The Tweet button will not only share the image on Twitter, but it will also correctly encode the &lt;code&gt;alt&lt;/code&gt; text to ensure your images are accessible. However, if you want to tweet image yourself, please check out &lt;a href=&quot;https://help.twitter.com/en/using-twitter/picture-descriptions&quot;&gt;how to make your Twitter images accessible&lt;/a&gt;.&lt;/p&gt; 
&lt;h5&gt;Download the image directly&lt;/h5&gt; 
&lt;p&gt;Carbon supports downloading your image as a PNG and SVG. You can also click &lt;code&gt;Export → Open&lt;/code&gt; to open your image directly in the browser. Finally, you can copy the Carbon image directly to your clipboard by going to &lt;code&gt;Copy → Image&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Installing Carbon for Desktop (Offline)&lt;/h4&gt; 
&lt;p&gt;If you are using Google Chrome, or another browser that supports Progressive Web Apps, you can install Carbon for use offline by:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Visit &lt;a href=&quot;https://carbon.now.sh&quot;&gt;carbon.now.sh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Click your browser&#39;s settings menu&lt;/li&gt; 
 &lt;li&gt;Click &quot;Install Carbon...&quot;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Check out these projects our awesome community has created:&lt;/p&gt; 
&lt;h5&gt;Editor Plugins&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://plugins.jetbrains.com/plugin/10469-carbon-now-sh&quot;&gt;IntelliJ IDEA &lt;code&gt;carbon-now-sh&lt;/code&gt;&lt;/a&gt; - Open up the selection in your current IntelliJ IDEA file in Carbon through a context menu&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/carbon-now-sh&quot;&gt;Atom &lt;code&gt;carbon-now-sh&lt;/code&gt;&lt;/a&gt; - Open up your current Atom file in Carbon with &lt;code&gt;shift-cmd-A&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ericadamski.carbon-now-sh&quot;&gt;VS Code &lt;code&gt;carbon-now-sh&lt;/code&gt;&lt;/a&gt; - Open up your current VS Code file in Carbon with command &lt;code&gt;carbon&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/molnarmark/carbonSublime&quot;&gt;Sublime Text 3 &lt;code&gt;carbon-now-sh&lt;/code&gt;&lt;/a&gt; - Open up the selection in your current Sublime Text 3 file with a custom bound key&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kristijanhusak/vim-carbon-now-sh&quot;&gt;Vim &lt;code&gt;carbon-now-sh&lt;/code&gt;&lt;/a&gt; - Open up the selection in your current Vim/Neovim using function &lt;code&gt;CarbonNowSh()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/veelenga/carbon-now-sh.el&quot;&gt;Emacs &lt;code&gt;carbon-now-sh&lt;/code&gt;&lt;/a&gt; - Open up the selection in your current Emacs using interactive function &lt;code&gt;carbon-now-sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/StevenMagdy/CarboNow4Xcode&quot;&gt;Xcode &lt;code&gt;carbon-now-sh&lt;/code&gt;&lt;/a&gt; - Open up your current selection in &lt;code&gt;carbon.now.sh&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bow-swift/nef-plugin&quot;&gt;Xcode &lt;code&gt;nef&lt;/code&gt;&lt;/a&gt; - This Xcode extension enables you to export a code selection as a Carbon snippet in a single action&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Tools&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mixn/carbon-now-cli&quot;&gt;CLI &lt;code&gt;carbon-now-cli&lt;/code&gt;&lt;/a&gt; - Open a file in Carbon or download it directly using &lt;code&gt;carbon-now&lt;/code&gt;, featuring an interactive mode, selective highlighting and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codeexpander.com&quot;&gt;CodeExpander&lt;/a&gt; - A smart GitHub gist client with the TextExpander features&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bow-swift/nef#-exporting-carbon-code-snippets&quot;&gt;&lt;code&gt;nef&lt;/code&gt;&lt;/a&gt; - Export multiple Carbon code snippets from &lt;code&gt;Xcode Playground&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://t.me/carbonshbot&quot;&gt;&lt;code&gt;@carbonshbot&lt;/code&gt;&lt;/a&gt; - A Telegram chatbot wich takes in a code snippet or gist URL and generates an Carbon image&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://yonicd.github.io/carbonate/&quot;&gt;R &lt;code&gt;carbonate&lt;/code&gt;&lt;/a&gt; - Iteratively manipulate image aesthetics in &lt;code&gt;R&lt;/code&gt; and either open in Carbon or download directly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Citations&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/book/id1435714196&quot;&gt;&quot;CS 101 - An Introduction to Computational Thinking&quot;&lt;/a&gt; - a computer science textbook by Sarbo Roy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;p&gt;Carbon is a project by:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mike Fix (&lt;a href=&quot;https://twitter.com/fixitup2&quot;&gt;@mfix22&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Brian Dennis (&lt;a href=&quot;https://github.com/briandennis&quot;&gt;@briandennis&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Jake Dexheimer (&lt;a href=&quot;https://github.com/jakedex&quot;&gt;@jakedex&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;License&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.com/projects/git%2Bgithub.com%2Fcarbon-app%2Fcarbon?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fcarbon-app%2Fcarbon.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h2&gt;Contribute &amp;amp; Support&lt;/h2&gt; 
&lt;p&gt;Pull requests are welcome! Please see our &lt;a href=&quot;https://raw.githubusercontent.com/carbon-app/carbon/main/.github/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;Does your company use Carbon? Consider sponsoring the project to fund new features, bug fixes, and more.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Backers&lt;/h3&gt; 
&lt;p&gt;Love using Carbon? Consider supporting the project to fund new features and improvements&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Thanks To&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://vercel.com/&quot;&gt; ▲ Vercel &lt;/a&gt; for sponsoring Carbon&#39;s hosting.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://vercel.com/import/git?s=https%3A%2F%2Fgithub.com%2Fcarbon-app%2Fcarbon&amp;amp;project-name=carbon&amp;amp;repo-name=carbon&quot;&gt;&lt;img src=&quot;https://vercel.com/button&quot; alt=&quot;Deploy with Vercel&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributors&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://opencollective.com/carbon-app/contributors.svg?width=1024&quot; alt=&quot;Contributors image&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;All Contributors&lt;/h4&gt; 
&lt;p&gt;Thanks goes out to all these wonderful people (&lt;a href=&quot;https://github.com/kentcdodds/all-contributors#emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>goldbergyoni/javascript-testing-best-practices</title>
      <link>https://github.com/goldbergyoni/javascript-testing-best-practices</link>
      <description>&lt;p&gt;📗🌐 🚢 Comprehensive and exhaustive JavaScript &amp; Node.js testing best practices (December 2020)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;👇 Why this guide can take your testing skills to the next level&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;📗 45+ best practices: Super-comprehensive and exhaustive&lt;/h2&gt; 
&lt;p&gt;This is a guide for JavaScript &amp;amp; Node.js reliability from A-Z. It summarizes and curates for you dozens of the best blog posts, books and tools the market has to offer&lt;/p&gt; 
&lt;h2&gt;🚢 Advanced: Goes 10,000 miles beyond the basics&lt;/h2&gt; 
&lt;p&gt;Hop into a journey that travels way beyond the basics into advanced topics like testing in production, mutation testing, property-based testing and many other strategic &amp;amp; professional tools. Should you read every word in this guide your testing skills are likely to go way above the average&lt;/p&gt; 
&lt;h2&gt;🌐 Full-stack: front, backend, CI, anything&lt;/h2&gt; 
&lt;p&gt;Start by understanding the ubiquitous testing practices that are the foundation for any application tier. Then, delve into your area of choice: frontend/UI, backend, CI or maybe all of them?&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Written By Yoni Goldberg&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A JavaScript &amp;amp; Node.js consultant&lt;/li&gt; 
 &lt;li&gt;📗 &lt;a href=&quot;https://www.testjavascript.com&quot;&gt;Testing Node.js &amp;amp; JavaScript From A To Z&lt;/a&gt; - My comprehensive online course with more than &lt;a href=&quot;https://www.testjavascript.com&quot;&gt;10 hours of video&lt;/a&gt;, 14 test types and more than 40 best practices&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/goldbergyoni/&quot;&gt;Follow me on Twitter &lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Translations - read in your own language&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🇨🇳&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-zh-CN.md&quot;&gt;Chinese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/yvesyao&quot;&gt;Yves yao&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🇰🇷&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme.kr.md&quot;&gt;Korean&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/ragubyun&quot;&gt;Rain Byun&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🇵🇱&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-pl.md&quot;&gt;Polish&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mbiesiad&quot;&gt;Michal Biesiada&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🇪🇸&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-es.md&quot;&gt;Spanish&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/sanguino&quot;&gt;Miguel G. Sanguino&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🇧🇷&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-pt-br.md&quot;&gt;Portuguese-BR&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/iagocavalcante&quot;&gt;Iago Angelim Costa Cavalcante&lt;/a&gt; , &lt;a href=&quot;https://github.com/DouglasMV&quot;&gt;Douglas Mariano Valero&lt;/a&gt; and &lt;a href=&quot;https://github.com/koooge&quot;&gt;koooge&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Want to translate to your own language? please open an issue 💜&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;Table of Contents&lt;/code&gt;&lt;/h2&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-0%EF%B8%8F%E2%83%A3-the-golden-rule&quot;&gt;&lt;code&gt;Section 0: The Golden Rule&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;A single advice that inspires all the others (1 special bullet)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-1-the-test-anatomy-1&quot;&gt;&lt;code&gt;Section 1: The Test Anatomy&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;The foundation - structuring clean tests (12 bullets)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-2%EF%B8%8F%E2%83%A3-backend-testing&quot;&gt;&lt;code&gt;Section 2: Backend&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Writing backend and Microservices tests efficiently (8 bullets)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-3%EF%B8%8F%E2%83%A3-frontend-testing&quot;&gt;&lt;code&gt;Section 3: Frontend&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Writing tests for web UI including component and E2E tests (11 bullets)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-4%EF%B8%8F%E2%83%A3-measuring-test-effectiveness&quot;&gt;&lt;code&gt;Section 4: Measuring Tests Effectiveness&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Watching the watchman - measuring test quality (4 bullets)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-5%EF%B8%8F%E2%83%A3-ci-and-other-quality-measures&quot;&gt;&lt;code&gt;Section 5: Continuous Integration&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Guidelines for CI in the JS world (9 bullets)&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Section 0️⃣: The Golden Rule&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪️ 0 The Golden Rule: Design for lean testing&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Testing code is not like production-code - design it to be dead-simple, short, abstraction-free, flat, delightful to work with, lean. One should look at a test and get the intent instantly.&lt;/p&gt; 
&lt;p&gt;Our minds are full with the main production code, we don&#39;t have &#39;headspace&#39; for additional complexity. Should we try to squeeze yet another challenging code into our poor brain it will slow the team down which works against the reason we do testing. Practically this is where many teams just abandon testing.&lt;/p&gt; 
&lt;p&gt;The tests are an opportunity for something else - a friendly and smiley assistant, one that it&#39;s delightful to work with and delivers great value for such a small investment. Science tells us that we have two brain systems: system 1 is used for effortless activities like driving a car on an empty road and system 2 which is meant for complex and conscious operations like solving a math equation. Design your test for system 1, when looking at test code it should &lt;em&gt;feel&lt;/em&gt; as easy as modifying an HTML document and not like solving 2X(17 × 24).&lt;/p&gt; 
&lt;p&gt;This can be achieved by selectively cherry-picking techniques, tools and test targets that are cost-effective and provide great ROI. Test only as much as needed, strive to keep it nimble, sometimes it&#39;s even worth dropping some tests and trade reliability for agility and simplicity.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/headspace.png&quot; alt=&quot;alt text&quot; title=&quot;We have no head room for additional complexity&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Most of the advice below are derivatives of this principle.&lt;/p&gt; 
&lt;h3&gt;Ready to start?&lt;/h3&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Section 1: The Test Anatomy&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 1.1 Include 3 parts in each test name&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; A test report should tell whether the current application revision satisfies the requirements for the people who are not necessarily familiar with the code: the tester, the DevOps engineer who is deploying and the future you two years from now. This can be achieved best if the tests speak at the requirements level and include 3 parts:&lt;/p&gt; 
&lt;p&gt;(1) What is being tested? For example, the ProductsService.addNewProduct method&lt;/p&gt; 
&lt;p&gt;(2) Under what circumstances and scenario? For example, no price is passed to the method&lt;/p&gt; 
&lt;p&gt;(3) What is the expected result? For example, the new product is not approved&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; A deployment just failed, a test named “Add product” failed. Does this tell you what exactly is malfunctioning?&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;👇 Note:&lt;/strong&gt; Each bullet has code examples and sometime also an image illustration. Click to expand 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: A test name that constitutes 3 parts&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Mocha-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Mocha to illustrate the idea&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//1. unit under test
describe(&#39;Products Service&#39;, function() {
  describe(&#39;Add new product&#39;, function() {
    //2. scenario and 3. expectation
    it(&#39;When no price is specified, then the product status is pending approval&#39;, ()=&amp;gt; {
      const newProduct = new ProductService().add(...);
      expect(newProduct.status).to.equal(&#39;pendingApproval&#39;);
    });
  });
});

&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: A test name that constitutes 3 parts&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-1-3-parts.jpeg&quot; alt=&quot;alt text&quot; title=&quot;A test name that constitutes 3 parts&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 1.2 Structure tests by the AAA pattern&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Structure your tests with 3 well-separated sections Arrange, Act &amp;amp; Assert (AAA). Following this structure guarantees that the reader spends no brain-CPU on understanding the test plan:&lt;/p&gt; 
&lt;p&gt;1st A - Arrange: All the setup code to bring the system to the scenario the test aims to simulate. This might include instantiating the unit under test constructor, adding DB records, mocking/stubbing on objects and any other preparation code&lt;/p&gt; 
&lt;p&gt;2nd A - Act: Execute the unit under test. Usually 1 line of code&lt;/p&gt; 
&lt;p&gt;3rd A - Assert: Ensure that the received value satisfies the expectation. Usually 1 line of code&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Not only do you spend hours understanding the main code, but what should have been the simplest part of the day (testing) stretches your brain&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: A test structured with the AAA pattern&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&quot;Customer classifier&quot;, () =&amp;gt; {
  test(&quot;When customer spent more than 500$, should be classified as premium&quot;, () =&amp;gt; {
    //Arrange
    const customerToClassify = { spent: 505, joined: new Date(), id: 1 };
    const DBStub = sinon.stub(dataAccess, &quot;getCustomer&quot;).reply({ id: 1, classification: &quot;regular&quot; });

    //Act
    const receivedClassification = customerClassifier.classifyCustomer(customerToClassify);

    //Assert
    expect(receivedClassification).toMatch(&quot;premium&quot;);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: No separation, one bulk, harder to interpret&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;Should be classified as premium&quot;, () =&amp;gt; {
  const customerToClassify = { spent: 505, joined: new Date(), id: 1 };
  const DBStub = sinon.stub(dataAccess, &quot;getCustomer&quot;).reply({ id: 1, classification: &quot;regular&quot; });
  const receivedClassification = customerClassifier.classifyCustomer(customerToClassify);
  expect(receivedClassification).toMatch(&quot;premium&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️1.3 Describe expectations in a product language: use BDD-style assertions&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Coding your tests in a declarative-style allows the reader to get the grab instantly without spending even a single brain-CPU cycle. When you write imperative code that is packed with conditional logic, the reader is forced to exert more brain-CPU cycles. In that case, code the expectation in a human-like language, declarative BDD style using &lt;code&gt;expect&lt;/code&gt; or &lt;code&gt;should&lt;/code&gt; and not using custom code. If Chai &amp;amp; Jest doesn&#39;t include the desired assertion and it’s highly repeatable, consider &lt;a href=&quot;https://jestjs.io/docs/en/expect#expectextendmatchers&quot;&gt;extending Jest matcher (Jest)&lt;/a&gt; or writing a &lt;a href=&quot;https://www.chaijs.com/guide/plugins/&quot;&gt;custom Chai plugin&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; The team will write less tests and decorate the annoying ones with .skip()&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Mocha &amp;amp; Chai&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: The reader must skim through not so short, and imperative code just to get the test story&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;When asking for an admin, ensure only ordered admins in results&quot;, () =&amp;gt; {
  //assuming we&#39;ve added here two admins &quot;admin1&quot;, &quot;admin2&quot; and &quot;user1&quot;
  const allAdmins = getUsers({ adminOnly: true });

  let admin1Found,
    adming2Found = false;

  allAdmins.forEach(aSingleUser =&amp;gt; {
    if (aSingleUser === &quot;user1&quot;) {
      assert.notEqual(aSingleUser, &quot;user1&quot;, &quot;A user was found and not admin&quot;);
    }
    if (aSingleUser === &quot;admin1&quot;) {
      admin1Found = true;
    }
    if (aSingleUser === &quot;admin2&quot;) {
      admin2Found = true;
    }
  });

  if (!admin1Found || !admin2Found) {
    throw new Error(&quot;Not all admins were returned&quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Skimming through the following declarative test is a breeze&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When asking for an admin, ensure only ordered admins in results&quot;, () =&amp;gt; {
  //assuming we&#39;ve added here two admins
  const allAdmins = getUsers({ adminOnly: true });

  expect(allAdmins)
    .to.include.ordered.members([&quot;admin1&quot;, &quot;admin2&quot;])
    .but.not.include.ordered.members([&quot;user1&quot;]);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 1.4 Stick to black-box testing: Test only public methods&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Testing the internals brings huge overhead for almost nothing. If your code/API delivers the right results, should you really invest your next 3 hours in testing HOW it worked internally and then maintain these fragile tests? Whenever a public behavior is checked, the private implementation is also implicitly tested and your tests will break only if there is a certain problem (e.g. wrong output). This approach is also referred to as &lt;code&gt;behavioral testing&lt;/code&gt;. On the other side, should you test the internals (white box approach) — your focus shifts from planning the component outcome to nitty-gritty details and your test might break because of minor code refactors although the results are fine - this dramatically increases the maintenance burden 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Your tests behave like the &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Boy_Who_Cried_Wolf&quot;&gt;boy who cried wolf&lt;/a&gt;: shouting false-positive cries (e.g., A test fails because a private variable name was changed). Unsurprisingly, people will soon start to ignore the CI notifications until someday, a real bug gets ignored…&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: A test case is testing the internals for no good reason&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Mocha &amp;amp; Chai&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class ProductService {
  //this method is only used internally
  //Change this name will make the tests fail
  calculateVATAdd(priceWithoutVAT) {
    return { finalPrice: priceWithoutVAT * 1.2 };
    //Change the result format or key name above will make the tests fail
  }
  //public method
  getPrice(productId) {
    const desiredProduct = DB.getProduct(productId);
    finalPrice = this.calculateVATAdd(desiredProduct.price).finalPrice;
    return finalPrice;
  }
}

it(&quot;White-box test: When the internal methods get 0 vat, it return 0 response&quot;, async () =&amp;gt; {
  //There&#39;s no requirement to allow users to calculate the VAT, only show the final price. Nevertheless we falsely insist here to test the class internals
  expect(new ProductService().calculateVATAdd(0).finalPrice).to.equal(0);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ ️1.5 Choose the right test doubles: Avoid mocks in favor of stubs and spies&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Test doubles are a necessary evil because they are coupled to the application internals, yet some provide immense value (
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;Read here a reminder about test doubles: mocks vs stubs vs spies&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;).&lt;/p&gt; 
&lt;p&gt;Before using test doubles, ask a very simple question: Do I use it to test functionality that appears, or could appear, in the requirements document? If no, it’s a white-box testing smell.&lt;/p&gt; 
&lt;p&gt;For example, if you want to test that your app behaves reasonably when the payment service is down, you might stub the payment service and trigger some ‘No Response’ return to ensure that the unit under test returns the right value. This checks our application behavior/response/outcome under certain scenarios. You might also use a spy to assert that an email was sent when that service is down — this is again a behavioral check which is likely to appear in a requirements doc (“Send an email if payment couldn’t be saved”). On the flip side, if you mock the Payment service and ensure that it was called with the right JavaScript types — then your test is focused on internal things that got nothing with the application functionality and are likely to change frequently 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Any refactoring of code mandates searching for all the mocks in the code and updating accordingly. Tests become a burden rather than a helpful friend&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-pattern example: Mocks focus on the internals&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Sinon-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Sinon&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When a valid product is about to be deleted, ensure data access DAL was called once, with the right product and right config&quot;, async () =&amp;gt; {
  //Assume we already added a product
  const dataAccessMock = sinon.mock(DAL);
  //hmmm BAD: testing the internals is actually our main goal here, not just a side-effect
  dataAccessMock
    .expects(&quot;deleteProduct&quot;)
    .once()
    .withArgs(DBConfig, theProductWeJustAdded, true, false);
  new ProductService().deletePrice(theProductWeJustAdded);
  dataAccessMock.verify();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap:Doing It Right Example: spies are focused on testing the requirements but as a side-effect are unavoidably touching to the internals&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When a valid product is about to be deleted, ensure an email is sent&quot;, async () =&amp;gt; {
  //Assume we already added here a product
  const spy = sinon.spy(Emailer.prototype, &quot;sendEmail&quot;);
  new ProductService().deletePrice(theProductWeJustAdded);
  //hmmm OK: we deal with internals? Yes, but as a side effect of testing the requirements (sending an email)
  expect(spy.calledOnce).to.be.true;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;📗 Want to learn all these practices with live video?&lt;/h2&gt; 
&lt;h3&gt;Visit my online course &lt;a href=&quot;https://www.testjavascript.com&quot;&gt;Testing Node.js &amp;amp; JavaScript From A To Z&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️1.6 Don’t “foo”, use realistic input data&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Often production bugs are revealed under some very specific and surprising input — the more realistic the test input is, the greater the chances are to catch bugs early. Use dedicated libraries like &lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker&lt;/a&gt; to generate pseudo-real data that resembles the variety and form of production data. For example, such libraries can generate realistic phone numbers, usernames, credit card, company names, and even ‘lorem ipsum’ text. You may also create some tests (on top of unit tests, not as a replacement) that randomize fakers data to stretch your unit under test or even import real data from your production environment. Want to take it to the next level? See the next bullet (property-based testing). 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; All your development testing will falsely show green when you use synthetic inputs like “Foo”, but then production might turn red when a hacker passes-in a nasty string like “@3e2ddsf . ##’ 1 fdsfds . fds432 AAAA”&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: A test suite that passes due to non-realistic data&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addProduct = (name, price) =&amp;gt; {
  const productNameRegexNoSpace = /^\S*$/; //no white-space allowed

  if (!productNameRegexNoSpace.test(name)) return false; //this path never reached due to dull input

  //some logic here
  return true;
};

test(&quot;Wrong: When adding new product with valid properties, get successful confirmation&quot;, async () =&amp;gt; {
  //The string &quot;Foo&quot; which is used in all tests never triggers a false result
  const addProductResult = addProduct(&quot;Foo&quot;, 5);
  expect(addProductResult).toBe(true);
  //Positive-false: the operation succeeded because we never tried with long
  //product name including spaces
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap:Doing It Right Example: Randomizing realistic input&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;Better: When adding new valid product, get successful confirmation&quot;, async () =&amp;gt; {
  const addProductResult = addProduct(faker.commerce.productName(), faker.random.number());
  //Generated random input: {&#39;Sleek Cotton Computer&#39;,  85481}
  expect(addProductResult).to.be.true;
  //Test failed, the random input triggered some path we never planned for.
  //We discovered a bug early!
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 1.7 Test many input combinations using Property-based testing&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Typically we choose a few input samples for each test. Even when the input format resembles real-world data (see bullet ‘Don’t foo’), we cover only a few input combinations (method(‘’, true, 1), method(“string” , false” , 0)), However, in production, an API that is called with 5 parameters can be invoked with thousands of different permutations, one of them might render our process down (&lt;a href=&quot;https://en.wikipedia.org/wiki/Fuzzing&quot;&gt;see Fuzz Testing&lt;/a&gt;). What if you could write a single test that sends 1000 permutations of different inputs automatically and catches for which input our code fails to return the right response? Property-based testing is a technique that does exactly that: by sending all the possible input combinations to your unit under test it increases the serendipity of finding a bug. For example, given a method — addNewProduct(id, name, isDiscount) — the supporting libraries will call this method with many combinations of (number, string, boolean) like (1, “iPhone”, false), (2, “Galaxy”, true). You can run property-based testing using your favorite test runner (Mocha, Jest, etc) using libraries like &lt;a href=&quot;https://github.com/jsverify/jsverify&quot;&gt;js-verify&lt;/a&gt; or &lt;a href=&quot;https://github.com/leebyron/testcheck-js&quot;&gt;testcheck&lt;/a&gt; (much better documentation). Update: Nicolas Dubien suggests in the comments below to &lt;a href=&quot;https://github.com/dubzzz/fast-check#readme&quot;&gt;checkout fast-check&lt;/a&gt; which seems to offer some additional features and also to be actively maintained 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Unconsciously, you choose the test inputs that cover only code paths that work well. Unfortunately, this decreases the efficiency of testing as a vehicle to expose bugs&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Testing many input permutations with “fast-check”&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import fc from &quot;fast-check&quot;;

describe(&quot;Product service&quot;, () =&amp;gt; {
  describe(&quot;Adding new&quot;, () =&amp;gt; {
    //this will run 100 times with different random properties
    it(&quot;Add new product with random yet valid properties, always successful&quot;, () =&amp;gt;
      fc.assert(
        fc.property(fc.integer(), fc.string(), (id, name) =&amp;gt; {
          expect(addNewProduct(id, name).status).toEqual(&quot;approved&quot;);
        })
      ));
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 1.8 If needed, use only short &amp;amp; inline snapshots&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; When there is a need for &lt;a href=&quot;https://jestjs.io/docs/en/snapshot-testing&quot;&gt;snapshot testing&lt;/a&gt;, use only short and focused snapshots (i.e. 3-7 lines) that are included as part of the test (&lt;a href=&quot;https://jestjs.io/docs/en/snapshot-testing#inline-snapshots&quot;&gt;Inline Snapshot&lt;/a&gt;) and not within external files. Keeping this guideline will ensure your tests remain self-explanatory and less fragile.&lt;/p&gt; 
&lt;p&gt;On the other hand, ‘classic snapshots’ tutorials and tools encourage to store big files (e.g. component rendering markup, API JSON result) over some external medium and ensure each time when the test run to compare the received result with the saved version. This, for example, can implicitly couple our test to 1000 lines with 3000 data values that the test writer never read and reasoned about. Why is this wrong? By doing so, there are 1000 reasons for your test to fail - it’s enough for a single line to change for the snapshot to get invalid and this is likely to happen a lot. How frequently? for every space, comment or minor CSS/HTML change. Not only this, the test name wouldn’t give a clue about the failure as it just checks that 1000 lines didn’t change, also it encourages to the test writer to accept as the desired true a long document he couldn’t inspect and verify. All of these are symptoms of obscure and eager test that is not focused and aims to achieve too much&lt;/p&gt; 
&lt;p&gt;It’s worth noting that there are few cases where long &amp;amp; external snapshots are acceptable - when asserting on schema and not data (extracting out values and focusing on fields) or when the received document rarely changes 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; A UI test fails. The code seems right, the screen renders perfect pixels, what happened? your snapshot testing just found a difference from the origin document to current received one - a single space character was added to the markdown...&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: Coupling our test to unseen 2000 lines of code&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;TestJavaScript.com is renderd correctly&quot;, () =&amp;gt; {
  //Arrange

  //Act
  const receivedPage = renderer
    .create(&amp;lt;DisplayPage page=&quot;http://www.testjavascript.com&quot;&amp;gt; Test JavaScript &amp;lt;/DisplayPage&amp;gt;)
    .toJSON();

  //Assert
  expect(receivedPage).toMatchSnapshot();
  //We now implicitly maintain a 2000 lines long document
  //every additional line break or comment - will break this test
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Expectations are visible and focused&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When visiting TestJavaScript.com home page, a menu is displayed&quot;, () =&amp;gt; {
  //Arrange

  //Act
  const receivedPage = renderer
    .create(&amp;lt;DisplayPage page=&quot;http://www.testjavascript.com&quot;&amp;gt; Test JavaScript &amp;lt;/DisplayPage&amp;gt;)
    .toJSON();

  //Assert

  const menu = receivedPage.content.menu;
  expect(menu).toMatchInlineSnapshot(`
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt; About &amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt; Contact &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
`);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️1.9 Avoid global test fixtures and seeds, add data per-test&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Going by the golden rule (bullet 0), each test should add and act on its own set of DB rows to prevent coupling and easily reason about the test flow. In reality, this is often violated by testers who seed the DB with data before running the tests (&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_fixture&quot;&gt;also known as ‘test fixture’&lt;/a&gt;) for the sake of performance improvement. While performance is indeed a valid concern — it can be mitigated (see “Component testing” bullet), however, test complexity is a much painful sorrow that should govern other considerations most of the time. Practically, make each test case explicitly add the DB records it needs and act only on those records. If performance becomes a critical concern — a balanced compromise might come in the form of seeding the only suite of tests that are not mutating data (e.g. queries) 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Few tests fail, a deployment is aborted, our team is going to spend precious time now, do we have a bug? let’s investigate, oh no — it seems that two tests were mutating the same seed data&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: tests are not independent and rely on some global hook to feed global DB data&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;before(async () =&amp;gt; {
  //adding sites and admins data to our DB. Where is the data? outside. At some external json or migration framework
  await DB.AddSeedDataFromJson(&#39;seed.json&#39;);
});
it(&quot;When updating site name, get successful confirmation&quot;, async () =&amp;gt; {
  //I know that site name &quot;portal&quot; exists - I saw it in the seed files
  const siteToUpdate = await SiteService.getSiteByName(&quot;Portal&quot;);
  const updateNameResult = await SiteService.changeName(siteToUpdate, &quot;newName&quot;);
  expect(updateNameResult).to.be(true);
});
it(&quot;When querying by site name, get the right site&quot;, async () =&amp;gt; {
  //I know that site name &quot;portal&quot; exists - I saw it in the seed files
  const siteToCheck = await SiteService.getSiteByName(&quot;Portal&quot;);
  expect(siteToCheck.name).to.be.equal(&quot;Portal&quot;); //Failure! The previous test change the name :[
});

&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: We can stay within the test, each test acts on its own set of data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When updating site name, get successful confirmation&quot;, async () =&amp;gt; {
  //test is adding a fresh new records and acting on the records only
  const siteUnderTest = await SiteService.addSite({
    name: &quot;siteForUpdateTest&quot;
  });

  const updateNameResult = await SiteService.changeName(siteUnderTest, &quot;newName&quot;);

  expect(updateNameResult).to.be(true);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 1.10 Don’t catch errors, expect them&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; When trying to assert that some input triggers an error, it might look right to use try-catch-finally and asserts that the catch clause was entered. The result is an awkward and verbose test case (example below) that hides the simple test intent and the result expectations&lt;/p&gt; 
&lt;p&gt;A more elegant alternative is the using the one-line dedicated Chai assertion: expect(method).to.throw (or in Jest: expect(method).toThrow()). It’s absolutely mandatory to also ensure the exception contains a property that tells the error type, otherwise given just a generic error the application won’t be able to do much rather than show a disappointing message to the user 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; It will be challenging to infer from the test reports (e.g. CI reports) what went wrong&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-pattern Example: A long test case that tries to assert the existence of error with try-catch&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When no product name, it throws error 400&quot;, async () =&amp;gt; {
  let errorWeExceptFor = null;
  try {
    const result = await addNewProduct({});
  } catch (error) {
    expect(error.code).to.equal(&quot;InvalidInput&quot;);
    errorWeExceptFor = error;
  }
  expect(errorWeExceptFor).not.to.be.null;
  //if this assertion fails, the tests results/reports will only show
  //that some value is null, there won&#39;t be a word about a missing Exception
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: A human-readable expectation that could be understood easily, maybe even by QA or technical PM&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When no product name, it throws error 400&quot;, async () =&amp;gt; {
  await expect(addNewProduct({}))
    .to.eventually.throw(AppError)
    .with.property(&quot;code&quot;, &quot;InvalidInput&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 1.11 Tag your tests&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Different tests must run on different scenarios: quick smoke, IO-less, tests should run when a developer saves or commits a file, full end-to-end tests usually run when a new pull request is submitted, etc. This can be achieved by tagging tests with keywords like #cold #api #sanity so you can grep with your testing harness and invoke the desired subset. For example, this is how you would invoke only the sanity test group with Mocha: mocha — grep ‘sanity’ 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Running all the tests, including tests that perform dozens of DB queries, any time a developer makes a small change can be extremely slow and keeps developers away from running tests&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Tagging tests as ‘#cold-test’ allows the test runner to execute only fast tests (Cold===quick tests that are doing no IO and can be executed frequently even as the developer is typing)&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//this test is fast (no DB) and we&#39;re tagging it correspondigly
//now the user/CI can run it frequently
describe(&quot;Order service&quot;, function() {
  describe(&quot;Add new order #cold-test #sanity&quot;, function() {
    test(&quot;Scenario - no currency was supplied. Expectation - Use the default currency #sanity&quot;, function() {
      //code logic here
    });
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 1.12 Categorize tests under at least 2 levels&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Apply some structure to your test suite so an occasional visitor could easily understand the requirements (tests are the best documentation) and the various scenarios that are being tested. A common method for this is by placing at least 2 &#39;describe&#39; blocks above your tests: the 1st is for the name of the unit under test and the 2nd for additional level of categorization like the scenario or custom categories (see code examples and print screen below). Doing so will also greatly improve the test reports: The reader will easily infer the tests categories, delve into the desired section and correlate failing tests. In addition, it will get much easier for a developer to navigate through the code of a suite with many tests. There are multiple alternative structures for test suite that you may consider like &lt;a href=&quot;https://github.com/searls/jasmine-given&quot;&gt;given-when-then&lt;/a&gt; and &lt;a href=&quot;https://github.com/ericelliott/riteway&quot;&gt;RITE&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; When looking at a report with flat and long list of tests, the reader have to skim-read through long texts to conclude the major scenarios and correlate the commonality of failing tests. Consider the following case: When 7/100 tests fail, looking at a flat list will demand reading the failing tests text to see how they relate to each other. However, in a hierarchical report all of them could be under the same flow or category and the reader will quickly infer what or at least where is the root failure cause&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Structuring suite with the name of unit under test and scenarios will lead to the convenient report that is shown below&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Unit under test
describe(&quot;Transfer service&quot;, () =&amp;gt; {
  //Scenario
  describe(&quot;When no credit&quot;, () =&amp;gt; {
    //Expectation
    test(&quot;Then the response status should decline&quot;, () =&amp;gt; {});

    //Expectation
    test(&quot;Then it should send email to admin&quot;, () =&amp;gt; {});
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/hierarchical-report.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-pattern Example: A flat list of tests will make it harder for the reader to identify the user stories and correlate failing tests&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;Then the response status should decline&quot;, () =&amp;gt; {});

test(&quot;Then it should send email&quot;, () =&amp;gt; {});

test(&quot;Then there should not be a new transfer record&quot;, () =&amp;gt; {});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/flat-report.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️1.13 Other generic good testing hygiene&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; This post is focused on testing advice that is related to, or at least can be exemplified with Node JS. This bullet, however, groups few non-Node related tips that are well-known&lt;/p&gt; 
&lt;p&gt;Learn and practice &lt;a href=&quot;https://www.sm-cloud.com/book-review-test-driven-development-by-example-a-tldr/&quot;&gt;TDD principles&lt;/a&gt; — they are extremely valuable for many but don’t get intimidated if they don’t fit your style, you’re not the only one. Consider writing the tests before the code in a &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html&quot;&gt;red-green-refactor style&lt;/a&gt;, ensure each test checks exactly one thing, when you find a bug — before fixing write a test that will detect this bug in the future, let each test fail at least once before turning green, start a module by writing a quick and simplistic code that satisfies the test - then refactor gradually and take it to a production grade level, avoid any dependency on the environment (paths, OS, etc) 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; You‘ll miss pearls of wisdom that were collected for decades&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Section 2️⃣: Backend Testing&lt;/h1&gt; 
&lt;h2&gt;⚪ ️2.1 Enrich your testing portfolio: Look beyond unit tests and the pyramid&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; The &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;testing pyramid&lt;/a&gt;, though 10&amp;gt; years old, is a great and relevant model that suggests three testing types and influences most developers’ testing strategy. At the same time, more than a handful of shiny new testing techniques emerged and are hiding in the shadows of the testing pyramid. Given all the dramatic changes that we’ve seen in the recent 10 years (Microservices, cloud, serverless), is it even possible that one quite-old model will suit &lt;em&gt;all&lt;/em&gt; types of applications? shouldn’t the testing world consider welcoming new testing techniques?&lt;/p&gt; 
&lt;p&gt;Don’t get me wrong, in 2019 the testing pyramid, TDD and unit tests are still a powerful technique and are probably the best match for many applications. Only like any other model, despite its usefulness, &lt;a href=&quot;https://en.wikipedia.org/wiki/All_models_are_wrong&quot;&gt;it must be wrong sometimes&lt;/a&gt;. For example, consider an IoT application that ingests many events into a message-bus like Kafka/RabbitMQ, which then flow into some data-warehouse and are eventually queried by some analytics UI. Should we really spend 50% of our testing budget on writing unit tests for an application that is integration-centric and has almost no logic? As the diversity of application types increase (bots, crypto, Alexa-skills) greater are the chances to find scenarios where the testing pyramid is not the best match.&lt;/p&gt; 
&lt;p&gt;It’s time to enrich your testing portfolio and become familiar with more testing types (the next bullets suggest few ideas), mind models like the testing pyramid but also match testing types to real-world problems that you’re facing (‘Hey, our API is broken, let’s write consumer-driven contract testing!’), diversify your tests like an investor that build a portfolio based on risk analysis — assess where problems might arise and match some prevention measures to mitigate those potential risks&lt;/p&gt; 
&lt;p&gt;A word of caution: the TDD argument in the software world takes a typical false-dichotomy face, some preach to use it everywhere, others think it’s the devil. Everyone who speaks in absolutes is wrong :]&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; You’re going to miss some tools with amazing ROI, some like Fuzz, lint, and mutation can provide value in 10 minutes&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Cindy Sridharan suggests a rich testing portfolio in her amazing post ‘Testing Microservices — the same way’&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-12-rich-testing.jpeg&quot; alt=&quot;alt text&quot; title=&quot;Cindy Sridharan suggests a rich testing portfolio in her amazing post ‘Testing Microservices — the sane way’&quot;&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;☺️Example: 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-2zP494wdUY&amp;amp;feature=youtu.be&quot;&gt;YouTube: “Beyond Unit Tests: 5 Shiny Node.JS Test Types (2018)” (Yoni Goldberg)&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-12-Yoni-Goldberg-Testing.jpeg&quot; alt=&quot;alt text&quot; title=&quot;A test name that constitutes 3 parts&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️2.2 Component testing might be your best affair&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Each unit test covers a tiny portion of the application and it’s expensive to cover the whole, whereas end-to-end testing easily covers a lot of ground but is flaky and slower, why not apply a balanced approach and write tests that are bigger than unit tests but smaller than end-to-end testing? Component testing is the unsung song of the testing world — they provide the best from both worlds: reasonable performance and a possibility to apply TDD patterns + realistic and great coverage.&lt;/p&gt; 
&lt;p&gt;Component tests focus on the Microservice ‘unit’, they work against the API, don’t mock anything which belongs to the Microservice itself (e.g. real DB, or at least the in-memory version of that DB) but stub anything that is external like calls to other Microservices. By doing so, we test what we deploy, approach the app from outwards to inwards and gain great confidence in a reasonable amount of time. 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; You may spend long days on writing unit tests to find out that you got only 20% system coverage&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Supertest allows approaching Express API in-process (fast and cover many layers)&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-13-component-test-yoni-goldberg.png&quot; alt=&quot;alt text&quot; title=&quot; [Supertest](https://www.npmjs.com/package/supertest) allows approaching Express API in-process (fast and cover many layers)&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️2.3 Ensure new releases don’t break the API using contract tests&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; So your Microservice has multiple clients, and you run multiple versions of the service for compatibility reasons (keeping everyone happy). Then you change some field and ‘boom!’, some important client who relies on this field is angry. This is the Catch-22 of the integration world: It’s very challenging for the server side to consider all the multiple client expectations — On the other hand, the clients can’t perform any testing because the server controls the release dates. &lt;a href=&quot;https://docs.pact.io/&quot;&gt;Consumer-driven contracts and the framework PACT&lt;/a&gt; were born to formalize this process with a very disruptive approach — not the server defines the test plan of itself rather the client defines the tests of the… server! PACT can record the client expectation and put in a shared location, “broker”, so the server can pull the expectations and run on every build using PACT library to detect broken contracts — a client expectation that is not met. By doing so, all the server-client API mismatches are caught early during build/CI and might save you a great deal of frustration 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; The alternatives are exhausting manual testing or deployment fear&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example:&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20PACT-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with PACT&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-14-testing-best-practices-contract-flow.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 2.4 Test your middlewares in isolation&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Many avoid Middleware testing because they represent a small portion of the system and require a live Express server. Both reasons are wrong — Middlewares are small but affect all or most of the requests and can be tested easily as pure functions that get {req,res} JS objects. To test a middleware function one should just invoke it and spy (&lt;a href=&quot;https://www.npmjs.com/package/sinon&quot;&gt;using Sinon for example&lt;/a&gt;) on the interaction with the {req,res} objects to ensure the function performed the right action. The library &lt;a href=&quot;https://www.npmjs.com/package/node-mocks-http&quot;&gt;node-mock-http&lt;/a&gt; takes it even further and factors the {req,res} objects along with spying on their behavior. For example, it can assert whether the http status that was set on the res object matches the expectation (See example below) 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; A bug in Express middleware === a bug in all or most requests&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap:Doing It Right Example: Testing middleware in isolation without issuing network calls and waking-up the entire Express machine&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//the middleware we want to test
const unitUnderTest = require(&quot;./middleware&quot;);
const httpMocks = require(&quot;node-mocks-http&quot;);
//Jest syntax, equivelant to describe() &amp;amp; it() in Mocha
test(&quot;A request without authentication header, should return http status 403&quot;, () =&amp;gt; {
  const request = httpMocks.createRequest({
    method: &quot;GET&quot;,
    url: &quot;/user/42&quot;,
    headers: {
      authentication: &quot;&quot;
    }
  });
  const response = httpMocks.createResponse();
  unitUnderTest(request, response);
  expect(response.statusCode).toBe(403);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️2.5 Measure and refactor using static analysis tools&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Using static analysis tools helps by giving objective ways to improve code quality and keep your code maintainable. You can add static analysis tools to your CI build to abort when it finds code smells. Its main selling points over plain linting are the ability to inspect quality in the context of multiple files (e.g. detect duplications), perform advanced analysis (e.g. code complexity) and follow the history and progress of code issues. Two examples of tools you can use are &lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;SonarQube&lt;/a&gt; (4,900+ &lt;a href=&quot;https://github.com/SonarSource/sonarqube&quot;&gt;stars&lt;/a&gt;) and &lt;a href=&quot;https://codeclimate.com/&quot;&gt;Code Climate&lt;/a&gt; (2,000+ &lt;a href=&quot;https://github.com/codeclimate/codeclimate&quot;&gt;stars&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;Credit: 
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://github.com/TheHollidayInn&quot;&gt;Keith Holliday&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; With poor code quality, bugs and performance will always be an issue that no shiny new library or state of the art features can fix&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: CodeClimate, a commercial tool that can identify complex methods:&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Code%20Climate-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with CodeClimate&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-16-yoni-goldberg-quality.png&quot; alt=&quot;alt text&quot; title=&quot;CodeClimate, a commercial tool that can identify complex methods:&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 2.6 Check your readiness for Node-related chaos&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Weirdly, most software testings are about logic &amp;amp; data only, but some of the worst things that happen (and are really hard to mitigate) are infrastructural issues. For example, did you ever test what happens when your process memory is overloaded, or when the server/process dies, or does your monitoring system realizes when the API becomes 50% slower?. To test and mitigate these type of bad things — &lt;a href=&quot;https://principlesofchaos.org/&quot;&gt;Chaos engineering&lt;/a&gt; was born by Netflix. It aims to provide awareness, frameworks and tools for testing our app resiliency for chaotic issues. For example, one of its famous tools, &lt;a href=&quot;https://github.com/Netflix/chaosmonkey&quot;&gt;the chaos monkey&lt;/a&gt;, randomly kills servers to ensure that our service can still serve users and not relying on a single server (there is also a Kubernetes version, &lt;a href=&quot;https://github.com/asobti/kube-monkey&quot;&gt;kube-monkey&lt;/a&gt;, that kills pods). All these tools work on the hosting/platform level, but what if you wish to test and generate pure Node chaos like check how your Node process copes with uncaught errors, unhandled promise rejection, v8 memory overloaded with the max allowed of 1.7GB or whether your UX remains satisfactory when the event loop gets blocked often? to address this I’ve written, &lt;a href=&quot;https://github.com/i0natan/node-chaos-monkey&quot;&gt;node-chaos&lt;/a&gt; (alpha) which provides all sort of Node-related chaotic acts 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; No escape here, Murphy’s law will hit your production without mercy&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: : Node-chaos can generate all sort of Node.js pranks so you can test how resilience is your app to chaos&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-17-yoni-goldberg-chaos-monkey-nodejs.png&quot; alt=&quot;alt text&quot; title=&quot;Node-chaos can generate all sort of Node.js pranks so you can test how resilience is your app to chaos&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️2.7 Avoid global test fixtures and seeds, add data per-test&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Going by the golden rule (bullet 0), each test should add and act on its own set of DB rows to prevent coupling and easily reason about the test flow. In reality, this is often violated by testers who seed the DB with data before running the tests (also known as ‘test fixture’) for the sake of performance improvement. While performance is indeed a valid concern — it can be mitigated (see “Component testing” bullet), however, test complexity is a much painful sorrow that should govern other considerations most of the time. Practically, make each test case explicitly add the DB records it needs and act only on those records. If performance becomes a critical concern — a balanced compromise might come in the form of seeding the only suite of tests that are not mutating data (e.g. queries) 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Few tests fail, a deployment is aborted, our team is going to spend precious time now, do we have a bug? let’s investigate, oh no — it seems that two tests were mutating the same seed data&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: tests are not independent and rely on some global hook to feed global DB data&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;before(async () =&amp;gt; {
  //adding sites and admins data to our DB. Where is the data? outside. At some external json or migration framework
  await DB.AddSeedDataFromJson(&#39;seed.json&#39;);
});
it(&quot;When updating site name, get successful confirmation&quot;, async () =&amp;gt; {
  //I know that site name &quot;portal&quot; exists - I saw it in the seed files
  const siteToUpdate = await SiteService.getSiteByName(&quot;Portal&quot;);
  const updateNameResult = await SiteService.changeName(siteToUpdate, &quot;newName&quot;);
  expect(updateNameResult).to.be(true);
});
it(&quot;When querying by site name, get the right site&quot;, async () =&amp;gt; {
  //I know that site name &quot;portal&quot; exists - I saw it in the seed files
  const siteToCheck = await SiteService.getSiteByName(&quot;Portal&quot;);
  expect(siteToCheck.name).to.be.equal(&quot;Portal&quot;); //Failure! The previous test change the name :[
});

&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: We can stay within the test, each test acts on its own set of data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When updating site name, get successful confirmation&quot;, async () =&amp;gt; {
  //test is adding a fresh new records and acting on the records only
  const siteUnderTest = await SiteService.addSite({
    name: &quot;siteForUpdateTest&quot;
  });
  const updateNameResult = await SiteService.changeName(siteUnderTest, &quot;newName&quot;);
  expect(updateNameResult).to.be(true);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Section 3️⃣: Frontend Testing&lt;/h1&gt; 
&lt;h2&gt;⚪ ️ 3.1 Separate UI from functionality&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; When focusing on testing component logic, UI details become a noise that should be extracted, so your tests can focus on pure data. Practically, extract the desired data from the markup in an abstract way that is not too coupled to the graphic implementation, assert only on pure data (vs HTML/CSS graphic details) and disable animations that slow down. You might get tempted to avoid rendering and test only the back part of the UI (e.g. services, actions, store) but this will result in fictional tests that don&#39;t resemble the reality and won&#39;t reveal cases where the right data doesn&#39;t even arrive in the UI&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; The pure calculated data of your test might be ready in 10ms, but then the whole test will last 500ms (100 tests = 1 min) due to some fancy and irrelevant animation&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Separating out the UI details&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with React&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React%20Testing%20Library-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with react-testing-library&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;When users-list is flagged to show only VIP, should display only VIP members&quot;, () =&amp;gt; {
  // Arrange
  const allUsers = [{ id: 1, name: &quot;Yoni Goldberg&quot;, vip: false }, { id: 2, name: &quot;John Doe&quot;, vip: true }];

  // Act
  const { getAllByTestId } = render(&amp;lt;UsersList users={allUsers} showOnlyVIP={true} /&amp;gt;);

  // Assert - Extract the data from the UI first
  const allRenderedUsers = getAllByTestId(&quot;user&quot;).map(uiElement =&amp;gt; uiElement.textContent);
  const allRealVIPUsers = allUsers.filter(user =&amp;gt; user.vip).map(user =&amp;gt; user.name);
  expect(allRenderedUsers).toEqual(allRealVIPUsers); //compare data with data, no UI here
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: Assertion mix UI details and data&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;When flagging to show only VIP, should display only VIP members&quot;, () =&amp;gt; {
  // Arrange
  const allUsers = [{ id: 1, name: &quot;Yoni Goldberg&quot;, vip: false }, { id: 2, name: &quot;John Doe&quot;, vip: true }];

  // Act
  const { getAllByTestId } = render(&amp;lt;UsersList users={allUsers} showOnlyVIP={true} /&amp;gt;);

  // Assert - Mix UI &amp;amp; data in assertion
  expect(getAllByTestId(&quot;user&quot;)).toEqual(&#39;[&amp;lt;li data-testid=&quot;user&quot;&amp;gt;John Doe&amp;lt;/li&amp;gt;]&#39;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 3.2 Query HTML elements based on attributes that are unlikely to change&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Query HTML elements based on attributes that are likely to survive graphic changes unlike CSS selectors and like form labels. If the designated element doesn&#39;t have such attributes, create a dedicated test attribute like &#39;test-id-submit-button&#39;. Going this route not only ensures that your functional/logic tests never break because of look &amp;amp; feel changes but also it becomes clear to the entire team that this element and attribute are utilized by tests and shouldn&#39;t get removed&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; You want to test the login functionality that spans many components, logic and services, everything is set up perfectly - stubs, spies, Ajax calls are isolated. All seems perfect. Then the test fails because the designer changed the div CSS class from &#39;thick-border&#39; to &#39;thin-border&#39;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Querying an element using a dedicated attribute for testing&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with React&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;// the markup code (part of React component)
&amp;lt;h3&amp;gt;
  &amp;lt;Badge pill className=&quot;fixed_badge&quot; variant=&quot;dark&quot;&amp;gt;
    &amp;lt;span data-testid=&quot;errorsLabel&quot;&amp;gt;{value}&amp;lt;/span&amp;gt;
    &amp;lt;!-- note the attribute data-testid --&amp;gt;
  &amp;lt;/Badge&amp;gt;
&amp;lt;/h3&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// this example is using react-testing-library
test(&quot;Whenever no data is passed to metric, show 0 as default&quot;, () =&amp;gt; {
  // Arrange
  const metricValue = undefined;

  // Act
  const { getByTestId } = render(&amp;lt;dashboardMetric value={undefined} /&amp;gt;);

  expect(getByTestId(&quot;errorsLabel&quot;).text()).toBe(&quot;0&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: Relying on CSS attributes&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- the markup code (part of React component) --&amp;gt;
&amp;lt;span id=&quot;metric&quot; className=&quot;d-flex-column&quot;&amp;gt;{value}&amp;lt;/span&amp;gt;
&amp;lt;!-- what if the designer changes the classs? --&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// this exammple is using enzyme
test(&quot;Whenever no data is passed, error metric shows zero&quot;, () =&amp;gt; {
  // ...

  expect(wrapper.find(&quot;[className=&#39;d-flex-column&#39;]&quot;).text()).toBe(&quot;0&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 3.3 Whenever possible, test with a realistic and fully rendered component&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Whenever reasonably sized, test your component from outside like your users do, fully render the UI, act on it and assert that the rendered UI behaves as expected. Avoid all sort of mocking, partial and shallow rendering - this approach might result in untrapped bugs due to lack of details and harden the maintenance as the tests mess with the internals (see bullet &#39;Favour blackbox testing&#39;). If one of the child components is significantly slowing down (e.g. animation) or complicating the setup - consider explicitly replacing it with a fake&lt;/p&gt; 
&lt;p&gt;With all that said, a word of caution is in order: this technique works for small/medium components that pack a reasonable size of child components. Fully rendering a component with too many children will make it hard to reason about test failures (root cause analysis) and might get too slow. In such cases, write only a few tests against that fat parent component and more tests against its children&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; When poking into a component&#39;s internal by invoking its private methods, and checking the inner state - you would have to refactor all tests when refactoring the components implementation. Do you really have a capacity for this level of maintenance?&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Working realistically with a fully rendered component&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with React&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Enzyme-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Enzyme&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Calendar extends React.Component {
  static defaultProps = { showFilters: false };

  render() {
    return (
      &amp;lt;div&amp;gt;
        A filters panel with a button to hide/show filters
        &amp;lt;FiltersPanel showFilter={showFilters} title=&quot;Choose Filters&quot; /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

//Examples use React &amp;amp; Enzyme
test(&quot;Realistic approach: When clicked to show filters, filters are displayed&quot;, () =&amp;gt; {
  // Arrange
  const wrapper = mount(&amp;lt;Calendar showFilters={false} /&amp;gt;);

  // Act
  wrapper.find(&quot;button&quot;).simulate(&quot;click&quot;);

  // Assert
  expect(wrapper.text().includes(&quot;Choose Filter&quot;));
  // This is how the user will approach this element: by text
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: Mocking the reality with shallow rendering&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;Shallow/mocked approach: When clicked to show filters, filters are displayed&quot;, () =&amp;gt; {
  // Arrange
  const wrapper = shallow(&amp;lt;Calendar showFilters={false} title=&quot;Choose Filter&quot; /&amp;gt;);

  // Act
  wrapper
    .find(&quot;filtersPanel&quot;)
    .instance()
    .showFilters();
  // Tap into the internals, bypass the UI and invoke a method. White-box approach

  // Assert
  expect(wrapper.find(&quot;Filter&quot;).props()).toEqual({ title: &quot;Choose Filter&quot; });
  // what if we change the prop name or don&#39;t pass anything relevant?
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 3.4 Don&#39;t sleep, use frameworks built-in support for async events. Also try to speed things up&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; In many cases, the unit under test completion time is just unknown (e.g. animation suspends element appearance) - in that case, avoid sleeping (e.g. setTimeOut) and prefer more deterministic methods that most platforms provide. Some libraries allows awaiting on operations (e.g. &lt;a href=&quot;https://docs.cypress.io/guides/references/best-practices.html#Unnecessary-Waiting&quot;&gt;Cypress cy.request(&#39;url&#39;)&lt;/a&gt;), other provide API for waiting like &lt;a href=&quot;https://testing-library.com/docs/guide-disappearance&quot;&gt;@testing-library/dom method wait(expect(element))&lt;/a&gt;. Sometimes a more elegant way is to stub the slow resource, like API for example, and then once the response moment becomes deterministic the component can be explicitly re-rendered. When depending upon some external component that sleeps, it might turn useful to &lt;a href=&quot;https://jestjs.io/docs/en/timer-mocks&quot;&gt;hurry-up the clock&lt;/a&gt;. Sleeping is a pattern to avoid because it forces your test to be slow or risky (when waiting for a too short period). Whenever sleeping and polling is inevitable and there&#39;s no support from the testing framework, some npm libraries like &lt;a href=&quot;https://www.npmjs.com/package/wait-for-expect&quot;&gt;wait-for-expect&lt;/a&gt; can help with a semi-deterministic solution 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; When sleeping for a long time, tests will be an order of magnitude slower. When trying to sleep for small numbers, test will fail when the unit under test didn&#39;t respond in a timely fashion. So it boils down to a trade-off between flakiness and bad performance&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: E2E API that resolves only when the async operations is done (Cypress)&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cypress-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Cypress to illustrate the idea&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React%20Testing%20Library-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with react-testing-library&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// using Cypress
cy.get(&quot;#show-products&quot;).click(); // navigate
cy.wait(&quot;@products&quot;); // wait for route to appear
// this line will get executed only when the route is ready
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Testing library that waits for DOM elements&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// @testing-library/dom
test(&quot;movie title appears&quot;, async () =&amp;gt; {
  // element is initially not present...

  // wait for appearance
  await wait(() =&amp;gt; {
    expect(getByText(&quot;the lion king&quot;)).toBeInTheDocument();
  });

  // wait for appearance and return the element
  const movie = await waitForElement(() =&amp;gt; getByText(&quot;the lion king&quot;));
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: custom sleep code&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;movie title appears&quot;, async () =&amp;gt; {
  // element is initially not present...

  // custom wait logic (caution: simplistic, no timeout)
  const interval = setInterval(() =&amp;gt; {
    const found = getByText(&quot;the lion king&quot;);
    if (found) {
      clearInterval(interval);
      expect(getByText(&quot;the lion king&quot;)).toBeInTheDocument();
    }
  }, 100);

  // wait for appearance and return the element
  const movie = await waitForElement(() =&amp;gt; getByText(&quot;the lion king&quot;));
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 3.5 Watch how the content is served over the network&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Google%20LightHouse-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with Lighthouse&quot;&gt;&lt;/p&gt; 
&lt;p&gt;✅ &lt;strong&gt;Do:&lt;/strong&gt; Apply some active monitor that ensures the page load under real network is optimized - this includes any UX concern like slow page load or un-minified bundle. The inspection tools market is no short: basic tools like &lt;a href=&quot;https://www.pingdom.com/&quot;&gt;pingdom&lt;/a&gt;, AWS CloudWatch, &lt;a href=&quot;https://cloud.google.com/monitoring/uptime-checks/&quot;&gt;gcp StackDriver&lt;/a&gt; can be easily configured to watch whether the server is alive and response under a reasonable SLA. This only scratches the surface of what might get wrong, hence it&#39;s preferable to opt for tools that specialize in frontend (e.g. &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;lighthouse&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;pagespeed&lt;/a&gt;) and perform richer analysis. The focus should be on symptoms, metrics that directly affect the UX, like page load time, &lt;a href=&quot;https://scotch.io/courses/10-web-performance-audit-tips-for-your-next-billion-users-in-2018/fmp-first-meaningful-paint&quot;&gt;meaningful paint&lt;/a&gt;, &lt;a href=&quot;https://calibreapp.com/blog/time-to-interactive/&quot;&gt;time until the page gets interactive (TTI)&lt;/a&gt;. On top of that, one may also watch for technical causes like ensuring the content is compressed, time to the first byte, optimize images, ensuring reasonable DOM size, SSL and many others. It&#39;s advisable to have these rich monitors both during development, as part of the CI and most important - 24x7 over the production&#39;s servers/CDN&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; It must be disappointing to realize that after such great care for crafting a UI, 100% functional tests passing and sophisticated bundling - the UX is horrible and slow due to CDN misconfiguration&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Lighthouse page load inspection report&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/lighthouse2.png&quot; alt=&quot;&quot; title=&quot;Lighthouse page load inspection report&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 3.6 Stub flaky and slow resources like backend APIs&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; When coding your mainstream tests (not E2E tests), avoid involving any resource that is beyond your responsibility and control like backend API and use stubs instead (i.e. test double). Practically, instead of real network calls to APIs, use some test double library (like &lt;a href=&quot;https://sinonjs.org/&quot;&gt;Sinon&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/testdouble&quot;&gt;Test doubles&lt;/a&gt;, etc) for stubbing the API response. The main benefit is preventing flakiness - testing or staging APIs by definition are not highly stable and from time to time will fail your tests although YOUR component behaves just fine (production env was not meant for testing and it usually throttles requests). Doing this will allow simulating various API behavior that should drive your component behavior as when no data was found or the case when API throws an error. Last but not least, network calls will greatly slow down the tests&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; The average test runs no longer than few ms, a typical API call last 100ms&amp;gt;, this makes each test ~20x slower&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Stubbing or intercepting API calls&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with React&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React%20Testing%20Library-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples with react-testing-library&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit under test
export default function ProductsList() {
  const [products, setProducts] = useState(false);

  const fetchProducts = async () =&amp;gt; {
    const products = await axios.get(&quot;api/products&quot;);
    setProducts(products);
  };

  useEffect(() =&amp;gt; {
    fetchProducts();
  }, []);

  return products ? &amp;lt;div&amp;gt;{products}&amp;lt;/div&amp;gt; : &amp;lt;div data-testid=&quot;no-products-message&quot;&amp;gt;No products&amp;lt;/div&amp;gt;;
}

// test
test(&quot;When no products exist, show the appropriate message&quot;, () =&amp;gt; {
  // Arrange
  nock(&quot;api&quot;)
    .get(`/products`)
    .reply(404);

  // Act
  const { getByTestId } = render(&amp;lt;ProductsList /&amp;gt;);

  // Assert
  expect(getByTestId(&quot;no-products-message&quot;)).toBeTruthy();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 3.7 Have very few end-to-end tests that spans the whole system&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Although E2E (end-to-end) usually means UI-only testing with a real browser (See bullet 3.6), for other they mean tests that stretch the entire system including the real backend. The latter type of tests is highly valuable as they cover integration bugs between frontend and backend that might happen due to a wrong understanding of the exchange schema. They are also an efficient method to discover backend-to-backend integration issues (e.g. Microservice A sends the wrong message to Microservice B) and even to detect deployment failures - there are no backend frameworks for E2E testing that are as friendly and mature as UI frameworks like &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt; and &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Puppeteer&lt;/a&gt;. The downside of such tests is the high cost of configuring an environment with so many components, and mostly their brittleness - given 50 microservices, even if one fails then the entire E2E just failed. For that reason, we should use this technique sparingly and probably have 1-10 of those and no more. That said, even a small number of E2E tests are likely to catch the type of issues they are targeted for - deployment &amp;amp; integration faults. It&#39;s advisable to run those over a production-like staging environment&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; UI might invest much in testing its functionality only to realizes very late that the backend returned payload (the data schema the UI has to work with) is very different than expected&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 3.8 Speed-up E2E tests by reusing login credentials&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; In E2E tests that involve a real backend and rely on a valid user token for API calls, it doesn&#39;t payoff to isolate the test to a level where a user is created and logged-in in every request. Instead, login only once before the tests execution start (i.e. before-all hook), save the token in some local storage and reuse it across requests. This seem to violate one of the core testing principle - keep the test autonomous without resources coupling. While this is a valid worry, in E2E tests performance is a key concern and creating 1-3 API requests before starting each individual tests might lead to horrible execution time. Reusing credentials doesn&#39;t mean the tests have to act on the same user records - if relying on user records (e.g. test user payments history) than make sure to generate those records as part of the test and avoid sharing their existence with other tests. Also remember that the backend can be faked - if your tests are focused on the frontend it might be better to isolate it and stub the backend API (see bullet 3.6).&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Given 200 test cases and assuming login=100ms = 20 seconds only for logging-in again and again&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Logging-in before-all and not before-each&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cypress-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Cypress to illustrate the idea&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let authenticationToken;

// happens before ALL tests run
before(() =&amp;gt; {
  cy.request(&#39;POST&#39;, &#39;http://localhost:3000/login&#39;, {
    username: Cypress.env(&#39;username&#39;),
    password: Cypress.env(&#39;password&#39;),
  })
  .its(&#39;body&#39;)
  .then((responseFromLogin) =&amp;gt; {
    authenticationToken = responseFromLogin.token;
  })
})

// happens before EACH test
beforeEach(setUser =&amp;gt; () {
  cy.visit(&#39;/home&#39;, {
    onBeforeLoad (win) {
      win.localStorage.setItem(&#39;token&#39;, JSON.stringify(authenticationToken))
    },
  })
})

&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 3.9 Have one E2E smoke test that just travels across the site map&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; For production monitoring and development-time sanity check, run a single E2E test that visits all/most of the site pages and ensures no one breaks. This type of test brings a great return on investment as it&#39;s very easy to write and maintain, but it can detect any kind of failure including functional, network and deployment issues. Other styles of smoke and sanity checking are not as reliable and exhaustive - some ops teams just ping the home page (production) or developers who run many integration tests which don&#39;t discover packaging and browser issues. Goes without saying that the smoke test doesn&#39;t replace functional tests rather just aim to serve as a quick smoke detector&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Everything might seem perfect, all tests pass, production health-check is also positive but the Payment component had some packaging issue and only the /Payment route is not rendering&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Smoke travelling across all pages&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cypress-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Cypress to illustrate the idea&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When doing smoke testing over all page, should load them all successfully&quot;, () =&amp;gt; {
  // exemplified using Cypress but can be implemented easily
  // using any E2E suite
  cy.visit(&quot;https://mysite.com/home&quot;);
  cy.contains(&quot;Home&quot;);
  cy.contains(&quot;https://mysite.com/Login&quot;);
  cy.contains(&quot;Login&quot;);
  cy.contains(&quot;https://mysite.com/About&quot;);
  cy.contains(&quot;About&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⚪ ️ 3.10 Expose the tests as a live collaborative document&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Besides increasing app reliability, tests bring another attractive opportunity to the table - serve as live app documentation. Since tests inherently speak at a less-technical and product/UX language, using the right tools they can serve as a communication artifact that greatly aligns all the peers - developers and their customers. For example, some frameworks allow expressing the flow and expectations (i.e. tests plan) using a human-readable language so any stakeholder, including product managers, can read, approve and collaborate on the tests which just became the live requirements document. This technique is also being referred to as &#39;acceptance test&#39; as it allows the customer to define his acceptance criteria in plain language. This is &lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD (behavior-driven testing)&lt;/a&gt; at its purest form. One of the popular frameworks that enable this is &lt;a href=&quot;https://github.com/cucumber/cucumber-js&quot;&gt;Cucumber which has a JavaScript flavor&lt;/a&gt;, see example below. Another similar yet different opportunity, &lt;a href=&quot;https://storybook.js.org/&quot;&gt;StoryBook&lt;/a&gt;, allows exposing UI components as a graphic catalog where one can walk through the various states of each component (e.g. render a grid w/o filters, render that grid with multiple rows or with none, etc), see how it looks like, and how to trigger that state - this can appeal also to product folks but mostly serves as live doc for developers who consume those components.&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; After investing top resources on testing, it&#39;s just a pity not to leverage this investment and win great value&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Describing tests in human-language using cucumber-js&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cucumber-blue.svg&quot; alt=&quot;&quot; title=&quot;Examples using Cucumber&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// this is how one can describe tests using cucumber: plain language that allows anyone to understand and collaborate

Feature: Twitter new tweet

  I want to tweet something in Twitter

  @focus
  Scenario: Tweeting from the home page
    Given I open Twitter home
    Given I click on &quot;New tweet&quot; button
    Given I type &quot;Hello followers!&quot; in the textbox
    Given I click on &quot;Submit&quot; button
    Then I see message &quot;Tweet saved&quot;

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Visualizing our components, their various states and inputs using Storybook&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20StoryBook-blue.svg&quot; alt=&quot;&quot; title=&quot;Using StoryBook&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/story-book.jpg&quot; alt=&quot;alt text&quot; title=&quot;Storybook&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 3.11 Detect visual issues with automated tools&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Setup automated tools to capture UI screenshots when changes are presented and detect visual issues like content overlapping or breaking. This ensures that not only the right data is prepared but also the user can conveniently see it. This technique is not widely adopted, our testing mindset leans toward functional tests but it&#39;s the visuals what the user experience and with so many device types it&#39;s very easy to overlook some nasty UI bug. Some free tools can provide the basics - generate and save screenshots for the inspection of human eyes. While this approach might be sufficient for small apps, it&#39;s flawed as any other manual testing that demands human labor anytime something changes. On the other hand, it&#39;s quite challenging to detect UI issues automatically due to the lack of clear definition - this is where the field of &#39;Visual Regression&#39; chime in and solve this puzzle by comparing old UI with the latest changes and detect differences. Some OSS/free tools can provide some of this functionality (e.g. &lt;a href=&quot;https://github.com/BBC-News/wraith&quot;&gt;wraith&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/%5Bhttps://github.com/HuddleEng/PhantomCSS%5D(https://github.com/HuddleEng/PhantomCSS)&quot;&gt;PhantomCSS&lt;/a&gt; but might charge significant setup time. The commercial line of tools (e.g. &lt;a href=&quot;https://applitools.com/&quot;&gt;Applitools&lt;/a&gt;, &lt;a href=&quot;https://percy.io/&quot;&gt;Percy.io&lt;/a&gt;) takes is a step further by smoothing the installation and packing advanced features like management UI, alerting, smart capturing by eliminating &#39;visual noise&#39; (e.g. ads, animations) and even root cause analysis of the DOM/CSS changes that led to the issue&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; How good is a content page that display great content (100% tests passed), loads instantly but half of the content area is hidden?&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: A typical visual regression - right content that is served badly&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/amazon-visual-regression.jpeg&quot; alt=&quot;alt text&quot; title=&quot;Amazon page breaks&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Configuring wraith to capture and compare UI snapshots&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Wraith-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Wraith&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;​# Add as many domains as necessary. Key will act as a label​

domains:
  english: &quot;http://www.mysite.com&quot;​

​# Type screen widths below, here are a couple of examples​

screen_widths:

  - 600​
  - 768​
  - 1024​
  - 1280​

​# Type page URL paths below, here are a couple of examples​
paths:
  about:
    path: /about
    selector: &#39;.about&#39;​
  subscribe:
      selector: &#39;.subscribe&#39;​
    path: /subscribe
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Using Applitools to get snapshot comparison and other advanced features&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20AppliTools-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Applitools&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cypress-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Cypress to illustrate the idea&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as todoPage from &quot;../page-objects/todo-page&quot;;

describe(&quot;visual validation&quot;, () =&amp;gt; {
  before(() =&amp;gt; todoPage.navigate());
  beforeEach(() =&amp;gt; cy.eyesOpen({ appName: &quot;TAU TodoMVC&quot; }));
  afterEach(() =&amp;gt; cy.eyesClose());

  it(&quot;should look good&quot;, () =&amp;gt; {
    cy.eyesCheckWindow(&quot;empty todo list&quot;);
    todoPage.addTodo(&quot;Clean room&quot;);
    todoPage.addTodo(&quot;Learn javascript&quot;);
    cy.eyesCheckWindow(&quot;two todos&quot;);
    todoPage.toggleTodo(0);
    cy.eyesCheckWindow(&quot;mark as completed&quot;);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Section 4️⃣: Measuring Test Effectiveness&lt;/h1&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 4.1 Get enough coverage for being confident, ~80% seems to be the lucky number&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; The purpose of testing is to get enough confidence for moving fast, obviously the more code is tested the more confident the team can be. Coverage is a measure of how many code lines (and branches, statements, etc) are being reached by the tests. So how much is enough? 10–30% is obviously too low to get any sense about the build correctness, on the other side 100% is very expensive and might shift your focus from the critical paths to the exotic corners of the code. The long answer is that it depends on many factors like the type of application — if you’re building the next generation of Airbus A380 than 100% is a must, for a cartoon pictures website 50% might be too much. Although most of the testing enthusiasts claim that the right coverage threshold is contextual, most of them also mention the number 80% as a thumb of a rule (&lt;a href=&quot;https://martinfowler.com/bliki/TestCoverage.html&quot;&gt;Fowler: “in the upper 80s or 90s”&lt;/a&gt;) that presumably should satisfy most of the applications.&lt;/p&gt; 
&lt;p&gt;Implementation tips: You may want to configure your continuous integration (CI) to have a coverage threshold (&lt;a href=&quot;https://jestjs.io/docs/en/configuration.html#collectcoverage-boolean&quot;&gt;Jest link&lt;/a&gt;) and stop a build that doesn’t stand to this standard (it’s also possible to configure threshold per component, see code example below). On top of this, consider detecting build coverage decrease (when a newly committed code has less coverage) — this will push developers raising or at least preserving the amount of tested code. All that said, coverage is only one measure, a quantitative based one, that is not enough to tell the robustness of your testing. And it can also be fooled as illustrated in the next bullets&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Confidence and numbers go hand in hand, without really knowing that you tested most of the system — there will also be some fear and fear will slow you down&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Example: A typical coverage report&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-18-yoni-goldberg-code-coverage.png&quot; alt=&quot;alt text&quot; title=&quot;A typical coverage report&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Setting up coverage per component (using Jest)&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Jest-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Jest&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-18-code-coverage2.jpeg&quot; alt=&quot;alt text&quot; title=&quot;Setting up coverage per component (using Jest)&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 4.2 Inspect coverage reports to detect untested areas and other oddities&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Some issues sneak just under the radar and are really hard to find using traditional tools. These are not really bugs but more of surprising application behavior that might have a severe impact. For example, often some code areas are never or rarely being invoked — you thought that the ‘PricingCalculator’ class is always setting the product price but it turns out it is actually never invoked although we have 10000 products in DB and many sales… Code coverage reports help you realize whether the application behaves the way you believe it does. Other than that, it can also highlight which types of code is not tested — being informed that 80% of the code is tested doesn’t tell whether the critical parts are covered. Generating reports is easy — just run your app in production or during testing with coverage tracking and then see colorful reports that highlight how frequent each code area is invoked. If you take your time to glimpse into this data — you might find some gotchas 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; If you don’t know which parts of your code are left un-tested, you don’t know where the issues might come from&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: What’s wrong with this coverage report?&lt;/h3&gt; 
&lt;p&gt;Based on a real-world scenario where we tracked our application usage in QA and find out interesting login patterns (Hint: the amount of login failures is non-proportional, something is clearly wrong. Finally it turned out that some frontend bug keeps hitting the backend login API)&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-19-coverage-yoni-goldberg-nodejs-consultant.png&quot; alt=&quot;alt text&quot; title=&quot;What’s wrong with this coverage report?&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 4.3 Measure logical coverage using mutation testing&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; The Traditional Coverage metric often lies: It may show you 100% code coverage, but none of your functions, even not one, return the right response. How come? it simply measures over which lines of code the test visited, but it doesn’t check if the tests actually tested anything — asserted for the right response. Like someone who’s traveling for business and showing his passport stamps — this doesn’t prove any work done, only that he visited few airports and hotels.&lt;/p&gt; 
&lt;p&gt;Mutation-based testing is here to help by measuring the amount of code that was actually TESTED not just VISITED. &lt;a href=&quot;https://stryker-mutator.io/&quot;&gt;Stryker&lt;/a&gt; is a JavaScript library for mutation testing and the implementation is really neat:&lt;/p&gt; 
&lt;p&gt;(1) it intentionally changes the code and “plants bugs”. For example the code newOrder.price===0 becomes newOrder.price!=0. This “bugs” are called mutations&lt;/p&gt; 
&lt;p&gt;(2) it runs the tests, if all succeed then we have a problem — the tests didn’t serve their purpose of discovering bugs, the mutations are so-called survived. If the tests failed, then great, the mutations were killed.&lt;/p&gt; 
&lt;p&gt;Knowing that all or most of the mutations were killed gives much higher confidence than traditional coverage and the setup time is similar 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; You’ll be fooled to believe that 85% coverage means your test will detect bugs in 85% of your code&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: 100% coverage, 0% testing&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Stryker-blue.svg&quot; alt=&quot;&quot; title=&quot;Using Stryker&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addNewOrder(newOrder) {
  logger.log(`Adding new order ${newOrder}`);
  DB.save(newOrder);
  Mailer.sendMail(newOrder.assignee, `A new order was places ${newOrder}`);

  return { approved: true };
}

it(&quot;Test addNewOrder, don&#39;t use such test names&quot;, () =&amp;gt; {
  addNewOrder({ assignee: &quot;John@mailer.com&quot;, price: 120 });
}); //Triggers 100% code coverage, but it doesn&#39;t check anything
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Stryker reports, a tool for mutation testing, detects and counts the amount of code that is not tested (Mutations)&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-20-yoni-goldberg-mutation-testing.jpeg&quot; alt=&quot;alt text&quot; title=&quot;Stryker reports, a tool for mutation testing, detects and counts the amount of code that is not tested (Mutations)&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️4.4 Preventing test code issues with Test linters&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; A set of ESLint plugins were built specifically for inspecting the tests code patterns and discover issues. For example, &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-mocha&quot;&gt;eslint-plugin-mocha&lt;/a&gt; will warn when a test is written at the global level (not a son of a describe() statement) or when tests are &lt;a href=&quot;https://mochajs.org/#inclusive-tests&quot;&gt;skipped&lt;/a&gt; which might lead to a false belief that all tests are passing. Similarly, &lt;a href=&quot;https://github.com/jest-community/eslint-plugin-jest&quot;&gt;eslint-plugin-jest&lt;/a&gt; can, for example, warn when a test has no assertions at all (not checking anything)&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Seeing 90% code coverage and 100% green tests will make your face wear a big smile only until you realize that many tests aren’t asserting for anything and many test suites were just skipped. Hopefully, you didn’t deploy anything based on this false observation&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: A test case full of errors, luckily all are caught by Linters&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&quot;Too short description&quot;, () =&amp;gt; {
  const userToken = userService.getDefaultToken() // *error:no-setup-in-describe, use hooks (sparingly) instead
  it(&quot;Some description&quot;, () =&amp;gt; {});//* error: valid-test-description. Must include the word &quot;Should&quot; + at least 5 words
});

it.skip(&quot;Test name&quot;, () =&amp;gt; {// *error:no-skipped-tests, error:error:no-global-tests. Put tests only under describe or suite
  expect(&quot;somevalue&quot;); // error:no-assert
});

it(&quot;Test name&quot;, () =&amp;gt; {*//error:no-identical-title. Assign unique titles to tests
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Section 5️⃣: CI and Other Quality Measures&lt;/h1&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 5.1 Enrich your linters and abort builds that have linting issues&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Linters are a free lunch, with 5 min setup you get for free an auto-pilot guarding your code and catching significant issue as you type. Gone are the days where linting was about cosmetics (no semi-colons!). Nowadays, Linters can catch severe issues like errors that are not thrown correctly and losing information. On top of your basic set of rules (like &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-standard&quot;&gt;ESLint standard&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/eslint-config-airbnb&quot;&gt;Airbnb style&lt;/a&gt;), consider including some specializing Linters like &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-chai-expect&quot;&gt;eslint-plugin-chai-expect&lt;/a&gt; that can discover tests without assertions, &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-promise?activeTab=readme&quot;&gt;eslint-plugin-promise&lt;/a&gt; can discover promises with no resolve (your code will never continue), &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-security?activeTab=readme&quot;&gt;eslint-plugin-security&lt;/a&gt; which can discover eager regex expressions that might get used for DOS attacks, and &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-you-dont-need-lodash-underscore&quot;&gt;eslint-plugin-you-dont-need-lodash-underscore&lt;/a&gt; is capable of alarming when the code uses utility library methods that are part of the V8 core methods like Lodash._map(…) 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Consider a rainy day where your production keeps crashing but the logs don’t display the error stack trace. What happened? Your code mistakenly threw a non-error object and the stack trace was lost, a good reason for banging your head against a brick wall. A 5 min linter setup could detect this TYPO and save your day&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:thumbsdown: Anti-Pattern Example: The wrong Error object is thrown mistakenly, no stack-trace will appear for this error. Luckily, ESLint catches the next production bug&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-21-yoni-goldberg-eslint.jpeg&quot; alt=&quot;alt text&quot; title=&quot;The wrong Error object is thrown mistakenly, no stack-trace will appear for this error. Luckily, ESLint catches the next production bug&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 5.2 Shorten the feedback loop with local developer-CI&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Using a CI with shiny quality inspections like testing, linting, vulnerabilities check, etc? Help developers run this pipeline also locally to solicit instant feedback and shorten the &lt;a href=&quot;https://www.gocd.org/2016/03/15/are-you-ready-for-continuous-delivery-part-2-feedback-loops/&quot;&gt;feedback loop&lt;/a&gt;. Why? an efficient testing process constitutes many and iterative loops: (1) try-outs -&amp;gt; (2) feedback -&amp;gt; (3) refactor. The faster the feedback is, the more improvement iterations a developer can perform per-module and perfect the results. On the flip, when the feedback is late to come fewer improvement iterations could be packed into a single day, the team might already move forward to another topic/task/module and might not be up for refining that module.&lt;/p&gt; 
&lt;p&gt;Practically, some CI vendors (Example: &lt;a href=&quot;https://circleci.com/docs/2.0/local-cli/&quot;&gt;CircleCI local CLI&lt;/a&gt;) allow running the pipeline locally. Some commercial tools like &lt;a href=&quot;https://wallabyjs.com/&quot;&gt;wallaby provide highly-valuable &amp;amp; testing insights&lt;/a&gt; as a developer prototype (no affiliation). Alternatively, you may just add npm script to package.json that runs all the quality commands (e.g. test, lint, vulnerabilities) — use tools like &lt;a href=&quot;https://www.npmjs.com/package/concurrently&quot;&gt;concurrently&lt;/a&gt; for parallelization and non-zero exit code if one of the tools failed. Now the developer should just invoke one command — e.g. ‘npm run quality’ — to get instant feedback. Consider also aborting a commit if the quality check failed using a githook (&lt;a href=&quot;https://github.com/typicode/husky&quot;&gt;husky can help&lt;/a&gt;) 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; When the quality results arrive the day after the code, testing doesn’t become a fluent part of development rather an after the fact formal artifact&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: npm scripts that perform code quality inspection, all are run in parallel on demand or when a developer is trying to push new code&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;scripts&quot;: {
    &quot;inspect:sanity-testing&quot;: &quot;mocha **/**--test.js --grep \&quot;sanity\&quot;&quot;,
    &quot;inspect:lint&quot;: &quot;eslint .&quot;,
    &quot;inspect:vulnerabilities&quot;: &quot;npm audit&quot;,
    &quot;inspect:license&quot;: &quot;license-checker --failOn GPLv2&quot;,
    &quot;inspect:complexity&quot;: &quot;plato .&quot;,

    &quot;inspect:all&quot;: &quot;concurrently -c \&quot;bgBlue.bold,bgMagenta.bold,yellow\&quot; \&quot;npm:inspect:quick-testing\&quot; \&quot;npm:inspect:lint\&quot; \&quot;npm:inspect:vulnerabilities\&quot; \&quot;npm:inspect:license\&quot;&quot;
  },
  &quot;husky&quot;: {
    &quot;hooks&quot;: {
      &quot;precommit&quot;: &quot;npm run inspect:all&quot;,
      &quot;prepush&quot;: &quot;npm run inspect:all&quot;
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️5.3 Perform e2e testing over a true production-mirror&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; End to end (e2e) testing are the main challenge of every CI pipeline — creating an identical ephemeral production mirror on the fly with all the related cloud services can be tedious and expensive. Finding the best compromise is your game: &lt;a href=&quot;https://serverless.com/&quot;&gt;Docker-compose&lt;/a&gt; allows crafting isolated dockerized environment with identical containers using a single plain text file but the backing technology (e.g. networking, deployment model) is different from real-world productions. You may combine it with &lt;a href=&quot;https://github.com/localstack/localstack&quot;&gt;‘AWS Local’&lt;/a&gt; to work with a stub of the real AWS services. If you went &lt;a href=&quot;https://serverless.com/&quot;&gt;serverless&lt;/a&gt; multiple frameworks like serverless and &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/serverless_app.html&quot;&gt;AWS SAM&lt;/a&gt; allows the local invocation of FaaS code.&lt;/p&gt; 
&lt;p&gt;The huge Kubernetes ecosystem is yet to formalize a standard convenient tool for local and CI-mirroring though many new tools are launched frequently. One approach is running a ‘minimized-Kubernetes’ using tools like &lt;a href=&quot;https://kubernetes.io/docs/setup/minikube/&quot;&gt;Minikube&lt;/a&gt; and &lt;a href=&quot;https://microk8s.io/&quot;&gt;MicroK8s&lt;/a&gt; which resemble the real thing only come with less overhead. Another approach is testing over a remote ‘real-Kubernetes’, some CI providers (e.g. &lt;a href=&quot;https://codefresh.io/&quot;&gt;Codefresh&lt;/a&gt;) has native integration with Kubernetes environment and make it easy to run the CI pipeline over the real thing, others allow custom scripting against a remote Kubernetes. 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Using different technologies for production and testing demands maintaining two deployment models and keeps the developers and the ops team separated&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Example: a CI pipeline that generates Kubernetes cluster on the fly 
 &lt;!-- raw HTML omitted --&gt;(&lt;a href=&quot;https://container-solutions.com/dynamic-environments-kubernetes/&quot;&gt;Credit: Dynamic-environments Kubernetes&lt;/a&gt;)
 &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️5.4 Parallelize test execution&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; When done right, testing is your 24/7 friend providing almost instant feedback. In practice, executing 500 CPU-bounded unit test on a single thread can take too long. Luckily, modern test runners and CI platforms (like &lt;a href=&quot;https://github.com/facebook/jest&quot;&gt;Jest&lt;/a&gt;, &lt;a href=&quot;https://github.com/avajs/ava&quot;&gt;AVA&lt;/a&gt; and &lt;a href=&quot;https://github.com/yandex/mocha-parallel-tests&quot;&gt;Mocha extensions&lt;/a&gt;) can parallelize the test into multiple processes and achieve significant improvement in feedback time. Some CI vendors do also parallelize tests across containers (!) which shortens the feedback loop even further. Whether locally over multiple processes, or over some cloud CLI using multiple machines — parallelizing demand keeping the tests autonomous as each might run on different processes&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Getting test results 1 hour long after pushing new code, as you already code the next features, is a great recipe for making testing less relevant&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example: Mocha parallel &amp;amp; Jest easily outrun the traditional Mocha thanks to testing parallelization (&lt;a href=&quot;https://medium.com/dailyjs/javascript-test-runners-benchmark-3a78d4117b4&quot;&gt;Credit: JavaScript Test-Runners Benchmark&lt;/a&gt;)&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-24-yonigoldberg-jest-parallel.png&quot; alt=&quot;alt text&quot; title=&quot;Mocha parallel &amp;amp; Jest easily outrun the traditional Mocha thanks to testing parallelization (Credit: JavaScript Test-Runners Benchmark)&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️5.5 Stay away from legal issues using license and plagiarism check&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Licensing and plagiarism issues are probably not your main concern right now, but why not tick this box as well in 10 minutes? A bunch of npm packages like &lt;a href=&quot;https://www.npmjs.com/package/license-checker&quot;&gt;license check&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/plagiarism-checker&quot;&gt;plagiarism check&lt;/a&gt; (commercial with free plan) can be easily baked into your CI pipeline and inspect for sorrows like dependencies with restrictive licenses or code that was copy-pasted from Stack Overflow and apparently violates some copyrights&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Unintentionally, developers might use packages with inappropriate licenses or copy paste commercial code and run into legal issues&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Doing It Right Example:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//install license-checker in your CI environment or also locally
npm install -g license-checker

//ask it to scan all licenses and fail with exit code other than 0 if it found unauthorized license. The CI system should catch this failure and stop the build
license-checker --summary --failOn BSD

&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-25-nodejs-licsense.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️5.6 Constantly inspect for vulnerable dependencies&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Even the most reputable dependencies such as Express have known vulnerabilities. This can get easily tamed using community tools such as &lt;a href=&quot;https://docs.npmjs.com/getting-started/running-a-security-audit&quot;&gt;npm audit&lt;/a&gt;, or commercial tools like &lt;a href=&quot;https://snyk.io/&quot;&gt;snyk&lt;/a&gt; (offer also a free community version). Both can be invoked from your CI on every build&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Keeping your code clean from vulnerabilities without dedicated tools will require to constantly follow online publications about new threats. Quite tedious&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Example: NPM Audit result&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-26-npm-audit-snyk.png&quot; alt=&quot;alt text&quot; title=&quot;NPM Audit result&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️5.7 Automate dependency updates&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Yarn and npm latest introduction of package-lock.json introduced a serious challenge (the road to hell is paved with good intentions) — by default now, packages are no longer getting updates. Even a team running many fresh deployments with ‘npm install’ &amp;amp; ‘npm update’ won’t get any new updates. This leads to subpar dependent packages versions at best or to vulnerable code at worst. Teams now rely on developers goodwill and memory to manually update the package.json or use tools &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;like ncu&lt;/a&gt; manually. A more reliable way could be to automate the process of getting the most reliable dependency versions, though there are no silver bullet solutions yet there are two possible automation roads:&lt;/p&gt; 
&lt;p&gt;(1) CI can fail builds that have obsolete dependencies — using tools like &lt;a href=&quot;https://docs.npmjs.com/cli/outdated&quot;&gt;‘npm outdated’&lt;/a&gt; or ‘npm-check-updates (ncu)’ . Doing so will enforce developers to update dependencies.&lt;/p&gt; 
&lt;p&gt;(2) Use commercial tools that scan the code and automatically send pull requests with updated dependencies. One interesting question remaining is what should be the dependency update policy — updating on every patch generates too many overhead, updating right when a major is released might point to an unstable version (many packages found vulnerable on the very first days after being released, &lt;a href=&quot;https://nodesource.com/blog/a-high-level-post-mortem-of-the-eslint-scope-security-incident/&quot;&gt;see the&lt;/a&gt; eslint-scope incident).&lt;/p&gt; 
&lt;p&gt;An efficient update policy may allow some ‘vesting period’ — let the code lag behind the @latest for some time and versions before considering the local copy as obsolete (e.g. local version is 1.3.1 and repository version is 1.3.8) 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; Your production will run packages that have been explicitly tagged by their author as risky&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Example: &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;ncu&lt;/a&gt; can be used manually or within a CI pipeline to detect to which extent the code lag behind the latest versions&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-27-yoni-goldberg-npm.png&quot; alt=&quot;alt text&quot; title=&quot;ncu can be used manually or within a CI pipeline to detect to which extent the code lag behind the latest versions&quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 5.8 Other, non-Node related, CI tips&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; This post is focused on testing advice that is related to, or at least can be exemplified with Node JS. This bullet, however, groups few non-Node related tips that are well-known&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; You‘ll miss years of wisdom&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;⚪ ️ 5.9 Build matrix: Run the same CI steps using multiple Node versions&lt;/h2&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Quality checking is about serendipity, the more ground you cover the luckier you get in detecting issues early. When developing reusable packages or running a multi-customer production with various configuration and Node versions, the CI must run the pipeline of tests over all the permutations of configurations. For example, assuming we use MySQL for some customers and Postgres for others — some CI vendors support a feature called ‘Matrix’ which allow running the suit of testing against all permutations of MySQL, Postgres and multiple Node version like 8, 9 and 10. This is done using configuration only without any additional effort (assuming you have testing or any other quality checks). Other CIs who doesn’t support Matrix might have extensions or tweaks to allow that 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;❌ &lt;strong&gt;Otherwise:&lt;/strong&gt; So after doing all that hard work of writing testing are we going to let bugs sneak in only because of configuration issues?&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;:clap: Example: Using Travis (CI vendor) build definition to run the same test over multiple Node versions&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Team&lt;/h1&gt; 
&lt;h2&gt;Yoni Goldberg&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Writer&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt; I&#39;m an independent consultant who works with Fortune 500 companies and garage startups on polishing their JS &amp;amp; Node.js applications. More than any other topic I&#39;m fascinated by and aims to master the art of testing. I&#39;m also the author of &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices&quot;&gt;Node.js Best Practices&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;📗 Online Course:&lt;/strong&gt; Liked this guide and wish to take your testing skills to the extreme? Consider visiting my comprehensive course &lt;a href=&quot;https://www.testjavascript.com&quot;&gt;Testing Node.js &amp;amp; JavaScript From A To Z&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;Follow:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/goldbergyoni/&quot;&gt;🐦 Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://testjavascript.com/contact-2/&quot;&gt;📞 Contact&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://testjavascript.com/newsletter//&quot;&gt;✉️ Newsletter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/BrunoScheufler&quot;&gt;Bruno Scheufler&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Tech reviewer and advisor&lt;/p&gt; 
&lt;p&gt;Took care to revise, improve, lint and polish all the texts&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt; full-stack web engineer, Node.js &amp;amp; GraphQL enthusiast&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/idori&quot;&gt;Ido Richter&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Concept, design and great advice&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt; A savvy frontend developer, CSS expert and emojis freak&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/js-kyle&quot;&gt;Kyle Martin&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Helps keep this project running, and reviews security related practices&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt; Loves working on Node.js projects and web application security.&lt;/p&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people who have contributed to this repository!&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>jiangqizheng/BlueSea</title>
      <link>https://github.com/jiangqizheng/BlueSea</link>
      <description>&lt;p&gt;BlueSea，是一个有趣的英语学习扩展程序。支持划词翻译、单词高亮、单词弹幕、记忆曲线复习、词频统计...等功能。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BlueSea&lt;/h1&gt; 
&lt;p&gt;BlueSea，是一个有趣的英语学习扩展程序。支持划词翻译、单词高亮、单词弹幕、记忆曲线复习、词频统计...等功能。&lt;/p&gt; 
&lt;h2&gt;安装使用&amp;amp;开发调试&lt;/h2&gt; 
&lt;p&gt;下载代码到本地&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/jiangqizheng/BlueSea
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;在 chrome 地址栏输入 &lt;code&gt;chrome://extensions/&lt;/code&gt; 进入到扩展程序管理界面，然后点击 &lt;code&gt;加载已解压的扩展程序&lt;/code&gt; 选择刚刚下载到本地的 BlueSea 目录即可。&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;当前为测试阶段，请加载已解压的扩展程序来使用。安装扩展后，建议刷新页面。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;功能清单&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;页面英文划词翻译、发音&lt;/li&gt; 
 &lt;li&gt;本地单词管理（单词本）&lt;/li&gt; 
 &lt;li&gt;词频统计（总词频，当日词频，页面内词频）&lt;/li&gt; 
 &lt;li&gt;精确的全局单词高亮&lt;/li&gt; 
 &lt;li&gt;单词弹幕（复习、发音）&lt;/li&gt; 
 &lt;li&gt;卡片式单词复习功能&lt;/li&gt; 
 &lt;li&gt;根据遗忘曲线，自动安排单词学习计划（卡片或弹幕）&lt;/li&gt; 
 &lt;li&gt;导入/导出&lt;/li&gt; 
 &lt;li&gt;单词查询&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;配置项&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
	&quot;划词翻译&quot;: true, //基础配置（优先级最高），是否启动划词翻译
  &quot;单词高亮&quot;: true, //基础配置
	&quot;单词弹幕&quot;: true, //基础配置
	&quot;黑名单&quot;: [],
	&quot;中文注解&quot;: true,//全局高亮的时候，是否在单词右上角直接显示中文翻译
	&quot;划词默认发音&quot;: true,//划词或者鼠标移入弹幕时，是否自动发音
	&quot;单词弹幕数量上限&quot;: 10,//一屏内单词弹幕数量，据电脑性能量力而行
	&quot;单词弹幕速度&quot;: 10, // 单位秒，默认为弹幕走完一个周期需要10秒
	&quot;隐藏完成复习的单词&quot;: true//出于性能考虑，建议保持隐藏

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;后续会逐步增加可配置项（自定义遗忘曲线、高亮样式、弹幕速度...）&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;交互演示&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;仅供参考，迭代后实际界面可能已经发生改变。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;在页面上遇到生词，进行&lt;strong&gt;划词翻译、发音&lt;/strong&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jiangqizheng/BlueSea/main/images/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91.gif&quot; alt=&quot;划词翻译&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;将生词加入单词本，并根据遗忘曲线，生成复习计划。在复习期间内的单词，将在页面内被&lt;strong&gt;高亮展示&lt;/strong&gt;，鼠标移入可以查看信息。&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jiangqizheng/BlueSea/main/images/%E5%8D%95%E8%AF%8D%E9%AB%98%E4%BA%AE.gif&quot; alt=&quot;单词高亮&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;单词到复习时间，自动创建&lt;strong&gt;单词弹幕&lt;/strong&gt;在页面内出现，选择认识或不认识，动态调整复习计划。&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jiangqizheng/BlueSea/main/images/%E5%8D%95%E8%AF%8D%E5%BC%B9%E5%B9%95.gif&quot; alt=&quot;单词弹幕&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;单词卡片，查看单词具体信息&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jiangqizheng/BlueSea/main/images/%E5%8D%95%E8%AF%8D%E5%8D%A1%E7%89%87.gif&quot; alt=&quot;单词卡片&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;单词本，进行单词管理，或查看词频与其他信息&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jiangqizheng/BlueSea/main/images/%E5%8D%95%E8%AF%8D%E6%9C%AC.gif&quot; alt=&quot;单词本&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;配置中心，进行各类配置设定&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jiangqizheng/BlueSea/main/images/%E9%85%8D%E7%BD%AE.gif&quot; alt=&quot;配置&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;更多说明&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;部分页面可能因网站设置了 csp 安全策略，会导致发音失败。&lt;/li&gt; 
 &lt;li&gt;关于根据遗忘曲线生成的复习时间节点逻辑说明，单词具有一个 level 字段，每次进行操作后会进行 +1 或 归零，然后根据最新的 level 生成下一次需要复习的时间节点。&lt;/li&gt; 
 &lt;li&gt;关于默认设置的遗忘曲线为[5,30,12 * 60,24 * 60,2 * 24 * 60,4 * 24 * 60,7 * 24 * 60,15 * 24 * 60,30 * 24 * 60] 单位分钟。举例，单词被收藏5分钟后将提示复习，然后是30分钟后，12小时后，以此类推。&lt;/li&gt; 
 &lt;li&gt;导出，支持 .json 与 .txt 导出。如果需要更多的导出格式，提交 pr 或者在 issues 中指出。&lt;/li&gt; 
 &lt;li&gt;导入，支持 .json 与 .txt 导入，具体格式参考导出的数据（使用 .txt 进行导入时，因为需要拉取每个单词的翻译信息所以会比较慢，并在导入期间内，不要进行其他操作）。&lt;/li&gt; 
 &lt;li&gt;关于性能，已测试在一个页面内最多标记 100+ 单词。单词本中测试收录 5000+ 单词，后续增加分组功能，缓解性能压力。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;其他&lt;/h2&gt; 
&lt;p&gt;翻译提示窗部分样式参考 &lt;a href=&quot;https://chrome.google.com/webstore/detail/chazd/nkiipedegbhbjmajlhpegcpcaacbfggp&quot;&gt;ChaZD&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;欢迎Star、Fork、提BUG、&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>builderbook/builderbook</title>
      <link>https://github.com/builderbook/builderbook</link>
      <description>&lt;p&gt;Open source web application to learn JS stack: React, Material-UI, Next.js, Node.js, Express.js, Mongoose, MongoDB database.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Builder Book&lt;/h2&gt; 
&lt;p&gt;Open source web app to self-publish and sell books or other online content (&lt;code&gt;builderbook&lt;/code&gt; directory of this repository). If you are book&#39;s reader, you will work &lt;code&gt;book&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;We&#39;ve used this &lt;code&gt;builderbook&lt;/code&gt; project to build:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://builderbook.org&quot;&gt;Builder Book&lt;/a&gt; - learn how to build full-stack web apps from scratch&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/async-labs/saas&quot;&gt;SaaS Boilerplate&lt;/a&gt; - open source web app to build your own SaaS product&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://async-await.com&quot;&gt;Async&lt;/a&gt; - team communication tool for software developers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Live app:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://builderbook.org/books/builder-book/introduction.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What can I learn from this project?&lt;/h2&gt; 
&lt;p&gt;You will learn how to structure your project and build many intetnal and external API infrastructures.&lt;/p&gt; 
&lt;p&gt;On the browser, the main technologies you will learn are: Next.js, React.js, Material-UI. On the server, the main technologies you will learn are: Next.js, Node.js, Express.js, Mongoose.js, MongoDB database.&lt;/p&gt; 
&lt;p&gt;In addition to the above technologies, you can learn how to integrate your web application with the following external API services:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Google OAuth API&lt;/li&gt; 
 &lt;li&gt;Github API&lt;/li&gt; 
 &lt;li&gt;Stripe API&lt;/li&gt; 
 &lt;li&gt;AWS SES API&lt;/li&gt; 
 &lt;li&gt;Mailchimp API&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Plus, you can learn many concepts such as &lt;code&gt;session&lt;/code&gt; and &lt;code&gt;cookie&lt;/code&gt;, headers, HTTP request-response, Express middleware, &lt;code&gt;Promise&lt;/code&gt;, &lt;code&gt;async/await&lt;/code&gt;, and more. You have to know these concepts to be a confident web developer, no matter what language you use.&lt;/p&gt; 
&lt;p&gt;The main use cases for this project, besides learning, are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To write and host free documentation with Github being a source of truth for content.&lt;/li&gt; 
 &lt;li&gt;To sell online content, such as books.&lt;/li&gt; 
 &lt;li&gt;To extend it (see our second book, SaaS Boilerplate Book) to start software business.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#showcase&quot;&gt;Showcase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#run-locally&quot;&gt;Run locally&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#add-a-new-book&quot;&gt;Add a new book&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#add-your-own-styles&quot;&gt;Add your own styles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#deploy-to-heroku&quot;&gt;Deploy to Heroku&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#scaling&quot;&gt;Scaling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#screenshots&quot;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#built-with&quot;&gt;Built with&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#core-stack&quot;&gt;Core stack&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#third-party-apis&quot;&gt;Third party APIs&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#docker&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#team&quot;&gt;Team&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#project-structure&quot;&gt;Project structure&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Showcase&lt;/h2&gt; 
&lt;p&gt;Check out projects built with the help of this open source app. Feel free to add your own project by creating a pull request.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/async-labs/saas-by-async&quot;&gt;SaaS boilerplate app&lt;/a&gt;: Open source web app that saves you weeks of work when building your own SaaS product.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://async-await.com/&quot;&gt;Async&lt;/a&gt;: asynchronous communication and project management tool for small teams of software engineers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://retaino.com&quot;&gt;Retaino&lt;/a&gt; by &lt;a href=&quot;https://github.com/earllee&quot;&gt;Earl Lee&lt;/a&gt; : Save, annotate, review, and share great web content. Receive smart email digests to retain key information.&lt;/li&gt; 
 &lt;li&gt;https://michaelstromer.nyc by &lt;a href=&quot;https://github.com/Maelstroms38&quot;&gt;Michael Stromer&lt;/a&gt;: Books and articles by Michael Stromer.&lt;/li&gt; 
 &lt;li&gt;Email us to be added here!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Run locally&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the project and run &lt;code&gt;yarn&lt;/code&gt; to add packages.&lt;/li&gt; 
 &lt;li&gt;Before you start the app, create a &lt;code&gt;.env&lt;/code&gt; file at the app&#39;s root. This file must have values for some env variables specified below. 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;To get &lt;code&gt;MONGO_URL_TEST&lt;/code&gt;, we recommend a &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/atlas-free-tier-setup/&quot;&gt;free MongoDB at MongoDB Atlas&lt;/a&gt; (to be updated soon with MongoDB Atlas, see &lt;a href=&quot;https://github.com/builderbook/builderbook/issues/138&quot;&gt;issue&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Get &lt;code&gt;GOOGLE_CLIENTID&lt;/code&gt; and &lt;code&gt;GOOGLE_CLIENTSECRET&lt;/code&gt; by following &lt;a href=&quot;https://developers.google.com/identity/sign-in/web/sign-in#before_you_begin&quot;&gt;official OAuth tutorial&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Important: For Google OAuth app, callback URL is: http://localhost:8000/oauth2callback 
     &lt;!-- raw HTML omitted --&gt; Important: You have to enable Google+ API in your Google Cloud Platform account.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Specify your own secret key for Express session &lt;code&gt;SESSION_SECRET&lt;/code&gt;: https://github.com/expressjs/session#secret&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To use all features and third-party integrations (such as Stripe, Google OAuth, Mailchimp), add values for all of the following env variables in your &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;.env&lt;/code&gt; :&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# Used in server/server.js
MONGO_URL=
MONGO_URL_TEST=
SESSION_SECRET=

# Used in lib/getRootUrl.js
URL_APP=
PRODUCTION_URL_APP=

# Used in server/google.js
GOOGLE_CLIENTID=
GOOGLE_CLIENTSECRET=

# Used in server/aws.js
AWS_ACCESSKEYID=
AWS_SECRETACCESSKEY=
AWS_REGION=

# Used in server/models/User.js
EMAIL_ADDRESS_FROM=

----------
# All environmental variables above this line are required for successful sign up

# Used in server/github.js
GITHUB_TEST_CLIENTID=
GITHUB_LIVE_CLIENTID=
GITHUB_TEST_SECRETKEY=
GITHUB_LIVE_SECRETKEY=

# Used in server/stripe.js
STRIPE_TEST_PUBLISHABLEKEY=
STRIPE_LIVE_PUBLISHABLEKEY=
STRIPE_TEST_SECRETKEY=
STRIPE_LIVE_SECRETKEY=
STRIPE_TEST_DEMO_BOOK_PRICE_ID=
STRIPE_LIVE_DEMO_BOOK_PRICE_ID=
STRIPE_TEST_SECOND_BOOK_PRICE_ID=
STRIPE_LIVE_SECOND_BOOK_PRICE_ID=

# Used in server/mailchimp.js
MAILCHIMP_API_KEY=
MAILCHIMP_REGION=
MAILCHIMP_PURCHASED_LIST_ID=
MAILCHIMP_SIGNEDUP_LIST_ID=

# Used in pages/_document.js and pages/_app.js
GA_MEASUREMENT_ID=
COOKIE_DOMAIN=

&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Start the app with &lt;code&gt;yarn dev&lt;/code&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;To get &lt;code&gt;GA_MEASUREMENT_ID&lt;/code&gt;, set up Google Analytics and follow &lt;a href=&quot;https://support.google.com/analytics/answer/1008080?hl=en&quot;&gt;these instructions&lt;/a&gt; to find your tracking ID.&lt;/li&gt; 
   &lt;li&gt;To get Stripe-related API keys, set up or log into your Stripe account and find your key &lt;a href=&quot;https://dashboard.stripe.com/account/apikeys&quot;&gt;here&lt;/a&gt;.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Env keys &lt;code&gt;GA_MEASUREMENT_ID&lt;/code&gt; and &lt;code&gt;STRIPE_TEST_PUBLISHABLEKEY&lt;/code&gt;/&lt;code&gt;STRIPE_LIVE_PUBLISHABLEKEY&lt;/code&gt; are universally available (client and server). Env keys inside &lt;code&gt;.env&lt;/code&gt; file are used in server code only. To make env vars universally available, add them to &lt;code&gt;next.config.js&lt;/code&gt; file.&lt;/li&gt; 
 &lt;li&gt;To make user a book&#39;s owner, set &lt;code&gt;&quot;isAdmin&quot;: true&lt;/code&gt; on corresponding MongoDB document in your database (default value is &lt;code&gt;false&lt;/code&gt; for any new user).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Important: if you don&#39;t add values for environmental variables to &lt;code&gt;.env&lt;/code&gt; file, corresponding functionality will not work. For example, login with Google account, purchasing book, getting repo information via GitHub API and other third-party API infrastructures.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Add a new book&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Create a new Github repo (public or private).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;In that repo, create an &lt;code&gt;introduction.md&lt;/code&gt; file and write some content.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;At the top of your &lt;code&gt;introduction.md&lt;/code&gt; file, add metadata in the format shown below. See &lt;a href=&quot;https://github.com/builderbook/demo-book/blob/master/introduction.md&quot;&gt;this file&lt;/a&gt; as an example.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;---
title: Introduction
seoTitle: title for search engines
seoDescription: description for search engines
isFree: true
---
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Go to the app, click &quot;Connect Github&quot;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Click &quot;Add Book&quot;. Enter details and select the Github repo you created.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Click &quot;Save&quot;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When you add new &lt;code&gt;.md&lt;/code&gt; files or update content, go to the &lt;code&gt;BookDetail&lt;/code&gt; page of your app and click &lt;code&gt;Sync with Github&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Important: All &lt;code&gt;.md&lt;/code&gt; files in your Github repo &lt;em&gt;must&lt;/em&gt; have metadata in the format shown above.&lt;/p&gt; 
&lt;p&gt;Important: All &lt;code&gt;.md&lt;/code&gt; files in your Github repo &lt;em&gt;must&lt;/em&gt; have name &lt;code&gt;introduction.md&lt;/code&gt; or &lt;code&gt;chapter-N.md&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To make the content of a &lt;code&gt;.md&lt;/code&gt; file &lt;em&gt;private&lt;/em&gt; (meaning a person must purchase the content to see it), remove &lt;code&gt;isFree:true&lt;/code&gt; and add &lt;code&gt;excerpt:&quot;&quot;&lt;/code&gt;. Add some excerpt content - this content is public and serves as a free preview.&lt;/p&gt; 
&lt;h2&gt;Add your own styles&lt;/h2&gt; 
&lt;p&gt;To change the color scheme of this app, modify the &lt;code&gt;primary&lt;/code&gt; and &lt;code&gt;secondary&lt;/code&gt; theme colors inside &lt;code&gt;lib/context.js&lt;/code&gt;. Select any colors from Material UI&#39;s official &lt;a href=&quot;https://material-ui-next.com/style/color/#color&quot;&gt;color palette&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Recommended ways to add your own styles to this app:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#inline-style-for-a-single-element&quot;&gt;Inline style for a single element&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#reusable-style-for-multiple-elements-within-single-page-or-component&quot;&gt;Reusable style for multiple elements within single page or component&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#reusableimportable-style-for-multiple-pages-or-components&quot;&gt;Reusable/importable style for multiple pages or components&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/builderbook/builderbook/master/#global-style-for-all-pages-in-application&quot;&gt;Global style for all pages in application&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Inline style for a single element&lt;/h3&gt; 
&lt;p&gt;USE CASE: apply a style to &lt;em&gt;one element&lt;/em&gt; on a single page/component 
 &lt;!-- raw HTML omitted --&gt; For example, in our &lt;code&gt;book&lt;/code&gt; page, we wrote this single inline style:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;p style={{ textAlign: &#39;center&#39; }}&amp;gt;
  ...
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/book.js#L48&quot;&gt;See usage&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Reusable style for multiple elements within single page or component&lt;/h3&gt; 
&lt;p&gt;USE CASE: apply the same style to &lt;em&gt;multiple elements&lt;/em&gt; on a single page/component.
 &lt;!-- raw HTML omitted --&gt; For example, in our &lt;code&gt;tutorials&lt;/code&gt; page, we created &lt;code&gt;styleExcerpt&lt;/code&gt; and applied it to a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element within the page:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const styleExcerpt = {
  margin: &#39;0px 20px&#39;,
  opacity: &#39;0.75&#39;,
  fontSize: &#39;13px&#39;,
};

&amp;lt;p style={styleExcerpt}&amp;gt;
  ...
&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/tutorials.js#L14&quot;&gt;See usage&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Reusable/importable style for multiple pages or components&lt;/h3&gt; 
&lt;p&gt;USE CASE: apply the same style to elements on &lt;em&gt;multiple pages/components&lt;/em&gt;.
 &lt;!-- raw HTML omitted --&gt; For example, we created &lt;code&gt;styleH1&lt;/code&gt; inside &lt;code&gt;components/SharedStyles.js&lt;/code&gt; and exported the style at the bottom of the file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const styleH1 = {
  textAlign: &#39;center&#39;,
  fontWeight: &#39;400&#39;,
  lineHeight: &#39;45px&#39;,
};

module.exports = {
  styleH1,
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/builderbook/builderbook/blob/04c6cf78bee42455d48ef3466d868f2196381a57/components/SharedStyles.js#L48&quot;&gt;See usage&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We then imported &lt;code&gt;styleH1&lt;/code&gt; into our &lt;code&gt;book&lt;/code&gt; page, as well as our &lt;code&gt;index&lt;/code&gt; page, and applied the style to a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import {
  styleH1,
} from &#39;../components/SharedStyles&#39;;

&amp;lt;h1 style={styleH1}&amp;gt;
  ...
&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/book.js#L13&quot;&gt;See usage&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Global style for all pages in application&lt;/h3&gt; 
&lt;p&gt;USE CASE: apply the same style to elements on &lt;em&gt;all pages&lt;/em&gt; of your app.
 &lt;!-- raw HTML omitted --&gt; Create your style in &lt;code&gt;pages/_document.js&lt;/code&gt;. For example, we specified a style for all hyperlinks that use the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;
  {`
    a, a:focus {
      font-weight: 400;
      color: #1565C0;
      text-decoration: none;
      outline: none
    }
  `}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/_document.js#L51&quot;&gt;See usage&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;We also specified styles for all content inside a &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;body
  style={{
    font: &#39;16px Muli&#39;,
    color: &#39;#222&#39;,
    margin: &#39;0px auto&#39;,
    fontWeight: &#39;400&#39;,
    lineHeight: &#39;1.5em&#39;,
    backgroundColor: &#39;#F7F9FC&#39;,
  }}
&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/builderbook/builderbook/blob/49116676e0894fcf00c33d208a284359b30f12bb/pages/_document.js#L96&quot;&gt;See usage&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Deploy to Heroku&lt;/h2&gt; 
&lt;p&gt;In this section we will learn how to deploy our app to &lt;a href=&quot;https://www.heroku.com/home&quot;&gt;Heroku cloud&lt;/a&gt;. We will deploy our React-Next-Express app to lightweight Heroku container called &lt;a href=&quot;https://www.heroku.com/dynos&quot;&gt;dyno&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Instructions are for app located at &lt;code&gt;/book/8-end&lt;/code&gt;. Adjust route if you are deploying app from the root of this public repo.&lt;/p&gt; 
&lt;p&gt;We will discuss the following topics in this section:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;installing Heroku on Linux-based OS&lt;/li&gt; 
 &lt;li&gt;creating app on Heroku dashboard&lt;/li&gt; 
 &lt;li&gt;preparing app for deployment&lt;/li&gt; 
 &lt;li&gt;configuring env variables&lt;/li&gt; 
 &lt;li&gt;deploying app&lt;/li&gt; 
 &lt;li&gt;checking logs&lt;/li&gt; 
 &lt;li&gt;adding custom domain&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Let&#39;s go step by step.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Heroku CLI (command-line interface) on your OS. Follow the &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot;&gt;official guide&lt;/a&gt;. In this book we provide instructions for Linux-based systems, in particular, a Ubuntu OS. For Ubuntu OS, run in your terminal:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;To confirm a successful installation, run:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;As example, my output that confirms successful installation, looks like:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://signup.heroku.com/&quot;&gt;Sign up&lt;/a&gt; for Heroku, go to your Heroku dashboard and click purple 
   &lt;!-- raw HTML omitted --&gt;New
   &lt;!-- raw HTML omitted --&gt; button on the right: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54558094-12b1f100-497a-11e9-94dd-d36399052931.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;On the next screen, give a name to your app and select a region. Click purple 
   &lt;!-- raw HTML omitted --&gt;Create app
   &lt;!-- raw HTML omitted --&gt; button at the bottom: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54558276-8eac3900-497a-11e9-9026-25aa5047af87.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;You will be redirected to &lt;code&gt;Deploy&lt;/code&gt; tab of your newly created Heroku app: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54558544-417c9700-497b-11e9-8885-6fdfde21c747.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;As you can see from the above screenshot, you have two options. You can deploy the app directly from your local machine using Heroku CLI or directly from GitHub. In this tutorial, we will deploy a &lt;code&gt;builderbook/builderbook/book/8-end&lt;/code&gt; app from our public &lt;a href=&quot;https://github.com/builderbook/builderbook&quot;&gt;builderbook/builderbook&lt;/a&gt; repo hosted on GitHub. Deploying from a private repo will be a similar process.&lt;/p&gt; &lt;p&gt;Deploying from GitHub has a few advantages. Heroku uses git to track changes in a codebase. It&#39;s possible to deploy app from the local machine using Heroku CLI, however you have to create a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository&quot;&gt;Git repo&lt;/a&gt; for &lt;code&gt;builderbook/builderbook/book/8-end&lt;/code&gt; with &lt;code&gt;package.json&lt;/code&gt; file at the root level. A first advantage is that we can deploy from a non-root folder using GitHub instead of Heroku CLI.&lt;/p&gt; &lt;p&gt;A second advantage is automation, later on you can create a branch that automatically deploy every new commit to Heroku. For example, we have a &lt;a href=&quot;https://github.com/async-labs/saas/tree/deploy&quot;&gt;deploy branch&lt;/a&gt; for our demo for &lt;a href=&quot;https://github.com/async-labs/saas/&quot;&gt;SaaS boilerplate&lt;/a&gt;. When we commit to &lt;code&gt;master&lt;/code&gt; branch - there is no new deployment, when we commit to &lt;code&gt;deploy&lt;/code&gt; branch - new change is automatically deployed to Heroku app.&lt;/p&gt; &lt;p&gt;Let&#39;s set up deploying from GitHub. On &lt;code&gt;Deploy&lt;/code&gt; tab of your Heroku app at Heroku dashboard, click 
   &lt;!-- raw HTML omitted --&gt;Connect to GitHub
   &lt;!-- raw HTML omitted --&gt;, then search for your repo, then click 
   &lt;!-- raw HTML omitted --&gt;Connect
   &lt;!-- raw HTML omitted --&gt; next to the name of the proper repo: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54560210-09775300-497f-11e9-9027-2e3850ec7ff1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;If successful, you will see green text &lt;code&gt;Connected&lt;/code&gt; and be offered to select a branch and deploy app automatically or manually. Automatic deployment will deploy every new commit, manual deployment requires you to manually click on 
   &lt;!-- raw HTML omitted --&gt;Deploy Branch
   &lt;!-- raw HTML omitted --&gt; button. For simplicity, we will deploy manually from &lt;code&gt;master&lt;/code&gt; branch of our &lt;code&gt;builderbook/builderbook&lt;/code&gt; repo.&lt;/p&gt; &lt;p&gt;Before we perform a manual deployment via GitHub, we need Heroku to run some additional code while app is being deploying. Firstly, we need to tell Heroku that &lt;code&gt;8-end&lt;/code&gt; app in the &lt;code&gt;builderbook/builderbook&lt;/code&gt; repo is not at the root level, it&#39;s actually nested at &lt;code&gt;/book/8-end&lt;/code&gt;. Secondly, Heroku needs to know that our app is Node.js app so Heroku finds &lt;code&gt;package.json&lt;/code&gt; file, properly installs dependencies and runs proper scripts (such as &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; scripts from &lt;code&gt;package.json&lt;/code&gt;). To achieve this, we need to add so called &lt;code&gt;buildpacks&lt;/code&gt; to our Heroku app. Click &lt;code&gt;Settings&lt;/code&gt; tab, scroll to &lt;code&gt;Buildpacks&lt;/code&gt; section and click purple 
   &lt;!-- raw HTML omitted --&gt;Add buildpack
   &lt;!-- raw HTML omitted --&gt; button: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54561192-50fede80-4981-11e9-976a-c3d7c88527ec.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;Add two buildpacks, first is &lt;code&gt;https://github.com/timanovsky/subdir-heroku-buildpack&lt;/code&gt; and second is &lt;code&gt;heroku/nodejs&lt;/code&gt;: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54561577-30835400-4982-11e9-997f-4711d999808e.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;Next, scroll up while on &lt;code&gt;Settings&lt;/code&gt; tab and click purple 
   &lt;!-- raw HTML omitted --&gt;Reveal Config Vars
   &lt;!-- raw HTML omitted --&gt; button, create a new environmental variable &lt;code&gt;PROJECT_PATH&lt;/code&gt; with value &lt;code&gt;book/8-end&lt;/code&gt;: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54561775-a5568e00-4982-11e9-9561-2e5827873779.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;The above variable will be used by the first buildpack &lt;code&gt;subdir-heroku-buildpack&lt;/code&gt; to deploy app from repo&#39;s subdirectory.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If we deploy app at this point, our app will deploy with errors since we did not add environmental variables. Similar to how you added &lt;code&gt;PROJECT_PATH&lt;/code&gt; variable, add all environmental variables from &lt;code&gt;book/8-end/.env&lt;/code&gt; file to your Heroku app. Remember to add the rest of env variables for all features to work, including signup event.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;While on &lt;code&gt;Settings&lt;/code&gt; tab, scroll to &lt;code&gt;Domains and certificates&lt;/code&gt; section and note your app&#39;s URL. My app&#39;s URL is: https://builderbook-8-end.herokuapp.com Let&#39;s deploy, go to &lt;code&gt;Deploy&lt;/code&gt; tab, scroll to &lt;code&gt;Manual deploy&lt;/code&gt; section and click 
   &lt;!-- raw HTML omitted --&gt;Deploy branch
   &lt;!-- raw HTML omitted --&gt; button. After deployment process is complete , navigate to your app&#39;s URL: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54564053-10569380-4988-11e9-87dd-f81a28dd6406.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Server logs are not available on Heroku dashboard. To see logs, you have to use Heroku CLI. In your terminal, run:&lt;/p&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;p&gt;Follow instructions to log in to Heroku CLI.&lt;/p&gt; &lt;p&gt;After successful login, terminal will print:&lt;/p&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;p&gt;Where &lt;code&gt;email@domain.com&lt;/code&gt; is an email address that you used to create your Heroku account.&lt;/p&gt; &lt;p&gt;To see logs, in your terminal run:&lt;/p&gt; 
  &lt;!-- raw HTML omitted --&gt; &lt;p&gt;In your terminal, you will see your most recent logs and be able to see a real-time logs.&lt;/p&gt; &lt;p&gt;You can output certain number of lines (N) for retrieved logs by adding &lt;code&gt;--num N&lt;/code&gt; to the &lt;code&gt;heroku logs&lt;/code&gt; command. You can print only app&#39;s logs by adding &lt;code&gt;--source app&lt;/code&gt; or system&#39;s logs by adding &lt;code&gt;--source heroku&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Time to add a custom domain. The Heroku app that we created is deployed on &lt;code&gt;free dyno&lt;/code&gt;. Free dyno plan does not let you to add a custom domain to your app. To add custom domain, go to &lt;code&gt;Resources&lt;/code&gt; tab and click purple 
   &lt;!-- raw HTML omitted --&gt;Change Dyno Type
   &lt;!-- raw HTML omitted --&gt; button: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54622849-983faa80-4a27-11e9-957f-54fe5aa742ca.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;Select a &lt;code&gt;Hobby&lt;/code&gt; plan and click 
   &lt;!-- raw HTML omitted --&gt;Save
   &lt;!-- raw HTML omitted --&gt; button.&lt;/p&gt; &lt;p&gt;Navigate to &lt;code&gt;Settings&lt;/code&gt; tab and scroll to the &lt;code&gt;Domains and certificates&lt;/code&gt; and click purple 
   &lt;!-- raw HTML omitted --&gt;Add domain
   &lt;!-- raw HTML omitted --&gt; button: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54623152-36cc0b80-4a28-11e9-974b-8a14fb56a86a.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;p&gt;Type your custom domain name, I added &lt;code&gt;heroku.builderbook.org&lt;/code&gt; as a custom domain, click 
   &lt;!-- raw HTML omitted --&gt;Save changes
   &lt;!-- raw HTML omitted --&gt; button.&lt;/p&gt; &lt;p&gt;Heroku will display you a value for CNAME record that you have to create for your custom domain. For me, custom domain is `heroku.builderbook.org and I manage DNS records at Now by Zeit.&lt;/p&gt; &lt;p&gt;After you create a CNAME, ACM status on Heroku&#39;s dashboard will change to &lt;code&gt;Ok&lt;/code&gt;: &lt;img src=&quot;https://user-images.githubusercontent.com/10218864/54624195-2452d180-4a2a-11e9-999d-a6a771cde73c.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;It&#39;s important that you remember to manually add your custom domain to the settings of your Google OAuth app (Chapter 3) and GitHub OAuth app (Chapter 6). If you forget to do it, you will see errors when you try to log in to your app or when you try to connect GitHub to your app.&lt;/p&gt; 
&lt;h2&gt;Scaling&lt;/h2&gt; 
&lt;p&gt;You may want to consider splitting single Next/Express server into two servers:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Next server for serving pages, server-side caching, sitemap and robots&lt;/li&gt; 
 &lt;li&gt;Express server for internal and external APIs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is an example of web application with split servers: https://github.com/async-labs/saas&lt;/p&gt; 
&lt;p&gt;Splitting servers will get you:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;faster page loads since Next rendering does not block internal and external APIs,&lt;/li&gt; 
 &lt;li&gt;faster code reload times during development,&lt;/li&gt; 
 &lt;li&gt;faster deployment and more flexible scaling of individual apps.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;p&gt;Chapter excerpt with Buy Button for Public/Guest visitor: &lt;img src=&quot;https://user-images.githubusercontent.com/26158226/38517453-e84a7566-3bee-11e8-82cd-14b4dfbe6a78.png&quot; alt=&quot;builderbook-public-readchapter&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Chapter content and Table of Contents for book Customer: &lt;img src=&quot;https://user-images.githubusercontent.com/26158226/38518394-9ee97306-3bf1-11e8-8df2-8c05fb75249a.png&quot; alt=&quot;builderbook-customer-readchapter&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Add-book/Edit-book page for Admin user: &lt;img src=&quot;https://user-images.githubusercontent.com/26158226/38517449-e5faaa38-3bee-11e8-9c02-740096dc860e.png&quot; alt=&quot;builderbook-admin-editbook&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Book-detail page for Admin user: &lt;img src=&quot;https://user-images.githubusercontent.com/26158226/38517450-e7005bd0-3bee-11e8-9916-81f32d3d1827.png&quot; alt=&quot;builderbook-admin-bookdetails&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Built with&lt;/h2&gt; 
&lt;h4&gt;Core stack&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mui-org/material-ui&quot;&gt;Material-UI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zeit/next.js&quot;&gt;Next&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/expressjs/express&quot;&gt;Express&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Automattic/mongoose&quot;&gt;Mongoose&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mongodb/mongo&quot;&gt;MongoDB&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Third party APIs&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Google OAuth&lt;/li&gt; 
 &lt;li&gt;Github&lt;/li&gt; 
 &lt;li&gt;AWS SES&lt;/li&gt; 
 &lt;li&gt;Stripe&lt;/li&gt; 
 &lt;li&gt;MailChimp&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/builderbook/builderbook/builderbook/blob/master/package.json&quot;&gt;package.json&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Docker&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install Docker and Docker Compose&lt;/li&gt; 
 &lt;li&gt;Modify &lt;code&gt;docker-compose-dev.yml&lt;/code&gt; file&lt;/li&gt; 
 &lt;li&gt;If using Ubuntu, follow these steps: https://stackoverflow.com/questions/38775954/sudo-docker-compose-command-not-found&lt;/li&gt; 
 &lt;li&gt;Start app with &lt;code&gt;docker-compose -f docker-compose-dev.yml up&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome suggestions and bug reports via issues and and pull requests.&lt;/p&gt; 
&lt;p&gt;By participating in this project, you are expected to uphold Builder Book&#39;s &lt;a href=&quot;https://github.com/builderbook/builderbook/blob/master/CODE-OF-CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Want to support this project? Sign up at &lt;a href=&quot;https://async-await.com&quot;&gt;async&lt;/a&gt; and/or buy our &lt;a href=&quot;https://builderbook.org&quot;&gt;books&lt;/a&gt;, which teach you how to build web apps from scratch. Also check out our open source &lt;a href=&quot;https://github.com/async-labs/saas&quot;&gt;SaaS boilerplate&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Team&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/klyburke&quot;&gt;Kelly Burke&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/delgermurun&quot;&gt;Delgermurun Purevkhuu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tima101&quot;&gt;Timur Zhiyentayev&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can contact us at team@builderbook.org&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;All code in this repository is provided under the &lt;a href=&quot;https://github.com/builderbook/builderbook/blob/master/LICENSE.md&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Project structure&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;.
├── .vscode
│   ├── extensions.json
│   ├── settings.json
├── book
├── builderbook
│   ├── .ebextensions
│   │   ├── environment.config
│   │   ├── git.config
│   ├── .elasticbeanstalk
│   │   ├── config.yml
│   ├── components
│   │   ├── admin
│   │   │   ├── EditBook.jsx
│   │   ├── customer
│   │   │   ├── BuyButton.jsx
│   │   ├── Header.jsx
│   │   ├── MenuWithAvatar.jsx                   
│   │   ├── Notifier.jsx
│   │   ├── SharedStyles.js
├── lib
│   ├── api
│   │   ├── admin.js
│   │   ├── customer.js
│   │   ├── getRootURL.js
│   │   ├── public.js
│   │   ├── sendRequest.js
│   ├── notify.js
│   ├── theme.js
│   ├── withAuth.jsx
├── pages
│   ├── admin
│   │   ├── add-book.jsx
│   │   ├── book-detail.jsx
│   │   ├── edit-book.jsx
│   │   ├── index.jsx
│   ├── customer
│   │   ├── my-books.jsx
│   ├── public
│   │   ├── login.jsx
│   │   ├── read-chapter.jsx
│   ├── _app.jsx
│   ├── _document.jsx
│   ├── index.jsx
├── public
│   ├── robots.txt
├── server
│   ├── api
│   │   ├── admin.js
│   │   ├── customer.js
│   │   ├── index.js
│   │   ├── public.js
│   ├── models
│   │   ├── Book.js
│   │   ├── Chapter.js
│   │   ├── EmailTemplate.js
│   │   ├── Purchase.js
│   │   ├── User.js
│   ├── utils
│   │   ├──slugify.js
│   ├── app.js
│   ├── aws.js
│   ├── github.js
│   ├── google.js
│   ├── logger.js
│   ├── mailchimp.js
│   ├── routesWithSlug.js
│   ├── sitemapAndRobots.js
│   ├── stripe.js
├── test/server/utils
│   ├── slugify.test.js
├── .eslintrc.js
├── .gitignore
├── package.json
├── yarn.lock

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>lgwebdream/FE-Interview</title>
      <link>https://github.com/lgwebdream/FE-Interview</link>
      <description>&lt;p&gt;前端面试，独有前端面试题详解，前端面试刷题必备，1000+前端面试真题，Html、Css、JavaScript、Vue、React、Node、TypeScript、Webpack、算法、网络与安全、浏览器&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;☕ 前端面试每日一题&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;每天 get 一个知识点&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;Day201:说一下从获得 HTML 到页面渲染的全部流程？为什么栅格线程使用 GPU 计算而不是 CPU 计算？&lt;/h3&gt; 
&lt;p&gt;公司：淘宝&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1018&quot;&gt;答案&amp;amp;解析&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;📚 前端面试题汇总&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/blob/master/summarry/daily.md&quot;&gt;每日一题汇总&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/blob/master/summarry/all.md&quot;&gt;全部面试题汇总&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;📱 手机刷题(附带详细答案)&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;二维码加载失败请点击 &lt;a href=&quot;http://img-static.yidengxuetang.com/wxapp/issue-img/wxqr-github.png&quot;&gt;入口&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;⏱️ 最近更新&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview-Planet/issues/1017&quot;&gt;Day200:Git 的快照是指什么？Git 的工作区域由哪三部分组成？在 Git 中，如何为提交的版本打标签？&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1016&quot;&gt;Day199:你有封装过 axios 吗？主要是封装哪些方面？如何中断 axios 请求？&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1015&quot;&gt;Day198:说一下 IoC 是啥，应用场景是啥？&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1014&quot;&gt;Day197:对 git flow 了解吗，应该如何使用&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1013&quot;&gt;Day196:有看过 V8 源码吗？ 说下 &lt;code&gt;v8::Isolate&lt;/code&gt;？&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1012&quot;&gt;Day195:实现一个简单的仓储系统，可以不断转入和转出货物，货物最多有两层子类目，数字代表该子类目转入/转出的数量。转出时不能出现爆仓情况。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1011&quot;&gt;Day194：&lt;code&gt;var arr =[[&#39;A&#39;,&#39;B&#39;],[&#39;a&#39;,&#39;b&#39;],[1,2]]&lt;/code&gt; 求二维数组的全排列组合 结果：Aa1,Aa2,Ab1,Ab2,Ba1,Ba2,Bb1,Bb2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1010&quot;&gt;Day193：完善下面函数，实现图片的加载&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1009&quot;&gt;Day192:将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。本题中，一个高度平衡二叉树是指一个二叉树每个节点的左右两个子树的高度差的绝对值不超过 1。&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1008&quot;&gt;Day191:移动端适配方案具体实现以及对比&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lgwebdream/FE-Interview/issues/1007&quot;&gt;Day190:怎么获取相交链表的第一个相交点？&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🏠 前端面试 Family&lt;/h2&gt; 
&lt;p&gt;如果你在工作中遇到问题、在面试中遇到疑惑、在前端路上遇到了阻碍，都可以加入我们前端星球 Family，我们会竭尽全力为大家答疑解惑，让我们共同努力，一同成长。&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;版权许可&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;http://img-static.yidengxuetang.com/wxapp/github-img/copyright.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;本作品采用&lt;a href=&quot;http://creativecommons.org/licenses/by-nc/4.0/&quot;&gt;知识共享署名-非商业性使用 4.0 国际许可协议&lt;/a&gt;进行许可，只要保持原作者署名和非商用，您可以自由地阅读、分享、修改。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>js-org/js.org</title>
      <link>https://github.com/js-org/js.org</link>
      <description>&lt;p&gt;Dedicated to JavaScript and its awesome community since 2015&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://js.org&quot;&gt;&lt;img src=&quot;http://logo.js.org/png/github_header.png&quot; alt=&quot;JS.ORG Logo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://js.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/js.org-+-FFE70B.svg?style=flat-square&quot; alt=&quot;JS.ORG&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/js-org/js.org/pulls?q=is%3Apr+is%3Aclosed+label%3Aadd&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/issues-pr-closed-raw/js-org/js.org.svg?style=flat-square&amp;amp;colorB=FFE70B&amp;amp;label=pull%20requests&quot; alt=&quot;PRs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/js-org/js.org/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors-anon/js-org/js.org?color=FFE70B&amp;amp;style=flat-square&quot; alt=&quot;Contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/js-org/js.org/pulse/monthly&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/js-org/js.org?color=FFE70B&amp;amp;style=flat-square&quot; alt=&quot;Activity&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/js-org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Donate-for_registrar_fees-1F87FF.svg?style=flat-square&amp;amp;logo=open-collective&amp;amp;logoColor=fff&quot; alt=&quot;Donate&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;To get a short and sleek subdomain for your own GitHub Pages site follow these 4 Steps:&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Step 1&lt;/h3&gt; 
&lt;p&gt;If you haven&#39;t already, now it&#39;s time to log in to your GitHub account and set up your GitHub Pages site following the instructions &lt;a href=&quot;https://pages.github.com/&quot;&gt;here&lt;/a&gt;. To get a head start you can simply use the generator with one of the provided themes and &lt;strong&gt;add some reasonable content to your new page&lt;/strong&gt;.&lt;/p&gt; 
&lt;h3&gt;Step 2&lt;/h3&gt; 
&lt;p&gt;Now determine your js.org subdomain: either choose your username or the name of your repo according to the existing GitHub Pages URL (for &lt;code&gt;http://foo.github.io/bar&lt;/code&gt;, either &lt;code&gt;foo.js.org&lt;/code&gt; or &lt;code&gt;bar.js.org&lt;/code&gt; would be possible). More details in the &lt;a href=&quot;https://github.com/js-org/js.org/wiki&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Step 3&lt;/h3&gt; 
&lt;p&gt;Add a file named &lt;code&gt;CNAME&lt;/code&gt; to your repo (in the &lt;code&gt;gh-pages&lt;/code&gt; branch for project pages) with a single line matching the domain you have chosen (e.g. &lt;code&gt;foo.js.org&lt;/code&gt;). If you prefer a webinterface form, have a look at &lt;a href=&quot;https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/&quot;&gt;GitHub Pages Help&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Step 4&lt;/h3&gt; 
&lt;p&gt;To finish the procedure, make a pull request in this GitHub repository that adds your subdomain to the &lt;a href=&quot;https://github.com/js-org/js.org/blob/master/cnames_active.js&quot;&gt;list&lt;/a&gt; of existing JS.ORG domains. Your new URL should go live within 24 hours (keep an eye on your pull request in case of a naming conflict).&lt;/p&gt; 
&lt;h1&gt;&lt;/h1&gt; 
&lt;h3&gt;Thanks&lt;/h3&gt; 
&lt;p&gt;... to &lt;strong&gt;&lt;a href=&quot;https://www.cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt;&lt;/strong&gt; for their superb DNS service that makes this possible. While JS.ORG is using their free plan - to a shameless extent - they helped us more than once with some flexible solutions and extended quotas. Many thanks!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rphl/corona-widget</title>
      <link>https://github.com/rphl/corona-widget</link>
      <description>&lt;p&gt;COVID-19 Inzidenz-Widget für iOS innerhalb Deutschlands 🇩🇪 (Kreis/Stadt + Bundesland + Trend)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Corona Inzidenz Widget für iOS (Scriptable)&lt;/h1&gt; 
&lt;p&gt;Widget zeigt die Inzidenz, tägl. neue Fälle, sowie den Verlauf für 21 Tage an.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/rphl/corona-widget/master/screenshots/screenshot.jpg&quot; alt=&quot;IMG_5438&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Dank der positiven Resonanz, jetzt im Repo zur einfacheren Wartung/Erweiterung ( &lt;a href=&quot;https://gist.github.com/rphl/0491c5f9cb345bf831248732374c4ef5&quot;&gt;Mein original GIST&lt;/a&gt; ) Feedback, PRs, etc. sind Willkommen.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;☕️ Einen Kaffee ausgeben 🙃:&lt;/strong&gt; https://ko-fi.com/rapha&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Live Inzidenz&lt;/strong&gt; + &lt;strong&gt;Wochentrend!&lt;/strong&gt; für Stadt/Kreis, Bundesland, Bund&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Neue tägl. Fälle&lt;/strong&gt; für Stadt/Kreis, Bundesland, Bund&lt;/li&gt; 
 &lt;li&gt;21 Tage Diagram für &lt;strong&gt;Inzidenz&lt;/strong&gt; oder &lt;strong&gt;Neue tägl. Fälle&lt;/strong&gt; je Stadt/Kreis, Bundesland, Bund&lt;/li&gt; 
 &lt;li&gt;7 Tage Schätzwert für &lt;strong&gt;Reproduktionszahl (R)&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;iCloud Sync&lt;/li&gt; 
 &lt;li&gt;Automatischer Offlinemodus&lt;/li&gt; 
 &lt;li&gt;Dark/Lighmode unterstützung&lt;/li&gt; 
 &lt;li&gt;Autoupdate (Siehe Installation/Update)&lt;/li&gt; 
 &lt;li&gt;...&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/rphl/corona-widget/master/screenshots/info.jpg&quot; alt=&quot;IMG_5438&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Quelle/Datenbasis&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Das Widget basiert auf der offziellen Api des RKI. https://npgeo-corona-npgeo-de.hub.arcgis.com/&lt;/li&gt; 
 &lt;li&gt;Die bereitgestellten Daten können in bestimmten Regionen auf Grund von Meldeverzögerungen durch Ämter an das RKI (Api) erst Verzögert (Stunden-Tage) im Widget angezeigt werden.&lt;/li&gt; 
 &lt;li&gt;Für die Historie werden ausschliesslich Daten aus der Api verwendet. Somit können sich auf Grund von Verzögerunen/Aktualisierungen Werte wie Inzidenzen, neuen Fälle, etc. immer ändern.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Installation/Update&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Manuell&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Safari öffnen: https://raw.githubusercontent.com/rphl/corona-widget/master/incidence.js&lt;/li&gt; 
 &lt;li&gt;Skripttext kopieren&lt;/li&gt; 
 &lt;li&gt;Scriptable öffnen, kopierten Skripttext als neues Scriptablescript einfügen oder altes erstzen.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Das Skript aktualisiert sich im Intervall selbst (Kann via &lt;code&gt;CFG.scriptSelfUpdate: false&lt;/code&gt; abgestellt werden)&lt;/li&gt; 
 &lt;li&gt;...andere Option: https://scriptdu.de/&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Konfiguration&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;Daten werden unter &lt;strong&gt;Dateien (App)&lt;/strong&gt; &amp;gt; &lt;strong&gt;iCloud&lt;/strong&gt; &amp;gt; &lt;strong&gt;Scriptable&lt;/strong&gt; &amp;gt; &lt;strong&gt;coronaWidgetNext&lt;/strong&gt; &amp;gt; *.json zwischengespeichert.&lt;/li&gt; 
 &lt;li&gt;Die allgemeine Konfiguration erfolgt mittels &lt;strong&gt;WidgetParameter&lt;/strong&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/rphl/corona-widget/master/screenshots/widgetparameter.jpg&quot; alt=&quot;IMG_5438&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Statische Standort Koordinaten&lt;/h2&gt; 
&lt;p&gt;Das Widget erkennt automatisch den Standort. Es ist jedoch möglich den Standort fest zu setzten. Die Koordinaten können z.B. über die Karten App ermittelt werden. Format: &lt;code&gt;{POSITION},{LAT},{LON};{POSITION},{LAT},{LON}&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;{POSITION}&lt;/code&gt; = Position im Widget. z.B: 0=ErsterStandrt, 1=ZweiterStandort (Zweispaltes MediumWidget)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{LAT}&lt;/code&gt; = Breitengrad. z.B: 51.1234 &lt;em&gt;(NICHT 51,1234 - Kein Komma!)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;{LON}&lt;/code&gt; = Längengrad. z.B: 11.1234 &lt;em&gt;(NICHT 11,1234 - Kein Komma!)&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Beispiele&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Erster Standort statisch (SmallWidget): &lt;code&gt;0,51.1244,6.7353&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Zweiter Standort ist statisch (MediumWidget): &lt;code&gt;1,51.1244,6.7353&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Beide Standorte sind statisch (MediumWidget): &lt;code&gt;0,51.1244,6.7353;1,51.1244,6.7353&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Nur zweiter Standort ist statisch (MediumWidget): &lt;code&gt;1,51.1244,6.7353&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Eigene Standortnamen&lt;/h2&gt; 
&lt;p&gt;Standorte selbst bennenen. Format: &lt;code&gt;{POSITION},{LAT},{LON},{NAME};{POSITION},{LAT},{LON},{NAME}&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;{NAME}&lt;/code&gt; = Name der anstalle der offizielen Bezeichnung aus der API verwendet wird.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Beispiele&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Eigener Name z.B &quot;Home&quot; für den ersten Standort: &lt;code&gt;0,51.1244,6.7353,Home&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Eigener Name z.B &quot;Work&quot; für den zweiten Standort: &lt;code&gt;1,51.1244,6.7353,Work&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Erweiterte Konfiguration&lt;/h2&gt; 
&lt;p&gt;Das Script kann auch direkt über bestimmte Optionen konfiguriert werden. Siehe dazu incidence.js&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    // open RKI dashboard on tap, set false to disable
    openUrl: false, //&quot;https://rki.de&quot;, 

    // Show &#39;i&#39; = incidence OR &#39;c&#39; = cases in the graph
    graphShowValues: &#39;i&#39;,
    
    // show days in graph
    graphShowDays: 21, 

    // try to find possible field (column) with rvalue, because rki is changing columnsnames and encoding randomly on each update
    csvRvalueFields: [&#39;Schätzer_7_Tage_R_Wert&#39;, &#39;Punktschätzer des 7-Tage-R Wertes&#39;], 
    
    // refresh after 1,5 hours (in seconds)
    scriptRefreshInterval: 5400, 
    
    // script updates itself,
    scriptSelfUpdate: false,
    
     // if you like you can show the old static incidence value. is only updated once a day on intial RKI import
    disableLiveIncidence: false,

     // DEBUG:show all calculated incidencevalues on console
    debugIncidenceCalc: false
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>cube-js/cube.js</title>
      <link>https://github.com/cube-js/cube.js</link>
      <description>&lt;p&gt;📊 Cube.js — Open-Source Analytical API Platform&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://cube.dev&quot;&gt;Website&lt;/a&gt; • &lt;a href=&quot;https://cube.dev/docs/getting-started&quot;&gt;Getting Started&lt;/a&gt; • &lt;a href=&quot;https://cube.dev/docs&quot;&gt;Docs&lt;/a&gt; • &lt;a href=&quot;https://cube.dev/docs/examples&quot;&gt;Examples&lt;/a&gt; • &lt;a href=&quot;https://cube.dev/blog&quot;&gt;Blog&lt;/a&gt; • &lt;a href=&quot;https://slack.cube.dev&quot;&gt;Slack&lt;/a&gt; • &lt;a href=&quot;https://twitter.com/thecubejs&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/%40cubejs-backend%2Fserver&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/%40cubejs-backend%2Fserver.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/cube-js/cube.js/actions?query=workflow%3ABuild+branch%3Amaster&quot;&gt;&lt;img src=&quot;https://github.com/cube-js/cube.js/workflows/Build/badge.svg&quot; alt=&quot;GitHub Actions&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.fossa.io/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js.svg?type=shield&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Cube.js is an open-source analytical API platform.&lt;/strong&gt; It is primarily used to build internal business intelligence tools or add customer-facing analytics to existing applications.&lt;/p&gt; 
&lt;p&gt;Cube.js was designed to work with Serverless Query Engines like AWS Athena and Google BigQuery. Multi-stage querying approach makes it suitable for handling trillions of data points. Most modern RDBMS work with Cube.js as well and can be tuned for adequate performance.&lt;/p&gt; 
&lt;p&gt;Unlike others, it is not a monolith application, but a set of modules, which does one thing well. Cube.js provides modules to run transformations and modeling in data warehouse, querying and caching, managing API gateway and building UI on top of that.&lt;/p&gt; 
&lt;p&gt;For more details, see the &lt;a href=&quot;https://cube.dev/docs/cubejs-introduction&quot;&gt;Cube.js introduction&lt;/a&gt; page in our documentation.&lt;/p&gt; 
&lt;h2&gt;Why Cube.js?&lt;/h2&gt; 
&lt;p&gt;If you are building your own business intelligence tool or customer-facing analytics most probably you&#39;ll face the following problems:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Performance.&lt;/strong&gt; Most of effort time in modern analytics software development is spent to provide adequate time to insight. In the world where every company data is a big data writing just SQL query to get insight isn&#39;t enough anymore.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQL code organization.&lt;/strong&gt; Modelling even a dozen of metrics with a dozen of dimensions using pure SQL queries sooner or later becomes a maintenance nightmare which ends up in building modelling framework.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Infrastructure.&lt;/strong&gt; Key components every production-ready analytics solution requires: analytic SQL generation, query results caching and execution orchestration, data pre-aggregation, security, API for query results fetch, and visualization.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Cube.js has necessary infrastructure for every analytic application that heavily relies on its caching and pre-aggregation layer to provide several minutes raw data to insight delay and sub second API response times on a trillion of data points scale.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/statsbotco/cube.js/master/docs/old-was-vs-cubejs-way.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started 🚀&lt;/h2&gt; 
&lt;p&gt;There&#39;re two ways to create a Cube.js application.&lt;/p&gt; 
&lt;p&gt;If you have Node.js installed, run this command and follow with the &lt;a href=&quot;https://cube.dev/docs/getting-started&quot;&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ npx cubejs-cli create hello-world
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In case you don&#39;t have Node.js, or you&#39;d like to run Cube.js with Docker, have a look at the &lt;a href=&quot;https://cube.dev/docs/getting-started-docker&quot;&gt;Getting started with Docker&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cube.dev/docs&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cube.dev/docs/getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cube.dev/docs/examples&quot;&gt;Examples &amp;amp; Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cube.dev/docs/cubejs-introduction#architecture&quot;&gt;Architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;If you have any questions or need help - &lt;a href=&quot;https://slack.cube.dev&quot;&gt;please join our Slack community&lt;/a&gt; of amazing developers and contributors.&lt;/p&gt; 
&lt;p&gt;You are also welcome to join our &lt;strong&gt;monthly community calls&lt;/strong&gt; where we discuss community news, Cube Dev team&#39;s plans, backlogs, use cases, etc. If you miss the call, the recordings will also be available after the meeting.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When: Second Wednesday of each month at &lt;a href=&quot;https://www.thetimezoneconverter.com/?t=09:00&amp;amp;tz=PT%20%28Pacific%20Time%29&quot;&gt;9am Pacific Time&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Meeting link: https://us02web.zoom.us/j/86717042169?pwd=VlBEd2VVK01DNDVVbU1EUXd5ajhsdz09&lt;/li&gt; 
 &lt;li&gt;Meeting &lt;a href=&quot;https://www.notion.so/Notes-from-monthly-community-meetings-f394e5c131cb4bd1bc64ed850b0186d8&quot;&gt;agenda/notes&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Recordings will be posted on the &lt;a href=&quot;https://www.youtube.com/playlist?list=PLtdXl_QTQjpb1dHZCM09qKTsgvgqjSvc9&quot;&gt;Community Playlist&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;There are many ways you can contribute and help Cube.js. Here a few ones:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Star this repo and follow us on &lt;a href=&quot;https://twitter.com/thecubejs&quot;&gt;Twitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Add Cube.js to your stack on &lt;a href=&quot;https://stackshare.io/cube-js&quot;&gt;Stackshare&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Upvote issues with 👍 reaction so we know what&#39;s the demand for particular issue to prioritize it within road map.&lt;/li&gt; 
 &lt;li&gt;Create issues every time you feel something is missing or goes wrong.&lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/cube.js&quot;&gt;Stack Overflow with cube.js tag&lt;/a&gt; if others can have these questions as well.&lt;/li&gt; 
 &lt;li&gt;Provide pull requests for all open issues and especially for those with &lt;a href=&quot;https://github.com/cube-js/cube.js/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&quot;&gt;help wanted&lt;/a&gt; and &lt;a href=&quot;https://github.com/cube-js/cube.js/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&quot;&gt;good first issue&lt;/a&gt; labels as those are out of Cube.js Core Team roadmap scope.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;All sort of contributions are &lt;strong&gt;welcome and extremely helpful&lt;/strong&gt; 🙌 Please refer to &lt;a href=&quot;https://github.com/cube-js/cube.js/blob/master/CONTRIBUTING.md&quot;&gt;the contribution guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Cube.js Client is &lt;a href=&quot;https://raw.githubusercontent.com/cube-js/cube.js/master/packages/cubejs-client-core/LICENSE&quot;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Cube.js Backend is &lt;a href=&quot;https://raw.githubusercontent.com/cube-js/cube.js/master/packages/cubejs-server/LICENSE&quot;&gt;Apache 2.0 licensed&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fcube-js%2Fcube.js.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Working-Title-MSFS-Mods/fspackages</title>
      <link>https://github.com/Working-Title-MSFS-Mods/fspackages</link>
      <description>&lt;p&gt;Working Title FS Packages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Working Title MSFS Mods&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/Working-Title-MSFS-Mods/fspackages/total?style=flat-square&quot; alt=&quot;Github All Releases download count&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/graphs/contributors&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/contributors-anon/Working-Title-MSFS-Mods/fspackages?style=flat-square&quot; alt=&quot;GitHub contributors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/Fa6w2xK&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/750764704175226992.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&amp;amp;style=flat-square&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;This is the home of mods for the new Microsoft Flight Simulator from the Working Title team. We have a number of projects either in the works or planned. Here is the status of what is currently being worked on and links to downloadable releases.&lt;/p&gt; 
&lt;p&gt;Track Updates and Progress on Discord &lt;a href=&quot;https://discord.com/invite/Fa6w2xK&quot;&gt;https://discord.com/invite/Fa6w2xK&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Project | Description | Current Version | Documentation --------|-------------|-----------------|-------------- CJ4 | OPEN BETA - Performance and avionics improvements for the Citation CJ4 | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/releases/tag/cj4-v0.8.0&quot;&gt;v0.8.0&lt;/a&gt; | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/tree/main/docs/workingtitle-cj4&quot;&gt;docs&lt;/a&gt; CJ4 | STABLE - Performance and avionics improvements for the Citation CJ4 | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/releases/tag/cj4-v0.7.3&quot;&gt;v0.7.3&lt;/a&gt; | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/tree/main/docs/workingtitle-cj4&quot;&gt;docs&lt;/a&gt; G1000 | Fixes and enhancements for the stock G1000 avionics package | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/releases/tag/g1000-v0.3.2&quot;&gt;v0.3.2&lt;/a&gt; | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/tree/main/docs/workingtitle-g1000&quot;&gt;docs&lt;/a&gt; G3000 | Fixes and enhancements for the stock G3000 avionics package | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/releases/tag/g3000-v0.3.2&quot;&gt;v0.3.2&lt;/a&gt; | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/tree/main/docs/workingtitle-g3000&quot;&gt;docs&lt;/a&gt; GX | Fixes and enhancements for the stock G3X Touch avionics package | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/releases/tag/gx-v0.1.0-dev3&quot;&gt;v0.1.0-dev3&lt;/a&gt; | &lt;a href=&quot;https://github.com/Working-Title-MSFS-Mods/fspackages/tree/main/docs/workingtitle-gx&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>wix/Detox</title>
      <link>https://github.com/wix/Detox</link>
      <description>&lt;p&gt;Gray box end-to-end testing and automation framework for mobile apps&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://www.npmjs.com/package/detox&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/detox.svg?style=flat&quot; alt=&quot;NPM Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/detox&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/detox.svg?style=flat&quot; alt=&quot;NPM Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://jenkins-oss.wixpress.com/job/multi-detox-master/&quot;&gt;&lt;img src=&quot;https://img.shields.io/jenkins/s/http/jenkins-oss.wixpress.com:8080/job/multi-detox-master.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/wix/Detox?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/wix/Detox/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/wix/Detox/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg&quot; alt=&quot;Detox is released under the MIT license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/wix/Detox/master/docs/Guide.Contributing.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg&quot; alt=&quot;PR&#39;s welcome!&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/detoxe2e&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/detoxe2e?label=Follow&amp;amp;style=social&quot; alt=&quot;Twitter Follow&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What does a Detox test look like?&lt;/h2&gt; 
&lt;p&gt;This is a test for a login screen, it runs on a device/simulator like an actual user:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;describe(&#39;Login flow&#39;, () =&amp;gt; {
    
  it(&#39;should login successfully&#39;, async () =&amp;gt; {
    await device.reloadReactNative();
    
    await element(by.id(&#39;email&#39;)).typeText(&#39;john@example.com&#39;);
    await element(by.id(&#39;password&#39;)).typeText(&#39;123456&#39;);
    await element(by.text(&#39;Login&#39;)).tap();
      
    await expect(element(by.text(&#39;Welcome&#39;))).toBeVisible();
    await expect(element(by.id(&#39;email&#39;))).toNotExist();
  });
  
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Start using &lt;a href=&quot;https://raw.githubusercontent.com/wix/Detox/master/docs/Introduction.GettingStarted.md&quot;&gt;Detox&lt;/a&gt; now!&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;High velocity native mobile development requires us to adopt continuous integration workflows, which means our reliance on manual QA has to drop significantly. Detox tests your mobile app while it&#39;s running in a real device/simulator, interacting with it just like a real user.&lt;/p&gt; 
&lt;p&gt;The most difficult part of automated testing on mobile is the tip of the testing pyramid - E2E. The core problem with E2E tests is flakiness - tests are usually not deterministic. We believe the only way to tackle flakiness head on is by moving from black box testing to gray box testing. That&#39;s where Detox comes into play.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Cross Platform:&lt;/strong&gt; Write cross-platform tests in JavaScript. Currently supports iOS and Android.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Runs on Devices&lt;/strong&gt; (not yet supported on iOS): Gain confidence to ship by testing your app on a device/simulator just like a real user.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Automatically Synchronized:&lt;/strong&gt; Stops flakiness at the core by monitoring asynchronous operations in your app.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Made For CI:&lt;/strong&gt; Execute your E2E tests on CI platforms like Travis without grief.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Test Runner Independent:&lt;/strong&gt; Use Jest, Mocha, AVA, or any other JavaScript test runner you like (spoiler: we have our favourite).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Debuggable:&lt;/strong&gt; Modern async-await API allows breakpoints in asynchronous tests to work as expected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported versions&lt;/h2&gt; 
&lt;h3&gt;Environment&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;OS&lt;/strong&gt;: macOS 10.14 (Mojave) or higher&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xcode&lt;/strong&gt;: 10.2 or higher 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;iOS Simulator Runtime&lt;/strong&gt;: iOS 12.2 or higher&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;React Native&lt;/h3&gt; 
&lt;p&gt;Detox is built from the ground up to support React Native projects as well as pure native ones.&lt;/p&gt; 
&lt;p&gt;The following React Native versions have been tested:&lt;/p&gt; 
&lt;p&gt;| iOS | Android | | ------ | ------------------------------------------------------------ | | &amp;lt;=0.63 | &amp;lt;=0.56 - Full support | | | &amp;gt;=0.57 &amp;lt;=0.63 - Visibility edge-case: see this &lt;a href=&quot;https://github.com/facebook/react-native/issues/23870&quot;&gt;RN issue&lt;/a&gt;* |&lt;/p&gt; 
&lt;p&gt;Future versions are most likely supported, but have not been tested yet. Please open issues if you find specific issues with newer React Native versions.&lt;/p&gt; 
&lt;h2&gt;Get Started With Detox!&lt;/h2&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://raw.githubusercontent.com/wix/Detox/master/docs/Introduction.GettingStarted.md&quot;&gt;Getting Started Guide&lt;/a&gt; to get Detox running on your app in less than 10 minutes.&lt;/p&gt; 
&lt;h2&gt;Documents Directory&lt;/h2&gt; 
&lt;p&gt;Explore further about using Detox from the &lt;a href=&quot;https://raw.githubusercontent.com/wix/Detox/master/docs/README.md&quot;&gt;documents directory&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Rethinking Core Principles&lt;/h2&gt; 
&lt;p&gt;We believe that the only way to address the core difficulties with mobile end-to-end testing is by rethinking some of the principles of the entire approach. See what Detox &lt;a href=&quot;https://raw.githubusercontent.com/wix/Detox/master/docs/More.DesignPrinciples.md&quot;&gt;does differently&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing to Detox&lt;/h2&gt; 
&lt;p&gt;Open source from the first commit. If you&#39;re interested in helping out with our roadmap, please see issues tagged marked with the &lt;a href=&quot;https://github.com/wix/detox/labels/user%3A%20looking%20for%20contributors&quot;&gt;&lt;img src=&quot;https://placehold.it/15/c4532d/000000?text=+&quot; alt=&quot; &quot;&gt; looking for contributors&lt;/a&gt; label. If you have encountered a bug or would like to suggest a new feature, please open an issue.&lt;/p&gt; 
&lt;p&gt;Dive into Detox core by reading the &lt;a href=&quot;https://raw.githubusercontent.com/wix/Detox/master/docs/Guide.Contributing.md&quot;&gt;Detox Contribution Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Detox by itself and all original source code in this repo is MIT&lt;/li&gt; 
 &lt;li&gt;Detox relies on some important dependencies, their respective licenses are: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/google/EarlGrey/blob/master/LICENSE&quot;&gt;EarlGrey&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Non-English Resources (External)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/quia-digital/iniciando-com-detox-framework-1-4-ce31ad7ae812&quot;&gt;Getting Started (Brazilian Portuguese)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>fabricjs/fabric.js</title>
      <link>https://github.com/fabricjs/fabric.js</link>
      <description>&lt;p&gt;Javascript Canvas Library, SVG-to-Canvas (&amp; canvas-to-SVG) Parser&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Fabric.js&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;http://travis-ci.org/#!/kangax/fabric.js&quot;&gt;&lt;img src=&quot;https://secure.travis-ci.org/fabricjs/fabric.js.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/github/kangax/fabric.js&quot;&gt;&lt;img src=&quot;https://d3s6mut3hikguw.cloudfront.net/github/kangax/fabric.js/badges/gpa.svg&quot; alt=&quot;Code Climate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/kangax/fabric.js?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/fabricjs/fabric.js/badge.png?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitpod.io/#https://github.com/fabricjs/fabric.js&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&quot; alt=&quot;Gitpod Ready-to-Code&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;http://badge.fury.io/bo/fabric&quot;&gt;&lt;img src=&quot;https://badge.fury.io/bo/fabric.svg&quot; alt=&quot;Bower version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://badge.fury.io/js/fabric&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/fabric.svg&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.org/package/fabric&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/fabric.svg&quot; alt=&quot;Downloads per month&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cdnjs.com/libraries/fabric.js&quot;&gt;&lt;img src=&quot;https://img.shields.io/cdnjs/v/fabric.js.svg&quot; alt=&quot;CDNJS version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://david-dm.org/kangax/fabric.js&quot;&gt;&lt;img src=&quot;https://david-dm.org/kangax/fabric.js.svg?theme=shields.io&quot; alt=&quot;Dependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/kangax/fabric.js#info=devDependencies&quot;&gt;&lt;img src=&quot;https://david-dm.org/kangax/fabric.js/dev-status.svg?theme=shields.io&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bountysource.com/trackers/23217-fabric-js?utm_source=23217&amp;amp;utm_medium=shield&amp;amp;utm_campaign=TRACKER_BADGE&quot;&gt;&lt;img src=&quot;https://api.bountysource.com/badge/tracker?tracker_id=23217&quot; alt=&quot;Bountysource&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://flattr.com/submit/auto?user_id=kangax&amp;amp;url=http://github.com/kangax/fabric.js&amp;amp;title=Fabric.js&amp;amp;language=&amp;amp;tags=github&amp;amp;category=software&quot;&gt;&lt;img src=&quot;http://api.flattr.com/button/flattr-badge-large.png&quot; alt=&quot;Flattr this git repo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Fabric.js&lt;/strong&gt; is a framework that makes it easy to work with HTML5 canvas element. It is an &lt;strong&gt;interactive object model&lt;/strong&gt; on top of canvas element. It is also an &lt;strong&gt;SVG-to-canvas parser&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Using Fabric.js, you can create and populate objects on canvas; objects like simple geometrical shapes — rectangles, circles, ellipses, polygons, or more complex shapes consisting of hundreds or thousands of simple paths. You can then scale, move, and rotate these objects with the mouse; modify their properties — color, transparency, z-index, etc. You can also manipulate these objects altogether — grouping them with a simple mouse selection.&lt;/p&gt; 
&lt;h3&gt;Non-Technical Introduction to Fabric&lt;/h3&gt; 
&lt;p&gt;Fabric.js allows you to easily create simple shapes like rectangles, circles, triangles and other polygons or more complex shapes made up of many paths, onto the HTML &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element on a webpage using JavaScript. Fabric.js will then allow you to manipulate the size, position and rotation of these objects with a mouse. It’s also possible to change some of the attributes of these objects such as their color, transparency, depth position on the webpage or selecting groups of these objects using the Fabric.js library. Fabric.js will also allow you to convert an SVG image into JavaScript data that can be used for putting it onto the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/kangax/fabric.js/wiki/Love-Fabric%3F-Help-us-by...&quot;&gt;Contributions&lt;/a&gt; are very much welcome!&lt;/p&gt; 
&lt;h3&gt;Goals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unit tested (1150+ tests at the moment, 79%+ coverage)&lt;/li&gt; 
 &lt;li&gt;Modular (~60 small &lt;a href=&quot;http://fabricjs.com/docs/&quot;&gt;&quot;classes&quot;, modules, mixins&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Cross-browser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kangax/fabric.js/wiki/Focus-on-speed&quot;&gt;Fast&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Encapsulated in one object&lt;/li&gt; 
 &lt;li&gt;No browser sniffing for critical functionality&lt;/li&gt; 
 &lt;li&gt;Runs under ES5 strict mode&lt;/li&gt; 
 &lt;li&gt;Runs on a server under &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; (active stable releases and latest of current) (see &lt;a href=&quot;https://github.com/kangax/fabric.js/wiki/Fabric-limitations-in-node.js&quot;&gt;Node.js limitations&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Follows &lt;a href=&quot;http://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported browsers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Firefox 2+&lt;/li&gt; 
 &lt;li&gt;Safari 3+&lt;/li&gt; 
 &lt;li&gt;Opera 9.64+&lt;/li&gt; 
 &lt;li&gt;Chrome (all versions)&lt;/li&gt; 
 &lt;li&gt;IE10, IE11, Edge&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can &lt;a href=&quot;http://fabricjs.com/test/unit/&quot;&gt;run automated unit tests&lt;/a&gt; right in the browser.&lt;/p&gt; 
&lt;h3&gt;History&lt;/h3&gt; 
&lt;p&gt;Fabric.js started as a foundation for design editor on &lt;a href=&quot;http://printio.ru&quot;&gt;printio.ru&lt;/a&gt; — interactive online store with ability to create your own designs. The idea was to create &lt;a href=&quot;http://printio.ru/ringer_man_tees/new&quot;&gt;Javascript-based editor&lt;/a&gt;, which would make it easy to manipulate vector shapes and images on T-Shirts. Since performance was one of the most critical requirements, we chose canvas over SVG. While SVG is excellent with static shapes, it&#39;s not as performant as canvas when it comes to dynamic manipulation of objects (movement, scaling, rotation, etc.). Fabric.js was heavily inspired by &lt;a href=&quot;http://www.ernestdelgado.com/public-tests/canvasphoto/demo/canvas.html&quot;&gt;Ernest Delgado&#39;s canvas experiment&lt;/a&gt;. In fact, code from Ernest&#39;s experiment was the foundation of an entire framework. Later, Fabric.js grew into a collection of distinct object types and got an SVG-to-canvas parser.&lt;/p&gt; 
&lt;h3&gt;Installation Instructions&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code&gt;$ bower install fabric
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Note: If you are using Fabric.js in a Node.js script, you will depend from &lt;a href=&quot;https://github.com/Automattic/node-canvas&quot;&gt;node-canvas&lt;/a&gt;.&lt;code&gt;node-canvas&lt;/code&gt; is an html canvas replacement that works on top of native libraries. Please follow the instructions located &lt;a href=&quot;https://github.com/Automattic/node-canvas#compiling&quot;&gt;here&lt;/a&gt; in order to get it up and running.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ npm install fabric --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After this, you can import fabric like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const fabric = require(&quot;fabric&quot;).fabric;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use this instead if your environment supports ES6 imports:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import { fabric } from &quot;fabric&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/fabricjs/fabric.js/master/#examples-of-use&quot;&gt;the example section&lt;/a&gt; for usage examples.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/joyent/node/wiki/Installation&quot;&gt;Install Node.js&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build distribution file &lt;strong&gt;[~77K minified, ~20K gzipped]&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ node build.js
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2.1 Or build a custom distribution file, by passing (comma separated) module names to be included.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   $ node build.js modules=text,serialization,parser
   // or
   $ node build.js modules=text
   // or
   $ node build.js modules=parser,text
   // etc.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default (when none of the modules are specified) only basic functionality is included. See the list of modules below for more information on each one of them. Note that default distribution has support for &lt;strong&gt;static canvases&lt;/strong&gt; only.&lt;/p&gt; &lt;p&gt;To get minimal distribution with interactivity, make sure to include corresponding module:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   $ node build.js modules=interaction
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2.2 You can also include all modules like so:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   $ node build.js modules=ALL
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2.3 You can exclude a few modules like so:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   $ node build.js modules=ALL exclude=gestures,image_filters
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a minified distribution file&lt;/p&gt; &lt;pre&gt;&lt;code&gt; # Using YUICompressor (default option)
 $ node build.js modules=... minifier=yui

 # or Google Closure Compiler
 $ node build.js modules=... minifier=closure
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable AMD support via require.js (requires uglify)&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ node build.js requirejs modules=...
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create source map file for better productive debugging (requires uglify or google closure compiler).
   &lt;!-- raw HTML omitted --&gt;More information about &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;source maps&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ node build.js sourcemap modules=...
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use google closure compiler you have to add &lt;code&gt;sourceMappingURL&lt;/code&gt; manually at the end of the minified file all.min.js (see issue https://code.google.com/p/closure-compiler/issues/detail?id=941).&lt;/p&gt; &lt;pre&gt;&lt;code&gt; //# sourceMappingURL=fabric.min.js.map
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure code guidelines are met (prerequisite: &lt;code&gt;npm -g install eslint&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ npm run lint &amp;amp;&amp;amp; npm run lint_tests
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/joyent/node/wiki/Installation&quot;&gt;Install Node.js&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/npm/npm#super-easy-install&quot;&gt;Install NPM, if necessary&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install NPM packages&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ npm install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run test suite&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Make sure testem is installed&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    $ npm install -g testem
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run tests Chrome and Node (by default):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    $ testem
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See testem docs for more info: https://github.com/testem/testem&lt;/p&gt; 
&lt;h3&gt;Demos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://fabricjs.com/demos/&quot;&gt;Demos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://fabricjs.com/kitchensink&quot;&gt;Kitchensink demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://fabricjs.com/benchmarks/&quot;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;http://trends.builtwith.com/javascript/FabricJS&quot;&gt;Who&#39;s using Fabric?&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;Documentation is always available at &lt;a href=&quot;http://fabricjs.com/docs/&quot;&gt;http://fabricjs.com/docs/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Also see &lt;a href=&quot;http://fabricjs.com/articles&quot;&gt;official 4-part intro series&lt;/a&gt;, &lt;a href=&quot;http://www.slideshare.net/kangax/fabricjs-building-acanvaslibrarybk&quot;&gt;presentation from BK.js&lt;/a&gt; and &lt;a href=&quot;http://www.slideshare.net/kangax/fabric-falsy-values-8067834&quot;&gt;presentation from Falsy Values&lt;/a&gt; for an overview of fabric.js, how it works, and its features.&lt;/p&gt; 
&lt;h3&gt;Optional modules&lt;/h3&gt; 
&lt;p&gt;These are the optional modules that could be specified for inclusion, when building custom version of fabric:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;text&lt;/strong&gt; — Adds support for static text (&lt;code&gt;fabric.Text&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;itext&lt;/strong&gt; — Adds support for interactive text (&lt;code&gt;fabric.IText&lt;/code&gt;, &lt;code&gt;fabric.Textbox&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;serialization&lt;/strong&gt; — Adds support for &lt;code&gt;loadFromJSON&lt;/code&gt;, &lt;code&gt;loadFromDatalessJSON&lt;/code&gt;, and &lt;code&gt;clone&lt;/code&gt; methods on &lt;code&gt;fabric.Canvas&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;interaction&lt;/strong&gt; — Adds support for interactive features of fabric — selecting/transforming objects/groups via mouse/touch devices.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;parser&lt;/strong&gt; — Adds support for &lt;code&gt;fabric.parseSVGDocument&lt;/code&gt;, &lt;code&gt;fabric.loadSVGFromURL&lt;/code&gt;, and &lt;code&gt;fabric.loadSVGFromString&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;image_filters&lt;/strong&gt; — Adds support for image filters, such as grayscale of white removal.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;easing&lt;/strong&gt; — Adds support for animation easing functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; — Adds support for running fabric under node.js, with help of &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt; and &lt;a href=&quot;https://github.com/learnboost/node-canvas&quot;&gt;node-canvas&lt;/a&gt; libraries.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;freedrawing&lt;/strong&gt; — Adds support for free drawing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;gestures&lt;/strong&gt; — Adds support for multitouch gestures with help of &lt;a href=&quot;https://github.com/mudcube/Event.js&quot;&gt;Event.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;object_straightening&lt;/strong&gt; — Adds support for rotating an object to one of 0, 90, 180, 270, etc. depending on which is angle is closer.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;animation&lt;/strong&gt; — Adds support for animation (&lt;code&gt;fabric.util.animate&lt;/code&gt;, &lt;code&gt;fabric.util.requestAnimFrame&lt;/code&gt;, &lt;code&gt;fabric.Object#animate&lt;/code&gt;, &lt;code&gt;fabric.Canvas#fxCenterObjectH/#fxCenterObjectV/#fxRemove&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additional flags for build script are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;requirejs&lt;/strong&gt; — Makes fabric requirejs AMD-compatible in &lt;code&gt;dist/fabric.js&lt;/code&gt;. &lt;em&gt;Note:&lt;/em&gt; an unminified, requirejs-compatible version is always created in &lt;code&gt;dist/fabric.require.js&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;no-strict&lt;/strong&gt; — Strips &quot;use strict&quot; directives from source&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;no-svg-export&lt;/strong&gt; — Removes svg exporting functionality&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;sourcemap&lt;/strong&gt; - Generates a sourceMap file and adds the &lt;code&gt;sourceMappingURL&lt;/code&gt; (only if uglifyjs is used) to &lt;code&gt;dist/fabric.min.js&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;node build.js modules=ALL exclude=json no-strict no-svg-export
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Examples of use&lt;/h3&gt; 
&lt;h4&gt;Adding red rectangle to canvas&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;&amp;lt;/canvas&amp;gt;

    &amp;lt;script src=&quot;lib/fabric.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        var canvas = new fabric.Canvas(&#39;canvas&#39;);

        var rect = new fabric.Rect({
            top : 100,
            left : 100,
            width : 60,
            height : 70,
            fill : &#39;red&#39;
        });

        canvas.add(rect);
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Helping Fabric&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.bountysource.com/trackers/23217-fabric-js&quot;&gt;Fabric on Bountysource&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.codetriage.com/kangax/fabric.js&quot;&gt;Fabric on CodeTriage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Staying in touch&lt;/h3&gt; 
&lt;p&gt;Follow &lt;a href=&quot;http://twitter.com/fabricjs&quot;&gt;@fabric.js&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/kangax&quot;&gt;@kangax&lt;/a&gt; or &lt;a href=&quot;http://twitter.com/AndreaBogazzi&quot;&gt;@AndreaBogazzi&lt;/a&gt; on twitter.&lt;/p&gt; 
&lt;p&gt;Questions, suggestions — &lt;a href=&quot;http://groups.google.com/group/fabricjs&quot;&gt;fabric.js on Google Groups&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;http://stackoverflow.com/questions/tagged/fabricjs&quot;&gt;Fabric questions on Stackoverflow&lt;/a&gt;, Fabric snippets on &lt;a href=&quot;http://jsfiddle.net/user/fabricjs/fiddles/&quot;&gt;jsfiddle&lt;/a&gt; or &lt;a href=&quot;http://codepen.io/tag/fabricjs&quot;&gt;codepen.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Fabric on &lt;a href=&quot;http://libknot.ohmztech.com/&quot;&gt;LibKnot&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Get help in Fabric&#39;s IRC channel — irc://irc.freenode.net/#fabric.js&lt;/p&gt; 
&lt;h3&gt;Credits&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/AndreaBogazzi&quot;&gt;Andrea Bogazzi&lt;/a&gt; for help with bugs, new features, documentation, GitHub issues&lt;/li&gt; 
 &lt;li&gt;Ernest Delgado for the original idea of &lt;a href=&quot;http://www.ernestdelgado.com/archive/canvas/&quot;&gt;manipulating images on canvas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://twitter.com/hakunin&quot;&gt;Maxim &quot;hakunin&quot; Chernyak&lt;/a&gt; for ideas, and help with various parts of the library throughout its life&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://nisnya.com&quot;&gt;Sergey Nisnevich&lt;/a&gt; for help with geometry logic&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/kienzle_s&quot;&gt;Stefan Kienzle&lt;/a&gt; for help with bugs, features, documentation, GitHub issues&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.shutterstock.com/jobs&quot;&gt;Shutterstock&lt;/a&gt; for the time and resources invested in using and improving fabric.js&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kangax/fabric.js/graphs/contributors&quot;&gt;And all the other GitHub contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MIT License&lt;/h3&gt; 
&lt;p&gt;Copyright (c) 2008-2015 Printio (Juriy Zaytsev, Maxim Chernyak)&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jitsi/jitsi-meet</title>
      <link>https://github.com/jitsi/jitsi-meet</link>
      <description>&lt;p&gt;Jitsi Meet - Secure, Simple and Scalable Video Conferences that you use as a standalone app or embed in your web application.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jitsi Meet - Secure, Simple and Scalable Video Conferences&lt;/h1&gt; 
&lt;p&gt;Jitsi Meet is an open-source (Apache) WebRTC JavaScript application that uses &lt;a href=&quot;https://jitsi.org/videobridge&quot;&gt;Jitsi Videobridge&lt;/a&gt; to provide high quality, &lt;a href=&quot;https://jitsi.org/security&quot;&gt;secure&lt;/a&gt; and scalable video conferences. Jitsi Meet in action can be seen at &lt;a href=&quot;http://youtu.be/7vFUVClsNh0&quot;&gt;here at the session #482 of the VoIP Users Conference&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The Jitsi Meet client runs in your browser, without installing anything else on your computer. You can try it out at https://meet.jit.si.&lt;/p&gt; 
&lt;p&gt;Jitsi Meet allows very efficient collaboration. Users can stream their desktop or only some windows. It also supports shared document editing with Etherpad.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;On the client side, no installation is necessary. You just point your browser to the URL of your deployment. This section is about installing a Jitsi Meet suite on your server and hosting your own conferencing service.&lt;/p&gt; 
&lt;p&gt;Installing Jitsi Meet is a simple experience. For Debian-based system, following the &lt;a href=&quot;https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart&quot;&gt;quick install&lt;/a&gt; document, which uses the package system. You can also see a demonstration of the process in &lt;a href=&quot;https://jitsi.org/tutorial&quot;&gt;this tutorial video&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For other systems, or if you wish to install all components manually, see the &lt;a href=&quot;https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-manual&quot;&gt;detailed manual installation instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Installation with Docker is also available. Please see the &lt;a href=&quot;https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-docker&quot;&gt;instruction&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Download&lt;/h2&gt; 
&lt;p&gt;| Latest stable release | &lt;a href=&quot;https://github.com/jitsi/jitsi-meet/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/release-latest-green.svg&quot; alt=&quot;release&quot;&gt;&lt;/a&gt; | |---|---|&lt;/p&gt; 
&lt;p&gt;You can download Debian/Ubuntu binaries:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://download.jitsi.org/stable/&quot;&gt;stable&lt;/a&gt; (&lt;a href=&quot;https://jitsi.org/downloads/ubuntu-debian-installations-instructions/&quot;&gt;instructions&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://download.jitsi.org/testing/&quot;&gt;testing&lt;/a&gt; (&lt;a href=&quot;https://jitsi.org/downloads/ubuntu-debian-installations-instructions-for-testing/&quot;&gt;instructions&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://download.jitsi.org/unstable/&quot;&gt;nightly&lt;/a&gt; (&lt;a href=&quot;https://jitsi.org/downloads/ubuntu-debian-installations-instructions-nightly/&quot;&gt;instructions&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can download source archives (produced by &lt;code&gt;make source-package&lt;/code&gt;):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://download.jitsi.org/jitsi-meet/src/&quot;&gt;source builds&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Mobile apps&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.jitsi.meet&quot;&gt;Android&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=org.jitsi.meet&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://f-droid.org/en/packages/org.jitsi.meet/&quot;&gt;Android (F-Droid)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://f-droid.org/en/packages/org.jitsi.meet/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/jitsi-meet/id1165103905&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/jitsi-meet/id1165103905&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can also sign up for our open beta testing here:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://play.google.com/apps/testing/org.jitsi.meet&quot;&gt;Android&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://testflight.apple.com/join/isy6ja7S&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Release notes&lt;/h2&gt; 
&lt;p&gt;Release notes for Jitsi Meet are maintained on &lt;a href=&quot;https://github.com/jitsi/jitsi-meet-release-notes&quot;&gt;this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;For web development see &lt;a href=&quot;https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-web&quot;&gt;here&lt;/a&gt;, and for mobile see &lt;a href=&quot;https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-mobile&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you are looking to contribute to Jitsi Meet, first of all, thank you! Please see our &lt;a href=&quot;https://raw.githubusercontent.com/jitsi/jitsi-meet/master/CONTRIBUTING.md&quot;&gt;guidelines for contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Embedding in external applications&lt;/h2&gt; 
&lt;p&gt;Jitsi Meet provides a very flexible way of embedding in external applications by using the &lt;a href=&quot;https://raw.githubusercontent.com/jitsi/jitsi-meet/master/doc/api.md&quot;&gt;Jitsi Meet API&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;The security section here was starting to feel a bit too succinct for the complexity of the topic, so we created a post that covers the topic much more broadly here: https://jitsi.org/security&lt;/p&gt; 
&lt;p&gt;The section on end-to-end encryption in that document is likely going to be one of the key points of interest: https://jitsi.org/security/#e2ee&lt;/p&gt; 
&lt;h2&gt;Security issues&lt;/h2&gt; 
&lt;p&gt;For information on reporting security vulnerabilities in Jitsi Meet, see &lt;a href=&quot;https://raw.githubusercontent.com/jitsi/jitsi-meet/master/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Jitsi Meet started out as a sample conferencing application using Jitsi Videobridge. It was originally developed by ESTOS&#39; developer Philipp Hancke who then contributed it to the community where development continues with joint forces!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gatsbyjs/gatsby</title>
      <link>https://github.com/gatsbyjs/gatsby</link>
      <description>&lt;p&gt;Build blazing fast, modern apps and websites with React&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Gatsby is a modern web framework for blazing fast websites.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Go Beyond Static Websites.&lt;/strong&gt; Get all the benefits of static websites with none of the limitations. Gatsby sites are fully functional React apps so you can create high-quality, dynamic web apps, from blogs to e-commerce sites to user dashboards.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use a Modern Stack for Every Site.&lt;/strong&gt; No matter where the data comes from, Gatsby sites are built using React and GraphQL. Build a uniform workflow for you and your team, regardless of whether the data is coming from the same backend.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Load Data From Anywhere.&lt;/strong&gt; Gatsby pulls in data from any data source, whether it’s Markdown files, a headless CMS like Contentful or WordPress, or a REST or GraphQL API. Use source plugins to load your data, then develop using Gatsby’s uniform GraphQL interface.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance Is Baked In.&lt;/strong&gt; Ace your performance audits by default. Gatsby automates code splitting, image optimization, inlining critical styles, lazy-loading, prefetching resources, and more to ensure your site is fast — no manual tuning required.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Host at Scale for Pennies.&lt;/strong&gt; Gatsby sites don’t require servers so you can host your entire site on a CDN for a fraction of the cost of a server-rendered site. Many Gatsby sites can be hosted entirely free on services like GitHub Pages and Netlify.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;&lt;strong&gt;Learn how to use Gatsby for your next project.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What’s In This Document&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-get-up-and-running-in-5-minutes&quot;&gt;Get Up and Running in 5 Minutes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-learning-gatsby&quot;&gt;Learning Gatsby&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-migration-guides&quot;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-how-to-contribute&quot;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#memo-license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-thanks&quot;&gt;Thanks to Our Contributors and Sponsors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Get Up and Running in 5 Minutes&lt;/h2&gt; 
&lt;p&gt;You can get a new Gatsby site up and running on your local dev environment in 5 minutes with these four steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the Gatsby CLI.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install -g gatsby-cli

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Gatsby site from a Gatsby starter.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Get your Gatsby blog set up in a single command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# create a new Gatsby site using the default starter
gatsby new my-blazing-fast-site
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start the site in &lt;code&gt;develop&lt;/code&gt; mode.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Next, move into your new site’s directory and start it up:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd my-blazing-fast-site/
gatsby develop
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open the source code and start editing!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Your site is now running at &lt;code&gt;http://localhost:8000&lt;/code&gt;. Open the &lt;code&gt;my-blazing-fast-site&lt;/code&gt; directory in your code editor of choice and edit &lt;code&gt;src/pages/index.js&lt;/code&gt;. Save your changes, and the browser will update in real time!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;At this point, you’ve got a fully functional Gatsby website. For additional information on how you can customize your Gatsby site, see our &lt;a href=&quot;https://gatsbyjs.com/plugins/&quot;&gt;plugins&lt;/a&gt; and &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;the official tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🎓 Learning Gatsby&lt;/h2&gt; 
&lt;p&gt;Full documentation for Gatsby lives &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;For most developers, we recommend starting with our &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;in-depth tutorial for creating a site with Gatsby&lt;/a&gt;.&lt;/strong&gt; It starts with zero assumptions about your level of ability and walks through every step of the process.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;To dive straight into code samples head &lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;to our documentation&lt;/a&gt;.&lt;/strong&gt; In particular, check out the “
   &lt;!-- raw HTML omitted --&gt;Guides
   &lt;!-- raw HTML omitted --&gt;”, “
   &lt;!-- raw HTML omitted --&gt;API Reference
   &lt;!-- raw HTML omitted --&gt;”, and “
   &lt;!-- raw HTML omitted --&gt;Advanced Tutorials
   &lt;!-- raw HTML omitted --&gt;” sections in the sidebar.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We welcome suggestions for improving our docs. See the &lt;a href=&quot;https://www.gatsbyjs.com/contributing/how-to-contribute/&quot;&gt;“how to contribute”&lt;/a&gt; documentation for more details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Start Learning Gatsby: &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;Follow the Tutorial&lt;/a&gt; · &lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;Read the Docs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;💼 Migration Guides&lt;/h2&gt; 
&lt;p&gt;Already have a Gatsby site? These handy guides will help you add the improvements of Gatsby v2 to your site without starting from scratch!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/migrating-from-v1-to-v2/&quot;&gt;Migrate a Gatsby site from v1 to v2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Still on v0? Start here: &lt;a href=&quot;https://www.gatsbyjs.com/docs/migrating-from-v0-to-v1/&quot;&gt;Migrate a Gatsby site from v0 to v1&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;❗ Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Gatsby is dedicated to building a welcoming, diverse, safe community. We expect everyone participating in the Gatsby community to abide by our &lt;a href=&quot;https://www.gatsbyjs.com/contributing/code-of-conduct/&quot;&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;. Please read it. Please follow it. In the Gatsby community, we work hard to build each other up and create amazing things together. 💪💜&lt;/p&gt; 
&lt;h2&gt;🤝 How to Contribute&lt;/h2&gt; 
&lt;p&gt;Whether you&#39;re helping us fix bugs, improve the docs, or spread the word, we&#39;d love to have you as part of the Gatsby community! :muscle::purple_heart:&lt;/p&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://www.gatsbyjs.com/contributing/how-to-contribute/&quot;&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/a&gt; for ideas on contributing and setup steps for getting our repositories up and running on your local machine.&lt;/p&gt; 
&lt;h3&gt;A note on how this repository is organized&lt;/h3&gt; 
&lt;p&gt;This repository is a &lt;a href=&quot;https://trunkbaseddevelopment.com/monorepos/&quot;&gt;monorepo&lt;/a&gt; managed using &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt;Lerna&lt;/a&gt;. This means there are &lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/packages&quot;&gt;multiple packages&lt;/a&gt; managed in this codebase, even though we publish them to NPM as separate packages.&lt;/p&gt; 
&lt;h3&gt;Contributing to Gatsby v1&lt;/h3&gt; 
&lt;p&gt;We are currently only accepting bug fixes for Gatsby v1. No new features will be accepted.&lt;/p&gt; 
&lt;h2&gt;:memo: License&lt;/h2&gt; 
&lt;p&gt;Licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;💜 Thanks&lt;/h2&gt; 
&lt;p&gt;Thanks to our many contributors and to &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; for hosting &lt;a href=&quot;https://www.gatsbyjs.com&quot;&gt;Gatsby&lt;/a&gt; and our example sites.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bpampuch/pdfmake</title>
      <link>https://github.com/bpampuch/pdfmake</link>
      <description>&lt;p&gt;Client/server side PDF printing in pure JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pdfmake &lt;a href=&quot;https://travis-ci.org/bpampuch/pdfmake&quot;&gt;&lt;img src=&quot;https://travis-ci.org/bpampuch/pdfmake.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bpampuch/pdfmake/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/bpampuch/pdfmake.svg&quot; alt=&quot;GitHub&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/pdfmake&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/pdfmake.svg?colorB=0E7FBF&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/bpampuch/pdfmake&quot;&gt;&lt;img src=&quot;https://img.shields.io/bower/v/pdfmake.svg?colorB=0E7FBF&quot; alt=&quot;Bower&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/bpampuch/pdfmake&quot;&gt;&lt;img src=&quot;https://img.shields.io/packagist/v/bpampuch/pdfmake.svg?colorB=0E7FBF&quot; alt=&quot;Packagist&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cdnjs.com/libraries/pdfmake&quot;&gt;&lt;img src=&quot;https://img.shields.io/cdnjs/v/pdfmake.svg?colorB=0E7FBF&quot; alt=&quot;CDNJS&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;PDF document generation library for server-side and client-side in pure JavaScript.&lt;/p&gt; 
&lt;p&gt;Check out &lt;a href=&quot;http://bpampuch.github.io/pdfmake/playground.html&quot;&gt;the playground&lt;/a&gt; and &lt;a href=&quot;https://github.com/bpampuch/pdfmake/tree/master/examples&quot;&gt;examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;This is unstable master branch for version 0.2.x, for stable version 0.1.x see &lt;a href=&quot;https://github.com/bpampuch/pdfmake/tree/0.1&quot;&gt;branch 0.1&lt;/a&gt;.&lt;/h4&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;line-wrapping,&lt;/li&gt; 
 &lt;li&gt;text-alignments (left, right, centered, justified),&lt;/li&gt; 
 &lt;li&gt;numbered and bulleted lists,&lt;/li&gt; 
 &lt;li&gt;tables and columns 
  &lt;ul&gt; 
   &lt;li&gt;auto/fixed/star-sized widths,&lt;/li&gt; 
   &lt;li&gt;col-spans and row-spans,&lt;/li&gt; 
   &lt;li&gt;headers automatically repeated in case of a page-break,&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;images and vector graphics,&lt;/li&gt; 
 &lt;li&gt;convenient styling and style inheritance,&lt;/li&gt; 
 &lt;li&gt;page headers and footers: 
  &lt;ul&gt; 
   &lt;li&gt;static or dynamic content,&lt;/li&gt; 
   &lt;li&gt;access to current page number and page count,&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;background-layer,&lt;/li&gt; 
 &lt;li&gt;page dimensions and orientations,&lt;/li&gt; 
 &lt;li&gt;margins,&lt;/li&gt; 
 &lt;li&gt;custom page breaks,&lt;/li&gt; 
 &lt;li&gt;font embedding,&lt;/li&gt; 
 &lt;li&gt;support for complex, multi-level (nested) structures,&lt;/li&gt; 
 &lt;li&gt;table of contents,&lt;/li&gt; 
 &lt;li&gt;helper methods for opening/printing/downloading the generated PDF,&lt;/li&gt; 
 &lt;li&gt;setting of PDF metadata (e.g. author, subject).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Documentation URL: https://pdfmake.github.io/docs/&lt;/p&gt; 
&lt;h2&gt;Building from sources&lt;/h2&gt; 
&lt;p&gt;using npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/bpampuch/pdfmake.git
cd pdfmake
npm install
npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;using yarn:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;git clone https://github.com/bpampuch/pdfmake.git
cd pdfmake
yarn
yarn run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bpampuch&quot;&gt;@bpampuch&lt;/a&gt; (founder)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/liborm85&quot;&gt;@liborm85&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;pdfmake is based on a truly amazing library &lt;a href=&quot;https://github.com/devongovett/pdfkit&quot;&gt;pdfkit&lt;/a&gt; (credits to &lt;a href=&quot;https://github.com/devongovett&quot;&gt;@devongovett&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Thanks to all contributors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ebazhanov/in-quiz-questions</title>
      <link>https://github.com/Ebazhanov/in-quiz-questions</link>
      <description>&lt;p&gt;Linkedin quiz assessment, linkedin test, questions and answers (aws-lambda, rest-api, javascript, react, git, html, jquery, mongodb, java, css, python, machine-learning ...) ответы на квиз, LinkedIn quiz lösungen, linkedin quiz las respuestas&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linkedin-quiz-questions&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/in-quiz-questions/master/#contributors-&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/all_contributors-198-orange.svg?style=flat-square&quot; alt=&quot;All Contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This repository does not pretend to give you all answers for LinkedIn questions, rather it&#39;s a starting guide to help you prepare for the LinkedIn skills quiz and to know what to expect in the main exam or which areas to target in your exam preparations. Should you have found some incorrect answers, or want to contribute your answers, please feel free to create any PR changes - all are welcome!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;:point_right: If you want to improve your skills on another test platform &lt;a href=&quot;https://www.pluralsight.com/product/skill-iq&quot;&gt;&lt;strong&gt;Pluralsight IQ Skill&lt;/strong&gt;&lt;/a&gt; find &lt;strong&gt;questions and answers&lt;/strong&gt; in &lt;strong&gt;@Timo Körner&lt;/strong&gt; &lt;a href=&quot;https://github.com/tik9/pluralsight-skill-test&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;| Pluralsight IQ Skill quiz | Status | | ------------------------------------------------------------------------------------------------------------------------ | ----------- | | &lt;a href=&quot;https://github.com/tik9/pluralsight/blob/master/angular.md&quot;&gt;Angular&lt;/a&gt; | ok | | &lt;a href=&quot;https://github.com/tik9/pluralsight/blob/master/aws_big_data.md&quot;&gt;Aws Big Data&lt;/a&gt; | ok | | &lt;a href=&quot;https://github.com/tik9/pluralsight/blob/master/aws_machine_learning.md&quot;&gt;Aws Machine Learning&lt;/a&gt; | ok | | &lt;a href=&quot;https://github.com/tik9/pluralsight/blob/master/building-websites.md&quot;&gt;Building Websites with HTML, CSS, and JavaScript&lt;/a&gt; | ok | | &lt;a href=&quot;https://github.com/tik9/pluralsight/blob/master/java.md&quot;&gt;Java&lt;/a&gt; | ok | | &lt;a href=&quot;https://github.com/tik9/pluralsight/blob/master/mysql.md&quot;&gt;Mysql&lt;/a&gt; | ok | | &lt;a href=&quot;https://github.com/tik9/pluralsight/blob/master/powershell.md&quot;&gt;Powershell&lt;/a&gt; | non-offical | | &lt;a href=&quot;https://github.com/tik9/pluralsight/blob/master/python_core.md&quot;&gt;Python&lt;/a&gt; | ok |&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;p&gt;| Linkedin-quiz-questions | Status | | --------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/adobe-illustrator/adobe-illustrator-quiz.md&quot;&gt;Adobe-Illustrator&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/adobe-photoshop/adobe-photoshop-quiz.md&quot;&gt;Adobe-Photoshop&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/agile-methodologies/agile-methodologies-quiz.md&quot;&gt;Agile Methodologies&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/android/android-quiz.md&quot;&gt;Android&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/AngularJS/angularjs-quiz.md&quot;&gt;AngularJs 🔥&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/aws/aws-quiz.md&quot;&gt;AWS&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/aws-lambda/aws-lambda-quiz.md&quot;&gt;AWS-Lambda&lt;/a&gt; :fire: | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/bash/bash-quiz.md&quot;&gt;Bash&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/c%23/c-sharp-quiz.md&quot;&gt;C#&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/c%2B%2B/c%2B%2Bquiz.md&quot;&gt;C++&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/css/css-quiz.md&quot;&gt;CSS&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/django/django-quiz.md&quot;&gt;Django&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/dotnet-framework/dotnet-framework-quiz.md&quot;&gt;.NET Framework&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/git/git-quiz.md&quot;&gt;Git&lt;/a&gt; :star: | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/google-analytics/google-analytics-quiz.md&quot;&gt;Google Analytics&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/google-cloud-platform/gcp-quiz.md&quot;&gt;Google Cloud Platform (GCP)&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/hadoop/hadoop-quiz.md&quot;&gt;Hadoop&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/html/html-quiz.md&quot;&gt;HTML&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/java/java-quiz.md&quot;&gt;Java&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/javascript/javascript-quiz.md&quot;&gt;Javascript&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/jquery/jquery-quiz.md&quot;&gt;jQuery&lt;/a&gt; :open_mouth: | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/json/json-quiz.md&quot;&gt;JSON&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/machine-learning/machine-learning-quiz.md&quot;&gt;Machine Learning&lt;/a&gt; | answers required | | Kotlin | NO question and NO answers yet | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/matlab/matlab-quiz.md&quot;&gt;MATLAB&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/maven/maven-quiz.md&quot;&gt;Maven&lt;/a&gt; :fire: | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/microsoft-azure/microsoft-azure-quiz.md&quot;&gt;Microsoft Azure&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/microsoft-excel/microsoft-excel-quiz.md&quot;&gt;Microsoft Excel&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/microsoft-power-bi/microsoft-power-bi-quiz.md&quot;&gt;Microsoft Power BI&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/microsoft-power-point/microsoft-power-point-quiz.md&quot;&gt;Microsoft Power Point&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/microsoft-project/microsoft-project-quiz.md&quot;&gt;Microsoft Project&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/microsoft-word/microsoft-word-quiz.md&quot;&gt;Microsoft Word&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/mongodb/mongodb-quiz.md&quot;&gt;MongoDB&lt;/a&gt; :green_heart: | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/mysql/mysql-quiz.md&quot;&gt;MySQL&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/node.js/node.js-quiz.md&quot;&gt;node.js&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/nosql/nosql-quiz.md&quot;&gt;NoSQL&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/objective-c/objective-c_quiz.md&quot;&gt;objective-c&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/oop/object-oriented-programming-quiz.md&quot;&gt;OOP&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/php/php-quiz.md&quot;&gt;PHP&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/python/python-quiz.md&quot;&gt;Python&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/r/r-quiz.md&quot;&gt;R&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/react/reactjs-quiz.md&quot;&gt;React.js&lt;/a&gt; :rose: | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/rest-api/rest-api-quiz.md&quot;&gt;REST API&lt;/a&gt; :+1: | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/scala/scala-quiz.md&quot;&gt;Scala&lt;/a&gt; | answers required | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/seo/search-engine-optimization-quiz.md&quot;&gt;Search Engine Optimization (SEO)&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/sharepoint/sharepoint-quiz.md&quot;&gt;SharePoint&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/swift/swift-quiz.md&quot;&gt;Swift&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/t-sql/t-sql-quiz.md&quot;&gt;Transact-SQL (T-SQL)&lt;/a&gt; | with answers | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/windows-server/windows-server-quiz.md&quot;&gt;Windows Server&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/wordpress/wordpress-quiz.md&quot;&gt;WordPress&lt;/a&gt; | partially answered | | &lt;a href=&quot;https://github.com/Ebazhanov/in-quiz-questions/blob/master/xml/xml-quiz.md&quot;&gt;XML&lt;/a&gt; | answers required |&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;Format&lt;/h2&gt; 
&lt;p&gt;We recommend to format files using &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; code formatter. Prettier comes installed with the IDE &lt;a href=&quot;https://raw.githubusercontent.com/Ebazhanov/in-quiz-questions/master/code.visualstudio.com&quot;&gt;Vscode&lt;/a&gt; which we recommend for preparing the md files. It works on all OS. If you want to run it independently, get &lt;strong&gt;npm&lt;/strong&gt; and:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm run format
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&quot;https://allcontributors.org/docs/en/emoji-key&quot;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/all-contributors/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;h2&gt;Stargazers over time&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://starchart.cc/Ebazhanov/in-quiz-questions&quot;&gt;&lt;img src=&quot;https://starchart.cc/Ebazhanov/in-quiz-questions.svg&quot; alt=&quot;Stargazers over time&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hjnilsson/country-flags</title>
      <link>https://github.com/hjnilsson/country-flags</link>
      <description>&lt;p&gt;SVG and PNG renders of all countries&#39; flags.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;country-flags&lt;/h1&gt; 
&lt;p&gt;You can view all the flags here: http://hjnilsson.github.io/country-flags/&lt;/p&gt; 
&lt;p&gt;This repository contains renders of all the worlds flags in SVG and PNG format.&lt;/p&gt; 
&lt;p&gt;The source files were taken from Wikipedia and are not under copyright protection since flags are effectively in public domain (there may be other restrictions on how the flag can be used though).&lt;/p&gt; 
&lt;p&gt;The flags are named by their 2-letter ISO-3166 country code, except for the constituent countries of Great Britain which have 6-letter codes &quot;GB-ENG&quot; etc).&lt;/p&gt; 
&lt;p&gt;Kosovo uses the user-assigned country code &lt;code&gt;XK&lt;/code&gt;, which is not part of the ISO standard, but in use by several multinational organizations.&lt;/p&gt; 
&lt;p&gt;Also included is a JSON file that maps the ISO country code to the name of the country.&lt;/p&gt; 
&lt;p&gt;You can also install this as a NPM module:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install --save svg-country-flags
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Arbitrary Width&lt;/h1&gt; 
&lt;p&gt;If you would like the flags in a different width than 100px, 250px or 1000px, you can run the node script &#39;build-pngs&#39;, you must first install the modules &lt;code&gt;svgexport&lt;/code&gt; and &lt;code&gt;imagemin-cli&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install -g svgexport imagemin-cli
npm run build-pngs -- 1000:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;1000:&lt;/code&gt; with whatever width you want (note the &lt;code&gt;:&lt;/code&gt;), or type &lt;code&gt;:200&lt;/code&gt; to get PNGs with a height of 200px.&lt;/p&gt; 
&lt;h1&gt;Arbitrary Width Manually&lt;/h1&gt; 
&lt;p&gt;If you cannot run the node script above, you can do the same steps manually.&lt;/p&gt; 
&lt;p&gt;Use a combination of &lt;code&gt;svgexport&lt;/code&gt; and &lt;code&gt;imagemin-cli&lt;/code&gt; from NPM to get that. &lt;code&gt;imagemin&lt;/code&gt; is very important because &lt;code&gt;svgexport&lt;/code&gt; produces uncompressed PNGs which are several MB each.&lt;/p&gt; 
&lt;p&gt;Run the following commands in the &lt;code&gt;svg/&lt;/code&gt; directory to get PNGs of a desired width:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;for file in *.svg; do svgexport $file &quot;`basename $file svg`png&quot; pad 1000: ; done
imagemin *.png --out-dir=../compressed-pngs/
rm *.png
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resultant files will be in the &lt;code&gt;compressed-pngs&lt;/code&gt; folder. As before, &lt;code&gt;1000:&lt;/code&gt; is the dimensions to export.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mrdoob/three.js</title>
      <link>https://github.com/mrdoob/three.js</link>
      <description>&lt;p&gt;JavaScript 3D library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;three.js&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/three&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/three&quot; alt=&quot;NPM Package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bundlephobia.com/result?p=three&quot;&gt;&lt;img src=&quot;https://badgen.net/bundlephobia/minzip/three&quot; alt=&quot;Build Size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmtrends.com/three&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dw/three&quot; alt=&quot;NPM Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/mrdoob/three.js#info=devDependencies&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/dev/mrdoob/three.js&quot; alt=&quot;Dev Dependencies&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/mrdoob/three.js/&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/alerts/github/mrdoob/three.js&quot; alt=&quot;Language Grade&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;JavaScript 3D library&lt;/h4&gt; 
&lt;p&gt;The aim of the project is to create an easy to use, lightweight, 3D library with a default WebGL renderer. The library also provides Canvas 2D, SVG and CSS3D renderers in the examples.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://threejs.org/examples/&quot;&gt;Examples&lt;/a&gt; — &lt;a href=&quot;http://threejs.org/docs/&quot;&gt;Documentation&lt;/a&gt; — &lt;a href=&quot;https://github.com/mrdoob/three.js/wiki&quot;&gt;Wiki&lt;/a&gt; — &lt;a href=&quot;https://github.com/mrdoob/three.js/wiki/Migration-Guide&quot;&gt;Migrating&lt;/a&gt; — &lt;a href=&quot;http://stackoverflow.com/questions/tagged/three.js&quot;&gt;Questions&lt;/a&gt; — &lt;a href=&quot;https://discourse.threejs.org/&quot;&gt;Forum&lt;/a&gt; — &lt;a href=&quot;https://join.slack.com/t/threejs/shared_invite/enQtMzYxMzczODM2OTgxLTQ1YmY4YTQxOTFjNDAzYmQ4NjU2YzRhNzliY2RiNDEyYjU2MjhhODgyYWQ5Y2MyZTU3MWNkOGVmOGRhOTQzYTk&quot;&gt;Slack&lt;/a&gt; — &lt;a href=&quot;https://discordapp.com/invite/HF4UdyF&quot;&gt;Discord&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;This code creates a scene, a camera, and a geometric cube, and it adds the cube to the scene. It then creates a &lt;code&gt;WebGL&lt;/code&gt; renderer for the scene and camera, and it adds that viewport to the &lt;code&gt;document.body&lt;/code&gt; element. Finally, it animates the cube within the scene for the camera.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as THREE from &#39;./js/three.module.js&#39;;

let camera, scene, renderer;
let geometry, material, mesh;

init();
animate();

function init() {

	camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );
	camera.position.z = 1;

	scene = new THREE.Scene();

	geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );
	material = new THREE.MeshNormalMaterial();

	mesh = new THREE.Mesh( geometry, material );
	scene.add( mesh );

	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setSize( window.innerWidth, window.innerHeight );
	document.body.appendChild( renderer.domElement );

}

function animate() {

	requestAnimationFrame( animate );

	mesh.rotation.x += 0.01;
	mesh.rotation.y += 0.02;

	renderer.render( scene, camera );

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If everything went well, you should see &lt;a href=&quot;https://jsfiddle.net/ruc3h17j/&quot;&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Cloning this repository&lt;/h3&gt; 
&lt;p&gt;Cloning the repo with all its history results in a ~2GB download. If you don&#39;t need the whole history you can use the &lt;code&gt;depth&lt;/code&gt; parameter to significantly reduce download size.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth=1 https://github.com/mrdoob/three.js.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Change log&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/mrdoob/three.js/releases&quot;&gt;Releases&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
