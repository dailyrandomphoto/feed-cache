<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Sun, 08 Aug 2021 01:48:37 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>alyssaxuu/mapus</title>
      <link>https://github.com/alyssaxuu/mapus</link>
      <description>&lt;p&gt;A map tool with real-time collaboration 🗺️&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mapus&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/alyssaxuu/mapus/master/preview.gif&quot; alt=&quot;Preview&quot;&gt; &lt;br&gt; Maps with real-time collaboration 🗺️&lt;/p&gt; 
&lt;p&gt;Mapus is a tool to explore and annotate collaboratively on a map. You can draw, add markers, lines, areas, find places to go, observe other users, and much more.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.producthunt.com/posts/mapus?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-mapus&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=307018&amp;amp;theme=light&quot; alt=&quot;Mapus - Open source map tool with real-time collaboration | Product Hunt&quot; style=&quot;width: 250px; height: 54px;&quot; width=&quot;250&quot; height=&quot;54&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Made by &lt;a href=&quot;https://alyssax.com&quot;&gt;Alyssa X&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alyssaxuu/mapus/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alyssaxuu/mapus/master/#installing-mapus&quot;&gt;Installing Mapus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alyssaxuu/mapus/master/#miscellaneous-ideas&quot;&gt;Miscellaneous ideas&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alyssaxuu/mapus/master/#feature-ideas&quot;&gt;Feature ideas&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alyssaxuu/mapus/master/#potential&quot;&gt;Potential use cases&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alyssaxuu/mapus/master/#monetization&quot;&gt;Monetization&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/alyssaxuu/mapus/master/#libraries-used&quot;&gt;Libraries used&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;🙌 Real-time collaboration to help plan trips synchronously&lt;br&gt; ✏️ Draw to highlight areas on the map&lt;br&gt; 📏 Create lines to designate paths and measure distance&lt;br&gt; 📐 Create areas to mark different zones&lt;br&gt; 📍 Create markers to save places on the map&lt;br&gt; ☕️ Find places and things to do nearby&lt;br&gt; 🔍 Search and navigate to specific places&lt;br&gt; 👀 Observe other users by clicking on their avatar&lt;br&gt; 📝 View a list of all the annotations, and toggle their visibility&lt;br&gt; 💾 Export the map data as GeoJSON&lt;br&gt; …and much more - all for free!&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;It’s basically Google’s &lt;a href=&quot;https://www.google.com/maps/about/mymaps/&quot;&gt;MyMaps&lt;/a&gt;, except it has real-time collaboration.&lt;/p&gt; 
&lt;h2&gt;Installing Mapus&lt;/h2&gt; 
&lt;p&gt;Since real-time multiplayer can get expensive (even though Firebase has a pretty generous free plan), you’ll need to self-host Mapus to use it. Here’s how:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Download the code. In the web version of GitHub, you can do that by clicking the green “Code” button, and then “Download ZIP”. You’ll be using the src folder.&lt;/li&gt; 
 &lt;li&gt;Create a Firebase account and project. You can check out the &lt;a href=&quot;https://firebase.google.com/docs/web/setup?authuser=0&quot;&gt;docs&lt;/a&gt; to see how to get started.&lt;/li&gt; 
 &lt;li&gt;Create a Realtime Database. You may need to set up specific rules to keep the data safe, &lt;a href=&quot;https://firebase.google.com/docs/database/security?authuser=0&quot;&gt;here’s&lt;/a&gt; an overview. The default rules though will work fine for testing and development, just not for production.&lt;/li&gt; 
 &lt;li&gt;Enable Google Sign In in the Firebase console. &lt;a href=&quot;https://firebase.google.com/docs/auth/web/google-signin?authuser=0&quot;&gt;Here’s how&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Replace the Firebase config object in the &lt;a href=&quot;https://github.com/alyssaxuu/mapus/raw/8d8d914f97fac60d9e60e1978b8b064c0d888ef6/src/index.html#L152&quot;&gt;index.html&lt;/a&gt; file with your own. The &lt;a href=&quot;https://firebase.google.com/docs/web/setup?authuser=0#config-object&quot;&gt;docs&lt;/a&gt; explain how to get the object.&lt;/li&gt; 
 &lt;li&gt;At this point you could just use the tool as is, but if you want to make sure you don’t go over the Firebase free plan limits, you could set up the &lt;a href=&quot;https://firebase.google.com/docs/emulator-suite/install_and_configure?authuser=0&quot;&gt;Firebase Emulator&lt;/a&gt; and run everything locally 100% for free.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Note that since Mapus has a MIT License you are free to set it up in a domain or even commercialize it.&lt;/p&gt; 
&lt;h2&gt;Miscellaneous ideas&lt;/h2&gt; 
&lt;p&gt;Throughout the development of Mapus I’ve had several ideas in regards to additional features, potential use cases, and more. I thought it would be a good idea to share, if anyone wants to contribute to Mapus, or make their own version.&lt;/p&gt; 
&lt;h3&gt;&lt;a name=&quot;feature-ideas&quot;&gt;&lt;/a&gt;Feature ideas 🚀&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;b&gt;A list of maps in the dashboard created by or shared with the user.&lt;/b&gt; There’s &lt;a href=&quot;https://github.com/grinat/leaflet-simple-map-screenshoter&quot;&gt;this plugin&lt;/a&gt; that creates screenshots of a Leaflet map, it could be useful to generate thumbnails (saving them in Firebase storage).&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Routing, to show a path between 2 points.&lt;/b&gt; I considered adding this feature in launch, but ended up deciding against it due to requiring a backend or paying for an API. There’s several plugins for this for Leaflet, one of the main ones I saw is &lt;a href=&quot;https://www.liedman.net/leaflet-routing-machine/&quot;&gt;Leaflet Routing Machine&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Sharing options.&lt;/b&gt; I made &lt;a href=&quot;https://i.ibb.co/BPn763m/sharingthing.png&quot;&gt;a mockup&lt;/a&gt; for this, basically allowing users to invite others by email and setting view-only/edit access. In order to set this up I would have had to rely on a third party to send out emails for invites, or create it myself. Since it’s a self-hosted tool it didn’t make much sense to implement.&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Autocomplete for search.&lt;/b&gt; Unfortunately the free API I’m using for getting OSM data (&lt;a href=&quot;https://nominatim.org/&quot;&gt;Nominatim&lt;/a&gt;) doesn’t allow using it for autocomplete (understandably so, it’s a free tool and it would lead to a really high amount of requests). Other APIs that could be used instead (paid) would be the &lt;a href=&quot;https://developers.google.com/maps/documentation/places/web-service/search&quot;&gt;Google Places API&lt;/a&gt;, or the &lt;a href=&quot;https://docs.mapbox.com/api/search/geocoding/&quot;&gt;MapBox Geocoding API&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Showing places of interest as you move around the map.&lt;/b&gt; Because of a similar API restriction, I set it up so that places of interest only show on request by the user within their view area, limited to 10 at a time (although it could go up to 50). The Google Places API would probably be a good replacement here.&lt;/li&gt; 
 &lt;li&gt;&lt;b&gt;Text tool.&lt;/b&gt; I looked all over for a Leaflet plugin to add text to maps. While there’s several ways to add labels, there isn’t really a proper way to deal with interactive text. The closest one I found was &lt;a href=&quot;https://github.com/rumax/Leaflet.Editable.TextBox&quot;&gt;this one&lt;/a&gt;, but it had its limitations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a name=&quot;potential&quot;&gt;&lt;/a&gt;Potential use cases 🤔&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;The first use case I thought of when building this product was &lt;b&gt;planning a trip between friends&lt;/b&gt;. There’s tools like &lt;a href=&quot;https://www.google.com/maps/about/mymaps/&quot;&gt;MyMaps&lt;/a&gt; that can be used for this, but it’s only for asynchronous collaboration, being unable to see each other in real-time and still mostly relying on people letting you know they updated the map. With real-time collaboration it’s much easier to suggest things like hotels to stay at, restaurants to go, hiking routes, etc.&lt;/li&gt; 
 &lt;li&gt;I also considered how Mapus could be targeted to companies. I had several ideas in that regard, for example, &lt;b&gt;planning some sort of company event&lt;/b&gt;, deciding on where to &lt;b&gt;open a new store or make a new development&lt;/b&gt; (e.g. based on amenities in the area, type of properties), &lt;b&gt;all sorts of real estate purposes&lt;/b&gt; (finding emerging neighbourhoods, property valuations, etc)…&lt;/li&gt; 
 &lt;li&gt;The real-time collaboration aspect of Mapus would be particularly handy in rapidly changing situations. For example in a &lt;b&gt;natural disaster&lt;/b&gt; it could be a way to quickly gather data from different sources as to the status of an area, &lt;b&gt;coordinating rescue efforts&lt;/b&gt;, etc. It could even be more helpful if &lt;b&gt;traffic or weather data&lt;/b&gt; was integrated in the tool, or if there was a way for users to integrate their own APIs to use the data collaboratively.&lt;/li&gt; 
 &lt;li&gt;A more “out there” use case could be something similar to &lt;a href=&quot;https://hoodmaps.com/london-neighborhood-map&quot;&gt;Hoodmaps&lt;/a&gt;, having &lt;b&gt;public maps&lt;/b&gt; where anyone can contribute information about a place, such as &lt;b&gt;best places to live, work, explore&lt;/b&gt;, etc. It would require a lot of moderation though so it might not be very feasible.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a name=&quot;monetization&quot;&gt;&lt;/a&gt;Monetization 💵&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Since it’s a costly tool to run due to having real-time collaboration, it would need a way to make money to be self-sustainable. One way to do this would be similar to Google Maps, having &lt;b&gt;local businesses promote themselves in the tool&lt;/b&gt; by making themselves more prominent on the maps.&lt;/li&gt; 
 &lt;li&gt;Another way would simply be having different plans, a &lt;b&gt;basic free version&lt;/b&gt; for a few people to collaborate on a trip together (either with a limited history, maximum number of users, maximum number of maps per user, limited features, limited “working area” in a map…), and then &lt;b&gt;paid plans&lt;/b&gt; with more features or targeted to enterprise.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Libraries used&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt; - for better event handling and DOM manipulation&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; - for the interactive map&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://geoman.io/leaflet-geoman&quot;&gt;Leaflet Geoman&lt;/a&gt; - for drawing lines and polygons on top of the map&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://turfjs.org/&quot;&gt;Turf&lt;/a&gt; - for calculating areas and distances&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; - for the database&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openstreetmap.org/&quot;&gt;OpenStreetMap&lt;/a&gt; - for the Nominatim API to search for places&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mapbox.com/&quot;&gt;MapBox&lt;/a&gt; - for the tile seen in the GIF. The current version uses an OSM tile because it’s free&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;&lt;/h1&gt; 
&lt;p&gt;Feel free to reach out to me through email at hi@alyssax.com or &lt;a href=&quot;https://twitter.com/alyssaxuu&quot;&gt;on Twitter&lt;/a&gt; if you have any questions or feedback! Hope you find this useful 💜&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>testjavascript/nodejs-integration-tests-best-practices</title>
      <link>https://github.com/testjavascript/nodejs-integration-tests-best-practices</link>
      <description>&lt;p&gt;✅ Master the art of the most powerful testing technique for Node.js: Component tests. Including super-comprehensive best practices list and an example app (August 2021)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/main-header.png&quot; alt=&quot;Header&quot; title=&quot;Component Tests&quot;&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Master the art of the most powerful testing technique for backend&lt;/h2&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;3 things to your benefit&lt;/h1&gt; 
&lt;p&gt;Component/integration test is an hybrid between E2E and unit tets. It’s gaining a lot of popularity and going by the testing diamond model it is considered as the default technique for modern backend. Its main idea is testing an entire component (e.g., Microservice) as-is, through the API, with all the layers including database but fake anything exterenous. This brings &lt;strong&gt;both&lt;/strong&gt; high confidence &lt;strong&gt;and&lt;/strong&gt; great developer experience. However, doing it right, fast, exhaustive and maximing the value demand some learning and skills. This is the mission statement of this repo. Warning: You might fall in love with testing 💚&lt;/p&gt; 
&lt;p&gt;This repository contains:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. ✅ 40+ Best Practices List -&lt;/strong&gt; Detailed instructions on how to write component tests in the RIGHT way including code example and reference to the example application&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. 📊 Example application -&lt;/strong&gt; A Complete showcase of a typical Node.js backend with performant tests setup (50 tests in 4 seconds! including database!)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. 🚀 Recipes folders -&lt;/strong&gt; Even more examples, each in its own folder, to cover more platform and use cases like Nest.js, Mocha, Jest, Express, Fastify (soon), message queues, authentication in tests, OpenAPI testing and more&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/component-diagram.jpg&quot; alt=&quot;Header&quot; title=&quot;Component Tests&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;Table of contents&lt;/code&gt;&lt;/h1&gt; 
&lt;h3&gt;Best Practices Sections&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#section-1-infrastructure-and-database-setup&quot;&gt;&lt;code&gt;Database And Infrastructure Setup&lt;/code&gt;&lt;/a&gt; - Optimizing your DB, MQ and other infra for testing (6 best practices)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#section-2-web-server-setup&quot;&gt;&lt;code&gt;Web-Server Setup&lt;/code&gt;&lt;/a&gt; - Good practices for starting and stopping the backend API (3 best practices)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#section-3-test-test-anatomy-basics&quot;&gt;&lt;code&gt;The Test Anatomy&lt;/code&gt;&lt;/a&gt; - The bread and butter of a component test (6 best practices)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#section-4-isolating-from-the-external-world&quot;&gt;&lt;code&gt;Integration&lt;/code&gt;&lt;/a&gt; - Techniques for testing collaborations with 3rd party components (8 best practices)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#section-5-dealing-with-data&quot;&gt;&lt;code&gt;Dealing With Data&lt;/code&gt;&lt;/a&gt; - Patterns and practices for testing the application data and database (8 best practices)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#section-6-message-queues&quot;&gt;&lt;code&gt;Message Queue&lt;/code&gt;&lt;/a&gt; - Correctly testing flows that start or end at a queue (8 best practices)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#section-development-workflow&quot;&gt;&lt;code&gt;Development Workflow&lt;/code&gt;&lt;/a&gt; - Incorporoating component tests into your daily workflow (5 best practices)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Example Application&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#-example-application&quot;&gt;&lt;code&gt;Our Showcase&lt;/code&gt;&lt;/a&gt; - An example Node.js component that embodies selected list of important best practices&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Other Recipes&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices#-recipes&quot;&gt;&lt;code&gt;More Examples And Platforms&lt;/code&gt;&lt;/a&gt; - A list of more examples that cover more platforms and topics&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;✅ Best Practices&lt;/h1&gt; 
&lt;br&gt; 
&lt;h2&gt;&lt;strong&gt;Section 1: Infrastructure and database setup&lt;/strong&gt;&lt;/h2&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 1. Use Docker-Compose to host the database and other infrastructure&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; All the databases, message queues and infrastructure that is being used by the app should run in a docker-compose environment for testing purposes. Only this technology check all these boxes: A mature and popular technology that can be reused among developer machines and CI. One setup, same files, run everywhere. Sweet value but one remarkable caveat - It’s different from the production runtime platform. Things like memory limits, deployment pipeline, graceful shutdown and a-like act differently in other environments - Make sure to test those using pre-production tests over the real environment. Note that the app under test should not neccesserily be part of this docker-compose and can keep on running locally - This is usually more comfortable for developers.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; A popular option is manual installation of local database - This results in developers working hard to get in-sync with each other (“Did you set the right permissions in the DB?”) and configuring a different setup in CI ❌; Some use local Kuberentes or Serverless emulators which act almost like the real-thing, sounds promising but it won’t work over most CIs vendors and usually more complex to setup in developers machine❌;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;  # docker-compose.yml
  version: &#39;3.6&#39;
  services:
    database:
      image: postgres:11
      command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
      environment:
        - POSTGRES_USER=myuser
        - POSTGRES_PASSWORD=myuserpassword
        - POSTGRES_DB=shop
      container_name: &#39;postgres-for-testing&#39;
      ports:
        - &#39;54310:5432&#39;
      tmpfs: /var/lib/postgresql/data
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/docker-compose.yml&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 2. Start docker-compose using code in the global setup process&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; In a typical multi-process test runner (e.g. Mocha, Jest), the infrastructure should be started in a global setup/hook (&lt;a href=&quot;https://jestjs.io/docs/en/configuration#globalsetup-string&quot;&gt;Jest global setup&lt;/a&gt;), &lt;a href=&quot;https://mochajs.org/#global-setup-fixtures&quot;&gt;Mocha global fixture&lt;/a&gt; using custom code that spin up the docker-compose file. This takes away common workflows pains - The DB is an explicit dependency of the test, no more tests failing because the DB is down. A new developer onboarded? Get him up to speed with nothing more than &lt;code&gt;git clone &amp;amp;&amp;amp; npm test&lt;/code&gt;. Everything happens automatically, no tedious README.md, no developers wonder what setup steps did they miss. In addition, going with this approach maximizes the test performance: the DB is not instantiated per process or per file, rather once and only once. On the global teardown phase, all the containers should shutoff (See a dedicated bullet below).&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; A popular option is manual installation of local database - This results in developers working hard to get in-sync with each other (“Did you set the right permissions in the DB?”) and configuring a different setup in CI ❌; Some use local Kuberentes or Serverless emulators which act almost like the real-thing, sounds promising but it won’t work over most CIs vendors and usually more complex to setup in developers machine❌;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  // jest.config.js
  globalSetup: &#39;./example-application/test/global-setup.js&#39;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  // global-setup.js
  const dockerCompose = require(&#39;docker-compose&#39;);
  
  module.exports = async () =&amp;gt; {

    await dockerCompose.upAll();

&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/global-setup.js#L14-L25&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 3. Shutoff the infrastructure only in the CI environment&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#performance&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Keep the database and other infrastructure always alive in developers’ machine so the next tests run will start at a glance, typically in 3-5ms. This super-fast start-up will encourage developers to run the tests continously and treat them as a coding companion: It’s an amazing coding experience to have the tests running all the time and watching your back as you type. Keeping the DB alive requires a clear data clean-up strategy, see our recommendation below. What about CI environment? This careful tune-up is mostly important in a developer machine where the test might get executed very frequently (e.g. after every editor save, once a minute), in a CI environement the next tests execution might happen in a different machine and there is no motivation to keep the the docker-compose up.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Should you teardown the docker-compose and restart in every tests execution, the startup time is likely to be 20x slower and is likely to kill this continous-testing experience ❌;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  // jest.config.js
  globalTeardown: &#39;./example-application/test/global-teardown.js&#39;,
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  
  // global-teardown.js - clean-up after all tests
  const isCI = require(&#39;is-ci&#39;);
  const dockerCompose = require(&#39;docker-compose&#39;);
  
  module.exports = async () =&amp;gt; {
    // Check if running CI environment
    if (isCI) {
      dockerCompose.down();
    }
  }
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/global-teardown.js#L5-L8&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 4. Optimize your real DB for testing, Don’t fake it&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; `#intermediate,&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Use the same DB product that is being used in production and configure it for faster execution. Typically, DBs accept flags that allow to trade durability (i.e., data safety) for performance. With just a few configuration flags ~20-40% performance gain is achieved and hundreds tests can be run in a few seconds. Our guide includes a recipe with examples of how to tune-up the popular DBs for testing&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Some memory-only DB engines (e.g. SQLLite) are tempting - Surprisingly they are likely to be even slower in a multi-process testing mode + Present noise due to unsupported features❌; Some mock/stub the DB layer - Cutting off few seconds does not justify the greatly decreased risks coverage ❌&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;h4&gt;Postgres&lt;/h4&gt; 
 &lt;pre&gt;&lt;code&gt;//docker-compose file
version: &quot;3.6&quot;
services:
  db:
    image: postgres:13
    container_name: &#39;postgres-for-testing&#39;
    // fsync=off means don&#39;t wait for disc acknowledgement
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
    tmpfs: /var/lib/postgresql/data
    ...
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 5. Store test data in RAM folder&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#performance&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Use your real DB product, just store the data in a RAM folder to reduce IO and gain some performance boost. In Linux machine, this can be done quickly by mapping the data to the built-in tmpfs folder - This particular folder’s content is stored in memory without disc involvement. In Mac and Windows, one should generate a RAM folder using a script that can be done once or automated. &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/issues/9#issuecomment-710674437&quot;&gt;We have conducted multiple performance benchmarks&lt;/a&gt; and found that this only slightly improves the performance - The other optimizations that were covered above already minimize the IO work and modern SSD discs are blazing fast. Some specific databases like Mongo comes with a built-in memory engine, this is an additional option to consider.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; When configuring the DB for low-durability level (described in the bullet ‘Optimize your real DB for testing, Don’t fake it), this step may be omitted ✅;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;//docker-compose file
version: &quot;3.6&quot;
services:
  db:
    image: postgres:13
    container_name: &#39;postgres-for-testing&#39;
    // 👇 Stores the DB data in RAM folder. Works only in Linux
    tmpfs: /var/lib/postgresql/data
    ...
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 6. Build the DB schema using migrations, ensure it happens only once in dev&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#intermediate&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; While there are various way to create the DB tables, always prefer the technique that is used in production - probably migrations. By doing so, another layer of bugs are covered: Should there be an issue with the DB schema - It will get caught during testing. Performance is always a critical concern, withoug thoughtful setup every tests execution will start with the migration framework approaching the DB to check if updates are needed. Alternativelly, run the migrations only if a specific environmen flag was passed. This will result in tests failing when the DB should get updated, developers must manually run npm script for migration but will maximize the tests start time. Note that migration is the right tool for building the schema and potentially also some metadata - But not the tests data itself (See bullet: Each tests must act on its own data)&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Most ORMs provide a ‘sync’ method that build the DB by the code model - This technique is not recommended for production and using it only for testing will bypass issues that exist in the production technique (e.g. migrations) ❌; Some migration frameworks (e.g. &lt;a href=&quot;https://github.com/sequelize/umzug&quot;&gt;umzug which is also used by Sequelize&lt;/a&gt;) allow checking for newer version by looking at local files which is way faster, this is a viable option but not applicable in many ORMs ✅; You may store locally the last migration check and execute the migration command only if the migration folder changed since then ✅;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  // jest.config.js
  globalSetup: &#39;./example-application/test/global-setup.js&#39;

  // global-setup.js
  const npm = require(&#39;npm&#39;);
  const util = require(&#39;util&#39;);
  module.exports = async () =&amp;gt; {
    ...
    const npmCommandAsPromise = util.promisify(npm.commands.run);
    await npmCommandAsPromise([&#39;db:migrate&#39;]); // Migrating the DB using a npm script before running any tests.
    ...
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/global-setup.js#L29-L30&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Section 2: Web server setup&lt;/strong&gt;&lt;/h2&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 1. The test and the backend should live within the same process&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic, #strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; The tests should start the webserver within the same process, not in a remote environment or container. Failing to do so will result in lose of critical features: A test won’t be able to simulate various important events using test doubles (e.g. make some component throw an exception), customize environment variables, and make configuration changes. Also, the complexity of measuring code coverage and intercepting network calls will highly increase&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; one might spin the backend in Docker container or just a separate Node process. This configuration better resembles the production but it will lack critical testing features as mentioned above ❌; Some teams run integration tests against production-like cloud envrionment (see bullet ’Reuse tests against production-like environment), this is a valid technique for extra validation but will get too slow and limiting to rely on during develoment ❌;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;const apiUnderTest = require(&#39;../api/start.js&#39;);

beforeAll(async (done) =&amp;gt; {
  //Start the backend in the same process
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/integration-tests-a-z/raw/4c76cb2e2202e6c1184d1659bf1a2843db3044e4/example-application/entry-points/api-under-test.js#L10-L34&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 2. Let the tests control when the server should start and shutoff&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic, #strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; The server under test should let the test decide when to open the connection and when to close it. If the webserver do this alone automatically when its file is imported, then the test has no chance to perform important actions beforehand (e.g. change DB connection string). It also won’t stand a chance to close the connection and avoid hanging resources. Consequently, the web server initialize code should expose two functions: start(port), stop(). By doing so, the production code has the initializtion logic and the test should control the timing&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; The web server initializtion code might return a reference to the webserver (e.g. Express app) so the tests open the connection and control it - This will require to put another identical production code that opens connections, then tests and production code will deviate a bit ❌; Alternativelly, one can avoid closing connections and wait for the process to exit - This might leave hanging resources and won’t solve the need to do some actions before startup ❌&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;const initializeWebServer = async (customMiddleware) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    // A typical Express setup
    expressApp = express();
    defineRoutes(expressApp);
    connection = expressApp.listen(() =&amp;gt; {
      resolve(expressApp);
    });
  });
}

const stopWebServer = async () =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    connection.close(() =&amp;gt; {
      resolve();
    })
  });
}

beforeAll(async (done) =&amp;gt; {
  expressApp = await initializeWebServer();
  done();
  }

afterAll(async (done) =&amp;gt; {
  await stopWebServer();
  done();
});


&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/integration-tests-a-z/raw/4c76cb2e2202e6c1184d1659bf1a2843db3044e4/example-application/entry-points/api-under-test.js#L10-L34&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 3. Specify a port in production, randomize in testing&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#e&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; Let the server randomize a port in testing to prevent port collisions. Otherwise, specifying a specific port will prevent two testing processes from running at the same time. Almost every network object (e.g. Node.js http server, TCP, Nest, etc) randmoizes a port by default when no specific port is specified&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Running a single process will slow down the tests ❌; Some parallelize the tests but instantiate a single web server, in this case the tests live in a different process and will lose many features like test doubles (see dedicated bullet above) ❌;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;// api-under-test.js
const initializeWebServer = async (customMiddleware) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    // A typical Express setup
    expressApp = express();
    connection = expressApp.listen(webServerPort, () =&amp;gt; {// No port
      resolve(expressApp);
    });
  });
};

// test.js
beforeAll(async (done) =&amp;gt; {
  expressApp = await initializeWebServer();//No port
  });


&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/basic-tests.test.js#L11&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Section 3: The test anatomy (basics)&lt;/strong&gt;&lt;/h2&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 1. Stick to unit testing best practices, aim for great developer-experience&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic, #strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; Write integration-component tests using the same style and practices used for unit tests. Half of the idea behind this technique is not to lose the great perks of unit tests (the second half is to cover more ground). In other words, this technique should be thought of like unit tests on steroids, not as small E2E tests. Why? The biggest threat to testing is abandonment. If the developer experience is not great, there are chances that the team won’t use it, or fake it like their using it. Code-wise, keep the tests very small (a good rule of thumb: no longer than 7 statements), the runtime should hopefully last few seconds and strive to be below 10 seconds, keep a consistent naming pattern like ‘when… then…’, use the AAA pattern to reach a very consistent structure, cover a single interaction and not a big flow. More explanations on this and other useful practices can be found in our &lt;a href=&quot;https://github.com/goldbergyoni/javascript-testing-best-practices&quot;&gt;sister guid here&lt;/a&gt;.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Write tests that cover the entire user flow in the system, including many interactions (i.e., E2E) - Probably will result in slow execution (i.e., minutes, not seconds) and sometimes with flakiness. A few of these tests are needed. It can not serve as the canonical test technique that developers frequently write during coding ❌; Then why not just writing unit tests? - Some unit tests are needed to cover areas with algorithms or heavy logic (if they exist). However, unit tests won’t yield enough confidence when serving as the primary technique. Units by design focus on ‘unit’, parts, a fake system isolation and not on the real thing. When our main tests cover something that doesn’t resemble production - The deployment confidence is decreased. Kent Beck, ‘father of TDD’, wrote once “Programmer (aka “unit” tests). Give up tests being predictive and inspiring confidence for being writable, fast, and specific.” ❌&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// basic-tests.test.ts
test(&#39;When asked for an existing order, Then should retrieve it and receive 200 response&#39;, async () =&amp;gt; {
  // Arrange
  const orderToAdd = {
    userId: 1,
    productId: 2,
    mode: &#39;approved&#39;,
  };
  const {
    data: { id: addedOrderId },
  } = await axiosAPIClient.post(`/order`, orderToAdd);

  // Act
  const getResponse = await axiosAPIClient.get(`/order/${addedOrderId}`);

  // Assert
  expect(getResponse).toMatchObject({
    status: 200,
    data: {
      userId: 1,
      productId: 2,
      mode: &#39;approved&#39;,
    },
  });
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/integration-tests-a-z/raw/master/example-application/test/basic-tests.test.js#L49-L74&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 2. Approach the API using a library that is a pure HTTP client (e.g. axios, not supertest)&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; Call the backend under test’s API using your preferred HTTP client library. Prefer a library that specializes only in making HTTP calls like axios or fetch. Other tools that hang around like supertest provides more testing-related features like inferring the URL from an express object, doing assertion and more. It’s preferable not to bound the test to code objects rather to API-only and also to use default assertion library.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Supertest - Consider to avoid as it encourages direct bounding to express objects and promote different assertion syntax that your bult-in assertion library ❌;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// basic-test.test.ts
const axios = require(&#39;axios&#39;);
let axiosAPIClient;

beforeAll(async (done) =&amp;gt; {
  const apiConnection = await initializeWebServer();
  const axiosConfig = {
    baseURL: `http://127.0.0.1:${apiConnection.port}`,
    validateStatus: () =&amp;gt; true,
  };
  // Create axios client for the whole test suite
  axiosAPIClient = axios.create(axiosConfig);
  ...
});

test(&#39;When asked for an existing order, Then should retrieve it and receive 200 response&#39;, async () =&amp;gt; {
  const orderToAdd = {
    userId: 1,
    productId: 2,
    mode: &#39;approved&#39;,
  };

  // Use axios to create an order
  const {
    data: { id: addedOrderId },
  } = await axiosAPIClient.post(`/order`, orderToAdd);

  // Use axios to retrieve the same order by id
  const getResponse = await axiosAPIClient.get(`/order/${addedOrderId}`);
  ...
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/integration-tests-a-z/raw/master/example-application/test/basic-tests.test.js#L64&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 3. Provide real credentials or token. If possible, avoid security back doors&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basics&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; If applicable, authenticate using the same mechanism as production so the same code will get tested. Practically, this means passing a signed token with the request and/or stubbing the claim provider (i.e., user management service) to authorize the request. Like any other testing design decision, one should strive to cover the same code that real users in production are stretching. In many authentication scenarios, this is possible. Generally speaking, there are three main types of authorization flows: (A) The webserver is expecting a signed token like JWT - Since the code anyway must hold the secret to verify the claim, the tests can also use this to sign a valid token in 2 lines of code. This way, the test act precisely like the client by passing a valid token. (B) Some credentials/claims are passed to the API which must verify those against the claim provider (i.e., HTTP call to an external user management component). The test can intercept this call on the HTTP-level and return a valid response. For example, by using interceptors tools like &lt;a href=&quot;https://www.npmjs.com/package/nock&quot;&gt;nock&lt;/a&gt;. Since the 3rd party service is outside the scope of the tests, the fact that we faked the response does not matter. The entire backend under test is tested. (C) Session-based flow where a session-key is passed to the API verifying against the session store. In this case, add the key to the store before the test(s) - The authentication will pass&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Mock the authentication middleware and disable it or trick it into authorizing the request - While not an awful option, it means that the ‘real’ authorization code is not part of the test (because the test stubbed /replaced it) ❌; Some are holding an environment variable or config key that instructs the system not to authorize requests (e.g., IS_TESTING=TRUE) - This, of course, is a dangerous option as it might leak to production&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code&gt;// Code example with signing JWT token
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/basic-tests.test.js#L11&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;⚪️ 4. Assert on the entire HTTP response object, not on every field&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basics&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; When testing API responses, compare all the relevant parts of the response object (e.g., status, body fields, specific HTTP header) with an object that shows the expected data (code example below). From the test reader perspective, looking at the desired response object as a single unit, tells the story much better than checking 5 fields using 5 different statements. All the popular test runners support partial object matching (e.g. Chai expect.to.deep.equal, Jest.ToMatchObject). This advice does not advocate testing many things in a single test - Often, a single conceptual topic demands checking multiple fields.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Snapshots are a popular way to write a no-brainer assertion, we recommend against it. If the response payload is small, why not include it within the test for better readability? If it’s huge, it’s a sign that too many things are being tested together ❌; Separate to different tests - This is a great idea in many cases. It can also be nitty-gritty in other scenarios - Consider checking that a user was added successfully: The test expects getting back {id, name, phone}. Creating a test for every field has a very low ROI ✅;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// basic-tests.test.ts
test(&#39;When asked for an existing order, Then should retrieve it and receive 200 response&#39;, async () =&amp;gt; {
  ...
  const getResponse = await axiosAPIClient.get(`/order/${addedOrderId}`);

  // Assert on entire HTTP response object
  expect(getResponse).toMatchObject({
    status: 200,
    data: {
      userId: 1,
      productId: 2,
      mode: &#39;approved&#39;,
    },
  });
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/integration-tests-a-z/raw/master/example-application/test/basic-tests.test.js#L66-L73&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 5. Structure tests by routes and stories&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basics&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; Organize your tests using ‘describe’ blocks representing API routes. Eventually, this will result in a tree of routes and tests underneath. For example describe(’/API’), describe(‘POST /orders’). See the full example below. This common view of API end-points will likely look familiar and appeal to the occasional test report viewer. It resembles tooling that were proven to be popular like POSTMAN, OpenAPI docs, and others. Most, if not all, developers would know to map a test failure in a specific route with the corresponding code. A newly onboarded developer who is unfamiliar with the code would benefit from understanding the various routes and then easily start exploring the corresponding controller. Sometimes there are many scenario/cases under each route. In this case, consider creating another nested category (i.e. describe block) that represents a topic or user story. If the code under test is accessed using a message queue (see dedicated 4below), structure the routes by topics and queues.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/test-report-by-route.png&quot; alt=&quot;Test report by route&quot;&gt;&lt;/p&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Organize the tests per topic or user stories title - This will also serve as great documentation for the viewer. Mapping between failures and the related code that should get explored might a little harder ;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// basic-tests.test.js
describe(&#39;/api&#39;, () =&amp;gt; {
  describe(&#39;GET /order&#39;, () =&amp;gt; {
    ...
  });

  describe(&#39;POST /orders&#39;, () =&amp;gt; {
    ...
  });
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/basic-tests.test.js#L11&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;p&gt;🎦 Learn all of these topics in an &lt;a href=&quot;https://testjavascript.com&quot;&gt;online course by Yoni Goldberg&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 6. Test the five potential outcomes&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#intermediate #strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &amp;nbsp; &lt;strong&gt;Do:&lt;/strong&gt; When planning your tests, consider covering the five typical flow’s outputs. When your test is triggering some action (e.g., API call), a reaction is happening, something meaningful occurs and calls for testing. Note that we don’t care about how things work. Our focus is on outcomes, things that are noticeable from the outside and might affect the user. These outcomes/reactions can be put in 5 categories:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;• Response -&lt;/strong&gt; The test invokes an action (e.g., via API) and gets a response. It’s now concerned with checking the response data correctness, schema, and HTTP status&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;• A new state -&lt;/strong&gt; After invoking an action, some data is probably modified. For example, when updating a user - It might be that the new data was not saved. Commonly and mistakenly, testers check only the response and not whether the data is updated correctly. Testing data and databases raises multiple interesting challenges that are greatly covered below in the 📗 section ‘Dealing with data’&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;• External calls -&lt;/strong&gt; After invoking an action, the app might call an external component via HTTP or any other transport. For example, a call to send SMS, email or charge a credit card. Anything that goes outside and might affect the user - Should be tested. Testing integrations is a broad topic which is discussed in the 📗 section ‘Testing integrations’ below&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;• Message queues -&lt;/strong&gt; The outcome of a flow might be a message in a queue. In our example application, once a new order was saved the app puts a message in some MQ product. Now other components can consume this message and continue the flow. This is very similar to testing integrations only working with message queues is different technically and tricky. The 📗 section ‘Message Queues’ below delve into this topic&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;• Observability -&lt;/strong&gt; Some things must be monitored, like errors or remarkable business events. When a transaction fails, not only we expect the right response but also correct error handling and proper logging/metrics. This information goes directly to a very important user - The ops user (i.e., production SRE/admin). Testing error handler is not very straighforward - Many types of errors might get thrown, some errors should lead to process crash, and there are many other corners to cover. We plan to write the 📗 section on ‘Observability and errors’ soon&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;This content is available also as a course or a workshop&lt;/h3&gt; 
&lt;p&gt;Find here the &lt;a href=&quot;https://testjavascript.com/&quot;&gt;same content as a course&lt;/a&gt;, online &lt;a href=&quot;https://www.eventbrite.com/e/advanced-nodejs-testing-2-meetings-tickets-162539230213&quot;&gt;workshop&lt;/a&gt;, free webinar (TBD, &lt;a href=&quot;https://goldbergyoni.com/news-letter/&quot;&gt;follow here&lt;/a&gt; for specific date), or invite &lt;a href=&quot;https://testjavascript.com/contact-2/&quot;&gt;a private workshop to your team&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Section 4: External services&lt;/strong&gt;&lt;/h2&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 1. Isolate the component from the world using HTTP interceptor&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#strategic #basic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Isolate the component under test by intercepting any outgoing HTTP request and providing the desired response so the collaborator HTTP API won’t get hit. Nock is a great tool for this mission as it provides a convenient syntax for defining external services behavior. Isolation is a must to prevent noise and slow performance but mostly to simulate various scenarios and responses - A good flight simulator is not about painting clear blue sky rather bringing safe storms and chaos. This is reinforced in a Microservice architecture where the focus should always be on a single component without involving the rest of the world. Though it’s possible to simulate external service behavior using test doubles (mocking), it’s preferable not to touch the deployed code and act on the network level to keep the tests pure black-box. The downside of isolation is not detecting when the collaborator component changes and not realizing misunderstandings between the two services - Make sure to compensate for this using a few contract or E2E tests&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Some services provide a fake version that can be deployed by the caller locally, usually using Docker - This will ease the setup and boost the performance but won’t help with simulating various responses &amp;nbsp; ❌; Some services provide ‘sandbox’ environment, so the real service is hit but no costs or side effects are triggered - This will cut down the noise of setting up the 3rd party service but also won’t allow simulating scenarios &amp;nbsp; ❌;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Intercept requests for 3rd party APIs and return a predefined response 
beforeEach(() =&amp;gt; {
  nock(&#39;http://localhost/user/&#39;).get(`/1`).reply(200, {
    id: 1,
    name: &#39;John&#39;,
  });
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/basic-tests.test.js#L27-L32&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 2. Define default responses before every test to ensure a clean slate&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Typically one wishes to define &lt;em&gt;default&lt;/em&gt; responses to HTTP requests and might need to override with custom behavior for specific tests (i.e. simulate some specific response). To ensure tests don’t step on each other toes, define the default HTTP responses inside the hook that is executed before each test (Jest - beforeEach, Mocha - before), and clean-up after every test. Why? This way, every test will face the default behaviour and not some custom and surprising behavior that was defined by the previous test. You might see a minor performance degradation since the HTTP requests are being redefined many times - We have benchmarked this and found that the cost is 1ms per test&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; It’s possible to define the HTTP responses once in the before-all hook, in this case should some test intentionally or mistakenly override the behavior - It will affect all the tests ❌ &amp;nbsp; You may define in every test the HTTP responses that are relevant for this test - It’s likely to end with tedious repetitions of the same code ❌&amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Create a one-time interceptor before every test
beforeEach(() =&amp;gt; {
  nock(&#39;http://localhost/user/&#39;).get(`/1`).reply(200, {
    id: 1,
    name: &#39;John&#39;,
  });
});

// Endure clean slate after each test
afterEach(() =&amp;gt; {
  nock.cleanAll();
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/basic-tests.test.js#L34-L37&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 3. Override the happy defaults with corner cases using unique paths&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#advanced, #draft&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; A common need is happy path + corner cases, not possible technically to change existing path - need to remove. Instead of removing, create unique path and unique response. Do this by acting on unique resources. If not possible, other option is global scope. This minimizes coupling between tests.&lt;/p&gt; 
&lt;p&gt;Remember that after every test everything is cleaned-up, see bullet about clean-up.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Don’t have default ❌ &amp;nbsp; ; Use global scope ❌&amp;nbsp;; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Using an uncommon user id (7) and create a compatible interceptor
test(&#39;When the user does not exist, return http 404&#39;, async () =&amp;gt; {
  //Arrange
  const orderToAdd = {
    userId: 7,
    productId: 2,
    mode: &#39;draft&#39;,
  };

  nock(&#39;http://localhost/user/&#39;).get(`/7`).reply(404, {
    message: &#39;User does not exist&#39;,
    code: &#39;nonExisting&#39;,
  });

  //Act
  const orderAddResult = await axiosAPIClient.post(&#39;/order&#39;, orderToAdd);

  //Assert
  expect(orderAddResult.status).toBe(404);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 4. Deny all outgoing requests by default&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Instruct the network interceptor to block and warn on any outgoing HTTP request that is not intercepted. Blocking all calls typically requires no more than one statement &lt;code&gt;nock.disableNetConnect()&lt;/code&gt;. For any request that was not explicitly defined - the interceptor will throw an exception and make the tests fail. Why is this needed? To protect the component borders. It might be that some HTTP calls were not considered and trying to hit a real external server. When requests are not intercepted, it violates the component isolation, triggers flakiness, and degrades performance. Remember to exclude calls to the local API under test that should serve the tests` requests. When the test suite is done, remove this restriction to avoid leaving unexpected behaviour to other tests suites.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Trust your familiarity with the code and assume that all network calls were configured for interception. This dictates that any developer who puts HTTP requests in the code remembers to update the testing configuration - Isn’t this a fragile assumption? ❌ &amp;nbsp; Some interceptor tools allow recording and inspecting the traffic - This information is valuable for periodical review(see dedicated bullet on recoding) but not an ongoing guard ❌&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;beforeAll(async (done) =&amp;gt; {
  ...
  // ️️️Ensure that this component is isolated by preventing unknown calls
  nock.disableNetConnect();
  // Enable only requests for the API under test
  nock.enableNetConnect(&#39;127.0.0.1&#39;);

  done();
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/basic-tests.test.js#L20-L22&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 5. Simulate network chaos&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Go beyond the happy and sad paths. Check not only errored responses (e.g., HTTP 500 error) but also network-level anomalies like slow and timed-out responses. This will prove that the code is resilient and can handle various network scenarios like taking the right path after a timeout, has no fragile race conditions, and contains a circuit breaker for retries. Reputable interceptor tools can easily simulate various network behaviors like hectic service that occasionally fail. It can even realize when the default HTTP client timeout value is longer than the simulated response time and throw a timeout exception right away without waiting &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Checking only HTTP responses, without simulating network corener cases, is sensible for non-critical integrations ✅ &amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;When users service replies with 503 once and retry mechanism is applied, then an order is added successfully&#39;, async () =&amp;gt; {
  //Arrange
  nock.removeInterceptor(userServiceNock.interceptors[0])
  nock(&#39;http://localhost/user/&#39;)
    .get(&#39;/1&#39;)
    .reply(503, undefined, { &#39;Retry-After&#39;: 100 });
  nock(&#39;http://localhost/user/&#39;)
    .get(&#39;/1&#39;)
    .reply(200);
  const orderToAdd = {
    userId: 1,
    productId: 2,
    mode: &#39;approved&#39;,
  };

  //Act
  const response = await axiosAPIClient.post(&#39;/order&#39;, orderToAdd);

  //Assert
  expect(response.status).toBe(200);
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/recipes/component-isolation/test/isolation.test.js#L188-L206&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 6. Catch invalid outgoing requests by specifying the request schema&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; When checking that the component did send HTTP requests, also check the request’s validity. For example, when checking that an email was sent, it’s not enough to ensure that HTTP call was made to the right URL, it’s imperative to verify that the body contains the necessary fields like email address and mail subject. By doing so, the tests cover one more layer of bugs: integration issues. You may achieve this by storing the outgoing request as a local variable and asserting that its schema, sometimes even the data, is as expected. Why is this important? When isolating a component by intercepting network requests, the tests hide bugs and sugarcoat the reality. By default, no matter how a request looks like, the response will be successful. The 3rd party service validation is avoided and will come into play only in production. The minimum act to mitigate this line of risks is to assert the correctness of the request. While a good start, it won’t cover all the integration risks - What if a collaborator service was changed and the tests were not updated? This will get discovered only in production. Therefore, more techniques are needed to cover all the integration risks (See below on E2E and contract tests).&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Some rely on E2E test to check integration - This layer is valuable and needed as a last chance safety net. However, due its flakines, it’s should be used sparingly and not as a primary testing tool ❌ &amp;nbsp; What if there is misaligement on the exact values and requests sequence that we should be made? In this case, consumer-driven contract tests might be valuable (though pricey) ✅&amp;nbsp;; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// ️️️Assert that the app called the mailer service appropriately with the right input
test(&#39;When order failed, send mail to admin&#39;, async () =&amp;gt; {
  //Arrange
  ...
  let emailPayload;
  nock(&#39;http://mailer.com&#39;)
    .post(&#39;/send&#39;, (payload) =&amp;gt; ((emailPayload = payload), true))
    .reply(202);
  const orderToAdd = {
    userId: 1,
    productId: 2,
    mode: &#39;approved&#39;,
  };

  //Act
  await axiosAPIClient.post(&#39;/order&#39;, orderToAdd);

  // ️️️Assert
  expect(emailPayload).toMatchObject({
    subject: expect.any(String),
    body: expect.any(String),
    recipientAddress: expect.stringMatching(
      /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/
    ),
  });
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/basic-tests.test.js#L148-L177&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 7. Record real outgoing requests for awareness&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#advanced&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Various tools and network interceptors (e.g., nock) can tell about the existence and nature of outgoing HTTP requests. Run one of those tools as you plan test cases to realize which end-points and scenarios should get covered. With local interceptors that are made for testing (e.g. &lt;a href=&quot;https://github.com/nock/nock#recording&quot;&gt;nock recording&lt;/a&gt;)., recording mode should be enabled when the tests run - Then all the network traffic will get captured in local files. Why is this important? You might miss end-points or, more likely, miss some corner scenarios. For example, one may believe that ‘GET: /users/:id’ returns only HTTP 200 with a body, the code relies on this response. In reality, this end-point also sometimes returns HTTP 204 with an empty body. If this is not tested before production, it will get tested in production… For complex and critical scenarios, consider also watching the &lt;strong&gt;production&lt;/strong&gt; network logs to realize the various potential scenarios.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Rely on your familairity with the code and trust that you didn’t miss any network flow ❌ &amp;nbsp; Manually skim through API documentation (e.g. OpenAPI) ✅&amp;nbsp;; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// TODO
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 8. Fake the time to minimize network call duration&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basic, #draft&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Interception tools include record mode which …; use this to become aware of the integration it self, but also to its various patterns. Ensure all variations are covered with testing. You may use the recorded file as default; Do this in staging environment; Valuable when there are many integrations.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Persist ❌ &amp;nbsp; ; In every test ❌&amp;nbsp;; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// use &quot;fake timers&quot; to simulate long requests.
test(&quot;When users service doesn&#39;t reply within 2 seconds, return 503&quot;, async () =&amp;gt; {
  //Arrange
  const clock = sinon.useFakeTimers();
  nock(&#39;http://localhost/user/&#39;)
    .get(&#39;/1&#39;, () =&amp;gt; clock.tick(5000))
    .reply(200);

  const orderToAdd = {
    userId: 1,
    productId: 2,
    mode: &#39;approved&#39;,
  };

  //Act
  const response = await axiosAPIClient.post(&#39;/order&#39;, orderToAdd);

  //Assert
  expect(response.status).toBe(503);

  //Clean
  clock.uninstall();
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/recipes/component-isolation/test/isolation.test.js#L163-L186&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Section 5: Dealing with data&lt;/strong&gt;&lt;/h2&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 1. Important: Each test should act on its own records only&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Any record that might affect the test results should be added at the beginning of the test. Excelemation mark. Doing so will result in short and self-contained test stories that the occasional reader can easily troubleshoot without skimming through the entire file. A common mistake is to seed the whole test data globally - This leads to high coupling and complexity. Specifically, failing to keep the tests self-contained will lead to the Domino effect: Understanding why test num #27 failed demands reading the 26 tests before. Each might have mutated the global data. Other undesired side effects: One can’t run a single test becuase it depends on data that is generated by previous tests; It will get much harder to understand the test intent becuase the gun that is being shown on the last scene was never introduced before (&lt;a href=&quot;http://xunitpatterns.com/Obscure%20Test.html#Mystery%20Guest&quot;&gt;The mystery guest syndrome&lt;/a&gt;). Are you concerned with performance? Based on our benchmarks, adding relevant data at the beginning of each test add ~1 second to the execution time - Absolutely worth the decreased complexity. This advice is valuable only to records that are the subject of the tests. Tests can have different types of data, see next bullet &lt;a href=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/test-data-types.png&quot; title=&quot;Test data types&quot;&gt;and this diagram&lt;/a&gt;.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Seed data before all the tests - This will end in spaghetti dependencies between all the tests &lt;strong&gt;files&lt;/strong&gt; ❌ &amp;nbsp; ; Seed at the beginining of each file - Same spaghetti, only smaller ❌&amp;nbsp;; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;When asked for an existing order, Then should retrieve it and receive 200 response&#39;, async () =&amp;gt; {
    //Arrange - Create a record so we can later query for it and assert for is existence
    const orderToAdd = {
        userId: 1,
        productId: 2,
        mode: &#39;approved&#39;,
    };
    await axiosAPIClient.post(`/order`, orderToAdd);

    //Next -&amp;gt; Invoke the route under test and asssert for something
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/basic-tests.test.js#L49-L74&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 2. Only metadata and context data should get pre-seeded to the database&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;None&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Some data is not related to the tests flow. The test reader can understand and troubleshoot the test easily without being aware of it. For example, look-up table of all the currencies or countries in the world. There is no benefit in filling this tables again and again in every test file. How do we make the differentiation? Let’s define more specifically 3 types of test data:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Metadata&lt;/strong&gt; - General purpose lists and lookups that are needed for the app to perform but are not related at all with the test’s subject. For example, currencies list, countries, roles list, and similar. This data can get seeded once globally. There is no point in re-adding it per test or file&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Context data&lt;/strong&gt; - Required records that hold a relationship with the subject under test but are not being tested directly. For example, consider an e-commerce purchase flow tests: The User entity, Shop entity, Business entity are all a parent or sibling of the Order that is being tested. They might affect the test result (e.g., Trying to order goods when the user was deleted) but are not the direct subject of the test. To keep the tests short and focused, this data can be added per file, if they affect the test results - Add the data per test&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Test records&lt;/strong&gt; - This is the data that is actually being tested and likely to be added or mutated. The reader must directly see what data exists to understand the results of the test. For this reason, explicitly define and add this information inside the test. Going with the same e-commerce site example, when testing the purchase flow, add the order records within the test&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/test-data-types.png&quot; title=&quot;Test data types&quot;&gt;See comparison table here&lt;/a&gt;.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Per-suite, expensive ❌ &amp;nbsp; ; In every test ❌&amp;nbsp;; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Adding metadata globally. Done once regardless of the amount of tests
module.exports = async () =&amp;gt; {
  console.time(&#39;global-setup&#39;);
  ...
  await npmCommandAsPromise([&#39;db:seed&#39;]); // Will create a countries (metadata) list. This is not related to the tests subject
  ...
  // 👍🏼 We&#39;re ready
  console.timeEnd(&#39;global-setup&#39;);
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/global-setup.js#L32&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
 &lt;hr&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;/api&#39;, () =&amp;gt; {
  let user;

  beforeAll(async (done) =&amp;gt; {
    // Create context data once before all tests in the suite
    user = createUser();

    done();
  });

  describe(&#39;GET /order&#39;, () =&amp;gt; {
    test(&#39;When asked for an existing order, Then should retrieve it and receive 200 response&#39;, async () =&amp;gt; {
      //Arrange
      const orderToAdd = {
        userId: user.id, // Must provide a real user id but we don&#39;t care which user creates the order
        productId: 2,
        mode: &#39;approved&#39;,
      };
      const {
        data: { id: addedOrderId },
      } = await axiosAPIClient.post(`/order`, orderToAdd);
      ...
    });
  });
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;hr&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;When asked for an existing order, Then should retrieve it and receive 200 response&#39;, async () =&amp;gt; {
    //Arrange - Create a record so we can later query for it and assert for is existence
    const orderToAdd = {
        userId: 1,
        productId: 2,
        mode: &#39;approved&#39;,
    };
    await axiosAPIClient.post(`/order`, orderToAdd);

    //Next -&amp;gt; Invoke the route under test and asssert for something
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/basic-tests.test.js#L49-L74&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 3. Assert the new data state using the public API&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#basics&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; After invoking the route under test, a new state is likely to exist (e.g., new records) - Assert that the new state data is satisfactory &lt;strong&gt;using the REST API&lt;/strong&gt; when applicable. By approaching through the API, the test simulates the most important flow: The user flow. What’s wrong with approaching the DB directly? Not only it goes through a different journey than the user, but also the test might miss a bug in the API that returns the data (i.e., DB data is correct, the query code hides a bug). Sometimes, such REST API does not exist - In this case, use the outermost layer that does expose this info like controller, service, facade, or repository. The more external this layer is, the more bugs are caught, and the coupling to the internals` noise is minimized.&lt;/p&gt; 
&lt;p&gt;This design decision does not come without a caveat. The test invokes much more code than needed: Tests might fail because of failures in code not being directly tested. Our philosophy is to stick to user flows under realistic conditions at the cost of a slight increase in developer’s sweat.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Approach the DB directly - Miss bug in the query code, higher exposure to internal refactoring ❌ &amp;nbsp; Approach the ORM - Not ideal for the same reasons like the option above ❌&amp;nbsp; Approach the service layer - Better than approaching the DB directly as it will be less sensitive to DB schema changes and resemble more the user flow &amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;When adding a new valid order, Then should be able to retrieve it&#39;, async () =&amp;gt; {
  //Arrange
  const orderToAdd = {
    userId: 1,
    productId: 2,
    mode: &#39;approved&#39;,
  };

  //Act
  const {
    data: { id: addedOrderId },
  } = await axiosAPIClient.post(&#39;/order&#39;, orderToAdd);

  //Assert by fetch the new order, and not only by the POST response
  const { data, status } = await axiosAPIClient.get(
    `/order/${addedOrderId}`
  );

  expect({
    data,
    status,
  }).toMatchObject({
    status: 200,
    data: {
      id: addedOrderId,
      userId: 1,
      productId: 2,
    },
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 4. Important: Choose a clear data clean-up strategy: After-all (recommended) or after-each&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; The timing when the tests clean the database determines the way the tests are being written. The two most viable options are cleaning after all the tests vs cleaning after every single test. Choosing the latter option, cleaning after every single test guarantees clean tables and builds convenient testing perks for the developer. No other records exist when the test starts, one can have certainty which data is being queried and even might be tempted to count rows during assertions. This comes with severe downsides: When running in a multi-process mode, tests are likely to interfere with each other. While process-1 purges tables, at the very moment process-2 queries for data and fail (because the DB was suddenly deleted by process-1). On top of this, It’s harder to troubleshoot failing tests - Visiting the DB will show no records.&lt;/p&gt; 
&lt;p&gt;The second option is to clean up after all the test files have finished (or even daily!). This approach means that the same DB with existing records serves all the tests and processes. To avoid stepping on each other’s toes, the tests must add and act on specific records that they have added. Need to check that some record was added? Assume that there are other thousands of records and query for records that were added explicitly. Need to check that a record was deleted? Can’t assume an empty table, check that this specific record is not there. This technique brings few powerful gains: It works natively in multi-process mode, when a developer wishes to understand what happened - the data is there and not deleted. It also increases the chance of finding bugs because the DB is full of records and not artificially empty. It’s not perfect, though, since the DB is stuffed with data - Data that goes to unique columns might be duplicated. When adding 10 records and asserting their existence, a more sophisticated query will be needed. All of these challenges have reasonable resolutions (read the next bullets, for example, unique values can get random suffix). &lt;a href=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/db-clean-options.png&quot; title=&quot;Choosing the right DB clean up strategy&quot;&gt;See the full comparison table here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Who wins? There’s no clear cut here. Both have their strength but also unpleasant implications. Both can result in great testing solution. Our recommended approach is cleaning up occasionally and accepting the non-deterministic DB state. This option resembles more the production environment, leads to more realistic tests and when done right will not show any flakiness. A bit of more sweat for more realism.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Using transactions can also take care to clean up the DB automatically. The test will pass an open transaction to the code under test and finally abort the transaction. It’s not recommended because the tests get more coupled to the code internals. It also generates cascading transactions model that complicates if the code already contains transactions. Lastly, it works only with particular DB that supports transactions ❌ &amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// After-all clean up (recommended)
// global-teardown.js
module.exports = async () =&amp;gt; {
  ...
  if (Math.ceil(Math.random() * 10) === 10) {
    await new OrderRepository().cleanup();
  }
};
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/global-teardown.js#L10-L13&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// After-each clean up
afterAll(async () =&amp;gt; {
  await new OrderRepository().cleanup();
});
// or
afterEach(async () =&amp;gt; {
  await new OrderRepository().cleanup();
});

&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/recipes/data-isolation/anti-pattern-data-isolation.test.js#L38-L43&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p&gt;🎦 Learn all of these topics in an &lt;a href=&quot;https://testjavascript.com&quot;&gt;online course by Yoni Goldberg&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 5. Add some randomness to unique fields&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#intermediate&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Commonly, tests will need to add records to columns with unique constraints. Since multiple tests are likely to add the same value, add a tiny random value as a suffix. Collisions between tests are more likely to occur if the DB is not cleaning up after each test (See bullet: Choose a clear data clean-up strategy). When the data is retained, the 1st tests execution will pass but the 2nd will fail due to a unique constrain violation. Adding randomness is a good practice also when the tables are being cleaned after each test - Without it, a test writer must read all the previous tests to ensure no similar names were chosen. When adding a random value, it’s better to keep the data descriptive and meaningful with a minor suffix. The test reader will surely learn more about the system this option {resident: ‘Washinton avenue 17st NY {23-554}’ comparing with this one {resident: ‘23-553’}. Tests are great example-based documentation, sadly the 2nd option above kills this opportunity. Keep the random suffix short, a combination of process id and the current time seconds is likely go be good enough.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Clean the DB after each test - Read above about some caveats that are attached with this option (See bullet: Choose a clear data clean-up strategy) ❌ &amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Adding a short unique suffix to the externalIdentifier enable the writer to ignore other tests
// and the need to clean the db after each test
test(&#39;When adding a new valid order, Then should get back 200 response&#39;, async () =&amp;gt; {
  //Arrange
  const orderToAdd = {
    userId: 1,
    productId: 2,
    mode: &#39;approved&#39;,
    externalIdentifier: `id-${getShortUnique()}`, //unique value
  };

  //Act
  const receivedAPIResponse = await axiosAPIClient.post(
    &#39;/order&#39;,
    orderToAdd
  );
  ...
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/recipes/data-isolation/data-isolation.test.js#L49-L63&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 6. Test also the response schema. Mostly when there are auto-generated fields&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#advanced&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;When it is impossible to assert for specific data, check for mandatory field existence and types. Sometimes, the response contains important fields with dynamic data that can’t be predicted when writing the test, like dates and incrementing numbers. If the API contract promises that these fields won’t be null and hold the right types, it’s imperative to test it. Most assertion libraries support checking types. If the response is small, check the return data and type together within the same assertion (see code example). One more option is to verify the entire response against an OpenAPI doc (Swagger). Most test runners have community extensions that validate API responses against their documentation.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; When app maintains JSON Schemas of common payloads, most test runners can validate a JSON object (i.e. the API response) against JSON Schema ✅ &amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;When adding a new valid order, Then should get back approval with 200 response&#39;, async () =&amp;gt; {
  ...
  //Assert
  expect(receivedAPIResponse).toMatchObject({
    status: 200,
    data: {
      id: expect.any(Number), // Any number satisfies this test
      mode: &#39;approved&#39;,
    },
  });
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/basic-tests.test.js#L107-L113&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 7. Install the DB schema using the same technique like production&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; In testing, use the same mechanism and code that installs the DB tables in production. Typically this will be a migration command (i.e., ORM) or .sql files invoked by a bash command. In principle, any production element that can be copied to testing is a blessing - It covers another layer of bugs. Should you mistakenly re-ceate an existing table or rename a non-existing column, this glitch will get caught during coding long before deployment. A recommended place to invoke the installation is within the global test setup - This way, there is no way to run the tests without its pre-requisites (see more in the section ‘Infrastructure Setup’)&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Manually copy a DB dump - This is a great way to find installation issues only in production and also complicate the developer testing experience ❌ &amp;nbsp; Automate a custom testing installation command (e.g., Docker with pre-defined tables, custom code) - Same caveats like previous paragraph ❌&amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Create the DB schema. Done once regardless of the amount of tests
module.exports = async () =&amp;gt; {
  console.time(&#39;global-setup&#39;);
  ...
  await npmCommandAsPromise([&#39;db:migrate&#39;]);
  ...
  // 👍🏼 We&#39;re ready
  console.timeEnd(&#39;global-setup&#39;);
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/example-application/test/global-setup.js#L31&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 8. Test for undesired side effects&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#advanced&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Check that the code under test doesn’t accidentally ״overdoing״ - modifying more data than it is intended to. For example, a code that is supposed to delete one record, might accidentally delete all the records. Since most tests assert only the outcome of specific records, it’s easy to miss these unplanned side effects. Testing this is a bit tricky but not too hard. At the beginning of a test, add the records that should be mutated—nothing unusual thus far. On top of this, add few more records than needed. In the end, assert that the records that were planned to be mutated are indeed mutated, but the rest are not. For example, when testing that the DELETE route works, add 2 records (!), try to delete one, ensure that it is gone, now also check that the second one is still there so the test deleted only what should be deleted (Credit: @giltayar)&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Some apply Repository/ORM level protection that ensures that one tenant is not accessing another tenant’s records. This is valuable but doesn’t cover all the scenarios ❌ &amp;nbsp; Writes integration tests that include the data access layer and a real DB - Check that the number of affected records (i.e., commonly returned by DB operations) is as expected. Writing tests against the entire DAL demands more effort thus should be considered based a specific project’s risk level ❌&amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    test(&quot;When deleting an existing order, Then should get a successful message&quot;, async () =&amp;gt; {
      // Arrange
      const orderToDelete = {
        userId: 1,
        productId: 2,
        externalIdentifier: `id-${getShortUnique()}`, //unique value
      };
      const {
        data: { id: orderToDeleteId },
      } = await axiosAPIClient.post(&quot;/order&quot;, orderToDelete);

      // Create another order to make sure the delete request deletes only the correct record
      const anotherOrder = {
        userId: 1,
        productId: 2,
        externalIdentifier: `id-${getShortUnique()}`, //unique value
      };

      nock(&quot;http://localhost/user/&quot;).get(`/1`).reply(200, {
        id: 1,
        name: &quot;John&quot;,
      });
      const {
        data: { id: anotherOrderId },
      } = await axiosAPIClient.post(&quot;/order&quot;, anotherOrder);

      // Act
      const deleteResponse = await axiosAPIClient.delete(`/order/${orderToDeleteId}`);
      const getOrderResponse = await axiosAPIClient.get(`/order/${anotherOrderId}`);

      // Assert
      expect(deleteResponse.status).toBe(204);
      // Assert anotherOrder still exists
      expect(getOrderResponse.status).toBe(200);
    });
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/master/recipes/data-isolation/data-isolation.test.js#L105-L139&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;This content is available also as a course or a workshop&lt;/h3&gt; 
&lt;p&gt;Find here the &lt;a href=&quot;https://testjavascript.com/&quot;&gt;same content as a course&lt;/a&gt;, online &lt;a href=&quot;https://www.eventbrite.com/e/advanced-nodejs-testing-2-meetings-tickets-162539230213&quot;&gt;workshop&lt;/a&gt;, free webinar (TBD, &lt;a href=&quot;https://goldbergyoni.com/news-letter/&quot;&gt;follow here&lt;/a&gt; for specific date), or invite &lt;a href=&quot;https://testjavascript.com/contact-2/&quot;&gt;a private workshop to your team&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Section 6: Message queues&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;⚪️ 1. Important: Use a fake MQ for the majority of testing&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#intermediate, #strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Create your own simplistic MQ fake and use it for the majority of testing. Real message queues are hard to purge between tests and will lead to flakiness. In principle, one should strive to use the same infrastructure like production - a real message queue container within a docker-compose (like done with the database). Unfortunately, MQ is a beast that is harder to tame. Queues must get cleaned between tests, (e.g., otherwise, test2 will fetch test1 message). Purging a queue is slow and not deterministic. When the purge/delete command arrives, some messages are in transit and the queue will not delete those until it get acknowledgment. Not only this, in a multi-process mode different processes will step on each others toes. A potential resolution is to create a dedicated queue per test, doing so will kill flakiness but at the same time will kill the performance. Real message queue is needed to test full flows and advanced features (e.g., retries) but is not convenient enough to serve as the primary technique during coding.&lt;/p&gt; 
&lt;p&gt;A better alternative is to use a simplistic fake that does nothing more than accepting messages, passing them to subscribers/consumers and emitting events when ack/delete happens. This fake will allow the tests to publish messages in-memory and subscribe to events to realize when interesting things happened (e.g., a message was acknowledged). Anyway, the primary mission statetement of the tests is to check how the &lt;em&gt;app&lt;/em&gt; behaves and not the well-trusted MQ product. With a fake, all is stored in-memory with simple flows and super-fast performance. Writing a fake like this should not last more than few hours (See code example here and below). The only downside is that it is not suitable to check multi-legs flow like dead-letter queues, retries, and the production configurations. Since these specific tests are slow by nature, they anyway should be executed rarely. Given all of this background, a recommended MQ testing strategy is to use simplistic-fake for the majority of the tests, mostly the tests that cover the app flows. Then to cover other risks, write just a few E2E tests over a production-like environment with a real message queue system.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/mq-comparison.png&quot; title=&quot;Which MQ to use for testing&quot;&gt;See comparison diagram here&lt;/a&gt;.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Stub the message queue listener (the code that subscribes to the queue). Within the test, Mock this listener code to emit new fake MQ messages. While doable, this is not recommended. The listener layer is responsible for catching errors and mapping the result to some MQ action like acknowledgment or rejection. Leave this layer within the test scope ❌ &amp;nbsp; Use a message queue in the cloud - This alternative will suffer from the same issues like real MQ, only it will be even slower ❌ &amp;nbsp;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// fake-mq.js, Simplistic implementation of MQ client for testing purposes
// Note: This is code is even more simplified, see full example in the example application
class FakeMessageQueueProvider extends EventEmitter {
  async ack() {
    this.emit(&#39;message-acknowledged&#39;, { event: &#39;message-acknowledged&#39; }); //Let the test know that this happened
  }

  async sendToQueue(queueName, message) {
    this.emit(&#39;message-sent&#39;, message);
  }

  async consume(queueName, messageHandler) {
    // We just save the callback (handler) locally, whenever a message will put into this queue
    // we will fire this handler
    this.messageHandler = messageHandler;
  }

  async pushMessageToQueue(queue, newMessage) {
    this.messageHandler(newMessage);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 2. Promisify the test. Avoid polling, indentation, and callbacks&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#advanced, #strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Design the message queue client/wrapper to throw events after every message handling. These events will let the test know when the operation is done, and the assertion part can start. Unlike API, message queue flows are hard to track. A typical test puts a message in the queue, some flow starts, and then at some &lt;em&gt;unknown&lt;/em&gt; point in time, it ends. The test is left hanging, not knowing when it can check for the new state. Some overcome this by polling the DB for the desired changes (slower and flaky). The first step in making this better is taking advantage of the fact that after every flow, the handling code is acknowledging the message. The test can tap on this event. Implementation-wise, the MQ client should throw an event when it gets confirmation/rejection. The test will subscribe and be informed. One more enhancement is left: Events by nature are implemented with callbacks (e.g., EventEmitter, EventTarget). Callbacks will put an indentation in the test and complicates the flow (i.e., subscribe and handle first, then act and put a message in a queue). A simple solution is to &lt;em&gt;promisify&lt;/em&gt; the event to achieve a super simple and flat test! See a code example below&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Poll until the new desired state (e.g. new DB record) is met - This isn’t horrible using the right helpers, just a bit slower and more complicated to write ❌ &amp;nbsp; Subscribe for events from the MQ itself, once a message was confirmed it’s the right time to assert - Not supported by all MQ products and also much slower ❌&amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// message-queue-client.js. The MQ client/wrapper is throwing an event when the message handler is done
  async consume(queueName, onMessageCallback) {
    await this.channel.consume(queueName, async (theNewMessage) =&amp;gt; {
      await onMessageCallback(theNewMessage);
      await this.ack(theNewMessage); // Handling is done, acknowledge the msg
      this.emit(&#39;message-acknowledged&#39;, eventDescription); // Let the tests know that all is over
    });
  }


&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// The test listen to the acknowledge/confirm message and knows when the operation is done 
test(&#39;Whenever a user deletion message arrive, then this user orders are also deleted&#39;, async  ()  =&amp;gt; {

// Arrange

// 👉🏼 HERE WE SHOULD add new orders to the system

const  getNextMQEvent =  once(MQClient, &quot;message-acknowledged&quot;); // Once function, part of Node, promisifies an event from EventEmitter

// Act
fakeMessageQueue.pushMessageToQueue(&#39;deleted-user&#39;, { id:  addedOrderId });  

// Assert
const  eventFromMessageQueue = await  getNextMQEvent; // This promise will resolve once the message handling is done

// Now we&#39;re certain that the operations is done and can start asserting for the results 👇 
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 3. Test message acknowledgment and ‘nack-cknowledgment’&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#advanced, #strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; This bullet is about the bread and butter of message queue testing. Act by putting a message in the queue, assert that it triggered the correct behavior (e.g., a record was added or deleted), then assert that the message was acknowledged or deleted (depends on the specific MQ product). Checking only the app logic, without reporting back to the MQ, is like testing against API without checking the HTTP response status. In the same spirit, also check for the opposite - Once a failure occurs, the message is not being acknowledged, so it will get back to the queue. These tests will stretch the efficiency of the app error handler - Any kind of exception should get caught and result in an adequate response to the MQ: Acknowledge or not&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Focus only on the app logic and state - Might miss scenarios where the MQ is not being informed and messages are re-processed again and again ❌ &amp;nbsp; Test this only using E2E tests using a real queue by asserting the number of messages - It’s harder to trigger various errors (e.g., data access layer is throwing an exception) from E2E level ❌ &amp;nbsp;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Putting a delete-order message, checking the the app processed this correctly AND acknowledged
test(&#39;Whenever a user deletion message arrive, then his orders are deleted&#39;, async  ()  =&amp;gt; {

// Arrange
// Add here a test record - A new order  of a specific user using the API

const  fakeMessageQueue = await  startFakeMessageQueue();
const  getNextMQEvent =  getNextMQConfirmation(fakeMessageQueue);

// Act
fakeMessageQueue.pushMessageToQueue(&#39;deleted-user&#39;, { id:  addedOrderId });

// Assert
const  eventFromMessageQueue = await  getNextMQEvent;
// Check here that the user&#39;s orders were deleted
expect(eventFromMessageQueue).toEqual([{ event:  &#39;message-acknowledged&#39; }]);
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 4. Test processing of messages batch&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;intermediate&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Feed the test queue with a batch of messages, and simulate failures in specific messages. In the realm of these failures, assert that some messages do succeed and the consumer survives to re-fetch more messages. A batch of messages will trigger different risks than a single message - It might be that the entire batch processing will crash, although only specific messages are invalid (others should have been processed successfully). The test expects the client code to recover and fetch more despite the failures, did it? . In streaming applications, a failure in a single message might lead to dis-acknowledgment of the entire sequence or to acknowledge the last (ignore the error). Whatever your strategy is, a test is needed. When using real-queues, the number of messages that are being put should be bigger than a single fetch size (e.g., prefetch in Rabbit, MaxNumberOfMessages in SQS) - Check that although the batch contains errors, the 2nd page is also being fetched and handled.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; One might assume that correct handling of a failure proves that the consumer is resilient - In reality, it might be that the consumer code stops when a single message fails and won’t re-connect to fetch more &amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; //docker-compose file 
 &lt;pre&gt;&lt;code&gt;version: &quot;3.6&quot;
services:
  db:
    image: postgres:11
    command: postgres
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=myuserpassword
      - POSTGRES_DB=shop
    ports:
      - &quot;5432:5432&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 5. Test for ‘poisoned’ messages&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#intermediate&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Put an invalid message in a queue and assert that hell does not break loose. More specifically, check that the consumer rejects the message, it stays alive, and a proper monitoring metric is fired. Poisoned messages are known MQ phenomena where some invalid/old messages in the queue cause the handler to crash. For example, when due to sender fault a wrong messages schema is stored in a queues and the consumer is not ready for this. Since the consumer crashes, the messages are being served again and again and can paralyze an app. One should not assume a perfect queue content rather embrace a resilient approach - The consuming code should validate each incoming message schema and stop early in case of failures. On the broker/server-side, retry limit should be explictly defined. When the limit is passed, messages should get redirected to the dead-letter queue (see dedicated bullet)&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Share Schemas between publishers and consumers so there are fewer conflicts - In a distributed architecture that is built by different teams, it’s not practical to count on a sanitized environment ❌ &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; //docker-compose file 
 &lt;pre&gt;&lt;code&gt;version: &quot;3.6&quot;
services:
  db:
    image: postgres:11
    command: postgres
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=myuserpassword
      - POSTGRES_DB=shop
    ports:
      - &quot;5432:5432&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 6. Test for idempotency&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#intermediate&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Simulate a scenario where the same message arrives twice ‘mistakenly,’ and assert that it doesn’t trigger an undesired state like the same operation done twice. A known limitation of most MQ is ‘at least once delivery’, which means that the same message might arrive more than one time. Running the same operation multiple times can be unbearable for some business flows - Consider a Payment flow where some fees are withdrawn from the user account more than once. Write a test that put some state, then put the same message twice and check that the final state is satisfactory (e.g., the app charged only once).&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Some MQ products can guarantee exactly-once delivery (usually demands sacrificing other factors like performance), this a viable option under some scenarios ✅ &amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; //docker-compose file 
 &lt;pre&gt;&lt;code&gt;version: &quot;3.6&quot;
services:
  db:
    image: postgres:11
    command: postgres
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=myuserpassword
      - POSTGRES_DB=shop
    ports:
      - &quot;5432:5432&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 7. Avoid a zombie process by testing connection failures&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#advanced, #strategic&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Fake a connection/subscription error and ensure that the client retries, and finally, it crashes. This specific failure is outstanding - If the code crashes at this phase, the process won’t consume any message and do nothing. You just got a zombie process, sad. Alternatively, should the process fire a metric and crash after few retries, it will increase the chances of the monitoring system realizing the anomaly. Some runtime infrastructure (.e.g, Kubernetes) can auto-heal this scenario by relocating failing processes to different machines or zones. This better treatment will happen only if the code exits, which like anything else, happens in reality if you test it. To achieve this test flow, simulate a connection failure using a stub or wrong MQ URL. You can also set a one-time failure (e.g., The ‘MQ.subscribe’ method fails only once) to ensure that the connection retries and succeeds finally.&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Put a try-catch, log the error, then test the logs - If the connection failed x times, it would keep failing. All the consumer processes will be alive, using resources for no reason instead of being moved and restarted by the infrastructure ❌ &amp;nbsp; &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; //docker-compose file 
 &lt;pre&gt;&lt;code&gt;version: &quot;3.6&quot;
services:
  db:
    image: postgres:11
    command: postgres
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=myuserpassword
      - POSTGRES_DB=shop
    ports:
      - &quot;5432:5432&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 8. top of development testing, write a few E2E tests&lt;/h3&gt; 
&lt;p&gt;🏷&amp;nbsp; &lt;strong&gt;Tags:&lt;/strong&gt; &lt;code&gt;#intermediate&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Write a few, no more than a few, tests against a production-like environment to realize configuration mismatches. All the tests that were described thus far are concerned with the app code. It is not unusual that the code seems fine, but production issues are triggered by MQ installation and configuration. For example, the code might expect a different queue/topic name than what was defined in production. There are many other configurations that affect the message flow like whether acknowledgement are needed and how many time to retry. Beyond configuration, some MQ functionality demands simulating an entire flow like message failing multiple times - These tests are slower by nature and better get separated from the core set of tests. Practically, create a dedicated file for these tests so they can be executed occasionally (e.g., during deployment smoke testing)&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &amp;nbsp; &lt;strong&gt;Alternatives:&lt;/strong&gt; Manual testing during deployment - The value of automation is probably evident at this point ❌&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;✏ &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; //docker-compose file 
 &lt;pre&gt;&lt;code&gt;version: &quot;3.6&quot;
services:
  db:
    image: postgres:11
    command: postgres
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=myuserpassword
      - POSTGRES_DB=shop
    ports:
      - &quot;5432:5432&quot;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;➡️ &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/raw/fb93b498d437aa6d0469485e648e74a6b9e719cc/example-application/test/docker-compose.yml#L1&quot;&gt;Full code here&lt;/a&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;br&gt; 
&lt;br&gt; 
&lt;h2&gt;&lt;strong&gt;Section 7: Development Workflow&lt;/strong&gt;&lt;/h2&gt; 
&lt;br&gt; 
&lt;h3&gt;⚪️ 1. Always START with integration/component tests&lt;/h3&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Regardless of the exact timing, the first set of tests to be written is component tests. Once a new sprint or feature is kicked off, the first details known to the developer are about the outcome of the component. At first, a developer can tell what the API/MQ might receive and what (roughly) type of information is returned. Naturally, testing this outer layer, the public interface and outcome, should come first. By doing so, developers are pushed to work with the end in mind - Define the goals before the implementation. Testing the inner functions with unit tests before the overall outcome is specified and understood does not make any sense. Surprisingly, even classic TDD books mention this workflow, see &lt;a href=&quot;https://miro.medium.com/max/700/0*c5ahAZusp87Bo6Io.jpg&quot;&gt;the double verification loop model&lt;/a&gt;. What about E2E tests? These usually focus on a broader problem than needed at first - Consequently, it should also get deferred.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 2. Run few E2E, selectively consider unit tests&lt;/h3&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; Always write few E2E tests on top of component tests. Based on the specific nature of the component, some unit tests might be needed as well. Though E2E means different things to different testers, in the context of a backend they represent tests that are done with live collaborators and on a real infrastructure. Therefore, they cover risks that are not covered by components tests - configuration issues, misunderstanding with 3rd party services, infrastructural issues and more. When then unit tests are needed? in the presence of none-trivial logic and algorithms. When having a single module with remarkable complexity, it’s easier to avoid the distraction coming from other parts by isolating the unit. This article greatly outlines (when unit tests shine)[https://blog.stevensanderson.com/2009/11/04/selective-unit-testing-costs-and-benefits/].&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 3. Cover features, not functions&lt;/h3&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;On why the main focus should be on features coverage and not on code. Code coverage is always misleading, knowing that the user flows are covered gives confidence that the important parts are checked. This bullet will get written in 2 days ⏱&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &lt;strong&gt;Alternatives:&lt;/strong&gt; This bullet will get written in 2 days ⏱&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 4. Write the tests before &lt;strong&gt;or during&lt;/strong&gt; the code, not after the fact&lt;/h3&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; On the benefit of having the tests written early. We have worked hard for DX so these tests can be a coding companion, empower the dev as she codes. You just spent 3 hours coding, achieved great new feature or part of it, not writing a test now means your work can get broken in the next 2-3 days of development. You lose the anti-regression perks that tests bring. Interchangeably, 2-3 tests can secure this work and alarm when this new features are broken. You may also consider writing some tests before the code as being advocate by TDD&lt;/p&gt; 
&lt;p&gt;This bullet will get written in 2 days ⏱’&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 5. Run the tests frequenly, if possible run continously in the background&lt;/h3&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; If permits, let the tests actively guard the coding process. put in watch mode or run every few minutes&lt;/p&gt; 
&lt;p&gt;On why a developers should not remember to run tests. This bullet will get written in 2 days ⏱&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &lt;strong&gt;Alternatives:&lt;/strong&gt; This bullet will get written in 2 days ⏱&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h3&gt;⚪️ 6. Consider testing the 5 known outcomes&lt;/h3&gt; 
&lt;p&gt;:white_check_mark: &lt;strong&gt;Do:&lt;/strong&gt; On the definition of done for integration testing. This bullet will get written in 2 days ⏱&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;👀 &lt;strong&gt;Alternatives:&lt;/strong&gt; This bullet will get written in 2 days ⏱&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;📊 Example application&lt;/h1&gt; 
&lt;p&gt;In this folder you may find a complete example of real-world like application, a tiny Orders component (e.g. e-commerce ordering), including tests. We recommend skimming through this examples before or during reading the best practices. Note that we intentionally kept the app small enough to ease the reader experience. On top of it, a ‘various-recipes’ folder exists with additional patterns and practices - This is your next step in the learning journey&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;🍪 Recipes&lt;/h1&gt; 
&lt;p&gt;More use cases and platforms. Each lives in its own folders:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/nestjs&quot;&gt;Nest.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fastify (coming soon 🗓 )&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/mocha&quot;&gt;Mocha&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/authentication&quot;&gt;Authentication&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/message-queue&quot;&gt;Message Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/doc-driven-contract-test&quot;&gt;Testing OpenAPI (Swagger)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Consumer-driven contract tests (coming soon 🗓 )&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/data-isolation&quot;&gt;Data isolation patterns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/db-optimization&quot;&gt;Optimized DB for testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/error-handling&quot;&gt;Error handling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices/tree/master/recipes/performance&quot;&gt;Performance&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;The Team&lt;/h2&gt; 
&lt;p&gt;The people who spent almost 1000 hours cumulatively to bring this content together&lt;/p&gt; 
&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;margin-right: 15px;&quot; src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/team/yoni.jpg&quot;&gt; 
&lt;h2&gt;&lt;b&gt;Yoni Goldberg&lt;/b&gt;&lt;/h2&gt; 
&lt;a href=&quot;https://twitter.com/goldbergyoni&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/team/twitter.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt; 
&lt;a href=&quot;https://goldbergyoni.com&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/team/website.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt; 
&lt;p&gt;Independent Node.js consultant who works with customers in the USA, Europe, and Israel on building large-scale Node.js applications. Author of &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices&quot;&gt;Node.js best practices&lt;/a&gt;. Holds testing workshops &lt;a href=&quot;https://testjavascript.com/contact-2/&quot;&gt;online, onsite&lt;/a&gt; and also a &lt;a href=&quot;https://testjavascript.com/&quot;&gt;recorded course&lt;/a&gt;.&lt;/p&gt; 
&lt;br&gt; 
&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;margin-right: 15px;&quot; src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/team/michael.jpg&quot;&gt; 
&lt;h2&gt;&lt;b&gt;Michael Solomon&lt;/b&gt;&lt;/h2&gt; 
&lt;a href=&quot;https://www.linkedin.com/in/michael-solomon-b3571a97/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/team/linkedin.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt; 
&lt;a href=&quot;https://github.com/mikicho&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/team/github.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/team/github-light.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt; 
&lt;p&gt;Started to program accidentally and fell in love. Strive for readable code. Chasing after perfection. Knowledge freak. Nothing is obvious. Backend developer.&lt;/p&gt; 
&lt;br&gt; 
&lt;br&gt; 
&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;margin-right: 15px;&quot; src=&quot;https://raw.githubusercontent.com/testjavascript/nodejs-integration-tests-best-practices/master/graphics/team/daniel.jpg&quot;&gt; 
&lt;h2&gt;&lt;b&gt;Daniel Gluskin&lt;/b&gt;&lt;/h2&gt; 
&lt;br&gt; 
&lt;p&gt;Enthusiastic Node.js and javscript developer. Always eager to learn and explore new technologies.&lt;/p&gt; 
&lt;br&gt;</description>
    </item>
    
    <item>
      <title>zero205/JD_tencent_scf</title>
      <link>https://github.com/zero205/JD_tencent_scf</link>
      <description>&lt;p&gt;京东JS脚本，支持青龙、云函数、elecV2P。低调使用，请勿fork！！！gitee备份地址：https://gitee.com/zero205/JD_tencent_scf&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;不要fork！！请建立私库!!!!请建立私库!!!!请建立私库!!!!&lt;/h2&gt; 
&lt;h2&gt;已经创建仓库的请点击仓库右上角Setting，拉到页面最下方，点击Change visibility，选择Make private，填入黑体仓库名称进行确认!&lt;/h2&gt; 
&lt;h2&gt;为防止账号再次遭到封禁失联,有条（科学）件（上网）的可以加入TG交流群&lt;/h2&gt; 
&lt;h2&gt;TG交流群：https://t.me/jd_zero205&lt;/h2&gt; 
&lt;h2&gt;TG通知频道：https://t.me/jd_zero205_tz&lt;/h2&gt; 
&lt;h2&gt;为防止仓库再次被封，本仓库仅保留腾讯云函数、elecV2P两种方式运行&lt;/h2&gt; 
&lt;h2&gt;不要fork！！请先自行创建自己的仓库&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;1.创建新仓库&lt;a href=&quot;https://github.com/new&quot;&gt;点击创建自己的仓库&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;2.点击&lt;code&gt;Import a repository&lt;/code&gt;，在&lt;code&gt;Your old repository’s clone URL&lt;/code&gt;处填入https://github.com/zero205/JD_tencent_scf&lt;/li&gt; 
 &lt;li&gt;3.然后在&lt;code&gt;Repository name&lt;/code&gt;处填写仓库名，选择&lt;code&gt;Private&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;4.最后点击最下方的&lt;code&gt;Begin import&lt;/code&gt;即可&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;自动同步本仓库脚本教程：&lt;a href=&quot;https://github.com/zero205/JD_tencent_scf/raw/main/backUp/reposync.md&quot;&gt;点此查看&lt;/a&gt;&lt;/h2&gt; 
&lt;h1&gt;使用教程（觉得有用的可以点个star :blush:）&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;【青龙】拉取仓库命令：&lt;code&gt;ql repo https://github.com/zero205/JD_tencent_scf.git &quot;jd_|jx_&quot; &quot;backUp&quot; &quot;^(jd|JD|JS)[^_]|USER|sendNotify|ZooFaker_Necklace&quot;&lt;/code&gt;&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;腾讯云函数部署【推荐】&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/backUp/tencentscf.md&quot;&gt;点此查看教程&lt;/a&gt;&lt;/p&gt; 
  &lt;/blockquote&gt; &lt;/li&gt; 
 &lt;li&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;&lt;a href=&quot;https://github.com/elecV2/elecV2P&quot;&gt;elecV2P&lt;/a&gt; 部署【备用】&lt;/p&gt; 
  &lt;/blockquote&gt; 
  &lt;ul&gt; 
   &lt;li&gt;安装教程：&lt;a href=&quot;https://github.com/elecV2/elecV2P-dei/raw/master/docs/01-overview.md&quot;&gt;点此查看&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;elecV2P京东CK、通知填写格式等相关补充说明：&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/backUp/elecV2P.md&quot;&gt;点此查看&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;获取京东cookie教程可参考：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/backUp/GetJdCookie.md&quot;&gt;浏览器获取京东cookie教程&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/backUp/GetJdCookie2.md&quot;&gt;插件获取京东cookie教程&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;AC运行常见问题&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;此处借用&lt;a href=&quot;https://github.com/RayWangQvQ&quot;&gt;RayWangQvQ&lt;/a&gt;大佬的教程&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RayWangQvQ/BiliBiliTool.Docs/raw/main/questions.md&quot;&gt;点击查看常见问题&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;特别声明:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;本仓库发布的Script项目中涉及的任何解锁和解密分析脚本，仅用于测试和学习研究，禁止用于商业用途，不能保证其合法性，准确性，完整性和有效性，请根据情况自行判断.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;lxk0301对任何脚本问题概不负责，包括但不限于由任何脚本错误导致的任何损失或损害.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;间接使用脚本的任何用户，包括但不限于建立VPS或在某些行为违反国家/地区法律或相关法规的情况下进行传播, lxk0301 对于由此引起的任何隐私泄漏或其他后果概不负责.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;请勿将Script项目的任何内容用于商业或非法目的，否则后果自负.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果任何单位或个人认为该项目的脚本可能涉嫌侵犯其权利，则应及时通知并提供身份证明，所有权证明，我们将在收到认证文件后删除相关脚本.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任何以任何方式查看此项目的人或直接或间接使用该Script项目的任何脚本的使用者都应仔细阅读此声明。lxk0301 保留随时更改或补充此免责声明的权利。一旦使用并复制了任何相关脚本或Script项目的规则，则视为您已接受此免责声明.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;您必须在下载后的24小时内从计算机或手机中完全删除以上内容.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;&lt;strong&gt;您使用或者复制了本仓库且本人制作的任何脚本，则视为&lt;code&gt;已接受&lt;/code&gt;此声明，请仔细阅读&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;邀请码互助&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/jd_get_share_code.js&quot;&gt;获取各类活动互助码脚本 jd_get_share_code.js&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/githubAction.md#%E4%BA%92%E5%8A%A9%E7%A0%81%E7%B1%BB%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&quot;&gt;邀请码使用规范&lt;/a&gt;(仅限云端)&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;食用方法&lt;/h2&gt; 
&lt;h3&gt;~~1. Docker~~&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;~~&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/docker&quot;&gt;部署方法&lt;/a&gt;~~&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/githubAction.md&quot;&gt;环境变量集合&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;获取京东cookie教程可参考：&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/backUp/GetJdCookie.md&quot;&gt;浏览器获取京东cookie教程&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zero205/JD_tencent_scf/main/backUp/GetJdCookie2.md&quot;&gt;插件获取京东cookie教程&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;京东APP扫码获取cookie(此种方式获取的cookie有效期为30天)(执行&lt;code&gt;node getJDCookie.js&lt;/code&gt;即可)&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;特别感谢(排名不分先后)：&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/NobyDa&quot;&gt;@NobyDa&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/chavyleung&quot;&gt;@chavyleung&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/liuxiaoyucc&quot;&gt;@liuxiaoyucc&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Zero-S1&quot;&gt;@Zero-S1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/uniqueque&quot;&gt;@uniqueque&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/nzw9314&quot;&gt;@nzw9314&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/JDHelloWorld&quot;&gt;@JDHelloWorld&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/smiek2221&quot;&gt;@smiek2221&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/star261&quot;&gt;@star261&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Wenmoux&quot;&gt;@Wenmoux&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Tsukasa007&quot;&gt;@Tsukasa007&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/Aaron&quot;&gt;@Aaron&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>kimytsc/covid-rest-vaccine-macro</title>
      <link>https://github.com/kimytsc/covid-rest-vaccine-macro</link>
      <description>&lt;p&gt;잔여백신 예약 스크립트&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;covid-rest-vaccine-macro &lt;a href=&quot;https://hits.seeyoufarm.com&quot;&gt;&lt;img src=&quot;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fkimytsc%2Fcovid-rest-vaccine-macro&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&quot; alt=&quot;Hits&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;잔여백신 예약을 자동으로 시도해주는 스크립트입니다.&lt;/p&gt; 
&lt;h2&gt;네이버 잔여백신 예약&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/kimytsc/covid-rest-vaccine-macro/tree/main/naver&quot;&gt;네이버 잔여백신 예약 README.md&lt;/a&gt; 참조&lt;/h3&gt; 
&lt;h2&gt;카카오 잔여백신 예약&lt;/h2&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/kimytsc/covid-rest-vaccine-macro/tree/main/kakao&quot;&gt;카카오 잔여백신 예약 README.md&lt;/a&gt; 참조&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>vikrum/kidpix</title>
      <link>https://github.com/vikrum/kidpix</link>
      <description>&lt;p&gt;JSKIDPIX v1.0.2021&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jskidpix ✨ https://kidpix.app/&lt;/h1&gt; 
&lt;p&gt;JS Kid Pix / Kid Pix 1.0 was released in to the public domain and this is an HTML/JS reimplementation.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/291215/128231176-01aa7d27-db82-4b76-8d53-fb987e1fea57.png&quot; alt=&quot;jskidpix&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;Guide&lt;/h3&gt; 
&lt;p&gt;Just like the original Kid Pix, there’s no guide—have fun! Most of the tools support Shift (^) to enlarge. There are a handful of hidden tool features behind various modifier keys (⌘, ⌥, ⇧). The modifier keys can also be combined. Enjoy! :)&lt;/p&gt; 
&lt;h3&gt;TODO&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;If anyone has any idea what the original Kid Pix “3-d” brush is doing with the dithering, drop me a note. I couldn’t intuit it :(&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/291215/128236489-32a56b21-17e9-4b4a-b631-a987472127c4.png&quot; alt=&quot;Screen Shot 2021-08-04 at 11 39 33 AM&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A few animations and sounds still need to be filled in.&lt;/li&gt; 
 &lt;li&gt;Safari/iOS sounds need pre-loading.&lt;/li&gt; 
 &lt;li&gt;Move color selector elsewhere if screen is too small.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Th3Wall/Fakeflix</title>
      <link>https://github.com/Th3Wall/Fakeflix</link>
      <description>&lt;p&gt;Not the usual clone that you can find on the web.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;Fakeflix&lt;/h1&gt; 
&lt;h5 align=&quot;center&quot;&gt;Not the usual clone that you can find on the web.&lt;/h5&gt;
&lt;br&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/Fakeflix_readme.png&quot; alt=&quot;Image of Fakeflix Project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;https://user-images.githubusercontent.com/25078541/123811962-01474580-d8f4-11eb-83ba-66cded3f321f.mp4&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;🎯 About&lt;/h2&gt; 
&lt;p&gt;I have started this project with the purpose of learning how to structure a Web App of a mid-level complexity integrating the Redux logic.&lt;br&gt; I’ve tried to replicate the original layout as much as possible and I’ve also made some improvements in some sections inserting route animations and micro-interactions. I’ve also inserted a really close clone of Netflix’s original splash animation (forked from a famous &lt;a href=&quot;https://codepen.io/claudio_bonfati/pen/mdryxPv&quot;&gt;codepen from Claudio Bonfati&lt;/a&gt;), made entirely with CSS, as well as the play animation. I have then sampled the original Netflix “ta-duummm” sound and I made it play along with the two animations.&lt;br&gt; I put a lot of effort into it and I hope that you could like it.&lt;br&gt;&lt;br&gt; The Web App redirects you to an authentication page, in which you can choose to sign up or to sign in: you can sign in with your custom account or with your Google account. Once you are logged in and after the splash animation, you will land on the homepage, in which you can find a mix of movies and series divided into rows.&lt;br&gt; Each row represents a movie/series category: you can click on it and you will be redirected to the selected category, a page that loads thousands of movies with an infinite scroll. You can also navigate to the movies page, series page, new &amp;amp; popular page (that contains the upcoming movies/series and the most popular ones) or you can navigate to your favorites page.&lt;br&gt; You can add/remove movies/series through the plus and minus buttons that you can find hovering each poster or opening a single movie’s detail modal. If you click on the play button you can enjoy a custom CSS-only play animation with Fakeflix’s brand name.&lt;br&gt; You have also the option to search through TMDB’s catalogue using the search functionality inside the fixed navbar: you can search by movie name, actor or movie director.&lt;br&gt;&lt;br&gt; Go try it and please let me know if you enjoyed it with a ⭐️, I would appreciate it a lot. &lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;▶️ Demo&lt;/h2&gt; 
&lt;p&gt;Here you can find the demo links:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fakeflix-clone.vercel.app/&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fakeflix-clone.netlify.app/&quot;&gt;Netlify&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Test credentials (for lazy users 😓)&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Email: fakeflixuser@test.com&lt;br&gt; Password: FakeflixTest&lt;br&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;I have also added a button that lets you sign in anonymously.&lt;/p&gt; 
&lt;h2&gt;:sparkles: Features&lt;/h2&gt; 
&lt;p&gt;:heavy_check_mark: &amp;nbsp;&amp;nbsp;Display movies and series, old and upcoming, also from the real Netflix&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Category related page with infinite scroll&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Search by title, actor, movie director&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Add/Remove to/from “My list” functionality&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Detail modal with extra informations about the selected movie/series&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Customized splash animation (credits: &lt;a href=&quot;https://codepen.io/claudio_bonfati/pen/mdryxPv&quot;&gt;Claudio Bonfati’s pen&lt;/a&gt;) with characteristic Netflix sound&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Play animation with characteristic Netflix sound&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Google login&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;User Sign In &amp;amp; User Sign Up&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Use of React hooks and custom hooks&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Favourites list persistence (session storage)&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Responsive layout&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Swipeable movies list&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Loading skeletons&lt;br&gt; :heavy_check_mark: &amp;nbsp;&amp;nbsp;Route animations and micro-interactions (handled with Framer Motion)&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;:rocket: Technologies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.themoviedb.org/&quot;&gt;TMDb API’s&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;React Hooks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://react-hook-form.com/&quot;&gt;React Hooks Form&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactrouter.com/web/guides/quick-start&quot;&gt;React Router&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://redux-saga.js.org/&quot;&gt;Redux Saga&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rt2zz/redux-persist&quot;&gt;Redux Persist&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LogRocket/redux-logger&quot;&gt;Redux Logger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reduxjs/reselect&quot;&gt;Reselect&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sass-lang.com/&quot;&gt;SCSS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiperjs.com/react&quot;&gt;SwiperJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.framer.com/motion/&quot;&gt;Framer Motion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://react-icons.github.io/react-icons/&quot;&gt;React Icons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.netlify.com&quot;&gt;Netlify&lt;/a&gt; (have a look below) and &lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt; for the deploy and CI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Netlify deploy &amp;amp; configuration&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.netlify.com/sites/fakeflixapp/deploys&quot;&gt;&lt;img src=&quot;https://api.netlify.com/api/v1/badges/14a32bbb-d899-445d-8fa6-8bed739c0296/deploy-status&quot; alt=&quot;Netlify Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Deploy configuration steps&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Connect your GitHub account to Netlify&lt;/li&gt; 
 &lt;li&gt;Select the project&lt;/li&gt; 
 &lt;li&gt;In Settings → Build &amp;amp; Deploy → Set &lt;strong&gt;Build command&lt;/strong&gt; to : &lt;strong&gt;&lt;em&gt;npm run build&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;In Settings → Build &amp;amp; Deploy → Set &lt;strong&gt;Publish directory&lt;/strong&gt; to : &lt;strong&gt;&lt;em&gt;build&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;In Settings → Build &amp;amp; Deploy → Set &lt;strong&gt;Environment variables&lt;/strong&gt; → Click on &lt;strong&gt;Edit variables&lt;/strong&gt; and add yours (ie: TMBd’s API key, Firebase configuration). &lt;br&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;📸 Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Sign In&lt;/strong&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/screenshots/Fakeflix_SignIn.jpg&quot; alt=&quot;Screenshot of Fakeflix Sign In&quot;&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Sign Up&lt;/strong&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/screenshots/Fakeflix_SignUp.jpg&quot; alt=&quot;Screenshot of Fakeflix Sign Up&quot;&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Homepage&lt;/strong&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/screenshots/Fakeflix_Home.jpg&quot; alt=&quot;Screenshot of Fakeflix Homepage&quot;&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Modal Detail&lt;/strong&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/screenshots/Fakeflix_DetailModal.jpg&quot; alt=&quot;Screenshot of Fakeflix Modal Detail&quot;&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Mobile Experience&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;https://user-images.githubusercontent.com/25078541/123543831-b8a35700-d750-11eb-84dc-b53e5a9a997a.mp4&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;strong&gt;Desktop Experience&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;https://user-images.githubusercontent.com/25078541/123811962-01474580-d8f4-11eb-83ba-66cded3f321f.mp4&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;👨🏻‍💻 Run Locally&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  git clone https://github.com/Th3Wall/Fakeflix
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to the project directory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  cd fakeflix
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install dependencies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Create a .env file&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Request an API key from TMDB and them add it to the .env file&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;REACT_APP_API_KEY=REACT_APP_API_KEY
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Create a project inside Google Firebase and export the configuration&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the configuration inside the .env file created previously&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;REACT_APP_FIREBASE_API_KEY=REACT_APP_FIREBASE_API_KEY
REACT_APP_FIREBASE_AUTH_DOMAIN=REACT_APP_FIREBASE_AUTH_DOMAIN
REACT_APP_FIREBASE_PROJECT_ID=REACT_APP_FIREBASE_PROJECT_ID
REACT_APP_FIREBASE_STORAGE_BUCKET=REACT_APP_FIREBASE_STORAGE_BUCKET
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=REACT_APP_FIREBASE_MESSAGING_SENDER_ID
REACT_APP_FIREBASE_APP_ID=REACT_APP_FIREBASE_APP_ID
REACT_APP_FIREBASE_MEASUREMEMT_ID=REACT_APP_FIREBASE_MEASUREMEMT_ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Start the server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;:white_check_mark: Requirements&lt;/h2&gt; 
&lt;p&gt;Before starting :checkered_flag:, you need to have &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; installed. &lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;📝 License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Th3Wall/Fakeflix/raw/main/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/th3wall&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&quot; height=&quot;41&quot; width=&quot;174&quot; alt=&quot;Buy Me A Coffee&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hypeserver/react-date-range</title>
      <link>https://github.com/hypeserver/react-date-range</link>
      <description>&lt;p&gt;A React component for choosing dates and date ranges.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-date-range&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-date-range&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/react-date-range&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/l/react-date-range&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/react-date-range&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dw/react-date-range&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/hypeserver&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/hypeserver&quot; alt=&quot;sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A date library agnostic React component for choosing dates and date ranges. Uses &lt;a href=&quot;http://date-fns.org/&quot;&gt;date-fns&lt;/a&gt; for date operations.&lt;/p&gt; 
&lt;h3&gt;Why should you use &lt;code&gt;react-date-range&lt;/code&gt;?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stateless date operations&lt;/li&gt; 
 &lt;li&gt;Highly configurable&lt;/li&gt; 
 &lt;li&gt;Multiple range selection&lt;/li&gt; 
 &lt;li&gt;Based on native js dates&lt;/li&gt; 
 &lt;li&gt;Drag n Drop selection&lt;/li&gt; 
 &lt;li&gt;Keyboard friendly&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Live Demo :&lt;/strong&gt; &lt;a href=&quot;http://hypeserver.github.io/react-date-range&quot;&gt;http://hypeserver.github.io/react-date-range&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/hypeserver/react-date-range/master/demo/ss.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm install --save react-date-range
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This plugin expects &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;date-fns&lt;/code&gt; as peerDependencies, It means that you need to install them in your project folder.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install --save react date-fns
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;You need to import skeleton and theme styles first.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &#39;react-date-range/dist/styles.css&#39;; // main style file
import &#39;react-date-range/dist/theme/default.css&#39;; // theme css file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;DatePicker&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Calendar } from &#39;react-date-range&#39;;

class MyComponent extends Component {
  handleSelect(date){
    console.log(date); // native Date object
  }
  render(){
    return (
      &amp;lt;Calendar
        date={new Date()}
        onChange={this.handleSelect}
      /&amp;gt;
    )
  }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;code&gt;DateRangePicker / DateRange&lt;/code&gt;&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { DateRangePicker } from &#39;react-date-range&#39;;

class MyComponent extends Component {
  handleSelect(ranges){
    console.log(ranges);
    // {
    //   selection: {
    //     startDate: [native Date Object],
    //     endDate: [native Date Object],
    //   }
    // }
  }
  render(){
    const selectionRange = {
      startDate: new Date(),
      endDate: new Date(),
      key: &#39;selection&#39;,
    }
    return (
      &amp;lt;DateRangePicker
        ranges={[selectionRange]}
        onChange={this.handleSelect}
      /&amp;gt;
    )
  }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Options&lt;/h3&gt; 
&lt;p&gt;Property | type | Default Value | Description ———————————––|———–|——————|—————————————————————– locale | Object | enUS from locale | you can view full list from &lt;a href=&quot;https://github.com/hypeserver/react-date-range/tree/next/src/locale/index.js&quot;&gt;here&lt;/a&gt;. Locales directly exported from &lt;a href=&quot;https://date-fns.org/docs/I18n#supported-languages&quot;&gt;&lt;code&gt;date-fns/locales&lt;/code&gt;&lt;/a&gt;. className | String | | wrapper classname months | Number | 1 | rendered month count showSelectionPreview | Boolean | true | show preview on focused/hovered dates showMonthAndYearPickers | Boolean | true | show select tags for month and year on calendar top, if false it will just display the month and year rangeColors | String[] | | defines color for selection preview. shownDate | Date | | initial focus date minDate | Date | | defines minimum date. Disabled earlier dates maxDate | Date | | defines maximum date. Disabled later dates direction | String | ‘vertical’ | direction of calendar months. can be &lt;code&gt;vertical&lt;/code&gt; or &lt;code&gt;horizontal&lt;/code&gt; disabledDates | Date[] | [] | dates that are disabled disabledDay | Func | | predicate function that disable day fn(date: Date) scroll | Object | { enabled: false }| infinite scroll behaviour configuration. Check out &lt;a href=&quot;https://raw.githubusercontent.com/hypeserver/react-date-range/master/#infinite-scrolled-mode&quot;&gt;Infinite Scroll&lt;/a&gt; section showMonthArrow | Boolean | true | show/hide month arrow button navigatorRenderer | Func | | renderer for focused date navigation area. fn(currentFocusedDate: Date, changeShownDate: func, props: object) ranges | *Object[] | [] | Defines ranges. array of range object moveRangeOnFirstSelection(DateRange) | Boolean | false | move range on startDate selection. Otherwise endDate will replace with startDate unless &lt;code&gt;retainEndDateOnFirstSelection&lt;/code&gt; is set to true. retainEndDateOnFirstSelection(DateRange) | Boolean | false | Retain end date when the start date is changed, unless start date is later than end date. Ignored if &lt;code&gt;moveRangeOnFirstSelection&lt;/code&gt; is set to true. onChange(Calendar) | Func | | callback function for date changes. fn(date: Date) onChange(DateRange) | Func | | callback function for range changes. fn(changes). changes contains changed ranges with new &lt;code&gt;startDate&lt;/code&gt;/&lt;code&gt;endDate&lt;/code&gt; properties. color(Calendar) | String | &lt;code&gt;#3d91ff&lt;/code&gt; | defines color for selected date in Calendar date(Calendar) | Date | | date value for Calendar showDateDisplay(DateRange) | Boolean | true | show/hide selection display row. Uses &lt;code&gt;dateDisplayFormat&lt;/code&gt; for formatter onShownDateChange(DateRange,Calendar)| Function | | Callback function that is called when the shown date changes initialFocusedRange(DateRange) | Object | | Initial value for focused range. See &lt;code&gt;focusedRange&lt;/code&gt; for usage. focusedRange(DateRange) | Object | | It defines which range and step are focused. Common initial value is &lt;code&gt;[0, 0]&lt;/code&gt;; first value is index of ranges, second one is which step on date range(startDate or endDate). onRangeFocusChange(DateRange) | Object | | Callback function for focus changes preview(DateRange) | Object | | displays a preview range and overwrite DateRange’s default preview. Expected shape: &lt;code&gt;{ startDate: Date, endDate: Date, color: String }&lt;/code&gt; showPreview(DateRange) | bool | true | visibility of preview editableDateInputs(Calendar) | bool | false | whether dates can be edited in the Calendar’s input fields dragSelectionEnabled(Calendar) | bool | true | whether dates can be selected via drag n drop onPreviewChange(DateRange) | Object | | Callback function for preview changes dateDisplayFormat | String | &lt;code&gt;MMM d, yyyy&lt;/code&gt; | selected range preview formatter. Check out &lt;a href=&quot;https://date-fns.org/docs/format&quot;&gt;date-fns’s format option&lt;/a&gt; dayDisplayFormat | String | &lt;code&gt;d&lt;/code&gt; | selected range preview formatter. Check out &lt;a href=&quot;https://date-fns.org/docs/format&quot;&gt;date-fns’s format option&lt;/a&gt; weekdayDisplayFormat | String | &lt;code&gt;E&lt;/code&gt; | selected range preview formatter. Check out &lt;a href=&quot;https://date-fns.org/docs/format&quot;&gt;date-fns’s format option&lt;/a&gt; monthDisplayFormat | String | &lt;code&gt;MMM yyyy&lt;/code&gt; | selected range preview formatter. Check out &lt;a href=&quot;https://date-fns.org/docs/format&quot;&gt;date-fns’s format option&lt;/a&gt; weekStartsOn | Number | | Whether the week start day that comes from the locale will be overriden. Default value comes from your locale, if no local is specified, note that default locale is enUS startDatePlaceholder | String | &lt;code&gt;Early&lt;/code&gt; | Start Date Placeholder endDatePlaceholder | String | &lt;code&gt;Continuous&lt;/code&gt; | End Date Placeholder fixedHeight | Boolean | false | Since some months require less than 6 lines to show, by setting this prop, you can force 6 lines for all months. renderStaticRangeLabel(&lt;code&gt;DefinedRange&lt;/code&gt;)| Function | | Callback function to be triggered for the static range configurations that have &lt;code&gt;hasCustomRendering: true&lt;/code&gt; on them. Instead of rendering &lt;code&gt;staticRange.label&lt;/code&gt;, return value of this callback will be rendered. staticRanges(&lt;code&gt;DefinedRange&lt;/code&gt;, &lt;code&gt;DateRangePicker&lt;/code&gt;) | Array | &lt;a href=&quot;https://github.com/hypeserver/react-date-range/raw/master/src/defaultRanges.js&quot;&gt;default preDefined ranges&lt;/a&gt; | - inputRanges(&lt;code&gt;DefinedRange&lt;/code&gt;, &lt;code&gt;DateRangePicker&lt;/code&gt;) | Array | &lt;a href=&quot;https://github.com/hypeserver/react-date-range/raw/master/src/defaultRanges.js&quot;&gt;default input ranges&lt;/a&gt; | - ariaLabels | Object | {} | inserts aria-label to inner elements dayContentRenderer | Function | null | Function to customize the rendering of Calendar Day. given a date is supposed to return what to render.&lt;/p&gt; 
&lt;p&gt;*shape of range:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt; {
   startDate: PropTypes.object,
   endDate: PropTypes.object,
   color: PropTypes.string,
   key: PropTypes.string,
   autoFocus: PropTypes.bool,
   disabled: PropTypes.bool,
   showDateDisplay: PropTypes.bool,
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;**shape of ariaLabels:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt; {
   // The key of dateInput should be same as key in range.
   dateInput: PropTypes.objectOf(
     PropTypes.shape({
       startDate: PropTypes.string,
       endDate: PropTypes.string
     })
   ),
   monthPicker: PropTypes.string,
   yearPicker: PropTypes.string,
   prevButton: PropTypes.string,
   nextButton: PropTypes.string,
 }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Infinite Scrolled Mode&lt;/h4&gt; 
&lt;p&gt;To enable infinite scroll set &lt;code&gt;scroll={{enabled: true}}&lt;/code&gt; basically. Infinite scroll feature is affected by &lt;code&gt;direction&lt;/code&gt;(rendering direction for months) and &lt;code&gt;months&lt;/code&gt;(for rendered months count) props directly. If you prefer, you can overwrite calendar sizes with &lt;code&gt;calendarWidth&lt;/code&gt;/&lt;code&gt;calendarHeight&lt;/code&gt; or each month’s height/withs with &lt;code&gt;monthWidth&lt;/code&gt;/&lt;code&gt;monthHeight&lt;/code&gt;/&lt;code&gt;longMonthHeight&lt;/code&gt; at &lt;code&gt;scroll&lt;/code&gt; prop.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  // shape of scroll prop
  scroll: {
    enabled: PropTypes.bool,
    monthHeight: PropTypes.number,
    longMonthHeight: PropTypes.number, // some months has 1 more row than others
    monthWidth: PropTypes.number, // just used when direction=&quot;horizontal&quot;
    calendarWidth: PropTypes.number, // defaults monthWidth * months
    calendarHeight: PropTypes.number, // defaults monthHeight * months
  }),
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Release workflow&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Merge everything that needs to be in the release to master&lt;/li&gt; 
 &lt;li&gt;Open a new release PR than: 
  &lt;ul&gt; 
   &lt;li&gt;bumps version to appropriate one &amp;lt;new_version&amp;gt;&lt;/li&gt; 
   &lt;li&gt;Update CHANGELOG.md&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Make sure the demo and important features are working as expected&lt;/li&gt; 
 &lt;li&gt;After merging, tag the master commit with &lt;code&gt;release/&amp;lt;new_version&amp;gt;&lt;/code&gt; and let Github Action handle publishing&lt;/li&gt; 
 &lt;li&gt;= Profit 🙈&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;TODOs&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make mobile friendly (integrate tap and swipe actions)&lt;/li&gt; 
 &lt;li&gt;Add tests&lt;/li&gt; 
 &lt;li&gt;Improve documentation&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>nodejs/undici</title>
      <link>https://github.com/nodejs/undici</link>
      <description>&lt;p&gt;An HTTP/1.1 client, written from scratch for Node.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;undici&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nodejs/undici/actions/workflows/nodejs.yml&quot;&gt;&lt;img src=&quot;https://github.com/nodejs/undici/actions/workflows/nodejs.yml/badge.svg?sanitize=true&quot; alt=&quot;Node CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://standardjs.com/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat&quot; alt=&quot;js-standard-style&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://badge.fury.io/js/undici&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/undici.svg?sanitize=true&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/nodejs/undici&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/nodejs/undici/branch/main/graph/badge.svg?token=yZL6LtXkOA&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A HTTP/1.1 client, written from scratch for Node.js.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Undici means eleven in Italian. 1.1 -&amp;gt; 11 -&amp;gt; Eleven -&amp;gt; Undici. It is also a Stranger Things reference.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Have a question about using Undici? Open a &lt;a href=&quot;https://github.com/nodejs/undici/discussions/new&quot;&gt;Q&amp;amp;A Discussion&lt;/a&gt; or join our official OpenJS &lt;a href=&quot;https://openjs-foundation.slack.com/archives/C01QF9Q31QD&quot;&gt;Slack&lt;/a&gt; channel.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;npm i undici
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Benchmarks&lt;/h2&gt; 
&lt;p&gt;The benchmark is a simple &lt;code&gt;hello world&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/benchmarks/benchmark.js&quot;&gt;example&lt;/a&gt; using a number of unix sockets (connections) with a pipelining depth of 10 running on Node 16. The benchmarks below have the &lt;a href=&quot;https://github.com/WebAssembly/simd&quot;&gt;simd&lt;/a&gt; feature enabled.&lt;/p&gt; 
&lt;h3&gt;Connections 1&lt;/h3&gt; 
&lt;p&gt;| Tests | Samples | Result | Tolerance | Difference with slowest | |———————|———|—————|———–|———————––| | http - no keepalive | 15 | 4.63 req/sec | ± 2.77 % | - | | http - keepalive | 10 | 4.81 req/sec | ± 2.16 % | + 3.94 % | | undici - stream | 25 | 62.22 req/sec | ± 2.67 % | + 1244.58 % | | undici - dispatch | 15 | 64.33 req/sec | ± 2.47 % | + 1290.24 % | | undici - request | 15 | 66.08 req/sec | ± 2.48 % | + 1327.88 % | | undici - pipeline | 10 | 66.13 req/sec | ± 1.39 % | + 1329.08 % |&lt;/p&gt; 
&lt;h3&gt;Connections 50&lt;/h3&gt; 
&lt;p&gt;| Tests | Samples | Result | Tolerance | Difference with slowest | |———————|———|——————|———–|———————––| | http - no keepalive | 50 | 3546.49 req/sec | ± 2.90 % | - | | http - keepalive | 15 | 5692.67 req/sec | ± 2.48 % | + 60.52 % | | undici - pipeline | 25 | 8478.71 req/sec | ± 2.62 % | + 139.07 % | | undici - request | 20 | 9766.66 req/sec | ± 2.79 % | + 175.39 % | | undici - stream | 15 | 10109.74 req/sec | ± 2.94 % | + 185.06 % | | undici - dispatch | 25 | 10949.73 req/sec | ± 2.54 % | + 208.75 % |&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { request } from &#39;undici&#39;

const {
  statusCode,
  headers,
  trailers,
  body
} = await request(&#39;http://localhost:3000/foo&#39;)

console.log(&#39;response received&#39;, statusCode)
console.log(&#39;headers&#39;, headers)

for await (const data of body) {
  console.log(&#39;data&#39;, data)
}

console.log(&#39;trailers&#39;, trailers)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;a href=&quot;https://fetch.spec.whatwg.org/#body-mixin&quot;&gt;the body mixin from the Fetch Standard&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { request } from &#39;undici&#39;

const {
  statusCode,
  headers,
  trailers,
  body
} = await request(&#39;http://localhost:3000/foo&#39;)

console.log(&#39;response received&#39;, statusCode)
console.log(&#39;headers&#39;, headers)
console.log(&#39;data&#39;, await body.json())
console.log(&#39;trailers&#39;, trailers)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Common API Methods&lt;/h2&gt; 
&lt;p&gt;This section documents our most commonly used API methods. Additional APIs are documented in their own files within the &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/&quot;&gt;docs&lt;/a&gt; folder and are accessible via the navigation list on the left side of the docs site.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;undici.request([url, options]): Promise&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; &lt;code&gt;string | URL | object&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#parameter-requestoptions&quot;&gt;&lt;code&gt;RequestOptions&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;dispatcher&lt;/strong&gt; &lt;code&gt;Dispatcher&lt;/code&gt; - Default: &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/#undicigetglobaldispatcherdispatcher&quot;&gt;getGlobalDispatcher&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt; &lt;code&gt;String&lt;/code&gt; - Default: &lt;code&gt;PUT&lt;/code&gt; if &lt;code&gt;options.body&lt;/code&gt;, otherwise &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;maxRedirections&lt;/strong&gt; &lt;code&gt;Integer&lt;/code&gt; - Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Returns a promise with the result of the &lt;code&gt;Dispatcher.request&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;Calls &lt;code&gt;options.dispatcher.request(options)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#dispatcherrequestoptions-callback&quot;&gt;Dispatcher.request&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;undici.stream([url, options, ]factory): Promise&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; &lt;code&gt;string | URL | object&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#parameter-streamoptions&quot;&gt;&lt;code&gt;StreamOptions&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;dispatcher&lt;/strong&gt; &lt;code&gt;Dispatcher&lt;/code&gt; - Default: &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/#undicigetglobaldispatcherdispatcher&quot;&gt;getGlobalDispatcher&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt; &lt;code&gt;String&lt;/code&gt; - Default: &lt;code&gt;PUT&lt;/code&gt; if &lt;code&gt;options.body&lt;/code&gt;, otherwise &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;maxRedirections&lt;/strong&gt; &lt;code&gt;Integer&lt;/code&gt; - Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;factory&lt;/strong&gt; &lt;code&gt;Dispatcher.stream.factory&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Returns a promise with the result of the &lt;code&gt;Dispatcher.stream&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;Calls &lt;code&gt;options.dispatcher.stream(options, factory)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#dispatcherstream&quot;&gt;Dispatcher.stream&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;undici.pipeline([url, options, ]handler): Duplex&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; &lt;code&gt;string | URL | object&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#parameter-pipelineoptions&quot;&gt;&lt;code&gt;PipelineOptions&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;dispatcher&lt;/strong&gt; &lt;code&gt;Dispatcher&lt;/code&gt; - Default: &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/#undicigetglobaldispatcherdispatcher&quot;&gt;getGlobalDispatcher&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt; &lt;code&gt;String&lt;/code&gt; - Default: &lt;code&gt;PUT&lt;/code&gt; if &lt;code&gt;options.body&lt;/code&gt;, otherwise &lt;code&gt;GET&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;maxRedirections&lt;/strong&gt; &lt;code&gt;Integer&lt;/code&gt; - Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;handler&lt;/strong&gt; &lt;code&gt;Dispatcher.pipeline.handler&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Returns: &lt;code&gt;stream.Duplex&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Calls &lt;code&gt;options.dispatch.pipeline(options, handler)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#dispatcherpipeline&quot;&gt;Dispatcher.pipeline&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;undici.connect([url, options]): Promise&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Starts two-way communications with the requested resource using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT&quot;&gt;HTTP CONNECT&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; &lt;code&gt;string | URL | object&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#parameter-connectoptions&quot;&gt;&lt;code&gt;ConnectOptions&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;dispatcher&lt;/strong&gt; &lt;code&gt;Dispatcher&lt;/code&gt; - Default: &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/#undicigetglobaldispatcherdispatcher&quot;&gt;getGlobalDispatcher&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;maxRedirections&lt;/strong&gt; &lt;code&gt;Integer&lt;/code&gt; - Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;callback&lt;/strong&gt; &lt;code&gt;(err: Error | null, data: ConnectData | null) =&amp;gt; void&lt;/code&gt; (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Returns a promise with the result of the &lt;code&gt;Dispatcher.connect&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;Calls &lt;code&gt;options.dispatch.connect(options)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#dispatcherconnect&quot;&gt;Dispatcher.connect&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;https://fetch.spec.whatwg.org/&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;undici.fetch([url, options]): Promise&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Implements &lt;a href=&quot;https://fetch.spec.whatwg.org/&quot;&gt;fetch&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Only supported on Node 16+.&lt;/p&gt; 
&lt;p&gt;This is &lt;a href=&quot;https://nodejs.org/api/documentation.html#documentation_stability_index&quot;&gt;experimental&lt;/a&gt; and is not yet fully compliant the Fetch Standard. We plan to ship breaking changes to this feature until it is out of experimental.&lt;/p&gt; 
&lt;p&gt;Arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; &lt;code&gt;string | URL | object&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt; &lt;code&gt;RequestInit&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Returns: &lt;code&gt;Promise&amp;lt;Response&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Parameter: &lt;code&gt;RequestInit&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;https://fetch.spec.whatwg.org/#request-class&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt; &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt; &lt;code&gt;HeadersInit&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;body&lt;/strong&gt; &lt;code&gt;BodyInit?&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;referrer&lt;/strong&gt; &lt;em&gt;not supported&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;referrerPolicy&lt;/strong&gt; &lt;em&gt;not supported&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt; &lt;em&gt;not supported&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;credentials&lt;/strong&gt; &lt;em&gt;not supported&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;cache&lt;/strong&gt; &lt;em&gt;not supported&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;redirect&lt;/strong&gt; &lt;code&gt;RequestRedirect&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;integrity&lt;/strong&gt; &lt;em&gt;not supported&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;keepalive&lt;/strong&gt; &lt;em&gt;not supported&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;signal&lt;/strong&gt; &lt;code&gt;AbortSignal?&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;window&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Parameter: &lt;code&gt;Response&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;https://fetch.spec.whatwg.org/#response-class&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; &lt;code&gt;ResponseType&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;redirected&lt;/strong&gt; &lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;status&lt;/strong&gt; &lt;code&gt;number&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;ok&lt;/strong&gt; &lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;statusText&lt;/strong&gt; &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt; &lt;code&gt;Headers&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#dispatcherfetchoptions-callback&quot;&gt;Dispatcher.fetch&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;undici.upgrade([url, options]): Promise&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Upgrade to a different protocol. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism&quot;&gt;MDN - HTTP - Protocol upgrade mechanism&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Arguments:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; &lt;code&gt;string | URL | object&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;options&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#parameter-upgradeoptions&quot;&gt;&lt;code&gt;UpgradeOptions&lt;/code&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;dispatcher&lt;/strong&gt; &lt;code&gt;Dispatcher&lt;/code&gt; - Default: &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/#undicigetglobaldispatcherdispatcher&quot;&gt;getGlobalDispatcher&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;maxRedirections&lt;/strong&gt; &lt;code&gt;Integer&lt;/code&gt; - Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;callback&lt;/strong&gt; &lt;code&gt;(error: Error | null, data: UpgradeData) =&amp;gt; void&lt;/code&gt; (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Returns a promise with the result of the &lt;code&gt;Dispatcher.upgrade&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;Calls &lt;code&gt;options.dispatcher.upgrade(options)&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/nodejs/undici/main/docs/api/Dispatcher.md#dispatcherupgradeoptions-callback&quot;&gt;Dispatcher.upgrade&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;undici.setGlobalDispatcher(dispatcher)&lt;/code&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;dispatcher &lt;code&gt;Dispatcher&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sets the global dispatcher used by Common API Methods.&lt;/p&gt; 
&lt;h3&gt;&lt;code&gt;undici.getGlobalDispatcher()&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Gets the global dispatcher used by Common API Methods.&lt;/p&gt; 
&lt;p&gt;Returns: &lt;code&gt;Dispatcher&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Specification Compliance&lt;/h2&gt; 
&lt;p&gt;This section documents parts of the HTTP/1.1 specification which Undici does not support or does not fully implement.&lt;/p&gt; 
&lt;h3&gt;Expect&lt;/h3&gt; 
&lt;p&gt;Undici does not support the &lt;code&gt;Expect&lt;/code&gt; request header field. The request body is always immediately sent and the &lt;code&gt;100 Continue&lt;/code&gt; response will be ignored.&lt;/p&gt; 
&lt;p&gt;Refs: https://tools.ietf.org/html/rfc7231#section-5.1.1&lt;/p&gt; 
&lt;h3&gt;Pipelining&lt;/h3&gt; 
&lt;p&gt;Undici will only use pipelining if configured with a &lt;code&gt;pipelining&lt;/code&gt; factor greater than &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Undici always assumes that connections are persistent and will immediately pipeline requests, without checking whether the connection is persistent. Hence, automatic fallback to HTTP/1.0 or HTTP/1.1 without pipelining is not supported.&lt;/p&gt; 
&lt;p&gt;Undici will immediately pipeline when retrying requests afters a failed connection. However, Undici will not retry the first remaining requests in the prior pipeline and instead error the corresponding callback/promise/stream.&lt;/p&gt; 
&lt;p&gt;Undici will abort all running requests in the pipeline when any of them are aborted.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Refs: https://tools.ietf.org/html/rfc2616#section-8.1.2.2&lt;/li&gt; 
 &lt;li&gt;Refs: https://tools.ietf.org/html/rfc7230#section-6.3.2&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Collaborators&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ethan-arrowood&quot;&gt;&lt;strong&gt;Ethan Arrowood&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/%7Eethan_arrowood&quot;&gt;https://www.npmjs.com/~ethan_arrowood&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dnlup&quot;&gt;&lt;strong&gt;Daniele Belardi&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/%7Ednlup&quot;&gt;https://www.npmjs.com/~dnlup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/delvedor&quot;&gt;&lt;strong&gt;Tomas Della Vedova&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/%7Edelvedor&quot;&gt;https://www.npmjs.com/~delvedor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mcollina&quot;&gt;&lt;strong&gt;Matteo Collina&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/%7Ematteo.collina&quot;&gt;https://www.npmjs.com/~matteo.collina&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ronag&quot;&gt;&lt;strong&gt;Robert Nagy&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/%7Eronag&quot;&gt;https://www.npmjs.com/~ronag&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Releasers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mcollina&quot;&gt;&lt;strong&gt;Matteo Collina&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/%7Ematteo.collina&quot;&gt;https://www.npmjs.com/~matteo.collina&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ronag&quot;&gt;&lt;strong&gt;Robert Nagy&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/%7Eronag&quot;&gt;https://www.npmjs.com/~ronag&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>clouDr-f2e/rubick</title>
      <link>https://github.com/clouDr-f2e/rubick</link>
      <description>&lt;p&gt;🔧 基于 electron 的开源工具箱，自由集成丰富插件。&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img align=&quot;center&quot; width=&quot;200&quot; src=&quot;https://user-images.githubusercontent.com/21073039/128333805-73e086f0-5523-46a3-a096-cba80b904c46.png&quot;&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;h1&gt;Rubick&lt;/h1&gt; 
 &lt;a href=&quot;https://github.com/clouDr-f2e/rubick/releases/tag/v0.0.1-beta&quot;&gt; &lt;img alt=&quot;release&quot; src=&quot;https://img.shields.io/badge/release-v0.0.1-brightgreen&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://github.com/clouDr-f2e/rubick/raw/master/LICENSE&quot;&gt; &lt;img alt=&quot;npm&quot; src=&quot;https://img.shields.io/github/license/clouDr-f2e/rubick&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;基于 electron 的工具箱。Rubick(拉比克) 是 dota 里面的英雄之一，其核心技能是插件化使用其他英雄的技能，用完即走。非常符合本工具的设计理念，所以取名 Rubick。&lt;/p&gt; 
&lt;h2&gt;安装包&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/clouDr-f2e/rubick/releases/tag/v0.0.3-beta.1&quot;&gt;Rubick Mac OS V0.0.3-beta.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/clouDr-f2e/rubick/releases/download/v0.0.3-beta.1/rubick2.Setup.0.0.3-beta.1.exe&quot;&gt;Rubick Windows V0.0.3-beta.3&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;支持能力&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;[x] 支持远程下载安装插件，支持插件开发者模式&lt;/li&gt; 
 &lt;li&gt;[x] 支持插件分离&lt;/li&gt; 
 &lt;li&gt;[x] 支持系统命令取色、截屏、帮助&lt;/li&gt; 
 &lt;li&gt;[x] 支持超级面板，长按右击呼出&lt;/li&gt; 
 &lt;li&gt;[x] 支持全局快捷键设置&lt;/li&gt; 
 &lt;li&gt;[x] 支持搜索本地已安装 app 或 偏好设置&lt;/li&gt; 
 &lt;li&gt;[x] 支持 Windows(目前是 mac 的 alpha 版本，功能尚不全，正在迁移中)&lt;/li&gt; 
 &lt;li&gt;[ ] 支持 Linux&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/21073039/128359309-2377d3cf-7b70-4e8f-9973-ae8f337a8006.gif&quot; alt=&quot;example.gif&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;使用文档&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://cloudr-f2e.github.io/rubick/&quot;&gt;Rubick Docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;使用问题&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;依赖于 &lt;code&gt;robotjs&lt;/code&gt; dev 环境运行请在 &lt;code&gt;install&lt;/code&gt; 后执行 &lt;code&gt;npm run rebuild&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;windows 版本目前有了一个最基础的可用版，代码在 &lt;a href=&quot;https://github.com/clouDr-f2e/rubick/tree/feat-win&quot;&gt;feat-win&lt;/a&gt; 分支。完整版正在开发中，敬请期待&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;目前支持能力&lt;/h2&gt; 
&lt;h3&gt;超级面板&lt;/h3&gt; 
&lt;p&gt;长按鼠标右键，即可呼起超级面板，可以根据当前鼠标选择内容，匹配对应插件能力。比如当前选择图片后长按右击，则会呼起上传图床插件：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1706cc730f1f46078cb700a445211317%7Etplv-k3u1fbpfcp-watermark.image&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;模板&lt;/h3&gt; 
&lt;p&gt;模板即是一个内置 UI 样式的功能插件。&lt;/p&gt; 
&lt;img src=&quot;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b113ad547974699b9c73c28bc09b9b1~tplv-k3u1fbpfcp-watermark.image&quot; width=&quot;500&quot;&gt; 
&lt;h3&gt;系统命令&lt;/h3&gt; 
&lt;h4&gt;取色&lt;/h4&gt; 
&lt;p&gt;基于 &lt;code&gt;robot.js&lt;/code&gt; 以及 &lt;code&gt;iohook&lt;/code&gt; 实现。未使用 C++ 扩展。&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3036ae85bf3549fc8bbbe2926ecbad55%7Etplv-k3u1fbpfcp-watermark.image&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;截屏&lt;/h4&gt; 
&lt;img src=&quot;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18023dab52e1420c9e87362cefddb2a1~tplv-k3u1fbpfcp-watermark.image&quot; width=&quot;500&quot;&gt; 
&lt;h4&gt;全局快捷键&lt;/h4&gt; 
&lt;img src=&quot;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62cc424eacac4c9eb178f0e055e87d9a~tplv-k3u1fbpfcp-watermark.image&quot; width=&quot;500&quot;&gt; 
&lt;h3&gt;最后&lt;/h3&gt; 
&lt;p&gt;对本项目有兴趣或者想要交流学习的同学可以扫码加下面的微信，备注 rubick，帮助我们更好的成长：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/21073039/127327603-9796f246-ee4b-4950-a69d-ce3205ec9569.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&quot;https://github.com/clouDr-f2e/rubick/raw/master/LICENSE&quot;&gt;LICENSE.md&lt;/a&gt; file for details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mattermost/mattermost-webapp</title>
      <link>https://github.com/mattermost/mattermost-webapp</link>
      <description>&lt;p&gt;Webapp of Mattermost server: https://github.com/mattermost/mattermost-server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mattermost&lt;/h1&gt; 
&lt;p&gt;Mattermost is an open source, self-hosted Slack-alternative from &lt;a href=&quot;https://mattermost.com&quot;&gt;https://mattermost.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;It’s written in Golang and React and runs as a single Linux binary with MySQL or Postgres. Every month on the 16th &lt;a href=&quot;https://www.mattermost.com/download/&quot;&gt;a new compiled version is released under an MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;This project hosts the webapp client code. Please file issues at &lt;a href=&quot;https://github.com/mattermost/mattermost-server&quot;&gt;/mattermost-server&lt;/a&gt;, which hosts the server code.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://docs.mattermost.com/&quot;&gt;Review product documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developers.mattermost.com/&quot;&gt;Review developer documentation&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mattermost.com/download&quot;&gt;Download compiled version&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Try out Mattermost:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://community.mattermost.com&quot;&gt;Join the Mattermost Contributor’s server&lt;/a&gt; to join community discussions about contributions, development and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://customers.mattermost.com/cloud/signup&quot;&gt;Get started with Mattermost Cloud&lt;/a&gt; to try out Mattermost&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Deploy on Heroku&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/mattermost/mattermost-heroku&quot;&gt;&lt;img src=&quot;https://www.herokucdn.com/deploy/button.svg?sanitize=true&quot; alt=&quot;Deploy a Preview&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note: Heroku preview does not include email or persistent storage&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Install on your own machine:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://docs.mattermost.com/install/docker-local-machine.html#one-line-docker-install&quot;&gt;One-line Docker Preview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developers.mattermost.com/contribute/server/developer-setup/&quot;&gt;Developer Machine Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.mattermost.com/download/&quot;&gt;Production Install Guides using Linux Binary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.mattermost.com/install/prod-docker.html&quot;&gt;Production Docker Install&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Get Involved:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developers.mattermost.com/contribute/getting-started/&quot;&gt;Contribute Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mattermost.com/pl/help-wanted&quot;&gt;Find “Help Wanted” projects&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://community.mattermost.com/core/channels/tickets&quot;&gt;Join Developer Discussion on a Mattermost Server for contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.mattermost.org/filing-issues/&quot;&gt;File Bugs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.mattermost.org/feature-requests/&quot;&gt;Share Feature Ideas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forum.mattermost.org/t/how-to-use-the-troubleshooting-forum/150&quot;&gt;Get Troubleshooting Help&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Learn More:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://api.mattermost.com/&quot;&gt;API Options - webhooks, slash commands, drivers and web service&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://handbook.mattermost.com/contributors/contributors/localization&quot;&gt;Localization Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Get the Latest News:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt; - Follow &lt;a href=&quot;https://twitter.com/Mattermost&quot;&gt;Mattermost&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Email&lt;/strong&gt; - Subscribe to our &lt;a href=&quot;http://mattermost.us11.list-manage.com/subscribe?u=6cdba22349ae374e188e7ab8e&amp;amp;id=2add1c8034&quot;&gt;newsletter&lt;/a&gt; (1 or 2 per month)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;IRC&lt;/strong&gt; - Join the #matterbridge channel on &lt;a href=&quot;https://freenode.net/&quot;&gt;Freenode&lt;/a&gt; (thanks to &lt;a href=&quot;https://github.com/42wim/matterircd&quot;&gt;matterircd&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Any other questions, mail us at info@mattermost.com. We’d love to meet you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ryanmcdermott/clean-code-javascript</title>
      <link>https://github.com/ryanmcdermott/clean-code-javascript</link>
      <description>&lt;p&gt;🛁 Clean Code concepts adapted for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clean-code-javascript&lt;/h1&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#variables&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#functions&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#objects-and-data-structures&quot;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#classes&quot;&gt;Classes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#solid&quot;&gt;SOLID&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#concurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#error-handling&quot;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#translation&quot;&gt;Translation&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://www.osnews.com/images/comics/wtfm.jpg&quot; alt=&quot;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Software engineering principles, from Robert C. Martin’s book &lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for JavaScript. This is not a style guide. It’s a guide to producing &lt;a href=&quot;https://github.com/ryanmcdermott/3rs-of-software-architecture&quot;&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt; 
&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the JavaScript code that you and your team produce.&lt;/p&gt; 
&lt;p&gt;One more thing: knowing these won’t immediately make you a better software developer, and working with them for many years doesn’t mean you won’t make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don’t beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const yyyymmdstr = moment().format(&quot;YYYY/MM/DD&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const currentDate = moment().format(&quot;YYYY/MM/DD&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getUserInfo();
getClientData();
getCustomerRecord();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getUser();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use searchable names&lt;/h3&gt; 
&lt;p&gt;We will read more code than we will ever write. It’s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like &lt;a href=&quot;https://github.com/danielstjules/buddy.js&quot;&gt;buddy.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/eslint/eslint/raw/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md&quot;&gt;ESLint&lt;/a&gt; can help identify unnamed constants.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// What the heck is 86400000 for?
setTimeout(blastOff, 86400000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Declare them as capitalized named constants.
const MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;

setTimeout(blastOff, MILLISECONDS_PER_DAY);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use explanatory variables&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const address = &quot;One Infinite Loop, Cupertino 95014&quot;;
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
saveCityZipCode(
  address.match(cityZipCodeRegex)[1],
  address.match(cityZipCodeRegex)[2]
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const address = &quot;One Infinite Loop, Cupertino 95014&quot;;
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
const [_, city, zipCode] = address.match(cityZipCodeRegex) || [];
saveCityZipCode(city, zipCode);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; 
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const locations = [&quot;Austin&quot;, &quot;New York&quot;, &quot;San Francisco&quot;];
locations.forEach(l =&amp;gt; {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  // Wait, what is `l` for again?
  dispatch(l);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const locations = [&quot;Austin&quot;, &quot;New York&quot;, &quot;San Francisco&quot;];
locations.forEach(location =&amp;gt; {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  dispatch(location);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don’t add unneeded context&lt;/h3&gt; 
&lt;p&gt;If your class/object name tells you something, don’t repeat that in your variable name.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Car = {
  carMake: &quot;Honda&quot;,
  carModel: &quot;Accord&quot;,
  carColor: &quot;Blue&quot;
};

function paintCar(car, color) {
  car.carColor = color;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Car = {
  make: &quot;Honda&quot;,
  model: &quot;Accord&quot;,
  color: &quot;Blue&quot;
};

function paintCar(car, color) {
  car.color = color;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; 
&lt;p&gt;Default arguments are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for &lt;code&gt;undefined&lt;/code&gt; arguments. Other “falsy” values such as &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, will not be replaced by a default value.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMicrobrewery(name) {
  const breweryName = name || &quot;Hipster Brew Co.&quot;;
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMicrobrewery(name = &quot;Hipster Brew Co.&quot;) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; 
&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; 
&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it’s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; 
&lt;p&gt;Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.&lt;/p&gt; 
&lt;p&gt;To make it obvious what properties the function expects, you can use the ES2015/ES6 destructuring syntax. This has a few advantages:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;When someone looks at the function signature, it’s immediately clear what properties are being used.&lt;/li&gt; 
 &lt;li&gt;It can be used to simulate named parameters.&lt;/li&gt; 
 &lt;li&gt;Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.&lt;/li&gt; 
 &lt;li&gt;Linters can warn you about unused properties, which would be impossible without destructuring.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMenu(title, body, buttonText, cancellable) {
  // ...
}

createMenu(&quot;Foo&quot;, &quot;Bar&quot;, &quot;Baz&quot;, true);

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMenu({ title, body, buttonText, cancellable }) {
  // ...
}

createMenu({
  title: &quot;Foo&quot;,
  body: &quot;Bar&quot;,
  buttonText: &quot;Baz&quot;,
  cancellable: true
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Functions should do one thing&lt;/h3&gt; 
&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you’ll be ahead of many developers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function emailClients(clients) {
  clients.forEach(client =&amp;gt; {
    const clientRecord = database.lookup(client);
    if (clientRecord.isActive()) {
      email(client);
    }
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function emailActiveClients(clients) {
  clients.filter(isActiveClient).forEach(email);
}

function isActiveClient(client) {
  const clientRecord = database.lookup(client);
  return clientRecord.isActive();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Function names should say what they do&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addToDate(date, month) {
  // ...
}

const date = new Date();

// It&#39;s hard to tell from the function name what is added
addToDate(date, 1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addMonthToDate(month, date) {
  // ...
}

const date = new Date();
addMonthToDate(1, date);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; 
&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function parseBetterJSAlternative(code) {
  const REGEXES = [
    // ...
  ];

  const statements = code.split(&quot; &quot;);
  const tokens = [];
  REGEXES.forEach(REGEX =&amp;gt; {
    statements.forEach(statement =&amp;gt; {
      // ...
    });
  });

  const ast = [];
  tokens.forEach(token =&amp;gt; {
    // lex...
  });

  ast.forEach(node =&amp;gt; {
    // parse...
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function parseBetterJSAlternative(code) {
  const tokens = tokenize(code);
  const syntaxTree = parse(tokens);
  syntaxTree.forEach(node =&amp;gt; {
    // parse...
  });
}

function tokenize(code) {
  const REGEXES = [
    // ...
  ];

  const statements = code.split(&quot; &quot;);
  const tokens = [];
  REGEXES.forEach(REGEX =&amp;gt; {
    statements.forEach(statement =&amp;gt; {
      tokens.push(/* ... */);
    });
  });

  return tokens;
}

function parse(tokens) {
  const syntaxTree = [];
  tokens.forEach(token =&amp;gt; {
    syntaxTree.push(/* ... */);
  });

  return syntaxTree;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Remove duplicate code&lt;/h3&gt; 
&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there’s more than one place to alter something if you need to change some logic.&lt;/p&gt; 
&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there’s only one place to update!&lt;/p&gt; 
&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; 
&lt;p&gt;Getting the abstraction right is critical, that’s why you should follow the SOLID principles laid out in the &lt;em&gt;Classes&lt;/em&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don’t repeat yourself, otherwise you’ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showDeveloperList(developers) {
  developers.forEach(developer =&amp;gt; {
    const expectedSalary = developer.calculateExpectedSalary();
    const experience = developer.getExperience();
    const githubLink = developer.getGithubLink();
    const data = {
      expectedSalary,
      experience,
      githubLink
    };

    render(data);
  });
}

function showManagerList(managers) {
  managers.forEach(manager =&amp;gt; {
    const expectedSalary = manager.calculateExpectedSalary();
    const experience = manager.getExperience();
    const portfolio = manager.getMBAProjects();
    const data = {
      expectedSalary,
      experience,
      portfolio
    };

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showEmployeeList(employees) {
  employees.forEach(employee =&amp;gt; {
    const expectedSalary = employee.calculateExpectedSalary();
    const experience = employee.getExperience();

    const data = {
      expectedSalary,
      experience
    };

    switch (employee.type) {
      case &quot;manager&quot;:
        data.portfolio = employee.getMBAProjects();
        break;
      case &quot;developer&quot;:
        data.githubLink = employee.getGithubLink();
        break;
    }

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Set default objects with Object.assign&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const menuConfig = {
  title: null,
  body: &quot;Bar&quot;,
  buttonText: null,
  cancellable: true
};

function createMenu(config) {
  config.title = config.title || &quot;Foo&quot;;
  config.body = config.body || &quot;Bar&quot;;
  config.buttonText = config.buttonText || &quot;Baz&quot;;
  config.cancellable =
    config.cancellable !== undefined ? config.cancellable : true;
}

createMenu(menuConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const menuConfig = {
  title: &quot;Order&quot;,
  // User did not include &#39;body&#39; key
  buttonText: &quot;Send&quot;,
  cancellable: true
};

function createMenu(config) {
  let finalConfig = Object.assign(
    {
      title: &quot;Foo&quot;,
      body: &quot;Bar&quot;,
      buttonText: &quot;Baz&quot;,
      cancellable: true
    },
    config
  );
  return finalConfig
  // config now equals: {title: &quot;Order&quot;, body: &quot;Bar&quot;, buttonText: &quot;Send&quot;, cancellable: true}
  // ...
}

createMenu(menuConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don’t use flags as function parameters&lt;/h3&gt; 
&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createFile(name, temp) {
  if (temp) {
    fs.create(`./temp/${name}`);
  } else {
    fs.create(name);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createFile(name) {
  fs.create(name);
}

function createTempFile(name) {
  createFile(`./temp/${name}`);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; 
&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; 
&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don’t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; 
&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Global variable referenced by following function.
// If we had another function that used this name, now it&#39;d be an array and it could break it.
let name = &quot;Ryan McDermott&quot;;

function splitIntoFirstAndLastName() {
  name = name.split(&quot; &quot;);
}

splitIntoFirstAndLastName();

console.log(name); // [&#39;Ryan&#39;, &#39;McDermott&#39;];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function splitIntoFirstAndLastName(name) {
  return name.split(&quot; &quot;);
}

const name = &quot;Ryan McDermott&quot;;
const newName = splitIntoFirstAndLastName(name);

console.log(name); // &#39;Ryan McDermott&#39;;
console.log(newName); // [&#39;Ryan&#39;, &#39;McDermott&#39;];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; 
&lt;p&gt;In JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it’s important to handle them carefully when they’re passed as parameters to a function. A JavaScript function can change an object’s properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; 
&lt;p&gt;Suppose there’s a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let’s imagine a bad situation:&lt;/p&gt; 
&lt;p&gt;The user clicks the “Purchase” button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an “Add to Cart” button on an item they don’t actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; 
&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn’t be affected by the changes.&lt;/p&gt; 
&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn’t a big issue in practice because there are &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addItemToCart = (cart, item) =&amp;gt; {
  cart.push({ item, date: Date.now() });
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addItemToCart = (cart, item) =&amp;gt; {
  return [...cart, { item, date: Date.now() }];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don’t write to global functions&lt;/h3&gt; 
&lt;p&gt;Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let’s think about an example: what if you wanted to extend JavaScript’s native Array method to have a &lt;code&gt;diff&lt;/code&gt; method that could show the difference between two arrays? You could write your new function to the &lt;code&gt;Array.prototype&lt;/code&gt;, but it could clash with another library that tried to do the same thing. What if that other library was just using &lt;code&gt;diff&lt;/code&gt; to find the difference between the first and last elements of an array? This is why it would be much better to just use ES2015/ES6 classes and simply extend the &lt;code&gt;Array&lt;/code&gt; global.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.prototype.diff = function diff(comparisonArray) {
  const hash = new Set(comparisonArray);
  return this.filter(elem =&amp;gt; !hash.has(elem));
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class SuperArray extends Array {
  diff(comparisonArray) {
    const hash = new Set(comparisonArray);
    return this.filter(elem =&amp;gt; !hash.has(elem));
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; 
&lt;p&gt;JavaScript isn’t a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const programmerOutput = [
  {
    name: &quot;Uncle Bobby&quot;,
    linesOfCode: 500
  },
  {
    name: &quot;Suzie Q&quot;,
    linesOfCode: 1500
  },
  {
    name: &quot;Jimmy Gosling&quot;,
    linesOfCode: 150
  },
  {
    name: &quot;Gracie Hopper&quot;,
    linesOfCode: 1000
  }
];

let totalOutput = 0;

for (let i = 0; i &amp;lt; programmerOutput.length; i++) {
  totalOutput += programmerOutput[i].linesOfCode;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const programmerOutput = [
  {
    name: &quot;Uncle Bobby&quot;,
    linesOfCode: 500
  },
  {
    name: &quot;Suzie Q&quot;,
    linesOfCode: 1500
  },
  {
    name: &quot;Jimmy Gosling&quot;,
    linesOfCode: 150
  },
  {
    name: &quot;Gracie Hopper&quot;,
    linesOfCode: 1000
  }
];

const totalOutput = programmerOutput.reduce(
  (totalLines, output) =&amp;gt; totalLines + output.linesOfCode,
  0
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (fsm.state === &quot;fetching&quot; &amp;amp;&amp;amp; isEmpty(listNode)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function shouldShowSpinner(fsm, listNode) {
  return fsm.state === &quot;fetching&quot; &amp;amp;&amp;amp; isEmpty(listNode);
}

if (shouldShowSpinner(fsmInstance, listNodeInstance)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isDOMNodeNotPresent(node) {
  // ...
}

if (!isDOMNodeNotPresent(node)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isDOMNodePresent(node) {
  // ...
}

if (isDOMNodePresent(node)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid conditionals&lt;/h3&gt; 
&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, “how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?” The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, “well that’s great but why would I want to do that?” The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Airplane {
  // ...
  getCruisingAltitude() {
    switch (this.type) {
      case &quot;777&quot;:
        return this.getMaxAltitude() - this.getPassengerCount();
      case &quot;Air Force One&quot;:
        return this.getMaxAltitude();
      case &quot;Cessna&quot;:
        return this.getMaxAltitude() - this.getFuelExpenditure();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Airplane {
  // ...
}

class Boeing777 extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude() - this.getPassengerCount();
  }
}

class AirForceOne extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude();
  }
}

class Cessna extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude() - this.getFuelExpenditure();
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; 
&lt;p&gt;JavaScript is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function travelToTexas(vehicle) {
  if (vehicle instanceof Bicycle) {
    vehicle.pedal(this.currentLocation, new Location(&quot;texas&quot;));
  } else if (vehicle instanceof Car) {
    vehicle.drive(this.currentLocation, new Location(&quot;texas&quot;));
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function travelToTexas(vehicle) {
  vehicle.move(this.currentLocation, new Location(&quot;texas&quot;));
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; 
&lt;p&gt;If you are working with basic primitive values like strings and integers, and you can’t use polymorphism but you still feel the need to type-check, you should consider using TypeScript. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux “type-safety” you get doesn’t make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(val1, val2) {
  if (
    (typeof val1 === &quot;number&quot; &amp;amp;&amp;amp; typeof val2 === &quot;number&quot;) ||
    (typeof val1 === &quot;string&quot; &amp;amp;&amp;amp; typeof val2 === &quot;string&quot;)
  ) {
    return val1 + val2;
  }

  throw new Error(&quot;Must be of type String or Number&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(val1, val2) {
  return val1 + val2;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don’t over-optimize&lt;/h3&gt; 
&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. &lt;a href=&quot;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&quot;&gt;There are good resources&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// On old browsers, each iteration with uncached `list.length` would be costly
// because of `list.length` recomputation. In modern browsers, this is optimized.
for (let i = 0, len = list.length; i &amp;lt; len; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (let i = 0; i &amp;lt; list.length; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Remove dead code&lt;/h3&gt; 
&lt;p&gt;Dead code is just as bad as duplicate code. There’s no reason to keep it in your codebase. If it’s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function oldRequestModule(url) {
  // ...
}

function newRequestModule(url) {
  // ...
}

const req = newRequestModule;
inventoryTracker(&quot;apples&quot;, req, &quot;www.inventory-awesome.io&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function newRequestModule(url) {
  // ...
}

const req = newRequestModule;
inventoryTracker(&quot;apples&quot;, req, &quot;www.inventory-awesome.io&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Objects and Data Structures&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use getters and setters&lt;/h3&gt; 
&lt;p&gt;Using getters and setters to access data on objects could be better than simply looking for a property on an object. “Why?” you might ask. Well, here’s an unorganized list of reasons why:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When you want to do more beyond getting an object property, you don’t have to look up and change every accessor in your codebase.&lt;/li&gt; 
 &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; 
 &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; 
 &lt;li&gt;You can lazy load your object’s properties, let’s say getting it from a server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeBankAccount() {
  // ...

  return {
    balance: 0
    // ...
  };
}

const account = makeBankAccount();
account.balance = 100;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeBankAccount() {
  // this one is private
  let balance = 0;

  // a &quot;getter&quot;, made public via the returned object below
  function getBalance() {
    return balance;
  }

  // a &quot;setter&quot;, made public via the returned object below
  function setBalance(amount) {
    // ... validate before updating the balance
    balance = amount;
  }

  return {
    // ...
    getBalance,
    setBalance
  };
}

const account = makeBankAccount();
account.setBalance(100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Make objects have private members&lt;/h3&gt; 
&lt;p&gt;This can be accomplished through closures (for ES5 and below).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Employee = function(name) {
  this.name = name;
};

Employee.prototype.getName = function getName() {
  return this.name;
};

const employee = new Employee(&quot;John Doe&quot;);
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
delete employee.name;
console.log(`Employee name: ${employee.getName()}`); // Employee name: undefined
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeEmployee(name) {
  return {
    getName() {
      return name;
    }
  };
}

const employee = makeEmployee(&quot;John Doe&quot;);
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
delete employee.name;
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Prefer ES2015/ES6 classes over ES5 plain functions&lt;/h3&gt; 
&lt;p&gt;It’s very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes. However, prefer small functions over classes until you find yourself needing larger and more complex objects.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Animal = function(age) {
  if (!(this instanceof Animal)) {
    throw new Error(&quot;Instantiate Animal with `new`&quot;);
  }

  this.age = age;
};

Animal.prototype.move = function move() {};

const Mammal = function(age, furColor) {
  if (!(this instanceof Mammal)) {
    throw new Error(&quot;Instantiate Mammal with `new`&quot;);
  }

  Animal.call(this, age);
  this.furColor = furColor;
};

Mammal.prototype = Object.create(Animal.prototype);
Mammal.prototype.constructor = Mammal;
Mammal.prototype.liveBirth = function liveBirth() {};

const Human = function(age, furColor, languageSpoken) {
  if (!(this instanceof Human)) {
    throw new Error(&quot;Instantiate Human with `new`&quot;);
  }

  Mammal.call(this, age, furColor);
  this.languageSpoken = languageSpoken;
};

Human.prototype = Object.create(Mammal.prototype);
Human.prototype.constructor = Human;
Human.prototype.speak = function speak() {};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Animal {
  constructor(age) {
    this.age = age;
  }

  move() {
    /* ... */
  }
}

class Mammal extends Animal {
  constructor(age, furColor) {
    super(age);
    this.furColor = furColor;
  }

  liveBirth() {
    /* ... */
  }
}

class Human extends Mammal {
  constructor(age, furColor, languageSpoken) {
    super(age, furColor);
    this.languageSpoken = languageSpoken;
  }

  speak() {
    /* ... */
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use method chaining&lt;/h3&gt; 
&lt;p&gt;This pattern is very useful in JavaScript and you see it in many libraries such as jQuery and Lodash. It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be. In your class functions, simply return &lt;code&gt;this&lt;/code&gt; at the end of every function, and you can chain further class methods onto it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Car {
  constructor(make, model, color) {
    this.make = make;
    this.model = model;
    this.color = color;
  }

  setMake(make) {
    this.make = make;
  }

  setModel(model) {
    this.model = model;
  }

  setColor(color) {
    this.color = color;
  }

  save() {
    console.log(this.make, this.model, this.color);
  }
}

const car = new Car(&quot;Ford&quot;, &quot;F-150&quot;, &quot;red&quot;);
car.setColor(&quot;pink&quot;);
car.save();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Car {
  constructor(make, model, color) {
    this.make = make;
    this.model = model;
    this.color = color;
  }

  setMake(make) {
    this.make = make;
    // NOTE: Returning this for chaining
    return this;
  }

  setModel(model) {
    this.model = model;
    // NOTE: Returning this for chaining
    return this;
  }

  setColor(color) {
    this.color = color;
    // NOTE: Returning this for chaining
    return this;
  }

  save() {
    console.log(this.make, this.model, this.color);
    // NOTE: Returning this for chaining
    return this;
  }
}

const car = new Car(&quot;Ford&quot;, &quot;F-150&quot;, &quot;red&quot;).setColor(&quot;pink&quot;).save();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; 
&lt;p&gt;As stated famously in &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; 
&lt;p&gt;You might be wondering then, “when should I use inheritance?” It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Your inheritance represents an “is-a” relationship and not a “has-a” relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; 
 &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; 
 &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Employee {
  constructor(name, email) {
    this.name = name;
    this.email = email;
  }

  // ...
}

// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee
class EmployeeTaxData extends Employee {
  constructor(ssn, salary) {
    super();
    this.ssn = ssn;
    this.salary = salary;
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class EmployeeTaxData {
  constructor(ssn, salary) {
    this.ssn = ssn;
    this.salary = salary;
  }

  // ...
}

class Employee {
  constructor(name, email) {
    this.name = name;
    this.email = email;
  }

  setTaxData(ssn, salary) {
    this.taxData = new EmployeeTaxData(ssn, salary);
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;SOLID&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; 
&lt;p&gt;As stated in Clean Code, “There should never be more than one reason for a class to change”. It’s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won’t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It’s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class UserSettings {
  constructor(user) {
    this.user = user;
  }

  changeSettings(settings) {
    if (this.verifyCredentials()) {
      // ...
    }
  }

  verifyCredentials() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class UserAuth {
  constructor(user) {
    this.user = user;
  }

  verifyCredentials() {
    // ...
  }
}

class UserSettings {
  constructor(user) {
    this.user = user;
    this.auth = new UserAuth(user);
  }

  changeSettings(settings) {
    if (this.auth.verifyCredentials()) {
      // ...
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; 
&lt;p&gt;As stated by Bertrand Meyer, “software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.” What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AjaxAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;ajaxAdapter&quot;;
  }
}

class NodeAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;nodeAdapter&quot;;
  }
}

class HttpRequester {
  constructor(adapter) {
    this.adapter = adapter;
  }

  fetch(url) {
    if (this.adapter.name === &quot;ajaxAdapter&quot;) {
      return makeAjaxCall(url).then(response =&amp;gt; {
        // transform response and return
      });
    } else if (this.adapter.name === &quot;nodeAdapter&quot;) {
      return makeHttpCall(url).then(response =&amp;gt; {
        // transform response and return
      });
    }
  }
}

function makeAjaxCall(url) {
  // request and return promise
}

function makeHttpCall(url) {
  // request and return promise
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AjaxAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;ajaxAdapter&quot;;
  }

  request(url) {
    // request and return promise
  }
}

class NodeAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;nodeAdapter&quot;;
  }

  request(url) {
    // request and return promise
  }
}

class HttpRequester {
  constructor(adapter) {
    this.adapter = adapter;
  }

  fetch(url) {
    return this.adapter.request(url).then(response =&amp;gt; {
      // transform response and return
    });
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; 
&lt;p&gt;This is a scary term for a very simple concept. It’s formally defined as “If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).” That’s an even scarier definition.&lt;/p&gt; 
&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let’s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the “is-a” relationship via inheritance, you quickly get into trouble.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Rectangle {
  constructor() {
    this.width = 0;
    this.height = 0;
  }

  setColor(color) {
    // ...
  }

  render(area) {
    // ...
  }

  setWidth(width) {
    this.width = width;
  }

  setHeight(height) {
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }
}

class Square extends Rectangle {
  setWidth(width) {
    this.width = width;
    this.height = width;
  }

  setHeight(height) {
    this.width = height;
    this.height = height;
  }
}

function renderLargeRectangles(rectangles) {
  rectangles.forEach(rectangle =&amp;gt; {
    rectangle.setWidth(4);
    rectangle.setHeight(5);
    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.
    rectangle.render(area);
  });
}

const rectangles = [new Rectangle(), new Rectangle(), new Square()];
renderLargeRectangles(rectangles);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Shape {
  setColor(color) {
    // ...
  }

  render(area) {
    // ...
  }
}

class Rectangle extends Shape {
  constructor(width, height) {
    super();
    this.width = width;
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }
}

class Square extends Shape {
  constructor(length) {
    super();
    this.length = length;
  }

  getArea() {
    return this.length * this.length;
  }
}

function renderLargeShapes(shapes) {
  shapes.forEach(shape =&amp;gt; {
    const area = shape.getArea();
    shape.render(area);
  });
}

const shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];
renderLargeShapes(shapes);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; 
&lt;p&gt;JavaScript doesn’t have interfaces so this principle doesn’t apply as strictly as others. However, it’s important and relevant even with JavaScript’s lack of type system.&lt;/p&gt; 
&lt;p&gt;ISP states that “Clients should not be forced to depend upon interfaces that they do not use.” Interfaces are implicit contracts in JavaScript because of duck typing.&lt;/p&gt; 
&lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won’t need all of the settings. Making them optional helps prevent having a “fat interface”.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class DOMTraverser {
  constructor(settings) {
    this.settings = settings;
    this.setup();
  }

  setup() {
    this.rootNode = this.settings.rootNode;
    this.settings.animationModule.setup();
  }

  traverse() {
    // ...
  }
}

const $ = new DOMTraverser({
  rootNode: document.getElementsByTagName(&quot;body&quot;),
  animationModule() {} // Most of the time, we won&#39;t need to animate when traversing.
  // ...
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class DOMTraverser {
  constructor(settings) {
    this.settings = settings;
    this.options = settings.options;
    this.setup();
  }

  setup() {
    this.rootNode = this.settings.rootNode;
    this.setupOptions();
  }

  setupOptions() {
    if (this.options.animationModule) {
      // ...
    }
  }

  traverse() {
    // ...
  }
}

const $ = new DOMTraverser({
  rootNode: document.getElementsByTagName(&quot;body&quot;),
  options: {
    animationModule() {}
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; 
&lt;p&gt;This principle states two essential things:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; 
 &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This can be hard to understand at first, but if you’ve worked with AngularJS, you’ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; 
&lt;p&gt;As stated previously, JavaScript doesn’t have interfaces so the abstractions that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code&gt;InventoryTracker&lt;/code&gt; will have a &lt;code&gt;requestItems&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class InventoryRequester {
  constructor() {
    this.REQ_METHODS = [&quot;HTTP&quot;];
  }

  requestItem(item) {
    // ...
  }
}

class InventoryTracker {
  constructor(items) {
    this.items = items;

    // BAD: We have created a dependency on a specific request implementation.
    // We should just have requestItems depend on a request method: `request`
    this.requester = new InventoryRequester();
  }

  requestItems() {
    this.items.forEach(item =&amp;gt; {
      this.requester.requestItem(item);
    });
  }
}

const inventoryTracker = new InventoryTracker([&quot;apples&quot;, &quot;bananas&quot;]);
inventoryTracker.requestItems();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class InventoryTracker {
  constructor(items, requester) {
    this.items = items;
    this.requester = requester;
  }

  requestItems() {
    this.items.forEach(item =&amp;gt; {
      this.requester.requestItem(item);
    });
  }
}

class InventoryRequesterV1 {
  constructor() {
    this.REQ_METHODS = [&quot;HTTP&quot;];
  }

  requestItem(item) {
    // ...
  }
}

class InventoryRequesterV2 {
  constructor() {
    this.REQ_METHODS = [&quot;WS&quot;];
  }

  requestItem(item) {
    // ...
  }
}

// By constructing our dependencies externally and injecting them, we can easily
// substitute our request module for a fancy new one that uses WebSockets.
const inventoryTracker = new InventoryTracker(
  [&quot;apples&quot;, &quot;bananas&quot;],
  new InventoryRequesterV2()
);
inventoryTracker.requestItems();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won’t be sure that you didn’t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a &lt;a href=&quot;https://gotwarlost.github.io/istanbul/&quot;&gt;good coverage tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There’s no excuse to not write tests. There are &lt;a href=&quot;https://jstherightway.org/#testing-tools&quot;&gt;plenty of good JS test frameworks&lt;/a&gt;, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; 
&lt;h3&gt;Single concept per test&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import assert from &quot;assert&quot;;

describe(&quot;MomentJS&quot;, () =&amp;gt; {
  it(&quot;handles date boundaries&quot;, () =&amp;gt; {
    let date;

    date = new MomentJS(&quot;1/1/2015&quot;);
    date.addDays(30);
    assert.equal(&quot;1/31/2015&quot;, date);

    date = new MomentJS(&quot;2/1/2016&quot;);
    date.addDays(28);
    assert.equal(&quot;02/29/2016&quot;, date);

    date = new MomentJS(&quot;2/1/2015&quot;);
    date.addDays(28);
    assert.equal(&quot;03/01/2015&quot;, date);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import assert from &quot;assert&quot;;

describe(&quot;MomentJS&quot;, () =&amp;gt; {
  it(&quot;handles 30-day months&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;1/1/2015&quot;);
    date.addDays(30);
    assert.equal(&quot;1/31/2015&quot;, date);
  });

  it(&quot;handles leap year&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;2/1/2016&quot;);
    date.addDays(28);
    assert.equal(&quot;02/29/2016&quot;, date);
  });

  it(&quot;handles non-leap year&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;2/1/2015&quot;);
    date.addDays(28);
    assert.equal(&quot;03/01/2015&quot;, date);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use Promises, not callbacks&lt;/h3&gt; 
&lt;p&gt;Callbacks aren’t clean, and they cause excessive amounts of nesting. With ES2015/ES6, Promises are a built-in global type. Use them!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request&quot;;
import { writeFile } from &quot;fs&quot;;

get(
  &quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;,
  (requestErr, response, body) =&amp;gt; {
    if (requestErr) {
      console.error(requestErr);
    } else {
      writeFile(&quot;article.html&quot;, body, writeErr =&amp;gt; {
        if (writeErr) {
          console.error(writeErr);
        } else {
          console.log(&quot;File written&quot;);
        }
      });
    }
  }
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

get(&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;)
  .then(body =&amp;gt; {
    return writeFile(&quot;article.html&quot;, body);
  })
  .then(() =&amp;gt; {
    console.log(&quot;File written&quot;);
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Async/Await are even cleaner than Promises&lt;/h3&gt; 
&lt;p&gt;Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution. All you need is a function that is prefixed in an &lt;code&gt;async&lt;/code&gt; keyword, and then you can write your logic imperatively without a &lt;code&gt;then&lt;/code&gt; chain of functions. Use this if you can take advantage of ES2017/ES8 features today!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

get(&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;)
  .then(body =&amp;gt; {
    return writeFile(&quot;article.html&quot;, body);
  })
  .then(() =&amp;gt; {
    console.log(&quot;File written&quot;);
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

async function getCleanCodeArticle() {
  try {
    const body = await get(
      &quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;
    );
    await writeFile(&quot;article.html&quot;, body);
    console.log(&quot;File written&quot;);
  } catch (err) {
    console.error(err);
  }
}

getCleanCodeArticle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it’s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.&lt;/p&gt; 
&lt;h3&gt;Don’t ignore caught errors&lt;/h3&gt; 
&lt;p&gt;Doing nothing with a caught error doesn’t give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;console.log&lt;/code&gt;) isn’t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  functionThatMightThrow();
} catch (error) {
  console.log(error);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  functionThatMightThrow();
} catch (error) {
  // One option (more noisy than console.log):
  console.error(error);
  // Another option:
  notifyUserOfError(error);
  // Another option:
  reportErrorToService(error);
  // OR do all three!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Don’t ignore rejected promises&lt;/h3&gt; 
&lt;p&gt;For the same reason you shouldn’t ignore caught errors from &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getdata()
  .then(data =&amp;gt; {
    functionThatMightThrow(data);
  })
  .catch(error =&amp;gt; {
    console.log(error);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getdata()
  .then(data =&amp;gt; {
    functionThatMightThrow(data);
  })
  .catch(error =&amp;gt; {
    // One option (more noisy than console.log):
    console.error(error);
    // Another option:
    notifyUserOfError(error);
    // Another option:
    reportErrorToService(error);
    // OR do all three!
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. There are &lt;a href=&quot;https://standardjs.com/rules.html&quot;&gt;tons of tools&lt;/a&gt; to automate this. Use one! It’s a waste of time and money for engineers to argue over formatting.&lt;/p&gt; 
&lt;p&gt;For things that don’t fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.&lt;/p&gt; 
&lt;h3&gt;Use consistent capitalization&lt;/h3&gt; 
&lt;p&gt;JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const DAYS_IN_WEEK = 7;
const daysInMonth = 30;

const songs = [&quot;Back In Black&quot;, &quot;Stairway to Heaven&quot;, &quot;Hey Jude&quot;];
const Artists = [&quot;ACDC&quot;, &quot;Led Zeppelin&quot;, &quot;The Beatles&quot;];

function eraseDatabase() {}
function restore_database() {}

class animal {}
class Alpaca {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const DAYS_IN_WEEK = 7;
const DAYS_IN_MONTH = 30;

const SONGS = [&quot;Back In Black&quot;, &quot;Stairway to Heaven&quot;, &quot;Hey Jude&quot;];
const ARTISTS = [&quot;ACDC&quot;, &quot;Led Zeppelin&quot;, &quot;The Beatles&quot;];

function eraseDatabase() {}
function restoreDatabase() {}

class Animal {}
class Alpaca {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; 
&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class PerformanceReview {
  constructor(employee) {
    this.employee = employee;
  }

  lookupPeers() {
    return db.lookup(this.employee, &quot;peers&quot;);
  }

  lookupManager() {
    return db.lookup(this.employee, &quot;manager&quot;);
  }

  getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  perfReview() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();
  }

  getManagerReview() {
    const manager = this.lookupManager();
  }

  getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.perfReview();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class PerformanceReview {
  constructor(employee) {
    this.employee = employee;
  }

  perfReview() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();
  }

  getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  lookupPeers() {
    return db.lookup(this.employee, &quot;peers&quot;);
  }

  getManagerReview() {
    const manager = this.lookupManager();
  }

  lookupManager() {
    return db.lookup(this.employee, &quot;manager&quot;);
  }

  getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.perfReview();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Only comment things that have business logic complexity.&lt;/h3&gt; 
&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hashIt(data) {
  // The hash
  let hash = 0;

  // Length of string
  const length = data.length;

  // Loop through every character in data
  for (let i = 0; i &amp;lt; length; i++) {
    // Get character code.
    const char = data.charCodeAt(i);
    // Make the hash
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;
    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hashIt(data) {
  let hash = 0;
  const length = data.length;

  for (let i = 0; i &amp;lt; length; i++) {
    const char = data.charCodeAt(i);
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;

    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don’t leave commented out code in your codebase&lt;/h3&gt; 
&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doStuff();
// doOtherStuff();
// doSomeMoreStuff();
// doSoMuchStuff();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doStuff();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don’t have journal comments&lt;/h3&gt; 
&lt;p&gt;Remember, use version control! There’s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/**
 * 2016-12-20: Removed monads, didn&#39;t understand them (RM)
 * 2016-10-01: Improved using special monads (JP)
 * 2016-02-03: Removed type-checking (LI)
 * 2015-03-14: Added combine with type-checking (JR)
 */
function combine(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid positional markers&lt;/h3&gt; 
&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;////////////////////////////////////////////////////////////////////////////////
// Scope Model Instantiation
////////////////////////////////////////////////////////////////////////////////
$scope.model = {
  menu: &quot;foo&quot;,
  nav: &quot;bar&quot;
};

////////////////////////////////////////////////////////////////////////////////
// Action setup
////////////////////////////////////////////////////////////////////////////////
const actions = function() {
  // ...
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$scope.model = {
  menu: &quot;foo&quot;,
  nav: &quot;bar&quot;
};

const actions = function() {
  // ...
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Translation&lt;/h2&gt; 
&lt;p&gt;This is also available in other languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Armenia.png&quot; alt=&quot;am&quot;&gt; &lt;strong&gt;Armenian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hanumanum/clean-code-javascript&quot;&gt;hanumanum/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bangladesh.png&quot; alt=&quot;bd&quot;&gt; &lt;strong&gt;Bangla(বাংলা)&lt;/strong&gt;: &lt;a href=&quot;https://github.com/InsomniacSabbir/clean-code-javascript/&quot;&gt;InsomniacSabbir/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&quot; alt=&quot;br&quot;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/fesnt/clean-code-javascript&quot;&gt;fesnt/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&quot; alt=&quot;cn&quot;&gt; &lt;strong&gt;Simplified Chinese&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/alivebao/clean-code-js&quot;&gt;alivebao/clean-code-js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beginor/clean-code-javascript&quot;&gt;beginor/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png&quot; alt=&quot;tw&quot;&gt; &lt;strong&gt;Traditional Chinese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/AllJointTW/clean-code-javascript&quot;&gt;AllJointTW/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png&quot; alt=&quot;fr&quot;&gt; &lt;strong&gt;French&lt;/strong&gt;: &lt;a href=&quot;https://github.com/GavBaros/clean-code-javascript-fr&quot;&gt;GavBaros/clean-code-javascript-fr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png&quot; alt=&quot;de&quot;&gt; &lt;strong&gt;German&lt;/strong&gt;: &lt;a href=&quot;https://github.com/marcbruederlin/clean-code-javascript&quot;&gt;marcbruederlin/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Indonesia.png&quot; alt=&quot;id&quot;&gt; &lt;strong&gt;Indonesia&lt;/strong&gt;: &lt;a href=&quot;https://github.com/andirkh/clean-code-javascript/&quot;&gt;andirkh/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png&quot; alt=&quot;it&quot;&gt; &lt;strong&gt;Italian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/frappacchio/clean-code-javascript/&quot;&gt;frappacchio/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&quot; alt=&quot;ja&quot;&gt; &lt;strong&gt;Japanese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mitsuruog/clean-code-javascript/&quot;&gt;mitsuruog/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&quot; alt=&quot;kr&quot;&gt; &lt;strong&gt;Korean&lt;/strong&gt;: &lt;a href=&quot;https://github.com/qkraudghgh/clean-code-javascript-ko&quot;&gt;qkraudghgh/clean-code-javascript-ko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png&quot; alt=&quot;pl&quot;&gt; &lt;strong&gt;Polish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/greg-dev/clean-code-javascript-pl&quot;&gt;greg-dev/clean-code-javascript-pl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&quot; alt=&quot;ru&quot;&gt; &lt;strong&gt;Russian&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BoryaMogila/clean-code-javascript-ru/&quot;&gt;BoryaMogila/clean-code-javascript-ru/&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/maksugr/clean-code-javascript&quot;&gt;maksugr/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png&quot; alt=&quot;es&quot;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/tureey/clean-code-javascript&quot;&gt;tureey/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Uruguay.png&quot; alt=&quot;es&quot;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/andersontr15/clean-code-javascript-es&quot;&gt;andersontr15/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Serbia.png&quot; alt=&quot;rs&quot;&gt; &lt;strong&gt;Serbian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/doskovicmilos/clean-code-javascript&quot;&gt;doskovicmilos/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png&quot; alt=&quot;tr&quot;&gt; &lt;strong&gt;Turkish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/bsonmez/clean-code-javascript/tree/turkish-translation&quot;&gt;bsonmez/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png&quot; alt=&quot;ua&quot;&gt; &lt;strong&gt;Ukrainian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mindfr1k/clean-code-javascript-ua&quot;&gt;mindfr1k/clean-code-javascript-ua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png&quot; alt=&quot;vi&quot;&gt; &lt;strong&gt;Vietnamese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hienvd/clean-code-javascript/&quot;&gt;hienvd/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cypress-io/cypress</title>
      <link>https://github.com/cypress-io/cypress</link>
      <description>&lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://cloud.githubusercontent.com/assets/1268976/20607953/d7ae489c-b24a-11e6-9cc4-91c6c74c5e88.png&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://on.cypress.io&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://on.cypress.io/changelog&quot;&gt;Changelog&lt;/a&gt; | &lt;a href=&quot;https://on.cypress.io/roadmap&quot;&gt;Roadmap&lt;/a&gt; &lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt; The web has evolved. Finally, testing has too. &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; Fast, easy and reliable testing for anything that runs in a browser. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; Join us, we&#39;re &lt;a href=&quot;https://cypress.io/jobs&quot;&gt;hiring&lt;/a&gt;. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.npmjs.com/package/cypress&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dm/cypress.svg?sanitize=true&quot; alt=&quot;npm&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt; &lt;img src=&quot;https://img.shields.io/gitter/room/cypress-io/cypress.svg?sanitize=true&quot; alt=&quot;Gitter chat&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://stackshare.io/cypress&quot;&gt; &lt;img src=&quot;https://img.stackshare.io/misc/follow-on-stackshare-badge.svg?sanitize=true&quot; alt=&quot;StackShare&quot;&gt; &lt;/a&gt;&lt;br&gt; &lt;/p&gt; 
&lt;h2&gt;What is Cypress?&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://player.vimeo.com/video/237527670&quot;&gt; &lt;img alt=&quot;Why Cypress Video&quot; src=&quot;https://user-images.githubusercontent.com/1271364/31739717-dbdff0ee-b41c-11e7-9b16-bfa1b6ac1814.png&quot; width=&quot;75%&quot; height=&quot;75%&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/cypress&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/cypress.svg?sanitize=true&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Install Cypress for Mac, Linux, or Windows, then &lt;a href=&quot;https://docs.cypress.io/guides/getting-started/installing-cypress.html&quot;&gt;get started&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1271364/31740846-7bf607f0-b420-11e7-855f-41c996040d31.gif&quot; alt=&quot;installing-cli e1693232&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/CONTRIBUTING.md&quot;&gt;Contributing Guideline&lt;/a&gt; which explains repo organization, linting, testing, and other steps.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg?sanitize=true&quot; alt=&quot;license&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;Let the world know your project is using Cypress.io to test with this cool badge&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.cypress.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg?sanitize=true&quot; alt=&quot;Cypress.io&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>bvaughn/react-virtualized</title>
      <link>https://github.com/bvaughn/react-virtualized</link>
      <description>&lt;p&gt;React components for efficiently rendering large lists and tabular data&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://bvaughn.github.io/react-virtualized/&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/29597/11737732/0ca1e55e-9f91-11e5-97f3-098f2f8ed866.png&quot; alt=&quot;React virtualized&quot; data-canonical-src=&quot;https://cloud.githubusercontent.com/assets/29597/11737732/0ca1e55e-9f91-11e5-97f3-098f2f8ed866.png&quot; width=&quot;330&quot; height=&quot;100&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/react-virtualized&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/react-virtualized.svg?style=flat&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/npm/l/react-virtualized.svg?style=flat&quot; alt=&quot;NPM license&quot;&gt; &lt;a href=&quot;https://npmcharts.com/compare/react-virtualized?minimal=true&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/react-virtualized.svg?style=flat&quot; alt=&quot;NPM total downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmcharts.com/compare/react-virtualized?minimal=true&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/react-virtualized.svg?style=flat&quot; alt=&quot;NPM monthly downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/bvaughn/react-virtualized/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/bvaughn/react-virtualized/tree/master.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/github/bvaughn/react-virtualized&quot;&gt;&lt;img src=&quot;https://img.shields.io/codecov/c/github/bvaughn/react-virtualized/master.svg?sanitize=true&quot; alt=&quot;Codecov badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backers/badge.svg?sanitize=true&quot; alt=&quot;OpenCollective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/#sponsors&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsors/badge.svg?sanitize=true&quot; alt=&quot;OpenCollective&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;React components for efficiently rendering large lists and tabular data. Check out &lt;a href=&quot;https://bvaughn.github.io/react-virtualized/&quot;&gt;the demo&lt;/a&gt; for some examples.&lt;/p&gt; 
&lt;h3&gt;Sponsors&lt;/h3&gt; 
&lt;p&gt;The following wonderful companies have sponsored react-virtualized:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.treasuredata.com/&quot;&gt;&lt;img width=&quot;64&quot; height=&quot;64&quot; title=&quot;Treasure Data&quot; src=&quot;https://cloud.githubusercontent.com/assets/29597/17391516/962647f8-59cb-11e6-83be-aa1bac299dd0.png&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://developer.hpe.com/&quot;&gt;&lt;img width=&quot;64&quot; height=&quot;64&quot; title=&quot;HPE Dev&quot; src=&quot;https://user-images.githubusercontent.com/5983843/37311298-1c3a711a-261d-11e8-9129-ef1589d7063f.png&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/0/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/0/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/1/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/1/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/2/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/2/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/3/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/3/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/4/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/4/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/5/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/5/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/6/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/6/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/7/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/7/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/8/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/8/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/9/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/9/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/10/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/10/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/11/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/11/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/12/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/12/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/13/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/13/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/14/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/14/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/15/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/15/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/16/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/16/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/17/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/17/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/18/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/18/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/19/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/19/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/20/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/20/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/21/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/21/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/22/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/22/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/23/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/23/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/24/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/24/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/25/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/25/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/26/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/26/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/27/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/27/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/28/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/28/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/sponsor/29/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/sponsor/29/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/react-virtualized#sponsor&quot;&gt;Learn more about becoming a sponsor!&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/react-virtualized/backer/0/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/0/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/1/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/1/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/2/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/2/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/3/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/3/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/4/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/4/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/5/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/5/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/6/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/6/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/7/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/7/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/8/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/8/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/9/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/9/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/10/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/10/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/11/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/11/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/12/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/12/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/13/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/13/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/14/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/14/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/15/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/15/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/16/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/16/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/17/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/17/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/18/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/18/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/19/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/19/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/20/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/20/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/21/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/21/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/22/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/22/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/23/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/23/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/24/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/24/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/25/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/25/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/26/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/26/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/27/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/27/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/28/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/28/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/react-virtualized/backer/29/website&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://opencollective.com/react-virtualized/backer/29/avatar.svg?sanitize=true&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;A word about &lt;code&gt;react-window&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;If you’re considering adding &lt;code&gt;react-virtualized&lt;/code&gt; to a project, take a look at &lt;a href=&quot;https://github.com/bvaughn/react-window&quot;&gt;&lt;code&gt;react-window&lt;/code&gt;&lt;/a&gt; as a possible lighter-weight alternative. &lt;a href=&quot;https://github.com/bvaughn/react-window#how-is-react-window-different-from-react-virtualized&quot;&gt;Learn more about how the two libraries compare here.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;Install &lt;code&gt;react-virtualized&lt;/code&gt; using npm.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install react-virtualized --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ES6, CommonJS, and UMD builds are available with each distribution. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Most of react-virtualized&#39;s styles are functional (eg position, size).
// Functional styles are applied directly to DOM elements.
// The Table component ships with a few presentational styles as well.
// They are optional, but if you want them you will need to also import the CSS file.
// This only needs to be done once; probably during your application&#39;s bootstrapping process.
import &#39;react-virtualized/styles.css&#39;;

// You can import any component you want as a named export from &#39;react-virtualized&#39;, eg
import {Column, Table} from &#39;react-virtualized&#39;;

// But if you only use a few react-virtualized components,
// And you&#39;re concerned about increasing your application&#39;s bundle size,
// You can directly import only the components you need, like so:
import AutoSizer from &#39;react-virtualized/dist/commonjs/AutoSizer&#39;;
import List from &#39;react-virtualized/dist/commonjs/List&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note webpack 4 makes this optimization itself, see the &lt;a href=&quot;https://webpack.js.org/guides/tree-shaking/#mark-the-file-as-side-effect-free&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If the above syntax looks too cumbersome, or you import react-virtualized components from a lot of places, you can also configure a Webpack alias. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Partial webpack.config.js
{
  alias: {
    &#39;react-virtualized/List&#39;: &#39;react-virtualized/dist/es/List&#39;,
  },
  ...rest
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then you can just import like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import List from &#39;react-virtualized/List&#39;;

// Now you can use &amp;lt;List {...props} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use a global-friendly UMD build:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;path-to-react-virtualized/styles.css&quot; /&amp;gt;
&amp;lt;script src=&quot;path-to-react-virtualized/dist/umd/react-virtualized.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you’re ready to start using the components. You can learn more about which components react-virtualized has to offer &lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/#documentation&quot;&gt;below&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Dependencies&lt;/h2&gt; 
&lt;p&gt;React Virtualized has very few dependencies and most are managed by NPM automatically. However the following peer dependencies must be specified by your project in order to avoid version conflicts: &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;&lt;code&gt;react&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/react-dom&quot;&gt;&lt;code&gt;react-dom&lt;/code&gt;&lt;/a&gt;. NPM will not automatically install these for you but it will show you a warning message with instructions on how to install them.&lt;/p&gt; 
&lt;h2&gt;Pure Components&lt;/h2&gt; 
&lt;p&gt;By default all react-virtualized components use &lt;a href=&quot;https://facebook.github.io/react/docs/shallow-compare.html&quot;&gt;&lt;code&gt;shallowCompare&lt;/code&gt;&lt;/a&gt; to avoid re-rendering unless props or state has changed. This occasionally confuses users when a collection’s data changes (eg &lt;code&gt;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]&lt;/code&gt; =&amp;gt; &lt;code&gt;[&#39;d&#39;,&#39;e&#39;,&#39;f&#39;]&lt;/code&gt;) but props do not (eg &lt;code&gt;array.length&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;The solution to this is to let react-virtualized know that something external has changed. This can be done a couple of different ways.&lt;/p&gt; 
&lt;h6&gt;Pass-thru props&lt;/h6&gt; 
&lt;p&gt;The &lt;code&gt;shallowCompare&lt;/code&gt; method will detect changes to any props, even if they aren’t declared as &lt;code&gt;propTypes&lt;/code&gt;. This means you can also pass through additional properties that affect cell rendering to ensure changes are detected. For example, if you’re using &lt;code&gt;List&lt;/code&gt; to render a list of items that may be re-sorted after initial render- react-virtualized would not normally detect the sort operation because none of the properties it deals with change. However you can pass through the additional sort property to trigger a re-render. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;List {...listProps} sortBy={sortBy} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h6&gt;Public methods&lt;/h6&gt; 
&lt;p&gt;&lt;code&gt;Grid&lt;/code&gt; and &lt;code&gt;Collection&lt;/code&gt; components can be forcefully re-rendered using &lt;a href=&quot;https://facebook.github.io/react/docs/component-api.html#forceupdate&quot;&gt;&lt;code&gt;forceUpdate&lt;/code&gt;&lt;/a&gt;. For &lt;code&gt;Table&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt;, you’ll need to call &lt;a href=&quot;https://github.com/bvaughn/react-virtualized/raw/master/docs/Table.md#forceupdategrid&quot;&gt;&lt;code&gt;forceUpdateGrid&lt;/code&gt;&lt;/a&gt; to ensure that the inner &lt;code&gt;Grid&lt;/code&gt; is also updated. For &lt;code&gt;MultiGrid&lt;/code&gt;, you’ll need to call &lt;a href=&quot;https://github.com/bvaughn/react-virtualized/raw/master/docs/MultiGrid.md#forceupdategrids&quot;&gt;&lt;code&gt;forceUpdateGrids&lt;/code&gt;&lt;/a&gt; to ensure that the inner &lt;code&gt;Grid&lt;/code&gt;s are updated.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;API documentation available &lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/docs/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are also a couple of how-to guides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/docs/customizingStyles.md&quot;&gt;Customizing classes and styles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/docs/reverseList.md&quot;&gt;Displaying items in reverse order&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/docs/usingAutoSizer.md&quot;&gt;Using AutoSizer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/docs/creatingAnInfiniteLoadingList.md&quot;&gt;Creating an infinite-loading list&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/docs/tableWithNaturalSort.md&quot;&gt;Natural sort Table&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/docs/multiColumnSortTable.md&quot;&gt;Sorting a Table by multiple columns&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Examples for each component can be seen in &lt;a href=&quot;https://raw.githubusercontent.com/bvaughn/react-virtualized/master/docs/README.md&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Here are some online demos of each component:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/ArrowKeyStepper&quot;&gt;ArrowKeyStepper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/AutoSizer&quot;&gt;AutoSizer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/CellMeasurer&quot;&gt;CellMeasurer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/Collection&quot;&gt;Collection&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/ColumnSizer&quot;&gt;ColumnSizer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/Grid&quot;&gt;Grid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/InfiniteLoader&quot;&gt;InfiniteLoader&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/List&quot;&gt;List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/Masonry&quot;&gt;Masonry&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/MultiGrid&quot;&gt;MultiGrid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/ScrollSync&quot;&gt;ScrollSync&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/Table&quot;&gt;Table&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bvaughn.github.io/react-virtualized/#/components/WindowScroller&quot;&gt;WindowScroller&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And here are some “recipe” type demos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codesandbox.io/s/j30k46l7xw&quot;&gt;Table with resizable (drag and drop) columns&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rawgit.com/bvaughn/react-virtualized/master/playground/tree.html&quot;&gt;Collapsable tree view&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rawgit.com/bvaughn/react-virtualized/master/playground/grid.html&quot;&gt;Full-page grid (spreadsheet)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rawgit.com/bvaughn/react-virtualized/master/playground/chat.html&quot;&gt;Dynamic cell measuring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://rawgit.com/bvaughn/react-virtualized/master/playground/hover.html&quot;&gt;Cell hover effects&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported Browsers&lt;/h2&gt; 
&lt;p&gt;react-virtualized aims to support all evergreen browsers and recent mobile browsers for iOS and Android. IE 9+ is also supported (although IE 9 will require some user-defined, custom CSS since flexbox layout is not supported).&lt;/p&gt; 
&lt;p&gt;If you find a browser-specific problem, please report it along with a repro case. The easiest way to do this is probably by forking &lt;a href=&quot;https://plnkr.co/edit/6syKo8cx3RfoO96hXFT1&quot;&gt;this Plunker&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Friends&lt;/h2&gt; 
&lt;p&gt;Here are some great components built on top of react-virtualized:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/clauderic/react-infinite-calendar&quot;&gt;react-infinite-calendar&lt;/a&gt;: Infinite scrolling date-picker with localization, themes, keyboard support, and more&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/clauderic/react-sortable-hoc&quot;&gt;react-sortable-hoc&lt;/a&gt;: Higher-order components to turn any list into an animated, touch-friendly, sortable list&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fritz-c/react-sortable-tree&quot;&gt;react-sortable-tree&lt;/a&gt;: Drag-and-drop sortable representation of hierarchical data&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/emilebres/react-virtualized-checkbox&quot;&gt;react-virtualized-checkbox&lt;/a&gt;: Checkbox group component with virtualization for large number of options&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bvaughn/react-virtualized-select&quot;&gt;react-virtualized-select&lt;/a&gt;: Drop-down menu for React with windowing to support large numbers of options.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/diogofcunha/react-virtualized-tree/&quot;&gt;react-virtualized-tree&lt;/a&gt;: A reactive tree component that aims to render large sets of tree structured data in an elegant and performant way&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BHP-DevHub/react-timeline-9000/&quot;&gt;react-timeline-9000&lt;/a&gt;: A calendar timeline component that is capable of displaying and interacting with a large number of items&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributions&lt;/h2&gt; 
&lt;p&gt;Use &lt;a href=&quot;https://github.com/bvaughn/react-virtualized/issues&quot;&gt;GitHub issues&lt;/a&gt; for requests.&lt;/p&gt; 
&lt;p&gt;I actively welcome pull requests; learn how to &lt;a href=&quot;https://github.com/bvaughn/react-virtualized/raw/master/CONTRIBUTING.md&quot;&gt;contribute&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;Changes are tracked in the &lt;a href=&quot;https://github.com/bvaughn/react-virtualized/raw/master/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;react-virtualized&lt;/em&gt; is available under the MIT License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>eslint/eslint</title>
      <link>https://github.com/eslint/eslint</link>
      <description>&lt;p&gt;Find and fix problems in your JavaScript code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/eslint&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/eslint.svg?sanitize=true&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/eslint&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/eslint.svg?sanitize=true&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/eslint/eslint/actions&quot;&gt;&lt;img src=&quot;https://github.com/eslint/eslint/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Feslint%2Feslint?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Feslint%2Feslint.svg?type=shield&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&quot;https://opencollective.com/eslint&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/backers/eslint&quot; alt=&quot;Open Collective Backers&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/eslint&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/sponsors/eslint&quot; alt=&quot;Open Collective Sponsors&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/user?screen_name=geteslint&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/geteslint?label=Follow&amp;amp;style=social&quot; alt=&quot;Follow us on Twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;ESLint&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://eslint.org&quot;&gt;Website&lt;/a&gt; | &lt;a href=&quot;https://eslint.org/docs/user-guide/configuring&quot;&gt;Configuring&lt;/a&gt; | &lt;a href=&quot;https://eslint.org/docs/rules/&quot;&gt;Rules&lt;/a&gt; | &lt;a href=&quot;https://eslint.org/docs/developer-guide/contributing&quot;&gt;Contributing&lt;/a&gt; | &lt;a href=&quot;https://eslint.org/docs/developer-guide/contributing/reporting-bugs&quot;&gt;Reporting Bugs&lt;/a&gt; | &lt;a href=&quot;https://eslint.org/conduct&quot;&gt;Code of Conduct&lt;/a&gt; | &lt;a href=&quot;https://twitter.com/geteslint&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://groups.google.com/group/eslint&quot;&gt;Mailing List&lt;/a&gt; | &lt;a href=&quot;https://eslint.org/chat&quot;&gt;Chat Room&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. In many ways, it is similar to JSLint and JSHint with a few exceptions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;ESLint uses &lt;a href=&quot;https://github.com/eslint/espree&quot;&gt;Espree&lt;/a&gt; for JavaScript parsing.&lt;/li&gt; 
 &lt;li&gt;ESLint uses an AST to evaluate patterns in code.&lt;/li&gt; 
 &lt;li&gt;ESLint is completely pluggable, every single rule is a plugin and you can add more at runtime.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#installation-and-usage&quot;&gt;Installation and Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#filing-issues&quot;&gt;Filing Issues&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#faq&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#releases&quot;&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#security-policy&quot;&gt;Security Policy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#semantic-versioning-policy&quot;&gt;Semantic Versioning Policy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#stylistic-rule-updates&quot;&gt;Stylistic Rule Updates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#team&quot;&gt;Team&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#sponsors&quot;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/#technology-sponsors&quot;&gt;Technology Sponsors&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;a name=&quot;installation-and-usage&quot;&gt;&lt;/a&gt;Installation and Usage&lt;/h2&gt; 
&lt;p&gt;Prerequisites: &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; (&lt;code&gt;^12.22.0&lt;/code&gt;, &lt;code&gt;^14.17.0&lt;/code&gt;, or &lt;code&gt;&amp;gt;=16.0.0&lt;/code&gt;) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)&lt;/p&gt; 
&lt;p&gt;You can install ESLint using npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ npm install eslint --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You should then set up a configuration file:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./node_modules/.bin/eslint --init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After that, you can run ESLint on any file or directory like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ ./node_modules/.bin/eslint yourfile.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;a name=&quot;configuration&quot;&gt;&lt;/a&gt;Configuration&lt;/h2&gt; 
&lt;p&gt;After running &lt;code&gt;eslint --init&lt;/code&gt;, you’ll have a &lt;code&gt;.eslintrc&lt;/code&gt; file in your directory. In it, you’ll see some rules configured like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;rules&quot;: {
        &quot;semi&quot;: [&quot;error&quot;, &quot;always&quot;],
        &quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The names &lt;code&gt;&quot;semi&quot;&lt;/code&gt; and &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; are the names of &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;rules&lt;/a&gt; in ESLint. The first value is the error level of the rule and can be one of these values:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&quot;off&quot;&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; - turn the rule off&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&quot;warn&quot;&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; - turn the rule on as a warning (doesn’t affect exit code)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&quot;error&quot;&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; - turn the rule on as an error (exit code will be 1)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the &lt;a href=&quot;https://eslint.org/docs/user-guide/configuring&quot;&gt;configuration docs&lt;/a&gt;).&lt;/p&gt; 
&lt;h2&gt;&lt;a name=&quot;code-of-conduct&quot;&gt;&lt;/a&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;ESLint adheres to the &lt;a href=&quot;https://eslint.org/conduct&quot;&gt;JS Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a name=&quot;filing-issues&quot;&gt;&lt;/a&gt;Filing Issues&lt;/h2&gt; 
&lt;p&gt;Before filing an issue, please be sure to read the guidelines for what you’re reporting:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://eslint.org/docs/developer-guide/contributing/reporting-bugs&quot;&gt;Bug Report&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://eslint.org/docs/developer-guide/contributing/new-rules&quot;&gt;Propose a New Rule&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://eslint.org/docs/developer-guide/contributing/rule-changes&quot;&gt;Proposing a Rule Change&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://eslint.org/docs/developer-guide/contributing/changes&quot;&gt;Request a Change&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a name=&quot;faq&quot;&gt;&lt;/a&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;h3&gt;I’m using JSCS, should I migrate to ESLint?&lt;/h3&gt; 
&lt;p&gt;Yes. &lt;a href=&quot;https://eslint.org/blog/2016/07/jscs-end-of-life&quot;&gt;JSCS has reached end of life&lt;/a&gt; and is no longer supported.&lt;/p&gt; 
&lt;p&gt;We have prepared a &lt;a href=&quot;https://eslint.org/docs/user-guide/migrating-from-jscs&quot;&gt;migration guide&lt;/a&gt; to help you convert your JSCS settings to an ESLint configuration.&lt;/p&gt; 
&lt;p&gt;We are now at or near 100% compatibility with JSCS. If you try ESLint and believe we are not yet compatible with a JSCS rule/configuration, please create an issue (mentioning that it is a JSCS compatibility issue) and we will evaluate it as per our normal process.&lt;/p&gt; 
&lt;h3&gt;Does Prettier replace ESLint?&lt;/h3&gt; 
&lt;p&gt;No, ESLint does both traditional linting (looking for problematic patterns) and style checking (enforcement of conventions). You can use ESLint for everything, or you can combine both using Prettier to format your code and ESLint to catch possible errors.&lt;/p&gt; 
&lt;h3&gt;Why can’t ESLint find my plugins?&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure your plugins (and ESLint) are both in your project’s &lt;code&gt;package.json&lt;/code&gt; as devDependencies (or dependencies, if your project uses ESLint at runtime).&lt;/li&gt; 
 &lt;li&gt;Make sure you have run &lt;code&gt;npm install&lt;/code&gt; and all your dependencies are installed.&lt;/li&gt; 
 &lt;li&gt;Make sure your plugins’ peerDependencies have been installed as well. You can use &lt;code&gt;npm view eslint-plugin-myplugin peerDependencies&lt;/code&gt; to see what peer dependencies &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt; has.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Does ESLint support JSX?&lt;/h3&gt; 
&lt;p&gt;Yes, ESLint natively supports parsing JSX syntax (this must be enabled in &lt;a href=&quot;https://eslint.org/docs/user-guide/configuring&quot;&gt;configuration&lt;/a&gt;). Please note that supporting JSX syntax &lt;em&gt;is not&lt;/em&gt; the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn’t recognize. We recommend using &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt; if you are using React and want React semantics.&lt;/p&gt; 
&lt;h3&gt;What ECMAScript versions does ESLint support?&lt;/h3&gt; 
&lt;p&gt;ESLint has full support for ECMAScript 3, 5 (default), 2015, 2016, 2017, 2018, 2019, and 2020. You can set your desired ECMAScript syntax (and other settings, like global variables or your target environments) through &lt;a href=&quot;https://eslint.org/docs/user-guide/configuring&quot;&gt;configuration&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;What about experimental features?&lt;/h3&gt; 
&lt;p&gt;ESLint’s parser only officially supports the latest final ECMAScript standard. We will make changes to core rules in order to avoid crashes on stage 3 ECMAScript syntax proposals (as long as they are implemented using the correct experimental ESTree syntax). We may make changes to core rules to better work with language extensions (such as JSX, Flow, and TypeScript) on a case-by-case basis.&lt;/p&gt; 
&lt;p&gt;In other cases (including if rules need to warn on more or fewer cases due to new syntax, rather than just not crashing), we recommend you use other parsers and/or rule plugins. If you are using Babel, you can use the &lt;a href=&quot;https://github.com/babel/babel-eslint&quot;&gt;babel-eslint&lt;/a&gt; parser and &lt;a href=&quot;https://github.com/babel/eslint-plugin-babel&quot;&gt;eslint-plugin-babel&lt;/a&gt; to use any option available in Babel.&lt;/p&gt; 
&lt;p&gt;Once a language feature has been adopted into the ECMAScript standard (stage 4 according to the &lt;a href=&quot;https://tc39.github.io/process-document/&quot;&gt;TC39 process&lt;/a&gt;), we will accept issues and pull requests related to the new feature, subject to our &lt;a href=&quot;https://eslint.org/docs/developer-guide/contributing&quot;&gt;contributing guidelines&lt;/a&gt;. Until then, please use the appropriate parser and plugin(s) for your experimental feature.&lt;/p&gt; 
&lt;h3&gt;Where to ask for help?&lt;/h3&gt; 
&lt;p&gt;Join our &lt;a href=&quot;https://groups.google.com/group/eslint&quot;&gt;Mailing List&lt;/a&gt; or &lt;a href=&quot;https://eslint.org/chat&quot;&gt;Chatroom&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Why doesn’t ESLint lock dependency versions?&lt;/h3&gt; 
&lt;p&gt;Lock files like &lt;code&gt;package-lock.json&lt;/code&gt; are helpful for deployed applications. They ensure that dependencies are consistent between environments and across deployments.&lt;/p&gt; 
&lt;p&gt;Packages like &lt;code&gt;eslint&lt;/code&gt; that get published to the npm registry do not include lock files. &lt;code&gt;npm install eslint&lt;/code&gt; as a user will respect version constraints in ESLint’s &lt;code&gt;package.json&lt;/code&gt;. ESLint and its dependencies will be included in the user’s lock file if one exists, but ESLint’s own lock file would not be used.&lt;/p&gt; 
&lt;p&gt;We intentionally don’t lock dependency versions so that we have the latest compatible dependency versions in development and CI that our users get when installing ESLint in a project.&lt;/p&gt; 
&lt;p&gt;The Twilio blog has a &lt;a href=&quot;https://www.twilio.com/blog/lockfiles-nodejs&quot;&gt;deeper dive&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;&lt;a name=&quot;releases&quot;&gt;&lt;/a&gt;Releases&lt;/h2&gt; 
&lt;p&gt;We have scheduled releases every two weeks on Friday or Saturday. You can follow a &lt;a href=&quot;https://github.com/eslint/eslint/issues?q=is%3Aopen+is%3Aissue+label%3Arelease&quot;&gt;release issue&lt;/a&gt; for updates about the scheduling of any particular release.&lt;/p&gt; 
&lt;h2&gt;&lt;a name=&quot;security-policy&quot;&gt;&lt;/a&gt;Security Policy&lt;/h2&gt; 
&lt;p&gt;ESLint takes security seriously. We work hard to ensure that ESLint is safe for everyone and that security issues are addressed quickly and responsibly. Read the full &lt;a href=&quot;https://github.com/eslint/.github/raw/master/SECURITY.md&quot;&gt;security policy&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a name=&quot;semantic-versioning-policy&quot;&gt;&lt;/a&gt;Semantic Versioning Policy&lt;/h2&gt; 
&lt;p&gt;ESLint follows &lt;a href=&quot;https://semver.org&quot;&gt;semantic versioning&lt;/a&gt;. However, due to the nature of ESLint as a code quality tool, it’s not always clear when a minor or major version bump occurs. To help clarify this for everyone, we’ve defined the following semantic versioning policy for ESLint:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Patch release (intended to not break your lint build) 
  &lt;ul&gt; 
   &lt;li&gt;A bug fix in a rule that results in ESLint reporting fewer linting errors.&lt;/li&gt; 
   &lt;li&gt;A bug fix to the CLI or core (including formatters).&lt;/li&gt; 
   &lt;li&gt;Improvements to documentation.&lt;/li&gt; 
   &lt;li&gt;Non-user-facing changes such as refactoring code, adding, deleting, or modifying tests, and increasing test coverage.&lt;/li&gt; 
   &lt;li&gt;Re-releasing after a failed release (i.e., publishing a release that doesn’t work for anyone).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Minor release (might break your lint build) 
  &lt;ul&gt; 
   &lt;li&gt;A bug fix in a rule that results in ESLint reporting more linting errors.&lt;/li&gt; 
   &lt;li&gt;A new rule is created.&lt;/li&gt; 
   &lt;li&gt;A new option to an existing rule that does not result in ESLint reporting more linting errors by default.&lt;/li&gt; 
   &lt;li&gt;A new addition to an existing rule to support a newly-added language feature (within the last 12 months) that will result in ESLint reporting more linting errors by default.&lt;/li&gt; 
   &lt;li&gt;An existing rule is deprecated.&lt;/li&gt; 
   &lt;li&gt;A new CLI capability is created.&lt;/li&gt; 
   &lt;li&gt;New capabilities to the public API are added (new classes, new methods, new arguments to existing methods, etc.).&lt;/li&gt; 
   &lt;li&gt;A new formatter is created.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;eslint:recommended&lt;/code&gt; is updated and will result in strictly fewer linting errors (e.g., rule removals).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Major release (likely to break your lint build) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;eslint:recommended&lt;/code&gt; is updated and may result in new linting errors (e.g., rule additions, most rule option updates).&lt;/li&gt; 
   &lt;li&gt;A new option to an existing rule that results in ESLint reporting more linting errors by default.&lt;/li&gt; 
   &lt;li&gt;An existing formatter is removed.&lt;/li&gt; 
   &lt;li&gt;Part of the public API is removed or changed in an incompatible way. The public API includes: 
    &lt;ul&gt; 
     &lt;li&gt;Rule schemas&lt;/li&gt; 
     &lt;li&gt;Configuration schema&lt;/li&gt; 
     &lt;li&gt;Command-line options&lt;/li&gt; 
     &lt;li&gt;Node.js API&lt;/li&gt; 
     &lt;li&gt;Rule, formatter, parser, plugin APIs&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;According to our policy, any minor update may report more linting errors than the previous release (ex: from a bug fix). As such, we recommend using the tilde (&lt;code&gt;~&lt;/code&gt;) in &lt;code&gt;package.json&lt;/code&gt; e.g. &lt;code&gt;&quot;eslint&quot;: &quot;~3.1.0&quot;&lt;/code&gt; to guarantee the results of your builds.&lt;/p&gt; 
&lt;h2&gt;&lt;a name=&quot;stylistic-rule-updates&quot;&gt;&lt;/a&gt;Stylistic Rule Updates&lt;/h2&gt; 
&lt;p&gt;Stylistic rules are frozen according to &lt;a href=&quot;https://eslint.org/blog/2020/05/changes-to-rules-policies&quot;&gt;our policy&lt;/a&gt; on how we evaluate new rules and rule changes. This means:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Bug fixes&lt;/strong&gt;: We will still fix bugs in stylistic rules.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;New ECMAScript features&lt;/strong&gt;: We will also make sure stylistic rules are compatible with new ECMAScript features.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;New options&lt;/strong&gt;: We will &lt;strong&gt;not&lt;/strong&gt; add any new options to stylistic rules unless an option is the only way to fix a bug or support a newly-added ECMAScript feature.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a name=&quot;license&quot;&gt;&lt;/a&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Feslint%2Feslint?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Feslint%2Feslint.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a name=&quot;team&quot;&gt;&lt;/a&gt;Team&lt;/h2&gt; 
&lt;p&gt;These folks keep the project moving and are resources for help.&lt;/p&gt; 
&lt;!-- NOTE: This section is autogenerated. Do not manually edit.--&gt; 
&lt;!--teamstart--&gt; 
&lt;h3&gt;Technical Steering Committee (TSC)&lt;/h3&gt; 
&lt;p&gt;The people who manage releases, review feature requests, and meet regularly to ensure ESLint is properly maintained.&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/nzakas&quot;&gt; &lt;img src=&quot;https://github.com/nzakas.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Nicholas C. Zakas &lt;/a&gt; &lt;/td&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/btmills&quot;&gt; &lt;img src=&quot;https://github.com/btmills.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Brandon Mills &lt;/a&gt; &lt;/td&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/mdjermanovic&quot;&gt; &lt;img src=&quot;https://github.com/mdjermanovic.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Milos Djermanovic &lt;/a&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Reviewers&lt;/h3&gt; 
&lt;p&gt;The people who review and implement new features.&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/mysticatea&quot;&gt; &lt;img src=&quot;https://github.com/mysticatea.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Toru Nagashima &lt;/a&gt; &lt;/td&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/aladdin-add&quot;&gt; &lt;img src=&quot;https://github.com/aladdin-add.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; 薛定谔的猫 &lt;/a&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;h3&gt;Committers&lt;/h3&gt; 
&lt;p&gt;The people who review and fix bugs and help triage issues.&lt;/p&gt; 
&lt;table&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/brettz9&quot;&gt; &lt;img src=&quot;https://github.com/brettz9.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Brett Zamir &lt;/a&gt; &lt;/td&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/bmish&quot;&gt; &lt;img src=&quot;https://github.com/bmish.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Bryan Mishkin &lt;/a&gt; &lt;/td&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/g-plane&quot;&gt; &lt;img src=&quot;https://github.com/g-plane.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Pig Fang &lt;/a&gt; &lt;/td&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/anikethsaha&quot;&gt; &lt;img src=&quot;https://github.com/anikethsaha.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Anix &lt;/a&gt; &lt;/td&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/yeonjuan&quot;&gt; &lt;img src=&quot;https://github.com/yeonjuan.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; YeonJuan &lt;/a&gt; &lt;/td&gt;
   &lt;td align=&quot;center&quot; valign=&quot;top&quot; width=&quot;11%&quot;&gt; &lt;a href=&quot;https://github.com/snitin315&quot;&gt; &lt;img src=&quot;https://github.com/snitin315.png?s=75&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;br&gt; Nitin Kumar &lt;/a&gt; &lt;/td&gt;
  &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!--teamend--&gt; 
&lt;h2&gt;&lt;a name=&quot;sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;The following companies, organizations, and individuals support ESLint’s ongoing maintenance and development. &lt;a href=&quot;https://opencollective.com/eslint&quot;&gt;Become a Sponsor&lt;/a&gt; to get your logo on our README and website.&lt;/p&gt; 
&lt;!-- NOTE: This section is autogenerated. Do not manually edit.--&gt; 
&lt;!--sponsorsstart--&gt; 
&lt;h3&gt;Platinum Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://automattic.com&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/photomatt/d0ef3e1/logo.png&quot; alt=&quot;Automattic&quot; height=&quot;undefined&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Gold Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://nx.dev&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/nx/0efbe42/logo.png&quot; alt=&quot;Nx (by Nrwl)&quot; height=&quot;96&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://google.com/chrome&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/chrome/dc55bd4/logo.png&quot; alt=&quot;Chrome&#39;s Web Framework &amp;amp; Tools Performance Fund&quot; height=&quot;96&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.salesforce.com&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/salesforce/ca8f997/logo.png&quot; alt=&quot;Salesforce&quot; height=&quot;96&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.airbnb.com/&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/airbnb/d327d66/logo.png&quot; alt=&quot;Airbnb&quot; height=&quot;96&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coinbase.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1885080?v=4&quot; alt=&quot;Coinbase&quot; height=&quot;96&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://substack.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/53023767?v=4&quot; alt=&quot;Substack&quot; height=&quot;96&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Silver Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://retool.com/&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/retool/98ea68e/logo.png&quot; alt=&quot;Retool&quot; height=&quot;64&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://liftoff.io/&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/liftoff/5c4fa84/logo.png&quot; alt=&quot;Liftoff&quot; height=&quot;64&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Bronze Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://mobilen.nu&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/mobilen/e19860d/logo.png&quot; alt=&quot;Mobilen&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.crosswordsolver.org/anagram-solver/&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/anagram-solver/2666271/logo.png&quot; alt=&quot;Anagram Solver&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/eslint/eslint/master/null&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/bugsnag-stability-monitoring/c2cef36/logo.png&quot; alt=&quot;Bugsnag Stability Monitoring&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://mixpanel.com&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/mixpanel/cd682f7/logo.png&quot; alt=&quot;Mixpanel&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.vpsserver.com&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/vpsservercom/logo.png&quot; alt=&quot;VPS Server&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://icons8.com&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/icons8/7fa1641/logo.png&quot; alt=&quot;Icons8: free icons, photos, illustrations, and music&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.com&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/discordapp/f9645d9/logo.png&quot; alt=&quot;Discord&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://themeisle.com&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/themeisle/d5592fe/logo.png&quot; alt=&quot;ThemeIsle&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.firesticktricks.com&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/fire-stick-tricks/b8fbe2c/logo.png&quot; alt=&quot;Fire Stick Tricks&quot; height=&quot;32&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.practiceignition.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5753491?v=4&quot; alt=&quot;Practice Ignition&quot; height=&quot;32&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!--sponsorsend--&gt; 
&lt;h2&gt;&lt;a name=&quot;technology-sponsors&quot;&gt;&lt;/a&gt;Technology Sponsors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Site search (&lt;a href=&quot;https://eslint.org&quot;&gt;eslint.org&lt;/a&gt;) is sponsored by &lt;a href=&quot;https://www.algolia.com&quot;&gt;Algolia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Hosting for (&lt;a href=&quot;https://eslint.org&quot;&gt;eslint.org&lt;/a&gt;) is sponsored by &lt;a href=&quot;https://www.netlify.com&quot;&gt;Netlify&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Password management is sponsored by &lt;a href=&quot;https://www.1password.com&quot;&gt;1Password&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>githubocto/repo-visualizer</title>
      <link>https://github.com/githubocto/repo-visualizer</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Repo Visualizer&lt;/h1&gt; 
&lt;p&gt;A GitHub Action that creates an SVG diagram of your repo. Read more &lt;a href=&quot;https://octo.github.com/projects/repo-visualization&quot;&gt;in the writeup&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Please note that this is an experiment. If you have feature requests, please submit a PR or fork and use the code any way you need.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;For a full demo, check out the &lt;a href=&quot;https://github.com/githubocto/repo-visualizer&quot;&gt;githubocto/repo-visualizer&lt;/a&gt; repository.&lt;/p&gt; 
&lt;h2&gt;Inputs&lt;/h2&gt; 
&lt;h2&gt;&lt;code&gt;output_file&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;A path (relative to the root of your repo) to where you would like the diagram to live.&lt;/p&gt; 
&lt;p&gt;For example: images/diagram.svg&lt;/p&gt; 
&lt;p&gt;Default: diagram.svg&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;excluded_paths&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;A list of paths to exclude from the diagram, separated by commas.&lt;/p&gt; 
&lt;p&gt;For example: dist,node_modules&lt;/p&gt; 
&lt;p&gt;Default: node_modules,bower_components,dist,out,build,eject,.next,.netlify,.yarn,.vscode,package-lock.json,yarn.lock&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;max_depth&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;The maximum number of nested folders to show files within. A higher number will take longer to render.&lt;/p&gt; 
&lt;p&gt;Default: 9&lt;/p&gt; 
&lt;h2&gt;Example usage&lt;/h2&gt; 
&lt;p&gt;You’ll need to run the &lt;code&gt;actions/checkout&lt;/code&gt; Action beforehand, to check out the code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- name: Checkout code
  uses: actions/checkout@master
- name: Update diagram
  uses: githubocto/repo-visualizer@0.3.0
  with:
    output_file: &quot;images/diagram.svg&quot;
    excluded_paths: &quot;dist,node_modules&quot;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>d3/d3</title>
      <link>https://github.com/d3/d3</link>
      <description>&lt;p&gt;Bring data to life with SVG, Canvas and HTML. 📊📈🎉&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;D3: Data-Driven Documents&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://d3js.org&quot;&gt;&lt;img src=&quot;https://d3js.org/logo.svg?sanitize=true&quot; align=&quot;left&quot; hspace=&quot;10&quot; vspace=&quot;6&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;D3&lt;/strong&gt; (or &lt;strong&gt;D3.js&lt;/strong&gt;) is a JavaScript library for visualizing data using web standards. D3 helps you bring data to life using SVG, Canvas and HTML. D3 combines powerful visualization and interaction techniques with a data-driven approach to DOM manipulation, giving you the full capabilities of modern browsers and the freedom to design the right visual interface for your data.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://observablehq.com/@d3/learn-d3&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/d3/d3/raw/master/API.md&quot;&gt;API Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/d3/d3/releases&quot;&gt;Releases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://observablehq.com/@d3/gallery&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/d3/d3/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;If you use npm, &lt;code&gt;npm install d3&lt;/code&gt;. You can also download the &lt;a href=&quot;https://github.com/d3/d3/releases/latest&quot;&gt;latest release on GitHub&lt;/a&gt;. For vanilla HTML in modern browsers, import D3 from Skypack:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;

import * as d3 from &quot;https://cdn.skypack.dev/d3@7&quot;;

const div = d3.selectAll(&quot;div&quot;);

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For legacy environments, you can load D3’s UMD bundle from an npm-based CDN such as jsDelivr; a &lt;code&gt;d3&lt;/code&gt; global is exported:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/d3@7&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;

const div = d3.selectAll(&quot;div&quot;);

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use the standalone D3 microlibraries. For example, &lt;a href=&quot;https://github.com/d3/d3-selection&quot;&gt;d3-selection&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;

import {selectAll} from &quot;https://cdn.skypack.dev/d3-selection@3&quot;;

const div = selectAll(&quot;div&quot;);

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;D3 is written using &lt;a href=&quot;http://www.2ality.com/2014/09/es6-modules-final.html&quot;&gt;ES2015 modules&lt;/a&gt;. Create a custom bundle using Rollup, Webpack, or your preferred bundler. To import D3 into an ES2015 application, either import specific symbols from specific D3 modules:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {scaleLinear} from &quot;d3-scale&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or import everything into a namespace (here, &lt;code&gt;d3&lt;/code&gt;):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import * as d3 from &quot;d3&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or using dynamic import:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const d3 = await import(&quot;d3&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also import individual modules and combine them into a &lt;code&gt;d3&lt;/code&gt; object using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Object.assign&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const d3 = await Promise.all([
  import(&quot;d3-format&quot;),
  import(&quot;d3-geo&quot;),
  import(&quot;d3-geo-projection&quot;)
]).then(d3 =&amp;gt; Object.assign({}, ...d3));
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>OAI/OpenAPI-Specification</title>
      <link>https://github.com/OAI/OpenAPI-Specification</link>
      <description>&lt;p&gt;The OpenAPI Specification Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The OpenAPI Specification&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/OAI/OpenAPI-Specification/workflows/validate-markdown/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt; &lt;a href=&quot;https://www.codetriage.com/oai/openapi-specification&quot;&gt;&lt;img src=&quot;https://www.codetriage.com/oai/openapi-specification/badges/users.svg?sanitize=true&quot; alt=&quot;Issue triagers&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/16343502?v=3&amp;amp;s=200&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;The OpenAPI Specification is a community-driven open specification within the &lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI Initiative&lt;/a&gt;, a Linux Foundation Collaborative Project.&lt;/p&gt; 
&lt;p&gt;The OpenAPI Specification (OAS) defines a standard, programming language-agnostic interface description for HTTP APIs, which allows both humans and computers to discover and understand the capabilities of a service without requiring access to source code, additional documentation, or inspection of network traffic. When properly defined via OpenAPI, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interface descriptions have done for lower-level programming, the OpenAPI Specification removes guesswork in calling a service.&lt;/p&gt; 
&lt;p&gt;Use cases for machine-readable API definition documents include, but are not limited to: interactive documentation; code generation for documentation, clients, and servers; and automation of test cases. OpenAPI documents describe an APIs services and are represented in either YAML or JSON formats. These documents may either be produced and served statically or be generated dynamically from an application.&lt;/p&gt; 
&lt;p&gt;The OpenAPI Specification does not require rewriting existing APIs. It does not require binding any software to a service – the service being described may not even be owned by the creator of its description. It does, however, require the capabilities of the service be described in the structure of the OpenAPI Specification. Not all services can be described by OpenAPI – this specification is not intended to cover every possible style of HTTP APIs, but does include support for &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;REST APIs&lt;/a&gt;. The OpenAPI Specification does not mandate a specific development process such as design-first or code-first. It does facilitate either technique by establishing clear interactions with a HTTP API.&lt;/p&gt; 
&lt;p&gt;This GitHub project is the starting point for OpenAPI. Here you will find the information you need about the OpenAPI Specification, simple examples of what it looks like, and some general information regarding the project.&lt;/p&gt; 
&lt;h2&gt;Current Version - 3.1.0&lt;/h2&gt; 
&lt;p&gt;The current version of the OpenAPI specification is &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/versions/3.1.0.md&quot;&gt;OpenAPI Specification 3.1.0&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Previous Versions&lt;/h3&gt; 
&lt;p&gt;This repository also contains all &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/versions&quot;&gt;previous versions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Each folder in this repository, such as &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples&quot;&gt;examples&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas&quot;&gt;schemas&lt;/a&gt;, should contain folders pertaining to the current and previous versions of the specification.&lt;/p&gt; 
&lt;h2&gt;See It in Action&lt;/h2&gt; 
&lt;p&gt;If you just want to see it work, check out the &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples&quot;&gt;list of current examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Tools and Libraries&lt;/h2&gt; 
&lt;p&gt;Looking to see how you can create your own OpenAPI definition, present it, or otherwise use it? Check out the growing &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/IMPLEMENTATIONS.md&quot;&gt;list of implementations&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Participation&lt;/h2&gt; 
&lt;p&gt;The current process for development of the OpenAPI Specification is described in &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/DEVELOPMENT.md&quot;&gt;Development Guidelines&lt;/a&gt;. Development of the next version of the OpenAPI Specification is guided by the &lt;a href=&quot;https://www.openapis.org/participate/how-to-contribute/governance#TDC&quot;&gt;Technical Steering Committee (TSC)&lt;/a&gt;. This group of committers bring their API expertise, incorporate feedback from the community, and expand the group of committers as appropriate. All development activity on the future specification will be performed as features and merged into this branch. Upon release of the future specification, this branch will be merged to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The TSC holds weekly web conferences to review open pull requests and discuss open issues related to the evolving OpenAPI Specification. Participation in weekly calls and scheduled working sessions is open to the community. You can view the &lt;a href=&quot;https://openapi.groups.io/g/tsc/calendar&quot;&gt;TSC calendar online&lt;/a&gt;. Look for the “Subscribe to Calendar” button for instructions on subscribing.&lt;/p&gt; 
&lt;p&gt;The OpenAPI Initiative encourages participation from individuals and companies alike. If you want to participate in the evolution of the OpenAPI Specification, consider taking the following actions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/versions/3.1.0.md&quot;&gt;current specification&lt;/a&gt;. The human-readable markdown file &lt;em&gt;is the source of truth&lt;/em&gt; for the specification.&lt;/li&gt; 
 &lt;li&gt;Review the &lt;a href=&quot;https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/DEVELOPMENT.md&quot;&gt;development&lt;/a&gt; process so you understand how the spec is evolving.&lt;/li&gt; 
 &lt;li&gt;Check the &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/issues&quot;&gt;issues&lt;/a&gt; and &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/pulls&quot;&gt;pull requests&lt;/a&gt; to see if someone has already documented your idea or feedback on the specification. You can follow an existing conversation by subscribing to the existing issue or PR.&lt;/li&gt; 
 &lt;li&gt;Subscribe to an open issue a day (or a week) in your inbox via &lt;a href=&quot;https://www.codetriage.com/oai/openapi-specification&quot;&gt;CodeTriage.com&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Create an issue to describe a new concern. If possible, propose a solution.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Not all feedback can be accommodated and there may be solid arguments for or against a change being appropriate for the specification.&lt;/p&gt; 
&lt;h2&gt;Licensing&lt;/h2&gt; 
&lt;p&gt;See: &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/raw/main/LICENSE&quot;&gt;License (Apache-2.0)&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://ga-beacon.appspot.com/UA-831873-42/readme.md?pixel&quot; alt=&quot;Analytics&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OptimalBits/bull</title>
      <link>https://github.com/OptimalBits/bull</link>
      <description>&lt;p&gt;Premium Queue package for handling distributed jobs and messages in NodeJS.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;br&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/support/logo@2x.png&quot; width=&quot;300&quot;&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;p&gt; The fastest, most reliable, Redis-based queue for Node. &lt;br&gt; Carefully written for rock solid stability and atomicity. &lt;/p&gt; 
 &lt;br&gt; 
 &lt;p&gt; &lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/#-sponsors-&quot;&gt;&lt;strong&gt;Sponsors&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/#bull-features&quot;&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/#uis&quot;&gt;&lt;strong&gt;UIs&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/#install&quot;&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/#quick-guide&quot;&gt;&lt;strong&gt;Quick Guide&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/#documentation&quot;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; 
 &lt;p&gt;Check the new &lt;a href=&quot;https://optimalbits.github.io/bull/&quot;&gt;&lt;strong&gt;Guide!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
 &lt;a href=&quot;https://optimalbits.github.io/bull/&quot;&gt; &lt;br&gt; &lt;/a&gt;
 &lt;p&gt;&lt;a href=&quot;https://optimalbits.github.io/bull/&quot;&gt; &lt;/a&gt;&lt;a href=&quot;https://gitter.im/OptimalBits/bull&quot;&gt; &lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://gitter.im/OptimalBits/bull&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dm/bull.svg?maxAge=2592000&quot;&gt; &lt;/a&gt; &lt;a href=&quot;http://travis-ci.org/OptimalBits/bull&quot;&gt; &lt;img src=&quot;https://img.shields.io/travis/OptimalBits/bull/master.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;http://badge.fury.io/js/bull&quot;&gt; &lt;img src=&quot;https://badge.fury.io/js/bull.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/OptimalBits/bull?branch=master&quot;&gt; &lt;img src=&quot;https://coveralls.io/repos/github/OptimalBits/bull/badge.svg?branch=master&quot;&gt; &lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/OptimalBits/bull&quot;&gt; &lt;img src=&quot;http://isitmaintained.com/badge/open/optimalbits/bull.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;a href=&quot;http://isitmaintained.com/project/OptimalBits/bull&quot;&gt; &lt;img src=&quot;http://isitmaintained.com/badge/resolution/optimalbits/bull.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;/div&gt; 
&lt;h3&gt;📻 News and updates&lt;/h3&gt; 
&lt;p&gt;Follow me on &lt;a href=&quot;http://twitter.com/manast&quot;&gt;Twitter&lt;/a&gt; for important news and updates.&lt;/p&gt; 
&lt;h3&gt;🛠 Tutorials&lt;/h3&gt; 
&lt;p&gt;You can find tutorials and news in this blog: https://blog.taskforce.sh/&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;BullMQ&lt;/h3&gt; 
&lt;p&gt;If you want to start using the next major version of Bull written entirely in Typescript you are welcome to the new repo &lt;a href=&quot;https://github.com/taskforcesh/bullmq&quot;&gt;here&lt;/a&gt;. Otherwise you are very welcome to still use Bull, which is a safe, battle tested codebase.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;🚀 Sponsors 🚀&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://dashboard.redisgreen.net/new?utm_campaign=BULLMQ&quot;&gt;&lt;img src=&quot;https://www.redisgreen.com/images/rglogo/redisgreen_transparent_240x48.png&quot; width=&quot;150&quot; alt=&quot;RedisGreen&quot; style=&quot;padding: 100px&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you need high quality production Redis instances for your Bull projects, please consider subscribing to &lt;a href=&quot;https://dashboard.redisgreen.net/new?utm_campaign=BULLMQ&quot;&gt;RedisGreen&lt;/a&gt;, leaders in Redis hosting that works perfectly with Bull. Use the promo code “BULLMQ” when signing up to help us sponsor the development of Bull!&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Official FrontEnd&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://taskforce.sh&quot;&gt;&lt;img src=&quot;http://taskforce.sh/assets/logo_square.png&quot; width=&quot;100&quot; alt=&quot;Taskforce.sh, Inc&quot; style=&quot;padding: 100px&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Supercharge your queues with a professional front end:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get a complete overview of all your queues.&lt;/li&gt; 
 &lt;li&gt;Inspect jobs, search, retry, or promote delayed jobs.&lt;/li&gt; 
 &lt;li&gt;Metrics and statistics.&lt;/li&gt; 
 &lt;li&gt;and many more features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sign up at &lt;a href=&quot;https://taskforce.sh&quot;&gt;Taskforce.sh&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Bull Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;[x] Minimal CPU usage due to a polling-free design.&lt;/li&gt; 
 &lt;li&gt;[x] Robust design based on Redis.&lt;/li&gt; 
 &lt;li&gt;[x] Delayed jobs.&lt;/li&gt; 
 &lt;li&gt;[x] Schedule and repeat jobs according to a cron specification.&lt;/li&gt; 
 &lt;li&gt;[x] Rate limiter for jobs.&lt;/li&gt; 
 &lt;li&gt;[x] Retries.&lt;/li&gt; 
 &lt;li&gt;[x] Priority.&lt;/li&gt; 
 &lt;li&gt;[x] Concurrency.&lt;/li&gt; 
 &lt;li&gt;[x] Pause/resume—globally or locally.&lt;/li&gt; 
 &lt;li&gt;[x] Multiple job types per queue.&lt;/li&gt; 
 &lt;li&gt;[x] Threaded (sandboxed) processing functions.&lt;/li&gt; 
 &lt;li&gt;[x] Automatic recovery from process crashes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And coming up on the roadmap…&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[ ] Job completion acknowledgement (you can use the message queue &lt;a href=&quot;https://github.com/OptimalBits/bull/raw/develop/PATTERNS.md#returning-job-completions&quot;&gt;pattern&lt;/a&gt; in the meantime).&lt;/li&gt; 
 &lt;li&gt;[ ] Parent-child jobs relationships.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;UIs&lt;/h3&gt; 
&lt;p&gt;There are a few third-party UIs that you can use for monitoring:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;BullMQ&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://taskforce.sh&quot;&gt;Taskforce&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bull v3&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://taskforce.sh&quot;&gt;Taskforce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vcapretz/bull-board&quot;&gt;bull-board&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/darky/bull-repl&quot;&gt;bull-repl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/s-r-x/bull-monitor&quot;&gt;bull-monitor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AbhilashJN/monitoro&quot;&gt;Monitoro&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bull &amp;lt;= v2&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ShaneK/Matador&quot;&gt;Matador&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kfatehi/react-bull&quot;&gt;react-bull&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Epharmix/Toureiro&quot;&gt;Toureiro&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;Monitoring &amp;amp; Alerting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;With Prometheus &lt;a href=&quot;https://github.com/UpHabit/bull_exporter&quot;&gt;Bull Queue Exporter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;Feature Comparison&lt;/h3&gt; 
&lt;p&gt;Since there are a few job queue solutions, here is a table comparing them:&lt;/p&gt; 
&lt;p&gt;| Feature | Bull | Kue | Bee | Agenda | | :———–– |:———––:|:—–:|:—:|:——:| | Backend | redis | redis |redis| mongo | | Priorities | ✓ | ✓ | | ✓ | | Concurrency | ✓ | ✓ | ✓ | ✓ | | Delayed jobs | ✓ | ✓ | | ✓ | | Global events | ✓ | ✓ | | | | Rate Limiter | ✓ | | | | | Pause/Resume | ✓ | ✓ | | | | Sandboxed worker| ✓ | | | | | Repeatable jobs | ✓ | | | ✓ | | Atomic ops | ✓ | | ✓ | | | Persistence | ✓ | ✓ | ✓ | ✓ | | UI | ✓ | ✓ | | ✓ | | Optimized for | Jobs / Messages | Jobs | Messages | Jobs |&lt;/p&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install bull --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add bull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Bull requires a Redis version greater than or equal to &lt;code&gt;2.8.18&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Typescript Definitions&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install @types/bull --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add --dev @types/bull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Definitions are currently maintained in the &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/bull&quot;&gt;DefinitelyTyped&lt;/a&gt; repo.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome all types of contributions, either code fixes, new features or doc improvements. Code formatting is enforced by &lt;a href=&quot;https://prettier.io/&quot;&gt;prettier&lt;/a&gt;. For commits please follow conventional &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0-beta.2/&quot;&gt;commits convention&lt;/a&gt;. All code must pass lint rules and test suites before it can be merged into develop.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Quick Guide&lt;/h3&gt; 
&lt;h4&gt;Basic Usage&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Queue = require(&#39;bull&#39;);

const videoQueue = new Queue(&#39;video transcoding&#39;, &#39;redis://127.0.0.1:6379&#39;);
const audioQueue = new Queue(&#39;audio transcoding&#39;, { redis: { port: 6379, host: &#39;127.0.0.1&#39;, password: &#39;foobared&#39; } }); // Specify Redis connection using object
const imageQueue = new Queue(&#39;image transcoding&#39;);
const pdfQueue = new Queue(&#39;pdf transcoding&#39;);

videoQueue.process(function (job, done) {

  // job.data contains the custom data passed when the job was created
  // job.id contains id of this job.

  // transcode video asynchronously and report progress
  job.progress(42);

  // call done when finished
  done();

  // or give a error if error
  done(new Error(&#39;error transcoding&#39;));

  // or pass it a result
  done(null, { framerate: 29.5 /* etc... */ });

  // If the job throws an unhandled exception it is also handled correctly
  throw new Error(&#39;some unexpected error&#39;);
});

audioQueue.process(function (job, done) {
  // transcode audio asynchronously and report progress
  job.progress(42);

  // call done when finished
  done();

  // or give a error if error
  done(new Error(&#39;error transcoding&#39;));

  // or pass it a result
  done(null, { samplerate: 48000 /* etc... */ });

  // If the job throws an unhandled exception it is also handled correctly
  throw new Error(&#39;some unexpected error&#39;);
});

imageQueue.process(function (job, done) {
  // transcode image asynchronously and report progress
  job.progress(42);

  // call done when finished
  done();

  // or give a error if error
  done(new Error(&#39;error transcoding&#39;));

  // or pass it a result
  done(null, { width: 1280, height: 720 /* etc... */ });

  // If the job throws an unhandled exception it is also handled correctly
  throw new Error(&#39;some unexpected error&#39;);
});

pdfQueue.process(function (job) {
  // Processors can also return promises instead of using the done callback
  return pdfAsyncProcessor();
});

videoQueue.add({ video: &#39;http://example.com/video1.mov&#39; });
audioQueue.add({ audio: &#39;http://example.com/audio1.mp3&#39; });
imageQueue.add({ image: &#39;http://example.com/image1.tiff&#39; });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using promises&lt;/h4&gt; 
&lt;p&gt;Alternatively, you can use return promises instead of using the &lt;code&gt;done&lt;/code&gt; callback:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;videoQueue.process(function (job) { // don&#39;t forget to remove the done callback!
  // Simply return a promise
  return fetchVideo(job.data.url).then(transcodeVideo);

  // Handles promise rejection
  return Promise.reject(new Error(&#39;error transcoding&#39;));

  // Passes the value the promise is resolved with to the &quot;completed&quot; event
  return Promise.resolve({ framerate: 29.5 /* etc... */ });

  // If the job throws an unhandled exception it is also handled correctly
  throw new Error(&#39;some unexpected error&#39;);
  // same as
  return Promise.reject(new Error(&#39;some unexpected error&#39;));
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Separate processes&lt;/h4&gt; 
&lt;p&gt;The process function can also be run in a separate process. This has several advantages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The process is sandboxed so if it crashes it does not affect the worker.&lt;/li&gt; 
 &lt;li&gt;You can run blocking code without affecting the queue (jobs will not stall).&lt;/li&gt; 
 &lt;li&gt;Much better utilization of multi-core CPUs.&lt;/li&gt; 
 &lt;li&gt;Less connections to redis.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In order to use this feature just create a separate file with the processor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// processor.js
module.exports = function (job) {
  // Do some heavy work

  return Promise.resolve(result);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And define the processor like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Single process:
queue.process(&#39;/path/to/my/processor.js&#39;);

// You can use concurrency as well:
queue.process(5, &#39;/path/to/my/processor.js&#39;);

// and named processors:
queue.process(&#39;my processor&#39;, 5, &#39;/path/to/my/processor.js&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Repeated jobs&lt;/h4&gt; 
&lt;p&gt;A job can be added to a queue and processed repeatedly according to a cron specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  paymentsQueue.process(function (job) {
    // Check payments
  });

  // Repeat payment job once every day at 3:15 (am)
  paymentsQueue.add(paymentsData, { repeat: { cron: &#39;15 3 * * *&#39; } });

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a tip, check your expressions here to verify they are correct: &lt;a href=&quot;https://crontab.cronhub.io&quot;&gt;cron expression generator&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Pause / Resume&lt;/h4&gt; 
&lt;p&gt;A queue can be paused and resumed globally (pass &lt;code&gt;true&lt;/code&gt; to pause processing for just this worker):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;queue.pause().then(function () {
  // queue is paused now
});

queue.resume().then(function () {
  // queue is resumed now
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Events&lt;/h4&gt; 
&lt;p&gt;A queue emits some useful events, for example…&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;.on(&#39;completed&#39;, function (job, result) {
  // Job completed with output result!
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on events, including the full list of events that are fired, check out the &lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/REFERENCE.md#events&quot;&gt;Events reference&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Queues performance&lt;/h4&gt; 
&lt;p&gt;Queues are cheap, so if you need many of them just create new ones with different names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const userJohn = new Queue(&#39;john&#39;);
const userLisa = new Queue(&#39;lisa&#39;);
.
.
.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However every queue instance will require new redis connections, check how to &lt;a href=&quot;https://github.com/OptimalBits/bull/raw/master/PATTERNS.md#reusing-redis-connections&quot;&gt;reuse connections&lt;/a&gt; or you can also use &lt;a href=&quot;https://github.com/OptimalBits/bull/raw/master/REFERENCE.md#queueprocess&quot;&gt;named processors&lt;/a&gt; to achieve a similar result.&lt;/p&gt; 
&lt;h4&gt;Cluster support&lt;/h4&gt; 
&lt;p&gt;NOTE: From version 3.2.0 and above it is recommended to use threaded processors instead.&lt;/p&gt; 
&lt;p&gt;Queues are robust and can be run in parallel in several threads or processes without any risk of hazards or queue corruption. Check this simple example using cluster to parallelize jobs across processes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Queue = require(&#39;bull&#39;);
const cluster = require(&#39;cluster&#39;);

const numWorkers = 8;
const queue = new Queue(&#39;test concurrent queue&#39;);

if (cluster.isMaster) {
  for (let i = 0; i &amp;lt; numWorkers; i++) {
    cluster.fork();
  }

  cluster.on(&#39;online&#39;, function (worker) {
    // Let&#39;s create a few jobs for the queue workers
    for (let i = 0; i &amp;lt; 500; i++) {
      queue.add({ foo: &#39;bar&#39; });
    };
  });

  cluster.on(&#39;exit&#39;, function (worker, code, signal) {
    console.log(&#39;worker &#39; + worker.process.pid + &#39; died&#39;);
  });
} else {
  queue.process(function (job, jobDone) {
    console.log(&#39;Job done by worker&#39;, cluster.worker.id, job.id);
    jobDone();
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For the full documentation, check out the reference and common patterns:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://optimalbits.github.io/bull/&quot;&gt;Guide&lt;/a&gt; — Your starting point for developing with Bull.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/REFERENCE.md&quot;&gt;Reference&lt;/a&gt; — Reference document with all objects and methods available.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/PATTERNS.md&quot;&gt;Patterns&lt;/a&gt; — a set of examples for common patterns.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/LICENSE.md&quot;&gt;License&lt;/a&gt; — the Bull license—it’s MIT.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you see anything that could use more docs, please submit a pull request!&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Important Notes&lt;/h3&gt; 
&lt;p&gt;The queue aims for an “at least once” working strategy. This means that in some situations, a job could be processed more than once. This mostly happens when a worker fails to keep a lock for a given job during the total duration of the processing.&lt;/p&gt; 
&lt;p&gt;When a worker is processing a job it will keep the job “locked” so other workers can’t process it.&lt;/p&gt; 
&lt;p&gt;It’s important to understand how locking works to prevent your jobs from losing their lock - becoming &lt;em&gt;stalled&lt;/em&gt; - and being restarted as a result. Locking is implemented internally by creating a lock for &lt;code&gt;lockDuration&lt;/code&gt; on interval &lt;code&gt;lockRenewTime&lt;/code&gt; (which is usually half &lt;code&gt;lockDuration&lt;/code&gt;). If &lt;code&gt;lockDuration&lt;/code&gt; elapses before the lock can be renewed, the job will be considered stalled and is automatically restarted; it will be &lt;strong&gt;double processed&lt;/strong&gt;. This can happen when:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The Node process running your job processor unexpectedly terminates.&lt;/li&gt; 
 &lt;li&gt;Your job processor was too CPU-intensive and stalled the Node event loop, and as a result, Bull couldn’t renew the job lock (see &lt;a href=&quot;https://github.com/OptimalBits/bull/issues/488&quot;&gt;#488&lt;/a&gt; for how we might better detect this). You can fix this by breaking your job processor into smaller parts so that no single part can block the Node event loop. Alternatively, you can pass a larger value for the &lt;code&gt;lockDuration&lt;/code&gt; setting (with the tradeoff being that it will take longer to recognize a real stalled job).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;As such, you should always listen for the &lt;code&gt;stalled&lt;/code&gt; event and log this to your error monitoring system, as this means your jobs are likely getting double-processed.&lt;/p&gt; 
&lt;p&gt;As a safeguard so problematic jobs won’t get restarted indefinitely (e.g. if the job processor always crashes its Node process), jobs will be recovered from a stalled state a maximum of &lt;code&gt;maxStalledCount&lt;/code&gt; times (default: &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mui-org/material-ui</title>
      <link>https://github.com/mui-org/material-ui</link>
      <description>&lt;p&gt;Material-UI is a simple and customizable component library to build faster, beautiful, and more accessible React applications. Follow your own design system, or start with Material Design.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://material-ui.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;img width=&quot;150&quot; src=&quot;https://material-ui.com/static/logo.svg?sanitize=true&quot; alt=&quot;Material-UI logo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt;Material-UI&lt;/h1&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;Quickly build beautiful &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; apps. Material-UI is a simple and customizable component library to build faster, beautiful, and more accessible React applications. Follow your own design system, or start with &lt;a href=&quot;https://material.io/design/introduction/&quot;&gt;Material Design&lt;/a&gt;.&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/mui-org/material-ui/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@material-ui/core&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@material-ui/core/latest.svg?sanitize=true&quot; alt=&quot;npm latest package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@material-ui/core&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@material-ui/core/next.svg?sanitize=true&quot; alt=&quot;npm next package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@material-ui/core&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/@material-ui/core.svg?sanitize=true&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.circleci.com/pipelines/github/mui-org/material-ui?branch=next&quot;&gt;&lt;img src=&quot;https://img.shields.io/circleci/project/github/mui-org/material-ui/next.svg?sanitize=true&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/mui-org/material-ui/branch/next&quot;&gt;&lt;img src=&quot;https://img.shields.io/codecov/c/github/mui-org/material-ui/next.svg?sanitize=true&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/MaterialUI&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/MaterialUI.svg?label=follow+Material-UI&quot; alt=&quot;Follow on Twitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/mui-org/material-ui/issues/27062&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/renovate-enabled-brightgreen.svg?sanitize=true&quot; alt=&quot;Renovate status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://isitmaintained.com/project/mui-org/material-ui&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;https://isitmaintained.com/badge/resolution/mui-org/material-ui.svg?sanitize=true&quot; alt=&quot;Average time to resolve an issue&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://translate.material-ui.com/project/material-ui-docs&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/material-ui-docs/localized.svg?sanitize=true&quot; alt=&quot;Crowdin&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/material-ui&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/all/material-ui&quot; alt=&quot;Open Collective backers and sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Material-UI is available as an &lt;a href=&quot;https://www.npmjs.com/package/@material-ui/core&quot;&gt;npm package&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://material-ui.com/&quot;&gt;Stable channel v4&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;// with npm
npm install @material-ui/core

// with yarn
yarn add @material-ui/core
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;⚠️ All ongoing work has moved to v5. The development of v4 is limited to important bug fixes, security patches and easing the upgrade path to v5.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://next.material-ui.com/&quot;&gt;Alpha channel v5&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;// with npm
npm install @material-ui/core@next @emotion/react @emotion/styled

// with yarn
yarn add @material-ui/core@next @emotion/react @emotion/styled
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;Older versions&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://v3.material-ui.com/&quot;&gt;v3.x&lt;/a&gt;&lt;/strong&gt; (&lt;a href=&quot;https://material-ui.com/guides/migration-v3/&quot;&gt;Migration from v3 to v4&lt;/a&gt;)&lt;/li&gt; 
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://v0.material-ui.com/&quot;&gt;v0.x&lt;/a&gt;&lt;/strong&gt; (&lt;a href=&quot;https://material-ui.com/guides/migration-v0x/&quot;&gt;Migration to v1&lt;/a&gt;)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;p&gt;Please note that &lt;code&gt;@next&lt;/code&gt; will only point to pre-releases; to get the latest stable release use &lt;code&gt;@latest&lt;/code&gt; instead.&lt;/p&gt; 
&lt;h2&gt;Who sponsors Material-UI?&lt;/h2&gt; 
&lt;h3&gt;Diamond 💎&lt;/h3&gt; 
&lt;p style=&quot;display: flex; justify-content: center;&quot;&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;octopus&quot; href=&quot;https://octopus.com/?utm_source=materialui&amp;amp;utm_medium=referral&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img height=&quot;128&quot; width=&quot;128&quot; src=&quot;https://avatars3.githubusercontent.com/u/1287123?s=256&quot; alt=&quot;octopus&quot; title=&quot;Repeatable, reliable deployments&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;doit-intl&quot; href=&quot;https://www.doit-intl.com/?utm_source=materialui&amp;amp;utm_medium=referral&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img height=&quot;128&quot; width=&quot;128&quot; src=&quot;https://avatars3.githubusercontent.com/u/8424863?s=256&quot; alt=&quot;doit-intl&quot; title=&quot;Management Platform for Google Cloud and AWS&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Diamond Sponsors are those who have pledged $1,500/month or more to Material-UI.&lt;/p&gt; 
&lt;h3&gt;Gold 🏆&lt;/h3&gt; 
&lt;p&gt;via &lt;a href=&quot;https://www.patreon.com/oliviertassinari&quot;&gt;Patreon&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;display: flex; justify-content: center;&quot;&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;tidelift&quot; href=&quot;https://tidelift.com/subscription/pkg/npm-material-ui?utm_source=npm-material-ui&amp;amp;utm_medium=referral&amp;amp;utm_campaign=homepage&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img height=&quot;96&quot; width=&quot;96&quot; src=&quot;https://github.com/tidelift.png?size=192&quot; alt=&quot;tidelift&quot; title=&quot;Enterprise-ready open source software&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;bitsrc&quot; href=&quot;https://bit.dev&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img height=&quot;96&quot; width=&quot;96&quot; src=&quot;https://github.com/teambit.png?size=192&quot; alt=&quot;bitsrc&quot; title=&quot;The fastest way to share code&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;movavi&quot; href=&quot;https://spicefactory.co/&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img height=&quot;96&quot; width=&quot;96&quot; src=&quot;https://avatars.githubusercontent.com/u/13365608?s=192&quot; alt=&quot;Next gen digital product studio.&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;via &lt;a href=&quot;https://opencollective.com/material-ui&quot;&gt;OpenCollective&lt;/a&gt;&lt;/p&gt; 
&lt;p style=&quot;display: flex; justify-content: center; flex-wrap: wrap;&quot;&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;textemall&quot; href=&quot;https://www.text-em-all.com&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img src=&quot;https://images.opencollective.com/callemall/a6946da/logo/192.png&quot; alt=&quot;call-em-all&quot; title=&quot;Mass Text Messaging &amp;amp; Automated Calling&quot; height=&quot;96&quot; width=&quot;96&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;canadacasino&quot; href=&quot;https://www.canadacasino.ca/&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img height=&quot;96&quot; width=&quot;96&quot; src=&quot;https://images.opencollective.com/canadacasino/5b19004/logo/192.png&quot; alt=&quot;canadacasino&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;hoodiebees&quot; href=&quot;https://hoodiebees.com/&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img height=&quot;96&quot; width=&quot;96&quot; src=&quot;https://images.opencollective.com/hoodiebees1/617b451/logo/192.png&quot; alt=&quot;hoodiebees&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;movavi&quot; href=&quot;https://www.movavi.com/&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img height=&quot;96&quot; width=&quot;96&quot; src=&quot;https://images.opencollective.com/movavi-software/a1d0167/logo/192.png&quot; alt=&quot;Screen recorder for Mac&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Direct&lt;/p&gt; 
&lt;p style=&quot;display: flex; justify-content: center; flex-wrap: wrap;&quot;&gt; &lt;a data-ga-event-category=&quot;sponsor&quot; data-ga-event-action=&quot;logo&quot; data-ga-event-label=&quot;elevator&quot; href=&quot;https://www.elevatormag.com/&quot; rel=&quot;noopener sponsored&quot; target=&quot;_blank&quot; style=&quot;margin-right: 16px;&quot;&gt;&lt;img src=&quot;https://material-ui.com/static/sponsors/elevator.png&quot; alt=&quot;elevator&quot; title=&quot;The dopest new hip hop, upcoming artsits, music news, culture, and style&quot; height=&quot;57&quot; width=&quot;191&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Gold Sponsors are those who have pledged $500/month or more to Material-UI.&lt;/p&gt; 
&lt;h3&gt;There is more!&lt;/h3&gt; 
&lt;p&gt;See the full list of &lt;a href=&quot;https://material-ui.com/discover-more/backers/&quot;&gt;our backers&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Here is a quick example to get you started, &lt;strong&gt;it’s all you need&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import * as React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import Button from &#39;@material-ui/core/Button&#39;;

function App() {
  return &amp;lt;Button variant=&quot;contained&quot;&amp;gt;Hello World&amp;lt;/Button&amp;gt;;
}

ReactDOM.render(&amp;lt;App /&amp;gt;, document.querySelector(&#39;#app&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yes, it’s really all you need to get started as you can see in this live and interactive demo:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/4j7m47vlm4&quot;&gt;&lt;img src=&quot;https://codesandbox.io/static/img/play-codesandbox.svg?sanitize=true&quot; alt=&quot;Edit Button&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Questions&lt;/h2&gt; 
&lt;p&gt;For &lt;em&gt;how-to&lt;/em&gt; questions and other non-issues, please use &lt;a href=&quot;https://stackoverflow.com/questions/tagged/material-ui&quot;&gt;StackOverflow&lt;/a&gt; instead of GitHub issues. There is a StackOverflow tag called “material-ui” that you can use to tag your questions.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Are you looking for an example project to get started? &lt;a href=&quot;https://material-ui.com/getting-started/example-projects/&quot;&gt;We host some&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://material-ui.com/&quot;&gt;documentation website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Premium Themes&lt;/h2&gt; 
&lt;p&gt;You can find complete templates &amp;amp; themes in the &lt;a href=&quot;https://material-ui.com/store/?utm_source=docs&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme-store&quot;&gt;Material-UI store&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://raw.githubusercontent.com/mui-org/material-ui/next/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Material-UI.&lt;/p&gt; 
&lt;p&gt;Notice that contributions go far beyond pull requests and commits. Although we love giving you the opportunity to put your stamp on Material-UI, we also are thrilled to receive a variety of &lt;a href=&quot;https://material-ui.com/getting-started/faq/#material-ui-is-awesome-how-can-i-support-the-project&quot;&gt;other contributions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;If you have recently updated, please read the &lt;a href=&quot;https://github.com/mui-org/material-ui/releases&quot;&gt;changelog&lt;/a&gt; for details of what has changed.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The future plans and high priority features and enhancements can be found in the &lt;a href=&quot;https://material-ui.com/discover-more/roadmap/&quot;&gt;roadmap&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/mui-org/material-ui/next/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsoring services&lt;/h2&gt; 
&lt;p&gt;These great services sponsor Material-UI’s core infrastructure:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; alt=&quot;GitHub&quot; src=&quot;https://github.githubassets.com/images/modules/logos_page/GitHub-Logo.png&quot; height=&quot;25&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GitHub allows us to host the Git repository.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.netlify.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; alt=&quot;Netlify&quot; src=&quot;https://cdn.netlify.com/15ecf59b59c9d04b88097c6b5d2c7e8a7d1302d0/1b6d6/img/press/logos/full-logo-light.svg?sanitize=true&quot; height=&quot;30&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Netlify allows us to distribute the documentation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://crowdin.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; alt=&quot;CrowdIn&quot; src=&quot;https://support.crowdin.com/assets/logos/crowdin-logo1-small.png&quot; height=&quot;30&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;CrowdIn allows us to translate the documentation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.browserstack.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; alt=&quot;BrowserStack&quot; src=&quot;https://www.browserstack.com/images/mail/browserstack-logo-footer.png&quot; height=&quot;30&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;BrowserStack allows us to test in real browsers.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://codecov.io/&quot;&gt;&lt;img loading=&quot;lazy&quot; alt=&quot;CodeCov&quot; src=&quot;https://github.com/codecov.png?size=70&quot; width=&quot;35&quot; height=&quot;35&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;CodeCov allows us to monitor the test coverage.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>a597873885/webfunny_monitor</title>
      <link>https://github.com/a597873885/webfunny_monitor</link>
      <description>&lt;p&gt;webfunny是一款轻量级的前端监控系统，webfunny也是一款前端性能监控系统，无埋点监控前端日志，实时分析前端健康状态。webfunny is a lightweight front-end monitoring system and webfunny is also a front-end performance monitoring system. It monitors front-end logs and analyzes front-end health status in real time.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img width=&quot;400&quot; src=&quot;http://www.webfunny.cn/resource/logo-letter.png&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;#项目大小&quot;&gt;&lt;img alt=&quot;GitHub repo size&quot; src=&quot;https://img.shields.io/github/repo-size/a597873885/webfunny_monitor&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#最近更新&quot;&gt;&lt;img alt=&quot;GitHub last commit&quot; src=&quot;https://img.shields.io/github/last-commit/a597873885/webfunny_monitor&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/a597873885/webfunny_monitor/issues&quot;&gt;&lt;img alt=&quot;GitHub issues&quot; src=&quot;https://img.shields.io/github/issues-raw/a597873885/webfunny_monitor&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/a597873885/webfunny_monitor/issues?q=is%3Aissue+is%3Aclosed&quot;&gt;&lt;img alt=&quot;GitHub closed issues&quot; src=&quot;https://img.shields.io/github/issues-closed-raw/a597873885/webfunny_monitor&quot;&gt;&lt;/a&gt; &lt;a href=&quot;#开源协议&quot;&gt;&lt;img alt=&quot;GitHub&quot; src=&quot;https://img.shields.io/github/license/a597873885/webfunny_monitor&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;如果你是一位前端工程师，那你一定不止一次去解决一些顽固的线上问题，你也曾想方设法复现用户的bug，结果可能都不太理想。 怎样定位前端线上问题，一直以来，都是很头疼的问题，因为它发生于用户的一系列操作之后。错误的原因可能源于机型，网络环境，复杂的操作行为等等，在我们想要去解决的时候很难复现出来，自然也就无法解决。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;身为一名前端工程师，我每天都要面临很多线上的问题，一时间让我焦头烂额。公司其他的监控系统也有，但是每次解决问题都需要辗转于各种监控系统之间，亦是疲惫不堪。所以，我便为自己（前端工程师）量身定做了这样一款监控系统，现在分享给大家使用，欢迎点击了解。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;只需要简单几步，你就可以搭建一套属于自己的前端监控系统了。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;了解作品&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.webfunny.cn/home.html&quot;&gt;【官网简介】&lt;/a&gt; | &lt;a href=&quot;http://www.webfunny.cn/demo/home.html&quot;&gt;【Demo效果】&lt;/a&gt; | &lt;a href=&quot;http://www.webfunny.cn/update.html&quot;&gt;【更新日志】&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;私有化部署方式&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/a597873885/webfunny_monitor/raw/master/DES.md&quot;&gt;【部署教程】&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/a597873885/webfunny_monitor/raw/master/DES_DOCKER.md&quot;&gt;【Docker部署】&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;联系作者微信&lt;/h3&gt; 
&lt;p&gt;微信号：webfunny_2020&lt;/p&gt; 
&lt;img width=&quot;150&quot; src=&quot;http://www.webfunny.cn/src/assets/img/wx_add.jpeg&quot;&gt; 
&lt;h3&gt;压力测试&lt;/h3&gt; 
&lt;p&gt;可支持日活千万级别PV量。&lt;/p&gt; 
&lt;h3&gt;目录结构&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;    |
    |──bin/                                    * 项目启动目录
    |     |
    |     |
    |     |—— domain.js                        * 域名配置文件
    |     |—— messageQueue.js                  * 消息队列开关配置文件
    |     |—— mysqlConfig.js                   * mysql数据库连接配置文件
    |     |—— purchaseCode.js                  * 激活码配置文件
    |     |—— saveDays.js                      * 日志存储周期配置文件
    |     |—— webfunny.js                      * 服务启动文件
    | 
    |
    |——config/                                 * 基础配置目录（使用者可以不用关注）
    |
    |——controllers/                            * 业务逻辑代码（已加密）
    |
    |——interceptor/                            * 拦截器代码（监控到的异常都会经过拦截器，使用者可以自定义报警）
    |             |
    |             |—— config/dingRobot.js      * 钉钉机器人配置
    |
    |——lib/
    |     |
    |     |—— RabbitMq.js                      * 消息对列创建文件
    |     |—— webfunny.min.js                  * 探针生成的模板文件
    |
    |——logs/
    |      |
    |      |——errors/                          * 监控系统运行错误日志目录（排查部署问题）
    |      |
    |      |——info/                            * 普通日志打印目录
    |
    |——schema/                                 * 基础表数据库字段设计
    |——schema_con/                             * 需要分表的数据库字段设计
    |
    |——modules/
    |         |
    |         |—— models.js                    * 业务逻辑代码（已加密）
    |
    |
    |——routes/                                 * 路由、定时器
    |
    |——views/                                  * 监控系统页面代码
    |
    |
    |
    |—— app.js                                 * 程序入口文件
    |—— Dockerfile.js                          * docker部署配置文件
    |—— restart.sh                             * 程序重启脚本文件（需设置此文件的执行权限）

    |—— 其他文件或目录，使用者大可不必关注
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>NervJS/taro</title>
      <link>https://github.com/NervJS/taro</link>
      <description>&lt;p&gt;开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发微信/京东/百度/支付宝/字节跳动/ QQ 小程序/H5/React Native 等应用。 https://taro.zone/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Taro&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&quot; alt=&quot;PRs Welcome&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@tarojs/cli&quot;&gt;&lt;img src=&quot;https://img.shields.io/node/v/@tarojs/cli.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@tarojs/taro&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@tarojs/taro.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@tarojs/taro&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/l/@tarojs/taro.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@tarojs/taro&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/@tarojs/taro.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/NervJS/taro&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/NervJS/taro.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/NervJS/taro/next/README.md&quot;&gt;简体中文&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/NervJS/taro/next/README_EN.md&quot;&gt;English&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;👽 Taro[’tɑ:roʊ]，泰罗·奥特曼，宇宙警备队总教官，实力最强的奥特曼。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;简介&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Taro&lt;/strong&gt; 是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发微信/京东/百度/支付宝/字节跳动/ QQ 小程序/H5 等应用。现如今市面上端的形态多种多样，Web、React Native、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。&lt;/p&gt; 
&lt;h3&gt;版本说明&lt;/h3&gt; 
&lt;p&gt;当前 Taro 已进入 3.x 时代，相较于 Taro 1/2 采用了重运行时的架构，让开发者可以获得完整的 React/Vue 等框架的开发体验，具体请参考&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU3NDkzMTI3MA==&amp;amp;mid=2247483770&amp;amp;idx=1&amp;amp;sn=ba2cdea5256e1c4e7bb513aa4c837834&quot;&gt;《小程序跨框架开发的探索与实践》&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;如果你想使用 Taro 1/2，可以访问&lt;a href=&quot;https://nervjs.github.io/taro/versions&quot;&gt;文档版本&lt;/a&gt;获得帮助。&lt;/p&gt; 
&lt;h2&gt;学习资源&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://taro-docs.jd.com/taro/docs/guide&quot;&gt;5 分钟上手 Taro 开发&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/NervJS/awesome-taro&quot;&gt;awesome-taro&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;掘金小册：&lt;a href=&quot;https://juejin.im/book/5b73a131f265da28065fb1cd?referrer=5ba228f16fb9a05d3251492d&quot;&gt;Taro 多端开发实现原理与实战&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;社区共享&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://taro-club.jd.com/&quot;&gt;Taro 交流社区——让每一次交流都被沉淀&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://taro-ext.jd.com/&quot;&gt;Taro 物料市场——让每一个轮子产生价值&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;使用案例&lt;/h2&gt; 
&lt;p&gt;Taro 已经投入了我们的生产环境中使用，业界也在广泛地使用 Taro 开发多端应用。&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://nervjs.github.io/taro-user-cases/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/NervJS/taro-user-cases/master/user-cases.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/NervJS/taro/issues/244&quot;&gt;征集更多优秀案例&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Taro 特性&lt;/h2&gt; 
&lt;h3&gt;框架支持&lt;/h3&gt; 
&lt;h4&gt;React/Nerv 支持&lt;/h4&gt; 
&lt;p&gt;在 Taro 3 中可以使用完整的 React/Nerv 开发体验，具体请参考&lt;a href=&quot;https://nervjs.github.io/taro/docs/react&quot;&gt;基础教程——React&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;代码示例&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;
import { View, Text } from &#39;@tarojs/components&#39;

export default class Index extends Component {
  state = {
    msg: &#39;Hello World！ &#39;
  }
  componentWillUnmount () { }

  componentDidShow () { }

  componentDidHide () { }

  render () {
    return (
      &amp;lt;View className=&#39;index&#39;&amp;gt;
        &amp;lt;Text&amp;gt;{this.state.msg}&amp;lt;/Text&amp;gt;
      &amp;lt;/View&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Vue 支持&lt;/h4&gt; 
&lt;p&gt;在 Taro 3 中可以使用完整的 Vue 开发体验，具体请参考&lt;a href=&quot;https://nervjs.github.io/taro/docs/vue&quot;&gt;基础教程——Vue&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;代码示例&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;view class=&quot;index&quot;&amp;gt;
    &amp;lt;text&amp;gt;{{msg}}&amp;lt;/text&amp;gt;
  &amp;lt;/view&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data () {
    return {
      msg: &#39;Hello World!&#39;
    }
  },
  created () {},
  onShow () {},
  onHide () {}
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;多端转换支持&lt;/h3&gt; 
&lt;p&gt;Taro 方案的初心就是为了打造一个多端开发的解决方案。&lt;/p&gt; 
&lt;p&gt;目前 Taro 3 可以支持转换到 &lt;strong&gt;微信/京东/百度/支付宝/字节跳动/QQ 小程序&lt;/strong&gt; 以及 &lt;strong&gt;H5 端&lt;/strong&gt;。&lt;/p&gt; 
&lt;h2&gt;加入共建&lt;/h2&gt; 
&lt;h4&gt;加入 Taro 社区共建倡议&lt;/h4&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/NervJS/taro/issues/4714&quot;&gt;Taro 邀你加入社区共建&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;为 Taro 贡献代码&lt;/h4&gt; 
&lt;p&gt;Taro 非常欢迎社区开发者为 Taro 贡献代码，在贡献之前请先阅读&lt;a href=&quot;https://nervjs.github.io/taro/docs/CONTRIBUTING.html&quot;&gt;贡献指南&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;如果你想为 Taro 实现一个重要功能，需要先撰写 RFC 文档，按照 Taro 的&lt;a href=&quot;https://github.com/NervJS/taro-rfcs&quot;&gt;RFC 机制&lt;/a&gt;进行操作，在经过社区讨论完善后才可以进行代码的提交。&lt;/p&gt; 
&lt;h2&gt;问题反馈与建议&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://nervjs.github.io/taro-issue-helper/&quot;&gt;给 Taro 提 ISSUE&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;强烈推荐阅读 &lt;a href=&quot;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way&quot;&gt;《提问的智慧》&lt;/a&gt;、&lt;a href=&quot;https://github.com/seajs/seajs/issues/545&quot;&gt;《如何向开源社区提问题》&lt;/a&gt; 和 &lt;a href=&quot;http://www.chiark.greenend.org.uk/%7Esgtatham/bugs-cn.html&quot;&gt;《如何有效地报告 Bug》&lt;/a&gt;、&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25795393&quot;&gt;《如何向开源项目提交无法解答的问题》&lt;/a&gt;，更好的问题更容易获得帮助。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://issuehunt.io/repos/128624453&quot;&gt;&lt;img src=&quot;https://issuehunt.io/static/embed/issuehunt-button-v1.svg?sanitize=true&quot; alt=&quot;Let’s fund issues in this repository&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;特别鸣谢&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nanjingboy/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1390888?s=100&amp;amp;v=4&quot; alt=&quot;nanjingboy&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/js-newbee/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/20449400?s=100&amp;amp;v=4&quot; alt=&quot;jsNewbee&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/Qiyu8/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/15245051?s=100&amp;amp;v=4&quot; alt=&quot;Qiyu8&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://github.com/Garfield550/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/3471836?s=100&amp;amp;v=4&quot; alt=&quot;Garfield550&quot;&gt;&lt;/a&gt; :—:|:—:|:—:|:—: &lt;a href=&quot;https://github.com/nanjingboy/&quot;&gt;nanjingboy&lt;/a&gt; | &lt;a href=&quot;https://github.com/js-newbee/&quot;&gt;jsNewbee&lt;/a&gt; | &lt;a href=&quot;https://github.com/Qiyu8/&quot;&gt;Qiyu8&lt;/a&gt; | &lt;a href=&quot;https://github.com/Garfield550/&quot;&gt;Garfield Lee&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;贡献者们&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/NervJS/taro/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/taro/contributors.svg?width=890&amp;amp;button=false&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;开发计划&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/NervJS/taro/milestones&quot;&gt;Milestones&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;更新日志&lt;/h2&gt; 
&lt;p&gt;本项目遵从 &lt;a href=&quot;https://gist.github.com/stephenparish/9941e89d80e2bc58a153&quot;&gt;Angular Style Commit Message Conventions&lt;/a&gt;，更新日志请查阅 &lt;a href=&quot;https://github.com/NervJS/taro/releases&quot;&gt;Release&lt;/a&gt;。&lt;/p&gt; 
&lt;h2&gt;开发交流&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/NervJS/taro/issues/198&quot;&gt;官方交流微信群&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT License&lt;/p&gt; 
&lt;p&gt;Copyright (c) O2Team&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nuxt/nuxt.js</title>
      <link>https://github.com/nuxt/nuxt.js</link>
      <description>&lt;p&gt;The Intuitive Vue Framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt;&lt;img align=&quot;center&quot; style=&quot;width:320px&quot; src=&quot;https://raw.githubusercontent.com/nuxt/nuxt.js/dev/.github/nuxt.png&quot;&gt;&lt;/p&gt;
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/nuxt/nuxt.js/actions?query=branch%3Adev+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/nuxt/nuxt.js/workflows/test/badge.svg?branch=dev&amp;amp;event=push&quot; alt=&quot;Tests Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/nuxt/nuxt.js/actions?query=branch%3Adev+event%3Apush&quot;&gt;&lt;img src=&quot;https://github.com/nuxt/nuxt.js/workflows/windows/badge.svg?branch=dev&amp;amp;event=push&quot; alt=&quot;Windows Status&quot;&gt;&lt;/a&gt; &amp;nbsp;&lt;a href=&quot;https://codecov.io/gh/nuxt/nuxt.js&quot;&gt;&lt;img src=&quot;https://badgen.net/codecov/c/github/nuxt/nuxt.js/master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/nuxt&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/dm/nuxt&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/nuxt&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/v/nuxt&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/nuxt&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/license/nuxt&quot; alt=&quot;License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.nuxtjs.org/&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/Discord/join-us/7289DA&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#platinum-sponsors&quot; alt=&quot;Platinum Sponsors on Open Collective&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/platinum-sponsors/badge.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#gold-sponsors&quot; alt=&quot;Gold Sponsors on Open Collective&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/gold-sponsors/badge.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#silver-sponsors&quot; alt=&quot;Silver Sponsors on Open Collective&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/silver-sponsors/badge.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#bronze-sponsors&quot; alt=&quot;Bronze Sponsors on Open Collective&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/bronze-sponsors/badge.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/nuxt/nuxt.js/dev/#nuxters&quot; alt=&quot;Nuxters on Open Collective&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/nuxters/badge.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://oc.nuxtjs.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Support%20us-Open%20Collective-41B883.svg?sanitize=true&quot; alt=&quot;Support us&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://otechie.com/nuxt?ref=badge&quot;&gt;&lt;img src=&quot;https://api.otechie.com/consultancy/nuxt/badge.svg?sanitize=true&quot; alt=&quot;Hire Nuxt&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Build your next Vue.js application with confidence using Nuxt: a framework making web development simple and powerful.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📘 Documentation: &lt;a href=&quot;https://nuxtjs.org&quot;&gt;https://nuxtjs.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👥 Community: &lt;a href=&quot;https://cmty.app/nuxt&quot;&gt;cmty.app/nuxt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎬 Video: &lt;a href=&quot;https://www.youtube.com/watch?v=kmf-p-pTi40&quot;&gt;1 minute demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🐦 Twitter: &lt;a href=&quot;https://twitter.nuxtjs.org/&quot;&gt;@nuxt_js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💬 Chat: &lt;a href=&quot;https://discord.nuxtjs.org/&quot;&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌟 &lt;a href=&quot;https://awesome.nuxtjs.org/&quot;&gt;AwesomeNuxt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👉 &lt;a href=&quot;https://template.nuxtjs.org&quot;&gt;Play with Nuxt online&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Automatic transpilation and bundling (with webpack and babel)&lt;/li&gt; 
 &lt;li&gt;Hot code reloading&lt;/li&gt; 
 &lt;li&gt;Server-side rendering OR Single Page App OR Static Generated, you choose :fire:&lt;/li&gt; 
 &lt;li&gt;Static file serving. &lt;code&gt;./static/&lt;/code&gt; is mapped to &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Configurable with a &lt;code&gt;nuxt.config.js&lt;/code&gt; file&lt;/li&gt; 
 &lt;li&gt;Custom layouts with the &lt;code&gt;layouts/&lt;/code&gt; directory&lt;/li&gt; 
 &lt;li&gt;Middleware&lt;/li&gt; 
 &lt;li&gt;Code splitting for every &lt;code&gt;pages/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Loading just the critical CSS (page-level)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Learn more at &lt;a href=&quot;https://nuxtjs.org&quot;&gt;https://nuxtjs.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ npx create-nuxt-app &amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It’s as simple as that!&lt;/p&gt; 
&lt;p&gt;Learn more at https://nuxtjs.org/guide/installation&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Please take a look at &lt;a href=&quot;https://nuxtjs.org/examples&quot;&gt;https://nuxtjs.org/examples&lt;/a&gt; or directly in &lt;a href=&quot;https://github.com/nuxt/nuxt.js/tree/dev/examples&quot;&gt;https://github.com/nuxt/nuxt.js/tree/dev/examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Production deployment&lt;/h2&gt; 
&lt;p&gt;To deploy, instead of running nuxt, you probably want to build ahead of time. Therefore, building and starting are separate commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nuxt build
nuxt start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more at https://nuxtjs.org/guide/commands#production-deployment&lt;/p&gt; 
&lt;h2&gt;Consulting from the Nuxt team&lt;/h2&gt; 
&lt;p&gt;Get help with that tough bug or make sure your Nuxt app is ready to deploy. For $250 an hour, get technical support, advice, code reviews, and development from the Nuxt core team: &lt;a href=&quot;https://otechie.com/nuxt?ref=readme&quot;&gt;Hire Nuxt on Otechie&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Professional support with TideLift&lt;/h2&gt; 
&lt;p&gt;Professionally supported Nuxt is now available!&lt;/p&gt; 
&lt;p&gt;Tidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tidelift.com/subscription/pkg/npm-nuxt?utm_source=npm-nuxt&amp;amp;utm_medium=readme&quot;&gt;Get supported Nuxt with the Tidelift Subscription&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supporting Nuxt&lt;/h2&gt; 
&lt;p&gt;Nuxt is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome backers. Funds donated via OpenCollective are managed with transparent expenses and will be used for compensating work and expenses for core team members or sponsoring community events.&lt;/p&gt; 
&lt;p&gt;Support us with a monthly donation and help us continue our activities. [&lt;a href=&quot;https://opencollective.com/nuxtjs#contribute&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Platinum Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/nuxtjs#contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/platinum-sponsors.svg?avatarHeight=96&amp;amp;width=890&quot; alt=&quot;Open Collective Platinum Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Gold Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/nuxtjs#contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/gold-sponsors.svg?avatarHeight=80&amp;amp;width=890&quot; alt=&quot;Open Collective Gold Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Silver Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/nuxtjs#contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/silver-sponsors.svg?avatarHeight=64&amp;amp;width=890&quot; alt=&quot;Open Collective Silver Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Bronze Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/nuxtjs#contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/bronze-sponsors.svg?avatarHeight=48&amp;amp;width=890&quot; alt=&quot;Open Collective Bronze Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thank you to all our &lt;a href=&quot;https://github.com/nuxt/nuxt.js/graphs/contributors&quot;&gt;contributors&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nuxt/nuxt.js/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/contributors.svg?width=890&amp;amp;button=false&quot; alt=&quot;Nuxt Contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/nuxt/nuxt.js&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please refer to our &lt;a href=&quot;https://nuxtjs.org/guide/contribution-guide#codefund_ad&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Cross-browser testing&lt;/h2&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://browserstack.com&quot;&gt;&lt;img height=&quot;70&quot; src=&quot;https://nuxtjs.org/browserstack.svg?sanitize=true&quot; alt=&quot;BrowserStack&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Automated testing&lt;/h2&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs&lt;/a&gt; for supporting Open Source &amp;lt;3&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://saucelabs.com&quot;&gt;&lt;img height=&quot;70&quot; src=&quot;https://nuxtjs.org/saucelabs.svg?sanitize=true&quot; alt=&quot;SauceLabs&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a security vulnerability regarding Nuxt, please send an e-mail to the team via security@nuxtjs.org! All security vulnerabilities will be promptly addressed.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nuxt/nuxt.js/raw/dev/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;!-- Open Collective Tiers --&gt;</description>
    </item>
    
    <item>
      <title>discordjs/guide</title>
      <link>https://github.com/discordjs/guide</link>
      <description>&lt;p&gt;The official guide for discord.js, created and maintained by core members of its community&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/discordjs/guide/main/guide/images/branding/banner-blurple-small.png&quot; title=&quot;Discord.js Guide&quot; alt=&quot;Discord.js Guide&quot;&gt; 
&lt;/div&gt; 
&lt;h1&gt;Discord.js Guide&lt;/h1&gt; 
&lt;p&gt;Imagine a guide… that explores the many possibilies for your &lt;a href=&quot;https://github.com/discordjs/discord.js&quot;&gt;discord.js&lt;/a&gt; bot.&lt;/p&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;This guide is aimed at users who are either unfamiliar or inexperienced with Node.js and creating Discord bots. It assumes you have a basic understanding of JavaScript.&lt;/p&gt; 
&lt;p&gt;There are many different subjects covered, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;How to get a bot &lt;a href=&quot;https://discordjs.guide/preparations/&quot;&gt;up and running&lt;/a&gt; from scratch;&lt;/li&gt; 
 &lt;li&gt;How to properly &lt;a href=&quot;https://discordjs.guide/creating-your-bot/&quot;&gt;create&lt;/a&gt;, &lt;a href=&quot;https://discordjs.guide/command-handling/&quot;&gt;organize&lt;/a&gt;, and expand on your commands;&lt;/li&gt; 
 &lt;li&gt;In-depth explanations and examples regarding popular topics (e.g. &lt;a href=&quot;https://discordjs.guide/popular-topics/reactions.html&quot;&gt;reactions&lt;/a&gt;, &lt;a href=&quot;https://discordjs.guide/popular-topics/embeds.html&quot;&gt;embeds&lt;/a&gt;, &lt;a href=&quot;https://discordjs.guide/popular-topics/canvas.html&quot;&gt;canvas&lt;/a&gt;);&lt;/li&gt; 
 &lt;li&gt;Working with databases (e.g. &lt;a href=&quot;https://discordjs.guide/sequelize/&quot;&gt;sequelize&lt;/a&gt; and &lt;a href=&quot;https://discordjs.guide/keyv/&quot;&gt;keyv&lt;/a&gt;);&lt;/li&gt; 
 &lt;li&gt;Getting started with &lt;a href=&quot;https://discordjs.guide/sharding/&quot;&gt;sharding&lt;/a&gt;;&lt;/li&gt; 
 &lt;li&gt;And much more.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you’re interested in contributing to the guide, you should check out our &lt;a href=&quot;https://github.com/discordjs/guide/projects&quot;&gt;GitHub Projects&lt;/a&gt; page or &lt;a href=&quot;https://github.com/discordjs/guide/issues&quot;&gt;open issues&lt;/a&gt;. There’s a &lt;a href=&quot;https://github.com/discordjs/guide/raw/main/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt; you should read once you decide on what you want to contribute.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SheetJS/sheetjs</title>
      <link>https://github.com/SheetJS/sheetjs</link>
      <description>&lt;p&gt;📗 SheetJS Community Edition -- Spreadsheet Data Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;http://sheetjs.com&quot;&gt;SheetJS js-xlsx&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Parser and writer for various spreadsheet formats. Pure-JS cleanroom implementation from official specifications, related documents, and test files. Emphasis on parsing and writing robustness, cross-format feature compatibility with a unified JS representation, and ES3/ES5 browser compatibility back to IE6.&lt;/p&gt; 
&lt;p&gt;This is the community version. We also offer a pro version with performance enhancements, additional features like styling, and dedicated support.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://sheetjs.com/pro&quot;&gt;&lt;strong&gt;Pro Version&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://sheetjs.com/support&quot;&gt;&lt;strong&gt;Commercial Support&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://docs.sheetjs.com/&quot;&gt;&lt;strong&gt;Rendered Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://sheetjs.com/demos&quot;&gt;&lt;strong&gt;In-Browser Demos&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://git.io/xlsx&quot;&gt;&lt;strong&gt;Source Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sheetjs/sheetjs/issues&quot;&gt;&lt;strong&gt;Issues and Bug Reports&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#file-formats&quot;&gt;&lt;strong&gt;File format support for known spreadsheet data formats:&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Graph of supported formats&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/formats.png&quot; alt=&quot;circo graph of format support&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/legend.png&quot; alt=&quot;graph legend&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;a href=&quot;http://oss.sheetjs.com/sheetjs/tests/&quot;&gt;&lt;strong&gt;Browser Test&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://saucelabs.com/u/sheetjs&quot;&gt;&lt;img src=&quot;https://saucelabs.com/browser-matrix/sheetjs.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/SheetJS/sheetjs&quot;&gt;&lt;img src=&quot;https://travis-ci.org/SheetJS/sheetjs.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://semaphoreci.com/sheetjs/sheetjs&quot;&gt;&lt;img src=&quot;https://semaphoreci.com/api/v1/sheetjs/sheetjs/branches/master/shields_badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/SheetJS/sheetjs?branch=master&quot;&gt;&lt;img src=&quot;http://img.shields.io/coveralls/SheetJS/sheetjs/master.svg?sanitize=true&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/sheetjs/sheetjs&quot;&gt;&lt;img src=&quot;https://david-dm.org/sheetjs/sheetjs/status.svg?sanitize=true&quot; alt=&quot;Dependencies Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmjs.org/package/xlsx&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/xlsx.svg?sanitize=true&quot; alt=&quot;npm Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/SheetJS/sheetjs&quot;&gt;&lt;img src=&quot;https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/sheetjs?pixel&quot; alt=&quot;Analytics&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Expand to show Table of Contents&lt;/b&gt;&lt;/summary&gt; 
 &lt;!-- toc --&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#installation&quot;&gt;Installation&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#js-ecosystem-demos&quot;&gt;JS Ecosystem Demos&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#optional-modules&quot;&gt;Optional Modules&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#ecmascript-5-compatibility&quot;&gt;ECMAScript 5 Compatibility&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#philosophy&quot;&gt;Philosophy&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#parsing-workbooks&quot;&gt;Parsing Workbooks&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#parsing-examples&quot;&gt;Parsing Examples&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#streaming-read&quot;&gt;Streaming Read&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#working-with-the-workbook&quot;&gt;Working with the Workbook&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#parsing-and-writing-examples&quot;&gt;Parsing and Writing Examples&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#writing-workbooks&quot;&gt;Writing Workbooks&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#writing-examples&quot;&gt;Writing Examples&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#streaming-write&quot;&gt;Streaming Write&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#interface&quot;&gt;Interface&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#parsing-functions&quot;&gt;Parsing functions&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#writing-functions&quot;&gt;Writing functions&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#utilities&quot;&gt;Utilities&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#common-spreadsheet-format&quot;&gt;Common Spreadsheet Format&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#general-structures&quot;&gt;General Structures&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#cell-object&quot;&gt;Cell Object&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#data-types&quot;&gt;Data Types&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#dates&quot;&gt;Dates&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#sheet-objects&quot;&gt;Sheet Objects&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#worksheet-object&quot;&gt;Worksheet Object&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#chartsheet-object&quot;&gt;Chartsheet Object&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#macrosheet-object&quot;&gt;Macrosheet Object&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#dialogsheet-object&quot;&gt;Dialogsheet Object&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#workbook-object&quot;&gt;Workbook Object&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#workbook-file-properties&quot;&gt;Workbook File Properties&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#workbook-level-attributes&quot;&gt;Workbook-Level Attributes&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#defined-names&quot;&gt;Defined Names&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#workbook-views&quot;&gt;Workbook Views&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#miscellaneous-workbook-properties&quot;&gt;Miscellaneous Workbook Properties&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#document-features&quot;&gt;Document Features&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#formulae&quot;&gt;Formulae&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#column-properties&quot;&gt;Column Properties&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#row-properties&quot;&gt;Row Properties&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#number-formats&quot;&gt;Number Formats&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#hyperlinks&quot;&gt;Hyperlinks&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#cell-comments&quot;&gt;Cell Comments&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#sheet-visibility&quot;&gt;Sheet Visibility&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#vba-and-macros&quot;&gt;VBA and Macros&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#parsing-options&quot;&gt;Parsing Options&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#input-type&quot;&gt;Input Type&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#guessing-file-type&quot;&gt;Guessing File Type&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#writing-options&quot;&gt;Writing Options&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#supported-output-formats&quot;&gt;Supported Output Formats&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#output-type&quot;&gt;Output Type&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#utility-functions&quot;&gt;Utility Functions&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#array-of-arrays-input&quot;&gt;Array of Arrays Input&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#array-of-objects-input&quot;&gt;Array of Objects Input&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#html-table-input&quot;&gt;HTML Table Input&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#formulae-output&quot;&gt;Formulae Output&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#delimiter-separated-output&quot;&gt;Delimiter-Separated Output&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#utf-16-unicode-text&quot;&gt;UTF-16 Unicode Text&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#html-output&quot;&gt;HTML Output&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#json&quot;&gt;JSON&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#file-formats&quot;&gt;File Formats&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#excel-2007-xml-xlsxxlsm&quot;&gt;Excel 2007+ XML (XLSX/XLSM)&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#excel-20-95-biff2biff3biff4biff5&quot;&gt;Excel 2.0-95 (BIFF2/BIFF3/BIFF4/BIFF5)&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#excel-97-2004-binary-biff8&quot;&gt;Excel 97-2004 Binary (BIFF8)&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#excel-2003-2004-spreadsheetml&quot;&gt;Excel 2003-2004 (SpreadsheetML)&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#excel-2007-binary-xlsb-biff12&quot;&gt;Excel 2007+ Binary (XLSB, BIFF12)&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#delimiter-separated-values-csvtxt&quot;&gt;Delimiter-Separated Values (CSV/TXT)&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#other-workbook-formats&quot;&gt;Other Workbook Formats&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#lotus-1-2-3-wkswk1wk2wk3wk4123&quot;&gt;Lotus 1-2-3 (WKS/WK1/WK2/WK3/WK4/123)&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#quattro-pro-wq1wq2wb1wb2wb3qpw&quot;&gt;Quattro Pro (WQ1/WQ2/WB1/WB2/WB3/QPW)&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#opendocument-spreadsheet-odsfods&quot;&gt;OpenDocument Spreadsheet (ODS/FODS)&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#uniform-office-spreadsheet-uos12&quot;&gt;Uniform Office Spreadsheet (UOS1/2)&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#other-single-worksheet-formats&quot;&gt;Other Single-Worksheet Formats&lt;/a&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#dbase-and-visual-foxpro-dbf&quot;&gt;dBASE and Visual FoxPro (DBF)&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#symbolic-link-sylk&quot;&gt;Symbolic Link (SYLK)&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#lotus-formatted-text-prn&quot;&gt;Lotus Formatted Text (PRN)&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#data-interchange-format-dif&quot;&gt;Data Interchange Format (DIF)&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#html&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#rich-text-format-rtf&quot;&gt;Rich Text Format (RTF)&lt;/a&gt;&lt;/li&gt; 
      &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#ethercalc-record-format-eth&quot;&gt;Ethercalc Record Format (ETH)&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; &lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#testing&quot;&gt;Testing&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#node&quot;&gt;Node&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#browser&quot;&gt;Browser&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#tested-environments&quot;&gt;Tested Environments&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#test-files&quot;&gt;Test Files&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#contributing&quot;&gt;Contributing&lt;/a&gt; 
   &lt;ul&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#osxlinux&quot;&gt;OSX/Linux&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#windows&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#tests&quot;&gt;Tests&lt;/a&gt;&lt;/li&gt; 
   &lt;/ul&gt; &lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;!-- tocstop --&gt; 
&lt;/details&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;In the browser, just add a script tag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script lang=&quot;javascript&quot; src=&quot;dist/xlsx.full.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;CDN Availability&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;| CDN | URL | |———–:|:—————————————––| | &lt;code&gt;unpkg&lt;/code&gt; | &lt;a href=&quot;https://unpkg.com/xlsx/&quot;&gt;https://unpkg.com/xlsx/&lt;/a&gt; | | &lt;code&gt;jsDelivr&lt;/code&gt; | &lt;a href=&quot;https://jsdelivr.com/package/npm/xlsx&quot;&gt;https://jsdelivr.com/package/npm/xlsx&lt;/a&gt; | | &lt;code&gt;CDNjs&lt;/code&gt; | &lt;a href=&quot;http://cdnjs.com/libraries/xlsx&quot;&gt;http://cdnjs.com/libraries/xlsx&lt;/a&gt; | | &lt;code&gt;packd&lt;/code&gt; | &lt;a href=&quot;https://bundle.run/xlsx@latest?name=XLSX&quot;&gt;https://bundle.run/xlsx@latest?name=XLSX&lt;/a&gt; |&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;unpkg&lt;/code&gt; makes the latest version available at:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://unpkg.com/xlsx/dist/xlsx.full.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;With &lt;a href=&quot;https://www.npmjs.org/package/xlsx&quot;&gt;npm&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install xlsx
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With &lt;a href=&quot;http://bower.io/search/?q=js-xlsx&quot;&gt;bower&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower install js-xlsx
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;JS Ecosystem Demos&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/&quot;&gt;&lt;code&gt;demos&lt;/code&gt; directory&lt;/a&gt; includes sample projects for:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Frameworks and APIs&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/angular/&quot;&gt;&lt;code&gt;angularjs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/angular2/&quot;&gt;&lt;code&gt;angular 2 / 4 / 5 / 6 and ionic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/knockout/&quot;&gt;&lt;code&gt;knockout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/meteor/&quot;&gt;&lt;code&gt;meteor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/react/&quot;&gt;&lt;code&gt;react and react-native&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/vue/&quot;&gt;&lt;code&gt;vue 2.x and weex&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/xhr/&quot;&gt;&lt;code&gt;XMLHttpRequest and fetch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/server/&quot;&gt;&lt;code&gt;nodejs server&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/database/&quot;&gt;&lt;code&gt;databases and key/value stores&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/array/&quot;&gt;&lt;code&gt;typed arrays and math&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bundlers and Tooling&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/browserify/&quot;&gt;&lt;code&gt;browserify&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/fusebox/&quot;&gt;&lt;code&gt;fusebox&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/parcel/&quot;&gt;&lt;code&gt;parcel&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/requirejs/&quot;&gt;&lt;code&gt;requirejs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/rollup/&quot;&gt;&lt;code&gt;rollup&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/systemjs/&quot;&gt;&lt;code&gt;systemjs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/typescript/&quot;&gt;&lt;code&gt;typescript&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/webpack/&quot;&gt;&lt;code&gt;webpack 2.x&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Platforms and Integrations&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/electron/&quot;&gt;&lt;code&gt;electron application&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/nwjs/&quot;&gt;&lt;code&gt;nw.js application&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/chrome/&quot;&gt;&lt;code&gt;Chrome / Chromium extensions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/extendscript/&quot;&gt;&lt;code&gt;Adobe ExtendScript&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/headless/&quot;&gt;&lt;code&gt;Headless Browsers&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/datagrid/&quot;&gt;&lt;code&gt;canvas-datagrid&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/xspreadsheet/&quot;&gt;&lt;code&gt;x-spreadsheet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/altjs/&quot;&gt;&lt;code&gt;Swift JSC and other engines&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/function/&quot;&gt;&lt;code&gt;&quot;serverless&quot; functions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/oldie/&quot;&gt;&lt;code&gt;internet explorer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Other examples are included in the &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/showcase/&quot;&gt;showcase&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Optional Modules&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Optional features&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The node version automatically requires modules for additional features. Some of these modules are rather large in size and are only needed in special circumstances, so they do not ship with the core. For browser use, they must be included directly:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- international support from js-codepage --&amp;gt;
&amp;lt;script src=&quot;dist/cpexcel.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;An appropriate version for each dependency is included in the dist/ directory.&lt;/p&gt; 
 &lt;p&gt;The complete single-file version is generated at &lt;code&gt;dist/xlsx.full.min.js&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;A slimmer build with XLSX / HTML support is generated at &lt;code&gt;dist/xlsx.mini.min.js&lt;/code&gt;&lt;/p&gt; 
 &lt;p&gt;Webpack and Browserify builds include optional modules by default. Webpack can be configured to remove support with &lt;code&gt;resolve.alias&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  /* uncomment the lines below to remove support */
  resolve: {
    alias: { &quot;./dist/cpexcel.js&quot;: &quot;&quot; } // &amp;lt;-- omit international support
  }
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;ECMAScript 5 Compatibility&lt;/h3&gt; 
&lt;p&gt;Since the library uses functions like &lt;code&gt;Array#forEach&lt;/code&gt;, older browsers require &lt;a href=&quot;http://oss.sheetjs.com/js-xlsx/shim.js&quot;&gt;shims to provide missing functions&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To use the shim, add the shim before the script tag that loads &lt;code&gt;xlsx.js&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- add the shim first --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;shim.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- after the shim is referenced, add the library --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;xlsx.full.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The script also includes &lt;code&gt;IE_LoadFile&lt;/code&gt; and &lt;code&gt;IE_SaveFile&lt;/code&gt; for loading and saving files in Internet Explorer versions 6-9. The &lt;code&gt;xlsx.extendscript.js&lt;/code&gt; script bundles the shim in a format suitable for Photoshop and other Adobe products.&lt;/p&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Philosophy&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Prior to SheetJS, APIs for processing spreadsheet files were format-specific. Third-party libraries either supported one format, or they involved a separate set of classes for each supported file type. Even though XLSB was introduced in Excel 2007, nothing outside of SheetJS or Excel supported the format.&lt;/p&gt; 
 &lt;p&gt;To promote a format-agnostic view, js-xlsx starts from a pure-JS representation that we call the &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#common-spreadsheet-format&quot;&gt;“Common Spreadsheet Format”&lt;/a&gt;. Emphasizing a uniform object representation enables new features like format conversion (reading an XLSX template and saving as XLS) and circumvents the mess of classes. By abstracting the complexities of the various formats, tools need not worry about the specific file type!&lt;/p&gt; 
 &lt;p&gt;A simple object representation combined with careful coding practices enables use cases in older browsers and in alternative environments like ExtendScript and Web Workers. It is always tempting to use the latest and greatest features, but they tend to require the latest versions of browsers, limiting usability.&lt;/p&gt; 
 &lt;p&gt;Utility functions capture common use cases like generating JS objects or HTML. Most simple operations should only require a few lines of code. More complex operations generally should be straightforward to implement.&lt;/p&gt; 
 &lt;p&gt;Excel pushes the XLSX format as default starting in Excel 2007. However, there are other formats with more appealing properties. For example, the XLSB format is spiritually similar to XLSX but files often tend up taking less than half the space and open much faster! Even though an XLSX writer is available, other format writers are available so users can take advantage of the unique characteristics of each format.&lt;/p&gt; 
 &lt;p&gt;The primary focus of the Community Edition is correct data interchange, focused on extracting data from any compatible data representation and exporting data in various formats suitable for any third party interface.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Parsing Workbooks&lt;/h2&gt; 
&lt;p&gt;For parsing, the first step is to read the file. This involves acquiring the data and feeding it into the library. Here are a few common scenarios:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;nodejs read a file&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;code&gt;readFile&lt;/code&gt; is only available in server environments. Browsers have no API for reading arbitrary files given a path, so another strategy must be used.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if(typeof require !== &#39;undefined&#39;) XLSX = require(&#39;xlsx&#39;);
var workbook = XLSX.readFile(&#39;test.xlsx&#39;);
/* DO SOMETHING WITH workbook HERE */
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Photoshop ExtendScript read a file&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;code&gt;readFile&lt;/code&gt; wraps the &lt;code&gt;File&lt;/code&gt; logic in Photoshop and other ExtendScript targets. The specified path should be an absolute path:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;#include &quot;xlsx.extendscript.js&quot;
/* Read test.xlsx from the Documents folder */
var workbook = XLSX.readFile(Folder.myDocuments + &#39;/&#39; + &#39;test.xlsx&#39;);
/* DO SOMETHING WITH workbook HERE */
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/extendscript/&quot;&gt;&lt;code&gt;extendscript&lt;/code&gt; demo&lt;/a&gt; includes a more complex example.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Browser read TABLE element from page&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The &lt;code&gt;table_to_book&lt;/code&gt; and &lt;code&gt;table_to_sheet&lt;/code&gt; utility functions take a DOM TABLE element and iterate through the child nodes.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var workbook = XLSX.utils.table_to_book(document.getElementById(&#39;tableau&#39;));
/* DO SOMETHING WITH workbook HERE */
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Multiple tables on a web page can be converted to individual worksheets:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* create new workbook */
var workbook = XLSX.utils.book_new();

/* convert table &#39;table1&#39; to worksheet named &quot;Sheet1&quot; */
var ws1 = XLSX.utils.table_to_sheet(document.getElementById(&#39;table1&#39;));
XLSX.utils.book_append_sheet(workbook, ws1, &quot;Sheet1&quot;);

/* convert table &#39;table2&#39; to worksheet named &quot;Sheet2&quot; */
var ws2 = XLSX.utils.table_to_sheet(document.getElementById(&#39;table2&#39;));
XLSX.utils.book_append_sheet(workbook, ws2, &quot;Sheet2&quot;);

/* workbook now has 2 worksheets */
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Alternatively, the HTML code can be extracted and parsed:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var htmlstr = document.getElementById(&#39;tableau&#39;).outerHTML;
var workbook = XLSX.read(htmlstr, {type:&#39;string&#39;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Browser download file (ajax)&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Note: for a more complete example that works in older browsers, check the demo at &lt;a href=&quot;http://oss.sheetjs.com/js-xlsx/ajax.html&quot;&gt;http://oss.sheetjs.com/js-xlsx/ajax.html&lt;/a&gt;. The &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/xhr/&quot;&gt;&lt;code&gt;xhr&lt;/code&gt; demo&lt;/a&gt; includes more examples with &lt;code&gt;XMLHttpRequest&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt;.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var url = &quot;http://oss.sheetjs.com/test_files/formula_stress_test.xlsx&quot;;

/* set up async GET request */
var req = new XMLHttpRequest();
req.open(&quot;GET&quot;, url, true);
req.responseType = &quot;arraybuffer&quot;;

req.onload = function(e) {
  var data = new Uint8Array(req.response);
  var workbook = XLSX.read(data, {type:&quot;array&quot;});

  /* DO SOMETHING WITH workbook HERE */
}

req.send();
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Browser drag-and-drop&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Drag-and-drop uses the HTML5 &lt;code&gt;FileReader&lt;/code&gt; API.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function handleDrop(e) {
  e.stopPropagation(); e.preventDefault();
  var files = e.dataTransfer.files, f = files[0];
  var reader = new FileReader();
  reader.onload = function(e) {
    var data = new Uint8Array(e.target.result);
    var workbook = XLSX.read(data, {type: &#39;array&#39;});

    /* DO SOMETHING WITH workbook HERE */
  };
  reader.readAsArrayBuffer(f);
}
drop_dom_element.addEventListener(&#39;drop&#39;, handleDrop, false);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Browser file upload form element&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Data from file input elements can be processed using the same &lt;code&gt;FileReader&lt;/code&gt; API as in the drag-and-drop example:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function handleFile(e) {
  var files = e.target.files, f = files[0];
  var reader = new FileReader();
  reader.onload = function(e) {
    var data = new Uint8Array(e.target.result);
    var workbook = XLSX.read(data, {type: &#39;array&#39;});

    /* DO SOMETHING WITH workbook HERE */
  };
  reader.readAsArrayBuffer(f);
}
input_dom_element.addEventListener(&#39;change&#39;, handleFile, false);
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/oldie/&quot;&gt;&lt;code&gt;oldie&lt;/code&gt; demo&lt;/a&gt; shows an IE-compatible fallback scenario.&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;More specialized cases, including mobile app file processing, are covered in the &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/&quot;&gt;included demos&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Parsing Examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://oss.sheetjs.com/js-xlsx/&quot;&gt;http://oss.sheetjs.com/js-xlsx/&lt;/a&gt; HTML5 File API / Base64 Text / Web Workers&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that older versions of IE do not support HTML5 File API, so the Base64 mode is used for testing.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Get Base64 encoding on OSX / Windows&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;On OSX you can get the Base64 encoding with:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &amp;lt;target_file base64 | pbcopy
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;On Windows XP and up you can get the Base64 encoding using &lt;code&gt;certutil&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;&amp;gt; certutil -encode target_file target_file.b64
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;(note: You have to open the file and remove the header and footer lines)&lt;/p&gt; 
&lt;/details&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://oss.sheetjs.com/js-xlsx/ajax.html&quot;&gt;http://oss.sheetjs.com/js-xlsx/ajax.html&lt;/a&gt; XMLHttpRequest&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Streaming Read&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Why is there no Streaming Read API?&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The most common and interesting formats (XLS, XLSX/M, XLSB, ODS) are ultimately ZIP or CFB containers of files. Neither format puts the directory structure at the beginning of the file: ZIP files place the Central Directory records at the end of the logical file, while CFB files can place the storage info anywhere in the file! As a result, to properly handle these formats, a streaming function would have to buffer the entire file before commencing. That belies the expectations of streaming, so we do not provide any streaming read API.&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;When dealing with Readable Streams, the easiest approach is to buffer the stream and process the whole thing at the end. This can be done with a temporary file or by explicitly concatenating the stream:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Explicitly concatenating streams&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var fs = require(&#39;fs&#39;);
var XLSX = require(&#39;xlsx&#39;);
function process_RS(stream/*:ReadStream*/, cb/*:(wb:Workbook)=&amp;gt;void*/)/*:void*/{
  var buffers = [];
  stream.on(&#39;data&#39;, function(data) { buffers.push(data); });
  stream.on(&#39;end&#39;, function() {
    var buffer = Buffer.concat(buffers);
    var workbook = XLSX.read(buffer, {type:&quot;buffer&quot;});

    /* DO SOMETHING WITH workbook IN THE CALLBACK */
    cb(workbook);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;More robust solutions are available using modules like &lt;code&gt;concat-stream&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Writing to filesystem first&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;This example uses &lt;a href=&quot;https://npm.im/tempfile&quot;&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt; to generate file names:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var fs = require(&#39;fs&#39;), tempfile = require(&#39;tempfile&#39;);
var XLSX = require(&#39;xlsx&#39;);
function process_RS(stream/*:ReadStream*/, cb/*:(wb:Workbook)=&amp;gt;void*/)/*:void*/{
  var fname = tempfile(&#39;.sheetjs&#39;);
  console.log(fname);
  var ostream = fs.createWriteStream(fname);
  stream.pipe(ostream);
  ostream.on(&#39;finish&#39;, function() {
    var workbook = XLSX.readFile(fname);
    fs.unlinkSync(fname);

    /* DO SOMETHING WITH workbook IN THE CALLBACK */
    cb(workbook);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Working with the Workbook&lt;/h2&gt; 
&lt;p&gt;The full object format is described later in this README.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Reading a specific cell &lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;This example extracts the value stored in cell A1 from the first worksheet:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var first_sheet_name = workbook.SheetNames[0];
var address_of_cell = &#39;A1&#39;;

/* Get worksheet */
var worksheet = workbook.Sheets[first_sheet_name];

/* Find desired cell */
var desired_cell = worksheet[address_of_cell];

/* Get the value */
var desired_value = (desired_cell ? desired_cell.v : undefined);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Adding a new worksheet to a workbook&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;This example uses &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#array-of-arrays-input&quot;&gt;&lt;code&gt;XLSX.utils.aoa_to_sheet&lt;/code&gt;&lt;/a&gt; to make a sheet and &lt;code&gt;XLSX.utils.book_append_sheet&lt;/code&gt; to append the sheet to the workbook:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var ws_name = &quot;SheetJS&quot;;

/* make worksheet */
var ws_data = [
  [ &quot;S&quot;, &quot;h&quot;, &quot;e&quot;, &quot;e&quot;, &quot;t&quot;, &quot;J&quot;, &quot;S&quot; ],
  [  1 ,  2 ,  3 ,  4 ,  5 ]
];
var ws = XLSX.utils.aoa_to_sheet(ws_data);

/* Add the worksheet to the workbook */
XLSX.utils.book_append_sheet(wb, ws, ws_name);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Creating a new workbook from scratch&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The workbook object contains a &lt;code&gt;SheetNames&lt;/code&gt; array of names and a &lt;code&gt;Sheets&lt;/code&gt; object mapping sheet names to sheet objects. The &lt;code&gt;XLSX.utils.book_new&lt;/code&gt; utility function creates a new workbook object:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* create a new blank workbook */
var wb = XLSX.utils.book_new();
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The new workbook is blank and contains no worksheets. The write functions will error if the workbook is empty.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Parsing and Writing Examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;http://sheetjs.com/demos/modify.html&quot;&gt;http://sheetjs.com/demos/modify.html&lt;/a&gt; read + modify + write files&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/SheetJS/js-xlsx/raw/master/bin/xlsx.njs&quot;&gt;https://github.com/SheetJS/js-xlsx/blob/master/bin/xlsx.njs&lt;/a&gt; node&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The node version installs a command line tool &lt;code&gt;xlsx&lt;/code&gt; which can read spreadsheet files and output the contents in various formats. The source is available at &lt;code&gt;xlsx.njs&lt;/code&gt; in the bin directory.&lt;/p&gt; 
&lt;p&gt;Some helper functions in &lt;code&gt;XLSX.utils&lt;/code&gt; generate different views of the sheets:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;XLSX.utils.sheet_to_csv&lt;/code&gt; generates CSV&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XLSX.utils.sheet_to_txt&lt;/code&gt; generates UTF16 Formatted Text&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XLSX.utils.sheet_to_html&lt;/code&gt; generates HTML&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XLSX.utils.sheet_to_json&lt;/code&gt; generates an array of objects&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XLSX.utils.sheet_to_formulae&lt;/code&gt; generates a list of formulae&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Writing Workbooks&lt;/h2&gt; 
&lt;p&gt;For writing, the first step is to generate output data. The helper functions &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;writeFile&lt;/code&gt; will produce the data in various formats suitable for dissemination. The second step is to actual share the data with the end point. Assuming &lt;code&gt;workbook&lt;/code&gt; is a workbook object:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;nodejs write a file&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;code&gt;XLSX.writeFile&lt;/code&gt; uses &lt;code&gt;fs.writeFileSync&lt;/code&gt; in server environments:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if(typeof require !== &#39;undefined&#39;) XLSX = require(&#39;xlsx&#39;);
/* output format determined by filename */
XLSX.writeFile(workbook, &#39;out.xlsb&#39;);
/* at this point, out.xlsb is a file that you can distribute */
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Photoshop ExtendScript write a file&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;code&gt;writeFile&lt;/code&gt; wraps the &lt;code&gt;File&lt;/code&gt; logic in Photoshop and other ExtendScript targets. The specified path should be an absolute path:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;#include &quot;xlsx.extendscript.js&quot;
/* output format determined by filename */
XLSX.writeFile(workbook, &#39;out.xlsx&#39;);
/* at this point, out.xlsx is a file that you can distribute */
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/extendscript/&quot;&gt;&lt;code&gt;extendscript&lt;/code&gt; demo&lt;/a&gt; includes a more complex example.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Browser add TABLE element to page&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The &lt;code&gt;sheet_to_html&lt;/code&gt; utility function generates HTML code that can be added to any DOM element.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var worksheet = workbook.Sheets[workbook.SheetNames[0]];
var container = document.getElementById(&#39;tableau&#39;);
container.innerHTML = XLSX.utils.sheet_to_html(worksheet);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Browser upload file (ajax)&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;A complete example using XHR is &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/xhr/&quot;&gt;included in the XHR demo&lt;/a&gt;, along with examples for fetch and wrapper libraries. This example assumes the server can handle Base64-encoded files (see the demo for a basic nodejs server):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* in this example, send a base64 string to the server */
var wopts = { bookType:&#39;xlsx&#39;, bookSST:false, type:&#39;base64&#39; };

var wbout = XLSX.write(workbook,wopts);

var req = new XMLHttpRequest();
req.open(&quot;POST&quot;, &quot;/upload&quot;, true);
var formdata = new FormData();
formdata.append(&#39;file&#39;, &#39;test.xlsx&#39;); // &amp;lt;-- server expects `file` to hold name
formdata.append(&#39;data&#39;, wbout); // &amp;lt;-- `data` holds the base64-encoded data
req.send(formdata);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Browser save file&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;code&gt;XLSX.writeFile&lt;/code&gt; wraps a few techniques for triggering a file save:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;URL&lt;/code&gt; browser API creates an object URL for the file, which the library uses by creating a link and forcing a click. It is supported in modern browsers.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;msSaveBlob&lt;/code&gt; is an IE10+ API for triggering a file save.&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;IE_FileSave&lt;/code&gt; uses VBScript and ActiveX to write a file in IE6+ for Windows XP and Windows 7. The shim must be included in the containing HTML page.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;There is no standard way to determine if the actual file has been downloaded.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* output format determined by filename */
XLSX.writeFile(workbook, &#39;out.xlsb&#39;);
/* at this point, out.xlsb will have been downloaded */
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Browser save file (compatibility)&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;code&gt;XLSX.writeFile&lt;/code&gt; techniques work for most modern browsers as well as older IE. For much older browsers, there are workarounds implemented by wrapper libraries.&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/eligrey/FileSaver.js/&quot;&gt;&lt;code&gt;FileSaver.js&lt;/code&gt;&lt;/a&gt; implements &lt;code&gt;saveAs&lt;/code&gt;. Note: &lt;code&gt;XLSX.writeFile&lt;/code&gt; will automatically call &lt;code&gt;saveAs&lt;/code&gt; if available.&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* bookType can be any supported output type */
var wopts = { bookType:&#39;xlsx&#39;, bookSST:false, type:&#39;array&#39; };

var wbout = XLSX.write(workbook,wopts);

/* the saveAs call downloads a file on the local machine */
saveAs(new Blob([wbout],{type:&quot;application/octet-stream&quot;}), &quot;test.xlsx&quot;);
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;a href=&quot;https://github.com/dcneiner/downloadify&quot;&gt;&lt;code&gt;Downloadify&lt;/code&gt;&lt;/a&gt; uses a Flash SWF button to generate local files, suitable for environments where ActiveX is unavailable:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Downloadify.create(id,{
	/* other options are required! read the downloadify docs for more info */
	filename: &quot;test.xlsx&quot;,
	data: function() { return XLSX.write(wb, {bookType:&quot;xlsx&quot;, type:&#39;base64&#39;}); },
	append: false,
	dataType: &#39;base64&#39;
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/oldie/&quot;&gt;&lt;code&gt;oldie&lt;/code&gt; demo&lt;/a&gt; shows an IE-compatible fallback scenario.&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/demos/&quot;&gt;included demos&lt;/a&gt; cover mobile apps and other special deployments.&lt;/p&gt; 
&lt;h3&gt;Writing Examples&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sheetjs.com/demos/table.html&quot;&gt;http://sheetjs.com/demos/table.html&lt;/a&gt; exporting an HTML table&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sheetjs.com/demos/writexlsx.html&quot;&gt;http://sheetjs.com/demos/writexlsx.html&lt;/a&gt; generates a simple file&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Streaming Write&lt;/h3&gt; 
&lt;p&gt;The streaming write functions are available in the &lt;code&gt;XLSX.stream&lt;/code&gt; object. They take the same arguments as the normal write functions but return a Readable Stream. They are only exposed in NodeJS.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;XLSX.stream.to_csv&lt;/code&gt; is the streaming version of &lt;code&gt;XLSX.utils.sheet_to_csv&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XLSX.stream.to_html&lt;/code&gt; is the streaming version of &lt;code&gt;XLSX.utils.sheet_to_html&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;XLSX.stream.to_json&lt;/code&gt; is the streaming version of &lt;code&gt;XLSX.utils.sheet_to_json&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;nodejs convert to CSV and write file&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var output_file_name = &quot;out.csv&quot;;
var stream = XLSX.stream.to_csv(worksheet);
stream.pipe(fs.createWriteStream(output_file_name));
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;nodejs write JSON stream to screen&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* to_json returns an object-mode stream */
var stream = XLSX.stream.to_json(worksheet, {raw:true});

/* the following stream converts JS objects to text via JSON.stringify */
var conv = new Transform({writableObjectMode:true});
conv._transform = function(obj, e, cb){ cb(null, JSON.stringify(obj) + &quot;\n&quot;); };

stream.pipe(conv); conv.pipe(process.stdout);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sheetjs/sheetaki&quot;&gt;https://github.com/sheetjs/sheetaki&lt;/a&gt; pipes write streams to nodejs response.&lt;/p&gt; 
&lt;h2&gt;Interface&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;XLSX&lt;/code&gt; is the exposed variable in the browser and the exported node variable&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.version&lt;/code&gt; is the version of the library (added by the build script).&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.SSF&lt;/code&gt; is an embedded version of the &lt;a href=&quot;http://git.io/ssf&quot;&gt;format library&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Parsing functions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;XLSX.read(data, read_opts)&lt;/code&gt; attempts to parse &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.readFile(filename, read_opts)&lt;/code&gt; attempts to read &lt;code&gt;filename&lt;/code&gt; and parse.&lt;/p&gt; 
&lt;p&gt;Parse options are described in the &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#parsing-options&quot;&gt;Parsing Options&lt;/a&gt; section.&lt;/p&gt; 
&lt;h3&gt;Writing functions&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;XLSX.write(wb, write_opts)&lt;/code&gt; attempts to write the workbook &lt;code&gt;wb&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.writeFile(wb, filename, write_opts)&lt;/code&gt; attempts to write &lt;code&gt;wb&lt;/code&gt; to &lt;code&gt;filename&lt;/code&gt;. In browser-based environments, it will attempt to force a client-side download.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.writeFileAsync(filename, wb, o, cb)&lt;/code&gt; attempts to write &lt;code&gt;wb&lt;/code&gt; to &lt;code&gt;filename&lt;/code&gt;. If &lt;code&gt;o&lt;/code&gt; is omitted, the writer will use the third argument as the callback.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.stream&lt;/code&gt; contains a set of streaming write functions.&lt;/p&gt; 
&lt;p&gt;Write options are described in the &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#writing-options&quot;&gt;Writing Options&lt;/a&gt; section.&lt;/p&gt; 
&lt;h3&gt;Utilities&lt;/h3&gt; 
&lt;p&gt;Utilities are available in the &lt;code&gt;XLSX.utils&lt;/code&gt; object and are described in the &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#utility-functions&quot;&gt;Utility Functions&lt;/a&gt; section:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Importing:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;aoa_to_sheet&lt;/code&gt; converts an array of arrays of JS data to a worksheet.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;json_to_sheet&lt;/code&gt; converts an array of JS objects to a worksheet.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;table_to_sheet&lt;/code&gt; converts a DOM TABLE element to a worksheet.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sheet_add_aoa&lt;/code&gt; adds an array of arrays of JS data to an existing worksheet.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sheet_add_json&lt;/code&gt; adds an array of JS objects to an existing worksheet.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Exporting:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;sheet_to_json&lt;/code&gt; converts a worksheet object to an array of JSON objects.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sheet_to_csv&lt;/code&gt; generates delimiter-separated-values output.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sheet_to_txt&lt;/code&gt; generates UTF16 formatted text.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sheet_to_html&lt;/code&gt; generates HTML output.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sheet_to_formulae&lt;/code&gt; generates a list of the formulae (with value fallbacks).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Cell and cell address manipulation:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;format_cell&lt;/code&gt; generates the text value for a cell (using number formats).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encode_row / decode_row&lt;/code&gt; converts between 0-indexed rows and 1-indexed rows.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encode_col / decode_col&lt;/code&gt; converts between 0-indexed columns and column names.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encode_cell / decode_cell&lt;/code&gt; converts cell addresses.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;encode_range / decode_range&lt;/code&gt; converts cell ranges.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Common Spreadsheet Format&lt;/h2&gt; 
&lt;p&gt;js-xlsx conforms to the Common Spreadsheet Format (CSF):&lt;/p&gt; 
&lt;h3&gt;General Structures&lt;/h3&gt; 
&lt;p&gt;Cell address objects are stored as &lt;code&gt;{c:C, r:R}&lt;/code&gt; where &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; are 0-indexed column and row numbers, respectively. For example, the cell address &lt;code&gt;B5&lt;/code&gt; is represented by the object &lt;code&gt;{c:1, r:4}&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Cell range objects are stored as &lt;code&gt;{s:S, e:E}&lt;/code&gt; where &lt;code&gt;S&lt;/code&gt; is the first cell and &lt;code&gt;E&lt;/code&gt; is the last cell in the range. The ranges are inclusive. For example, the range &lt;code&gt;A3:B7&lt;/code&gt; is represented by the object &lt;code&gt;{s:{c:0, r:2}, e:{c:1, r:6}}&lt;/code&gt;. Utility functions perform a row-major order walk traversal of a sheet range:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for(var R = range.s.r; R &amp;lt;= range.e.r; ++R) {
  for(var C = range.s.c; C &amp;lt;= range.e.c; ++C) {
    var cell_address = {c:C, r:R};
    /* if an A1-style address is needed, encode the address */
    var cell_ref = XLSX.utils.encode_cell(cell_address);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cell Object&lt;/h3&gt; 
&lt;p&gt;Cell objects are plain JS objects with keys and values following the convention:&lt;/p&gt; 
&lt;p&gt;| Key | Description | | — | ––––––––––––––––––––––––––––––––––– | | &lt;code&gt;v&lt;/code&gt; | raw value (see Data Types section for more info) | | &lt;code&gt;w&lt;/code&gt; | formatted text (if applicable) | | &lt;code&gt;t&lt;/code&gt; | type: &lt;code&gt;b&lt;/code&gt; Boolean, &lt;code&gt;e&lt;/code&gt; Error, &lt;code&gt;n&lt;/code&gt; Number, &lt;code&gt;d&lt;/code&gt; Date, &lt;code&gt;s&lt;/code&gt; Text, &lt;code&gt;z&lt;/code&gt; Stub | | &lt;code&gt;f&lt;/code&gt; | cell formula encoded as an A1-style string (if applicable) | | &lt;code&gt;F&lt;/code&gt; | range of enclosing array if formula is array formula (if applicable) | | &lt;code&gt;r&lt;/code&gt; | rich text encoding (if applicable) | | &lt;code&gt;h&lt;/code&gt; | HTML rendering of the rich text (if applicable) | | &lt;code&gt;c&lt;/code&gt; | comments associated with the cell | | &lt;code&gt;z&lt;/code&gt; | number format string associated with the cell (if requested) | | &lt;code&gt;l&lt;/code&gt; | cell hyperlink object (&lt;code&gt;.Target&lt;/code&gt; holds link, &lt;code&gt;.Tooltip&lt;/code&gt; is tooltip) | | &lt;code&gt;s&lt;/code&gt; | the style/theme of the cell (if applicable) |&lt;/p&gt; 
&lt;p&gt;Built-in export utilities (such as the CSV exporter) will use the &lt;code&gt;w&lt;/code&gt; text if it is available. To change a value, be sure to delete &lt;code&gt;cell.w&lt;/code&gt; (or set it to &lt;code&gt;undefined&lt;/code&gt;) before attempting to export. The utilities will regenerate the &lt;code&gt;w&lt;/code&gt; text from the number format (&lt;code&gt;cell.z&lt;/code&gt;) and the raw value if possible.&lt;/p&gt; 
&lt;p&gt;The actual array formula is stored in the &lt;code&gt;f&lt;/code&gt; field of the first cell in the array range. Other cells in the range will omit the &lt;code&gt;f&lt;/code&gt; field.&lt;/p&gt; 
&lt;h4&gt;Data Types&lt;/h4&gt; 
&lt;p&gt;The raw value is stored in the &lt;code&gt;v&lt;/code&gt; value property, interpreted based on the &lt;code&gt;t&lt;/code&gt; type property. This separation allows for representation of numbers as well as numeric text. There are 6 valid cell types:&lt;/p&gt; 
&lt;p&gt;| Type | Description | | :–: | :–––––––––––––––––––––––––––––––––– | | &lt;code&gt;b&lt;/code&gt; | Boolean: value interpreted as JS &lt;code&gt;boolean&lt;/code&gt; | | &lt;code&gt;e&lt;/code&gt; | Error: value is a numeric code and &lt;code&gt;w&lt;/code&gt; property stores common name ** | | &lt;code&gt;n&lt;/code&gt; | Number: value is a JS &lt;code&gt;number&lt;/code&gt; ** | | &lt;code&gt;d&lt;/code&gt; | Date: value is a JS &lt;code&gt;Date&lt;/code&gt; object or string to be parsed as Date ** | | &lt;code&gt;s&lt;/code&gt; | Text: value interpreted as JS &lt;code&gt;string&lt;/code&gt; and written as text ** | | &lt;code&gt;z&lt;/code&gt; | Stub: blank stub cell that is ignored by data processing utilities ** |&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Error values and interpretation&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;| Value | Error Meaning | | —–: | :––––––– | | &lt;code&gt;0x00&lt;/code&gt; | &lt;code&gt;#NULL!&lt;/code&gt; | | &lt;code&gt;0x07&lt;/code&gt; | &lt;code&gt;#DIV/0!&lt;/code&gt; | | &lt;code&gt;0x0F&lt;/code&gt; | &lt;code&gt;#VALUE!&lt;/code&gt; | | &lt;code&gt;0x17&lt;/code&gt; | &lt;code&gt;#REF!&lt;/code&gt; | | &lt;code&gt;0x1D&lt;/code&gt; | &lt;code&gt;#NAME?&lt;/code&gt; | | &lt;code&gt;0x24&lt;/code&gt; | &lt;code&gt;#NUM!&lt;/code&gt; | | &lt;code&gt;0x2A&lt;/code&gt; | &lt;code&gt;#N/A&lt;/code&gt; | | &lt;code&gt;0x2B&lt;/code&gt; | &lt;code&gt;#GETTING_DATA&lt;/code&gt; |&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;Type &lt;code&gt;n&lt;/code&gt; is the Number type. This includes all forms of data that Excel stores as numbers, such as dates/times and Boolean fields. Excel exclusively uses data that can be fit in an IEEE754 floating point number, just like JS Number, so the &lt;code&gt;v&lt;/code&gt; field holds the raw number. The &lt;code&gt;w&lt;/code&gt; field holds formatted text. Dates are stored as numbers by default and converted with &lt;code&gt;XLSX.SSF.parse_date_code&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Type &lt;code&gt;d&lt;/code&gt; is the Date type, generated only when the option &lt;code&gt;cellDates&lt;/code&gt; is passed. Since JSON does not have a natural Date type, parsers are generally expected to store ISO 8601 Date strings like you would get from &lt;code&gt;date.toISOString()&lt;/code&gt;. On the other hand, writers and exporters should be able to handle date strings and JS Date objects. Note that Excel disregards timezone modifiers and treats all dates in the local timezone. The library does not correct for this error.&lt;/p&gt; 
&lt;p&gt;Type &lt;code&gt;s&lt;/code&gt; is the String type. Values are explicitly stored as text. Excel will interpret these cells as “number stored as text”. Generated Excel files automatically suppress that class of error, but other formats may elicit errors.&lt;/p&gt; 
&lt;p&gt;Type &lt;code&gt;z&lt;/code&gt; represents blank stub cells. They are generated in cases where cells have no assigned value but hold comments or other metadata. They are ignored by the core library data processing utility functions. By default these cells are not generated; the parser &lt;code&gt;sheetStubs&lt;/code&gt; option must be set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Dates&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Excel Date Code details&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;By default, Excel stores dates as numbers with a format code that specifies date processing. For example, the date &lt;code&gt;19-Feb-17&lt;/code&gt; is stored as the number &lt;code&gt;42785&lt;/code&gt; with a number format of &lt;code&gt;d-mmm-yy&lt;/code&gt;. The &lt;code&gt;SSF&lt;/code&gt; module understands number formats and performs the appropriate conversion.&lt;/p&gt; 
 &lt;p&gt;XLSX also supports a special date type &lt;code&gt;d&lt;/code&gt; where the data is an ISO 8601 date string. The formatter converts the date back to a number.&lt;/p&gt; 
 &lt;p&gt;The default behavior for all parsers is to generate number cells. Setting &lt;code&gt;cellDates&lt;/code&gt; to true will force the generators to store dates.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Time Zones and Dates&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Excel has no native concept of universal time. All times are specified in the local time zone. Excel limitations prevent specifying true absolute dates.&lt;/p&gt; 
 &lt;p&gt;Following Excel, this library treats all dates as relative to local time zone.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Epochs: 1900 and 1904&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Excel supports two epochs (January 1 1900 and January 1 1904), see &lt;a href=&quot;http://support2.microsoft.com/kb/180162&quot;&gt;“1900 vs. 1904 Date System” article&lt;/a&gt;. The workbook’s epoch can be determined by examining the workbook’s &lt;code&gt;wb.Workbook.WBProps.date1904&lt;/code&gt; property:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;!!(((wb.Workbook||{}).WBProps||{}).date1904)
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Sheet Objects&lt;/h3&gt; 
&lt;p&gt;Each key that does not start with &lt;code&gt;!&lt;/code&gt; maps to a cell (using &lt;code&gt;A-1&lt;/code&gt; notation)&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;sheet[address]&lt;/code&gt; returns the cell object for the specified address.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Special sheet keys (accessible as &lt;code&gt;sheet[key]&lt;/code&gt;, each starting with &lt;code&gt;!&lt;/code&gt;):&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sheet[&#39;!ref&#39;]&lt;/code&gt;: A-1 based range representing the sheet range. Functions that work with sheets should use this parameter to determine the range. Cells that are assigned outside of the range are not processed. In particular, when writing a sheet by hand, cells outside of the range are not included&lt;/p&gt; &lt;p&gt;Functions that handle sheets should test for the presence of &lt;code&gt;!ref&lt;/code&gt; field. If the &lt;code&gt;!ref&lt;/code&gt; is omitted or is not a valid range, functions are free to treat the sheet as empty or attempt to guess the range. The standard utilities that ship with this library treat sheets as empty (for example, the CSV output is empty string).&lt;/p&gt; &lt;p&gt;When reading a worksheet with the &lt;code&gt;sheetRows&lt;/code&gt; property set, the ref parameter will use the restricted range. The original range is set at &lt;code&gt;ws[&#39;!fullref&#39;]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;sheet[&#39;!margins&#39;]&lt;/code&gt;: Object representing the page margins. The default values follow Excel’s “normal” preset. Excel also has a “wide” and a “narrow” preset but they are stored as raw measurements. The main properties are listed below:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Page margin details&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;| key | description | “normal” | “wide” | “narrow” | |–––––|————————|:———|:—––|:–––– | | &lt;code&gt;left&lt;/code&gt; | left margin (inches) | &lt;code&gt;0.7&lt;/code&gt; | &lt;code&gt;1.0&lt;/code&gt; | &lt;code&gt;0.25&lt;/code&gt; | | &lt;code&gt;right&lt;/code&gt; | right margin (inches) | &lt;code&gt;0.7&lt;/code&gt; | &lt;code&gt;1.0&lt;/code&gt; | &lt;code&gt;0.25&lt;/code&gt; | | &lt;code&gt;top&lt;/code&gt; | top margin (inches) | &lt;code&gt;0.75&lt;/code&gt; | &lt;code&gt;1.0&lt;/code&gt; | &lt;code&gt;0.75&lt;/code&gt; | | &lt;code&gt;bottom&lt;/code&gt; | bottom margin (inches) | &lt;code&gt;0.75&lt;/code&gt; | &lt;code&gt;1.0&lt;/code&gt; | &lt;code&gt;0.75&lt;/code&gt; | | &lt;code&gt;header&lt;/code&gt; | header margin (inches) | &lt;code&gt;0.3&lt;/code&gt; | &lt;code&gt;0.5&lt;/code&gt; | &lt;code&gt;0.3&lt;/code&gt; | | &lt;code&gt;footer&lt;/code&gt; | footer margin (inches) | &lt;code&gt;0.3&lt;/code&gt; | &lt;code&gt;0.5&lt;/code&gt; | &lt;code&gt;0.3&lt;/code&gt; |&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* Set worksheet sheet to &quot;normal&quot; */
ws[&quot;!margins&quot;]={left:0.7, right:0.7, top:0.75,bottom:0.75,header:0.3,footer:0.3}
/* Set worksheet sheet to &quot;wide&quot; */
ws[&quot;!margins&quot;]={left:1.0, right:1.0, top:1.0, bottom:1.0, header:0.5,footer:0.5}
/* Set worksheet sheet to &quot;narrow&quot; */
ws[&quot;!margins&quot;]={left:0.25,right:0.25,top:0.75,bottom:0.75,header:0.3,footer:0.3}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;Worksheet Object&lt;/h4&gt; 
&lt;p&gt;In addition to the base sheet keys, worksheets also add:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ws[&#39;!cols&#39;]&lt;/code&gt;: array of column properties objects. Column widths are actually stored in files in a normalized manner, measured in terms of the “Maximum Digit Width” (the largest width of the rendered digits 0-9, in pixels). When parsed, the column objects store the pixel width in the &lt;code&gt;wpx&lt;/code&gt; field, character width in the &lt;code&gt;wch&lt;/code&gt; field, and the maximum digit width in the &lt;code&gt;MDW&lt;/code&gt; field.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ws[&#39;!rows&#39;]&lt;/code&gt;: array of row properties objects as explained later in the docs. Each row object encodes properties including row height and visibility.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ws[&#39;!merges&#39;]&lt;/code&gt;: array of range objects corresponding to the merged cells in the worksheet. Plain text formats do not support merge cells. CSV export will write all cells in the merge range if they exist, so be sure that only the first cell (upper-left) in the range is set.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;ws[&#39;!outline&#39;]&lt;/code&gt;: configure how outlines should behave. Options default to the default settings in Excel 2019:&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;| key | Excel feature | default | |:–––––|:–––––––––––––––––––––––|:––––| | &lt;code&gt;above&lt;/code&gt; | Uncheck “Summary rows below detail” | &lt;code&gt;false&lt;/code&gt; | | &lt;code&gt;left&lt;/code&gt; | Uncheck “Summary rows to the right of detail” | &lt;code&gt;false&lt;/code&gt; |&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ws[&#39;!protect&#39;]&lt;/code&gt;: object of write sheet protection properties. The &lt;code&gt;password&lt;/code&gt; key specifies the password for formats that support password-protected sheets (XLSX/XLSB/XLS). The writer uses the XOR obfuscation method. The following keys control the sheet protection – set to &lt;code&gt;false&lt;/code&gt; to enable a feature when sheet is locked or set to &lt;code&gt;true&lt;/code&gt; to disable a feature:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Worksheet Protection Details&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;| key | feature (true=disabled / false=enabled) | default | |:–––––––––––|:––––––––––––––––––––|:———–| | &lt;code&gt;selectLockedCells&lt;/code&gt; | Select locked cells | enabled | | &lt;code&gt;selectUnlockedCells&lt;/code&gt; | Select unlocked cells | enabled | | &lt;code&gt;formatCells&lt;/code&gt; | Format cells | disabled | | &lt;code&gt;formatColumns&lt;/code&gt; | Format columns | disabled | | &lt;code&gt;formatRows&lt;/code&gt; | Format rows | disabled | | &lt;code&gt;insertColumns&lt;/code&gt; | Insert columns | disabled | | &lt;code&gt;insertRows&lt;/code&gt; | Insert rows | disabled | | &lt;code&gt;insertHyperlinks&lt;/code&gt; | Insert hyperlinks | disabled | | &lt;code&gt;deleteColumns&lt;/code&gt; | Delete columns | disabled | | &lt;code&gt;deleteRows&lt;/code&gt; | Delete rows | disabled | | &lt;code&gt;sort&lt;/code&gt; | Sort | disabled | | &lt;code&gt;autoFilter&lt;/code&gt; | Filter | disabled | | &lt;code&gt;pivotTables&lt;/code&gt; | Use PivotTable reports | disabled | | &lt;code&gt;objects&lt;/code&gt; | Edit objects | enabled | | &lt;code&gt;scenarios&lt;/code&gt; | Edit scenarios | enabled |&lt;/p&gt; 
&lt;/details&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;ws[&#39;!autofilter&#39;]&lt;/code&gt;: AutoFilter object following the schema:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type AutoFilter = {
  ref:string; // A-1 based range representing the AutoFilter table range
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Chartsheet Object&lt;/h4&gt; 
&lt;p&gt;Chartsheets are represented as standard sheets. They are distinguished with the &lt;code&gt;!type&lt;/code&gt; property set to &lt;code&gt;&quot;chart&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The underlying data and &lt;code&gt;!ref&lt;/code&gt; refer to the cached data in the chartsheet. The first row of the chartsheet is the underlying header.&lt;/p&gt; 
&lt;h4&gt;Macrosheet Object&lt;/h4&gt; 
&lt;p&gt;Macrosheets are represented as standard sheets. They are distinguished with the &lt;code&gt;!type&lt;/code&gt; property set to &lt;code&gt;&quot;macro&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Dialogsheet Object&lt;/h4&gt; 
&lt;p&gt;Dialogsheets are represented as standard sheets. They are distinguished with the &lt;code&gt;!type&lt;/code&gt; property set to &lt;code&gt;&quot;dialog&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Workbook Object&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;workbook.SheetNames&lt;/code&gt; is an ordered list of the sheets in the workbook&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;wb.Sheets[sheetname]&lt;/code&gt; returns an object representing the worksheet.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;wb.Props&lt;/code&gt; is an object storing the standard properties. &lt;code&gt;wb.Custprops&lt;/code&gt; stores custom properties. Since the XLS standard properties deviate from the XLSX standard, XLS parsing stores core properties in both places.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;wb.Workbook&lt;/code&gt; stores &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#workbook-level-attributes&quot;&gt;workbook-level attributes&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Workbook File Properties&lt;/h4&gt; 
&lt;p&gt;The various file formats use different internal names for file properties. The workbook &lt;code&gt;Props&lt;/code&gt; object normalizes the names:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;File Properties&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;| JS Name | Excel Description | |:–––––––|:—————————––| | &lt;code&gt;Title&lt;/code&gt; | Summary tab “Title” | | &lt;code&gt;Subject&lt;/code&gt; | Summary tab “Subject” | | &lt;code&gt;Author&lt;/code&gt; | Summary tab “Author” | | &lt;code&gt;Manager&lt;/code&gt; | Summary tab “Manager” | | &lt;code&gt;Company&lt;/code&gt; | Summary tab “Company” | | &lt;code&gt;Category&lt;/code&gt; | Summary tab “Category” | | &lt;code&gt;Keywords&lt;/code&gt; | Summary tab “Keywords” | | &lt;code&gt;Comments&lt;/code&gt; | Summary tab “Comments” | | &lt;code&gt;LastAuthor&lt;/code&gt; | Statistics tab “Last saved by” | | &lt;code&gt;CreatedDate&lt;/code&gt; | Statistics tab “Created” |&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;For example, to set the workbook title property:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if(!wb.Props) wb.Props = {};
wb.Props.Title = &quot;Insert Title Here&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Custom properties are added in the workbook &lt;code&gt;Custprops&lt;/code&gt; object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if(!wb.Custprops) wb.Custprops = {};
wb.Custprops[&quot;Custom Property&quot;] = &quot;Custom Value&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Writers will process the &lt;code&gt;Props&lt;/code&gt; key of the options object:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* force the Author to be &quot;SheetJS&quot; */
XLSX.write(wb, {Props:{Author:&quot;SheetJS&quot;}});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Workbook-Level Attributes&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;wb.Workbook&lt;/code&gt; stores workbook-level attributes.&lt;/p&gt; 
&lt;h4&gt;Defined Names&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;wb.Workbook.Names&lt;/code&gt; is an array of defined name objects which have the keys:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Defined Name Properties&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;| Key | Description | |:–––––|:—————————————————————–| | &lt;code&gt;Sheet&lt;/code&gt; | Name scope. Sheet Index (0 = first sheet) or &lt;code&gt;null&lt;/code&gt; (Workbook) | | &lt;code&gt;Name&lt;/code&gt; | Case-sensitive name. Standard rules apply ** | | &lt;code&gt;Ref&lt;/code&gt; | A1-style Reference (&lt;code&gt;&quot;Sheet1!$A$1:$D$20&quot;&lt;/code&gt;) | | &lt;code&gt;Comment&lt;/code&gt; | Comment (only applicable for XLS/XLSX/XLSB) |&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;Excel allows two sheet-scoped defined names to share the same name. However, a sheet-scoped name cannot collide with a workbook-scope name. Workbook writers may not enforce this constraint.&lt;/p&gt; 
&lt;h4&gt;Workbook Views&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;wb.Workbook.Views&lt;/code&gt; is an array of workbook view objects which have the keys:&lt;/p&gt; 
&lt;p&gt;| Key | Description | |:––––––––|:––––––––––––––––––––––––––| | &lt;code&gt;RTL&lt;/code&gt; | If true, display right-to-left |&lt;/p&gt; 
&lt;h4&gt;Miscellaneous Workbook Properties&lt;/h4&gt; 
&lt;p&gt;&lt;code&gt;wb.Workbook.WBProps&lt;/code&gt; holds other workbook properties:&lt;/p&gt; 
&lt;p&gt;| Key | Description | |:––––––––|:––––––––––––––––––––––––––| | &lt;code&gt;CodeName&lt;/code&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#vba-and-macros&quot;&gt;VBA Project Workbook Code Name&lt;/a&gt; | | &lt;code&gt;date1904&lt;/code&gt; | epoch: 0/false for 1900 system, 1/true for 1904 | | &lt;code&gt;filterPrivacy&lt;/code&gt; | Warn or strip personally identifying info on save |&lt;/p&gt; 
&lt;h3&gt;Document Features&lt;/h3&gt; 
&lt;p&gt;Even for basic features like date storage, the official Excel formats store the same content in different ways. The parsers are expected to convert from the underlying file format representation to the Common Spreadsheet Format. Writers are expected to convert from CSF back to the underlying file format.&lt;/p&gt; 
&lt;h4&gt;Formulae&lt;/h4&gt; 
&lt;p&gt;The A1-style formula string is stored in the &lt;code&gt;f&lt;/code&gt; field. Even though different file formats store the formulae in different ways, the formats are translated. Even though some formats store formulae with a leading equal sign, CSF formulae do not start with &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Representation of A1=1, A2=2, A3=A1+A2&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  &quot;!ref&quot;: &quot;A1:A3&quot;,
  A1: { t:&#39;n&#39;, v:1 },
  A2: { t:&#39;n&#39;, v:2 },
  A3: { t:&#39;n&#39;, v:3, f:&#39;A1+A2&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Shared formulae are decompressed and each cell has the formula corresponding to its cell. Writers generally do not attempt to generate shared formulae.&lt;/p&gt; 
&lt;p&gt;Cells with formula entries but no value will be serialized in a way that Excel and other spreadsheet tools will recognize. This library will not automatically compute formula results! For example, to compute &lt;code&gt;BESSELJ&lt;/code&gt; in a worksheet:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Formula without known value&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  &quot;!ref&quot;: &quot;A1:A3&quot;,
  A1: { t:&#39;n&#39;, v:3.14159 },
  A2: { t:&#39;n&#39;, v:2 },
  A3: { t:&#39;n&#39;, f:&#39;BESSELJ(A1,A2)&#39; }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;strong&gt;Array Formulae&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Array formulae are stored in the top-left cell of the array block. All cells of an array formula have a &lt;code&gt;F&lt;/code&gt; field corresponding to the range. A single-cell formula can be distinguished from a plain formula by the presence of &lt;code&gt;F&lt;/code&gt; field.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Array Formula examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;For example, setting the cell &lt;code&gt;C1&lt;/code&gt; to the array formula &lt;code&gt;{=SUM(A1:A3*B1:B3)}&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;worksheet[&#39;C1&#39;] = { t:&#39;n&#39;, f: &quot;SUM(A1:A3*B1:B3)&quot;, F:&quot;C1:C1&quot; };
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;For a multi-cell array formula, every cell has the same array range but only the first cell specifies the formula. Consider &lt;code&gt;D1:D3=A1:A3*B1:B3&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;worksheet[&#39;D1&#39;] = { t:&#39;n&#39;, F:&quot;D1:D3&quot;, f:&quot;A1:A3*B1:B3&quot; };
worksheet[&#39;D2&#39;] = { t:&#39;n&#39;, F:&quot;D1:D3&quot; };
worksheet[&#39;D3&#39;] = { t:&#39;n&#39;, F:&quot;D1:D3&quot; };
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Utilities and writers are expected to check for the presence of a &lt;code&gt;F&lt;/code&gt; field and ignore any possible formula element &lt;code&gt;f&lt;/code&gt; in cells other than the starting cell. They are not expected to perform validation of the formulae!&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Formula Output Utility Function&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The &lt;code&gt;sheet_to_formulae&lt;/code&gt; method generates one line per formula or array formula. Array formulae are rendered in the form &lt;code&gt;range=formula&lt;/code&gt; while plain cells are rendered in the form &lt;code&gt;cell=formula or value&lt;/code&gt;. Note that string literals are prefixed with an apostrophe &lt;code&gt;&#39;&lt;/code&gt;, consistent with Excel’s formula bar display.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Formulae File Format Details&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;| Storage Representation | Formats | Read | Write | |:———————–|:———————––|:—–:|:—–:| | A1-style strings | XLSX | :o: | :o: | | RC-style strings | XLML and plain text | :o: | :o: | | BIFF Parsed formulae | XLSB and all XLS formats | :o: | | | OpenFormula formulae | ODS/FODS/UOS | :o: | :o: |&lt;/p&gt; 
 &lt;p&gt;Since Excel prohibits named cells from colliding with names of A1 or RC style cell references, a (not-so-simple) regex conversion is possible. BIFF Parsed formulae have to be explicitly unwound. OpenFormula formulae can be converted with regular expressions.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Column Properties&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;!cols&lt;/code&gt; array in each worksheet, if present, is a collection of &lt;code&gt;ColInfo&lt;/code&gt; objects which have the following properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type ColInfo = {
  /* visibility */
  hidden?: boolean; // if true, the column is hidden

  /* column width is specified in one of the following ways: */
  wpx?:    number;  // width in screen pixels
  width?:  number;  // width in Excel&#39;s &quot;Max Digit Width&quot;, width*256 is integral
  wch?:    number;  // width in characters

  /* other fields for preserving features from files */
  MDW?:    number;  // Excel&#39;s &quot;Max Digit Width&quot; unit, always integral
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Why are there three width types?&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;There are three different width types corresponding to the three different ways spreadsheets store column widths:&lt;/p&gt; 
 &lt;p&gt;SYLK and other plain text formats use raw character count. Contemporaneous tools like Visicalc and Multiplan were character based. Since the characters had the same width, it sufficed to store a count. This tradition was continued into the BIFF formats.&lt;/p&gt; 
 &lt;p&gt;SpreadsheetML (2003) tried to align with HTML by standardizing on screen pixel count throughout the file. Column widths, row heights, and other measures use pixels. When the pixel and character counts do not align, Excel rounds values.&lt;/p&gt; 
 &lt;p&gt;XLSX internally stores column widths in a nebulous “Max Digit Width” form. The Max Digit Width is the width of the largest digit when rendered (generally the “0” character is the widest). The internal width must be an integer multiple of the the width divided by 256. ECMA-376 describes a formula for converting between pixels and the internal width. This represents a hybrid approach.&lt;/p&gt; 
 &lt;p&gt;Read functions attempt to populate all three properties. Write functions will try to cycle specified values to the desired type. In order to avoid potential conflicts, manipulation should delete the other properties first. For example, when changing the pixel width, delete the &lt;code&gt;wch&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; properties.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Implementation details&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Given the constraints, it is possible to determine the MDW without actually inspecting the font! The parsers guess the pixel width by converting from width to pixels and back, repeating for all possible MDW and selecting the MDW that minimizes the error. XLML actually stores the pixel width, so the guess works in the opposite direction.&lt;/p&gt; 
 &lt;p&gt;Even though all of the information is made available, writers are expected to follow the priority order:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;use &lt;code&gt;width&lt;/code&gt; field if available&lt;/li&gt; 
  &lt;li&gt;use &lt;code&gt;wpx&lt;/code&gt; pixel width if available&lt;/li&gt; 
  &lt;li&gt;use &lt;code&gt;wch&lt;/code&gt; character count if available&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h4&gt;Row Properties&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;!rows&lt;/code&gt; array in each worksheet, if present, is a collection of &lt;code&gt;RowInfo&lt;/code&gt; objects which have the following properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type RowInfo = {
  /* visibility */
  hidden?: boolean; // if true, the row is hidden

  /* row height is specified in one of the following ways: */
  hpx?:    number;  // height in screen pixels
  hpt?:    number;  // height in points

  level?:  number;  // 0-indexed outline / group level
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: Excel UI displays the base outline level as &lt;code&gt;1&lt;/code&gt; and the max level as &lt;code&gt;8&lt;/code&gt;. The &lt;code&gt;level&lt;/code&gt; field stores the base outline as &lt;code&gt;0&lt;/code&gt; and the max level as &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Implementation details&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Excel internally stores row heights in points. The default resolution is 72 DPI or 96 PPI, so the pixel and point size should agree. For different resolutions they may not agree, so the library separates the concepts.&lt;/p&gt; 
 &lt;p&gt;Even though all of the information is made available, writers are expected to follow the priority order:&lt;/p&gt; 
 &lt;ol&gt; 
  &lt;li&gt;use &lt;code&gt;hpx&lt;/code&gt; pixel height if available&lt;/li&gt; 
  &lt;li&gt;use &lt;code&gt;hpt&lt;/code&gt; point height if available&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/details&gt; 
&lt;h4&gt;Number Formats&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;cell.w&lt;/code&gt; formatted text for each cell is produced from &lt;code&gt;cell.v&lt;/code&gt; and &lt;code&gt;cell.z&lt;/code&gt; format. If the format is not specified, the Excel &lt;code&gt;General&lt;/code&gt; format is used. The format can either be specified as a string or as an index into the format table. Parsers are expected to populate &lt;code&gt;workbook.SSF&lt;/code&gt; with the number format table. Writers are expected to serialize the table.&lt;/p&gt; 
&lt;p&gt;Custom tools should ensure that the local table has each used format string somewhere in the table. Excel convention mandates that the custom formats start at index 164. The following example creates a custom format from scratch:&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;New worksheet with custom format&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var wb = {
  SheetNames: [&quot;Sheet1&quot;],
  Sheets: {
    Sheet1: {
      &quot;!ref&quot;:&quot;A1:C1&quot;,
      A1: { t:&quot;n&quot;, v:10000 },                    // &amp;lt;-- General format
      B1: { t:&quot;n&quot;, v:10000, z: &quot;0%&quot; },           // &amp;lt;-- Builtin format
      C1: { t:&quot;n&quot;, v:10000, z: &quot;\&quot;T\&quot;\ #0.00&quot; }  // &amp;lt;-- Custom format
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;The rules are slightly different from how Excel displays custom number formats. In particular, literal characters must be wrapped in double quotes or preceded by a backslash. For more info, see the Excel documentation article &lt;code&gt;Create or delete a custom number format&lt;/code&gt; or ECMA-376 18.8.31 (Number Formats)&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Default Number Formats&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The default formats are listed in ECMA-376 18.8.30:&lt;/p&gt; 
 &lt;p&gt;| ID | Format | |—:|:—————————| | 0 | &lt;code&gt;General&lt;/code&gt; | | 1 | &lt;code&gt;0&lt;/code&gt; | | 2 | &lt;code&gt;0.00&lt;/code&gt; | | 3 | &lt;code&gt;#,##0&lt;/code&gt; | | 4 | &lt;code&gt;#,##0.00&lt;/code&gt; | | 9 | &lt;code&gt;0%&lt;/code&gt; | | 10 | &lt;code&gt;0.00%&lt;/code&gt; | | 11 | &lt;code&gt;0.00E+00&lt;/code&gt; | | 12 | &lt;code&gt;# ?/?&lt;/code&gt; | | 13 | &lt;code&gt;# ??/??&lt;/code&gt; | | 14 | &lt;code&gt;m/d/yy&lt;/code&gt; (see below) | | 15 | &lt;code&gt;d-mmm-yy&lt;/code&gt; | | 16 | &lt;code&gt;d-mmm&lt;/code&gt; | | 17 | &lt;code&gt;mmm-yy&lt;/code&gt; | | 18 | &lt;code&gt;h:mm AM/PM&lt;/code&gt; | | 19 | &lt;code&gt;h:mm:ss AM/PM&lt;/code&gt; | | 20 | &lt;code&gt;h:mm&lt;/code&gt; | | 21 | &lt;code&gt;h:mm:ss&lt;/code&gt; | | 22 | &lt;code&gt;m/d/yy h:mm&lt;/code&gt; | | 37 | &lt;code&gt;#,##0 ;(#,##0)&lt;/code&gt; | | 38 | &lt;code&gt;#,##0 ;[Red](#,##0)&lt;/code&gt; | | 39 | &lt;code&gt;#,##0.00;(#,##0.00)&lt;/code&gt; | | 40 | &lt;code&gt;#,##0.00;[Red](#,##0.00)&lt;/code&gt; | | 45 | &lt;code&gt;mm:ss&lt;/code&gt; | | 46 | &lt;code&gt;[h]:mm:ss&lt;/code&gt; | | 47 | &lt;code&gt;mmss.0&lt;/code&gt; | | 48 | &lt;code&gt;##0.0E+0&lt;/code&gt; | | 49 | &lt;code&gt;@&lt;/code&gt; |&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;Format 14 (&lt;code&gt;m/d/yy&lt;/code&gt;) is localized by Excel: even though the file specifies that number format, it will be drawn differently based on system settings. It makes sense when the producer and consumer of files are in the same locale, but that is not always the case over the Internet. To get around this ambiguity, parse functions accept the &lt;code&gt;dateNF&lt;/code&gt; option to override the interpretation of that specific format string.&lt;/p&gt; 
&lt;h4&gt;Hyperlinks&lt;/h4&gt; 
&lt;p&gt;Hyperlinks are stored in the &lt;code&gt;l&lt;/code&gt; key of cell objects. The &lt;code&gt;Target&lt;/code&gt; field of the hyperlink object is the target of the link, including the URI fragment. Tooltips are stored in the &lt;code&gt;Tooltip&lt;/code&gt; field and are displayed when you move your mouse over the text.&lt;/p&gt; 
&lt;p&gt;For example, the following snippet creates a link from cell &lt;code&gt;A3&lt;/code&gt; to &lt;a href=&quot;http://sheetjs.com&quot;&gt;http://sheetjs.com&lt;/a&gt; with the tip &lt;code&gt;&quot;Find us @ SheetJS.com!&quot;&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;ws[&#39;A3&#39;].l = { Target:&quot;http://sheetjs.com&quot;, Tooltip:&quot;Find us @ SheetJS.com!&quot; };
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that Excel does not automatically style hyperlinks – they will generally be displayed as normal text.&lt;/p&gt; 
&lt;p&gt;Links where the target is a cell or range or defined name in the same workbook (“Internal Links”) are marked with a leading hash character:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;ws[&#39;A2&#39;].l = { Target:&quot;#E2&quot; }; /* link to cell E2 */
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Cell Comments&lt;/h4&gt; 
&lt;p&gt;Cell comments are objects stored in the &lt;code&gt;c&lt;/code&gt; array of cell objects. The actual contents of the comment are split into blocks based on the comment author. The &lt;code&gt;a&lt;/code&gt; field of each comment object is the author of the comment and the &lt;code&gt;t&lt;/code&gt; field is the plain text representation.&lt;/p&gt; 
&lt;p&gt;For example, the following snippet appends a cell comment into cell &lt;code&gt;A1&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if(!ws.A1.c) ws.A1.c = [];
ws.A1.c.push({a:&quot;SheetJS&quot;, t:&quot;I&#39;m a little comment, short and stout!&quot;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note: XLSB enforces a 54 character limit on the Author name. Names longer than 54 characters may cause issues with other formats.&lt;/p&gt; 
&lt;p&gt;To mark a comment as normally hidden, set the &lt;code&gt;hidden&lt;/code&gt; property:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if(!ws.A1.c) ws.A1.c = [];
ws.A1.c.push({a:&quot;SheetJS&quot;, t:&quot;This comment is visible&quot;});

if(!ws.A2.c) ws.A2.c = [];
ws.A2.c.hidden = true;
ws.A2.c.push({a:&quot;SheetJS&quot;, t:&quot;This comment will be hidden&quot;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Sheet Visibility&lt;/h4&gt; 
&lt;p&gt;Excel enables hiding sheets in the lower tab bar. The sheet data is stored in the file but the UI does not readily make it available. Standard hidden sheets are revealed in the “Unhide” menu. Excel also has “very hidden” sheets which cannot be revealed in the menu. It is only accessible in the VB Editor!&lt;/p&gt; 
&lt;p&gt;The visibility setting is stored in the &lt;code&gt;Hidden&lt;/code&gt; property of sheet props array.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;More details&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;| Value | Definition | |:—–:|:————| | 0 | Visible | | 1 | Hidden | | 2 | Very Hidden |&lt;/p&gt; 
 &lt;p&gt;With &lt;a href=&quot;https://rawgit.com/SheetJS/test_files/master/sheet_visibility.xlsx&quot;&gt;https://rawgit.com/SheetJS/test_files/master/sheet_visibility.xlsx&lt;/a&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; wb.Workbook.Sheets.map(function(x) { return [x.name, x.Hidden] })
[ [ &#39;Visible&#39;, 0 ], [ &#39;Hidden&#39;, 1 ], [ &#39;VeryHidden&#39;, 2 ] ]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Non-Excel formats do not support the Very Hidden state. The best way to test if a sheet is visible is to check if the &lt;code&gt;Hidden&lt;/code&gt; property is logical truth:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; wb.Workbook.Sheets.map(function(x) { return [x.name, !x.Hidden] })
[ [ &#39;Visible&#39;, true ], [ &#39;Hidden&#39;, false ], [ &#39;VeryHidden&#39;, false ] ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;VBA and Macros&lt;/h4&gt; 
&lt;p&gt;VBA Macros are stored in a special data blob that is exposed in the &lt;code&gt;vbaraw&lt;/code&gt; property of the workbook object when the &lt;code&gt;bookVBA&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;. They are supported in &lt;code&gt;XLSM&lt;/code&gt;, &lt;code&gt;XLSB&lt;/code&gt;, and &lt;code&gt;BIFF8 XLS&lt;/code&gt; formats. The supported format writers automatically insert the data blobs if it is present in the workbook and associate with the worksheet names.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Custom Code Names&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The workbook code name is stored in &lt;code&gt;wb.Workbook.WBProps.CodeName&lt;/code&gt;. By default, Excel will write &lt;code&gt;ThisWorkbook&lt;/code&gt; or a translated phrase like &lt;code&gt;DieseArbeitsmappe&lt;/code&gt;. Worksheet and Chartsheet code names are in the worksheet properties object at &lt;code&gt;wb.Workbook.Sheets[i].CodeName&lt;/code&gt;. Macrosheets and Dialogsheets are ignored.&lt;/p&gt; 
 &lt;p&gt;The readers and writers preserve the code names, but they have to be manually set when adding a VBA blob to a different workbook.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Macrosheets&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Older versions of Excel also supported a non-VBA “macrosheet” sheet type that stored automation commands. These are exposed in objects with the &lt;code&gt;!type&lt;/code&gt; property set to &lt;code&gt;&quot;macro&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Detecting macros in workbooks&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The &lt;code&gt;vbaraw&lt;/code&gt; field will only be set if macros are present, so testing is simple:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function wb_has_macro(wb/*:workbook*/)/*:boolean*/ {
	if(!!wb.vbaraw) return true;
	const sheets = wb.SheetNames.map((n) =&amp;gt; wb.Sheets[n]);
	return sheets.some((ws) =&amp;gt; !!ws &amp;amp;&amp;amp; ws[&#39;!type&#39;]==&#39;macro&#39;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Parsing Options&lt;/h2&gt; 
&lt;p&gt;The exported &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;readFile&lt;/code&gt; functions accept an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | ——: | :————————————————— | |&lt;code&gt;type&lt;/code&gt; | | Input data encoding (see Input Type below) | |&lt;code&gt;raw&lt;/code&gt; | false | If true, plain text parsing will not parse values ** | |&lt;code&gt;codepage&lt;/code&gt; | | If specified, use code page when appropriate ** | |&lt;code&gt;cellFormula&lt;/code&gt;| true | Save formulae to the .f field | |&lt;code&gt;cellHTML&lt;/code&gt; | true | Parse rich text and save HTML to the &lt;code&gt;.h&lt;/code&gt; field | |&lt;code&gt;cellNF&lt;/code&gt; | false | Save number format string to the &lt;code&gt;.z&lt;/code&gt; field | |&lt;code&gt;cellStyles&lt;/code&gt; | false | Save style/theme info to the &lt;code&gt;.s&lt;/code&gt; field | |&lt;code&gt;cellText&lt;/code&gt; | true | Generated formatted text to the &lt;code&gt;.w&lt;/code&gt; field | |&lt;code&gt;cellDates&lt;/code&gt; | false | Store dates as type &lt;code&gt;d&lt;/code&gt; (default is &lt;code&gt;n&lt;/code&gt;) | |&lt;code&gt;dateNF&lt;/code&gt; | | If specified, use the string for date code 14 ** | |&lt;code&gt;sheetStubs&lt;/code&gt; | false | Create cell objects of type &lt;code&gt;z&lt;/code&gt; for stub cells | |&lt;code&gt;sheetRows&lt;/code&gt; | 0 | If &amp;gt;0, read the first &lt;code&gt;sheetRows&lt;/code&gt; rows ** | |&lt;code&gt;bookDeps&lt;/code&gt; | false | If true, parse calculation chains | |&lt;code&gt;bookFiles&lt;/code&gt; | false | If true, add raw files to book object ** | |&lt;code&gt;bookProps&lt;/code&gt; | false | If true, only parse enough to get book metadata ** | |&lt;code&gt;bookSheets&lt;/code&gt; | false | If true, only parse enough to get the sheet names | |&lt;code&gt;bookVBA&lt;/code&gt; | false | If true, copy VBA blob to &lt;code&gt;vbaraw&lt;/code&gt; field ** | |&lt;code&gt;password&lt;/code&gt; | “” | If defined and file is encrypted, use password ** | |&lt;code&gt;WTF&lt;/code&gt; | false | If true, throw errors on unexpected file features ** | |&lt;code&gt;sheets&lt;/code&gt; | | If specified, only parse specified sheets ** | |&lt;code&gt;PRN&lt;/code&gt; | false | If true, allow parsing of PRN files ** | |&lt;code&gt;xlfn&lt;/code&gt; | false | If true, preserve &lt;code&gt;_xlfn.&lt;/code&gt; prefixes in formulae ** |&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Even if &lt;code&gt;cellNF&lt;/code&gt; is false, formatted text will be generated and saved to &lt;code&gt;.w&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;In some cases, sheets may be parsed even if &lt;code&gt;bookSheets&lt;/code&gt; is false.&lt;/li&gt; 
 &lt;li&gt;Excel aggressively tries to interpret values from CSV and other plain text. This leads to surprising behavior! The &lt;code&gt;raw&lt;/code&gt; option suppresses value parsing.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bookSheets&lt;/code&gt; and &lt;code&gt;bookProps&lt;/code&gt; combine to give both sets of information&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Deps&lt;/code&gt; will be an empty object if &lt;code&gt;bookDeps&lt;/code&gt; is false&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bookFiles&lt;/code&gt; behavior depends on file type: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;keys&lt;/code&gt; array (paths in the ZIP) for ZIP-based formats&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;files&lt;/code&gt; hash (mapping paths to objects representing the files) for ZIP&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;cfb&lt;/code&gt; object for formats using CFB containers&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sheetRows-1&lt;/code&gt; rows will be generated when looking at the JSON object output (since the header row is counted as a row when parsing the data)&lt;/li&gt; 
 &lt;li&gt;By default all worksheets are parsed. &lt;code&gt;sheets&lt;/code&gt; restricts based on input type: 
  &lt;ul&gt; 
   &lt;li&gt;number: zero-based index of worksheet to parse (&lt;code&gt;0&lt;/code&gt; is first worksheet)&lt;/li&gt; 
   &lt;li&gt;string: name of worksheet to parse (case insensitive)&lt;/li&gt; 
   &lt;li&gt;array of numbers and strings to select multiple worksheets.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;bookVBA&lt;/code&gt; merely exposes the raw VBA CFB object. It does not parse the data. XLSM and XLSB store the VBA CFB object in &lt;code&gt;xl/vbaProject.bin&lt;/code&gt;. BIFF8 XLS mixes the VBA entries alongside the core Workbook entry, so the library generates a new XLSB-compatible blob from the XLS CFB container.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;codepage&lt;/code&gt; is applied to BIFF2 - BIFF5 files without &lt;code&gt;CodePage&lt;/code&gt; records and to CSV files without BOM in &lt;code&gt;type:&quot;binary&quot;&lt;/code&gt;. BIFF8 XLS always defaults to 1200.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PRN&lt;/code&gt; affects parsing of text files without a common delimiter character.&lt;/li&gt; 
 &lt;li&gt;Currently only XOR encryption is supported. Unsupported error will be thrown for files employing other encryption methods.&lt;/li&gt; 
 &lt;li&gt;Newer Excel functions are serialized with the &lt;code&gt;_xlfn.&lt;/code&gt; prefix, hidden from the user. SheetJS will strip &lt;code&gt;_xlfn.&lt;/code&gt; normally. The &lt;code&gt;xlfn&lt;/code&gt; option preserves them.&lt;/li&gt; 
 &lt;li&gt;WTF is mainly for development. By default, the parser will suppress read errors on single worksheets, allowing you to read from the worksheets that do parse properly. Setting &lt;code&gt;WTF:true&lt;/code&gt; forces those errors to be thrown.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Input Type&lt;/h3&gt; 
&lt;p&gt;Strings can be interpreted in multiple ways. The &lt;code&gt;type&lt;/code&gt; parameter for &lt;code&gt;read&lt;/code&gt; tells the library how to parse the data argument:&lt;/p&gt; 
&lt;p&gt;| &lt;code&gt;type&lt;/code&gt; | expected input | |————|—————————————————————–| | &lt;code&gt;&quot;base64&quot;&lt;/code&gt; | string: Base64 encoding of the file | | &lt;code&gt;&quot;binary&quot;&lt;/code&gt; | string: binary string (byte &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;data.charCodeAt(n)&lt;/code&gt;) | | &lt;code&gt;&quot;string&quot;&lt;/code&gt; | string: JS string (characters interpreted as UTF8) | | &lt;code&gt;&quot;buffer&quot;&lt;/code&gt; | nodejs Buffer | | &lt;code&gt;&quot;array&quot;&lt;/code&gt; | array: array of 8-bit unsigned int (byte &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;data[n]&lt;/code&gt;) | | &lt;code&gt;&quot;file&quot;&lt;/code&gt; | string: path of file that will be read (nodejs only) |&lt;/p&gt; 
&lt;h3&gt;Guessing File Type&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Implementation Details&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Excel and other spreadsheet tools read the first few bytes and apply other heuristics to determine a file type. This enables file type punning: renaming files with the &lt;code&gt;.xls&lt;/code&gt; extension will tell your computer to use Excel to open the file but Excel will know how to handle it. This library applies similar logic:&lt;/p&gt; 
 &lt;p&gt;| Byte 0 | Raw File Type | Spreadsheet Types | |:—––|:–––––––|:––––––––––––––––––––––––––| | &lt;code&gt;0xD0&lt;/code&gt; | CFB Container | BIFF 5/8 or password-protected XLSX/XLSB or WQ3/QPW | | &lt;code&gt;0x09&lt;/code&gt; | BIFF Stream | BIFF 2/3/4/5 | | &lt;code&gt;0x3C&lt;/code&gt; | XML/HTML | SpreadsheetML / Flat ODS / UOS1 / HTML / plain text | | &lt;code&gt;0x50&lt;/code&gt; | ZIP Archive | XLSB or XLSX/M or ODS or UOS2 or plain text | | &lt;code&gt;0x49&lt;/code&gt; | Plain Text | SYLK or plain text | | &lt;code&gt;0x54&lt;/code&gt; | Plain Text | DIF or plain text | | &lt;code&gt;0xEF&lt;/code&gt; | UTF8 Encoded | SpreadsheetML / Flat ODS / UOS1 / HTML / plain text | | &lt;code&gt;0xFF&lt;/code&gt; | UTF16 Encoded | SpreadsheetML / Flat ODS / UOS1 / HTML / plain text | | &lt;code&gt;0x00&lt;/code&gt; | Record Stream | Lotus WK* or Quattro Pro or plain text | | &lt;code&gt;0x7B&lt;/code&gt; | Plain text | RTF or plain text | | &lt;code&gt;0x0A&lt;/code&gt; | Plain text | SpreadsheetML / Flat ODS / UOS1 / HTML / plain text | | &lt;code&gt;0x0D&lt;/code&gt; | Plain text | SpreadsheetML / Flat ODS / UOS1 / HTML / plain text | | &lt;code&gt;0x20&lt;/code&gt; | Plain text | SpreadsheetML / Flat ODS / UOS1 / HTML / plain text |&lt;/p&gt; 
 &lt;p&gt;DBF files are detected based on the first byte as well as the third and fourth bytes (corresponding to month and day of the file date)&lt;/p&gt; 
 &lt;p&gt;Plain text format guessing follows the priority order:&lt;/p&gt; 
 &lt;p&gt;| Format | Test | |:—––|:––––––––––––––––––––––––––––––––––| | XML | &lt;code&gt;&amp;lt;?xml&lt;/code&gt; appears in the first 1024 characters | | HTML | starts with &lt;code&gt;&amp;lt;&lt;/code&gt; and HTML tags appear in the first 1024 characters * | | XML | starts with &lt;code&gt;&amp;lt;&lt;/code&gt; | | RTF | starts with &lt;code&gt;{\rt&lt;/code&gt; | | DSV | starts with &lt;code&gt;/sep=.$/&lt;/code&gt;, separator is the specified character | | DSV | more unquoted &lt;code&gt;&quot;;&quot;&lt;/code&gt; chars than &lt;code&gt;&quot;\t&quot;&lt;/code&gt; or &lt;code&gt;&quot;,&quot;&lt;/code&gt; in the first 1024 | | TSV | more unquoted &lt;code&gt;&quot;\t&quot;&lt;/code&gt; chars than &lt;code&gt;&quot;,&quot;&lt;/code&gt; chars in the first 1024 | | CSV | one of the first 1024 characters is a comma &lt;code&gt;&quot;,&quot;&lt;/code&gt; | | ETH | starts with &lt;code&gt;socialcalc:version:&lt;/code&gt; | | PRN | (default) |&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;HTML tags include: &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;meta&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;style&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Why are random text files valid?&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Excel is extremely aggressive in reading files. Adding an XLS extension to any display text file (where the only characters are ANSI display chars) tricks Excel into thinking that the file is potentially a CSV or TSV file, even if it is only one column! This library attempts to replicate that behavior.&lt;/p&gt; 
 &lt;p&gt;The best approach is to validate the desired worksheet and ensure it has the expected number of rows or columns. Extracting the range is extremely simple:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var range = XLSX.utils.decode_range(worksheet[&#39;!ref&#39;]);
var ncols = range.e.c - range.s.c + 1, nrows = range.e.r - range.s.r + 1;
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;Writing Options&lt;/h2&gt; 
&lt;p&gt;The exported &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;writeFile&lt;/code&gt; functions accept an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | —––: | :––––––––––––––––––––––––– | |&lt;code&gt;type&lt;/code&gt; | | Output data encoding (see Output Type below) | |&lt;code&gt;cellDates&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | Store dates as type &lt;code&gt;d&lt;/code&gt; (default is &lt;code&gt;n&lt;/code&gt;) | |&lt;code&gt;bookSST&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | Generate Shared String Table ** | |&lt;code&gt;bookType&lt;/code&gt; | &lt;code&gt;&quot;xlsx&quot;&lt;/code&gt; | Type of Workbook (see below for supported formats) | |&lt;code&gt;sheet&lt;/code&gt; | &lt;code&gt;&quot;&quot;&lt;/code&gt; | Name of Worksheet for single-sheet formats ** | |&lt;code&gt;compression&lt;/code&gt;| &lt;code&gt;false&lt;/code&gt; | Use ZIP compression for ZIP-based formats ** | |&lt;code&gt;Props&lt;/code&gt; | | Override workbook properties when writing ** | |&lt;code&gt;themeXLSX&lt;/code&gt; | | Override theme XML when writing XLSX/XLSB/XLSM ** | |&lt;code&gt;ignoreEC&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt; | Suppress “number as text” errors ** |&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;bookSST&lt;/code&gt; is slower and more memory intensive, but has better compatibility with older versions of iOS Numbers&lt;/li&gt; 
 &lt;li&gt;The raw data is the only thing guaranteed to be saved. Features not described in this README may not be serialized.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;cellDates&lt;/code&gt; only applies to XLSX output and is not guaranteed to work with third-party readers. Excel itself does not usually write cells with type &lt;code&gt;d&lt;/code&gt; so non-Excel tools may ignore the data or error in the presence of dates.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Props&lt;/code&gt; is an object mirroring the workbook &lt;code&gt;Props&lt;/code&gt; field. See the table from the &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#workbook-file-properties&quot;&gt;Workbook File Properties&lt;/a&gt; section.&lt;/li&gt; 
 &lt;li&gt;if specified, the string from &lt;code&gt;themeXLSX&lt;/code&gt; will be saved as the primary theme for XLSX/XLSB/XLSM files (to &lt;code&gt;xl/theme/theme1.xml&lt;/code&gt; in the ZIP)&lt;/li&gt; 
 &lt;li&gt;Due to a bug in the program, some features like “Text to Columns” will crash Excel on worksheets where error conditions are ignored. The writer will mark files to ignore the error by default. Set &lt;code&gt;ignoreEC&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to suppress.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported Output Formats&lt;/h3&gt; 
&lt;p&gt;For broad compatibility with third-party tools, this library supports many output formats. The specific file type is controlled with &lt;code&gt;bookType&lt;/code&gt; option:&lt;/p&gt; 
&lt;p&gt;| &lt;code&gt;bookType&lt;/code&gt; | file ext | container | sheets | Description | | :——— | —––: | :—––: | :—– |:—————————–– | | &lt;code&gt;xlsx&lt;/code&gt; | &lt;code&gt;.xlsx&lt;/code&gt; | ZIP | multi | Excel 2007+ XML Format | | &lt;code&gt;xlsm&lt;/code&gt; | &lt;code&gt;.xlsm&lt;/code&gt; | ZIP | multi | Excel 2007+ Macro XML Format | | &lt;code&gt;xlsb&lt;/code&gt; | &lt;code&gt;.xlsb&lt;/code&gt; | ZIP | multi | Excel 2007+ Binary Format | | &lt;code&gt;biff8&lt;/code&gt; | &lt;code&gt;.xls&lt;/code&gt; | CFB | multi | Excel 97-2004 Workbook Format | | &lt;code&gt;biff5&lt;/code&gt; | &lt;code&gt;.xls&lt;/code&gt; | CFB | multi | Excel 5.0/95 Workbook Format | | &lt;code&gt;biff2&lt;/code&gt; | &lt;code&gt;.xls&lt;/code&gt; | none | single | Excel 2.0 Worksheet Format | | &lt;code&gt;xlml&lt;/code&gt; | &lt;code&gt;.xls&lt;/code&gt; | none | multi | Excel 2003-2004 (SpreadsheetML) | | &lt;code&gt;ods&lt;/code&gt; | &lt;code&gt;.ods&lt;/code&gt; | ZIP | multi | OpenDocument Spreadsheet | | &lt;code&gt;fods&lt;/code&gt; | &lt;code&gt;.fods&lt;/code&gt; | none | multi | Flat OpenDocument Spreadsheet | | &lt;code&gt;csv&lt;/code&gt; | &lt;code&gt;.csv&lt;/code&gt; | none | single | Comma Separated Values | | &lt;code&gt;txt&lt;/code&gt; | &lt;code&gt;.txt&lt;/code&gt; | none | single | UTF-16 Unicode Text (TXT) | | &lt;code&gt;sylk&lt;/code&gt; | &lt;code&gt;.sylk&lt;/code&gt; | none | single | Symbolic Link (SYLK) | | &lt;code&gt;html&lt;/code&gt; | &lt;code&gt;.html&lt;/code&gt; | none | single | HTML Document | | &lt;code&gt;dif&lt;/code&gt; | &lt;code&gt;.dif&lt;/code&gt; | none | single | Data Interchange Format (DIF) | | &lt;code&gt;dbf&lt;/code&gt; | &lt;code&gt;.dbf&lt;/code&gt; | none | single | dBASE II + VFP Extensions (DBF) | | &lt;code&gt;rtf&lt;/code&gt; | &lt;code&gt;.rtf&lt;/code&gt; | none | single | Rich Text Format (RTF) | | &lt;code&gt;prn&lt;/code&gt; | &lt;code&gt;.prn&lt;/code&gt; | none | single | Lotus Formatted Text | | &lt;code&gt;eth&lt;/code&gt; | &lt;code&gt;.eth&lt;/code&gt; | none | single | Ethercalc Record Format (ETH) |&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;compression&lt;/code&gt; only applies to formats with ZIP containers.&lt;/li&gt; 
 &lt;li&gt;Formats that only support a single sheet require a &lt;code&gt;sheet&lt;/code&gt; option specifying the worksheet. If the string is empty, the first worksheet is used.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;writeFile&lt;/code&gt; will automatically guess the output file format based on the file extension if &lt;code&gt;bookType&lt;/code&gt; is not specified. It will choose the first format in the aforementioned table that matches the extension.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Output Type&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; argument for &lt;code&gt;write&lt;/code&gt; mirrors the &lt;code&gt;type&lt;/code&gt; argument for &lt;code&gt;read&lt;/code&gt;:&lt;/p&gt; 
&lt;p&gt;| &lt;code&gt;type&lt;/code&gt; | output | |————|—————————————————————–| | &lt;code&gt;&quot;base64&quot;&lt;/code&gt; | string: Base64 encoding of the file | | &lt;code&gt;&quot;binary&quot;&lt;/code&gt; | string: binary string (byte &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;data.charCodeAt(n)&lt;/code&gt;) | | &lt;code&gt;&quot;string&quot;&lt;/code&gt; | string: JS string (characters interpreted as UTF8) | | &lt;code&gt;&quot;buffer&quot;&lt;/code&gt; | nodejs Buffer | | &lt;code&gt;&quot;array&quot;&lt;/code&gt; | ArrayBuffer, fallback array of 8-bit unsigned int | | &lt;code&gt;&quot;file&quot;&lt;/code&gt; | string: path of file that will be created (nodejs only) |&lt;/p&gt; 
&lt;h2&gt;Utility Functions&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;sheet_to_*&lt;/code&gt; functions accept a worksheet and an optional options object.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;*_to_sheet&lt;/code&gt; functions accept a data object and an optional options object.&lt;/p&gt; 
&lt;p&gt;The examples are based on the following worksheet:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;XXX| A | B | C | D | E | F | G |
---+---+---+---+---+---+---+---+
 1 | S | h | e | e | t | J | S |
 2 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
 3 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Array of Arrays Input&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.aoa_to_sheet&lt;/code&gt; takes an array of arrays of JS values and returns a worksheet resembling the input data. Numbers, Booleans and Strings are stored as the corresponding styles. Dates are stored as date or numbers. Array holes and explicit &lt;code&gt;undefined&lt;/code&gt; values are skipped. &lt;code&gt;null&lt;/code&gt; values may be stubbed. All other values are stored as strings. The function takes an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | :——: | :––––––––––––––––––––––––– | |&lt;code&gt;dateNF&lt;/code&gt; | FMT 14 | Use specified date format in string output | |&lt;code&gt;cellDates&lt;/code&gt; | false | Store dates as type &lt;code&gt;d&lt;/code&gt; (default is &lt;code&gt;n&lt;/code&gt;) | |&lt;code&gt;sheetStubs&lt;/code&gt; | false | Create cell objects of type &lt;code&gt;z&lt;/code&gt; for &lt;code&gt;null&lt;/code&gt; values |&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;To generate the example sheet:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var ws = XLSX.utils.aoa_to_sheet([
  &quot;SheetJS&quot;.split(&quot;&quot;),
  [1,2,3,4,5,6,7],
  [2,3,4,5,6,7,8]
]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.sheet_add_aoa&lt;/code&gt; takes an array of arrays of JS values and updates an existing worksheet object. It follows the same process as &lt;code&gt;aoa_to_sheet&lt;/code&gt; and accepts an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | :——: | :––––––––––––––––––––––––– | |&lt;code&gt;dateNF&lt;/code&gt; | FMT 14 | Use specified date format in string output | |&lt;code&gt;cellDates&lt;/code&gt; | false | Store dates as type &lt;code&gt;d&lt;/code&gt; (default is &lt;code&gt;n&lt;/code&gt;) | |&lt;code&gt;sheetStubs&lt;/code&gt; | false | Create cell objects of type &lt;code&gt;z&lt;/code&gt; for &lt;code&gt;null&lt;/code&gt; values | |&lt;code&gt;origin&lt;/code&gt; | | Use specified cell as starting point (see below) |&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; is expected to be one of:&lt;/p&gt; 
&lt;p&gt;| &lt;code&gt;origin&lt;/code&gt; | Description | | :————— | :–––––––––––––––––––––––––––– | | (cell object) | Use specified cell (cell object) | | (string) | Use specified cell (A1-style cell) | | (number &amp;gt;= 0) | Start from the first column at specified row (0-indexed) | | -1 | Append to bottom of worksheet starting on first column | | (default) | Start from cell A1 |&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Consider the worksheet:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;XXX| A | B | C | D | E | F | G |
---+---+---+---+---+---+---+---+
 1 | S | h | e | e | t | J | S |
 2 | 1 | 2 |   |   | 5 | 6 | 7 |
 3 | 2 | 3 |   |   | 6 | 7 | 8 |
 4 | 3 | 4 |   |   | 7 | 8 | 9 |
 5 | 4 | 5 | 6 | 7 | 8 | 9 | 0 |
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This worksheet can be built up in the order &lt;code&gt;A1:G1, A2:B4, E2:G4, A5:G5&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* Initial row */
var ws = XLSX.utils.aoa_to_sheet([ &quot;SheetJS&quot;.split(&quot;&quot;) ]);

/* Write data starting at A2 */
XLSX.utils.sheet_add_aoa(ws, [[1,2], [2,3], [3,4]], {origin: &quot;A2&quot;});

/* Write data starting at E2 */
XLSX.utils.sheet_add_aoa(ws, [[5,6,7], [6,7,8], [7,8,9]], {origin:{r:1, c:4}});

/* Append row */
XLSX.utils.sheet_add_aoa(ws, [[4,5,6,7,8,9,0]], {origin: -1});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Array of Objects Input&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.json_to_sheet&lt;/code&gt; takes an array of objects and returns a worksheet with automatically-generated “headers” based on the keys of the objects. The default column order is determined by the first appearance of the field using &lt;code&gt;Object.keys&lt;/code&gt;, but can be overridden using the options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | :——: | :––––––––––––––––––––––––– | |&lt;code&gt;header&lt;/code&gt; | | Use specified column order (default &lt;code&gt;Object.keys&lt;/code&gt;) | |&lt;code&gt;dateNF&lt;/code&gt; | FMT 14 | Use specified date format in string output | |&lt;code&gt;cellDates&lt;/code&gt; | false | Store dates as type &lt;code&gt;d&lt;/code&gt; (default is &lt;code&gt;n&lt;/code&gt;) | |&lt;code&gt;skipHeader&lt;/code&gt; | false | If true, do not include header row in output |&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;The original sheet cannot be reproduced using plain objects since JS object keys must be unique. After replacing the second &lt;code&gt;e&lt;/code&gt; and &lt;code&gt;S&lt;/code&gt; with &lt;code&gt;e_1&lt;/code&gt; and &lt;code&gt;S_1&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var ws = XLSX.utils.json_to_sheet([
  { S:1, h:2, e:3, e_1:4, t:5, J:6, S_1:7 },
  { S:2, h:3, e:4, e_1:5, t:6, J:7, S_1:8 }
], {header:[&quot;S&quot;,&quot;h&quot;,&quot;e&quot;,&quot;e_1&quot;,&quot;t&quot;,&quot;J&quot;,&quot;S_1&quot;]});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Alternatively, the header row can be skipped:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var ws = XLSX.utils.json_to_sheet([
  { A:&quot;S&quot;, B:&quot;h&quot;, C:&quot;e&quot;, D:&quot;e&quot;, E:&quot;t&quot;, F:&quot;J&quot;, G:&quot;S&quot; },
  { A: 1,  B: 2,  C: 3,  D: 4,  E: 5,  F: 6,  G: 7  },
  { A: 2,  B: 3,  C: 4,  D: 5,  E: 6,  F: 7,  G: 8  }
], {header:[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], skipHeader:true});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.sheet_add_json&lt;/code&gt; takes an array of objects and updates an existing worksheet object. It follows the same process as &lt;code&gt;json_to_sheet&lt;/code&gt; and accepts an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | :——: | :––––––––––––––––––––––––– | |&lt;code&gt;header&lt;/code&gt; | | Use specified column order (default &lt;code&gt;Object.keys&lt;/code&gt;) | |&lt;code&gt;dateNF&lt;/code&gt; | FMT 14 | Use specified date format in string output | |&lt;code&gt;cellDates&lt;/code&gt; | false | Store dates as type &lt;code&gt;d&lt;/code&gt; (default is &lt;code&gt;n&lt;/code&gt;) | |&lt;code&gt;skipHeader&lt;/code&gt; | false | If true, do not include header row in output | |&lt;code&gt;origin&lt;/code&gt; | | Use specified cell as starting point (see below) |&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; is expected to be one of:&lt;/p&gt; 
&lt;p&gt;| &lt;code&gt;origin&lt;/code&gt; | Description | | :————— | :–––––––––––––––––––––––––––– | | (cell object) | Use specified cell (cell object) | | (string) | Use specified cell (A1-style cell) | | (number &amp;gt;= 0) | Start from the first column at specified row (0-indexed) | | -1 | Append to bottom of worksheet starting on first column | | (default) | Start from cell A1 |&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Consider the worksheet:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;XXX| A | B | C | D | E | F | G |
---+---+---+---+---+---+---+---+
 1 | S | h | e | e | t | J | S |
 2 | 1 | 2 |   |   | 5 | 6 | 7 |
 3 | 2 | 3 |   |   | 6 | 7 | 8 |
 4 | 3 | 4 |   |   | 7 | 8 | 9 |
 5 | 4 | 5 | 6 | 7 | 8 | 9 | 0 |
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;This worksheet can be built up in the order &lt;code&gt;A1:G1, A2:B4, E2:G4, A5:G5&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* Initial row */
var ws = XLSX.utils.json_to_sheet([
  { A: &quot;S&quot;, B: &quot;h&quot;, C: &quot;e&quot;, D: &quot;e&quot;, E: &quot;t&quot;, F: &quot;J&quot;, G: &quot;S&quot; }
], {header: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;], skipHeader: true});

/* Write data starting at A2 */
XLSX.utils.sheet_add_json(ws, [
  { A: 1, B: 2 }, { A: 2, B: 3 }, { A: 3, B: 4 }
], {skipHeader: true, origin: &quot;A2&quot;});

/* Write data starting at E2 */
XLSX.utils.sheet_add_json(ws, [
  { A: 5, B: 6, C: 7 }, { A: 6, B: 7, C: 8 }, { A: 7, B: 8, C: 9 }
], {skipHeader: true, origin: { r: 1, c: 4 }, header: [ &quot;A&quot;, &quot;B&quot;, &quot;C&quot; ]});

/* Append row */
XLSX.utils.sheet_add_json(ws, [
  { A: 4, B: 5, C: 6, D: 7, E: 8, F: 9, G: 0 }
], {header: [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;], skipHeader: true, origin: -1});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;HTML Table Input&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.table_to_sheet&lt;/code&gt; takes a table DOM element and returns a worksheet resembling the input table. Numbers are parsed. All other data will be stored as strings.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.table_to_book&lt;/code&gt; produces a minimal workbook based on the worksheet.&lt;/p&gt; 
&lt;p&gt;Both functions accept options arguments:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | :——: | :––––––––––––––––––––––––– | |&lt;code&gt;raw&lt;/code&gt; | | If true, every cell will hold raw strings | |&lt;code&gt;dateNF&lt;/code&gt; | FMT 14 | Use specified date format in string output | |&lt;code&gt;cellDates&lt;/code&gt; | false | Store dates as type &lt;code&gt;d&lt;/code&gt; (default is &lt;code&gt;n&lt;/code&gt;) | |&lt;code&gt;sheetRows&lt;/code&gt; | 0 | If &amp;gt;0, read the first &lt;code&gt;sheetRows&lt;/code&gt; rows of the table | |&lt;code&gt;display&lt;/code&gt; | false | If true, hidden rows and cells will not be parsed |&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;To generate the example sheet, start with the HTML table:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;table id=&quot;sheetjs&quot;&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;S&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;h&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;e&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;e&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;t&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;J&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;S&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;2&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;3&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;4&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;5&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;6&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;7&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;2&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;3&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;4&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;5&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;6&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;7&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;8&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To process the table:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var tbl = document.getElementById(&#39;sheetjs&#39;);
var wb = XLSX.utils.table_to_book(tbl);
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;Note: &lt;code&gt;XLSX.read&lt;/code&gt; can handle HTML represented as strings.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.sheet_add_dom&lt;/code&gt; takes a table DOM element and updates an existing worksheet object. It follows the same process as &lt;code&gt;table_to_sheet&lt;/code&gt; and accepts an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | :——: | :––––––––––––––––––––––––– | |&lt;code&gt;raw&lt;/code&gt; | | If true, every cell will hold raw strings | |&lt;code&gt;dateNF&lt;/code&gt; | FMT 14 | Use specified date format in string output | |&lt;code&gt;cellDates&lt;/code&gt; | false | Store dates as type &lt;code&gt;d&lt;/code&gt; (default is &lt;code&gt;n&lt;/code&gt;) | |&lt;code&gt;sheetRows&lt;/code&gt; | 0 | If &amp;gt;0, read the first &lt;code&gt;sheetRows&lt;/code&gt; rows of the table | |&lt;code&gt;display&lt;/code&gt; | false | If true, hidden rows and cells will not be parsed |&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; is expected to be one of:&lt;/p&gt; 
&lt;p&gt;| &lt;code&gt;origin&lt;/code&gt; | Description | | :————— | :–––––––––––––––––––––––––––– | | (cell object) | Use specified cell (cell object) | | (string) | Use specified cell (A1-style cell) | | (number &amp;gt;= 0) | Start from the first column at specified row (0-indexed) | | -1 | Append to bottom of worksheet starting on first column | | (default) | Start from cell A1 |&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;A small helper function can create gap rows between tables:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function create_gap_rows(ws, nrows) {
  var ref = XLSX.utils.decode_range(ws[&quot;!ref&quot;]);       // get original range
  ref.e.r += nrows;                                    // add to ending row
  ws[&quot;!ref&quot;] = XLSX.utils.encode_range(ref);           // reassign row
}

/* first table */
var ws = XLSX.utils.table_to_sheet(document.getElementById(&#39;table1&#39;));
create_gap_rows(ws, 1); // one row gap after first table

/* second table */
XLSX.utils.sheet_add_dom(ws, document.getElementById(&#39;table2&#39;), {origin: -1});
create_gap_rows(ws, 3); // three rows gap after second table

/* third table */
XLSX.utils.sheet_add_dom(ws, document.getElementById(&#39;table3&#39;), {origin: -1});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Formulae Output&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.sheet_to_formulae&lt;/code&gt; generates an array of commands that represent how a person would enter data into an application. Each entry is of the form &lt;code&gt;A1-cell-address=formula-or-value&lt;/code&gt;. String literals are prefixed with a &lt;code&gt;&#39;&lt;/code&gt; in accordance with Excel.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;For the example sheet:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; var o = XLSX.utils.sheet_to_formulae(ws);
&amp;gt; [o[0], o[5], o[10], o[15], o[20]];
[ &#39;A1=\&#39;S&#39;, &#39;F1=\&#39;J&#39;, &#39;D2=4&#39;, &#39;B3=3&#39;, &#39;G3=8&#39; ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Delimiter-Separated Output&lt;/h3&gt; 
&lt;p&gt;As an alternative to the &lt;code&gt;writeFile&lt;/code&gt; CSV type, &lt;code&gt;XLSX.utils.sheet_to_csv&lt;/code&gt; also produces CSV output. The function takes an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :———– | :——: | :———————————————–– | |&lt;code&gt;FS&lt;/code&gt; | &lt;code&gt;&quot;,&quot;&lt;/code&gt; | “Field Separator” delimiter between fields | |&lt;code&gt;RS&lt;/code&gt; | &lt;code&gt;&quot;\n&quot;&lt;/code&gt; | “Record Separator” delimiter between rows | |&lt;code&gt;dateNF&lt;/code&gt; | FMT 14 | Use specified date format in string output | |&lt;code&gt;strip&lt;/code&gt; | false | Remove trailing field separators in each record ** | |&lt;code&gt;blankrows&lt;/code&gt; | true | Include blank lines in the CSV output | |&lt;code&gt;skipHidden&lt;/code&gt; | false | Skips hidden rows/columns in the CSV output | |&lt;code&gt;forceQuotes&lt;/code&gt; | false | Force quotes around fields |&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;strip&lt;/code&gt; will remove trailing commas from each line under default &lt;code&gt;FS/RS&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;blankrows&lt;/code&gt; must be set to &lt;code&gt;false&lt;/code&gt; to skip blank lines.&lt;/li&gt; 
 &lt;li&gt;Fields containing the record or field separator will automatically be wrapped in double quotes; &lt;code&gt;forceQuotes&lt;/code&gt; forces all cells to be wrapped in quotes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;For the example sheet:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; console.log(XLSX.utils.sheet_to_csv(ws));
S,h,e,e,t,J,S
1,2,3,4,5,6,7
2,3,4,5,6,7,8
&amp;gt; console.log(XLSX.utils.sheet_to_csv(ws, {FS:&quot;\t&quot;}));
S	h	e	e	t	J	S
1	2	3	4	5	6	7
2	3	4	5	6	7	8
&amp;gt; console.log(XLSX.utils.sheet_to_csv(ws,{FS:&quot;:&quot;,RS:&quot;|&quot;}));
S:h:e:e:t:J:S|1:2:3:4:5:6:7|2:3:4:5:6:7:8|
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h4&gt;UTF-16 Unicode Text&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;txt&lt;/code&gt; output type uses the tab character as the field separator. If the &lt;code&gt;codepage&lt;/code&gt; library is available (included in full distribution but not core), the output will be encoded in &lt;code&gt;CP1200&lt;/code&gt; and the BOM will be prepended.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.sheet_to_txt&lt;/code&gt; takes the same arguments as &lt;code&gt;sheet_to_csv&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;HTML Output&lt;/h3&gt; 
&lt;p&gt;As an alternative to the &lt;code&gt;writeFile&lt;/code&gt; HTML type, &lt;code&gt;XLSX.utils.sheet_to_html&lt;/code&gt; also produces HTML output. The function takes an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | :——: | :––––––––––––––––––––––––– | |&lt;code&gt;id&lt;/code&gt; | | Specify the &lt;code&gt;id&lt;/code&gt; attribute for the &lt;code&gt;TABLE&lt;/code&gt; element | |&lt;code&gt;editable&lt;/code&gt; | false | If true, set &lt;code&gt;contenteditable=&quot;true&quot;&lt;/code&gt; for every TD | |&lt;code&gt;header&lt;/code&gt; | | Override header (default &lt;code&gt;html body&lt;/code&gt;) | |&lt;code&gt;footer&lt;/code&gt; | | Override footer (default &lt;code&gt;/body /html&lt;/code&gt;) |&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;For the example sheet:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; console.log(XLSX.utils.sheet_to_html(ws));
// ...
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;JSON&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;XLSX.utils.sheet_to_json&lt;/code&gt; generates different types of JS objects. The function takes an options argument:&lt;/p&gt; 
&lt;p&gt;| Option Name | Default | Description | | :––––– | :——: | :––––––––––––––––––––––––– | |&lt;code&gt;raw&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt; | Use raw values (true) or formatted strings (false) | |&lt;code&gt;range&lt;/code&gt; | from WS | Override Range (see table below) | |&lt;code&gt;header&lt;/code&gt; | | Control output format (see table below) | |&lt;code&gt;dateNF&lt;/code&gt; | FMT 14 | Use specified date format in string output | |&lt;code&gt;defval&lt;/code&gt; | | Use specified value in place of null or undefined | |&lt;code&gt;blankrows&lt;/code&gt; | ** | Include blank lines in the output ** |&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;raw&lt;/code&gt; only affects cells which have a format code (&lt;code&gt;.z&lt;/code&gt;) field or a formatted text (&lt;code&gt;.w&lt;/code&gt;) field.&lt;/li&gt; 
 &lt;li&gt;If &lt;code&gt;header&lt;/code&gt; is specified, the first row is considered a data row; if &lt;code&gt;header&lt;/code&gt; is not specified, the first row is the header row and not considered data.&lt;/li&gt; 
 &lt;li&gt;When &lt;code&gt;header&lt;/code&gt; is not specified, the conversion will automatically disambiguate header entries by affixing &lt;code&gt;_&lt;/code&gt; and a count starting at &lt;code&gt;1&lt;/code&gt;. For example, if three columns have header &lt;code&gt;foo&lt;/code&gt; the output fields are &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;foo_1&lt;/code&gt;, &lt;code&gt;foo_2&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;null&lt;/code&gt; values are returned when &lt;code&gt;raw&lt;/code&gt; is true but are skipped when false.&lt;/li&gt; 
 &lt;li&gt;If &lt;code&gt;defval&lt;/code&gt; is not specified, null and undefined values are skipped normally. If specified, all null and undefined points will be filled with &lt;code&gt;defval&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;When &lt;code&gt;header&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, the default is to generate blank rows. &lt;code&gt;blankrows&lt;/code&gt; must be set to &lt;code&gt;false&lt;/code&gt; to skip blank rows.&lt;/li&gt; 
 &lt;li&gt;When &lt;code&gt;header&lt;/code&gt; is not &lt;code&gt;1&lt;/code&gt;, the default is to skip blank rows. &lt;code&gt;blankrows&lt;/code&gt; must be true to generate blank rows&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;range&lt;/code&gt; is expected to be one of:&lt;/p&gt; 
&lt;p&gt;| &lt;code&gt;range&lt;/code&gt; | Description | | :————— | :–––––––––––––––––––––––––––– | | (number) | Use worksheet range but set starting row to the value | | (string) | Use specified range (A1-style bounded range string) | | (default) | Use worksheet range (&lt;code&gt;ws[&#39;!ref&#39;]&lt;/code&gt;) |&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;header&lt;/code&gt; is expected to be one of:&lt;/p&gt; 
&lt;p&gt;| &lt;code&gt;header&lt;/code&gt; | Description | | :————— | :–––––––––––––––––––––––––––– | | &lt;code&gt;1&lt;/code&gt; | Generate an array of arrays (“2D Array”) | | &lt;code&gt;&quot;A&quot;&lt;/code&gt; | Row object keys are literal column labels | | array of strings | Use specified strings as keys in row objects | | (default) | Read and disambiguate first row as keys |&lt;/p&gt; 
&lt;p&gt;If header is not &lt;code&gt;1&lt;/code&gt;, the row object will contain the non-enumerable property &lt;code&gt;__rowNum__&lt;/code&gt; that represents the row of the sheet corresponding to the entry.&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;For the example sheet:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; XLSX.utils.sheet_to_json(ws);
[ { S: 1, h: 2, e: 3, e_1: 4, t: 5, J: 6, S_1: 7 },
  { S: 2, h: 3, e: 4, e_1: 5, t: 6, J: 7, S_1: 8 } ]

&amp;gt; XLSX.utils.sheet_to_json(ws, {header:&quot;A&quot;});
[ { A: &#39;S&#39;, B: &#39;h&#39;, C: &#39;e&#39;, D: &#39;e&#39;, E: &#39;t&#39;, F: &#39;J&#39;, G: &#39;S&#39; },
  { A: &#39;1&#39;, B: &#39;2&#39;, C: &#39;3&#39;, D: &#39;4&#39;, E: &#39;5&#39;, F: &#39;6&#39;, G: &#39;7&#39; },
  { A: &#39;2&#39;, B: &#39;3&#39;, C: &#39;4&#39;, D: &#39;5&#39;, E: &#39;6&#39;, F: &#39;7&#39;, G: &#39;8&#39; } ]

&amp;gt; XLSX.utils.sheet_to_json(ws, {header:[&quot;A&quot;,&quot;E&quot;,&quot;I&quot;,&quot;O&quot;,&quot;U&quot;,&quot;6&quot;,&quot;9&quot;]});
[ { &#39;6&#39;: &#39;J&#39;, &#39;9&#39;: &#39;S&#39;, A: &#39;S&#39;, E: &#39;h&#39;, I: &#39;e&#39;, O: &#39;e&#39;, U: &#39;t&#39; },
  { &#39;6&#39;: &#39;6&#39;, &#39;9&#39;: &#39;7&#39;, A: &#39;1&#39;, E: &#39;2&#39;, I: &#39;3&#39;, O: &#39;4&#39;, U: &#39;5&#39; },
  { &#39;6&#39;: &#39;7&#39;, &#39;9&#39;: &#39;8&#39;, A: &#39;2&#39;, E: &#39;3&#39;, I: &#39;4&#39;, O: &#39;5&#39;, U: &#39;6&#39; } ]

&amp;gt; XLSX.utils.sheet_to_json(ws, {header:1});
[ [ &#39;S&#39;, &#39;h&#39;, &#39;e&#39;, &#39;e&#39;, &#39;t&#39;, &#39;J&#39;, &#39;S&#39; ],
  [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39; ],
  [ &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39; ] ]
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;Example showing the effect of &lt;code&gt;raw&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;gt; ws[&#39;A2&#39;].w = &quot;3&quot;;                          // set A2 formatted string value

&amp;gt; XLSX.utils.sheet_to_json(ws, {header:1, raw:false});
[ [ &#39;S&#39;, &#39;h&#39;, &#39;e&#39;, &#39;e&#39;, &#39;t&#39;, &#39;J&#39;, &#39;S&#39; ],
  [ &#39;3&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39; ],     // &amp;lt;-- A2 uses the formatted string
  [ &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39; ] ]

&amp;gt; XLSX.utils.sheet_to_json(ws, {header:1});
[ [ &#39;S&#39;, &#39;h&#39;, &#39;e&#39;, &#39;e&#39;, &#39;t&#39;, &#39;J&#39;, &#39;S&#39; ],
  [ 1, 2, 3, 4, 5, 6, 7 ],                   // &amp;lt;-- A2 uses the raw value
  [ 2, 3, 4, 5, 6, 7, 8 ] ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h2&gt;File Formats&lt;/h2&gt; 
&lt;p&gt;Despite the library name &lt;code&gt;xlsx&lt;/code&gt;, it supports numerous spreadsheet file formats:&lt;/p&gt; 
&lt;p&gt;| Format | Read | Write | |:———————————————————––|:—–:|:—–:| | &lt;strong&gt;Excel Worksheet/Workbook Formats&lt;/strong&gt; |:—–:|:—–:| | Excel 2007+ XML Formats (XLSX/XLSM) | :o: | :o: | | Excel 2007+ Binary Format (XLSB BIFF12) | :o: | :o: | | Excel 2003-2004 XML Format (XML “SpreadsheetML”) | :o: | :o: | | Excel 97-2004 (XLS BIFF8) | :o: | :o: | | Excel 5.0/95 (XLS BIFF5) | :o: | :o: | | Excel 4.0 (XLS/XLW BIFF4) | :o: | | | Excel 3.0 (XLS BIFF3) | :o: | | | Excel 2.0/2.1 (XLS BIFF2) | :o: | :o: | | &lt;strong&gt;Excel Supported Text Formats&lt;/strong&gt; |:—–:|:—–:| | Delimiter-Separated Values (CSV/TXT) | :o: | :o: | | Data Interchange Format (DIF) | :o: | :o: | | Symbolic Link (SYLK/SLK) | :o: | :o: | | Lotus Formatted Text (PRN) | :o: | :o: | | UTF-16 Unicode Text (TXT) | :o: | :o: | | &lt;strong&gt;Other Workbook/Worksheet Formats&lt;/strong&gt; |:—–:|:—–:| | OpenDocument Spreadsheet (ODS) | :o: | :o: | | Flat XML ODF Spreadsheet (FODS) | :o: | :o: | | Uniform Office Format Spreadsheet (标文通 UOS1/UOS2) | :o: | | | dBASE II/III/IV / Visual FoxPro (DBF) | :o: | :o: | | Lotus 1-2-3 (WKS/WK1/WK2/WK3/WK4/123) | :o: | | | Quattro Pro Spreadsheet (WQ1/WQ2/WB1/WB2/WB3/QPW) | :o: | | | &lt;strong&gt;Other Common Spreadsheet Output Formats&lt;/strong&gt; |:—–:|:—–:| | HTML Tables | :o: | :o: | | Rich Text Format tables (RTF) | | :o: | | Ethercalc Record Format (ETH) | :o: | :o: |&lt;/p&gt; 
&lt;p&gt;Features not supported by a given file format will not be written. Formats with range limits will be silently truncated:&lt;/p&gt; 
&lt;p&gt;| Format | Last Cell | Max Cols | Max Rows | |:——————————————|:———–|———:|———:| | Excel 2007+ XML Formats (XLSX/XLSM) | XFD1048576 | 16384 | 1048576 | | Excel 2007+ Binary Format (XLSB BIFF12) | XFD1048576 | 16384 | 1048576 | | Excel 97-2004 (XLS BIFF8) | IV65536 | 256 | 65536 | | Excel 5.0/95 (XLS BIFF5) | IV16384 | 256 | 16384 | | Excel 2.0/2.1 (XLS BIFF2) | IV16384 | 256 | 16384 |&lt;/p&gt; 
&lt;p&gt;Excel 2003 SpreadsheetML range limits are governed by the version of Excel and are not enforced by the writer.&lt;/p&gt; 
&lt;h3&gt;Excel 2007+ XML (XLSX/XLSM)&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;XLSX and XLSM files are ZIP containers containing a series of XML files in accordance with the Open Packaging Conventions (OPC). The XLSM format, almost identical to XLSX, is used for files containing macros.&lt;/p&gt; 
 &lt;p&gt;The format is standardized in ECMA-376 and later in ISO/IEC 29500. Excel does not follow the specification, and there are additional documents discussing how Excel deviates from the specification.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Excel 2.0-95 (BIFF2/BIFF3/BIFF4/BIFF5)&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;BIFF 2/3 XLS are single-sheet streams of binary records. Excel 4 introduced the concept of a workbook (&lt;code&gt;XLW&lt;/code&gt; files) but also had single-sheet &lt;code&gt;XLS&lt;/code&gt; format. The structure is largely similar to the Lotus 1-2-3 file formats. BIFF5/8/12 extended the format in various ways but largely stuck to the same record format.&lt;/p&gt; 
 &lt;p&gt;There is no official specification for any of these formats. Excel 95 can write files in these formats, so record lengths and fields were determined by writing in all of the supported formats and comparing files. Excel 2016 can generate BIFF5 files, enabling a full suite of file tests starting from XLSX or BIFF2.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Excel 97-2004 Binary (BIFF8)&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;BIFF8 exclusively uses the Compound File Binary container format, splitting some content into streams within the file. At its core, it still uses an extended version of the binary record format from older versions of BIFF.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;MS-XLS&lt;/code&gt; specification covers the basics of the file format, and other specifications expand on serialization of features like properties.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Excel 2003-2004 (SpreadsheetML)&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;Predating XLSX, SpreadsheetML files are simple XML files. There is no official and comprehensive specification, although MS has released documentation on the format. Since Excel 2016 can generate SpreadsheetML files, mapping features is pretty straightforward.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Excel 2007+ Binary (XLSB, BIFF12)&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;Introduced in parallel with XLSX, the XLSB format combines the BIFF architecture with the content separation and ZIP container of XLSX. For the most part nodes in an XLSX sub-file can be mapped to XLSB records in a corresponding sub-file.&lt;/p&gt; 
 &lt;p&gt;The &lt;code&gt;MS-XLSB&lt;/code&gt; specification covers the basics of the file format, and other specifications expand on serialization of features like properties.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Delimiter-Separated Values (CSV/TXT)&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;Excel CSV deviates from RFC4180 in a number of important ways. The generated CSV files should generally work in Excel although they may not work in RFC4180 compatible readers. The parser should generally understand Excel CSV. The writer proactively generates cells for formulae if values are unavailable.&lt;/p&gt; 
 &lt;p&gt;Excel TXT uses tab as the delimiter and code page 1200.&lt;/p&gt; 
 &lt;p&gt;Notes:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Like in Excel, files starting with &lt;code&gt;0x49 0x44 (&quot;ID&quot;)&lt;/code&gt; are treated as Symbolic Link files. Unlike Excel, if the file does not have a valid SYLK header, it will be proactively reinterpreted as CSV. There are some files with semicolon delimiter that align with a valid SYLK file. For the broadest compatibility, all cells with the value of &lt;code&gt;ID&lt;/code&gt; are automatically wrapped in double-quotes.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;Other Workbook Formats&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;Support for other formats is generally far XLS/XLSB/XLSX support, due in large part to a lack of publicly available documentation. Test files were produced in the respective apps and compared to their XLS exports to determine structure. The main focus is data extraction.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Lotus 1-2-3 (WKS/WK1/WK2/WK3/WK4/123)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;The Lotus formats consist of binary records similar to the BIFF structure. Lotus did release a specification decades ago covering the original WK1 format. Other features were deduced by producing files and comparing to Excel support.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Quattro Pro (WQ1/WQ2/WB1/WB2/WB3/QPW)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;The Quattro Pro formats use binary records in the same way as BIFF and Lotus. Some of the newer formats (namely WB3 and QPW) use a CFB enclosure just like BIFF8 XLS.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;OpenDocument Spreadsheet (ODS/FODS)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;ODS is an XML-in-ZIP format akin to XLSX while FODS is an XML format akin to SpreadsheetML. Both are detailed in the OASIS standard, but tools like LO/OO add undocumented extensions. The parsers and writers do not implement the full standard, instead focusing on parts necessary to extract and store raw data.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Uniform Office Spreadsheet (UOS1/2)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;UOS is a very similar format, and it comes in 2 varieties corresponding to ODS and FODS respectively. For the most part, the difference between the formats is in the names of tags and attributes.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Other Single-Worksheet Formats&lt;/h3&gt; 
&lt;p&gt;Many older formats supported only one worksheet:&lt;/p&gt; 
&lt;h4&gt;dBASE and Visual FoxPro (DBF)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;DBF is really a typed table format: each column can only hold one data type and each record omits type information. The parser generates a header row and inserts records starting at the second row of the worksheet. The writer makes files compatible with Visual FoxPro extensions.&lt;/p&gt; 
 &lt;p&gt;Multi-file extensions like external memos and tables are currently unsupported, limited by the general ability to read arbitrary files in the web browser. The reader understands DBF Level 7 extensions like DATETIME.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Symbolic Link (SYLK)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;There is no real documentation. All knowledge was gathered by saving files in various versions of Excel to deduce the meaning of fields. Notes:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Plain formulae are stored in the RC form.&lt;/li&gt; 
  &lt;li&gt;Column widths are rounded to integral characters.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h4&gt;Lotus Formatted Text (PRN)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;There is no real documentation, and in fact Excel treats PRN as an output-only file format. Nevertheless we can guess the column widths and reverse-engineer the original layout. Excel’s 240 character width limitation is not enforced.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Data Interchange Format (DIF)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;There is no unified definition. Visicalc DIF differs from Lotus DIF, and both differ from Excel DIF. Where ambiguous, the parser/writer follows the expected behavior from Excel. In particular, Excel extends DIF in incompatible ways:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Since Excel automatically converts numbers-as-strings to numbers, numeric string constants are converted to formulae: &lt;code&gt;&quot;0.3&quot; -&amp;gt; &quot;=&quot;&quot;0.3&quot;&quot;&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;DIF technically expects numeric cells to hold the raw numeric data, but Excel permits formatted numbers (including dates)&lt;/li&gt; 
  &lt;li&gt;DIF technically has no support for formulae, but Excel will automatically convert plain formulae. Array formulae are not preserved.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h4&gt;HTML&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;Excel HTML worksheets include special metadata encoded in styles. For example, &lt;code&gt;mso-number-format&lt;/code&gt; is a localized string containing the number format. Despite the metadata the output is valid HTML, although it does accept bare &lt;code&gt;&amp;amp;&lt;/code&gt; symbols.&lt;/p&gt; 
 &lt;p&gt;The writer adds type metadata to the TD elements via the &lt;code&gt;t&lt;/code&gt; tag. The parser looks for those tags and overrides the default interpretation. For example, text like &lt;code&gt;&amp;lt;td&amp;gt;12345&amp;lt;/td&amp;gt;&lt;/code&gt; will be parsed as numbers but &lt;code&gt;&amp;lt;td t=&quot;s&quot;&amp;gt;12345&amp;lt;/td&amp;gt;&lt;/code&gt; will be parsed as text.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Rich Text Format (RTF)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;Excel RTF worksheets are stored in clipboard when copying cells or ranges from a worksheet. The supported codes are a subset of the Word RTF support.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h4&gt;Ethercalc Record Format (ETH)&lt;/h4&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;a href=&quot;https://ethercalc.net/&quot;&gt;Ethercalc&lt;/a&gt; is an open source web spreadsheet powered by a record format reminiscent of SYLK wrapped in a MIME multi-part message.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;h3&gt;Node&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;&lt;code&gt;make test&lt;/code&gt; will run the node-based tests. By default it runs tests on files in every supported format. To test a specific file type, set &lt;code&gt;FMTS&lt;/code&gt; to the format you want to test. Feature-specific tests are available with &lt;code&gt;make test_misc&lt;/code&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ make test_misc   # run core tests
$ make test        # run full tests
$ make test_xls    # only use the XLS test files
$ make test_xlsx   # only use the XLSX test files
$ make test_xlsb   # only use the XLSB test files
$ make test_xml    # only use the XML test files
$ make test_ods    # only use the ODS test files
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To enable all errors, set the environment variable &lt;code&gt;WTF=1&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ make test        # run full tests
$ WTF=1 make test  # enable all error messages
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;code&gt;flow&lt;/code&gt; and &lt;code&gt;eslint&lt;/code&gt; checks are available:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ make lint        # eslint checks
$ make flow        # make lint + Flow checking
$ make tslint      # check TS definitions
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;The core in-browser tests are available at &lt;code&gt;tests/index.html&lt;/code&gt; within this repo. Start a local server and navigate to that directory to run the tests. &lt;code&gt;make ctestserv&lt;/code&gt; will start a server on port 8000.&lt;/p&gt; 
 &lt;p&gt;&lt;code&gt;make ctest&lt;/code&gt; will generate the browser fixtures. To add more files, edit the &lt;code&gt;tests/fixtures.lst&lt;/code&gt; file and add the paths.&lt;/p&gt; 
 &lt;p&gt;To run the full in-browser tests, clone the repo for &lt;a href=&quot;https://github.com/SheetJS/SheetJS.github.io&quot;&gt;&lt;code&gt;oss.sheetjs.com&lt;/code&gt;&lt;/a&gt; and replace the &lt;code&gt;xlsx.js&lt;/code&gt; file (then open a browser window and go to &lt;code&gt;stress.html&lt;/code&gt;):&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cp xlsx.js ../SheetJS.github.io
$ cd ../SheetJS.github.io
$ simplehttpserver # or &quot;python -mSimpleHTTPServer&quot; or &quot;serve&quot;
$ open -a Chromium.app http://localhost:8000/stress.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Tested Environments&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;NodeJS &lt;code&gt;0.8&lt;/code&gt;, &lt;code&gt;0.10&lt;/code&gt;, &lt;code&gt;0.12&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt;, &lt;code&gt;5.x&lt;/code&gt;, &lt;code&gt;6.x&lt;/code&gt;, &lt;code&gt;7.x&lt;/code&gt;, &lt;code&gt;8.x&lt;/code&gt;&lt;/li&gt; 
  &lt;li&gt;IE 6/7/8/9/10/11 (IE 6-9 require shims)&lt;/li&gt; 
  &lt;li&gt;Chrome 24+ (including Android 4.0+)&lt;/li&gt; 
  &lt;li&gt;Safari 6+ (iOS and Desktop)&lt;/li&gt; 
  &lt;li&gt;Edge 13+, FF 18+, and Opera 12+&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;Tests utilize the mocha testing framework. Travis-CI and Sauce Labs links:&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org/SheetJS/js-xlsx&quot;&gt;https://travis-ci.org/SheetJS/js-xlsx&lt;/a&gt; for XLSX module in nodejs&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://semaphoreci.com/sheetjs/js-xlsx&quot;&gt;https://semaphoreci.com/sheetjs/js-xlsx&lt;/a&gt; for XLSX module in nodejs&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org/SheetJS/SheetJS.github.io&quot;&gt;https://travis-ci.org/SheetJS/SheetJS.github.io&lt;/a&gt; for XLS* modules&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://saucelabs.com/u/sheetjs&quot;&gt;https://saucelabs.com/u/sheetjs&lt;/a&gt; for XLS* modules using Sauce Labs&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;The Travis-CI test suite also includes tests for various time zones. To change the timezone locally, set the TZ environment variable:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ env TZ=&quot;Asia/Kolkata&quot; WTF=1 make test_misc
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Test Files&lt;/h3&gt; 
&lt;p&gt;Test files are housed in &lt;a href=&quot;https://github.com/SheetJS/test_files&quot;&gt;another repo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Running &lt;code&gt;make init&lt;/code&gt; will refresh the &lt;code&gt;test_files&lt;/code&gt; submodule and get the files. Note that this requires &lt;code&gt;svn&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;hg&lt;/code&gt; and other commands that may not be available. If &lt;code&gt;make init&lt;/code&gt; fails, please download the latest version of the test files snapshot from &lt;a href=&quot;https://github.com/SheetJS/test_files/releases&quot;&gt;the repo&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Latest Snapshot&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;Latest test files snapshot: &lt;a href=&quot;http://github.com/SheetJS/test_files/releases/download/20170409/test_files.zip&quot;&gt;http://github.com/SheetJS/test_files/releases/download/20170409/test_files.zip&lt;/a&gt;&lt;/p&gt; 
 &lt;p&gt;(download and unzip to the &lt;code&gt;test_files&lt;/code&gt; subdirectory)&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Due to the precarious nature of the Open Specifications Promise, it is very important to ensure code is cleanroom. &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/CONTRIBUTING.md&quot;&gt;Contribution Notes&lt;/a&gt;&lt;/p&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;File organization&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;p&gt;At a high level, the final script is a concatenation of the individual files in the &lt;code&gt;bits&lt;/code&gt; folder. Running &lt;code&gt;make&lt;/code&gt; should reproduce the final output on all platforms. The README is similarly split into bits in the &lt;code&gt;docbits&lt;/code&gt; folder.&lt;/p&gt; 
 &lt;p&gt;Folders:&lt;/p&gt; 
 &lt;p&gt;| folder | contents | |:———––|:–––––––––––––––––––––––––––––––| | &lt;code&gt;bits&lt;/code&gt; | raw source files that make up the final script | | &lt;code&gt;docbits&lt;/code&gt; | raw markdown files that make up &lt;code&gt;README.md&lt;/code&gt; | | &lt;code&gt;bin&lt;/code&gt; | server-side bin scripts (&lt;code&gt;xlsx.njs&lt;/code&gt;) | | &lt;code&gt;dist&lt;/code&gt; | dist files for web browsers and nonstandard JS environments | | &lt;code&gt;demos&lt;/code&gt; | demo projects for platforms like ExtendScript and Webpack | | &lt;code&gt;tests&lt;/code&gt; | browser tests (run &lt;code&gt;make ctest&lt;/code&gt; to rebuild) | | &lt;code&gt;types&lt;/code&gt; | typescript definitions and tests | | &lt;code&gt;misc&lt;/code&gt; | miscellaneous supporting scripts | | &lt;code&gt;test_files&lt;/code&gt; | test files (pulled from the test files repository) |&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;After cloning the repo, running &lt;code&gt;make help&lt;/code&gt; will display a list of commands.&lt;/p&gt; 
&lt;h3&gt;OSX/Linux&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;The &lt;code&gt;xlsx.js&lt;/code&gt; file is constructed from the files in the &lt;code&gt;bits&lt;/code&gt; subdirectory. The build script (run &lt;code&gt;make&lt;/code&gt;) will concatenate the individual bits to produce the script. Before submitting a contribution, ensure that running make will produce the &lt;code&gt;xlsx.js&lt;/code&gt; file exactly. The simplest way to test is to add the script:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git add xlsx.js
$ make clean
$ make
$ git diff xlsx.js
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To produce the dist files, run &lt;code&gt;make dist&lt;/code&gt;. The dist files are updated in each version release and &lt;em&gt;should not be committed between versions&lt;/em&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;The included &lt;code&gt;make.cmd&lt;/code&gt; script will build &lt;code&gt;xlsx.js&lt;/code&gt; from the &lt;code&gt;bits&lt;/code&gt; directory. Building is as simple as:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;&amp;gt; make
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;To prepare development environment:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;&amp;gt; make init
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;The full list of commands available in Windows are displayed in &lt;code&gt;make help&lt;/code&gt;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;make init -- install deps and global modules
make lint -- run eslint linter
make test -- run mocha test suite
make misc -- run smaller test suite
make book -- rebuild README and summary
make help -- display this message
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;As explained in &lt;a href=&quot;https://raw.githubusercontent.com/SheetJS/sheetjs/master/#test-files&quot;&gt;Test Files&lt;/a&gt;, on Windows the release ZIP file must be downloaded and extracted. If Bash on Windows is available, it is possible to run the OSX/Linux workflow. The following steps prepares the environment:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Install support programs for the build and test commands
sudo apt-get install make git subversion mercurial

# Install nodejs and NPM within the WSL
wget -qO- https://deb.nodesource.com/setup_8.x | sudo bash
sudo apt-get install nodejs

# Install dev dependencies
sudo npm install -g mocha voc blanket xlsjs
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;h3&gt;Tests&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;(click to show)&lt;/summary&gt; 
 &lt;p&gt;The &lt;code&gt;test_misc&lt;/code&gt; target (&lt;code&gt;make test_misc&lt;/code&gt; on Linux/OSX / &lt;code&gt;make misc&lt;/code&gt; on Windows) runs the targeted feature tests. It should take 5-10 seconds to perform feature tests without testing against the entire test battery. New features should be accompanied with tests for the relevant file formats and features.&lt;/p&gt; 
 &lt;p&gt;For tests involving the read side, an appropriate feature test would involve reading an existing file and checking the resulting workbook object. If a parameter is involved, files should be read with different values to verify that the feature is working as expected.&lt;/p&gt; 
 &lt;p&gt;For tests involving a new write feature which can already be parsed, appropriate feature tests would involve writing a workbook with the feature and then opening and verifying that the feature is preserved.&lt;/p&gt; 
 &lt;p&gt;For tests involving a new write feature without an existing read ability, please add a feature test to the kitchen sink &lt;code&gt;tests/write.js&lt;/code&gt;.&lt;/p&gt; 
&lt;/details&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Please consult the attached LICENSE file for details. All rights not explicitly granted by the Apache 2.0 License are reserved by the Original Author.&lt;/p&gt; 
&lt;h2&gt;References&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;OSP-covered Specifications&lt;/b&gt; (click to show)&lt;/summary&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;code&gt;MS-CFB&lt;/code&gt;: Compound File Binary File Format&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-CTXLS&lt;/code&gt;: Excel Custom Toolbar Binary File Format&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-EXSPXML3&lt;/code&gt;: Excel Calculation Version 2 Web Service XML Schema&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-ODATA&lt;/code&gt;: Open Data Protocol (OData)&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-ODRAW&lt;/code&gt;: Office Drawing Binary File Format&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-ODRAWXML&lt;/code&gt;: Office Drawing Extensions to Office Open XML Structure&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-OE376&lt;/code&gt;: Office Implementation Information for ECMA-376 Standards Support&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-OFFCRYPTO&lt;/code&gt;: Office Document Cryptography Structure&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-OI29500&lt;/code&gt;: Office Implementation Information for ISO/IEC 29500 Standards Support&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-OLEDS&lt;/code&gt;: Object Linking and Embedding (OLE) Data Structures&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-OLEPS&lt;/code&gt;: Object Linking and Embedding (OLE) Property Set Data Structures&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-OODF3&lt;/code&gt;: Office Implementation Information for ODF 1.2 Standards Support&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-OSHARED&lt;/code&gt;: Office Common Data Types and Objects Structures&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-OVBA&lt;/code&gt;: Office VBA File Format Structure&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-XLDM&lt;/code&gt;: Spreadsheet Data Model File Format&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-XLS&lt;/code&gt;: Excel Binary File Format (.xls) Structure Specification&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-XLSB&lt;/code&gt;: Excel (.xlsb) Binary File Format&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;MS-XLSX&lt;/code&gt;: Excel (.xlsx) Extensions to the Office Open XML SpreadsheetML File Format&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;XLS&lt;/code&gt;: Microsoft Office Excel 97-2007 Binary File Format Specification&lt;/li&gt; 
  &lt;li&gt;&lt;code&gt;RTF&lt;/code&gt;: Rich Text Format&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;ul&gt; 
 &lt;li&gt;ISO/IEC 29500:2012(E) “Information technology — Document description and processing languages — Office Open XML File Formats”&lt;/li&gt; 
 &lt;li&gt;Open Document Format for Office Applications Version 1.2 (29 September 2011)&lt;/li&gt; 
 &lt;li&gt;Worksheet File Format (From Lotus) December 1984&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>apsdehal/awesome-ctf</title>
      <link>https://github.com/apsdehal/awesome-ctf</link>
      <description>&lt;p&gt;A curated list of CTF frameworks, libraries, resources and softwares&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome CTF &lt;a href=&quot;https://travis-ci.org/apsdehal/awesome-ctf&quot;&gt;&lt;img src=&quot;https://travis-ci.org/apsdehal/awesome-ctf.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sindresorhus/awesome&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&quot; alt=&quot;Awesome&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;A curated list of &lt;a href=&quot;https://en.wikipedia.org/wiki/Capture_the_flag#Computer_security&quot;&gt;Capture The Flag&lt;/a&gt; (CTF) frameworks, libraries, resources, softwares and tutorials. This list aims to help starters as well as seasoned CTF players to find everything related to CTFs at one place.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Please take a quick look at the &lt;a href=&quot;https://github.com/apsdehal/ctf-tools/raw/master/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt; first.&lt;/p&gt; 
&lt;h4&gt;&lt;em&gt;If you know a tool that isn’t present here, feel free to open a pull request.&lt;/em&gt;&lt;/h4&gt; 
&lt;h3&gt;Why?&lt;/h3&gt; 
&lt;p&gt;It takes time to build up collection of tools used in CTF and remember them all. This repo helps to keep all these scattered tools at one place.&lt;/p&gt; 
&lt;h3&gt;Contents&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#awesome-ctf&quot;&gt;Awesome CTF&lt;/a&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#create&quot;&gt;Create&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#forensics&quot;&gt;Forensics&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#platforms&quot;&gt;Platforms&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#steganography&quot;&gt;Steganography&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#web&quot;&gt;Web&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#solve&quot;&gt;Solve&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#attacks&quot;&gt;Attacks&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#bruteforcers&quot;&gt;Bruteforcers&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#crypto&quot;&gt;Cryptography&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#exploits&quot;&gt;Exploits&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#forensics-1&quot;&gt;Forensics&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#networking&quot;&gt;Networking&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#reversing&quot;&gt;Reversing&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#services&quot;&gt;Services&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#steganography-1&quot;&gt;Steganography&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#web-1&quot;&gt;Web&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#resources&quot;&gt;Resources&lt;/a&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#operating-systems&quot;&gt;Operating Systems&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#starter-packs&quot;&gt;Starter Packs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#tutorials&quot;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#wargames&quot;&gt;Wargames&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#websites&quot;&gt;Websites&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#wikis&quot;&gt;Wikis&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#writeups-collections&quot;&gt;Writeups Collections&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Create&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Tools used for creating CTF challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.packtpub.com/eu/networking-and-servers/kali-linux-ctf-blueprints&quot;&gt;Kali Linux CTF Blueprints&lt;/a&gt; - Online book on building, testing, and customizing your own Capture the Flag challenges.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Forensics&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for creating Forensics challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iagox86/dnscat2&quot;&gt;Dnscat2&lt;/a&gt; - Hosts communication through DNS.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://learn.duffandphelps.com/kape&quot;&gt;Kroll Artifact Parser and Extractor (KAPE)&lt;/a&gt; - Triage program.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.magnetforensics.com/downloadaxiom&quot;&gt;Magnet AXIOM&lt;/a&gt; - Artifact-centric DFIR tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.kahusecurity.com/posts/registry_dumper_find_and_dump_hidden_registry_keys.html&quot;&gt;Registry Dumper&lt;/a&gt; - Dump your registry.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Platforms&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Projects that can be used to host a CTF&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isislab/CTFd&quot;&gt;CTFd&lt;/a&gt; - Platform to host jeopardy style CTFs from ISISLab, NYU Tandon.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/echoCTF/echoCTF.RED&quot;&gt;echoCTF.RED&lt;/a&gt; - Develop, deploy and maintain your own CTF infrastructure.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/fbctf&quot;&gt;FBCTF&lt;/a&gt; - Platform to host Capture the Flag competitions from Facebook.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aau-network-security/haaukins&quot;&gt;Haaukins&lt;/a&gt;- A Highly Accessible and Automated Virtualization Platform for Security Education.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mcpa-stlouis/hack-the-arch&quot;&gt;HackTheArch&lt;/a&gt; - CTF scoring platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Nakiami/mellivora&quot;&gt;Mellivora&lt;/a&gt; - A CTF engine written in PHP.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andreafioraldi/motherfucking-ctf&quot;&gt;MotherFucking-CTF&lt;/a&gt; - Badass lightweight plaform to host CTFs. No JS involved.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UnrealAkama/NightShade&quot;&gt;NightShade&lt;/a&gt; - A simple security CTF framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/easyctf/openctf&quot;&gt;OpenCTF&lt;/a&gt; - CTF in a box. Minimal setup required.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/picoCTF/picoCTF&quot;&gt;PicoCTF&lt;/a&gt; - The platform used to run picoCTF. A great framework to host any CTF.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pdautry/py_chall_factory&quot;&gt;PyChallFactory&lt;/a&gt; - Small framework to create/manage/package jeopardy CTF challenges.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/moloch--/RootTheBox&quot;&gt;RootTheBox&lt;/a&gt; - A Game of Hackers (CTF Scoreboard &amp;amp; Game Manager).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/legitbs/scorebot&quot;&gt;Scorebot&lt;/a&gt; - Platform for CTFs by Legitbs (Defcon).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cliffe/SecGen&quot;&gt;SecGen&lt;/a&gt; - Security Scenario Generator. Creates randomly vulnerable virtual machines.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Steganography&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used to create stego challenges&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Check solve section for steganography.&lt;/p&gt; 
&lt;h2&gt;Web&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for creating Web challenges&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;JavaScript Obfustcators&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rapid7/metasploit-framework/wiki/How-to-obfuscate-JavaScript-in-Metasploit&quot;&gt;Metasploit JavaScript Obfuscator&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mishoo/UglifyJS&quot;&gt;Uglify&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Solve&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Tools used for solving CTF challenges&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Attacks&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for performing various kinds of attacks&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bettercap/bettercap&quot;&gt;Bettercap&lt;/a&gt; - Framework to perform MITM (Man in the Middle) attacks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tomac/yersinia&quot;&gt;Yersinia&lt;/a&gt; - Attack various protocols on layer 2.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Crypto&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for solving Crypto challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef&quot;&gt;CyberChef&lt;/a&gt; - Web app for analysing and decoding data.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nccgroup/featherduster&quot;&gt;FeatherDuster&lt;/a&gt; - An automated, modular cryptanalysis tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iagox86/hash_extender&quot;&gt;Hash Extender&lt;/a&gt; - A utility tool for performing hash length extension attacks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/KishanBagaria/padding-oracle-attacker&quot;&gt;padding-oracle-attacker&lt;/a&gt; - A CLI tool to execute padding oracle attacks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.unix-ag.uni-kl.de/%7Econrad/krypto/pkcrack.html&quot;&gt;PkCrack&lt;/a&gt; - A tool for Breaking PkZip-encryption.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://quipqiup.com&quot;&gt;QuipQuip&lt;/a&gt; - An online tool for breaking substitution ciphers or vigenere ciphers (without key).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Ganapati/RsaCtfTool&quot;&gt;RSACTFTool&lt;/a&gt; - A tool for recovering RSA private key with various attack.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ius/rsatool&quot;&gt;RSATool&lt;/a&gt; - Generate private key with knowledge of p and q.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hellman/xortool&quot;&gt;XORTool&lt;/a&gt; - A tool to analyze multi-byte xor cipher.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Bruteforcers&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for various kind of bruteforcing (passwords etc.)&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hashcat.net/hashcat/&quot;&gt;Hashcat&lt;/a&gt; - Password Cracker&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://tools.kali.org/password-attacks/hydra&quot;&gt;Hydra&lt;/a&gt; - A parallelized login cracker which supports numerous protocols to attack&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/magnumripper/JohnTheRipper&quot;&gt;John The Jumbo&lt;/a&gt; - Community enhanced version of John the Ripper.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.openwall.com/john/&quot;&gt;John The Ripper&lt;/a&gt; - Password Cracker.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/intrd/nozzlr&quot;&gt;Nozzlr&lt;/a&gt; - Nozzlr is a bruteforce framework, trully modular and script-friendly.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://ophcrack.sourceforge.net/&quot;&gt;Ophcrack&lt;/a&gt; - Windows password cracker based on rainbow tables.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lanjelot/patator&quot;&gt;Patator&lt;/a&gt; - Patator is a multi-purpose brute-forcer, with a modular design.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://portswigger.net/research/turbo-intruder-embracing-the-billion-request-attack&quot;&gt;Turbo Intruder&lt;/a&gt; - Burp Suite extension for sending large numbers of HTTP requests&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Exploits&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for solving Exploits challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpenSecurityResearch/dllinjector&quot;&gt;DLLInjector&lt;/a&gt; - Inject dlls in processes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hellman/libformatstr&quot;&gt;libformatstr&lt;/a&gt; - Simplify format string exploitation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.metasploit.com/&quot;&gt;Metasploit&lt;/a&gt; - Penetration testing software. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.comparitech.com/net-admin/metasploit-cheat-sheet/&quot;&gt;Cheatsheet&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/david942j/one_gadget&quot;&gt;one_gadget&lt;/a&gt; - A tool to find the one gadget &lt;code&gt;execve(&#39;/bin/sh&#39;, NULL, NULL)&lt;/code&gt; call. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;gem install one_gadget&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Gallopsled/pwntools&quot;&gt;Pwntools&lt;/a&gt; - CTF Framework for writing exploits.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BinaryAnalysisPlatform/qira&quot;&gt;Qira&lt;/a&gt; - QEMU Interactive Runtime Analyser.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JonathanSalwan/ROPgadget&quot;&gt;ROP Gadget&lt;/a&gt; - Framework for ROP exploitation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/P1kachu/v0lt&quot;&gt;V0lt&lt;/a&gt; - Security CTF Toolkit.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Forensics&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for solving Forensics challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.aircrack-ng.org/&quot;&gt;Aircrack-Ng&lt;/a&gt; - Crack 802.11 WEP and WPA-PSK keys. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;apt-get install aircrack-ng&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/audacity/&quot;&gt;Audacity&lt;/a&gt; - Analyze sound files (mp3, m4a, whatever). 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;apt-get install audacity&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sourceforge.net/projects/ophcrack/files/samdump2/&quot;&gt;Bkhive and Samdump2&lt;/a&gt; - Dump SYSTEM and SAM files. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;apt-get install samdump2 bkhive&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.ntcore.com/exsuite.php&quot;&gt;CFF Explorer&lt;/a&gt; - PE Editor.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/moyix/creddump&quot;&gt;Creddump&lt;/a&gt; - Dump windows credentials.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kost/dvcs-ripper&quot;&gt;DVCS Ripper&lt;/a&gt; - Rips web accessible (distributed) version control systems.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.sno.phy.queensu.ca/%7Ephil/exiftool/&quot;&gt;Exif Tool&lt;/a&gt; - Read, write and edit file metadata.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://extundelete.sourceforge.net/&quot;&gt;Extundelete&lt;/a&gt; - Used for recovering lost data from mountable images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rabbitstack/fibratus&quot;&gt;Fibratus&lt;/a&gt; - Tool for exploration and tracing of the Windows kernel.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://foremost.sourceforge.net/&quot;&gt;Foremost&lt;/a&gt; - Extract particular kind of files using headers. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;apt-get install foremost&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://linux.die.net/man/8/fsck.ext3&quot;&gt;Fsck.ext4&lt;/a&gt; - Used to fix corrupt filesystems.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://malzilla.sourceforge.net/&quot;&gt;Malzilla&lt;/a&gt; - Malware hunting tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.netresec.com/?page=NetworkMiner&quot;&gt;NetworkMiner&lt;/a&gt; - Network Forensic Analysis Tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://malzilla.sourceforge.net/downloads.html&quot;&gt;PDF Streams Inflater&lt;/a&gt; - Find and extract zlib files compressed in PDF files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.libpng.org/pub/png/apps/pngcheck.html&quot;&gt;Pngcheck&lt;/a&gt; - Verifies the integrity of PNG and dump all of the chunk-level information in human-readable form. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;apt-get install pngcheck&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.nirsoft.net/utils/resources_extract.html&quot;&gt;ResourcesExtract&lt;/a&gt; - Extract various filetypes from exes.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/williballenthin/shellbags&quot;&gt;Shellbags&lt;/a&gt; - Investigate NT_USER.dat files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sbmlabs.com/notes/snow_whitespace_steganography_tool&quot;&gt;Snow&lt;/a&gt; - A Whitespace Steganography Tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/snovvcrash/usbrip&quot;&gt;USBRip&lt;/a&gt; - Simple CLI forensics tool for tracking USB device artifacts (history of USB events) on GNU/Linux.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/volatilityfoundation/volatility&quot;&gt;Volatility&lt;/a&gt; - To investigate memory dumps.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt; - Used to analyze pcap or pcapng files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Registry Viewers&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.nirsoft.net/utils/offline_registry_view.html&quot;&gt;OfflineRegistryView&lt;/a&gt; - Simple tool for Windows that allows you to read offline Registry files from external drive and view the desired Registry key in .reg file format.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://accessdata.com/product-download/registry-viewer-2-0-0&quot;&gt;Registry Viewer®&lt;/a&gt; - Used to view Windows registries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Networking&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for solving Networking challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/robertdavidgraham/masscan&quot;&gt;Masscan&lt;/a&gt; - Mass IP port scanner, TCP port scanner.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://linoxide.com/monitoring-2/monit-linux/&quot;&gt;Monit&lt;/a&gt; - A linux tool to check a host on the network (and other non-network activities).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GouveaHeitor/nipe&quot;&gt;Nipe&lt;/a&gt; - Nipe is a script to make Tor Network your default gateway.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nmap.org/&quot;&gt;Nmap&lt;/a&gt; - An open source utility for network discovery and security auditing.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt; - Analyze the network dumps. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;apt-get install wireshark&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.zeek.org&quot;&gt;Zeek&lt;/a&gt; - An open-source network security monitor.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://zmap.io/&quot;&gt;Zmap&lt;/a&gt; - An open-source network scanner.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Reversing&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for solving Reversing challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/androguard/androguard&quot;&gt;Androguard&lt;/a&gt; - Reverse engineer Android applications.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/angr/angr&quot;&gt;Angr&lt;/a&gt; - platform-agnostic binary analysis framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lxdvs/apk2gold&quot;&gt;Apk2Gold&lt;/a&gt; - Yet another Android decompiler.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://ibotpeaches.github.io/Apktool/&quot;&gt;ApkTool&lt;/a&gt; - Android Decompiler.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/programa-stic/barf-project&quot;&gt;Barf&lt;/a&gt; - Binary Analysis and Reverse engineering Framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://binary.ninja/&quot;&gt;Binary Ninja&lt;/a&gt; - Binary analysis framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/binutils/binutils.html&quot;&gt;BinUtils&lt;/a&gt; - Collection of binary tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/devttys0/binwalk&quot;&gt;BinWalk&lt;/a&gt; - Analyze, reverse engineer, and extract firmware images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BoomerangDecompiler/boomerang&quot;&gt;Boomerang&lt;/a&gt; - Decompile x86/SPARC/PowerPC/ST-20 binaries to C.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/docileninja/ctf_import&quot;&gt;ctf_import&lt;/a&gt; – run basic functions from stripped binaries cross platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fkie-cad/cwe_checker&quot;&gt;cwe_checker&lt;/a&gt; - cwe_checker finds vulnerable patterns in binary executables.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kirschju/demovfuscator&quot;&gt;demovfuscator&lt;/a&gt; - A work-in-progress deobfuscator for movfuscated binaries.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/frida/&quot;&gt;Frida&lt;/a&gt; - Dynamic Code Injection.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/gdb/&quot;&gt;GDB&lt;/a&gt; - The GNU project debugger.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hugsy/gef&quot;&gt;GEF&lt;/a&gt; - GDB plugin.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ghidra-sre.org/&quot;&gt;Ghidra&lt;/a&gt; - Open Source suite of reverse engineering tools. Similar to IDA Pro.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.hopperapp.com/&quot;&gt;Hopper&lt;/a&gt; - Reverse engineering tool (disassembler) for OSX and Linux.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.hex-rays.com/products/ida/&quot;&gt;IDA Pro&lt;/a&gt; - Most used Reversing software.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/skylot/jadx&quot;&gt;Jadx&lt;/a&gt; - Decompile Android files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.javadecompilers.com&quot;&gt;Java Decompilers&lt;/a&gt; - An online decompiler for Java and Android APKs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Storyyeller/Krakatau&quot;&gt;Krakatau&lt;/a&gt; - Java decompiler and disassembler.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sensepost/objection&quot;&gt;Objection&lt;/a&gt; - Runtime Mobile Exploration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/longld/peda&quot;&gt;PEDA&lt;/a&gt; - GDB plugin (only python2.7).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool&quot;&gt;Pin&lt;/a&gt; - A dynamic binary instrumentaion tool by Intel.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/korcankaraokcu/PINCE&quot;&gt;PINCE&lt;/a&gt; - GDB front-end/reverse engineering tool, focused on game-hacking and automation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ChrisTheCoolHut/PinCTF&quot;&gt;PinCTF&lt;/a&gt; - A tool which uses intel pin for Side Channel Analysis.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/joelpx/plasma&quot;&gt;Plasma&lt;/a&gt; - An interactive disassembler for x86/ARM/MIPS which can generate indented pseudo-code with colored syntax.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pwndbg/pwndbg&quot;&gt;Pwndbg&lt;/a&gt; - A GDB plugin that provides a suite of utilities to hack around GDB easily.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/radare/radare2&quot;&gt;radare2&lt;/a&gt; - A portable reversing framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JonathanSalwan/Triton/&quot;&gt;Triton&lt;/a&gt; - Dynamic Binary Analysis (DBA) framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gstarnberger/uncompyle&quot;&gt;Uncompyle&lt;/a&gt; - Decompile Python 2.7 binaries (.pyc).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.windbg.org/&quot;&gt;WinDbg&lt;/a&gt; - Windows debugger distributed by Microsoft.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://reverse.lostrealm.com/tools/xocopy.html&quot;&gt;Xocopy&lt;/a&gt; - Program that can copy executables with execute, but no read permission.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Z3Prover/z3&quot;&gt;Z3&lt;/a&gt; - A theorem prover from Microsoft Research.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;JavaScript Deobfuscators&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://relentless-coding.org/projects/jsdetox/install&quot;&gt;Detox&lt;/a&gt; - A Javascript malware analysis tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.kahusecurity.com/posts/revelo_javascript_deobfuscator.html&quot;&gt;Revelo&lt;/a&gt; - Analyze obfuscated Javascript code.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;SWF Analyzers&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CyberShadow/RABCDAsm&quot;&gt;RABCDAsm&lt;/a&gt; - Collection of utilities including an ActionScript 3 assembler/disassembler.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.swftools.org/&quot;&gt;Swftools&lt;/a&gt; - Collection of utilities to work with SWF files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bitbucket.org/Alexander_Hanel/xxxswf&quot;&gt;Xxxswf&lt;/a&gt; - A Python script for analyzing Flash files.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Services&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Various kind of useful services available around the internet&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://cow.cat/cswsh.html&quot;&gt;CSWSH&lt;/a&gt; - Cross-Site WebSocket Hijacking Tester.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://requestbin.com/&quot;&gt;Request Bin&lt;/a&gt; - Lets you inspect http requests to a particular url.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Steganography&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for solving Steganography challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://aperisolve.fr/&quot;&gt;AperiSolve&lt;/a&gt; - Aperi’Solve is a platform which performs layer analysis on image (open-source).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.imagemagick.org/script/convert.php&quot;&gt;Convert&lt;/a&gt; - Convert images b/w formats and apply filters.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://manpages.ubuntu.com/manpages/trusty/man1/exif.1.html&quot;&gt;Exif&lt;/a&gt; - Shows EXIF information in JPEG files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/exiftool&quot;&gt;Exiftool&lt;/a&gt; - Read and write meta information in files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.exiv2.org/manpage.html&quot;&gt;Exiv2&lt;/a&gt; - Image metadata manipulation tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sourceforge.net/projects/image-steg/&quot;&gt;Image Steganography&lt;/a&gt; - Embeds text and files in images with optional encryption. Easy-to-use UI.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://incoherency.co.uk/image-steganography&quot;&gt;Image Steganography Online&lt;/a&gt; - This is a client-side Javascript tool to steganographically hide images inside the lower “bits” of other images&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt; - Tool for manipulating images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=outguess+&amp;amp;apropos=0&amp;amp;sektion=0&amp;amp;manpath=FreeBSD+Ports+5.1-RELEASE&amp;amp;format=html&quot;&gt;Outguess&lt;/a&gt; - Universal steganographic tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://packages.debian.org/sid/pngtools&quot;&gt;Pngtools&lt;/a&gt; - For various analysis related to PNGs. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;apt-get install pngtools&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Y-Vladimir/SmartDeblur&quot;&gt;SmartDeblur&lt;/a&gt; - Used to deblur and fix defocused images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.openhub.net/p/steganabara&quot;&gt;Steganabara&lt;/a&gt; - Tool for stegano analysis written in Java.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://stylesuxx.github.io/steganography/&quot;&gt;SteganographyOnline&lt;/a&gt; - Online steganography encoder and decoder.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/stegbreak&quot;&gt;Stegbreak&lt;/a&gt; - Launches brute-force dictionary attacks on JPG image.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Paradoxis/StegCracker&quot;&gt;StegCracker&lt;/a&gt; - Steganography brute-force utility to uncover hidden data inside files.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/evyatarmeged/stegextract&quot;&gt;stegextract&lt;/a&gt; - Detect hidden files and text in images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://steghide.sourceforge.net/&quot;&gt;Steghide&lt;/a&gt; - Hide data in various kind of images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://georgeom.net/StegOnline/upload&quot;&gt;StegOnline&lt;/a&gt; - Conduct a wide range of image steganography operations, such as concealing/revealing files hidden within bits (open-source).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.caesum.com/handbook/Stegsolve.jar&quot;&gt;Stegsolve&lt;/a&gt; - Apply various steganography techniques to images.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zed-0xff/zsteg/&quot;&gt;Zsteg&lt;/a&gt; - PNG/BMP analysis.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Web&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tools used for solving Web challenges&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://portswigger.net/burp&quot;&gt;BurpSuite&lt;/a&gt; - A graphical tool to testing website security.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/commixproject/commix&quot;&gt;Commix&lt;/a&gt; - Automated All-in-One OS Command Injection and Exploitation Tool.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/hackbartool/&quot;&gt;Hackbar&lt;/a&gt; - Firefox addon for easy web exploitation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Projects/OWASP_Zed_Attack_Proxy_Project&quot;&gt;OWASP ZAP&lt;/a&gt; - Intercepting proxy to replay, debug, and fuzz HTTP requests and responses&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&quot;&gt;Postman&lt;/a&gt; - Add on for chrome for debugging network requests.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/evyatarmeged/Raccoon&quot;&gt;Raccoon&lt;/a&gt; - A high performance offensive security tool for reconnaissance and vulnerability scanning.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sqlmapproject/sqlmap&quot;&gt;SQLMap&lt;/a&gt; - Automatic SQL injection and database takeover tool. &lt;code&gt;pip install sqlmap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andresriancho/w3af&quot;&gt;W3af&lt;/a&gt; - Web Application Attack and Audit Framework.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://xsser.sourceforge.net/&quot;&gt;XSSer&lt;/a&gt; - Automated XSS testor.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Resources&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Where to discover about CTF&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Operating Systems&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Penetration testing and security lab Operating Systems&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://androidtamer.com/&quot;&gt;Android Tamer&lt;/a&gt; - Based on Debian.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://backbox.org/&quot;&gt;BackBox&lt;/a&gt; - Based on Ubuntu.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blackarch.org/&quot;&gt;BlackArch Linux&lt;/a&gt; - Based on Arch Linux.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://labs.fedoraproject.org/security/&quot;&gt;Fedora Security Lab&lt;/a&gt; - Based on Fedora.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.kali.org/&quot;&gt;Kali Linux&lt;/a&gt; - Based on Debian.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.parrotsec.org/&quot;&gt;Parrot Security OS&lt;/a&gt; - Based on Debian.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.pentoo.ch/&quot;&gt;Pentoo&lt;/a&gt; - Based on Gentoo.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://urix.us/&quot;&gt;URIX OS&lt;/a&gt; - Based on openSUSE.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.wifislax.com/&quot;&gt;Wifislax&lt;/a&gt; - Based on Slackware.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Malware analysts and reverse-engineering&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fireeye/flare-vm/&quot;&gt;Flare VM&lt;/a&gt; - Based on Windows.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://remnux.org/&quot;&gt;REMnux&lt;/a&gt; - Based on Debian.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Starter Packs&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Collections of installer scripts, useful tools&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zardus/ctf-tools&quot;&gt;CTF Tools&lt;/a&gt; - Collection of setup scripts to install various security research tools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jlevitsk/lazykali&quot;&gt;LazyKali&lt;/a&gt; - A 2016 refresh of LazyKali which simplifies install of tools and configuration.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tutorials&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Tutorials to learn how to play CTFs&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://trailofbits.github.io/ctf/&quot;&gt;CTF Field Guide&lt;/a&gt; - Field Guide by Trails of Bits.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://ctfs.github.io/resources/&quot;&gt;CTF Resources&lt;/a&gt; - Start Guide maintained by community.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.endgame.com/blog/how-get-started-ctf&quot;&gt;How to Get Started in CTF&lt;/a&gt; - Short guideline for CTF beginners by Endgame&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.hoppersroppers.org/courseCTF.html&quot;&gt;Intro. to CTF Course&lt;/a&gt; - A free course that teaches beginners the basics of forensics, crypto, and web-ex.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA&quot;&gt;IppSec&lt;/a&gt; - Video tutorials and walkthroughs of popular CTF platforms.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w&quot;&gt;LiveOverFlow&lt;/a&gt; - Video tutorials on Exploitation.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xairy/mipt-ctf&quot;&gt;MIPT CTF&lt;/a&gt; - A small course for beginners in CTFs (in Russian).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Wargames&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Always online CTFs&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://backdoor.sdslabs.co/&quot;&gt;Backdoor&lt;/a&gt; - Security Platform by SDSLabs.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://crackmes.one/&quot;&gt;Crackmes&lt;/a&gt; - Reverse Engineering Challenges.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://cryptohack.org/&quot;&gt;CryptoHack&lt;/a&gt; - Fun cryptography challenges.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://echoctf.red/&quot;&gt;echoCTF.RED&lt;/a&gt; - Online CTF with a variety of targets to attack.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://exploit-exercises.lains.space/&quot;&gt;Exploit Exercises&lt;/a&gt; - Variety of VMs to learn variety of computer security issues.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://exploit.education&quot;&gt;Exploit.Education&lt;/a&gt; - Variety of VMs to learn variety of computer security issues.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Samuirai/gracker&quot;&gt;Gracker&lt;/a&gt; - Binary challenges having a slow learning curve, and write-ups for each level.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.hackthebox.eu&quot;&gt;Hack The Box&lt;/a&gt; - Weekly CTFs for all types of security enthusiasts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.hackthissite.org/&quot;&gt;Hack This Site&lt;/a&gt; - Training ground for hackers.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.hacker101.com/&quot;&gt;Hacker101&lt;/a&gt; - CTF from HackerOne&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hacking-lab.com/&quot;&gt;Hacking-Lab&lt;/a&gt; - Ethical hacking, computer network and security challenge platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://honeyourskills.ninja/&quot;&gt;Hone Your Ninja Skills&lt;/a&gt; - Web challenges starting from basic ones.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://io.netgarage.org/&quot;&gt;IO&lt;/a&gt; - Wargame for binary challenges.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://microcorruption.com&quot;&gt;Microcorruption&lt;/a&gt; - Embedded security CTF.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://overthewire.org/wargames/&quot;&gt;Over The Wire&lt;/a&gt; - Wargame maintained by OvertheWire Community.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pentesterlab.com/&quot;&gt;PentesterLab&lt;/a&gt; - Variety of VM and online challenges (paid).&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://2019game.picoctf.com&quot;&gt;PicoCTF&lt;/a&gt; - All year round ctf game. Questions from the yearly picoCTF competition.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://pwn.eonew.cn/&quot;&gt;PWN Challenge&lt;/a&gt; - Binary Exploitation Wargame.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://pwnable.kr/&quot;&gt;Pwnable.kr&lt;/a&gt; - Pwn Game.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pwnable.tw/&quot;&gt;Pwnable.tw&lt;/a&gt; - Binary wargame.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pwnable.xyz/&quot;&gt;Pwnable.xyz&lt;/a&gt; - Binary Exploitation Wargame.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://reversing.kr/&quot;&gt;Reversin.kr&lt;/a&gt; - Reversing challenge.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ringzer0team.com/&quot;&gt;Ringzer0Team&lt;/a&gt; - Ringzer0 Team Online CTF.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.root-me.org/&quot;&gt;Root-Me&lt;/a&gt; - Hacking and Information Security learning platform.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xelenonz/game&quot;&gt;ROP Wargames&lt;/a&gt; - ROP Wargames.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://holidayhackchallenge.com/past-challenges/&quot;&gt;SANS HHC&lt;/a&gt; - Challenges with a holiday theme released annually and maintained by SANS.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://smashthestack.org/&quot;&gt;SmashTheStack&lt;/a&gt; - A variety of wargames maintained by the SmashTheStack Community.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ctf.viblo.asia&quot;&gt;Viblo CTF&lt;/a&gt; - Various amazing CTF challenges, in many different categories. Has both Practice mode and Contest mode.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.vulnhub.com/&quot;&gt;VulnHub&lt;/a&gt; - VM-based for practical in digital security, computer application &amp;amp; network administration.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://w3challs.com&quot;&gt;W3Challs&lt;/a&gt; - A penetration testing training platform, which offers various computer challenges, in various categories.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://webhacking.kr&quot;&gt;WebHacking&lt;/a&gt; - Hacking challenges for web.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Self-hosted CTFs&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.dvwa.co.uk/&quot;&gt;Damn Vulnerable Web Application&lt;/a&gt; - PHP/MySQL web application that is damn vulnerable.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bkimminich/juice-shop-ctf&quot;&gt;Juice Shop CTF&lt;/a&gt; - Scripts and tools for hosting a CTF on &lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Juice_Shop_Project&quot;&gt;OWASP Juice Shop&lt;/a&gt; easily.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Websites&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Various general websites about and on CTF&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/uppusaikiran/awesome-ctf-cheatsheet#awesome-ctf-cheatsheet-&quot;&gt;Awesome CTF Cheatsheet&lt;/a&gt; - CTF Cheatsheet.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ctftime.org/&quot;&gt;CTF Time&lt;/a&gt; - General information on CTF occuring around the worlds.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.reddit.com/r/securityctf&quot;&gt;Reddit Security CTF&lt;/a&gt; - Reddit CTF category.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Wikis&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Various Wikis available for learning about CTFs&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://bamboofox.github.io/&quot;&gt;Bamboofox&lt;/a&gt; - Chinese resources to learn CTF.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://teambi0s.gitlab.io/bi0s-wiki/&quot;&gt;bi0s Wiki&lt;/a&gt; - Wiki from team bi0s.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://uppusaikiran.github.io/hacking/Capture-the-Flag-CheatSheet/&quot;&gt;CTF Cheatsheet&lt;/a&gt; - CTF tips and tricks.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/isislab/Project-Ideas/wiki&quot;&gt;ISIS Lab&lt;/a&gt; - CTF Wiki by Isis lab.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/OpenToAllCTF/Tips&quot;&gt;OpenToAll&lt;/a&gt; - CTF tips by OTA CTF team members.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Writeups Collections&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Collections of CTF write-ups&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/0e85dc6eaf/CTF-Writeups&quot;&gt;0e85dc6eaf&lt;/a&gt; - Write-ups for CTF challenges by 0e85dc6eaf&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://captf.com/&quot;&gt;Captf&lt;/a&gt; - Dumped CTF challenges and materials by psifertex.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ctfs/&quot;&gt;CTF write-ups (community)&lt;/a&gt; - CTF challenges + write-ups archive maintained by the community.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/abdilahrf/CTFWriteupScrapper&quot;&gt;CTFTime Scrapper&lt;/a&gt; - Scraps all writeup from CTF Time and organize which to read first.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/HackThisSite/CTF-Writeups&quot;&gt;HackThisSite&lt;/a&gt; - CTF write-ups repo maintained by HackThisSite team.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mzfr/ctf-writeups/&quot;&gt;Mzfr&lt;/a&gt; - CTF competition write-ups by mzfr&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Gallopsled/pwntools-write-ups&quot;&gt;pwntools writeups&lt;/a&gt; - A collection of CTF write-ups all using pwntools.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SababaSec/ctf-writeups&quot;&gt;SababaSec&lt;/a&gt; - A collection of CTF write-ups by the SababaSec team&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://shell-storm.org/repo/CTF/&quot;&gt;Shell Storm&lt;/a&gt; - CTF challenge archive maintained by Jonathan Salwan.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/smokeleeteveryday/CTF_WRITEUPS&quot;&gt;Smoke Leet Everyday&lt;/a&gt; - CTF write-ups repo maintained by SmokeLeetEveryday team.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;LICENSE&lt;/h3&gt; 
&lt;p&gt;CC0 :)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
