<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Sat, 03 Apr 2021 01:57:24 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>Asabeneh/30-Days-Of-React</title>
      <link>https://github.com/Asabeneh/30-Days-Of-React</link>
      <description>&lt;p&gt;30 Days of React challenge is a step by step guide to learn React in 30 days. It requires HTML, CSS, and JavaScript knowledge. You should be comfortable with JavaScript before you start to React. If you are not comfortable with JavaScript check out 30DaysOfJavaScript. This is a continuation of 30 Days Of JS. This challenge may take up to 100 day…&lt;/p&gt;&lt;hr&gt;&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;Author: 
 &lt;!-- raw HTML omitted --&gt;Asabeneh Yetayeh
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; October, 2020
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;| # Day | Topics | | ----- | :-------------------------------------------------------------------------------------------------------------------------: | | 00 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&quot;&gt;Introduction&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&quot;&gt;How to Use Repo&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&quot;&gt;Requirements&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&quot;&gt;Setup&lt;/a&gt; | | 01 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;JavaScript Refresher&lt;/a&gt; | | 02 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/02_Day_Introduction_to_React/02_introduction_to_react.md&quot;&gt;Getting Started React&lt;/a&gt; | | 03 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/03_Day_Setting_Up/03_setting_up.md&quot;&gt;Setting Up&lt;/a&gt; | | 04 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/04_Day_Components/04_components.md&quot;&gt;Components&lt;/a&gt; | | 05 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/05_Day_Props/05_props.md&quot;&gt;Props&lt;/a&gt; | | 06 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/06_Day_Map_List_Keys/06_map_list_keys.md&quot;&gt;List, Map and Keys&lt;/a&gt; | | 07 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/07_Day_Class_Components/07_class_components.md&quot;&gt;Class Components&lt;/a&gt; | | 08 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/08_Day_States/08_states.md&quot;&gt;States&lt;/a&gt; | | 09 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/09_Day_Conditional_Rendering/09_conditional_rendering.md&quot;&gt;Conditional Rendering&lt;/a&gt; | | 10 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/10_React_Project_Folder_Structure/10_react_project_folder_structure.md&quot;&gt;React Project Folder Structure&lt;/a&gt; | | 11 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/11_Day_Events/11_events.md&quot;&gt;Events&lt;/a&gt; | | 12 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/12_Day_Forms/12_forms.md&quot;&gt;Forms&lt;/a&gt; | | 13 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/13_Day_Controlled_Versus_Uncontrolled_Input/13_uncontrolled_input.md&quot;&gt;Controlled and Uncontrolled Component&lt;/a&gt; | | 14 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/14_Day_Component_Life_Cycles/14_component_life_cycles.md&quot;&gt;Component Life Cycles&lt;/a&gt; | | 15 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/15_Third_Party_Packages/15_third_party_packages.md&quot;&gt;Third Party Packages&lt;/a&gt; | | 16 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/16_Higher_Order_Component/16_higher_order_component.md&quot;&gt;Higher Order Components&lt;/a&gt; | | 17 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/17_React_Router/17_react_router.md&quot;&gt;React Router&lt;/a&gt; | | 18 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/18_Fetch_And_Axios/18_fetch_axios.md&quot;&gt;Fetch versus Axios&lt;/a&gt; | | 19 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/19_projects/19_projects.md&quot;&gt;Projects&lt;/a&gt; | | 20 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/20_projects/20_projects.md&quot;&gt;Projects&lt;/a&gt; | | 21 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/21_Introducing_Hooks/21_introducing_hooks.md&quot;&gt;Hooks&lt;/a&gt; | | 22 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/22_Form_Using_Hooks/22_form_using_hooks.md&quot;&gt;Forms Using Hook&lt;/a&gt; | | 23 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/23_Fetching_Data_Using_Hooks/23_fetching_data_using_hooks.md&quot;&gt;Fetching Data Using Hooks&lt;/a&gt; | | 24 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/24_projects/24_projects.md&quot;&gt;Project using Hooks&lt;/a&gt; | | 25 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/25_Custom_Hooks/25_custom_hooks.md&quot;&gt;Custom Hooks&lt;/a&gt; | | 26 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/26_Context/26_context.md&quot;&gt;Context&lt;/a&gt; | | 27 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/27_Ref/27_ref.md&quot;&gt;Ref&lt;/a&gt; | | 28 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/28_project/28_project.md&quot;&gt;project&lt;/a&gt; | | 29 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/29_explore/29_explore.md&quot;&gt;Explore&lt;/a&gt; | | 30 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/30_conclusions/30_conclusions.md&quot;&gt;Conclusions&lt;/a&gt; |&lt;/p&gt; 
&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&quot;&gt;How to Use Repo&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#star-and-fork-this-repo&quot;&gt;Star and Fork this Repo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#clone-your-fork&quot;&gt;Clone your Fork&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#create-a-new-branch&quot;&gt;Create a New Branch&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#structure-exercise-solutions&quot;&gt;Structure Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#commit-exercise-solutions&quot;&gt;Commit Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#update-your-fork-daily&quot;&gt;Update your Fork Daily&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&quot;&gt;Setup&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#install-nodejs&quot;&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#browser&quot;&gt;Browser&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-google-chrome&quot;&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#opening-google-chrome-console&quot;&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#writing-code-on-browser-console&quot;&gt;Writing Code on Browser Console&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog&quot;&gt;Console.log&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog-with-multiple-arguments&quot;&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#arithmetics&quot;&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#code-editor&quot;&gt;Code Editor&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-visual-studio-code&quot;&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-visual-studio-code&quot;&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of React programming challenge. In this challenge you will learn everything you need to use to develop a React application. In the end of the challenge you will get a 30DaysOfReact programming challenge completion certificate. In case you need help or if you would like to help others you may join the &lt;a href=&quot;https://t.me/thirtydaysofreact&quot;&gt;telegram group&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A 30DaysOfReact&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript and React developers. Welcome to 30 Days Of React. React is a JavaScript library. I enjoy using and teaching React and I hope you will do so too. In this step by step 30 Days React challenge, you will learn React which is one of most popular user interface JavaScript libraries. React can do everything that JavaScript can do. React can be used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt;. I believe you will learn quite a lot in the next 30 days and your programming and problem solving skills will also be improved significantly.&lt;/p&gt; 
&lt;p&gt;I will use conversational English and less jargons to write this challenge. The content will be continuously updated. If you find a typo or grammar mistakes don&#39;t be surprised because I don&#39;t do any proof read before I publish it. I would recommend you to focus on the main message of the challenge instead of the English and some minor mistakes. I really appreciate if you send me pull requests for improvement and remember to pull first from master before you send pull requests. Most of the images I have used in this challenge came from 30DaysOfJavaScript challenge therefore you may need to rename file names and folders 30DaysOfReact. If you are good at arrays, loops, functions, objects, functional programming, destructuring and spreading and class then you will be able to follow the challenge properly. Otherwise, I strongly recommend you to check &lt;a href=&quot;https://github.com/Asabeneh/30-Days-Of-JavaScript&quot;&gt;30DaysOfJavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before you dive into this course, you may check the &lt;a href=&quot;https://t.me/thirtydaysofreact/992&quot;&gt;review&lt;/a&gt; of 30 Days Of React.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;To get along with the challenge you need to have the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Motivation&lt;/li&gt; 
 &lt;li&gt;A computer&lt;/li&gt; 
 &lt;li&gt;Internet&lt;/li&gt; 
 &lt;li&gt;A browser&lt;/li&gt; 
 &lt;li&gt;A code editor&lt;/li&gt; 
 &lt;li&gt;HTML, CSS and JavaScript intermediate level skill&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to Use Repo&lt;/h2&gt; 
&lt;h3&gt;Star and Fork this Repo&lt;/h3&gt; 
&lt;p&gt;Star this repo to support this work and Fork the repo to create your own copy to work from.&lt;/p&gt; 
&lt;h3&gt;Clone your Fork&lt;/h3&gt; 
&lt;p&gt;You should always work directly from your forked copy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# note that an `ssh` link is used here, but an `https` link will work the same
git clone git@github.com:username/30-Days-Of-React.git
cd 30-Days-Of-React
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Create a New Branch&lt;/h3&gt; 
&lt;p&gt;To complete daily exercises, my suggestion is to create a separate branch to house your exercise folder or any other changes you make. This will keep your master branch clean at all times, which means your master will always be similar to the original master.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout -b exercise-solutions # `-b` creates the branch if it does not exist
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Structure Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;In your new branch, you can use files/folders to structure your solutions to daily exercises&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir -p solutions/day-01 # `-p` helps create nested directories
touch solutions/day-01/level1.js # touch creates a file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commit Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;Commit your solutions to your Fork&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git add solutions/day-01/level1.js
git commit -m &quot;chore: exercise level1 complete&quot;
git push origin exercise-solutions # branch `exercise-solutions` was created earlier
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update your Fork Daily&lt;/h3&gt; 
&lt;p&gt;This repo will be updated daily throughout the month. When a new day&#39;s content becomes available, you can update your forked copy with the steps below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 1. switch to master branch
git checkout master
# 2. check if your local copy has a link to original `...Asabeneh/30-Days-Of-React.git`
git remote -v
# 3. if not, add a link to original, you can choose any name for the link or use `upstream`
git remote add upstream git@github.com:Asabeneh/30-Days-Of-React.git
# 4. check again to confirm link added
git remote -v
# 5. now you can fetch updates from original repo, assuming you named this `upstream`
git fetch upstream
# 6. merge the updates to your local master branch
git merge upstream/master master
# 7. push the merged updates to your Forked copy on GitHub
git push origin master
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that the updates are only applied to the master branch. If you wish to update any other branch, repeat steps 6-7 with the branch name. See snippet below for &lt;code&gt;exercise-solutions&lt;/code&gt; branch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git merge upstream/master exercise-solutions
git push origin exercise-solutions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. In addition to that basic to intermediate level HTML, CSS and JS. If you have those, then you have everything to get started.&lt;/p&gt; 
&lt;h3&gt;Install Node.js&lt;/h3&gt; 
&lt;p&gt;You may not need node.js right now but you may need it for later. Install &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/download_node.png&quot; alt=&quot;Node download&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After downloading double click and install&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/install_node.png&quot; alt=&quot;Install node&quot;&gt;&lt;/p&gt; 
&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;asabeneh $ node -v
v12.14.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When making this tutorial I was using node version 12.14.0, but now the recommended version of node.js for download is 12.17.0.&lt;/p&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; 
&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; 
&lt;p&gt;Install &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;google chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/google_chrome.png&quot; alt=&quot;Google Chrome&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; 
&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_developer_tool.png&quot; alt=&quot;Opening chrome&quot;&gt;&lt;/p&gt; 
&lt;p&gt;To open the Chrome console using a keyboard shortcut. It is good to know the shortcut too as a JavaScript and React developer you will spend much time on a browser console and don&#39;t be lazy to open it during development.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Mac
Command+Option+J

Windows/Linux:
Ctl+Shift+J
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_chrome_console_shortcut.png&quot; alt=&quot;Opening console&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/js_code_on_chrome_console.png&quot; alt=&quot;write code on console&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; 
&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Mac
Command+Option+I

Windows:
Ctl+Shift+I
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log&lt;/h5&gt; 
&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed &#39;Hello, World&#39; as input data or argument in the console.log() function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; 
&lt;p&gt;The &lt;strong&gt;console.log()&lt;/strong&gt; function can take multiple parameters separated by comma. The syntax looks like as follows:&lt;strong&gt;console.log(param1, param2, param3)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/console_log_multipl_arguments.png&quot; alt=&quot;console log multiple arguments&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello&#39;, &#39;World&#39;, &#39;!&#39;)
console.log(&#39;HAPPY&#39;, &#39;NEW&#39;, &#39;YEAR&#39;, 2020)
console.log(&#39;Welcome&#39;, &#39;to&#39;, 30, &#39;Days&#39;, &#39;Of&#39;, &#39;JavaScript&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;console.log()&lt;/em&gt; can take multiple arguments. It is recommended to use as many console.log() prints to check what is happening in your code but don&#39;t keep all console.log() tests on your code forever. Make your life easy by keeping the browser console open.&lt;/p&gt; 
&lt;h5&gt;Comments&lt;/h5&gt; 
&lt;p&gt;We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code.In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this /* */ is also a comment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;// This is the first comment&lt;br&gt; // This is the second comment&lt;br&gt; // I am a single line comment&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;/* This is a multiline comment&lt;br&gt; Multiline comments can take multiple lines&lt;br&gt; JavaScript is the language of the web&lt;br&gt; */&lt;/p&gt; 
&lt;h5&gt;Syntax&lt;/h5&gt; 
&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is &lt;em&gt;the structure of statements in a computer language.&lt;/em&gt; Programing languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/raising_syntax_error.png&quot; alt=&quot;Error&quot;&gt;&lt;/p&gt; 
&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
console.log(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;console.log()&lt;/em&gt;. If we are printing text or string using &lt;em&gt;console.log()&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick quotes. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
console.log(&#39;Hello, World!&#39;)
console.log(`Hello, World!`)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arithmetics&lt;/h4&gt; 
&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;console.log()&lt;/em&gt; on google chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. The console can directly take arguments without the &lt;strong&gt;&lt;em&gt;console.log()&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/arithmetic.png&quot; alt=&quot;Arithmetic&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(2 + 3) // Addition
console.log(3 - 2) // Subtraction
console.log(2 * 3) // Multiplication
console.log(3 / 2) // Division
console.log(3 % 2) // Modulus - finding remainder
console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Code Editor&lt;/h3&gt; 
&lt;p&gt;We can write our codes on the browser console, but it won&#39;t do for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; 
&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Visual studio code is a very popular open-source text editor. I would recommend to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode.png&quot; alt=&quot;Vscode&quot;&gt;&lt;/p&gt; 
&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; 
&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode_ui.png&quot; alt=&quot;Vscode ui&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/adding_project_to_vscode.png&quot; alt=&quot;Vscode add project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_project_on_vscode.png&quot; alt=&quot;Vscode open project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/scripts_on_vscode.png&quot; alt=&quot;script file&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vsc_live_server.png&quot; alt=&quot;Installing Live Server&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/running_script.png&quot; alt=&quot;running script&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/launched_on_new_tab.png&quot; alt=&quot;coding running&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Congratulations! You have completed the setup you need to get started with React, but before we dive into React let&#39;s do a JavaScript refresher. If you are very comfortable with JavaScript you may skip day 1 JavaScript refresher. The JavaScript refresher section is vast and it may take more than one day. From my experience people usually get stuck in React because their JavaScript knowledge is very shallow therefore to fill that gap all the necessary JavaScript features which can be used in React are covered in the JavaScript refresher section. There are many exercises but you are not required to solve them. Click &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/30-Days-Of-React/02_Day_Introduction_to_React/02_introduction_to_react.md&quot;&gt;here&lt;/a&gt; if you want skip JavaScript and jump directly into React.&lt;/p&gt; 
&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pixeltris/TwitchAdSolutions</title>
      <link>https://github.com/pixeltris/TwitchAdSolutions</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TwitchAdSolutions&lt;/h1&gt; 
&lt;p&gt;This repo aims to provide multiple solutions for blocking Twitch ads.&lt;/p&gt; 
&lt;h2&gt;Recommendations&lt;/h2&gt; 
&lt;p&gt;M3U8 proxies (or full proxies / VPNs) are currently the most reliable way of avoiding ads. More proxy hosts would be ideal (see &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/issues/8&quot;&gt;#8&lt;/a&gt;).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;There currently aren&#39;t any public proxies. &lt;code&gt;Twitch AdBlock&lt;/code&gt; was taken down on March 31 (see &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/issues/22&quot;&gt;#22&lt;/a&gt;).&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatively:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;notify-strip&lt;/code&gt; is ok-ish.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Alternate Player for Twitch.tv&lt;/code&gt; consistently updates with new ad-blocking methods.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ttv_adEraser&lt;/code&gt; somewhat fixes the purple screen issue of &lt;code&gt;ttv-ublock&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ttv-tools&lt;/code&gt; (firefox) has nice features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Current solutions&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;These solutions generally aren&#39;t compatible with other Twitch ad blockers. e.g. &lt;code&gt;ttv-ublock&lt;/code&gt; will break some of these.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;If you want a perfect solution, please use&lt;/strong&gt; &lt;code&gt;Twitch AdBlock&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;notify-strip (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-strip/notify-strip-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-strip/notify-strip.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;The same as &lt;code&gt;strip&lt;/code&gt;, but notifies Twitch that ads were &quot;watched&quot; (reduces preroll ad frequency).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;notify-reload (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-reload/notify-reload-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-reload/notify-reload.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Notifies that ads were watched, then reloads the player.&lt;/li&gt; 
   &lt;li&gt;Repeats this until no ads &lt;strong&gt;(which may never happen ~ infinite reload)&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;You should expect 3-10 player reloads (give or take). Once successful you shouldn&#39;t see preroll ads for a while on any stream (10+ minutes?).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;strip (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/strip/strip-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/strip/strip.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Ad segments are replaced by low resolution stream segments (on a m3u8 level).&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;TODO: Fix midrolls issues (stream freezes for several seconds / potentially longer low res than needed).&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;NOTE: Removing segments doesn&#39;t notify Twitch that ads were watched (aka more served ads).&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;low-res (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/low-res/low-res-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/low-res/low-res.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;No ads.&lt;/li&gt; 
   &lt;li&gt;The stream is 480p for the duration of the stream.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;mute-black (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/mute-black/mute-black-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/mute-black/mute-black.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Ads are muted / blacked out for the duration of the ad.&lt;/li&gt; 
   &lt;li&gt;You might see tiny bits of the ad.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;video-swap (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/video-swap/video-swap-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/video-swap/video-swap.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Ads are replaced by a low resolution stream for the duration of the ad.&lt;/li&gt; 
   &lt;li&gt;Similar to &lt;code&gt;strip&lt;/code&gt;, but skips closer to 20 seconds when switching to the live stream (TODO: low latency support).&lt;/li&gt; 
   &lt;li&gt;You might see tiny bits of the ad.&lt;/li&gt; 
   &lt;li&gt;Audio controls wont work whilst the ad is playing.&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;There are various UX/UI issues with this script which need to be addressed.&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;~~proxy-m3u8 (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/proxy-m3u8/proxy-m3u8-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/proxy-m3u8/proxy-m3u8.user.js&quot;&gt;userscript&lt;/a&gt;)~~ &lt;strong&gt;(proxy currently points to a dead url)&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Uses a proxy server to fetch an ad-free stream.&lt;/li&gt; 
   &lt;li&gt;Currently only the initial m3u8 is proxied, so there shouldn&#39;t be any additional latency.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Assumes the proxy server acts in good faith and maintains a good uptime.&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;The following renamed/deprecated scripts will be removed from the master branch on &lt;code&gt;1st March 2021&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;dyn&lt;/code&gt; renamed to &lt;code&gt;strip&lt;/code&gt; as this better reflects the functionality (strips ad segments).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dyn-skip&lt;/code&gt; removed as it no longer works.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dyn-skip-midroll&lt;/code&gt; renamed to &lt;code&gt;notify-reload&lt;/code&gt; as the original name has lost its meaning.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dyn-skip-midroll-alt&lt;/code&gt; renamed to &lt;code&gt;notify-strip&lt;/code&gt; as the original name has lost its meaning.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dyn-video-swap&lt;/code&gt; renamed to &lt;code&gt;video-swap&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Applying a solution (uBlock Origin)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Navigate to the uBlock Origin Dashboard (the extension options)&lt;/li&gt; 
 &lt;li&gt;Under the &lt;code&gt;My filters&lt;/code&gt; tab add &lt;code&gt;twitch.tv##+js(twitch-videoad)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Under the &lt;code&gt;Settings&lt;/code&gt; tab, enable &lt;code&gt;I am an advanced user&lt;/code&gt;, then click the cog that appears. Modify the value of &lt;code&gt;userResourcesLocation&lt;/code&gt; from &lt;code&gt;unset&lt;/code&gt; to the full url of the solution you wish to use (if a url is already in use, add a space after the existing url). e.g. &lt;code&gt;userResourcesLocation https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-strip/notify-strip-ublock-origin.js&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;To ensure uBlock Origin loads the script I recommend that you disable/enable the uBlock Origin extension (or restart your browser).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Applying a solution (userscript)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Viewing one of the userscript files should prompt the given script to be added.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other solutions / projects&lt;/h2&gt; 
&lt;p&gt;For a more detailed description of the following please refer to &lt;a href=&quot;https://raw.githubusercontent.com/pixeltris/TwitchAdSolutions/master/other-solutions.md&quot;&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://github.com/odensc/ttv-ublock (extension - purple screen may display every 10-15 mins)&lt;/li&gt; 
 &lt;li&gt;https://github.com/Nerixyz/ttv-tools (Firefox extension)&lt;/li&gt; 
 &lt;li&gt;https://github.com/LeonHeidelbach/ttv_adEraser (extension)&lt;/li&gt; 
 &lt;li&gt;https://github.com/instance01/Twitch-HLS-AdBlock (extension)&lt;/li&gt; 
 &lt;li&gt;https://github.com/Wilkolicious/twitchAdSkip (UserScript + FrankerFaceZ)&lt;/li&gt; 
 &lt;li&gt;https://gist.github.com/simple-hacker/ddd81964b3e8bca47e0aead5ad19a707 (UserScript + FrankerFaceZ(optional))&lt;/li&gt; 
 &lt;li&gt;https://greasyfork.org/en/scripts/415412-twitch-refresh-on-advert/code (UserScript + FrankerFaceZ(optional))&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/bhplkbgoehhhddaoolmakpocnenplmhf&quot;&gt;Alternate Player for Twitch.tv&lt;/a&gt; - &lt;a href=&quot;https://robwu.nl/crxviewer/?crx=bhplkbgoehhhddaoolmakpocnenplmhf&amp;amp;qf=player.js&quot;&gt;code&lt;/a&gt; (extension)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://github.com/streamlink/streamlink (desktop application)&lt;/li&gt; 
 &lt;li&gt;https://github.com/nopbreak/TwitchMod (android app)&lt;/li&gt; 
 &lt;li&gt;https://twitchls.com/ (external site - purple screen may display every 10-15 mins)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reddit.com/r/Twitch/comments/kisdsy/i_did_a_little_test_regarding_ads_on_twitch_and/&quot;&gt;Use a VPN targeting a region without ads&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;NOTE/TODO&lt;/h2&gt; 
&lt;p&gt;NOTE: Many of these solutions could do with improvements.&lt;br&gt; TODO: Test midroll ads.&lt;br&gt; TODO: More testing in general.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mrdoob/three.js</title>
      <link>https://github.com/mrdoob/three.js</link>
      <description>&lt;p&gt;JavaScript 3D library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;three.js&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/three&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/three&quot; alt=&quot;NPM Package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://bundlephobia.com/result?p=three&quot;&gt;&lt;img src=&quot;https://badgen.net/bundlephobia/minzip/three&quot; alt=&quot;Build Size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmtrends.com/three&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dw/three&quot; alt=&quot;NPM Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/mrdoob/three.js/&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/alerts/github/mrdoob/three.js&quot; alt=&quot;Language Grade&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;JavaScript 3D library&lt;/h4&gt; 
&lt;p&gt;The aim of the project is to create an easy to use, lightweight, cross-browser, general purpose 3D library. The current builds only include a WebGL renderer but WebGPU (experimental), SVG and CSS3D renderers are also available in the examples.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://threejs.org/examples/&quot;&gt;Examples&lt;/a&gt; — &lt;a href=&quot;https://threejs.org/docs/&quot;&gt;Documentation&lt;/a&gt; — &lt;a href=&quot;https://github.com/mrdoob/three.js/wiki&quot;&gt;Wiki&lt;/a&gt; — &lt;a href=&quot;https://github.com/mrdoob/three.js/wiki/Migration-Guide&quot;&gt;Migrating&lt;/a&gt; — &lt;a href=&quot;http://stackoverflow.com/questions/tagged/three.js&quot;&gt;Questions&lt;/a&gt; — &lt;a href=&quot;https://discourse.threejs.org/&quot;&gt;Forum&lt;/a&gt; — &lt;a href=&quot;https://join.slack.com/t/threejs/shared_invite/enQtMzYxMzczODM2OTgxLTQ1YmY4YTQxOTFjNDAzYmQ4NjU2YzRhNzliY2RiNDEyYjU2MjhhODgyYWQ5Y2MyZTU3MWNkOGVmOGRhOTQzYTk&quot;&gt;Slack&lt;/a&gt; — &lt;a href=&quot;https://discordapp.com/invite/HF4UdyF&quot;&gt;Discord&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;This code creates a scene, a camera, and a geometric cube, and it adds the cube to the scene. It then creates a &lt;code&gt;WebGL&lt;/code&gt; renderer for the scene and camera, and it adds that viewport to the &lt;code&gt;document.body&lt;/code&gt; element. Finally, it animates the cube within the scene for the camera.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as THREE from &#39;./js/three.module.js&#39;;

let camera, scene, renderer;
let geometry, material, mesh;

init();

function init() {

	camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );
	camera.position.z = 1;

	scene = new THREE.Scene();

	geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );
	material = new THREE.MeshNormalMaterial();

	mesh = new THREE.Mesh( geometry, material );
	scene.add( mesh );

	renderer = new THREE.WebGLRenderer( { antialias: true } );
	renderer.setSize( window.innerWidth, window.innerHeight );
	renderer.setAnimationLoop( animation );
	document.body.appendChild( renderer.domElement );

}

function animation( time ) {

	mesh.rotation.x = time / 2000;
	mesh.rotation.y = time / 1000;

	renderer.render( scene, camera );

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If everything went well, you should see &lt;a href=&quot;https://jsfiddle.net/zdjankqw/&quot;&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Cloning this repository&lt;/h3&gt; 
&lt;p&gt;Cloning the repo with all its history results in a ~2 GB download. If you don&#39;t need the whole history you can use the &lt;code&gt;depth&lt;/code&gt; parameter to significantly reduce download size.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone --depth=1 https://github.com/mrdoob/three.js.git
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Change log&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/mrdoob/three.js/releases&quot;&gt;Releases&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>axios/axios</title>
      <link>https://github.com/axios/axios</link>
      <description>&lt;p&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;axios&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.org/package/axios&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/axios.svg?style=flat-square&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cdnjs.com/libraries/axios&quot;&gt;&lt;img src=&quot;https://img.shields.io/cdnjs/v/axios.svg?style=flat-square&quot; alt=&quot;CDNJS&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/axios/axios&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/axios/axios/master.svg?style=flat-square&quot; alt=&quot;build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitpod.io/#https://github.com/axios/axios&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&quot; alt=&quot;Gitpod Ready-to-Code&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/mzabriskie/axios&quot;&gt;&lt;img src=&quot;https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square&quot; alt=&quot;code coverage&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagephobia.now.sh/result?p=axios&quot;&gt;&lt;img src=&quot;https://packagephobia.now.sh/badge?p=axios&quot; alt=&quot;install size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://npm-stat.com/charts.html?package=axios&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/axios.svg?style=flat-square&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/mzabriskie/axios&quot;&gt;&lt;img src=&quot;https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square&quot; alt=&quot;gitter chat&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.codetriage.com/axios/axios&quot;&gt;&lt;img src=&quot;https://www.codetriage.com/axios/axios/badges/users.svg&quot; alt=&quot;code helpers&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;New axios docs website: &lt;a href=&quot;https://axios-http.com/&quot;&gt;click here&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#browser-support&quot;&gt;Browser Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#installing&quot;&gt;Installing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#axios-api&quot;&gt;Axios API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#request-method-aliases&quot;&gt;Request method aliases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#concurrency-deprecated&quot;&gt;Concurrency (Deprecated)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#creating-an-instance&quot;&gt;Creating an instance&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#instance-methods&quot;&gt;Instance methods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#request-config&quot;&gt;Request Config&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#response-schema&quot;&gt;Response Schema&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#config-defaults&quot;&gt;Config Defaults&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#global-axios-defaults&quot;&gt;Global axios defaults&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#custom-instance-defaults&quot;&gt;Custom instance defaults&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#config-order-of-precedence&quot;&gt;Config order of precedence&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#interceptors&quot;&gt;Interceptors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#handling-errors&quot;&gt;Handling Errors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#cancellation&quot;&gt;Cancellation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#using-applicationx-www-form-urlencoded-format&quot;&gt;Using application/x-www-form-urlencoded format&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#browser&quot;&gt;Browser&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#nodejs&quot;&gt;Node.js&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#query-string&quot;&gt;Query string&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#form-data&quot;&gt;Form data&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#semver&quot;&gt;Semver&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#promises&quot;&gt;Promises&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#typescript&quot;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#resources&quot;&gt;Resources&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequests&lt;/a&gt; from the browser&lt;/li&gt; 
 &lt;li&gt;Make &lt;a href=&quot;http://nodejs.org/api/http.html&quot;&gt;http&lt;/a&gt; requests from node.js&lt;/li&gt; 
 &lt;li&gt;Supports the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; API&lt;/li&gt; 
 &lt;li&gt;Intercept request and response&lt;/li&gt; 
 &lt;li&gt;Transform request and response data&lt;/li&gt; 
 &lt;li&gt;Cancel requests&lt;/li&gt; 
 &lt;li&gt;Automatic transforms for JSON data&lt;/li&gt; 
 &lt;li&gt;Client side support for protecting against &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;XSRF&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Browser Support&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png&quot; alt=&quot;Chrome&quot;&gt; | &lt;img src=&quot;https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png&quot; alt=&quot;Firefox&quot;&gt; | &lt;img src=&quot;https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png&quot; alt=&quot;Safari&quot;&gt; | &lt;img src=&quot;https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png&quot; alt=&quot;Opera&quot;&gt; | &lt;img src=&quot;https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png&quot; alt=&quot;Edge&quot;&gt; | &lt;img src=&quot;https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png&quot; alt=&quot;IE&quot;&gt; | --- | --- | --- | --- | --- | --- | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | 11 ✔ |&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://saucelabs.com/u/axios&quot;&gt;&lt;img src=&quot;https://saucelabs.com/open_sauce/build_matrix/axios.svg&quot; alt=&quot;Browser Matrix&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;Using npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install axios
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using bower:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower install axios
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using yarn:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ yarn add axios
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using jsDelivr CDN:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using unpkg CDN:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Example&lt;/h2&gt; 
&lt;h3&gt;note: CommonJS usage&lt;/h3&gt; 
&lt;p&gt;In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with &lt;code&gt;require()&lt;/code&gt; use the following approach:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const axios = require(&#39;axios&#39;).default;

// axios.&amp;lt;method&amp;gt; will now provide autocomplete and parameter typings
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Performing a &lt;code&gt;GET&lt;/code&gt; request&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const axios = require(&#39;axios&#39;);

// Make a request for a user with a given ID
axios.get(&#39;/user?ID=12345&#39;)
  .then(function (response) {
    // handle success
    console.log(response);
  })
  .catch(function (error) {
    // handle error
    console.log(error);
  })
  .then(function () {
    // always executed
  });

// Optionally the request above could also be done as
axios.get(&#39;/user&#39;, {
    params: {
      ID: 12345
    }
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  })
  .then(function () {
    // always executed
  });  

// Want to use async/await? Add the `async` keyword to your outer function/method.
async function getUser() {
  try {
    const response = await axios.get(&#39;/user?ID=12345&#39;);
    console.log(response);
  } catch (error) {
    console.error(error);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;async/await&lt;/code&gt; is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Performing a &lt;code&gt;POST&lt;/code&gt; request&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;axios.post(&#39;/user&#39;, {
    firstName: &#39;Fred&#39;,
    lastName: &#39;Flintstone&#39;
  })
  .then(function (response) {
    console.log(response);
  })
  .catch(function (error) {
    console.log(error);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Performing multiple concurrent requests&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function getUserAccount() {
  return axios.get(&#39;/user/12345&#39;);
}

function getUserPermissions() {
  return axios.get(&#39;/user/12345/permissions&#39;);
}

Promise.all([getUserAccount(), getUserPermissions()])
  .then(function (results) {
    const acct = results[0];
    const perm = results[1];
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;axios API&lt;/h2&gt; 
&lt;p&gt;Requests can be made by passing the relevant config to &lt;code&gt;axios&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;axios(config)&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Send a POST request
axios({
  method: &#39;post&#39;,
  url: &#39;/user/12345&#39;,
  data: {
    firstName: &#39;Fred&#39;,
    lastName: &#39;Flintstone&#39;
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// GET request for remote image in node.js
axios({
  method: &#39;get&#39;,
  url: &#39;http://bit.ly/2mTM3nY&#39;,
  responseType: &#39;stream&#39;
})
  .then(function (response) {
    response.data.pipe(fs.createWriteStream(&#39;ada_lovelace.jpg&#39;))
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;axios(url[, config])&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Send a GET request (default method)
axios(&#39;/user/12345&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Request method aliases&lt;/h3&gt; 
&lt;p&gt;For convenience aliases have been provided for all supported request methods.&lt;/p&gt; 
&lt;h5&gt;axios.request(config)&lt;/h5&gt; 
&lt;h5&gt;axios.get(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios.delete(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios.head(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios.options(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios.post(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios.put(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios.patch(url[, data[, config]])&lt;/h5&gt; 
&lt;h6&gt;NOTE&lt;/h6&gt; 
&lt;p&gt;When using the alias methods &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; properties don&#39;t need to be specified in config.&lt;/p&gt; 
&lt;h3&gt;Concurrency (Deprecated)&lt;/h3&gt; 
&lt;p&gt;Please use &lt;code&gt;Promise.all&lt;/code&gt; to replace the below functions.&lt;/p&gt; 
&lt;p&gt;Helper functions for dealing with concurrent requests.&lt;/p&gt; 
&lt;p&gt;axios.all(iterable) axios.spread(callback)&lt;/p&gt; 
&lt;h3&gt;Creating an instance&lt;/h3&gt; 
&lt;p&gt;You can create a new instance of axios with a custom config.&lt;/p&gt; 
&lt;h5&gt;axios.create([config])&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const instance = axios.create({
  baseURL: &#39;https://some-domain.com/api/&#39;,
  timeout: 1000,
  headers: {&#39;X-Custom-Header&#39;: &#39;foobar&#39;}
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Instance methods&lt;/h3&gt; 
&lt;p&gt;The available instance methods are listed below. The specified config will be merged with the instance config.&lt;/p&gt; 
&lt;h5&gt;axios#request(config)&lt;/h5&gt; 
&lt;h5&gt;axios#get(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios#delete(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios#head(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios#options(url[, config])&lt;/h5&gt; 
&lt;h5&gt;axios#post(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios#put(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios#patch(url[, data[, config]])&lt;/h5&gt; 
&lt;h5&gt;axios#getUri([config])&lt;/h5&gt; 
&lt;h2&gt;Request Config&lt;/h2&gt; 
&lt;p&gt;These are the available config options for making requests. Only the &lt;code&gt;url&lt;/code&gt; is required. Requests will default to &lt;code&gt;GET&lt;/code&gt; if &lt;code&gt;method&lt;/code&gt; is not specified.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  // `url` is the server URL that will be used for the request
  url: &#39;/user&#39;,

  // `method` is the request method to be used when making the request
  method: &#39;get&#39;, // default

  // `baseURL` will be prepended to `url` unless `url` is absolute.
  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs
  // to methods of that instance.
  baseURL: &#39;https://some-domain.com/api/&#39;,

  // `transformRequest` allows changes to the request data before it is sent to the server
  // This is only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, &#39;PATCH&#39; and &#39;DELETE&#39;
  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,
  // FormData or Stream
  // You may modify the headers object.
  transformRequest: [function (data, headers) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `transformResponse` allows changes to the response data to be made before
  // it is passed to then/catch
  transformResponse: [function (data) {
    // Do whatever you want to transform the data

    return data;
  }],

  // `headers` are custom headers to be sent
  headers: {&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;},

  // `params` are the URL parameters to be sent with the request
  // Must be a plain object or a URLSearchParams object
  params: {
    ID: 12345
  },

  // `paramsSerializer` is an optional function in charge of serializing `params`
  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)
  paramsSerializer: function (params) {
    return Qs.stringify(params, {arrayFormat: &#39;brackets&#39;})
  },

  // `data` is the data to be sent as the request body
  // Only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, &#39;DELETE , and &#39;PATCH&#39;
  // When no `transformRequest` is set, must be of one of the following types:
  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
  // - Browser only: FormData, File, Blob
  // - Node only: Stream, Buffer
  data: {
    firstName: &#39;Fred&#39;
  },
  
  // syntax alternative to send data into the body
  // method post
  // only the value is sent, not the key
  data: &#39;Country=Brasil&amp;amp;City=Belo Horizonte&#39;,

  // `timeout` specifies the number of milliseconds before the request times out.
  // If the request takes longer than `timeout`, the request will be aborted.
  timeout: 1000, // default is `0` (no timeout)

  // `withCredentials` indicates whether or not cross-site Access-Control requests
  // should be made using credentials
  withCredentials: false, // default

  // `adapter` allows custom handling of requests which makes testing easier.
  // Return a promise and supply a valid response (see lib/adapters/README.md).
  adapter: function (config) {
    /* ... */
  },

  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.
  // This will set an `Authorization` header, overwriting any existing
  // `Authorization` custom headers you have set using `headers`.
  // Please note that only HTTP Basic auth is configurable through this parameter.
  // For Bearer tokens and such, use `Authorization` custom headers instead.
  auth: {
    username: &#39;janedoe&#39;,
    password: &#39;s00pers3cret&#39;
  },

  // `responseType` indicates the type of data that the server will respond with
  // options are: &#39;arraybuffer&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;
  //   browser only: &#39;blob&#39;
  responseType: &#39;json&#39;, // default

  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)
  // Note: Ignored for `responseType` of &#39;stream&#39; or client-side requests
  responseEncoding: &#39;utf8&#39;, // default

  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token
  xsrfCookieName: &#39;XSRF-TOKEN&#39;, // default

  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value
  xsrfHeaderName: &#39;X-XSRF-TOKEN&#39;, // default

  // `onUploadProgress` allows handling of progress events for uploads
  // browser only
  onUploadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
  },

  // `onDownloadProgress` allows handling of progress events for downloads
  // browser only
  onDownloadProgress: function (progressEvent) {
    // Do whatever you want with the native progress event
  },

  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js
  maxContentLength: 2000,

  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed
  maxBodyLength: 2000,

  // `validateStatus` defines whether to resolve or reject the promise for a given
  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`
  // or `undefined`), the promise will be resolved; otherwise, the promise will be
  // rejected.
  validateStatus: function (status) {
    return status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300; // default
  },

  // `maxRedirects` defines the maximum number of redirects to follow in node.js.
  // If set to 0, no redirects will be followed.
  maxRedirects: 5, // default

  // `socketPath` defines a UNIX Socket to be used in node.js.
  // e.g. &#39;/var/run/docker.sock&#39; to send requests to the docker daemon.
  // Only either `socketPath` or `proxy` can be specified.
  // If both are specified, `socketPath` is used.
  socketPath: null, // default

  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http
  // and https requests, respectively, in node.js. This allows options to be added like
  // `keepAlive` that are not enabled by default.
  httpAgent: new http.Agent({ keepAlive: true }),
  httpsAgent: new https.Agent({ keepAlive: true }),

  // `proxy` defines the hostname, port, and protocol of the proxy server.
  // You can also define your proxy using the conventional `http_proxy` and
  // `https_proxy` environment variables. If you are using environment variables
  // for your proxy configuration, you can also define a `no_proxy` environment
  // variable as a comma-separated list of domains that should not be proxied.
  // Use `false` to disable proxies, ignoring environment variables.
  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and
  // supplies credentials.
  // This will set an `Proxy-Authorization` header, overwriting any existing
  // `Proxy-Authorization` custom headers you have set using `headers`.
  // If the proxy server uses HTTPS, then you must set the protocol to `https`. 
  proxy: {
    protocol: &#39;https&#39;,
    host: &#39;127.0.0.1&#39;,
    port: 9000,
    auth: {
      username: &#39;mikeymike&#39;,
      password: &#39;rapunz3l&#39;
    }
  },

  // `cancelToken` specifies a cancel token that can be used to cancel the request
  // (see Cancellation section below for details)
  cancelToken: new CancelToken(function (cancel) {
  }),

  // `decompress` indicates whether or not the response body should be decompressed 
  // automatically. If set to `true` will also remove the &#39;content-encoding&#39; header 
  // from the responses objects of all decompressed responses
  // - Node only (XHR cannot turn off decompression)
  decompress: true // default

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Response Schema&lt;/h2&gt; 
&lt;p&gt;The response for a request contains the following information.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  // `data` is the response that was provided by the server
  data: {},

  // `status` is the HTTP status code from the server response
  status: 200,

  // `statusText` is the HTTP status message from the server response
  statusText: &#39;OK&#39;,

  // `headers` the HTTP headers that the server responded with
  // All header names are lower cased and can be accessed using the bracket notation.
  // Example: `response.headers[&#39;content-type&#39;]`
  headers: {},

  // `config` is the config that was provided to `axios` for the request
  config: {},

  // `request` is the request that generated this response
  // It is the last ClientRequest instance in node.js (in redirects)
  // and an XMLHttpRequest instance in the browser
  request: {}
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using &lt;code&gt;then&lt;/code&gt;, you will receive the response as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;axios.get(&#39;/user/12345&#39;)
  .then(function (response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using &lt;code&gt;catch&lt;/code&gt;, or passing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&quot;&gt;rejection callback&lt;/a&gt; as second parameter of &lt;code&gt;then&lt;/code&gt;, the response will be available through the &lt;code&gt;error&lt;/code&gt; object as explained in the &lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/#handling-errors&quot;&gt;Handling Errors&lt;/a&gt; section.&lt;/p&gt; 
&lt;h2&gt;Config Defaults&lt;/h2&gt; 
&lt;p&gt;You can specify config defaults that will be applied to every request.&lt;/p&gt; 
&lt;h3&gt;Global axios defaults&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;axios.defaults.baseURL = &#39;https://api.example.com&#39;;

// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.
// See below for an example using Custom instance defaults instead.
axios.defaults.headers.common[&#39;Authorization&#39;] = AUTH_TOKEN;

axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencoded&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Custom instance defaults&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Set config defaults when creating the instance
const instance = axios.create({
  baseURL: &#39;https://api.example.com&#39;
});

// Alter defaults after instance has been created
instance.defaults.headers.common[&#39;Authorization&#39;] = AUTH_TOKEN;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Config order of precedence&lt;/h3&gt; 
&lt;p&gt;Config will be merged with an order of precedence. The order is library defaults found in &lt;a href=&quot;https://github.com/axios/axios/blob/master/lib/defaults.js#L28&quot;&gt;lib/defaults.js&lt;/a&gt;, then &lt;code&gt;defaults&lt;/code&gt; property of the instance, and finally &lt;code&gt;config&lt;/code&gt; argument for the request. The latter will take precedence over the former. Here&#39;s an example.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Create an instance using the config defaults provided by the library
// At this point the timeout config value is `0` as is the default for the library
const instance = axios.create();

// Override timeout default for the library
// Now all requests using this instance will wait 2.5 seconds before timing out
instance.defaults.timeout = 2500;

// Override timeout for this request as it&#39;s known to take a long time
instance.get(&#39;/longRequest&#39;, {
  timeout: 5000
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Interceptors&lt;/h2&gt; 
&lt;p&gt;You can intercept requests or responses before they are handled by &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Add a request interceptor
axios.interceptors.request.use(function (config) {
    // Do something before request is sent
    return config;
  }, function (error) {
    // Do something with request error
    return Promise.reject(error);
  });

// Add a response interceptor
axios.interceptors.response.use(function (response) {
    // Any status code that lie within the range of 2xx cause this function to trigger
    // Do something with response data
    return response;
  }, function (error) {
    // Any status codes that falls outside the range of 2xx cause this function to trigger
    // Do something with response error
    return Promise.reject(error);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you need to remove an interceptor later you can.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const myInterceptor = axios.interceptors.request.use(function () {/*...*/});
axios.interceptors.request.eject(myInterceptor);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can add interceptors to a custom instance of axios.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const instance = axios.create();
instance.interceptors.request.use(function () {/*...*/});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay in the execution of your axios request when the main thread is blocked (a promise is created under the hood for the interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag to the options object that will tell axios to run the code synchronously and avoid any delays in request execution.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;axios.interceptors.request.use(function (config) {
  config.headers.test = &#39;I am only a header!&#39;;
  return config;
}, null, { synchronous: true });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to execute a particular interceptor based on a runtime check, you can add a &lt;code&gt;runWhen&lt;/code&gt; function to the options object. The interceptor will not be executed &lt;strong&gt;if and only if&lt;/strong&gt; the return of &lt;code&gt;runWhen&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The function will be called with the config object (don&#39;t forget that you can bind your own arguments to it as well.) This can be handy when you have an asynchronous request interceptor that only needs to run at certain times.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function onGetCall(config) {
  return config.method === &#39;get&#39;;
}
axios.interceptors.request.use(function (config) {
  config.headers.test = &#39;special get headers&#39;;
  return config;
}, null, { runWhen: onGetCall });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Handling Errors&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;axios.get(&#39;/user/12345&#39;)
  .catch(function (error) {
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log(&#39;Error&#39;, error.message);
    }
    console.log(error.config);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using the &lt;code&gt;validateStatus&lt;/code&gt; config option, you can define HTTP code(s) that should throw an error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;axios.get(&#39;/user/12345&#39;, {
  validateStatus: function (status) {
    return status &amp;lt; 500; // Resolve only if the status code is less than 500
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using &lt;code&gt;toJSON&lt;/code&gt; you get an object with more information about the HTTP error.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;axios.get(&#39;/user/12345&#39;)
  .catch(function (error) {
    console.log(error.toJSON());
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Cancellation&lt;/h2&gt; 
&lt;p&gt;You can cancel a request using a &lt;em&gt;cancel token&lt;/em&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The axios cancel token API is based on the withdrawn &lt;a href=&quot;https://github.com/tc39/proposal-cancelable-promises&quot;&gt;cancelable promises proposal&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;You can create a cancel token using the &lt;code&gt;CancelToken.source&lt;/code&gt; factory as shown below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const CancelToken = axios.CancelToken;
const source = CancelToken.source();

axios.get(&#39;/user/12345&#39;, {
  cancelToken: source.token
}).catch(function (thrown) {
  if (axios.isCancel(thrown)) {
    console.log(&#39;Request canceled&#39;, thrown.message);
  } else {
    // handle error
  }
});

axios.post(&#39;/user/12345&#39;, {
  name: &#39;new name&#39;
}, {
  cancelToken: source.token
})

// cancel the request (the message parameter is optional)
source.cancel(&#39;Operation canceled by the user.&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also create a cancel token by passing an executor function to the &lt;code&gt;CancelToken&lt;/code&gt; constructor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const CancelToken = axios.CancelToken;
let cancel;

axios.get(&#39;/user/12345&#39;, {
  cancelToken: new CancelToken(function executor(c) {
    // An executor function receives a cancel function as a parameter
    cancel = c;
  })
});

// cancel the request
cancel();
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: you can cancel several requests with the same cancel token.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Using application/x-www-form-urlencoded format&lt;/h2&gt; 
&lt;p&gt;By default, axios serializes JavaScript objects to &lt;code&gt;JSON&lt;/code&gt;. To send data in the &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format instead, you can use one of the following options.&lt;/p&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;p&gt;In a browser, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; API as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const params = new URLSearchParams();
params.append(&#39;param1&#39;, &#39;value1&#39;);
params.append(&#39;param2&#39;, &#39;value2&#39;);
axios.post(&#39;/foo&#39;, params);
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that &lt;code&gt;URLSearchParams&lt;/code&gt; is not supported by all browsers (see &lt;a href=&quot;http://www.caniuse.com/#feat=urlsearchparams&quot;&gt;caniuse.com&lt;/a&gt;), but there is a &lt;a href=&quot;https://github.com/WebReflection/url-search-params&quot;&gt;polyfill&lt;/a&gt; available (make sure to polyfill the global environment).&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Alternatively, you can encode data using the &lt;a href=&quot;https://github.com/ljharb/qs&quot;&gt;&lt;code&gt;qs&lt;/code&gt;&lt;/a&gt; library:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const qs = require(&#39;qs&#39;);
axios.post(&#39;/foo&#39;, qs.stringify({ &#39;bar&#39;: 123 }));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or in another way (ES6),&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import qs from &#39;qs&#39;;
const data = { &#39;bar&#39;: 123 };
const options = {
  method: &#39;POST&#39;,
  headers: { &#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39; },
  data: qs.stringify(data),
  url,
};
axios(options);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Node.js&lt;/h3&gt; 
&lt;h4&gt;Query string&lt;/h4&gt; 
&lt;p&gt;In node.js, you can use the &lt;a href=&quot;https://nodejs.org/api/querystring.html&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const querystring = require(&#39;querystring&#39;);
axios.post(&#39;http://something.com/&#39;, querystring.stringify({ foo: &#39;bar&#39; }));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or &lt;a href=&quot;https://nodejs.org/api/url.html#url_class_urlsearchparams&quot;&gt;&#39;URLSearchParams&#39;&lt;/a&gt; from &lt;a href=&quot;https://nodejs.org/api/url.html&quot;&gt;&#39;url module&#39;&lt;/a&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const url = require(&#39;url&#39;);
const params = new url.URLSearchParams({ foo: &#39;bar&#39; });
axios.post(&#39;http://something.com/&#39;, params.toString());
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use the &lt;a href=&quot;https://github.com/ljharb/qs&quot;&gt;&lt;code&gt;qs&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt; 
&lt;h6&gt;NOTE&lt;/h6&gt; 
&lt;p&gt;The &lt;code&gt;qs&lt;/code&gt; library is preferable if you need to stringify nested objects, as the &lt;code&gt;querystring&lt;/code&gt; method has known issues with that use case (https://github.com/nodejs/node-v0.x-archive/issues/1665).&lt;/p&gt; 
&lt;h4&gt;Form data&lt;/h4&gt; 
&lt;p&gt;In node.js, you can use the &lt;a href=&quot;https://github.com/form-data/form-data&quot;&gt;&lt;code&gt;form-data&lt;/code&gt;&lt;/a&gt; library as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const FormData = require(&#39;form-data&#39;);
 
const form = new FormData();
form.append(&#39;my_field&#39;, &#39;my value&#39;);
form.append(&#39;my_buffer&#39;, new Buffer(10));
form.append(&#39;my_file&#39;, fs.createReadStream(&#39;/foo/bar.jpg&#39;));

axios.post(&#39;https://example.com&#39;, form, { headers: form.getHeaders() })
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, use an interceptor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;axios.interceptors.request.use(config =&amp;gt; {
  if (config.data instanceof FormData) {
    Object.assign(config.headers, config.data.getHeaders());
  }
  return config;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Semver&lt;/h2&gt; 
&lt;p&gt;Until axios reaches a &lt;code&gt;1.0&lt;/code&gt; release, breaking changes will be released with a new minor version. For example &lt;code&gt;0.5.1&lt;/code&gt;, and &lt;code&gt;0.5.4&lt;/code&gt; will have the same API, but &lt;code&gt;0.6.0&lt;/code&gt; will have breaking changes.&lt;/p&gt; 
&lt;h2&gt;Promises&lt;/h2&gt; 
&lt;p&gt;axios depends on a native ES6 Promise implementation to be &lt;a href=&quot;http://caniuse.com/promises&quot;&gt;supported&lt;/a&gt;. If your environment doesn&#39;t support ES6 Promises, you can &lt;a href=&quot;https://github.com/jakearchibald/es6-promise&quot;&gt;polyfill&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;TypeScript&lt;/h2&gt; 
&lt;p&gt;axios includes &lt;a href=&quot;http://typescriptlang.org&quot;&gt;TypeScript&lt;/a&gt; definitions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;import axios from &#39;axios&#39;;
axios.get(&#39;/user?ID=12345&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Online one-click setup&lt;/h2&gt; 
&lt;p&gt;You can use Gitpod an online IDE(which is free for Open Source) for contributing or running the examples online.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/axios/axios/blob/master/examples/server.js&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/axios/axios/blob/master/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/axios/axios/blob/master/UPGRADE_GUIDE.md&quot;&gt;Upgrade Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/axios/axios/blob/master/ECOSYSTEM.md&quot;&gt;Ecosystem&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/axios/axios/blob/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/axios/axios/blob/master/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;p&gt;axios is heavily inspired by the &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/$http&quot;&gt;$http service&lt;/a&gt; provided in &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt;. Ultimately axios is an effort to provide a standalone &lt;code&gt;$http&lt;/code&gt;-like service for use outside of Angular.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/axios/axios/master/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yargs/y18n</title>
      <link>https://github.com/yargs/y18n</link>
      <description>&lt;p&gt;📒 the bare-bones i18n library used by yargs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;y18n&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/y18n&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/y18n.svg&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/feross/standard&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/code%20style-standard-brightgreen.svg&quot; alt=&quot;js-standard-style&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://conventionalcommits.org&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg&quot; alt=&quot;Conventional Commits&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The bare-bones internationalization library used by yargs.&lt;/p&gt; 
&lt;p&gt;Inspired by &lt;a href=&quot;https://www.npmjs.com/package/i18n&quot;&gt;i18n&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;simple string translation:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const __ = require(&#39;y18n&#39;)().__;

console.log(__(&#39;my awesome string %s&#39;, &#39;foo&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;output:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;my awesome string foo&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;using tagged template literals&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const __ = require(&#39;y18n&#39;)().__;

const str = &#39;foo&#39;;

console.log(__`my awesome string ${str}`);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;output:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;my awesome string foo&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;pluralization support:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const __n = require(&#39;y18n&#39;)().__n;

console.log(__n(&#39;one fish %s&#39;, &#39;%d fishes %s&#39;, 2, &#39;foo&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;output:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;2 fishes foo&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Deno Example&lt;/h2&gt; 
&lt;p&gt;As of &lt;code&gt;v5&lt;/code&gt; &lt;code&gt;y18n&lt;/code&gt; supports &lt;a href=&quot;https://github.com/denoland/deno&quot;&gt;Deno&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;import y18n from &quot;https://deno.land/x/y18n/deno.ts&quot;;

const __ = y18n({
  locale: &#39;pirate&#39;,
  directory: &#39;./test/locales&#39;
}).__

console.info(__`Hi, ${&#39;Ben&#39;} ${&#39;Coe&#39;}!`)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You will need to run with &lt;code&gt;--allow-read&lt;/code&gt; to load alternative locales.&lt;/p&gt; 
&lt;h2&gt;JSON Language Files&lt;/h2&gt; 
&lt;p&gt;The JSON language files should be stored in a &lt;code&gt;./locales&lt;/code&gt; folder. File names correspond to locales, e.g., &lt;code&gt;en.json&lt;/code&gt;, &lt;code&gt;pirate.json&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;When strings are observed for the first time they will be added to the JSON file corresponding to the current locale.&lt;/p&gt; 
&lt;h2&gt;Methods&lt;/h2&gt; 
&lt;h3&gt;require(&#39;y18n&#39;)(config)&lt;/h3&gt; 
&lt;p&gt;Create an instance of y18n with the config provided, options include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;directory&lt;/code&gt;: the locale directory, default &lt;code&gt;./locales&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;updateFiles&lt;/code&gt;: should newly observed strings be updated in file, default &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;locale&lt;/code&gt;: what locale should be used.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;fallbackToLanguage&lt;/code&gt;: should fallback to a language-only file (e.g. &lt;code&gt;en.json&lt;/code&gt;) be allowed if a file matching the locale does not exist (e.g. &lt;code&gt;en_US.json&lt;/code&gt;), default &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;y18n.__(str, arg, arg, arg)&lt;/h3&gt; 
&lt;p&gt;Print a localized string, &lt;code&gt;%s&lt;/code&gt; will be replaced with &lt;code&gt;arg&lt;/code&gt;s.&lt;/p&gt; 
&lt;p&gt;This function can also be used as a tag for a template literal. You can use it like this: 
 &lt;!-- raw HTML omitted --&gt;__`hello ${&#39;world&#39;}`
 &lt;!-- raw HTML omitted --&gt;. This will be equivalent to &lt;code&gt;__(&#39;hello %s&#39;, &#39;world&#39;)&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;y18n.__n(singularString, pluralString, count, arg, arg, arg)&lt;/h3&gt; 
&lt;p&gt;Print a localized string with appropriate pluralization. If &lt;code&gt;%d&lt;/code&gt; is provided in the string, the &lt;code&gt;count&lt;/code&gt; will replace this placeholder.&lt;/p&gt; 
&lt;h3&gt;y18n.setLocale(str)&lt;/h3&gt; 
&lt;p&gt;Set the current locale being used.&lt;/p&gt; 
&lt;h3&gt;y18n.getLocale()&lt;/h3&gt; 
&lt;p&gt;What locale is currently being used?&lt;/p&gt; 
&lt;h3&gt;y18n.updateLocale(obj)&lt;/h3&gt; 
&lt;p&gt;Update the current locale with the key value pairs in &lt;code&gt;obj&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Node.js Versions&lt;/h2&gt; 
&lt;p&gt;Libraries in this ecosystem make a best effort to track &lt;a href=&quot;https://nodejs.org/en/about/releases/&quot;&gt;Node.js&#39; release schedule&lt;/a&gt;. Here&#39;s &lt;a href=&quot;https://medium.com/the-node-js-collection/maintainers-should-consider-following-node-js-release-schedule-ab08ed4de71a&quot;&gt;a post on why we think this is important&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;ISC&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>zenorocha/clipboard.js</title>
      <link>https://github.com/zenorocha/clipboard.js</link>
      <description>&lt;p&gt;✂️ Modern copy to clipboard. No Flash. Just 3kb gzipped 📋&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clipboard.js&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/zenorocha/clipboard.js/workflows/build/badge.svg&quot; alt=&quot;Build Status&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/killing-flash-brightgreen.svg?style=flat&quot; alt=&quot;Killing Flash&quot;&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Modern copy to clipboard. No Flash. Just 3kb gzipped.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Why&lt;/h2&gt; 
&lt;p&gt;Copying text to the clipboard shouldn&#39;t be hard. It shouldn&#39;t require dozens of steps to configure or hundreds of KBs to load. But most of all, it shouldn&#39;t depend on Flash or any bloated framework.&lt;/p&gt; 
&lt;p&gt;That&#39;s why clipboard.js exists.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;You can get it on npm.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install clipboard --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or if you&#39;re not into package management, just &lt;a href=&quot;https://github.com/zenorocha/clipboard.js/archive/master.zip&quot;&gt;download a ZIP&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;First, include the script located on the &lt;code&gt;dist&lt;/code&gt; folder or load it from &lt;a href=&quot;https://github.com/zenorocha/clipboard.js/wiki/CDN-Providers&quot;&gt;a third-party CDN provider&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;dist/clipboard.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, you need to instantiate it by &lt;a href=&quot;https://github.com/zenorocha/clipboard.js/blob/master/demo/constructor-selector.html#L18&quot;&gt;passing a DOM selector&lt;/a&gt;, &lt;a href=&quot;https://github.com/zenorocha/clipboard.js/blob/master/demo/constructor-node.html#L16-L17&quot;&gt;HTML element&lt;/a&gt;, or &lt;a href=&quot;https://github.com/zenorocha/clipboard.js/blob/master/demo/constructor-nodelist.html#L18-L19&quot;&gt;list of HTML elements&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;new ClipboardJS(&#39;.btn&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Internally, we need to fetch all elements that matches with your selector and attach event listeners for each one. But guess what? If you have hundreds of matches, this operation can consume a lot of memory.&lt;/p&gt; 
&lt;p&gt;For this reason we use &lt;a href=&quot;https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation&quot;&gt;event delegation&lt;/a&gt; which replaces multiple event listeners with just a single listener. After all, &lt;a href=&quot;https://twitter.com/hashtag/perfmatters&quot;&gt;#perfmatters&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;p&gt;We&#39;re living a &lt;em&gt;declarative renaissance&lt;/em&gt;, that&#39;s why we decided to take advantage of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes&quot;&gt;HTML5 data attributes&lt;/a&gt; for better usability.&lt;/p&gt; 
&lt;h3&gt;Copy text from another element&lt;/h3&gt; 
&lt;p&gt;A pretty common use case is to copy content from another element. You can do that by adding a &lt;code&gt;data-clipboard-target&lt;/code&gt; attribute in your trigger element.&lt;/p&gt; 
&lt;p&gt;The value you include on this attribute needs to match another&#39;s element selector.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Target --&amp;gt;
&amp;lt;input id=&quot;foo&quot; value=&quot;https://github.com/zenorocha/clipboard.js.git&quot; /&amp;gt;

&amp;lt;!-- Trigger --&amp;gt;
&amp;lt;button class=&quot;btn&quot; data-clipboard-target=&quot;#foo&quot;&amp;gt;
  &amp;lt;img src=&quot;assets/clippy.svg&quot; alt=&quot;Copy to clipboard&quot; /&amp;gt;
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Cut text from another element&lt;/h3&gt; 
&lt;p&gt;Additionally, you can define a &lt;code&gt;data-clipboard-action&lt;/code&gt; attribute to specify if you want to either &lt;code&gt;copy&lt;/code&gt; or &lt;code&gt;cut&lt;/code&gt; content.&lt;/p&gt; 
&lt;p&gt;If you omit this attribute, &lt;code&gt;copy&lt;/code&gt; will be used by default.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Target --&amp;gt;
&amp;lt;textarea id=&quot;bar&quot;&amp;gt;Mussum ipsum cacilds...&amp;lt;/textarea&amp;gt;

&amp;lt;!-- Trigger --&amp;gt;
&amp;lt;button class=&quot;btn&quot; data-clipboard-action=&quot;cut&quot; data-clipboard-target=&quot;#bar&quot;&amp;gt;
  Cut to clipboard
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As you may expect, the &lt;code&gt;cut&lt;/code&gt; action only works on &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; elements.&lt;/p&gt; 
&lt;h3&gt;Copy text from attribute&lt;/h3&gt; 
&lt;p&gt;Truth is, you don&#39;t even need another element to copy its content from. You can just include a &lt;code&gt;data-clipboard-text&lt;/code&gt; attribute in your trigger element.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Trigger --&amp;gt;
&amp;lt;button
  class=&quot;btn&quot;
  data-clipboard-text=&quot;Just because you can doesn&#39;t mean you should — clipboard.js&quot;
&amp;gt;
  Copy to clipboard
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Events&lt;/h2&gt; 
&lt;p&gt;There are cases where you&#39;d like to show some user feedback or capture what has been selected after a copy/cut operation.&lt;/p&gt; 
&lt;p&gt;That&#39;s why we fire custom events such as &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; for you to listen and implement your custom logic.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var clipboard = new ClipboardJS(&#39;.btn&#39;);

clipboard.on(&#39;success&#39;, function (e) {
  console.info(&#39;Action:&#39;, e.action);
  console.info(&#39;Text:&#39;, e.text);
  console.info(&#39;Trigger:&#39;, e.trigger);

  e.clearSelection();
});

clipboard.on(&#39;error&#39;, function (e) {
  console.error(&#39;Action:&#39;, e.action);
  console.error(&#39;Trigger:&#39;, e.trigger);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a live demonstration, go to this &lt;a href=&quot;https://clipboardjs.com/&quot;&gt;site&lt;/a&gt; and open your console.&lt;/p&gt; 
&lt;h2&gt;Tooltips&lt;/h2&gt; 
&lt;p&gt;Each application has different design needs, that&#39;s why clipboard.js does not include any CSS or built-in tooltip solution.&lt;/p&gt; 
&lt;p&gt;The tooltips you see on the &lt;a href=&quot;https://clipboardjs.com/&quot;&gt;demo site&lt;/a&gt; were built using &lt;a href=&quot;https://primer.style/css/components/tooltips&quot;&gt;GitHub&#39;s Primer&lt;/a&gt;. You may want to check that out if you&#39;re looking for a similar look and feel.&lt;/p&gt; 
&lt;h2&gt;Advanced Options&lt;/h2&gt; 
&lt;p&gt;If you don&#39;t want to modify your HTML, there&#39;s a pretty handy imperative API for you to use. All you need to do is declare a function, do your thing, and return a value.&lt;/p&gt; 
&lt;p&gt;For instance, if you want to dynamically set a &lt;code&gt;target&lt;/code&gt;, you&#39;ll need to return a Node.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;new ClipboardJS(&#39;.btn&#39;, {
  target: function (trigger) {
    return trigger.nextElementSibling;
  },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to dynamically set a &lt;code&gt;text&lt;/code&gt;, you&#39;ll return a String.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;new ClipboardJS(&#39;.btn&#39;, {
  text: function (trigger) {
    return trigger.getAttribute(&#39;aria-label&#39;);
  },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For use in Bootstrap Modals or with any other library that changes the focus you&#39;ll want to set the focused element as the &lt;code&gt;container&lt;/code&gt; value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;new ClipboardJS(&#39;.btn&#39;, {
  container: document.getElementById(&#39;modal&#39;),
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also, if you are working with single page apps, you may want to manage the lifecycle of the DOM more precisely. Here&#39;s how you clean up the events and objects that we create.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var clipboard = new ClipboardJS(&#39;.btn&#39;);
clipboard.destroy();
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Browser Support&lt;/h2&gt; 
&lt;p&gt;This library relies on both &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Selection&quot;&gt;Selection&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand&quot;&gt;execCommand&lt;/a&gt; APIs. The first one is &lt;a href=&quot;https://caniuse.com/#search=selection&quot;&gt;supported by all browsers&lt;/a&gt; while the second one is supported in the following browsers.&lt;/p&gt; 
&lt;p&gt;| 
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt; | | :-------------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------: | | 42+ ✔ | 12+ ✔ | 41+ ✔ | 9+ ✔ | 29+ ✔ | 10+ ✔ |&lt;/p&gt; 
&lt;p&gt;The good news is that clipboard.js gracefully degrades if you need to support older browsers. All you have to do is show a tooltip saying &lt;code&gt;Copied!&lt;/code&gt; when &lt;code&gt;success&lt;/code&gt; event is called and &lt;code&gt;Press Ctrl+C to copy&lt;/code&gt; when &lt;code&gt;error&lt;/code&gt; event is called because the text is already selected.&lt;/p&gt; 
&lt;p&gt;You can also check if clipboard.js is supported or not by running &lt;code&gt;ClipboardJS.isSupported()&lt;/code&gt;, that way you can hide copy/cut buttons from the UI.&lt;/p&gt; 
&lt;h2&gt;Bonus&lt;/h2&gt; 
&lt;p&gt;A browser extension that adds a &quot;copy to clipboard&quot; button to every code block on &lt;em&gt;GitHub, MDN, Gist, StackOverflow, StackExchange, npm, and even Medium.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Install for &lt;a href=&quot;https://chrome.google.com/webstore/detail/codecopy/fkbfebkcoelajmhanocgppanfoojcdmg&quot;&gt;Chrome&lt;/a&gt; and &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/codecopy/&quot;&gt;Firefox&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://zenorocha.mit-license.org/&quot;&gt;MIT License&lt;/a&gt; © Zeno Rocha&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>discordjs/discord.js</title>
      <link>https://github.com/discordjs/discord.js</link>
      <description>&lt;p&gt;A powerful JavaScript library for interacting with the Discord API&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#audio-engines&quot;&gt;Audio engines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#optional-packages&quot;&gt;Optional packages&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#example-usage&quot;&gt;Example Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#links&quot;&gt;Links&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#help&quot;&gt;Help&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;discord.js is a powerful &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; module that allows you to easily interact with the &lt;a href=&quot;https://discord.com/developers/docs/intro&quot;&gt;Discord API&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Object-oriented&lt;/li&gt; 
 &lt;li&gt;Predictable abstractions&lt;/li&gt; 
 &lt;li&gt;Performant&lt;/li&gt; 
 &lt;li&gt;100% coverage of the Discord API&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Node.js 14.0.0 or newer is required.&lt;/strong&gt;&lt;br&gt; Ignore any warnings about unmet peer dependencies, as they&#39;re all optional.&lt;/p&gt; 
&lt;p&gt;Without voice support: &lt;code&gt;npm install discord.js&lt;/code&gt;&lt;br&gt; With voice support (&lt;a href=&quot;https://www.npmjs.com/package/@discordjs/opus&quot;&gt;@discordjs/opus&lt;/a&gt;): &lt;code&gt;npm install discord.js @discordjs/opus&lt;/code&gt;&lt;br&gt; With voice support (&lt;a href=&quot;https://www.npmjs.com/package/opusscript&quot;&gt;opusscript&lt;/a&gt;): &lt;code&gt;npm install discord.js opusscript&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Audio engines&lt;/h3&gt; 
&lt;p&gt;The preferred audio engine is @discordjs/opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose @discordjs/opus. Using opusscript is only recommended for development environments where @discordjs/opus is tough to get working. For production bots, using @discordjs/opus should be considered a necessity, especially if they&#39;re going to be running on multiple servers.&lt;/p&gt; 
&lt;h3&gt;Optional packages&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/zlib-sync&quot;&gt;zlib-sync&lt;/a&gt; for WebSocket data compression and inflation (&lt;code&gt;npm install zlib-sync&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/discord/erlpack&quot;&gt;erlpack&lt;/a&gt; for significantly faster WebSocket data (de)serialisation (&lt;code&gt;npm install discord/erlpack&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;One of the following packages can be installed for faster voice packet encryption and decryption: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/sodium&quot;&gt;sodium&lt;/a&gt; (&lt;code&gt;npm install sodium&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/libsodium-wrappers&quot;&gt;libsodium.js&lt;/a&gt; (&lt;code&gt;npm install libsodium-wrappers&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/bufferutil&quot;&gt;bufferutil&lt;/a&gt; for a much faster WebSocket connection (&lt;code&gt;npm install bufferutil&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/utf-8-validate&quot;&gt;utf-8-validate&lt;/a&gt; in combination with &lt;code&gt;bufferutil&lt;/code&gt; for much faster WebSocket processing (&lt;code&gt;npm install utf-8-validate&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { Client, Intents } = require(&#39;discord.js&#39;);
const client = new Client({ intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] });

client.on(&#39;ready&#39;, () =&amp;gt; {
  console.log(`Logged in as ${client.user.tag}!`);
});

client.on(&#39;message&#39;, msg =&amp;gt; {
  if (msg.content === &#39;ping&#39;) {
    msg.channel.send(&#39;pong&#39;);
  }
});

client.login(&#39;token&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.js.org/&quot;&gt;Website&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/website&quot;&gt;source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.js.org/#/docs/main/master/general/welcome&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discordjs.guide/&quot;&gt;Guide&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/guide&quot;&gt;source&lt;/a&gt;) - this is still for stable&lt;br&gt; See also the &lt;a href=&quot;https://discordjs.guide/additional-info/changes-in-v12.html&quot;&gt;Update Guide&lt;/a&gt;, including updated and removed items in the library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/bRCvFy9&quot;&gt;Discord.js Discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/discord-api&quot;&gt;Discord API Discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/discordjs/discord.js&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/discord.js&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discordapi.com/unofficial/libs.html&quot;&gt;Related libraries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/discord-rpc&quot;&gt;RPC&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/RPC&quot;&gt;source&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before creating an issue, please ensure that it hasn&#39;t already been reported/suggested, and double-check the &lt;a href=&quot;https://discord.js.org/#/docs&quot;&gt;documentation&lt;/a&gt;.&lt;br&gt; See &lt;a href=&quot;https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md&quot;&gt;the contribution guide&lt;/a&gt; if you&#39;d like to submit a PR.&lt;/p&gt; 
&lt;h2&gt;Help&lt;/h2&gt; 
&lt;p&gt;If you don&#39;t understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don&#39;t hesitate to join our official &lt;a href=&quot;https://discord.gg/bRCvFy9&quot;&gt;Discord.js Server&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/docs</title>
      <link>https://github.com/github/docs</link>
      <description>&lt;p&gt;The open-source repo for docs.github.com&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;GitHub Docs 
 &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt; 
&lt;p&gt;This repository contains the documentation website code and Markdown source files for &lt;a href=&quot;https://docs.github.com&quot;&gt;docs.github.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;GitHub&#39;s Docs team works on pre-production content in a private repo that regularly syncs with this public repo.&lt;/p&gt; 
&lt;p&gt;In this article:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/#readmes&quot;&gt;READMEs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;h3&gt;Start contributing right now:&lt;/h3&gt; 
&lt;p&gt;We accept a lot of &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/CONTRIBUTING.md/#types-of-contributions-memo&quot;&gt;different contributions&lt;/a&gt;, including some that don&#39;t require you to write a single line of code.&lt;/p&gt; 
&lt;h4&gt;Click &lt;strong&gt;make a contribution&lt;/strong&gt; from docs&lt;/h4&gt; 
&lt;p&gt;As you&#39;re using GitHub Docs, you may find something in an article that you&#39;d like to add to, update, or change. Click on &lt;strong&gt;make a contribution&lt;/strong&gt; to navigate directly to that article in the codebase, so that you can begin making your contribution.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;Open an issue&lt;/h4&gt; 
&lt;p&gt;If you&#39;ve found a problem, you can open an issue using a &lt;a href=&quot;https://github.com/github/docs/issues/new/choose&quot;&gt;template&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Solve an issue&lt;/h4&gt; 
&lt;p&gt;If you have a solution to one of the open issues, you will need to fork the repository and submit a pull request using the &lt;a href=&quot;https://github.com/github/docs/blob/main/CONTRIBUTING.md#pull-request-template&quot;&gt;template&lt;/a&gt; that is visible automatically in the pull request body. For more details about this process, please check out &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/CONTRIBUTING.md&quot;&gt;Getting Started with Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Join us in discussions&lt;/h4&gt; 
&lt;p&gt;We use GitHub Discussions to talk about all sorts of topics related to documentation and this site. For example: if you&#39;d like help troubleshooting a PR, have a great new idea, or want to share something amazing you&#39;ve learned in our docs, join us in &lt;a href=&quot;https://github.com/github/docs/discussions&quot;&gt;discussions&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;And that&#39;s it!&lt;/h4&gt; 
&lt;p&gt;That&#39;s how you can get started easily as a member of the GitHub Documentation community. :sparkles:&lt;/p&gt; 
&lt;p&gt;If you want to know more, or you&#39;re making a more complex contribution, check out &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/CONTRIBUTING.md&quot;&gt;Getting Started with Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are a few more things to know when you&#39;re getting started with this repo:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;If you&#39;re having trouble with your GitHub account, contact &lt;a href=&quot;https://support.github.com/contact&quot;&gt;Support&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We do not accept pull requests for translated content - see &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;READMEs&lt;/h2&gt; 
&lt;p&gt;In addition to the README you&#39;re reading right now, this repo includes other READMEs that describe the purpose of each subdirectory in more detail:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/content/README.md&quot;&gt;content/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/content/graphql/README.md&quot;&gt;content/graphql/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/content/rest/README.md&quot;&gt;content/rest/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/contributing/README.md&quot;&gt;contributing/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/data/README.md&quot;&gt;data/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/data/reusables/README.md&quot;&gt;data/reusables/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/data/variables/README.md&quot;&gt;data/variables/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/includes/liquid-tags/README.md&quot;&gt;includes/liquid-tags/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/includes/README.md&quot;&gt;includes/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/javascripts/README.md&quot;&gt;javascripts/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/layouts/README.md&quot;&gt;layouts/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/lib/liquid-tags/README.md&quot;&gt;lib/liquid-tags/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/middleware/README.md&quot;&gt;middleware/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/script/README.md&quot;&gt;script/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/stylesheets/README.md&quot;&gt;stylesheets/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/tests/README.md&quot;&gt;tests/README.md&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The GitHub product documentation in the assets, content, and data folders are licensed under a &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/LICENSE&quot;&gt;CC-BY license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All other code in this repository is licensed under a &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/LICENSE-CODE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When using the GitHub logos, be sure to follow the &lt;a href=&quot;https://github.com/logos&quot;&gt;GitHub logo guidelines&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>covid19india/covid19india-react</title>
      <link>https://github.com/covid19india/covid19india-react</link>
      <description>&lt;p&gt;Tracking the impact of COVID-19 in India&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;npm i &amp;amp;&amp;amp; npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;If you&#39;re new to contributing to Open Source on Github, &lt;a href=&quot;https://guides.github.com/activities/contributing-to-open-source/&quot;&gt;this guide&lt;/a&gt; can help you get started. Please check out the &lt;a href=&quot;https://raw.githubusercontent.com/covid19india/covid19india-react/master/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt; for more details on how issues and pull requests work.&lt;/p&gt; 
&lt;h6&gt;This repository is just a small subset of work put together by a much larger pool of voluntary efforts contributed by generous people all around the world. Reach out to us through hello@covid19india.org&lt;/h6&gt;</description>
    </item>
    
    <item>
      <title>mwittrien/BetterDiscordAddons</title>
      <link>https://github.com/mwittrien/BetterDiscordAddons</link>
      <description>&lt;p&gt;A series of plugins and themes for BetterDiscord.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;https://github.com/rauenzi/BetterDiscordApp&quot;&gt;BetterDiscord&lt;/a&gt; Addons &lt;a href=&quot;https://paypal.me/MircoWittrien&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paypal-Donate!-%23003087.svg?logo=paypal&amp;amp;style=flat&quot; alt=&quot;Paypal&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://patreon.com/MircoWittrien&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Patreon-Support!-%23F96854.svg?logo=patreon&amp;amp;style=flat&quot; alt=&quot;Patreon&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;A series of plugins and themes for BetterDiscord. If you got any questions hit me up on Discord DevilBro#4401&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/mwittrien/BetterDiscordAddons/tree/master/Plugins/&quot;&gt;Plugins&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/mwittrien/BetterDiscordAddons/tree/master/Themes/&quot;&gt;Themes&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Copyright (C) 2020 Mirco Wittrien&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Miodec/monkeytype</title>
      <link>https://github.com/Miodec/monkeytype</link>
      <description>&lt;p&gt;A minimalistic typing test&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;monkeytype&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://github.com/Miodec/monkeytype/blob/master/static/images/mtsocial.png?raw=true&quot; alt=&quot;&quot;&gt; 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;About&lt;/h1&gt; 
&lt;p&gt;Monkeytype is a minimalistic, customisable typing test, featuring many test modes, an account system to save your typing speed history and user-configurable features like themes, sounds, a smooth caret and more.&lt;/p&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;minimalistic design with no ads&lt;/li&gt; 
 &lt;li&gt;look at what you are typing&lt;/li&gt; 
 &lt;li&gt;focus mode&lt;/li&gt; 
 &lt;li&gt;different test modes&lt;/li&gt; 
 &lt;li&gt;punctuation mode&lt;/li&gt; 
 &lt;li&gt;themes&lt;/li&gt; 
 &lt;li&gt;live wpm&lt;/li&gt; 
 &lt;li&gt;smooth caret&lt;/li&gt; 
 &lt;li&gt;account system&lt;/li&gt; 
 &lt;li&gt;command line&lt;/li&gt; 
 &lt;li&gt;and much more&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Discord bot&lt;/h1&gt; 
&lt;p&gt;Recently, a Discord bot was added to autoassign roles on our server. You can find the code for it over at https://github.com/Miodec/monkey-bot&lt;/p&gt; 
&lt;h1&gt;Bug report or Feature request&lt;/h1&gt; 
&lt;p&gt;If you encounter a bug, or have a feature request - send me a message on Reddit, &lt;a href=&quot;https://github.com/Miodec/monkeytype/issues&quot;&gt;create an issue&lt;/a&gt;, &lt;a href=&quot;https://github.com/Miodec/monkeytype/discussions&quot;&gt;create a discussion thread&lt;/a&gt;, or &lt;a href=&quot;https://www.discord.gg/monkeytype&quot;&gt;join the Discord server&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Credits&lt;/h1&gt; 
&lt;p&gt;Montydrei for the name suggestion&lt;/p&gt; 
&lt;p&gt;Everyone who provided valuable feedback on the original reddit post for the prototype of this website&lt;/p&gt; 
&lt;p&gt;Contributors that have helped with implementing various features, adding themes and more&lt;/p&gt; 
&lt;h1&gt;Support&lt;/h1&gt; 
&lt;p&gt;If you wish to support further development and feel extra awesome, you can do so &lt;a href=&quot;https://www.paypal.me/jackbartnik&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Contribute&lt;/h1&gt; 
&lt;p&gt;Refer to &lt;a href=&quot;https://github.com/Miodec/monkeytype/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Code Of Conduct&lt;/h1&gt; 
&lt;p&gt;Before contributing to this repository please refer to &lt;a href=&quot;https://github.com/Miodec/monkeytype/blob/master/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ryanmcdermott/clean-code-javascript</title>
      <link>https://github.com/ryanmcdermott/clean-code-javascript</link>
      <description>&lt;p&gt;🛁 Clean Code concepts adapted for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clean-code-javascript&lt;/h1&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#variables&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#functions&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#objects-and-data-structures&quot;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#classes&quot;&gt;Classes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#solid&quot;&gt;SOLID&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#concurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#error-handling&quot;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#translation&quot;&gt;Translation&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://www.osnews.com/images/comics/wtfm.jpg&quot; alt=&quot;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for JavaScript. This is not a style guide. It&#39;s a guide to producing &lt;a href=&quot;https://github.com/ryanmcdermott/3rs-of-software-architecture&quot;&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt; 
&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the JavaScript code that you and your team produce.&lt;/p&gt; 
&lt;p&gt;One more thing: knowing these won&#39;t immediately make you a better software developer, and working with them for many years doesn&#39;t mean you won&#39;t make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don&#39;t beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const yyyymmdstr = moment().format(&quot;YYYY/MM/DD&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const currentDate = moment().format(&quot;YYYY/MM/DD&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getUserInfo();
getClientData();
getCustomerRecord();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getUser();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use searchable names&lt;/h3&gt; 
&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like &lt;a href=&quot;https://github.com/danielstjules/buddy.js&quot;&gt;buddy.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/eslint/eslint/blob/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md&quot;&gt;ESLint&lt;/a&gt; can help identify unnamed constants.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// What the heck is 86400000 for?
setTimeout(blastOff, 86400000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Declare them as capitalized named constants.
const MILLISECONDS_IN_A_DAY = 60 * 60 * 24 * 1000; //86400000;

setTimeout(blastOff, MILLISECONDS_IN_A_DAY);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use explanatory variables&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const address = &quot;One Infinite Loop, Cupertino 95014&quot;;
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
saveCityZipCode(
  address.match(cityZipCodeRegex)[1],
  address.match(cityZipCodeRegex)[2]
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const address = &quot;One Infinite Loop, Cupertino 95014&quot;;
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
const [_, city, zipCode] = address.match(cityZipCodeRegex) || [];
saveCityZipCode(city, zipCode);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; 
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const locations = [&quot;Austin&quot;, &quot;New York&quot;, &quot;San Francisco&quot;];
locations.forEach(l =&amp;gt; {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  // Wait, what is `l` for again?
  dispatch(l);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const locations = [&quot;Austin&quot;, &quot;New York&quot;, &quot;San Francisco&quot;];
locations.forEach(location =&amp;gt; {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  dispatch(location);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; 
&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Car = {
  carMake: &quot;Honda&quot;,
  carModel: &quot;Accord&quot;,
  carColor: &quot;Blue&quot;
};

function paintCar(car) {
  car.carColor = &quot;Red&quot;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Car = {
  make: &quot;Honda&quot;,
  model: &quot;Accord&quot;,
  color: &quot;Blue&quot;
};

function paintCar(car) {
  car.color = &quot;Red&quot;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; 
&lt;p&gt;Default arguments are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for &lt;code&gt;undefined&lt;/code&gt; arguments. Other &quot;falsy&quot; values such as &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, will not be replaced by a default value.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMicrobrewery(name) {
  const breweryName = name || &quot;Hipster Brew Co.&quot;;
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMicrobrewery(name = &quot;Hipster Brew Co.&quot;) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; 
&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; 
&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; 
&lt;p&gt;Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.&lt;/p&gt; 
&lt;p&gt;To make it obvious what properties the function expects, you can use the ES2015/ES6 destructuring syntax. This has a few advantages:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;When someone looks at the function signature, it&#39;s immediately clear what properties are being used.&lt;/li&gt; 
 &lt;li&gt;It can be used to simulate named parameters.&lt;/li&gt; 
 &lt;li&gt;Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.&lt;/li&gt; 
 &lt;li&gt;Linters can warn you about unused properties, which would be impossible without destructuring.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMenu(title, body, buttonText, cancellable) {
  // ...
}

createMenu(&quot;Foo&quot;, &quot;Bar&quot;, &quot;Baz&quot;, true);

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMenu({ title, body, buttonText, cancellable }) {
  // ...
}

createMenu({
  title: &quot;Foo&quot;,
  body: &quot;Bar&quot;,
  buttonText: &quot;Baz&quot;,
  cancellable: true
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Functions should do one thing&lt;/h3&gt; 
&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you&#39;ll be ahead of many developers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function emailClients(clients) {
  clients.forEach(client =&amp;gt; {
    const clientRecord = database.lookup(client);
    if (clientRecord.isActive()) {
      email(client);
    }
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function emailActiveClients(clients) {
  clients.filter(isActiveClient).forEach(email);
}

function isActiveClient(client) {
  const clientRecord = database.lookup(client);
  return clientRecord.isActive();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Function names should say what they do&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addToDate(date, month) {
  // ...
}

const date = new Date();

// It&#39;s hard to tell from the function name what is added
addToDate(date, 1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addMonthToDate(month, date) {
  // ...
}

const date = new Date();
addMonthToDate(1, date);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; 
&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function parseBetterJSAlternative(code) {
  const REGEXES = [
    // ...
  ];

  const statements = code.split(&quot; &quot;);
  const tokens = [];
  REGEXES.forEach(REGEX =&amp;gt; {
    statements.forEach(statement =&amp;gt; {
      // ...
    });
  });

  const ast = [];
  tokens.forEach(token =&amp;gt; {
    // lex...
  });

  ast.forEach(node =&amp;gt; {
    // parse...
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function parseBetterJSAlternative(code) {
  const tokens = tokenize(code);
  const syntaxTree = parse(tokens);
  syntaxTree.forEach(node =&amp;gt; {
    // parse...
  });
}

function tokenize(code) {
  const REGEXES = [
    // ...
  ];

  const statements = code.split(&quot; &quot;);
  const tokens = [];
  REGEXES.forEach(REGEX =&amp;gt; {
    statements.forEach(statement =&amp;gt; {
      tokens.push(/* ... */);
    });
  });

  return tokens;
}

function parse(tokens) {
  const syntaxTree = [];
  tokens.forEach(token =&amp;gt; {
    syntaxTree.push(/* ... */);
  });

  return syntaxTree;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Remove duplicate code&lt;/h3&gt; 
&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; 
&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; 
&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; 
&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;em&gt;Classes&lt;/em&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showDeveloperList(developers) {
  developers.forEach(developer =&amp;gt; {
    const expectedSalary = developer.calculateExpectedSalary();
    const experience = developer.getExperience();
    const githubLink = developer.getGithubLink();
    const data = {
      expectedSalary,
      experience,
      githubLink
    };

    render(data);
  });
}

function showManagerList(managers) {
  managers.forEach(manager =&amp;gt; {
    const expectedSalary = manager.calculateExpectedSalary();
    const experience = manager.getExperience();
    const portfolio = manager.getMBAProjects();
    const data = {
      expectedSalary,
      experience,
      portfolio
    };

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showEmployeeList(employees) {
  employees.forEach(employee =&amp;gt; {
    const expectedSalary = employee.calculateExpectedSalary();
    const experience = employee.getExperience();

    const data = {
      expectedSalary,
      experience
    };

    switch (employee.type) {
      case &quot;manager&quot;:
        data.portfolio = employee.getMBAProjects();
        break;
      case &quot;developer&quot;:
        data.githubLink = employee.getGithubLink();
        break;
    }

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Set default objects with Object.assign&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const menuConfig = {
  title: null,
  body: &quot;Bar&quot;,
  buttonText: null,
  cancellable: true
};

function createMenu(config) {
  config.title = config.title || &quot;Foo&quot;;
  config.body = config.body || &quot;Bar&quot;;
  config.buttonText = config.buttonText || &quot;Baz&quot;;
  config.cancellable =
    config.cancellable !== undefined ? config.cancellable : true;
}

createMenu(menuConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const menuConfig = {
  title: &quot;Order&quot;,
  // User did not include &#39;body&#39; key
  buttonText: &quot;Send&quot;,
  cancellable: true
};

function createMenu(config) {
  let finalConfig = Object.assign(
    {
      title: &quot;Foo&quot;,
      body: &quot;Bar&quot;,
      buttonText: &quot;Baz&quot;,
      cancellable: true
    },
    config
  );
  return finalConfig
  // config now equals: {title: &quot;Order&quot;, body: &quot;Bar&quot;, buttonText: &quot;Send&quot;, cancellable: true}
  // ...
}

createMenu(menuConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; 
&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createFile(name, temp) {
  if (temp) {
    fs.create(`./temp/${name}`);
  } else {
    fs.create(name);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createFile(name) {
  fs.create(name);
}

function createTempFile(name) {
  createFile(`./temp/${name}`);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; 
&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; 
&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; 
&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Global variable referenced by following function.
// If we had another function that used this name, now it&#39;d be an array and it could break it.
let name = &quot;Ryan McDermott&quot;;

function splitIntoFirstAndLastName() {
  name = name.split(&quot; &quot;);
}

splitIntoFirstAndLastName();

console.log(name); // [&#39;Ryan&#39;, &#39;McDermott&#39;];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function splitIntoFirstAndLastName(name) {
  return name.split(&quot; &quot;);
}

const name = &quot;Ryan McDermott&quot;;
const newName = splitIntoFirstAndLastName(name);

console.log(name); // &#39;Ryan McDermott&#39;;
console.log(newName); // [&#39;Ryan&#39;, &#39;McDermott&#39;];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; 
&lt;p&gt;In JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it&#39;s important to handle them carefully when they&#39;re passed as parameters to a function. A JavaScript function can change an object&#39;s properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; 
&lt;p&gt;Suppose there&#39;s a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let&#39;s imagine a bad situation:&lt;/p&gt; 
&lt;p&gt;The user clicks the &quot;Purchase&quot; button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an &quot;Add to Cart&quot; button on an item they don&#39;t actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; 
&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn&#39;t be affected by the changes.&lt;/p&gt; 
&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn&#39;t a big issue in practice because there are &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addItemToCart = (cart, item) =&amp;gt; {
  cart.push({ item, date: Date.now() });
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addItemToCart = (cart, item) =&amp;gt; {
  return [...cart, { item, date: Date.now() }];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; 
&lt;p&gt;Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to extend JavaScript&#39;s native Array method to have a &lt;code&gt;diff&lt;/code&gt; method that could show the difference between two arrays? You could write your new function to the &lt;code&gt;Array.prototype&lt;/code&gt;, but it could clash with another library that tried to do the same thing. What if that other library was just using &lt;code&gt;diff&lt;/code&gt; to find the difference between the first and last elements of an array? This is why it would be much better to just use ES2015/ES6 classes and simply extend the &lt;code&gt;Array&lt;/code&gt; global.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.prototype.diff = function diff(comparisonArray) {
  const hash = new Set(comparisonArray);
  return this.filter(elem =&amp;gt; !hash.has(elem));
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class SuperArray extends Array {
  diff(comparisonArray) {
    const hash = new Set(comparisonArray);
    return this.filter(elem =&amp;gt; !hash.has(elem));
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; 
&lt;p&gt;JavaScript isn&#39;t a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const programmerOutput = [
  {
    name: &quot;Uncle Bobby&quot;,
    linesOfCode: 500
  },
  {
    name: &quot;Suzie Q&quot;,
    linesOfCode: 1500
  },
  {
    name: &quot;Jimmy Gosling&quot;,
    linesOfCode: 150
  },
  {
    name: &quot;Gracie Hopper&quot;,
    linesOfCode: 1000
  }
];

let totalOutput = 0;

for (let i = 0; i &amp;lt; programmerOutput.length; i++) {
  totalOutput += programmerOutput[i].linesOfCode;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const programmerOutput = [
  {
    name: &quot;Uncle Bobby&quot;,
    linesOfCode: 500
  },
  {
    name: &quot;Suzie Q&quot;,
    linesOfCode: 1500
  },
  {
    name: &quot;Jimmy Gosling&quot;,
    linesOfCode: 150
  },
  {
    name: &quot;Gracie Hopper&quot;,
    linesOfCode: 1000
  }
];

const totalOutput = programmerOutput.reduce(
  (totalLines, output) =&amp;gt; totalLines + output.linesOfCode,
  0
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (fsm.state === &quot;fetching&quot; &amp;amp;&amp;amp; isEmpty(listNode)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function shouldShowSpinner(fsm, listNode) {
  return fsm.state === &quot;fetching&quot; &amp;amp;&amp;amp; isEmpty(listNode);
}

if (shouldShowSpinner(fsmInstance, listNodeInstance)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isDOMNodeNotPresent(node) {
  // ...
}

if (!isDOMNodeNotPresent(node)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isDOMNodePresent(node) {
  // ...
}

if (isDOMNodePresent(node)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid conditionals&lt;/h3&gt; 
&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &quot;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&quot; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &quot;well that&#39;s great but why would I want to do that?&quot; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Airplane {
  // ...
  getCruisingAltitude() {
    switch (this.type) {
      case &quot;777&quot;:
        return this.getMaxAltitude() - this.getPassengerCount();
      case &quot;Air Force One&quot;:
        return this.getMaxAltitude();
      case &quot;Cessna&quot;:
        return this.getMaxAltitude() - this.getFuelExpenditure();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Airplane {
  // ...
}

class Boeing777 extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude() - this.getPassengerCount();
  }
}

class AirForceOne extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude();
  }
}

class Cessna extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude() - this.getFuelExpenditure();
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; 
&lt;p&gt;JavaScript is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function travelToTexas(vehicle) {
  if (vehicle instanceof Bicycle) {
    vehicle.pedal(this.currentLocation, new Location(&quot;texas&quot;));
  } else if (vehicle instanceof Car) {
    vehicle.drive(this.currentLocation, new Location(&quot;texas&quot;));
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function travelToTexas(vehicle) {
  vehicle.move(this.currentLocation, new Location(&quot;texas&quot;));
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; 
&lt;p&gt;If you are working with basic primitive values like strings and integers, and you can&#39;t use polymorphism but you still feel the need to type-check, you should consider using TypeScript. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux &quot;type-safety&quot; you get doesn&#39;t make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(val1, val2) {
  if (
    (typeof val1 === &quot;number&quot; &amp;amp;&amp;amp; typeof val2 === &quot;number&quot;) ||
    (typeof val1 === &quot;string&quot; &amp;amp;&amp;amp; typeof val2 === &quot;string&quot;)
  ) {
    return val1 + val2;
  }

  throw new Error(&quot;Must be of type String or Number&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(val1, val2) {
  return val1 + val2;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t over-optimize&lt;/h3&gt; 
&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. &lt;a href=&quot;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&quot;&gt;There are good resources&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// On old browsers, each iteration with uncached `list.length` would be costly
// because of `list.length` recomputation. In modern browsers, this is optimized.
for (let i = 0, len = list.length; i &amp;lt; len; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (let i = 0; i &amp;lt; list.length; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Remove dead code&lt;/h3&gt; 
&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function oldRequestModule(url) {
  // ...
}

function newRequestModule(url) {
  // ...
}

const req = newRequestModule;
inventoryTracker(&quot;apples&quot;, req, &quot;www.inventory-awesome.io&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function newRequestModule(url) {
  // ...
}

const req = newRequestModule;
inventoryTracker(&quot;apples&quot;, req, &quot;www.inventory-awesome.io&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Objects and Data Structures&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use getters and setters&lt;/h3&gt; 
&lt;p&gt;Using getters and setters to access data on objects could be better than simply looking for a property on an object. &quot;Why?&quot; you might ask. Well, here&#39;s an unorganized list of reasons why:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; 
 &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; 
 &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; 
 &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeBankAccount() {
  // ...

  return {
    balance: 0
    // ...
  };
}

const account = makeBankAccount();
account.balance = 100;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeBankAccount() {
  // this one is private
  let balance = 0;

  // a &quot;getter&quot;, made public via the returned object below
  function getBalance() {
    return balance;
  }

  // a &quot;setter&quot;, made public via the returned object below
  function setBalance(amount) {
    // ... validate before updating the balance
    balance = amount;
  }

  return {
    // ...
    getBalance,
    setBalance
  };
}

const account = makeBankAccount();
account.setBalance(100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Make objects have private members&lt;/h3&gt; 
&lt;p&gt;This can be accomplished through closures (for ES5 and below).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Employee = function(name) {
  this.name = name;
};

Employee.prototype.getName = function getName() {
  return this.name;
};

const employee = new Employee(&quot;John Doe&quot;);
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
delete employee.name;
console.log(`Employee name: ${employee.getName()}`); // Employee name: undefined
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeEmployee(name) {
  return {
    getName() {
      return name;
    }
  };
}

const employee = makeEmployee(&quot;John Doe&quot;);
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
delete employee.name;
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Prefer ES2015/ES6 classes over ES5 plain functions&lt;/h3&gt; 
&lt;p&gt;It&#39;s very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes. However, prefer small functions over classes until you find yourself needing larger and more complex objects.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Animal = function(age) {
  if (!(this instanceof Animal)) {
    throw new Error(&quot;Instantiate Animal with `new`&quot;);
  }

  this.age = age;
};

Animal.prototype.move = function move() {};

const Mammal = function(age, furColor) {
  if (!(this instanceof Mammal)) {
    throw new Error(&quot;Instantiate Mammal with `new`&quot;);
  }

  Animal.call(this, age);
  this.furColor = furColor;
};

Mammal.prototype = Object.create(Animal.prototype);
Mammal.prototype.constructor = Mammal;
Mammal.prototype.liveBirth = function liveBirth() {};

const Human = function(age, furColor, languageSpoken) {
  if (!(this instanceof Human)) {
    throw new Error(&quot;Instantiate Human with `new`&quot;);
  }

  Mammal.call(this, age, furColor);
  this.languageSpoken = languageSpoken;
};

Human.prototype = Object.create(Mammal.prototype);
Human.prototype.constructor = Human;
Human.prototype.speak = function speak() {};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Animal {
  constructor(age) {
    this.age = age;
  }

  move() {
    /* ... */
  }
}

class Mammal extends Animal {
  constructor(age, furColor) {
    super(age);
    this.furColor = furColor;
  }

  liveBirth() {
    /* ... */
  }
}

class Human extends Mammal {
  constructor(age, furColor, languageSpoken) {
    super(age, furColor);
    this.languageSpoken = languageSpoken;
  }

  speak() {
    /* ... */
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use method chaining&lt;/h3&gt; 
&lt;p&gt;This pattern is very useful in JavaScript and you see it in many libraries such as jQuery and Lodash. It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be. In your class functions, simply return &lt;code&gt;this&lt;/code&gt; at the end of every function, and you can chain further class methods onto it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Car {
  constructor(make, model, color) {
    this.make = make;
    this.model = model;
    this.color = color;
  }

  setMake(make) {
    this.make = make;
  }

  setModel(model) {
    this.model = model;
  }

  setColor(color) {
    this.color = color;
  }

  save() {
    console.log(this.make, this.model, this.color);
  }
}

const car = new Car(&quot;Ford&quot;, &quot;F-150&quot;, &quot;red&quot;);
car.setColor(&quot;pink&quot;);
car.save();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Car {
  constructor(make, model, color) {
    this.make = make;
    this.model = model;
    this.color = color;
  }

  setMake(make) {
    this.make = make;
    // NOTE: Returning this for chaining
    return this;
  }

  setModel(model) {
    this.model = model;
    // NOTE: Returning this for chaining
    return this;
  }

  setColor(color) {
    this.color = color;
    // NOTE: Returning this for chaining
    return this;
  }

  save() {
    console.log(this.make, this.model, this.color);
    // NOTE: Returning this for chaining
    return this;
  }
}

const car = new Car(&quot;Ford&quot;, &quot;F-150&quot;, &quot;red&quot;).setColor(&quot;pink&quot;).save();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; 
&lt;p&gt;As stated famously in &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; 
&lt;p&gt;You might be wondering then, &quot;when should I use inheritance?&quot; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Your inheritance represents an &quot;is-a&quot; relationship and not a &quot;has-a&quot; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; 
 &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; 
 &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Employee {
  constructor(name, email) {
    this.name = name;
    this.email = email;
  }

  // ...
}

// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee
class EmployeeTaxData extends Employee {
  constructor(ssn, salary) {
    super();
    this.ssn = ssn;
    this.salary = salary;
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class EmployeeTaxData {
  constructor(ssn, salary) {
    this.ssn = ssn;
    this.salary = salary;
  }

  // ...
}

class Employee {
  constructor(name, email) {
    this.name = name;
    this.email = email;
  }

  setTaxData(ssn, salary) {
    this.taxData = new EmployeeTaxData(ssn, salary);
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;SOLID&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; 
&lt;p&gt;As stated in Clean Code, &quot;There should never be more than one reason for a class to change&quot;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class UserSettings {
  constructor(user) {
    this.user = user;
  }

  changeSettings(settings) {
    if (this.verifyCredentials()) {
      // ...
    }
  }

  verifyCredentials() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class UserAuth {
  constructor(user) {
    this.user = user;
  }

  verifyCredentials() {
    // ...
  }
}

class UserSettings {
  constructor(user) {
    this.user = user;
    this.auth = new UserAuth(user);
  }

  changeSettings(settings) {
    if (this.auth.verifyCredentials()) {
      // ...
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; 
&lt;p&gt;As stated by Bertrand Meyer, &quot;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&quot; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AjaxAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;ajaxAdapter&quot;;
  }
}

class NodeAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;nodeAdapter&quot;;
  }
}

class HttpRequester {
  constructor(adapter) {
    this.adapter = adapter;
  }

  fetch(url) {
    if (this.adapter.name === &quot;ajaxAdapter&quot;) {
      return makeAjaxCall(url).then(response =&amp;gt; {
        // transform response and return
      });
    } else if (this.adapter.name === &quot;nodeAdapter&quot;) {
      return makeHttpCall(url).then(response =&amp;gt; {
        // transform response and return
      });
    }
  }
}

function makeAjaxCall(url) {
  // request and return promise
}

function makeHttpCall(url) {
  // request and return promise
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AjaxAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;ajaxAdapter&quot;;
  }

  request(url) {
    // request and return promise
  }
}

class NodeAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;nodeAdapter&quot;;
  }

  request(url) {
    // request and return promise
  }
}

class HttpRequester {
  constructor(adapter) {
    this.adapter = adapter;
  }

  fetch(url) {
    return this.adapter.request(url).then(response =&amp;gt; {
      // transform response and return
    });
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; 
&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &quot;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&quot; That&#39;s an even scarier definition.&lt;/p&gt; 
&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &quot;is-a&quot; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Rectangle {
  constructor() {
    this.width = 0;
    this.height = 0;
  }

  setColor(color) {
    // ...
  }

  render(area) {
    // ...
  }

  setWidth(width) {
    this.width = width;
  }

  setHeight(height) {
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }
}

class Square extends Rectangle {
  setWidth(width) {
    this.width = width;
    this.height = width;
  }

  setHeight(height) {
    this.width = height;
    this.height = height;
  }
}

function renderLargeRectangles(rectangles) {
  rectangles.forEach(rectangle =&amp;gt; {
    rectangle.setWidth(4);
    rectangle.setHeight(5);
    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.
    rectangle.render(area);
  });
}

const rectangles = [new Rectangle(), new Rectangle(), new Square()];
renderLargeRectangles(rectangles);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Shape {
  setColor(color) {
    // ...
  }

  render(area) {
    // ...
  }
}

class Rectangle extends Shape {
  constructor(width, height) {
    super();
    this.width = width;
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }
}

class Square extends Shape {
  constructor(length) {
    super();
    this.length = length;
  }

  getArea() {
    return this.length * this.length;
  }
}

function renderLargeShapes(shapes) {
  shapes.forEach(shape =&amp;gt; {
    const area = shape.getArea();
    shape.render(area);
  });
}

const shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];
renderLargeShapes(shapes);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; 
&lt;p&gt;JavaScript doesn&#39;t have interfaces so this principle doesn&#39;t apply as strictly as others. However, it&#39;s important and relevant even with JavaScript&#39;s lack of type system.&lt;/p&gt; 
&lt;p&gt;ISP states that &quot;Clients should not be forced to depend upon interfaces that they do not use.&quot; Interfaces are implicit contracts in JavaScript because of duck typing.&lt;/p&gt; 
&lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &quot;fat interface&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class DOMTraverser {
  constructor(settings) {
    this.settings = settings;
    this.setup();
  }

  setup() {
    this.rootNode = this.settings.rootNode;
    this.settings.animationModule.setup();
  }

  traverse() {
    // ...
  }
}

const $ = new DOMTraverser({
  rootNode: document.getElementsByTagName(&quot;body&quot;),
  animationModule() {} // Most of the time, we won&#39;t need to animate when traversing.
  // ...
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class DOMTraverser {
  constructor(settings) {
    this.settings = settings;
    this.options = settings.options;
    this.setup();
  }

  setup() {
    this.rootNode = this.settings.rootNode;
    this.setupOptions();
  }

  setupOptions() {
    if (this.options.animationModule) {
      // ...
    }
  }

  traverse() {
    // ...
  }
}

const $ = new DOMTraverser({
  rootNode: document.getElementsByTagName(&quot;body&quot;),
  options: {
    animationModule() {}
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; 
&lt;p&gt;This principle states two essential things:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; 
 &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with AngularJS, you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; 
&lt;p&gt;As stated previously, JavaScript doesn&#39;t have interfaces so the abstractions that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code&gt;InventoryTracker&lt;/code&gt; will have a &lt;code&gt;requestItems&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class InventoryRequester {
  constructor() {
    this.REQ_METHODS = [&quot;HTTP&quot;];
  }

  requestItem(item) {
    // ...
  }
}

class InventoryTracker {
  constructor(items) {
    this.items = items;

    // BAD: We have created a dependency on a specific request implementation.
    // We should just have requestItems depend on a request method: `request`
    this.requester = new InventoryRequester();
  }

  requestItems() {
    this.items.forEach(item =&amp;gt; {
      this.requester.requestItem(item);
    });
  }
}

const inventoryTracker = new InventoryTracker([&quot;apples&quot;, &quot;bananas&quot;]);
inventoryTracker.requestItems();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class InventoryTracker {
  constructor(items, requester) {
    this.items = items;
    this.requester = requester;
  }

  requestItems() {
    this.items.forEach(item =&amp;gt; {
      this.requester.requestItem(item);
    });
  }
}

class InventoryRequesterV1 {
  constructor() {
    this.REQ_METHODS = [&quot;HTTP&quot;];
  }

  requestItem(item) {
    // ...
  }
}

class InventoryRequesterV2 {
  constructor() {
    this.REQ_METHODS = [&quot;WS&quot;];
  }

  requestItem(item) {
    // ...
  }
}

// By constructing our dependencies externally and injecting them, we can easily
// substitute our request module for a fancy new one that uses WebSockets.
const inventoryTracker = new InventoryTracker(
  [&quot;apples&quot;, &quot;bananas&quot;],
  new InventoryRequesterV2()
);
inventoryTracker.requestItems();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won&#39;t be sure that you didn&#39;t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a &lt;a href=&quot;https://gotwarlost.github.io/istanbul/&quot;&gt;good coverage tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There&#39;s no excuse to not write tests. There are &lt;a href=&quot;https://jstherightway.org/#testing-tools&quot;&gt;plenty of good JS test frameworks&lt;/a&gt;, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; 
&lt;h3&gt;Single concept per test&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import assert from &quot;assert&quot;;

describe(&quot;MomentJS&quot;, () =&amp;gt; {
  it(&quot;handles date boundaries&quot;, () =&amp;gt; {
    let date;

    date = new MomentJS(&quot;1/1/2015&quot;);
    date.addDays(30);
    assert.equal(&quot;1/31/2015&quot;, date);

    date = new MomentJS(&quot;2/1/2016&quot;);
    date.addDays(28);
    assert.equal(&quot;02/29/2016&quot;, date);

    date = new MomentJS(&quot;2/1/2015&quot;);
    date.addDays(28);
    assert.equal(&quot;03/01/2015&quot;, date);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import assert from &quot;assert&quot;;

describe(&quot;MomentJS&quot;, () =&amp;gt; {
  it(&quot;handles 30-day months&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;1/1/2015&quot;);
    date.addDays(30);
    assert.equal(&quot;1/31/2015&quot;, date);
  });

  it(&quot;handles leap year&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;2/1/2016&quot;);
    date.addDays(28);
    assert.equal(&quot;02/29/2016&quot;, date);
  });

  it(&quot;handles non-leap year&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;2/1/2015&quot;);
    date.addDays(28);
    assert.equal(&quot;03/01/2015&quot;, date);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use Promises, not callbacks&lt;/h3&gt; 
&lt;p&gt;Callbacks aren&#39;t clean, and they cause excessive amounts of nesting. With ES2015/ES6, Promises are a built-in global type. Use them!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request&quot;;
import { writeFile } from &quot;fs&quot;;

get(
  &quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;,
  (requestErr, response, body) =&amp;gt; {
    if (requestErr) {
      console.error(requestErr);
    } else {
      writeFile(&quot;article.html&quot;, body, writeErr =&amp;gt; {
        if (writeErr) {
          console.error(writeErr);
        } else {
          console.log(&quot;File written&quot;);
        }
      });
    }
  }
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

get(&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;)
  .then(body =&amp;gt; {
    return writeFile(&quot;article.html&quot;, body);
  })
  .then(() =&amp;gt; {
    console.log(&quot;File written&quot;);
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Async/Await are even cleaner than Promises&lt;/h3&gt; 
&lt;p&gt;Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution. All you need is a function that is prefixed in an &lt;code&gt;async&lt;/code&gt; keyword, and then you can write your logic imperatively without a &lt;code&gt;then&lt;/code&gt; chain of functions. Use this if you can take advantage of ES2017/ES8 features today!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

get(&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;)
  .then(body =&amp;gt; {
    return writeFile(&quot;article.html&quot;, body);
  })
  .then(() =&amp;gt; {
    console.log(&quot;File written&quot;);
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

async function getCleanCodeArticle() {
  try {
    const body = await get(
      &quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;
    );
    await writeFile(&quot;article.html&quot;, body);
    console.log(&quot;File written&quot;);
  } catch (err) {
    console.error(err);
  }
}

getCleanCodeArticle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it&#39;s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.&lt;/p&gt; 
&lt;h3&gt;Don&#39;t ignore caught errors&lt;/h3&gt; 
&lt;p&gt;Doing nothing with a caught error doesn&#39;t give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;console.log&lt;/code&gt;) isn&#39;t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  functionThatMightThrow();
} catch (error) {
  console.log(error);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  functionThatMightThrow();
} catch (error) {
  // One option (more noisy than console.log):
  console.error(error);
  // Another option:
  notifyUserOfError(error);
  // Another option:
  reportErrorToService(error);
  // OR do all three!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Don&#39;t ignore rejected promises&lt;/h3&gt; 
&lt;p&gt;For the same reason you shouldn&#39;t ignore caught errors from &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getdata()
  .then(data =&amp;gt; {
    functionThatMightThrow(data);
  })
  .catch(error =&amp;gt; {
    console.log(error);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getdata()
  .then(data =&amp;gt; {
    functionThatMightThrow(data);
  })
  .catch(error =&amp;gt; {
    // One option (more noisy than console.log):
    console.error(error);
    // Another option:
    notifyUserOfError(error);
    // Another option:
    reportErrorToService(error);
    // OR do all three!
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. There are &lt;a href=&quot;https://standardjs.com/rules.html&quot;&gt;tons of tools&lt;/a&gt; to automate this. Use one! It&#39;s a waste of time and money for engineers to argue over formatting.&lt;/p&gt; 
&lt;p&gt;For things that don&#39;t fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.&lt;/p&gt; 
&lt;h3&gt;Use consistent capitalization&lt;/h3&gt; 
&lt;p&gt;JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const DAYS_IN_WEEK = 7;
const daysInMonth = 30;

const songs = [&quot;Back In Black&quot;, &quot;Stairway to Heaven&quot;, &quot;Hey Jude&quot;];
const Artists = [&quot;ACDC&quot;, &quot;Led Zeppelin&quot;, &quot;The Beatles&quot;];

function eraseDatabase() {}
function restore_database() {}

class animal {}
class Alpaca {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const DAYS_IN_WEEK = 7;
const DAYS_IN_MONTH = 30;

const SONGS = [&quot;Back In Black&quot;, &quot;Stairway to Heaven&quot;, &quot;Hey Jude&quot;];
const ARTISTS = [&quot;ACDC&quot;, &quot;Led Zeppelin&quot;, &quot;The Beatles&quot;];

function eraseDatabase() {}
function restoreDatabase() {}

class Animal {}
class Alpaca {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; 
&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class PerformanceReview {
  constructor(employee) {
    this.employee = employee;
  }

  lookupPeers() {
    return db.lookup(this.employee, &quot;peers&quot;);
  }

  lookupManager() {
    return db.lookup(this.employee, &quot;manager&quot;);
  }

  getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  perfReview() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();
  }

  getManagerReview() {
    const manager = this.lookupManager();
  }

  getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.perfReview();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class PerformanceReview {
  constructor(employee) {
    this.employee = employee;
  }

  perfReview() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();
  }

  getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  lookupPeers() {
    return db.lookup(this.employee, &quot;peers&quot;);
  }

  getManagerReview() {
    const manager = this.lookupManager();
  }

  lookupManager() {
    return db.lookup(this.employee, &quot;manager&quot;);
  }

  getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.perfReview();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Only comment things that have business logic complexity.&lt;/h3&gt; 
&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hashIt(data) {
  // The hash
  let hash = 0;

  // Length of string
  const length = data.length;

  // Loop through every character in data
  for (let i = 0; i &amp;lt; length; i++) {
    // Get character code.
    const char = data.charCodeAt(i);
    // Make the hash
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;
    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hashIt(data) {
  let hash = 0;
  const length = data.length;

  for (let i = 0; i &amp;lt; length; i++) {
    const char = data.charCodeAt(i);
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;

    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t leave commented out code in your codebase&lt;/h3&gt; 
&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doStuff();
// doOtherStuff();
// doSomeMoreStuff();
// doSoMuchStuff();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doStuff();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t have journal comments&lt;/h3&gt; 
&lt;p&gt;Remember, use version control! There&#39;s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/**
 * 2016-12-20: Removed monads, didn&#39;t understand them (RM)
 * 2016-10-01: Improved using special monads (JP)
 * 2016-02-03: Removed type-checking (LI)
 * 2015-03-14: Added combine with type-checking (JR)
 */
function combine(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid positional markers&lt;/h3&gt; 
&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;////////////////////////////////////////////////////////////////////////////////
// Scope Model Instantiation
////////////////////////////////////////////////////////////////////////////////
$scope.model = {
  menu: &quot;foo&quot;,
  nav: &quot;bar&quot;
};

////////////////////////////////////////////////////////////////////////////////
// Action setup
////////////////////////////////////////////////////////////////////////////////
const actions = function() {
  // ...
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$scope.model = {
  menu: &quot;foo&quot;,
  nav: &quot;bar&quot;
};

const actions = function() {
  // ...
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Translation&lt;/h2&gt; 
&lt;p&gt;This is also available in other languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Armenia.png&quot; alt=&quot;am&quot;&gt; &lt;strong&gt;Armenian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hanumanum/clean-code-javascript&quot;&gt;hanumanum/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bangladesh.png&quot; alt=&quot;bd&quot;&gt; &lt;strong&gt;Bangla(বাংলা)&lt;/strong&gt;: &lt;a href=&quot;https://github.com/InsomniacSabbir/clean-code-javascript/&quot;&gt;InsomniacSabbir/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&quot; alt=&quot;br&quot;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/fesnt/clean-code-javascript&quot;&gt;fesnt/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&quot; alt=&quot;cn&quot;&gt; &lt;strong&gt;Simplified Chinese&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/alivebao/clean-code-js&quot;&gt;alivebao/clean-code-js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beginor/clean-code-javascript&quot;&gt;beginor/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png&quot; alt=&quot;tw&quot;&gt; &lt;strong&gt;Traditional Chinese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/AllJointTW/clean-code-javascript&quot;&gt;AllJointTW/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png&quot; alt=&quot;fr&quot;&gt; &lt;strong&gt;French&lt;/strong&gt;: &lt;a href=&quot;https://github.com/GavBaros/clean-code-javascript-fr&quot;&gt;GavBaros/clean-code-javascript-fr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png&quot; alt=&quot;de&quot;&gt; &lt;strong&gt;German&lt;/strong&gt;: &lt;a href=&quot;https://github.com/marcbruederlin/clean-code-javascript&quot;&gt;marcbruederlin/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Indonesia.png&quot; alt=&quot;id&quot;&gt; &lt;strong&gt;Indonesia&lt;/strong&gt;: &lt;a href=&quot;https://github.com/andirkh/clean-code-javascript/&quot;&gt;andirkh/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png&quot; alt=&quot;it&quot;&gt; &lt;strong&gt;Italian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/frappacchio/clean-code-javascript/&quot;&gt;frappacchio/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&quot; alt=&quot;ja&quot;&gt; &lt;strong&gt;Japanese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mitsuruog/clean-code-javascript/&quot;&gt;mitsuruog/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&quot; alt=&quot;kr&quot;&gt; &lt;strong&gt;Korean&lt;/strong&gt;: &lt;a href=&quot;https://github.com/qkraudghgh/clean-code-javascript-ko&quot;&gt;qkraudghgh/clean-code-javascript-ko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png&quot; alt=&quot;pl&quot;&gt; &lt;strong&gt;Polish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/greg-dev/clean-code-javascript-pl&quot;&gt;greg-dev/clean-code-javascript-pl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&quot; alt=&quot;ru&quot;&gt; &lt;strong&gt;Russian&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BoryaMogila/clean-code-javascript-ru/&quot;&gt;BoryaMogila/clean-code-javascript-ru/&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/maksugr/clean-code-javascript&quot;&gt;maksugr/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png&quot; alt=&quot;es&quot;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/tureey/clean-code-javascript&quot;&gt;tureey/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Uruguay.png&quot; alt=&quot;es&quot;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/andersontr15/clean-code-javascript-es&quot;&gt;andersontr15/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Serbia.png&quot; alt=&quot;rs&quot;&gt; &lt;strong&gt;Serbian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/doskovicmilos/clean-code-javascript&quot;&gt;doskovicmilos/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png&quot; alt=&quot;tr&quot;&gt; &lt;strong&gt;Turkish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/bsonmez/clean-code-javascript/tree/turkish-translation&quot;&gt;bsonmez/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png&quot; alt=&quot;ua&quot;&gt; &lt;strong&gt;Ukrainian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mindfr1k/clean-code-javascript-ua&quot;&gt;mindfr1k/clean-code-javascript-ua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png&quot; alt=&quot;vi&quot;&gt; &lt;strong&gt;Vietnamese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hienvd/clean-code-javascript/&quot;&gt;hienvd/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TheAlgorithms/Javascript</title>
      <link>https://github.com/TheAlgorithms/Javascript</link>
      <description>&lt;p&gt;A repository for All algorithms implemented in Javascript (for educational purposes only)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Algorithms - JavaScript&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/TheAlgorithms/Javascript/blob/master/CONTRIBUTING.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1.svg?label=Contributions&amp;amp;message=Welcome&amp;amp;color=0059b3&amp;amp;style=flat-square&quot; alt=&quot;contributions welcome&quot;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&quot;https://lgtm.com/projects/g/TheAlgorithms/Javascript/context:javascript&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/grade/javascript/g/TheAlgorithms/Javascript.svg?logo=lgtm&amp;amp;logoWidth=18&quot; alt=&quot;Language grade: JavaScript&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/TheAlgorithms/Javascript/workflows/Node%20CI/badge.svg&quot; alt=&quot;Node CI&quot;&gt; &lt;img src=&quot;https://github.com/TheAlgorithms/Javascript/workflows/update_directory_md/badge.svg&quot; alt=&quot;update_directory_md&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/repo-size/TheAlgorithms/Javascript.svg?label=Repo%20size&amp;amp;style=flat-square&quot; alt=&quot;&quot;&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h3&gt;All algorithms implemented in JavaScript (for educational purposes only)&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/TheAlgorithms/Javascript&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;These are for demonstration purposes only. There are many implementations of sorts in the JavaScript standard library that are much better for performance reasons.&lt;/p&gt; 
&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://raw.githubusercontent.com/TheAlgorithms/Javascript/master/CONTRIBUTING.md&quot;&gt;Contribution Guidelines&lt;/a&gt; before you contribute.&lt;/p&gt; 
&lt;h2&gt;List of Algorithms&lt;/h2&gt; 
&lt;p&gt;See our &lt;a href=&quot;https://raw.githubusercontent.com/TheAlgorithms/Javascript/master/DIRECTORY.md&quot;&gt;directory&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Algorithm Explanation&lt;/h2&gt; 
&lt;p&gt;see our &lt;a href=&quot;https://github.com/TheAlgorithms/Javascript/wiki&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>facebook/react-native</title>
      <link>https://github.com/facebook/react-native</link>
      <description>&lt;p&gt;A framework for building native apps with React.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;React Native brings &lt;a href=&quot;https://reactjs.org/&quot;&gt;&lt;strong&gt;React&lt;/strong&gt;&#39;s&lt;/a&gt; declarative UI framework to iOS and Android. With React Native, you use native UI controls and have full access to the native platform.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Declarative.&lt;/strong&gt; React makes it painless to create interactive UIs. Declarative views make your code more predictable and easier to debug.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Component-Based.&lt;/strong&gt; Build encapsulated components that manage their state, then compose them to make complex UIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Developer Velocity.&lt;/strong&gt; See local changes in seconds. Changes to JavaScript code can be live reloaded without rebuilding the native app.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Portability.&lt;/strong&gt; Reuse code across iOS, Android, and &lt;a href=&quot;https://reactnative.dev/docs/out-of-tree-platforms&quot;&gt;other platforms&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;React Native is developed and supported by many companies and individual core contributors. Find out more in our &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ECOSYSTEM.md&quot;&gt;ecosystem overview&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-building-your-first-react-native-app&quot;&gt;Building your first React Native app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-upgrading&quot;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-how-to-contribute&quot;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/master/#-license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📋 Requirements&lt;/h2&gt; 
&lt;p&gt;React Native apps may target iOS 11.0 and Android 5.0 (API 21) or newer. You may use Windows, macOS, or Linux as your development operating system, though building and running iOS apps is limited to macOS. Tools like &lt;a href=&quot;https://expo.io&quot;&gt;Expo&lt;/a&gt; can be used to work around this.&lt;/p&gt; 
&lt;h2&gt;🎉 Building your first React Native app&lt;/h2&gt; 
&lt;p&gt;Follow the &lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;Getting Started guide&lt;/a&gt;. The recommended way to install React Native depends on your project. Here you can find short guides for the most common scenarios:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://snack.expo.io/@hramos/hello,-world!&quot;&gt;Trying out React Native&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;Creating a New Application&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactnative.dev/docs/integration-with-existing-apps&quot;&gt;Adding React Native to an Existing Application&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📖 Documentation&lt;/h2&gt; 
&lt;p&gt;The full documentation for React Native can be found on our &lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The React Native documentation discusses components, APIs, and topics that are specific to React Native. For further documentation on the React API that is shared between React Native and React DOM, refer to the &lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;React documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The source for the React Native documentation and website is hosted on a separate repo, &lt;a href=&quot;https://github.com/facebook/react-native-website&quot;&gt;&lt;strong&gt;@facebook/react-native-website&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🚀 Upgrading&lt;/h2&gt; 
&lt;p&gt;Upgrading to new versions of React Native may give you access to more APIs, views, developer tools, and other goodies. See the &lt;a href=&quot;https://reactnative.dev/docs/upgrading&quot;&gt;Upgrading Guide&lt;/a&gt; for instructions.&lt;/p&gt; 
&lt;p&gt;React Native releases are discussed in the React Native Community, &lt;a href=&quot;https://github.com/react-native-community/react-native-releases&quot;&gt;&lt;strong&gt;@react-native-community/react-native-releases&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;👏 How to Contribute&lt;/h2&gt; 
&lt;p&gt;The main purpose of this repository is to continue evolving React Native core. We want to make contributing to this project as easy and transparent as possible, and we are grateful to the community for contributing bug fixes and improvements. Read below to learn how you can take part in improving React Native.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://code.fb.com/codeofconduct/&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the &lt;a href=&quot;https://code.fb.com/codeofconduct/&quot;&gt;full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://reactnative.dev/docs/contributing&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://reactnative.dev/docs/contributing&quot;&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React Native.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/facebook/react-native/wiki/Roadmap&quot;&gt;Open Source Roadmap&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can learn more about our vision for React Native in the &lt;a href=&quot;https://github.com/facebook/react-native/wiki/Roadmap&quot;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Good First Issues&lt;/h3&gt; 
&lt;p&gt;We have a list of &lt;a href=&quot;https://github.com/facebook/react-native/labels/good%20first%20issue&quot;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; 
&lt;h3&gt;Discussions&lt;/h3&gt; 
&lt;p&gt;Larger discussions and proposals are discussed in &lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals&quot;&gt;&lt;strong&gt;@react-native-community/discussions-and-proposals&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;📄 License&lt;/h2&gt; 
&lt;p&gt;React Native is MIT licensed, as found in the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;React Native documentation is Creative Commons licensed, as found in the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/LICENSE-docs&quot;&gt;LICENSE-docs&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>leonardomso/33-js-concepts</title>
      <link>https://github.com/leonardomso/33-js-concepts</link>
      <description>&lt;p&gt;📜 33 concepts every JavaScript developer should know.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;﻿
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;&amp;lt;img src=&quot;https://i.imgur.com/dsHmk6H.jpg&quot; alt=&quot;33 Concepts Every JS Developer Should Know&quot; width=200&quot;&amp;gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 33 Concepts Every JavaScript Developer Should Know 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/leonardomso&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/leonardomso.svg?style=for-the-badge&quot; alt=&quot;Follow me&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;This repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by &lt;a href=&quot;https://twitter.com/stephenthecurt&quot;&gt;Stephen Curtis&lt;/a&gt; and you can read it &lt;a href=&quot;https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;🚀 Considered by GitHub as one of the &lt;a href=&quot;https://blog.github.com/2018-12-13-new-open-source-projects/&quot;&gt;top open source projects of 2018!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Feel free to submit a PR adding a link to your own recaps or reviews. If you want to translate the repo into your native language, please feel free to do so.&lt;/p&gt; 
&lt;p&gt;All the translations for this repo will be listed below:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eldrinf/33-js-concepts-albanian.git&quot;&gt;Albanian&lt;/a&gt; — Eldrin Ereqi&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/amrsekilly/33-js-concepts&quot;&gt;Arabic&lt;/a&gt; — Amr Elsekilly&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stephentian/33-js-concepts&quot;&gt;Chinese&lt;/a&gt; — Re Tian&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tiagoboeing/33-js-concepts&quot;&gt;Portuguese-BR&lt;/a&gt; — Tiago Boeing&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yjs03057/33-js-concepts.git&quot;&gt;Korean&lt;/a&gt; — Suin Lee&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/adonismendozaperez/33-js-conceptos&quot;&gt;Spanish&lt;/a&gt; — Adonis Mendoza&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ilker0/33-js-concepts&quot;&gt;Turkish&lt;/a&gt; — İlker Demir&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gumennii/33-js-concepts&quot;&gt;Russian&lt;/a&gt; — Mihail Gumennii&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nguyentranchung/33-js-concepts&quot;&gt;Tiếng Việt&lt;/a&gt; — Nguyễn Trần Chung&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lip3k/33-js-concepts&quot;&gt;Polish&lt;/a&gt; — Dawid Lipinski&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/majidalavizadeh/33-js-concepts&quot;&gt;Persian&lt;/a&gt; — Majid Alavizadeh&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rijdz/33-js-concepts&quot;&gt;Indonesian&lt;/a&gt; — Rijdzuan Sampoerna&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/robinmetral/33-concepts-js&quot;&gt;French&lt;/a&gt; — Robin Métral&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vikaschauhan/33-js-concepts&quot;&gt;Hindi&lt;/a&gt; — Vikas Chauhan&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DimitrisZx/33-js-concepts&quot;&gt;Greek&lt;/a&gt; — Dimitris Zarachanis&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/oimo23/33-js-concepts&quot;&gt;Japanese&lt;/a&gt; — oimo23&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/burhannn/33-js-concepts&quot;&gt;German&lt;/a&gt; — burhannn&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AndrewSavetchuk/33-js-concepts-ukrainian-translation&quot;&gt;Ukrainian&lt;/a&gt; — Andrew Savetchuk&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ududsha/33-js-concepts&quot;&gt;Sinhala&lt;/a&gt; — Udaya Shamendra&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Donearm/33-js-concepts&quot;&gt;Italian&lt;/a&gt; - Gianluca Fiore&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#1-call-stack&quot;&gt;Call Stack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#2-primitive-types&quot;&gt;Primitive Types&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#3-value-types-and-reference-types&quot;&gt;Value Types and Reference Types&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#4-implicit-explicit-nominal-structuring-and-duck-typing&quot;&gt;Implicit, Explicit, Nominal, Structuring and Duck Typing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#5--vs--vs-typeof&quot;&gt;== vs === vs typeof&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#6-function-scope-block-scope-and-lexical-scope&quot;&gt;Function Scope, Block Scope and Lexical Scope&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#7-expression-vs-statement&quot;&gt;Expression vs Statement&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#8-iife-modules-and-namespaces&quot;&gt;IIFE, Modules and Namespaces&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#9-message-queue-and-event-loop&quot;&gt;Message Queue and Event Loop&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#10-settimeout-setinterval-and-requestanimationframe&quot;&gt;setTimeout, setInterval and requestAnimationFrame&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#11-javascript-engines&quot;&gt;JavaScript Engines&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#12-bitwise-operators-type-arrays-and-array-buffers&quot;&gt;Bitwise Operators, Type Arrays and Array Buffers&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#13-dom-and-layout-trees&quot;&gt;DOM and Layout Trees&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#14-factories-and-classes&quot;&gt;Factories and Classes&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#15-this-call-apply-and-bind&quot;&gt;this, call, apply and bind&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#16-new-constructor-instanceof-and-instances&quot;&gt;new, Constructor, instanceof and Instances&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#17-prototype-inheritance-and-prototype-chain&quot;&gt;Prototype Inheritance and Prototype Chain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#18-objectcreate-and-objectassign&quot;&gt;Object.create and Object.assign&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#19-map-reduce-filter&quot;&gt;map, reduce, filter&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#20-pure-functions-side-effects-and-state-mutation&quot;&gt;Pure Functions, Side Effects and State Mutation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#21-closures&quot;&gt;Closures&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#22-high-order-functions&quot;&gt;High Order Functions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#23-recursion&quot;&gt;Recursion&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#24-collections-and-generators&quot;&gt;Collections and Generators&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#25-promises&quot;&gt;Promises&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#26-asyncawait&quot;&gt;async/await&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#27-data-structures&quot;&gt;Data Structures&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#28-expensive-operation-and-big-o-notation&quot;&gt;Expensive Operation and Big O Notation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#29-algorithms&quot;&gt;Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#30-inheritance-polymorphism-and-code-reuse&quot;&gt;Inheritance, Polymorphism and Code Reuse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#31-design-patterns&quot;&gt;Design Patterns&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#32-partial-applications-currying-compose-and-pipe&quot;&gt;Partial Applications, Currying, Compose and Pipe&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#33-clean-code&quot;&gt;Clean Code&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;h2&gt;1. Call Stack&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec&quot;&gt;Understanding Javascript Call Stack, Event Loops — Gaurav Pandvia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4&quot;&gt;Understanding the JavaScript Call Stack — Charles Freeborn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://web.archive.org/web/20180701233338/https://www.valentinog.com/blog/js-execution-context-call-stack/&quot;&gt;Javascript: What Is The Execution Context? What Is The Call Stack? — Valentino Gagliardi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://gist.github.com/jesstelford/9a35d20a2aa044df8bf241e00d7bc2d0&quot;&gt;What is the JS Event Loop and Call Stack? — Jess Telford&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Call_stack&quot;&gt;Call Stack — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0&quot;&gt;Understanding Execution Context and Execution Stack in Javascript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf&quot;&gt;How JavaScript Works: An Overview of the Engine, the Runtime, and the Call Stack — Alexander Zlatkov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/&quot;&gt;The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/bipinrajbhar/how-javascript-works-under-the-hood-an-overview-of-javascript-engine-heap-and-call-stack-1j5o&quot;&gt;How JavaScript Works Under The Hood: An Overview of JavaScript Engine, Heap and, Call Stack — Bipin Rajbhar&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=w6QGEiQceOM&quot;&gt;Javascript: the Call Stack explained — Coding Blocks India&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=W8AeMrVtFLY&quot;&gt;The JS Call Stack Explained In 9 Minutes — Colt Steele&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=jT0USJeNFEA&quot;&gt;JavaScript Execution Stack — Codecademy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=w7QWQlkLY_s&quot;&gt;What is the Call Stack? — Eric Traub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Q2sFmqvpBe0&quot;&gt;The Call Stack — Kevin Drumm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD&quot;&gt;Understanding JavaScript Execution — Codesmith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Nt-qa_LlUH0&quot;&gt;The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;What the heck is the event loop anyway? — Philip Roberts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ygA5U7Wgsg8&quot;&gt;La PILA DE EJECUCIÓN (Call Stack) de JavaScript — La Cocina del Código&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;2. Primitive Types&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://2ality.com/2012/04/number-encoding.html&quot;&gt;How numbers are encoded in JavaScript — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/javascripts-number-type-8d59199db1b6&quot;&gt;What You Need to Know About JavaScript Number Type — Max Wizard K&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/&quot;&gt;What Every JavaScript Developer Should Know About Floating Point Numbers — Chewxy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/&quot;&gt;The Secret Life of JavaScript Primitives — Angus Croll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://flow.org/en/docs/types/primitives/&quot;&gt;Primitive Types — Flow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/d4nyll/not-everything-in-javascript-is-an-object&quot;&gt;(Not) Everything in JavaScript is an Object — Daniel Li&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values&quot;&gt;JavaScript data types and data structures — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12&quot;&gt;Diving Deeper in JavaScripts Objects — Arfat Salman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c&quot;&gt;The differences between Object.freeze() vs Const in JavaScript — Bolaji Ayodeji&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=9ooYYRLdg_g&quot;&gt;JavaScript Reference vs Primitive Types — Academind&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=HsbWQsSCE5Y&quot;&gt;JavaScript Primitive Types — Simon Sez IT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=e-_mDyqm2oU&quot;&gt;Value Types and Reference Types in JavaScript — Programming with Mosh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qw3j0A3DIzQ&quot;&gt;JavaScript Primitive Data Types — Avelx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=MqHDDtVYJRI&quot;&gt;Everything you never wanted to know about JavaScript numbers — Bartek Szopka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=B4Bbmei_thw&quot;&gt;What are variables in Javascript? — JS For Everyone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=cC65D2q5f8I&quot;&gt;TIPOS DE DATOS PRIMITIVOS en JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;3. Value Types and Reference Types&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0&quot;&gt;Explaining Value vs. Reference in Javascript — Arnav Aggarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.zsoltnagy.eu/understand-value-and-reference-types-in-javascript/&quot;&gt;Understand Value and Reference Types in JavaScript — Zsolt Nagy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c&quot;&gt;Primitive Types &amp;amp; Reference Types in JavaScript — Bran van der Meer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@benastontweet/lesson-1b-javascript-fundamentals-380f601ba851&quot;&gt;Value Types, Reference Types and Scope in JavaScript — Ben Aston&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18&quot;&gt;Back to roots: JavaScript Value vs Reference — Miro Koczka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293&quot;&gt;Grasp “By Value” and “By Reference” in JavaScript — Léna Faure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0&quot;&gt;JavaScript Reference and Copy Variables — Vítor Capretz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/&quot;&gt;JavaScript Primitive vs Reference Values&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value&quot;&gt;JavaScript by Reference vs. by Value — nrabinowitz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f&quot;&gt;JavaScript Interview Prep: Primitive vs. Reference Types — Mike Cronin&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=E-dAnFdq8k8&quot;&gt;Javascript Pass by Value vs Pass by Reference — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=fD0t_DKREbE&quot;&gt;JavaScript Value vs Reference Types — Programming with Mosh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=AvkyOrWkuQc&quot;&gt;VALORES vs REFERENCIAS en JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;4. Implicit, Explicit, Nominal, Structuring and Duck Typing&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23&quot;&gt;What you need to know about Javascript&#39;s Implicit Coercion — Promise Tochi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839&quot;&gt;JavaScript Type Coercion Explained — Alexey Samoshkin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/javascript-coercion-explained-545c895213d3&quot;&gt;Javascript Coercion Explained — Ben Garrison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript&quot;&gt;What exactly is Type Coercion in Javascript? - Stack Overflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/types%20%26%20grammar&quot;&gt;You Don&#39;t Know JS: Types &amp;amp; Grammar, 1st Edition [Book] — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://thedevs.network/blog/type-coercion-in-javascript-and-why-everyone-gets-it-wrong&quot;&gt;Type Coercion in JavaScript, and why everyone gets it wrong.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qGyqzN0bjhc&amp;amp;t&quot;&gt;== ? === ??? ...#@^% - Shirmung Bielefeld&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=b04Q_vyqEG8&quot;&gt;Coercion in Javascript - Hitesh Choudhary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=z4-8wMSPJyI&quot;&gt;JavaScript Questions: What is Coercion? - Steven Hancock&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=C5fr0LZLMAs&quot;&gt;Typing: Static vs Dynamic, Weak vs. Strong - Codexpanse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=0ei4nb49GKo&quot;&gt;EL SISTEMA de TIPOS DE JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;5. == vs === vs typeof&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a&quot;&gt;JavaScript Double Equals vs. Triple Equals — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://bytearcher.com/articles/equality-comparison-operator-javascript/&quot;&gt;Should I use === or == equality comparison operator in JavaScript? — Panu Pitkamaki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codementor.io/javascript/tutorial/double-equals-and-coercion-in-javascript&quot;&gt;== vs === JavaScript: Double Equals and Coercion — AJ Meyghani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.impressivewebs.com/why-use-triple-equals-javascipt/&quot;&gt;Why Use the Triple-Equals Operator in JavaScript? — Louis Lazaris&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript&quot;&gt;What is the difference between == and === in JavaScript? — Craig Buckler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object&quot;&gt;Why javascript&#39;s typeof always return &quot;object&quot;? — Stack Overflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://tobyho.com/2011/01/28/checking-types-in-javascript/&quot;&gt;Checking Types in Javascript — Toby Ho&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://webbjocke.com/javascript-check-data-types/&quot;&gt;How to better check data types in JavaScript — Webbjocke&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html&quot;&gt;Checking for the Absence of a Value in JavaScript — Tomer Aberbach&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ol_su88I3kw&quot;&gt;JavaScript - The typeof operator — Java Brains&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qPYhTPt_SbQ&quot;&gt;Javascript typeof operator — DevDelight&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;6. Function Scope, Block Scope and Lexical Scope&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures&quot;&gt;You Don&#39;t Know JS Yet: Scope &amp;amp; Closures, 2nd Edition [Book] — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-functions-understanding-the-basics-207dbf42ed99&quot;&gt;JavaScript Functions — Understanding The Basics — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.deadcoderising.com/2017-04-11-es6-var-let-and-const-the-battle-between-function-scope-and-block-scope/&quot;&gt;The battle between Function Scope and Block Scope — Marius Herring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html&quot;&gt;Emulating Block Scope in JavaScript — Josh Clanton&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe&quot;&gt;The Difference Between Function and Block Scope in JavaScript — Joseph Cardillo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7&quot;&gt;Function Scopes and Block Scopes in JavaScript — Samer Buna&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://ryanmorr.com/understanding-scope-and-context-in-javascript/&quot;&gt;Understanding Scope and Context in JavaScript | Ryan Morr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/javascript-scope-closures/&quot;&gt;JavaScript Scope and Closures — Zell Liew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/&quot;&gt;Understanding Scope in JavaScript — Wissam Abirached&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://speakingjs.com/es5/ch16.html&quot;&gt;Speaking JavaScript - Variables: Scopes, Environments, and Closures — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/understanding-scope-in-javascript&quot;&gt;Understanding Scope in JavaScript ― Hammad Ahmed&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/when-to-use-a-function-declarations-vs-a-function-expression-70f15152a0a0&quot;&gt;When to use a function declaration vs. a function expression ― Amber Wilkie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/alexandrafren/a-javascript-fundamentals-cheat-sheet-scope-context-and-this-28ai&quot;&gt;A JavaScript Fundamentals Cheat Sheet: Scope, Context, and “this” ― Alexandra Fren&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=SBwoFkRjZvE&quot;&gt;What Makes Javascript Weird ... and Awesome pt. 4 — LearnCode.academy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=dhp57T3p760&quot;&gt;Variable Scope in JavaScript — Kirupa Chinnathambi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=aK_nuUAdr8E&quot;&gt;JavaScript Block Scope and Function Scope — mmtuts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=GhNA0r10MmA&quot;&gt;What the Heck is Lexical Scope? — NWCalvank&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;7. Expression vs Statement&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/promhize/javascript-in-depth-all-you-need-to-know-about-expressions-statements-and-expression-statements-5k2&quot;&gt;All you need to know about Javascript&#39;s Expressions, Statements and Expression Statements — Promise Tochi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/function-expressions-vs-declarations/&quot;&gt;Function Expressions vs Function Declarations — Paul Wilkins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38&quot;&gt;JavaScript Function — Declaration vs Expression — Ravi Roshan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052&quot;&gt;Function Declarations vs. Function Expressions — Mandeep Singh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/&quot;&gt;Function Declarations vs. Function Expressions — Anguls Croll&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=WVyCrI1cHi8&quot;&gt;Expressions vs. Statements in JavaScript — Hexlet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=3jDpNGJkupA&quot;&gt;JavaScript - Expression vs. Statement — WebTunings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=oB5rH_9bqAI&quot;&gt;Function Statements and Function Expressions — Codeacademy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;8. IIFE, Modules and Namespaces&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6&quot;&gt;Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0&quot;&gt;Do ES6 Modules make the case of IIFEs obsolete?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/&quot;&gt;A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers ― Jurgen Van de Moere&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;Modules ― Exploring JS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES modules: A cartoon deep-dive — Lin Clark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/understanding-es6-modules/&quot;&gt;Understanding ES6 Modules — Craig Buckler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/&quot;&gt;An overview of ES6 Modules in JavaScript — Brent Graham&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth&quot;&gt;ES6 Modules in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b&quot;&gt;ES6 modules, Node.js and the Michael Jackson Solution — Alberto Gimeno&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&quot;&gt;JavaScript Modules: A Beginner’s Guide — Preethi Kasireddy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/modules&quot;&gt;Using JavaScript modules on the web&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-modules-from-iifes-to-commonjs-to-es6-modules-4d10c16f55d4&quot;&gt;JavaScript Modules: From IIFEs to CommonJS to ES6 Modules — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/bhagatparwinder/iife-immediately-invoked-function-expressions-49c5&quot;&gt;IIFE: Immediately Invoked Function Expressions — Parwinder&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=3cbiZV4H22c&quot;&gt;Immediately Invoked Function Expression - Beau teaches JavaScript — freeCodeCamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=I5EntfMeIIQ&quot;&gt;Understanding JavaScript IIFE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=_3oSWwapPKQ&quot;&gt;JavaScript Modules: ES6 Import and Export — Kyle Robinson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=aQr2bV1BPyE&quot;&gt;ES6 - Modules — Ryan Christiani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=fIP4pjAqCtQ&quot;&gt;ES6 Modules in the Real World — Sam Thorogood&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=5P04OK6KlXA&quot;&gt;ES6 Modules — TempleCoding&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;9. Message Queue and Event Loop&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/javascript-event-loop-explained-4cd26af121d4&quot;&gt;JavaScript Event Loop Explained — Anoop Raveendran&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/&quot;&gt;The JavaScript Event Loop: Explained — Erin Sweson-Healey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.wptutor.io/web/js/javascript-event-loop&quot;&gt;What is the Event Loop in Javascript — WP Tutor.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40&quot;&gt;Understanding JS: The Event Loop — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.zeolearn.com/magazine/understanding-the-javascript-event-loop&quot;&gt;Understanding the JavaScript Event Loop — Ashish Gupta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://code.likeagirl.io/what-the-heck-is-event-loop-1e414fccef49&quot;&gt;Event Loop in Javascript — Manjula Dube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://flaviocopes.com/javascript-event-loop/&quot;&gt;The JavaScript Event Loop — Flavio Copes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5&quot;&gt;How JavaScript works: Event loop — Alexander Zlatkov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot;&gt;Tasks, microtasks, queues and schedules — Jake Archibald&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/presto412/visualising-the-javascript-event-loop-with-a-pizza-restaurant-analogy-47a8&quot;&gt;Visualising the JavaScript Event Loop with a Pizza Restaurant analogy — Priyansh Jain&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif&quot;&gt;JavaScript Visualized: Event Loop — Lydia Hallie&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;What the heck is the event loop anyway? | JSConf EU — Philip Roberts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XzXIMZMN9k4&quot;&gt;JavaScript Event Loop — ComScience Simplified&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=6MXRNXXgP_0&quot;&gt;I&#39;m stuck in an Event Loop — Philip Roberts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=cCOL7MC4Pl0&quot;&gt;In The Loop - Jake Archibald | JSConf.Asia 2018&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Eqq2Rb7LzYE&quot;&gt;Desmitificando el Event Loop (Spanish)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;10. setTimeout, setInterval and requestAnimationFrame&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/settimeout-setinterval&quot;&gt;setTimeout and setInterval — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9&quot;&gt;Why not to use setInterval — Akanksha Sharma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://develoger.com/settimeout-vs-setinterval-cff85142555b&quot;&gt;setTimeout VS setInterval — Develoger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/using-requestanimationframe/&quot;&gt;Using requestAnimationFrame — Chris Coyier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.javascriptkit.com/javatutors/requestanimationframe.shtml&quot;&gt;Understanding JavaScript&#39;s requestAnimationFrame() — JavaScript Kit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/&quot;&gt;Handling time intervals in JavaScript - Amit Merchant&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=6bPKyl8WYWI&quot;&gt;Javascript: How setTimeout and setInterval works — Coding Blocks India&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=TbCgGWe8LN8&quot;&gt;setTimeout and setInterval in JavaScript — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=0VVJSvlUgtg&quot;&gt;JavaScript Timers — Steve Griffith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=mVKfrWCOB60&quot;&gt;JavaScript setTimeOut and setInterval Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;11. JavaScript Engines&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.softwaremag.com/javascript-engines/&quot;&gt;JavaScript Engines — Jen Looper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964&quot;&gt;Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code — DroidHead&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775&quot;&gt;Understanding V8’s Bytecode — Franziska Hinkelmann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/&quot;&gt;A Brief History of Google’s V8 Javascript Engine — Clair Smith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553&quot;&gt;JavaScript essentials: why you should know how the engine works - Rainer Hahnekamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://mathiasbynens.be/notes/shapes-ics&quot;&gt;JavaScript engine fundamentals: Shapes and Inline Caches&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://mathiasbynens.be/notes/prototypes&quot;&gt;JavaScript engine fundamentals: optimizing prototypes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://v8.dev/blog/elements-kinds&quot;&gt;How V8 optimizes array operations&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=5nmpokoRaZI&quot;&gt;JavaScript Engines: The Good Parts™ — Mathias Bynens &amp;amp; Benedikt Meurer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;12. Bitwise Operators, Type Arrays and Array Buffers&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4&quot;&gt;Programming with JS: Bitwise Operations — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5&quot;&gt;Using JavaScript’s Bitwise Operators in Real Life — ian m&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.w3resource.com/javascript/operators/bitwise-operator.php&quot;&gt;JavaScript Bitwise Operators — w3resource&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3&quot;&gt;Bitwise Operators in Javascript — Joe Cha&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04&quot;&gt;A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript — Paul Brown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.quora.com/How-can-I-understand-Bitwise-operation-in-JavaScript&quot;&gt;How can I understand Bitwise operation in JavaScript?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=mesu75PTDC8&quot;&gt;JavaScript Bitwise Operators — Programming with Mosh&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;13. DOM and Layout Trees&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/introduction-to-the-dom&quot;&gt;How To Understand and Modify the DOM in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/whats-the-document-object-model-and-why-you-should-know-how-to-use-it-1a2d0bc5429d&quot;&gt;What’s the Document Object Model, and why you should know how to use it — Leonardo Maldonado&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html&quot;&gt;JavaScript DOM Tutorial with Example — Guru99&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/dom/&quot;&gt;What is the DOM? — Chris Coyier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://zellwk.com/blog/dom-traversals/&quot;&gt;Traversing the DOM with JavaScript — Zell Liew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://eloquentjavascript.net/14_dom.html&quot;&gt;Eloquent JavaScript [Book] — The Document Object Model&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/dom-nodes&quot;&gt;DOM Tree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-in-plain-english/how-to-traverse-the-dom-in-javascript-d6555c335b4e&quot;&gt;How to traverse the DOM in Javascript — Vojislav Grujić&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction&quot;&gt;Render Tree Construction — Ilya Grigorik&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://bitsofco.de/what-exactly-is-the-dom/&quot;&gt;What exactly is the DOM?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/bouhm/a-vanilla-js-guide-on-mastering-the-dom-3l9b&quot;&gt;A Vanilla JS Guide On Mastering the DOM — Brian Pak&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=FIORjGvT0kk&quot;&gt;JavaScript DOM — The Net Ninja&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=0ik6X4DJKCc&quot;&gt;JavaScript DOM Crash Course — Traversy Media&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;14. Factories and Classes&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript&quot;&gt;How To Use Classes in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677&quot;&gt;Javascript Classes — Under The Hood — Majid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.javascriptjanuary.com/blog/es6-classes&quot;&gt;ES6 Classes — Nathaniel Foster&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes&quot;&gt;Better JavaScript with ES6, Pt. II: A Deep Dive into Classes ― Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd&quot;&gt;Understand the Factory Design Pattern in Plain JavaScript — Aditya Agarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://atendesigngroup.com/blog/factory-functions-javascript&quot;&gt;Factory Functions in JavaScript — Josh Miller&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9&quot;&gt;The Factory Pattern in JS ES6 — SnstsDev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15&quot;&gt;Class vs Factory function: exploring the way forward — Cristi Salcescu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a&quot;&gt;How ES6 classes really work and how to build your own — Robert Grosse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jordankasper.com/understanding-super-in-javascript&quot;&gt;Understanding &lt;code&gt;super&lt;/code&gt; in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/lawrence_eagles/an-easy-guide-to-understanding-classes-in-javascript-3bcm&quot;&gt;An Easy Guide To Understanding Classes In JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=jpegXpQpb3o&quot;&gt;JavaScript Factory Functions — Programming with Mosh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ImwrezYhw4w&quot;&gt;Factory Functions in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=R7-IwpH80UE&quot;&gt;Javascript Tutorial Function Factories — Crypto Chan&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;15. this, call, apply and bind&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://levelup.gitconnected.com/grokking-call-apply-and-bind-methods-in-javascript-392351a4be8b&quot;&gt;Grokking call(), apply() and bind() methods in JavaScript — Aniket Kudale&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp&quot;&gt;How-to: call() , apply() and bind() in JavaScript — Niladri Sekhar Dutta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/&quot;&gt;JavaScript’s Apply, Call, and Bind Methods are Essential for JavaScript Professionals — Richard Bovell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/&quot;&gt;WTF is this - Understanding the this keyword, call, apply, and bind in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb&quot;&gt;Javascript: call(), apply() and bind() — Omer Goldberg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b&quot;&gt;The difference between call / apply / bind — Ivan Sifrim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/ritik_dev_js/what-the-hack-is-call-apply-bind-in-javascript-11ce&quot;&gt;What the hack is call, apply, bind in JavaScript — Ritik&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/&quot;&gt;Mastering &#39;this&#39; in JavaScript: Callbacks and bind(), apply(), call() — Michelle Gienow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo&quot;&gt;JavaScript’s apply, call, and bind explained by hosting a cookout — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb&quot;&gt;How AND When to use bind, call, and apply in Javascript — Eigen X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.hacksparrow.com/javascript-bind-vs-apply-and-call.html&quot;&gt;JavaScript .bind() vs .apply() and .call() — Hack Sparrow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;call() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot;&gt;bind() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;apply() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://blog.brew.com.hk/what-is-this-in-javascript/&quot;&gt;What is &#39;this&#39; in JavaScript? — Daniel Li&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja&quot;&gt;Let me explain to you what is &lt;code&gt;this&lt;/code&gt;. (Javascript) — Jason Yu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/quick-code/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8&quot;&gt;Understanding the “this” Keyword in JavaScript — Pavan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/how-to-understand-the-keyword-this-and-context-in-javascript-cd624c6b74b8&quot;&gt;How to understand the keyword this and context in JavaScript — Lukas Gisder-Dubé&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/_hridaysharma/what-the-heck-is-this-in-javascript-37n1&quot;&gt;What the heck is this in Javascript? — Hridayesh Sharma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/steelvoltage/this-and-bind-in-javascript-2pam&quot;&gt;This and Bind In Javascript — Brian Barbour&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/canderson93/3-techniques-for-maintaining-your-sanity-using-this-in-javascript-3idf&quot;&gt;3 Techniques for Maintaining Your Sanity Using &quot;This&quot; in JavaScript — Carl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/aakashsr/mastering-the-javascript-this-keyword-4pfa&quot;&gt;Mastering the JavaScript &quot;this&quot; Keyword — Aakash Srivastav&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/sargalias/this-binding-in-javascript-4-new-binding-2p1n&quot;&gt;This binding in JavaScript – 4. New binding — Spyros Argalias&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/thatgalnatalie/a-quick-intro-to-this-in-javascript-2mhp&quot;&gt;A quick intro to &#39;this&#39; in JavaScript — Natalie Smith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/cat__logic/explaining-javascript-this-to-my-cat-1kig&quot;&gt;Explaining JavaScript &#39;this&#39; to my cat — Andrey K&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/developerkaren/a-conversation-with-the-this-keyword-in-javascript-3j6g&quot;&gt;A conversation with the &#39;this&#39; keyword in Javascript — Karen Efereyan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jscurious.com/what-are-call-apply-and-bind-in-javascript/&quot;&gt;What are call(), apply() and bind() in JavaScript — Amitav Mishra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://yasemincidem.medium.com/understanding-this-binding-in-javascript-86687397c76d&quot;&gt;Understanding &#39;this&#39; binding in JavaScript — Yasemin Cidem&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=c0mLRpw-9rI&quot;&gt;JavaScript call, apply and bind — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=AYVYxezrMWA&quot;&gt;JavaScript Practical Applications of Call, Apply and Bind functions— techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Uy0NOXLBraE&quot;&gt;JavaScript (call, bind, apply) — curious aatma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=AOSYY1_np_4&quot;&gt;Understanding Functions and &#39;this&#39; In The World of ES2017 — Bryan Hughes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=GhbhD1HR5vk&quot;&gt;bind and this - Object Creation in JavaScript - FunFunFunction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=uBdH0iB1VDM&quot;&gt;JS Function Methods call(), apply(), and bind() — Steve Griffith&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;16. new, Constructor, instanceof and Instances&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e&quot;&gt;JavaScript For Beginners: the ‘new’ operator — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c&quot;&gt;Let’s demystify JavaScript’s ‘new’ keyword — Cynthia Lee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/constructor-new&quot;&gt;Constructor, operator &quot;new&quot; — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/understanding-javascript-constructors/&quot;&gt;Understanding JavaScript Constructors — Faraz Kelhini&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://openclassrooms.com/en/courses/3523231-learn-to-code-with-javascript/4379006-use-constructor-functions&quot;&gt;Use Constructor Functions — Openclassrooms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://2ality.com/2017/08/type-right.html&quot;&gt;Beyond &lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt;: simplifying dynamic type checks — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://appendto.com/2016/10/what-is-the-instanceof-operator-in-javascript/&quot;&gt;What Is the Instanceof Operator in JavaScript — appendTo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac&quot;&gt;Function and Object, instances of each other — Kiro Risk&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;17. Prototype Inheritance and Prototype Chain&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b&quot;&gt;Javascript : Prototype vs Class — Valentin PARSY&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://mathiasbynens.be/notes/prototypes&quot;&gt;JavaScript engine fundamentals: optimizing prototypes — Mathias Bynens&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-prototype-cb29d82b8809&quot;&gt;JavaScript Prototype — NC Patro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo&quot;&gt;Prototype in Javascript — Sandeep Ranjan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/prototypes-in-javascript-5bba2990e04b&quot;&gt;Prototypes in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872&quot;&gt;Prototype in JavaScript: it’s quirky, but here’s how it works — Pranav Jindal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2&quot;&gt;Understanding JavaScript: Prototype and Inheritance — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/_hridaysharma/understanding-classes-es5-and-prototypal-inheritance-in-javascript-n8d&quot;&gt;Understanding Classes (ES5) and Prototypal Inheritance in JavaScript — Hridayesh Sharma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/varundey/prototype-proto-and-prototypal-inheritance-in-javascript-2inl&quot;&gt;prototype, &lt;strong&gt;proto&lt;/strong&gt; and Prototypal inheritance in JavaScript — Varun Dey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/prototype-inheritance&quot;&gt;Prototypal Inheritance — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript&quot;&gt;How To Work with Prototypes and Inheritance in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e&quot;&gt;Master JavaScript Prototypes &amp;amp; Inheritance — Arnav Aggarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/this%20%26%20object%20prototypes&quot;&gt;You Don&#39;t Know JS: this &amp;amp; Object Prototypes, 1st Edition [Book] — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4&quot;&gt;JavaScript’s Prototypal Inheritance Explained Using CSS — Nash Vail&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://gist.github.com/derhuerst/a585c4916b1c361cc6f0&quot;&gt;Prototypal Inheritance in JavaScript — Jannis Redmann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.competa.com/blog/classical-prototypical-inheritance-javascript/&quot;&gt;Classical and Prototypical Inheritance in JavaScript — Danny Cornelisse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance&quot;&gt;Demystifying ES6 Classes And Prototypal Inheritance ― Neo Ighodaro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/danny/intro-to-prototypal-inheritance---js-9di&quot;&gt;Intro To Prototypal Inheritance — Dharani Jayakanthan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://blog.brew.com.hk/classes-in-javascript-explained/&quot;&gt;Classes in JavaScript - Explained — Daniel Li&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/varche/let-s-build-prototypal-inheritance-in-js-56mm&quot;&gt;Let’s Build Prototypal Inheritance in JS — var-che&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/attacomsian/objects-prototypes-and-classes-in-javascript-3i9b&quot;&gt;Objects, Prototypes and Classes in JavaScript — Atta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/shoupn/javascript-prototypes-and-object-creation-2onh&quot;&gt;JavaScript Prototypal Inheritance and Object Creation — Nick Shoup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/ladybenko/the-magical-world-of-javascript-prototypes-1mhg&quot;&gt;The magical world of JavaScript prototypes — Belén&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/lawrence_eagles/understanding-prototypal-inheritance-in-javascript-4f31#chp-4&quot;&gt;Understanding Prototypal Inheritance In JavaScript — Lawrence Eagles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/irenejpopova/objects-and-prototypes-in-javascript-2eie&quot;&gt;Objects and Prototypes in JavaScript — Irena Popova&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=sOrtAjyk4lQ&quot;&gt;Javascript Prototype Inheritance — Avelx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=7oNWNlMrkpc&quot;&gt;JavaScript Prototype Inheritance Explained pt. I — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=uIlj6_z_wL8&quot;&gt;JavaScript Prototype Inheritance Explained pt. II — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qMO-LTOrJaE&quot;&gt;JavaScript Prototype Inheritance Explained — Kyle Robinson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=G6l5CHl67HQ&quot;&gt;Advanced Javascript - Prototypal Inheritance In 1 Minute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=phwzuiJJPpQ&quot;&gt;An Overview Of Classical Javascript Classes and Prototypal Inheritance — Pentacode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=4jb4AYEyhRc&quot;&gt;Object Oriented JavaScript - Prototype — The Net Ninja&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=2rkEbcptR64&quot;&gt;Prototype in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=oCwCcNvaXAQ&quot;&gt;JavaScript Using Prototypes — O&#39;Reilly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XskMWBXNbp0&quot;&gt;A Beginner&#39;s Guide to Javascript&#39;s Prototype — Tyler Mcginnis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=hS_WqkyUah8&quot;&gt;Prototypes in Javascript - p5.js Tutorial — The Coding Train&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;18. Object.create and Object.assign&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;Object.create() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/object-create-in-javascript-fa8674df6ed2&quot;&gt;Object.create in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html&quot;&gt;Object.create(): the New Way to Create Objects in JavaScript — Rob Gravelle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html&quot;&gt;Basic Inheritance with Object.create — Joshua Clanton&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.geeksforgeeks.org/object-create-javascript/&quot;&gt;Object.create() In JavaScript — GeeksforGeeks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358&quot;&gt;Understanding the difference between Object.create() and the new operator — Jonathan Voxland&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/&quot;&gt;JavaScript Object Creation: Patterns and Best Practices — Jeff Mott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alligator.io/js/dealing-with-objects/&quot;&gt;Dealing With Objects in JavaScript With Object.assign, Object.keys and hasOwnProperty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/bar-talk/copying-objects-in-javascript&quot;&gt;Copying Objects in JavaScript ― Orinami Olatunji&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Object.assign() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-object-assign-bc9696dcbb6e&quot;&gt;JavaScript: Object.assign() — Thiago S. Adriano&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://flaviocopes.com/how-to-clone-javascript-object/&quot;&gt;How to deep clone a JavaScript Object — Flavio Copes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/nas5w/object-assignment-vs-primitive-assignment-in-javascript-for-beginners-2moi&quot;&gt;Object Assignment vs. Primitive Assignment in JavaScript for Beginners — Nick Scialli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/vzing/object-create-when-and-why-to-use-20m9&quot;&gt;Object.create(): When and Why to Use — VZing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=aw7NfYhR5rc&quot;&gt;Object.assign() explained — Aaron Writes Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=9Ky4X6inpi4&quot;&gt;Object.assign() Method — techsith&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;19. map, reduce, filter&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d&quot;&gt;JavaScript Functional Programming — map, filter and reduce — Bojan Gvozderac&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4&quot;&gt;Learn map, filter and reduce in Javascript — João Miguel Cunha&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter&quot;&gt;JavaScript’s Map, Reduce, and Filter — Dan Martensen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209&quot;&gt;How to Use Map, Filter, &amp;amp; Reduce in JavaScript — Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4&quot;&gt;JavaScript — Learn to Chain Map, Filter, and Reduce — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/write-beautiful-javascript-with-%CE%BB-fp-es6-350cd64ab5bf&quot;&gt;Javascript data structure with map, reduce, filter and ES6 — Deepak Gupta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464&quot;&gt;Understanding map, filter and reduce in Javascript — Luuk Gruijs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f&quot;&gt;Functional Programming in JS: map, filter, reduce (Pt. 5) — Omer Goldberg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://wsvincent.com/functional-javascript-map-filter-reduce/&quot;&gt;JavaScript: Map, Filter, Reduce — William S. Vincent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/&quot;&gt;Arrow Functions: Fat and Concise Syntax in JavaScript — Kyle Pennell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc&quot;&gt;JavaScript: Arrow Functions for Beginners — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26&quot;&gt;When (and why) you should use ES6 arrow functions — and when you shouldn’t — Cynthia Lee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946&quot;&gt;JavaScript — Learn &amp;amp; Understand Arrow Functions — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83&quot;&gt;(JavaScript )=&amp;gt; Arrow functions — sigu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@panderson.dev/javascript-reduce-79aab078da23&quot;&gt;Javascript.reduce() — Paul Anderson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://gofore.com/en/why-you-should-replace-foreach/&quot;&gt;Why you should replace forEach with map and filter in JavaScript — Roope Hakulinen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d&quot;&gt;Simplify your JavaScript – Use .map(), .reduce(), and .filter() — Etienne Talbot&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/&quot;&gt;JavaScript’s Reduce Method Explained By Going On a Diet — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@amiratak88/difference-between-map-filter-and-reduce-in-javascript-822ff79d5160&quot;&gt;Difference between map, filter and reduce in JavaScript — Amirata Khodaparast&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/map-filter-reduce-ebbed4be4201&quot;&gt;Map⇄Filter⇄Reduce↻ — ashay mandwarya&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/finding-your-way-with-map-aecb8ca038f6&quot;&gt;Finding Your Way With .map() — Brandon Wozniewicz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/how-to-write-your-own-map-filter-and-reduce-functions-in-javascript-ab1e35679d26&quot;&gt;How to write your own map, filter and reduce functions in JavaScript — Hemand Nair&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.freecodecamp.org/news/manipulating-arrays-in-javascript/&quot;&gt;How to Manipulate Arrays in JavaScript — Bolaji Ayodeji&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://itnext.io/15-useful-javascript-examples-of-map-reduce-and-filter-74cbbb5e0a1f&quot;&gt;How to simplify your codebase with map(), reduce(), and filter() in JavaScript — Alex Permyakov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/pickleat/map-filter-and-reduce-2efb&quot;&gt;.map(), .filter(), and .reduce() — Andy Pickle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/chrisachard/map-filter-reduce-crash-course-5gan&quot;&gt;Map/Filter/Reduce Crash Course — Chris Achard&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@js_tut/map-filter-and-reduce-animated-7fe391a35a47&quot;&gt;Map, Filter and Reduce – Animated — JavaScript Teacher&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209&quot;&gt;Map, Filter, Reduce and others Arrays Iterators You Must Know to Become an Algorithms Wizard — Mauro Bono&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/better-programming/how-to-javascripts-map-vs-filter-vs-reduce-80d87a5a0a24&quot;&gt;How to Use JavaScript’s .map, .filter, and .reduce — Avery Duffin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://towardsdatascience.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7&quot;&gt;Javascript performance test - for vs for each vs (map, reduce, filter, find) — Deepak Gupta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-in-plain-english/using-map-filter-and-reduce-properly-50e07f80c8b2&quot;&gt;Using .map(), .filter() and .reduce() properly — Sasanka Kudagoda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/sanderdebr/mastering-the-javascript-reduce-method-2foj&quot;&gt;Mastering the JavaScript Reduce method ✂️ — sanderdebr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=UXiYii0Y7Nw&quot;&gt;Map, Filter and Reduce — Lydia Hallie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=vytzLlY_wmU&quot;&gt;Functional JavaScript: Map, forEach, Reduce, Filter — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qTeeVd8hOFY&quot;&gt;JavaScript Array superpowers: Map, Filter, Reduce (part I) — Michael Rosata&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=gIm9xLYudL0&quot;&gt;JavaScript Array superpowers: Map, Filter, Reduce (part 2) — Michael Rosata&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=zYBeEPxNSbw&quot;&gt;JavaScript Higher Order Functions - Filter, Map, Sort &amp;amp; Reduce — Epicop&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=4qWlqD0yYTU&quot;&gt;[Array Methods 2/3] .filter + .map + .reduce — CodeWithNick&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=6sQDTgOqh-I&quot;&gt;Arrow functions in JavaScript - What, Why and How — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=e-5obm1G_FY&amp;amp;t=1521s&quot;&gt;Learning Functional Programming with JavaScript — Anjana Vakil - JSUnconf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=bCqtb-Z5YGQ&amp;amp;t=17s&quot;&gt;Map - Parte 2 JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Wl98eZpkp-c&quot;&gt;Reduce basics - Part 3 of FP in JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=1DMolJ2FrNY&amp;amp;t=621s&quot;&gt;Reduce Advanced - Part 4 of FP in JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=IXp06KekEjM&quot;&gt;reduce Array Method | JavaScript Tutorial - Florin Pop&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=P4RAFdZDn3M&quot;&gt;map Array Method | JavaScript Tutorial - Florin Pop&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;20. Pure Functions, Side Effects and State Mutation&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c&quot;&gt;Javascript and Functional Programming — Pure Functions — Omer Goldberg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976&quot;&gt;Master the JavaScript Interview: What is a Pure Function? — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c&quot;&gt;JavaScript: What Are Pure Functions And Why Use Them? — James Jeffery&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/&quot;&gt;Pure functions in JavaScript — @nicoespeon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/functional-programming-pure-functions/&quot;&gt;Functional Programming: Pure Functions — Arne Brasseur&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://appdividend.com/2017/04/10/pure-functions-in-javascript/&quot;&gt;Pure Functions In Javascript — Krunal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alistapart.com/article/making-your-javascript-pure&quot;&gt;Making your JavaScript Pure — Jack Franklin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://slemgrim.com/mutate-or-not-to-mutate/&quot;&gt;To mutate, or not to mutate, in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa&quot;&gt;Arrays, Objects and Mutations — Federico Knüssel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310&quot;&gt;The State of Immutability — Maciej Sikora&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/&quot;&gt;How to deal with dirty side effects in your pure functional JavaScript — James Sinclair&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://davidwalsh.name/preventing-sideeffects-javascript&quot;&gt;Preventing Side Effects in JavaScript — David Walsh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/wielding-pure-functions-in-javascript-and-function-composition&quot;&gt;Wielding Pure Functions in JavaScript and Function Composition — Peleke Sengstacke &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://wsvincent.com/javascript-pure-functions/&quot;&gt;JavaScript: Pure Functions — William S. Vincent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1&quot;&gt;Functional programming paradigms in modern JavaScript: Pure functions — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3&quot;&gt;Understanding Javascript Mutation and Pure Functions — Chidume Nnamdi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@bluepnume/functional-ish-javascript-205c05d0ed08&quot;&gt;Functional-ish JavaScript — Daniel Brain&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=dZ41D6LDSBg&quot;&gt;Pure Functions — Hexlet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Jh_Uzqzz_wM&quot;&gt;Pure Functions - Functional Programming in JavaScript — Paul McBride&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=frT3H-eBmPc&quot;&gt;JavaScript Pure Functions — Seth Alexander&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=AHbRVJzpB54&quot;&gt;JavaScript Pure vs Impure Functions Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=BMUiFMZr7vk&quot;&gt;Pure Functions - Programação Funcional: Parte 1 - Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;21. Closures&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closures — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8&quot;&gt;I never understood JavaScript closures — Olivier De Meulder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/closure&quot;&gt;Closure — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://javascriptissexy.com/understand-javascript-closures-with-ease/&quot;&gt;Understand JavaScript Closures With Ease — Richard Bovell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/understanding-javascript-closures-da6aab330302&quot;&gt;Understanding JavaScript Closures — Codesmith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/understand-closures-in-javascript-d07852fa51e7&quot;&gt;Understand Closures in JavaScript — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4&quot;&gt;A simple guide to help you understand closures in JavaScript — Prashant Ram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach&quot;&gt;Understanding JavaScript Closures: A Practical Approach — Paul Upendo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b&quot;&gt;Understanding JavaScript: Closures — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b&quot;&gt;How to use JavaScript closures with confidence — Léna Faure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example&quot;&gt;JavaScript closures by example — tyler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-closures-and-scope-3784c75b9290&quot;&gt;JavaScript — Closures and Scope — Alex Aitken&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7&quot;&gt;Discover the power of closures in JavaScript — Cristi Salcescu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://code.likeagirl.io/simplified-javascript-getting-started-with-closures-f40f65317d00&quot;&gt;Simplified JavaScript: Getting Started with Closures — Code Like A Girl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/&quot;&gt;The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://reallifejs.com/the-meat/getting-closure/&quot;&gt;Getting Closure — RealLifeJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/ritik_dev_js/what-the-hack-is-closure-currying-and-iife-in-javascript-32m9&quot;&gt;Closure, Currying and IIFE in JavaScript — Ritik&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.bitsrc.io/a-beginners-guide-to-closures-in-javascript-97d372284dda&quot;&gt;Understanding Closures in JavaScript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/a-basic-guide-to-closures-in-javascript-9fc8b7e3463e&quot;&gt;A basic guide to Closures in JavaScript — Parathan Thiyagalingam&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/steelvoltage/closures-using-memoization-3597&quot;&gt;Closures: Using Memoization — Brian Barbour&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/better-programming/a-brief-introduction-to-closures-and-lexical-scoping-in-javascript-8a5866496232&quot;&gt;A Brief Introduction to Closures and Lexical Scoping in JavaScript — Ashutosh K Singh &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/stereobooster/demystify-closures-5g42&quot;&gt;Demystify Closures — stereobooster&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/boywithsilverwings/scopes-and-closures-javascript-concepts-4dfj&quot;&gt;Scopes and Closures - JavaScript Concepts — Agney Menon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/mattpopovich/understanding-closures-in-javascript-3k0d&quot;&gt;Understanding Closures in JavaScript — Matt Popovich&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://whatthefuck.is/closure&quot;&gt;whatthefuck.is · A Closure - Dan Abramov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/brandonleboeuf/closure-in-javascript-49n7&quot;&gt;Closures in JavaScript can... - Brandon LeBoeuf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XTAzsODSCsM&quot;&gt;JavaScript The Hard Parts: Closure, Scope &amp;amp; Execution Context - Codesmith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=71AtaJpJHw0&quot;&gt;Javascript Closure — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=CQqwU2Ixu-U&quot;&gt;Closures — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=-xqJo5VRP4A&quot;&gt;Closures in JavaScript — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=yiEeiMN2Khs&quot;&gt;JavaScript Closures 101: What is a closure? — JavaScript Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=1JsJx1x35c0&quot;&gt;Closures — freeCodeCamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=-rLrGAXK8WE&quot;&gt;JavaScript Closures — CodeWorkr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;22. High Order Functions&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://eloquentjavascript.net/05_higher_order.html&quot;&gt;Higher-Order Functions — Eloquent JavaScript [Book]&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/higher-order-functions-javascript/&quot;&gt;Higher-Order Functions in JavaScript — M. David Green&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528&quot;&gt;Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code — Guido Schmitz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a&quot;&gt;First-class and Higher Order Functions: Effective Functional JavaScript — Hugo Di Francesco&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.lullabot.com/articles/higher-order-functions-in-javascript&quot;&gt;Higher Order Functions in JavaScript — John Hannah&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://javascriptissexy.com/tag/higher-order-functions/&quot;&gt;Higher-order Functions — Richard Bovell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.zsoltnagy.eu/higher-order-functions-in-javascript/&quot;&gt;Higher Order Functions in JavaScript — Zsolt Nagy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://derickbailey.com/2015/10/21/fun-with-higher-order-functions-in-javascript/&quot;&gt;Fun With Higher Order Functions In JavaScript — Derick&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/pedroapfilho/high-order-functions&quot;&gt;Just a reminder on how to use high order functions — Pedro Filho&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad&quot;&gt;Understanding Higher-Order Functions in JavaScript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/nas5w/what-is-a-higher-order-function-5gk9&quot;&gt;What is a Higher-Order Function? — Nick Scialli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/nuel_ikwuoma/higher-order-functions-a-pragmatic-approach-51fb&quot;&gt;Higher Order Functions - A pragmatic approach — emmanuel ikwuoma&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=rRgD1yVwIvE&quot;&gt;JavaScript Higher Order Functions &amp;amp; Arrays — Traversy Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=BMUiFMZr7vk&quot;&gt;Higher Order Functions — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=dTlpYnmBW9I&quot;&gt;Higher Order Functions in Javascript — Raja Yogan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=GYRMNp1SKXA&quot;&gt;Higher Order Iterators in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=H4awPsyugS0&quot;&gt;Higher Order Functions in JavaScript — The Coding Train&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=7E8ctomPQJw&quot;&gt;Part 1: An Introduction to Callbacks and Higher Order Functions - Codesmith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=28MXziDZkE4&quot;&gt;Part 2: Understanding Why We Need Higher Order Functions - Codesmith&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;23. Recursion&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f&quot;&gt;Recursion in JavaScript — Kevin Ennis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03&quot;&gt;Understanding Recursion in JavaScript — Zak Frisch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea&quot;&gt;Learn and Understand Recursion in JavaScript — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/recursion-functional-javascript/&quot;&gt;Recursion in Functional JavaScript — M. David Green&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/programming-with-js-recursion-31371e2bf808&quot;&gt;Programming with JS: Recursion — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/simov/anonymous-recursion-in-javascript&quot;&gt;Anonymous Recursion in JavaScript — simo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/&quot;&gt;Recursion, iteration and tail calls in JS — loverajoel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.thecodingdelight.com/understanding-recursion-javascript/&quot;&gt;Understanding Recursion in JavaScript with Confidence — Jay&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@newmanbradm/intro-to-recursion-984a8bd50f4b&quot;&gt;Intro to Recursion — Brad Newman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/datadriveninvestor/accio-recursion-your-new-favorite-javascript-spell-7e10d3125fb3&quot;&gt;Accio Recursion!: Your New Favorite JavaScript Spell — Leanne Cabey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/christinamcmahon/recursion-explained-with-examples-4k1m&quot;&gt;Recursion Explained (with Examples) — Christina&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=VtG0WAUvq2w&quot;&gt;Recursion In JavaScript — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=k7-N8R0-KY4&quot;&gt;Recursion — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=vLhHyGTkjCs&quot;&gt;Recursion and Recursive Functions — Hexlet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=kGXVsd8pBLw&quot;&gt;Recursion: Recursion() — JS Monthly — Lucas da Costa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=uyjsR9eNTIw&quot;&gt;Recursive Function in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Mv9NEXX1VHc&quot;&gt;What on Earth is Recursion? — Computerphile&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=9NO5dXSlbv8&quot;&gt;Javascript Tutorial 34: Introduction To Recursion — codedamn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=FmiQr4nfoPQ&quot;&gt;Recursion, Iteration, and JavaScript: A Love Story | JSHeroes 2018 — Anjana Vakil&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;24. Collections and Generators&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hacks.mozilla.org/2015/06/es6-in-depth-collections/&quot;&gt;ES6 In Depth: Collections — Jason Orendorff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/&quot;&gt;ES6 Collections: Using Map, Set, WeakMap, WeakSet — Kyle Pennell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth&quot;&gt;ES6 WeakMaps, Sets, and WeakSets in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alligator.io/js/sets-introduction/&quot;&gt;Introduction to Sets in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alligator.io/js/maps-introduction/&quot;&gt;Introduction to Maps in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/map-set-weakmap-weakset&quot;&gt;Map, Set, WeakMap and WeakSet — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk&quot;&gt;Maps in ES6 - A Quick Guide — Ben Mildren&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/es6-set-vs-array-what-and-when-efc055655e1a&quot;&gt;ES6 — Set vs Array — What and when? — Maya Shavin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373&quot;&gt;ES6 — Map vs Object — What and when? — Maya Shavin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.deadcoderising.com/es6-working-with-sets-in-javascript/&quot;&gt;ES6: Working with Sets in JavaScript — Dead Code Rising&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b&quot;&gt;Array vs Set vs Map vs Object — Real-time use cases in Javascript (ES6/ES7) — Rajesh Babu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6&quot;&gt;How to create an array of unique values in JavaScript using Sets — Claire Parker-Jones&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e&quot;&gt;What You Should Know About ES6 Maps — Just Chris&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/es6-maps-in-depth&quot;&gt;ES6 Maps in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator&quot;&gt;Generator — MDN web docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e&quot;&gt;What are JavaScript Generators and how to use them — Vladislav Stepanov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5&quot;&gt;Understanding JavaScript Generators With Examples — Arfat Salman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://davidwalsh.name/es6-generators&quot;&gt;The Basics of ES6 Generators — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/parkroolucas/here-s-everything-you-d-want-to-know-about-es2015-generators-13an&quot;&gt;Here&#39;s everything you&#39;d want to know about ES2015+ generators — Lucas Chen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/kallaugher/an-introduction-to-javascript-generators-1224&quot;&gt;An Introduction to JavaScript Generators — Alice Kallaugher&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ycohYSx5h9w&quot;&gt;JavaScript ES6 / ES2015 Set, Map, WeakSet and WeakMap — Traversy Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=m4abICrldQI&quot;&gt;The Differences between ES6 Maps and Sets — Steve Griffith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=QO07THdLWQo&quot;&gt;Javascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators — LearnCode.academy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;25. Promises&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/javascript-promises-for-dummies&quot;&gt;JavaScript Promises for Dummies ― Jecelyn Yeen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1&quot;&gt;Understanding promises in JavaScript — Gokul N K&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261&quot;&gt;Master the JavaScript Interview: What is a Promise? — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/overview-javascript-promises/&quot;&gt;An Overview of JavaScript Promises — Sandeep Panda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de&quot;&gt;How to use Promises in JavaScript — Prashant Ram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51&quot;&gt;Implementing Promises In JavaScript — Maciej Cieslar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138&quot;&gt;JavaScript: Promises explained with simple real life analogies — Shruti Kapoor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://exploringjs.com/es6/ch_promises.html&quot;&gt;Promises for Asynchronous Programming — Exploring JS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/&quot;&gt;JavaScript Promises Explained By Gambling At A Casino — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918&quot;&gt;ES6 Promises: Patterns and Anti-Patterns — Bobby Brennan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a&quot;&gt;A Simple Guide to ES6 Promises — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/the-es6-promises-87a979ab27e4&quot;&gt;The ES6 Promises — Manoj Singh Negi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth&quot;&gt;ES6 Promises in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/playing-with-javascript-promises-a-comprehensive-approach-25ab752c78c3&quot;&gt;Playing with Javascript Promises: A Comprehensive Approach — Rajesh Babu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/how-to-write-a-javascript-promise-4ed8d44292b8&quot;&gt;How to Write a JavaScript Promise — Brandon Wozniewicz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@andrewly07/a-coding-writers-guide-an-introduction-to-es6-promises-9ff9f9e88f6c&quot;&gt;A Coding Writer’s Guide: An Introduction To ES6 Promises — Andrew Ly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/full_stackgeek/asynchronous-javascript-callbacks-closures-promises-353h&quot;&gt;Asynchronous JavaScript | Callbacks | Closures | Promises — Full Stack Geek&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/itnext/reverse-engineering-understand-promises-1jfc&quot;&gt;Understanding Promises in JavaScript — Chris Noring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/zellwk/converting-callbacks-to-promises-nhn&quot;&gt;Converting callbacks to promises — Zell Liew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/javascript-promises-zero-to-hero-plus-cheat-sheet-64d75051cffa&quot;&gt;JavaScript Promises: Zero To Hero Plus Cheat Sheet — Joshua Saunders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/boywithsilverwings/promises-javascript-concepts-293c&quot;&gt;Promises - JavaScript concepts — Agney Menon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/iggredible/javascript-promise-101-3idl&quot;&gt;Javascript &lt;code&gt;Promise&lt;/code&gt; 101 — Igor Irianto&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/sunnysingh/simplify-javascript-promises-4djb&quot;&gt;Simplify JavaScript Promises — Sunny Singh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/better-programming/the-low-down-on-promises-af4a96bbb95f&quot;&gt;The Lowdown on Promises — Aphinya Dechalert&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke&quot;&gt;JavaScript Visualized: Promises &amp;amp; Async/Await — Lydia Hallie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/peterklingelhofer/promises-in-javascript-3h5k&quot;&gt;Promises in JavaScript — Peter Klingelhofer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/somedood/best-practices-for-es6-promises-36da&quot;&gt;Best Practices for ES6 Promises — Basti Ortiz&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=vQ3MoXnKfuQ&quot;&gt;Let&#39;s Learn ES6 - Promises — Ryan Christiani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XJEHuBZQ5dU&quot;&gt;JavaScript ES6 / ES2015 Promises — Traversy Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=2d7s3spWAzo&quot;&gt;Promises — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=f8IgdnYIwOU&quot;&gt;Error Handling Promises in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=QO4NXhWo_NM&quot;&gt;Promises Part 1 - Topics of JavaScript/ES6 — The Coding Train&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;26. async/await&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/async-await&quot;&gt;async/await — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c&quot;&gt;Understanding async/await in Javascript — Gokul N K&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://eloquentjavascript.net/11_async.html&quot;&gt;Asynchronous Programming — Eloquent JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alligator.io/js/async-functions/&quot;&gt;Exploring Async/Await Functions in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/asynchronous-javascript-using-async-await&quot;&gt;Asynchronous Javascript using async/await — Joy Warugu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://flaviocopes.com/javascript-async-await/&quot;&gt;Modern Asynchronous JavaScript with async/await — Flavio Copes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial&quot;&gt;Asynchronous JavaScript: From Callback Hell to Async and Await — Demir Selmanovic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a&quot;&gt;Javascript — ES8 Introducing async/await Functions — Ben Garrison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c&quot;&gt;How to escape async/await hell — Aditya Agarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/understanding-javascript-async-await&quot;&gt;Understanding JavaScript’s async await — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://techbrij.com/javascript-async-await-parallel-sequence&quot;&gt;JavaScript Async/Await: Serial, Parallel and Complex Flow — TechBrij&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://exploringjs.com/es6/ch_async.html&quot;&gt;Asynchronous Programming — Exploring JS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.pusher.com/promises-async-await/&quot;&gt;From JavaScript Promises to Async/Await: why bother? — Chris Nwamba&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/flow-control-callbacks-promises-async-await/&quot;&gt;Flow Control in Modern JS: Callbacks to Promises to Async/Await — Craig Buckler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dzone.com/articles/javascript-promises-and-why-asyncawait-wins-the-ba&quot;&gt;JavaScript: Promises and Why Async/Await Wins the Battle — Nick Parsons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/how-to-master-async-await-with-this-real-world-example-19107e7558ad&quot;&gt;How To Master Async/Await With This Real World Example — Adrian Hajdin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/improve-your-asynchronous-javascript-code-with-async-and-await-c02fc3813eda&quot;&gt;How to improve your asynchronous Javascript code with async and await — Indrek Lasn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@micksheridan.24/making-fetches-easy-with-async-await-8a1246efa1f6&quot;&gt;Making Fetches Easy With Async Await — Mickey Sheridan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9&quot;&gt;7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises — Mostafa Gaafar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/jscrambler/asynchronous-operations-in-javascript-2p6b&quot;&gt;Asynchronous Operations in JavaScript — Jscrambler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/joeyhub/async-await-a-slight-design-flaw-2h2j&quot;&gt;Async/await: A slight design flaw. — Joey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/better-programming/should-i-use-promises-or-async-await-126ab5c98789&quot;&gt;JavaScript: Promises or async-await — Gokul N K&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/zhiyuanamos/async-await-from-zero-to-hero-a22&quot;&gt;Async / Await: From Zero to Hero — Zhi Yuan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke&quot;&gt;JavaScript Visualized: Promises &amp;amp; Async/Await — Lydia Hallie&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=9YkUCxvaLEk&quot;&gt;Async + Await — Wes Bos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=SrNQS8J67zc&quot;&gt;Asynchrony: Under the Hood — Shelley Vohr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=568g8hxJJp4&amp;amp;index=3&amp;amp;list=PL0zVEGEvSaeHJppaRLrqjeTPnCH6&quot;&gt;async/await in JavaScript - What, Why and How — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XO77Fib9tSI&amp;amp;index=3&amp;amp;list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx&quot;&gt;async/await Part 1 - Topics of JavaScript/ES8 — The Coding Train&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=chavThlNz3s&amp;amp;index=4&amp;amp;list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx&quot;&gt;async/await Part 2 - Topics of JavaScript/ES8 — The Coding Train&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=krAYA4rvbdA&quot;&gt;Complete Guide to JS Async &amp;amp; Await ES2017/ES8 — Colt Steele&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;27. Data Structures&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c&quot;&gt;Data Structures in JavaScript — Thon Ly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb&quot;&gt;Algorithms and Data Structures in JavaScript — Oleksii Trekhleb&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays&quot;&gt;Data Structures: Objects and Arrays ― Chris Nwamba&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/&quot;&gt;Data structures in JavaScript — Benoit Vallon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d&quot;&gt;Playing with Data Structures in Javascript — Anish K.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9&quot;&gt;The Little Guide of Queue in JavaScript — Germán Cutraro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/barretlee/algorithms&quot;&gt;All algorithms writing with JavaScript in the book &#39;Algorithms Fourth Edition&#39;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/nzakas/computer-science-in-javascript&quot;&gt;Collection of classic computer science paradigms in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/jamiebuilds/itsy-bitsy-data-structures&quot;&gt;All the things you didn&#39;t know you wanted to know about data structures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/miku86/series/3259&quot;&gt;JavaScript Data Structures: 40 Part Series — miku86&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-in-plain-english/data-structures-understanding-graphs-82509d35e6b5&quot;&gt;Data Structures: Understanding Graphs — Rachel Hawa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/freddieduffield/data-structures-two-ways-linked-list-2n61&quot;&gt;Data Structures Two Ways: Linked List (Pt 1) — Freddie Duffield&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/freddieduffield/data-structures-two-ways-linked-list-pt2-2i60&quot;&gt;Data Structures Two Ways: Linked List (Pt 2) — Freddie Duffield&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/amejiarosario/graph-data-structures-for-beginners-5edn&quot;&gt;Graph Data Structures Explained in JavaScript — Adrian Mejia&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=PylQlISSH8U&amp;amp;list=PLujX4CIdBGCa-65N3uN8CDbUMrYsHBrz-&quot;&gt;Algorithms in JavaScript — Seth Koch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=H_EBPZgiAas&amp;amp;list=PLDmvslp_VR0zYUSth_8O69p4_cmvZEgLa&quot;&gt;Algorithms In Javascript | Ace Your Interview — Eduonix Learning Solutions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Gj5qBheGOEo&amp;amp;list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ&quot;&gt;Data Structures and Algorithms in JavaScript — freeCodeCamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Ymh_AurrMbA&quot;&gt;Learning JavaScript Data Structures and Algorithms: Sorting — Packt Video&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;28. Expensive Operation and Big O Notation&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b&quot;&gt;Big O Notation in Javascript — César Antón Dorantes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b&quot;&gt;Time Complexity/Big O Notation — Tim Roberts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051&quot;&gt;Big O in JavaScript — Gabriela Medina&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html&quot;&gt;Big O Search Algorithms in JavaScript — Bradley Braithwaite&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.jenniferbland.com/time-complexity-analysis-in-javascript/&quot;&gt;Time Complexity Analysis in JavaScript — Jennifer Bland&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c&quot;&gt;Algorithms in plain English: time complexity and Big-O Notation — Michael Olorunnisola&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/lofiandcode/an-introduction-to-big-o-notation-210o&quot;&gt;An Introduction to Big O Notation — Joseph Trettevik&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=HgA5VOFan5E&quot;&gt;JavaScript: Intro to Big O Notation and Function Runtime — Eric Traub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=KatlvCFHPRo&quot;&gt;Essential Big O for JavaScript Developers — Dave Smith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ALl86xJiTD8&quot;&gt;Big O Notation - Time Complexity Analysis — WebTunings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;29. Algorithms&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/Crizstian/data-structure-and-algorithms-with-ES6&quot;&gt;Data Structures and Algorithms using ES6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms&quot;&gt;Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.thatjsdude.com/interview/js1.html&quot;&gt;JS: Interview Algorithm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038&quot;&gt;Algorithms in JavaScript — Thon Ly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158&quot;&gt;JavaScript Objects, Square Brackets and Algorithms — Dmitri Grabov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/felipernb/algorithms.js&quot;&gt;Atwood&#39;s Law applied to CS101 - Classic algorithms and data structures implemented in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/yangshun/lago&quot;&gt;Data Structures and Algorithms library in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/idosela/algorithms-in-javascript&quot;&gt;Collection of computer science algorithms and data structures written in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/trekhleb/algorithms-and-data-structures-in-javascript-49i3&quot;&gt;Algorithms and Data Structures in JavaScript — Oleksii Trekhleb&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;30. Inheritance, Polymorphism and Code Reuse&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/class-inheritance&quot;&gt;Class inheritance, super — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance&quot;&gt;Inheritance in JavaScript — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/inheritance-in-javascript-21d2b82ffa6f&quot;&gt;Inheritance in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/simple-inheritance-javascript/&quot;&gt;Simple Inheritance with JavaScript — David Catuhe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-inheritance-25fe61ab9f85&quot;&gt;JavaScript — Inheritance, delegation patterns and Object linking — NC Patro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/&quot;&gt;Object Oriented JavaScript: Polymorphism with examples — Knoldus Blogs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/yld-engineering-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2&quot;&gt;Program Like Proteus — A beginner’s guide to polymorphism in Javascript — Sam Galson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/&quot;&gt;Object-oriented JavaScript: A Deep Dive into ES6 Classes — Jeff Mott&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=yXlFR81tDBM&quot;&gt;Inheritance in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=RBLIm5LMrmc&quot;&gt;JavaScript ES6 Classes and Inheritance — Traversy Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=zdovG9cuEBA&quot;&gt;Polymorphism in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;31. Design Patterns&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know&quot;&gt;4 JavaScript Design Patterns You Should Know — Devan Patel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15&quot;&gt;JavaScript Design Patterns – Beginner&#39;s Guide to Mobile Web Development — Soumyajit Pathak&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/javascript-design-patterns-ed9d4c144c81&quot;&gt;JavaScript Design Patterns — Akash Pal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://seesparkbox.com/foundry/javascript_design_patterns&quot;&gt;Javascript Design Patterns: What They Are &amp;amp; How To Use Them — Patrick Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.bitsrc.io/understanding-design-patterns-in-javascript-13345223f2dd&quot;&gt;JavaScript Design Patterns: Understanding Design Patterns in JavaScript - Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/fbeline/Design-Patterns-JS&quot;&gt;All the 23 (GoF) design patterns implemented in Javascript — Felipe Beline&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/better-programming/the-power-of-the-module-pattern-in-javascript-3c73f7cd10e8&quot;&gt;The Power of the Module Pattern in JavaScript — jsmanifest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;Learning JavaScript Design Patterns — Addy Osmani &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e&quot;&gt;Design Patterns for Developers using JavaScript pt. I — Oliver Mensah&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/omensah/design-patterns-for-developers-using-javascript---part-two--3p39&quot;&gt;Design Patterns for Developers using JavaScript pt. II — Oliver Mensah&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca&quot;&gt;Design patterns in modern JavaScript development&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/carlillo/understanding-design-patterns-iterator-using-dev-to-and-medium-social-networks-3bdd&quot;&gt;Understanding Design Patterns: Iterator using Dev.to and Medium social networks! — Carlos Caballero&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/kristijanfistrek/javascript-design-patterns-factory-pattern-562p&quot;&gt;JavaScript Design Patterns - Factory Pattern — KristijanFištrek&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-in-plain-english/javascript-design-pattern-module-pattern-555737eccecd&quot;&gt;JavaScript Design Pattern — Module Pattern - Factory Pattern — Moon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/better-programming/design-patterns-null-object-5ee839e37892&quot;&gt;Design Patterns: Null Object - Carlos Caballero&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/francescoxx/strategy-pattern-5oh&quot;&gt;Strategy Pattern - Francesco Ciulla&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/francescoxx/adapter-pattern-5bjk&quot;&gt;Adapter Pattern - Francesco Ciulla&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/jsmanifest/the-power-of-composite-pattern-in-javascript-2732&quot;&gt;The Power of Composite Pattern in JavaScript - jsmanifest&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/bytebodger/in-defense-of-defensive-programming-k45&quot;&gt;In Defense of Defensive Programming - Adam Nathaniel Davis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.udacity.com/course/javascript-design-patterns--ud989&quot;&gt;JavaScript Design Patterns — Udacity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=hO7mzO83N1Q&quot;&gt;JavaScript Patterns for 2017 — Scott Allen&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;32. Partial Applications, Currying, Compose and Pipe&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codementor.io/michelre/use-function-composition-in-javascript-gkmxos5mj&quot;&gt;Use function composition in JavaScript — Rémi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400&quot;&gt;Currying in JavaScript ES6 — Adam Bene&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b&quot;&gt;Composition and Currying Elegance in JavaScript — Pragyan Das&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10&quot;&gt;Functional JavaScript: Function Composition For Every Day Use — Joel Thoms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f&quot;&gt;Functional Composition: compose() and pipe() — Anton Paras&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://busypeoples.github.io/post/functional-composing-javascript/&quot;&gt;Why The Hipsters Compose Everything: Functional Composing In JavaScript — A. Sharif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/&quot;&gt;A Gentle Introduction to Functional JavaScript pt III: Functions for making functions — James Sinclair&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/&quot;&gt;Curry And Compose (why you should be using something like ramda in your code) — jsanchesleao&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://vanslaars.io/post/create-pipe-function/&quot;&gt;Function Composition in JavaScript with Pipe — Andy Van Slaars&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.telerik.com/featured/practical-functional-javascript-ramda/&quot;&gt;Practical Functional JavaScript with Ramda — Andrew D&#39;Amelio, Yuri Takhteyev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574&quot;&gt;The beauty in Partial Application, Currying, and Function Composition — Joel Thoms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8&quot;&gt;Curry or Partial Application? — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://benalman.com/news/2012/09/partial-application-in-javascript/&quot;&gt;Partial Application in JavaScript — Ben Alman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/partial-application-of-functions-dbe7d9b80760&quot;&gt;Partial Application of Functions — Functional Reactive Ninja&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-currying-vs-partial-application-4db5b2442be8&quot;&gt;Currying vs Partial Application — Deepak Gupta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://raganwald.com/2015/04/01/partial-application.html&quot;&gt;Partial Application in ECMAScript 2015 — Ragan Wald&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://joecortopassi.com/articles/functional-composition-in-javascript/&quot;&gt;Functional Composition in Javascript — Joe Cortopassi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536&quot;&gt;So You Want to be a Functional Programmer pt. I — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a&quot;&gt;So You Want to be a Functional Programmer pt. II — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7&quot;&gt;So You Want to be a Functional Programmer pt. III — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49&quot;&gt;So You Want to be a Functional Programmer pt. IV — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a&quot;&gt;So You Want to be a Functional Programmer pt. V — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch3.md&quot;&gt;Functional-Light JavaScript Chapter 3: Managing Function Inputs — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84&quot;&gt;An introduction to the basic principles of Functional Programming — TK&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/the-renaissance-developer/concepts-of-functional-programming-in-javascript-6bc84220d2aa&quot;&gt;Concepts of Functional Programming in Javascript — TK&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/an-introduction-to-functional-programming-style-in-javascript-71fcc050f064&quot;&gt;An Introduction to Functional Programming Style in JavaScript — JavaScript Teacher&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/a-practical-guide-to-writing-more-functional-javascript-db49409f71&quot;&gt;A practical guide to writing more functional JavaScript — Nadeesha Cabral&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj&quot;&gt;A simple explanation of functional pipe in JavaScript — Ben Lesh&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Wl2ejJOqHUU&quot;&gt;Compose vs Pipe: Functional Programming in JavaScript — Chyld Studios&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=jigHxo9YR30&quot;&gt;JavaScript Functional Programing: Compose — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=mth5WpEc4Qs&quot;&gt;Function Composition - Functional JavaScript — NWCalvank&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Uam37AlzPYw&quot;&gt;JavaScript Function Composition Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=VGB9HbL1GHk&quot;&gt;Let&#39;s code with function composition — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=DzLkRsUN2vE&quot;&gt;Partial Application vs. Currying — NWCalvank&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=jkebgHEcvac&quot;&gt;JavaScript Partial Application — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;33. Clean Code&lt;/h2&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript&quot;&gt;Clean Code concepts adapted for JavaScript — Ryan McDermott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/&quot;&gt;JavaScript Clean Coding Best Practices — András Tóth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@kevin_peters/function-parameters-in-javascript-clean-code-4caac109159b&quot;&gt;Function parameters in JavaScript Clean Code — Kevin Peters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/keeping-your-code-clean-d30bcffd1a10&quot;&gt;Keeping your code clean — Samuel James&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/modern-javascript-best-practices/&quot;&gt;Best Practices for Using Modern JavaScript Syntax — M. David Green&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/cross-js/cross-js&quot;&gt;best practices for cross node/web development - Jimmy Wärting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/ganderzz/on-writing-clean-code-57cm&quot;&gt;Writing Clean Code - Dylan Paulus&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/nityeshaga/writing-clean-code-and-the-practice-of-programming-actionable-advice-for-beginners-5f0k&quot;&gt;Writing Clean Code and The Practice of Programming - Nityesh Agarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/d_ir/clean-code-dirty-code-human-code-6nm&quot;&gt;Clean code, dirty code, human code - Daniel Irvine&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/taillogs/practical-ways-to-write-better-javascript-26d4&quot;&gt;Practical Ways to Write Better JavaScript - Ryland G&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Mus_vwhTCq0&quot;&gt;JavaScript Pro Tips - Code This, NOT That&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=RR_dQ4sBSBM&quot;&gt;Clean Code: Functions(Part 1) - Beau teaches&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&quot;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nuxt/nuxt.js</title>
      <link>https://github.com/nuxt/nuxt.js</link>
      <description>&lt;p&gt;The Intuitive Vue Framework&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;Build your next Vue.js application with confidence using Nuxt: a framework making web development simple and powerful.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;📘 Documentation: &lt;a href=&quot;https://nuxtjs.org&quot;&gt;https://nuxtjs.org&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👥 Community: &lt;a href=&quot;https://cmty.app/nuxt&quot;&gt;cmty.app/nuxt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎬 Video: &lt;a href=&quot;https://www.youtube.com/watch?v=kmf-p-pTi40&quot;&gt;1 minute demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🐦 Twitter: &lt;a href=&quot;https://twitter.nuxtjs.org/&quot;&gt;@nuxt_js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;💬 Chat: &lt;a href=&quot;https://discord.nuxtjs.org/&quot;&gt;Discord&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🌟 &lt;a href=&quot;https://awesome.nuxtjs.org/&quot;&gt;AwesomeNuxt&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;👉 &lt;a href=&quot;https://template.nuxtjs.org&quot;&gt;Play with Nuxt online&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Automatic transpilation and bundling (with webpack and babel)&lt;/li&gt; 
 &lt;li&gt;Hot code reloading&lt;/li&gt; 
 &lt;li&gt;Server-side rendering OR Single Page App OR Static Generated, you choose :fire:&lt;/li&gt; 
 &lt;li&gt;Static file serving. &lt;code&gt;./static/&lt;/code&gt; is mapped to &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Configurable with a &lt;code&gt;nuxt.config.js&lt;/code&gt; file&lt;/li&gt; 
 &lt;li&gt;Custom layouts with the &lt;code&gt;layouts/&lt;/code&gt; directory&lt;/li&gt; 
 &lt;li&gt;Middleware&lt;/li&gt; 
 &lt;li&gt;Code splitting for every &lt;code&gt;pages/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Loading just the critical CSS (page-level)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Learn more at &lt;a href=&quot;https://nuxtjs.org&quot;&gt;https://nuxtjs.org&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ npx create-nuxt-app &amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It&#39;s as simple as that!&lt;/p&gt; 
&lt;p&gt;Learn more at https://nuxtjs.org/guide/installation&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Please take a look at &lt;a href=&quot;https://nuxtjs.org/examples&quot;&gt;https://nuxtjs.org/examples&lt;/a&gt; or directly in &lt;a href=&quot;https://github.com/nuxt/nuxt.js/tree/dev/examples&quot;&gt;https://github.com/nuxt/nuxt.js/tree/dev/examples&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Production deployment&lt;/h2&gt; 
&lt;p&gt;To deploy, instead of running nuxt, you probably want to build ahead of time. Therefore, building and starting are separate commands:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nuxt build
nuxt start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Learn more at https://nuxtjs.org/guide/commands#production-deployment&lt;/p&gt; 
&lt;h2&gt;Consulting from the Nuxt team&lt;/h2&gt; 
&lt;p&gt;Get help with that tough bug or make sure your Nuxt app is ready to deploy. For $250 an hour, get technical support, advice, code reviews, and development from the Nuxt core team: &lt;a href=&quot;https://otechie.com/nuxt?ref=readme&quot;&gt;Hire Nuxt on Otechie&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Professional support with TideLift&lt;/h2&gt; 
&lt;p&gt;Professionally supported Nuxt is now available!&lt;/p&gt; 
&lt;p&gt;Tidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://tidelift.com/subscription/pkg/npm-nuxt?utm_source=npm-nuxt&amp;amp;utm_medium=readme&quot;&gt;Get supported Nuxt with the Tidelift Subscription&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supporting Nuxt&lt;/h2&gt; 
&lt;p&gt;Nuxt is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome backers. Funds donated via OpenCollective are managed with transparent expenses and will be used for compensating work and expenses for core team members or sponsoring community events.&lt;/p&gt; 
&lt;p&gt;Support us with a monthly donation and help us continue our activities. [&lt;a href=&quot;https://opencollective.com/nuxtjs#contribute&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;h3&gt;Platinum Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/nuxtjs#contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/platinum-sponsors.svg?avatarHeight=96&amp;amp;width=890&quot; alt=&quot;Open Collective Platinum Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Gold Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/nuxtjs#contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/gold-sponsors.svg?avatarHeight=80&amp;amp;width=890&quot; alt=&quot;Open Collective Gold Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Silver Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/nuxtjs#contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/silver-sponsors.svg?avatarHeight=64&amp;amp;width=890&quot; alt=&quot;Open Collective Silver Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Bronze Sponsors&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/nuxtjs#contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/tiers/bronze-sponsors.svg?avatarHeight=48&amp;amp;width=890&quot; alt=&quot;Open Collective Bronze Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thank you to all our &lt;a href=&quot;https://github.com/nuxt/nuxt.js/graphs/contributors&quot;&gt;contributors&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nuxt/nuxt.js/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/nuxtjs/contributors.svg?width=890&amp;amp;button=false&quot; alt=&quot;Nuxt Contributors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/nuxt/nuxt.js&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please refer to our &lt;a href=&quot;https://nuxtjs.org/guide/contribution-guide#codefund_ad&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Cross-browser testing&lt;/h2&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;http://browserstack.com&quot;&gt;BrowserStack&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Automated testing&lt;/h2&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://saucelabs.com&quot;&gt;SauceLabs&lt;/a&gt; for supporting Open Source &amp;lt;3&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover a security vulnerability regarding Nuxt, please send an e-mail to the team via security@nuxtjs.org! All security vulnerabilities will be promptly addressed.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/nuxt/nuxt.js/blob/dev/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>goldbergyoni/nodebestpractices</title>
      <link>https://github.com/goldbergyoni/nodebestpractices</link>
      <description>&lt;p&gt;✅ The Node.js best practices list (March 2021)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Best Practices&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nodepractices/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/twitter-s.png&quot; alt=&quot;nodepractices&quot;&gt;&lt;/a&gt; &lt;strong&gt;Follow us on Twitter!&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/nodepractices/&quot;&gt;&lt;strong&gt;@nodepractices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Read in a different language: &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.chinese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/CN.png&quot; alt=&quot;CN&quot;&gt;&lt;strong&gt;CN&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.brazilian-portuguese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/BR.png&quot; alt=&quot;BR&quot;&gt;&lt;strong&gt;BR&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.russian.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/RU.png&quot; alt=&quot;RU&quot;&gt;&lt;strong&gt;RU&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.polish.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/PL.png&quot; alt=&quot;PL&quot;&gt;&lt;strong&gt;PL&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.japanese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/JA.png&quot; alt=&quot;JA&quot;&gt;&lt;strong&gt;JA&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.basque.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png&quot; alt=&quot;EU&quot;&gt;&lt;strong&gt;EU&lt;/strong&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translations&quot;&gt;(&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/ES.png&quot; alt=&quot;ES&quot;&gt;&lt;strong&gt;ES&lt;/strong&gt;, &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/FR.png&quot; alt=&quot;FR&quot;&gt;&lt;strong&gt;FR&lt;/strong&gt;, &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/HE.png&quot; alt=&quot;HE&quot;&gt;&lt;strong&gt;HE&lt;/strong&gt;, &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/KR.png&quot; alt=&quot;KR&quot;&gt;&lt;strong&gt;KR&lt;/strong&gt; and &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/TR.png&quot; alt=&quot;TR&quot;&gt;&lt;strong&gt;TR&lt;/strong&gt; in progress! )&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h6&gt;Built and maintained by our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#steering-committee&quot;&gt;Steering Committee&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#collaborators&quot;&gt;Collaborators&lt;/a&gt;&lt;/h6&gt; 
&lt;h1&gt;Latest Best Practices and News&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png&quot; alt=&quot;EU&quot;&gt; Basque translation!:&lt;/strong&gt; wow even our Basque readers can read in their mother-tongue language! Courtesy of &lt;a href=&quot;https://github.com/anediaz&quot;&gt;Ane Diaz de Tuesta&lt;/a&gt; who did this all by her self&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🇯🇵 Japanese translation:&lt;/strong&gt; Our guide is now also translated to Japanese! Courtesy of the amazing &lt;a href=&quot;https://github.com/YukiOta&quot;&gt;YukiOta&lt;/a&gt; and &lt;a href=&quot;https://github.com/YA21&quot;&gt;Yuta Azumi&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🎊 60,000 stars!&lt;/strong&gt;: Our repo was starred and trusted by 60,100 developers. We&#39;re speechless&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Welcome! 3 Things You Ought To Know First&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;1. You are reading dozens of the best Node.js articles -&lt;/strong&gt; this repository is a summary and curation of the top-ranked content on Node.js best practices, as well as content written here by collaborators&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. It is the largest compilation, and it is growing every week -&lt;/strong&gt; currently, more than 80 best practices, style guides, and architectural tips are presented. New issues and pull requests are created every day to keep this live book updated. We&#39;d love to see you contributing here, whether that is fixing code mistakes, helping with translations, or suggesting brilliant new ideas. See our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/writing-guidelines.md&quot;&gt;writing guidelines here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. Best practices have additional info -&lt;/strong&gt; most bullets include a &lt;strong&gt;🔗Read More&lt;/strong&gt; link that expands on the practice with code examples, quotes from selected blogs, and more information&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#1-project-structure-practices&quot;&gt;Project Structure Practices (5)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#2-error-handling-practices&quot;&gt;Error Handling Practices (12) &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#3-code-style-practices&quot;&gt;Code Style Practices (12) &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#4-testing-and-overall-quality-practices&quot;&gt;Testing And Overall Quality Practices (13) &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#5-going-to-production-practices&quot;&gt;Going To Production Practices (19) &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#6-security-best-practices&quot;&gt;Security Practices (25)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#7-draft-performance-best-practices&quot;&gt;Performance Practices (2) (Work In Progress️ ✍️)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#8-docker-best-practices&quot;&gt;Docker Practices (15)&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;1. Project Structure Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.1 Structure your solution by components&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The worst large applications pitfall is maintaining a huge code base with hundreds of dependencies - such a monolith slows down developers as they try to incorporate new features. Instead, partition your code into components, each gets its folder or a dedicated codebase, and ensure that each unit is kept small and simple. Visit &#39;Read More&#39; below to see examples of correct project structure&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When developers who code new features struggle to realize the impact of their change and fear to break other dependent components - deployments become slower and riskier. It&#39;s also considered harder to scale-out when all the business units are not separated&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/breakintcomponents.md&quot;&gt;&lt;strong&gt;Read More: structure by components&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.2 Layer your components, keep the web layer within its boundaries&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Each component should contain &#39;layers&#39; - a dedicated object for the web, logic, and data access code. This not only draws a clean separation of concerns but also significantly eases mocking and testing the system. Though this is a very common pattern, API developers tend to mix layers by passing the web layer objects (e.g. Express req, res) to business logic and data layers - this makes your application dependent on and accessible only by specific web frameworks&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; App that mixes web objects with other layers cannot be accessed by testing code, CRON jobs, triggers from message queues, etc&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/createlayers.md&quot;&gt;&lt;strong&gt;Read More: layer your app&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.3 Wrap common utilities as npm packages&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In a large app that constitutes a large codebase, cross-cutting-concern utilities like a logger, encryption and alike, should be wrapped by your code and exposed as private npm packages. This allows sharing them among multiple codebases and projects&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You&#39;ll have to invent your deployment and the dependency wheel&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/wraputilities.md&quot;&gt;&lt;strong&gt;Read More: Structure by feature&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.4 Separate Express &#39;app&#39; and &#39;server&#39;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid the nasty habit of defining the entire &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; app in a single huge file - separate your &#39;Express&#39; definition to at least two files: the API declaration (app.js) and the networking concerns (WWW). For even better structure, locate your API declaration within components&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your API will be accessible for testing via HTTP calls only (slower and much harder to generate coverage reports). It probably won&#39;t be a big pleasure to maintain hundreds of lines of code in a single file&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/separateexpress.md&quot;&gt;&lt;strong&gt;Read More: separate Express &#39;app&#39; and &#39;server&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.5 Use environment aware, secure and hierarchical config&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A perfect and flawless configuration setup should ensure (a) keys can be read from file AND from environment variable (b) secrets are kept outside committed code (c) config is hierarchical for easier findability. There are a few packages that can help tick most of those boxes like &lt;a href=&quot;https://www.npmjs.com/package/rc&quot;&gt;rc&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/nconf&quot;&gt;nconf&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/config&quot;&gt;config&lt;/a&gt;, and &lt;a href=&quot;https://www.npmjs.com/package/convict&quot;&gt;convict&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failing to satisfy any of the config requirements will simply bog down the development or DevOps team. Probably both&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/configguide.md&quot;&gt;&lt;strong&gt;Read More: configuration best practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;2. Error Handling Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.1 Use Async-Await or promises for async error handling&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Handling async errors in callback style is probably the fastest way to hell (a.k.a the pyramid of doom). The best gift you can give to your code is using a reputable promise library or async-await instead which enables a much more compact and familiar code syntax like try-catch&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Node.js callback style, function(err, response), is a promising way to un-maintainable code due to the mix of error handling with casual code, excessive nesting, and awkward coding patterns&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/asyncerrorhandling.md&quot;&gt;&lt;strong&gt;Read More: avoiding callbacks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.2 Use only the built-in Error object&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Many throw errors as a string or as some custom type – this complicates the error handling logic and the interoperability between modules. Whether you reject a promise, throw an exception or emit an error – using only the built-in Error object (or an object that extends the built-in Error object) will increase uniformity and prevent loss of information. There is &lt;code&gt;no-throw-literal&lt;/code&gt; ESLint rule that strictly checks that (although it have some &lt;a href=&quot;https://eslint.org/docs/rules/no-throw-literal&quot;&gt;limitations&lt;/a&gt; which can be solved when using TypeScript and setting the &lt;code&gt;@typescript-eslint/no-throw-literal&lt;/code&gt; rule)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When invoking some component, being uncertain which type of errors come in return – it makes proper error handling much harder. Even worse, using custom types to describe errors might lead to loss of critical error information like the stack trace!&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/useonlythebuiltinerror.md&quot;&gt;&lt;strong&gt;Read More: using the built-in error object&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.3 Distinguish operational vs programmer errors&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Operational errors (e.g. API received an invalid input) refer to known cases where the error impact is fully understood and can be handled thoughtfully. On the other hand, programmer error (e.g. trying to read an undefined variable) refers to unknown code failures that dictate to gracefully restart the application&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may always restart the application when an error appears, but why let ~5000 online users down because of a minor, predicted, operational error? the opposite is also not ideal – keeping the application up when an unknown issue (programmer error) occurred might lead to an unpredicted behavior. Differentiating the two allows acting tactfully and applying a balanced approach based on the given context&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/operationalvsprogrammererror.md&quot;&gt;&lt;strong&gt;Read More: operational vs programmer error&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.4 Handle errors centrally, not within a middleware&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Error handling logic such as mail to admin and logging should be encapsulated in a dedicated and centralized object that all endpoints (e.g. Express middleware, cron jobs, unit-testing) call when an error comes in&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Not handling errors within a single place will lead to code duplication and probably to improperly handled errors&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/centralizedhandling.md&quot;&gt;&lt;strong&gt;Read More: handling errors in a centralized place&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.5 Document API errors using Swagger or GraphQL&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Let your API callers know which errors might come in return so they can handle these thoughtfully without crashing. For RESTful APIs, this is usually done with documentation frameworks like Swagger. If you&#39;re using GraphQL, you can utilize your schema and comments as well.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An API client might decide to crash and restart only because it received back an error it couldn’t understand. Note: the caller of your API might be you (very typical in a microservice environment)&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/documentingusingswagger.md&quot;&gt;&lt;strong&gt;Read More: documenting API errors in Swagger or GraphQL&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.6 Exit the process gracefully when a stranger comes to town&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When an unknown error occurs (a developer error, see best practice 2.3) - there is uncertainty about the application healthiness. Common practice suggests restarting the process carefully using a process management tool like &lt;a href=&quot;https://www.npmjs.com/package/forever&quot;&gt;Forever&lt;/a&gt; or &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When an unfamiliar exception occurs, some object might be in a faulty state (e.g. an event emitter which is used globally and not firing events anymore due to some internal failure) and all future requests might fail or behave crazily&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/shuttingtheprocess.md&quot;&gt;&lt;strong&gt;Read More: shutting the process&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.7 Use a mature logger to increase error visibility&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A set of mature logging tools like &lt;a href=&quot;https://github.com/pinojs/pino&quot;&gt;Pino&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/log4js&quot;&gt;Log4js&lt;/a&gt;, will speed-up error discovery and understanding. So forget about console.log&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Skimming through console.logs or manually through messy text file without querying tools or a decent log viewer might keep you busy at work until late&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/usematurelogger.md&quot;&gt;&lt;strong&gt;Read More: using a mature logger&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.8 Test error flows using your favorite test framework&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Whether professional automated QA or plain manual developer testing – Ensure that your code not only satisfies positive scenarios but also handles and returns the right errors. Testing frameworks like Mocha &amp;amp; Chai can handle this easily (see code examples within the &quot;Gist popup&quot;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Without testing, whether automatically or manually, you can’t rely on your code to return the right errors. Without meaningful errors – there’s no error handling&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/testingerrorflows.md&quot;&gt;&lt;strong&gt;Read More: testing error flows&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.9 Discover errors and downtime using APM products&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Monitoring and performance products (a.k.a APM) proactively gauge your codebase or API so they can automagically highlight errors, crashes, and slow parts that you were missing&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You might spend great effort on measuring API performance and downtimes, probably you’ll never be aware which are your slowest code parts under real-world scenario and how these affect the UX&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/apmproducts.md&quot;&gt;&lt;strong&gt;Read More: using APM products&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.10 Catch unhandled promise rejections&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Any exception thrown within a promise will get swallowed and discarded unless a developer didn’t forget to explicitly handle it. Even if your code is subscribed to &lt;code&gt;process.uncaughtException&lt;/code&gt;! Overcome this by registering to the event &lt;code&gt;process.unhandledRejection&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your errors will get swallowed and leave no trace. Nothing to worry about&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/catchunhandledpromiserejection.md&quot;&gt;&lt;strong&gt;Read More: catching unhandled promise rejection&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.11 Fail fast, validate arguments using a dedicated library&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Assert API input to avoid nasty bugs that are much harder to track later. The validation code is usually tedious unless you are using a very cool helper library like &lt;a href=&quot;https://www.npmjs.com/package/ajv&quot;&gt;ajv&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/joi&quot;&gt;Joi&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Consider this – your function expects a numeric argument “Discount” which the caller forgets to pass, later on, your code checks if Discount!=0 (amount of allowed discount is greater than zero), then it will allow the user to enjoy a discount. OMG, what a nasty bug. Can you see it?&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/failfast.md&quot;&gt;&lt;strong&gt;Read More: failing fast&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.12 Always await promises before returning to avoid a partial stacktrace&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Always do &lt;code&gt;return await&lt;/code&gt; when returning a promise to benefit full error stacktrace. If a function returns a promise, that function must be declared as &lt;code&gt;async&lt;/code&gt; function and explicitly &lt;code&gt;await&lt;/code&gt; the promise before returning it&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The function that returns a promise without awaiting won&#39;t appear in the stacktrace. Such missing frames would probably complicate the understanding of the flow that leads to the error, especially if the cause of the abnormal behavior is inside of the missing function&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/returningpromises.md&quot;&gt;&lt;strong&gt;Read More: returning promises&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;3. Code Style Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.1 Use ESLint&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &lt;a href=&quot;https://eslint.org&quot;&gt;ESLint&lt;/a&gt; is the de-facto standard for checking possible code errors and fixing code style, not only to identify nitty-gritty spacing issues but also to detect serious code anti-patterns like developers throwing errors without classification. Though ESLint can automatically fix code styles, other tools like &lt;a href=&quot;https://www.npmjs.com/package/prettier&quot;&gt;prettier&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/js-beautify&quot;&gt;beautify&lt;/a&gt; are more powerful in formatting the fix and work in conjunction with ESLint&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Developers will focus on tedious spacing and line-width concerns and time might be wasted overthinking the project&#39;s code style&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/codestylepractices/eslint_prettier.md&quot;&gt;&lt;strong&gt;Read More: Using ESLint and Prettier&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.2 Node.js specific plugins&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; On top of ESLint standard rules that cover vanilla JavaScript, add Node.js specific plugins like &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-node&quot;&gt;eslint-plugin-node&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-mocha&quot;&gt;eslint-plugin-mocha&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-security&quot;&gt;eslint-plugin-node-security&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Many faulty Node.js code patterns might escape under the radar. For example, developers might require(variableAsPath) files with a variable given as a path which allows attackers to execute any JS script. Node.js linters can detect such patterns and complain early&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.3 Start a Codeblock&#39;s Curly Braces on the Same Line&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The opening curly braces of a code block should be on the same line as the opening statement&lt;/p&gt; 
&lt;h3&gt;Code Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
function someFunction() {
  // code block
}

// Avoid
function someFunction() {
  // code block
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Deferring from this best practice might lead to unexpected results, as seen in the StackOverflow thread below:&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;Why do results vary based on curly brace placement?&quot; (StackOverflow)&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.4 Separate your statements properly&lt;/h2&gt; 
&lt;p&gt;No matter if you use semicolons or not to separate your statements, knowing the common pitfalls of improper linebreaks or automatic semicolon insertion, will help you to eliminate regular syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use ESLint to gain awareness about separation concerns. &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; or &lt;a href=&quot;https://standardjs.com/&quot;&gt;Standardjs&lt;/a&gt; can automatically resolve these issues.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; As seen in the previous section, JavaScript&#39;s interpreter automatically adds a semicolon at the end of a statement if there isn&#39;t one, or considers a statement as not ended where it should, which might lead to some undesired results. You can use assignments and avoid using immediately invoked function expressions to prevent most of the unexpected errors.&lt;/p&gt; 
&lt;h3&gt;Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
function doThing() {
    // ...
}

doThing()

// Do

const items = [1, 2, 3]
items.forEach(console.log)

// Avoid — throws exception
const m = new Map()
const a = [1,2,3]
[...m.values()].forEach(console.log)
&amp;gt; [...m.values()].forEach(console.log)
&amp;gt;  ^^^
&amp;gt; SyntaxError: Unexpected token ...

// Avoid — throws exception
const count = 2 // it tries to run 2(), but 2 is not a function
(function doSomething() {
  // do something amazing
}())
// put a semicolon before the immediate invoked function, after the const definition, save the return value of the anonymous function to a variable or avoid IIFEs altogether
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://eslint.org/docs/rules/semi&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;Semi ESLint rule&quot;&lt;/a&gt; 🔗 &lt;a href=&quot;https://eslint.org/docs/rules/no-unexpected-multiline&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;No unexpected multiline ESLint rule&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.5 Name your functions&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Name all functions, including closures and callbacks. Avoid anonymous functions. This is especially useful when profiling a node app. Naming all functions will allow you to easily understand what you&#39;re looking at when checking a memory snapshot&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Debugging production issues using a core dump (memory snapshot) might become challenging as you notice significant memory consumption from anonymous functions&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.6 Use naming conventions for variables, constants, functions and classes&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use &lt;strong&gt;&lt;em&gt;lowerCamelCase&lt;/em&gt;&lt;/strong&gt; when naming constants, variables and functions and &lt;strong&gt;&lt;em&gt;UpperCamelCase&lt;/em&gt;&lt;/strong&gt; (capital first letter as well) when naming classes. This will help you to easily distinguish between plain variables/functions, and classes that require instantiation. Use descriptive names, but try to keep them short&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; JavaScript is the only language in the world that allows invoking a constructor (&quot;Class&quot;) directly without instantiating it first. Consequently, Classes and function-constructors are differentiated by starting with UpperCamelCase&lt;/p&gt; 
&lt;h3&gt;3.6 Code Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// for class name we use UpperCamelCase
class SomeClassExample {}

// for const names we use the const keyword and lowerCamelCase
const config = {
  key: &quot;value&quot;,
};

// for variables and functions names we use lowerCamelCase
let someVariableExample = &quot;value&quot;;
function doSomething() {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.7 Prefer const over let. Ditch the var&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Using &lt;code&gt;const&lt;/code&gt; means that once a variable is assigned, it cannot be reassigned. Preferring &lt;code&gt;const&lt;/code&gt; will help you to not be tempted to use the same variable for different uses, and make your code clearer. If a variable needs to be reassigned, in a for loop, for example, use &lt;code&gt;let&lt;/code&gt; to declare it. Another important aspect of &lt;code&gt;let&lt;/code&gt; is that a variable declared using it is only available in the block scope in which it was defined. &lt;code&gt;var&lt;/code&gt; is function scoped, not block-scoped, and &lt;a href=&quot;https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70&quot;&gt;shouldn&#39;t be used in ES6&lt;/a&gt; now that you have &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; at your disposal&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Debugging becomes way more cumbersome when following a variable that frequently changes&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75&quot;&gt;&lt;strong&gt;Read more: JavaScript ES6+: var, let, or const?&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.8 Require modules first, not inside functions&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Require modules at the beginning of each file, before and outside of any functions. This simple best practice will not only help you easily and quickly tell the dependencies of a file right at the top but also avoids a couple of potential problems&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Requires are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. Also, if a required module or any of its dependencies throw an error and crash the server, it is best to find out about it as soon as possible, which might not be the case if that module is required from within a function&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.9 Require modules by folders, as opposed to the files directly&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When developing a module/library in a folder, place an index.js file that exposes the module&#39;s internals so every consumer will pass through it. This serves as an &#39;interface&#39; to your module and eases future changes without breaking the contract&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Changing the internal structure of files or the signature may break the interface with clients&lt;/p&gt; 
&lt;h3&gt;3.9 Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
module.exports.SMSProvider = require(&quot;./SMSProvider&quot;);
module.exports.SMSNumberResolver = require(&quot;./SMSNumberResolver&quot;);

// Avoid
module.exports.SMSProvider = require(&quot;./SMSProvider/SMSProvider.js&quot;);
module.exports.SMSNumberResolver = require(&quot;./SMSNumberResolver/SMSNumberResolver.js&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.10 Use the &lt;code&gt;===&lt;/code&gt; operator&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Prefer the strict equality operator &lt;code&gt;===&lt;/code&gt; over the weaker abstract equality operator &lt;code&gt;==&lt;/code&gt;. &lt;code&gt;==&lt;/code&gt; will compare two variables after converting them to a common type. There is no type conversion in &lt;code&gt;===&lt;/code&gt;, and both variables must be of the same type to be equal&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Unequal variables might return true when compared with the &lt;code&gt;==&lt;/code&gt; operator&lt;/p&gt; 
&lt;h3&gt;3.10 Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;&quot; == &quot;0&quot;; // false
0 == &quot;&quot;; // true
0 == &quot;0&quot;; // true

false == &quot;false&quot;; // false
false == &quot;0&quot;; // true

false == undefined; // false
false == null; // false
null == undefined; // true

&quot; \t\r\n &quot; == 0; // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All statements above will return false if used with &lt;code&gt;===&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.11 Use Async Await, avoid callbacks&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node 8 LTS now has full support for Async-await. This is a new way of dealing with asynchronous code which supersedes callbacks and promises. Async-await is non-blocking, and it makes asynchronous code look synchronous. The best gift you can give to your code is using async-await which provides a much more compact and familiar code syntax like try-catch&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Handling async errors in callback style are probably the fastest way to hell - this style forces to check errors all over, deal with awkward code nesting, and makes it difficult to reason about the code flow&lt;/p&gt; 
&lt;p&gt;🔗&lt;a href=&quot;https://github.com/yortus/asyncawait&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; Guide to async-await 1.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.12 Use arrow function expressions (=&amp;gt;)&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Though it&#39;s recommended to use async-await and avoid function parameters when dealing with older APIs that accept promises or callbacks - arrow functions make the code structure more compact and keep the lexical context of the root function (i.e. &lt;code&gt;this&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Longer code (in ES5 functions) is more prone to bugs and cumbersome to read&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75&quot;&gt;&lt;strong&gt;Read more: It’s Time to Embrace Arrow Functions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;4. Testing And Overall Quality Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.1 At the very least, write API (component) testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Most projects just don&#39;t have any automated testing due to short timetables or often the &#39;testing project&#39; ran out of control and was abandoned. For that reason, prioritize and start with API testing which is the easiest way to write and provides more coverage than unit testing (you may even craft API tests without code using tools like &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;). Afterward, should you have more resources and time, continue with advanced test types like unit testing, DB testing, performance testing, etc&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may spend long days on writing unit tests to find out that you got only 20% system coverage&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.2 Include 3 parts in each test name&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Make the test speak at the requirements level so it&#39;s self-explanatory also to QA engineers and developers who are not familiar with the code internals. State in the test name what is being tested (unit under test), under what circumstances, and what is the expected result&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A deployment just failed, a test named “Add product” failed. Does this tell you what exactly is malfunctioning?&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/3-parts-in-name.md&quot;&gt;&lt;strong&gt;Read More: Include 3 parts in each test name&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.3 Structure tests by the AAA pattern&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Structure your tests with 3 well-separated sections: Arrange, Act &amp;amp; Assert (AAA). The first part includes the test setup, then the execution of the unit under test, and finally the assertion phase. Following this structure guarantees that the reader spends no brain CPU on understanding the test plan&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Not only you spend long daily hours on understanding the main code, but now also what should have been the simple part of the day (testing) stretches your brain&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/aaa.md&quot;&gt;&lt;strong&gt;Read More: Structure tests by the AAA pattern&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.4 Detect code issues with a linter&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use a code linter to check the basic quality and detect anti-patterns early. Run it before any test and add it as a pre-commit git-hook to minimize the time needed to review and correct any issue. Also check &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#3-code-style-practices&quot;&gt;Section 3&lt;/a&gt; on Code Style Practices&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may let pass some anti-pattern and possible vulnerable code to your production environment.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.5 Avoid global test fixtures and seeds, add data per-test&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; To prevent test coupling and easily reason about the test flow, each test should add and act on its own set of DB rows. Whenever a test needs to pull or assume the existence of some DB data - it must explicitly add that data and avoid mutating any other records&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Consider a scenario where deployment is aborted due to failing tests, team is now going to spend precious investigation time that ends in a sad conclusion: the system works well, the tests however interfere with each other and break the build&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/avoid-global-test-fixture.md&quot;&gt;&lt;strong&gt;Read More: Avoid global test fixtures&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.6 Constantly inspect for vulnerable dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Even the most reputable dependencies such as Express have known vulnerabilities. This can get easily tamed using community and commercial tools such as 🔗 &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;npm audit&lt;/a&gt; and 🔗 &lt;a href=&quot;https://snyk.io&quot;&gt;snyk.io&lt;/a&gt; that can be invoked from your CI on every build&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Keeping your code clean from vulnerabilities without dedicated tools will require to constantly follow online publications about new threats. Quite tedious&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.7 Tag your tests&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Different tests must run on different scenarios: quick smoke, IO-less, tests should run when a developer saves or commits a file, full end-to-end tests usually run when a new pull request is submitted, etc. This can be achieved by tagging tests with keywords like #cold #api #sanity so you can grep with your testing harness and invoke the desired subset. For example, this is how you would invoke only the sanity test group with &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;: mocha --grep &#39;sanity&#39;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Running all the tests, including tests that perform dozens of DB queries, any time a developer makes a small change can be extremely slow and keeps developers away from running tests&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.8 Check your test coverage, it helps to identify wrong test patterns&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Code coverage tools like &lt;a href=&quot;https://github.com/istanbuljs/istanbuljs&quot;&gt;Istanbul&lt;/a&gt;/&lt;a href=&quot;https://github.com/istanbuljs/nyc&quot;&gt;NYC&lt;/a&gt; are great for 3 reasons: it comes for free (no effort is required to benefit this reports), it helps to identify a decrease in testing coverage, and last but not least it highlights testing mismatches: by looking at colored code coverage reports you may notice, for example, code areas that are never tested like catch clauses (meaning that tests only invoke the happy paths and not how the app behaves on errors). Set it to fail builds if the coverage falls under a certain threshold&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; There won&#39;t be any automated metric telling you when a large portion of your code is not covered by testing&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.9 Inspect for outdated packages&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use your preferred tool (e.g. &lt;code&gt;npm outdated&lt;/code&gt; or &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;npm-check-updates&lt;/a&gt;) to detect installed outdated packages, inject this check into your CI pipeline and even make a build fail in a severe scenario. For example, a severe scenario might be when an installed package is 5 patch commits behind (e.g. local version is 1.3.1 and repository version is 1.3.8) or it is tagged as deprecated by its author - kill the build and prevent deploying this version&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your production will run packages that have been explicitly tagged by their author as risky&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.10 Use production-like environment for e2e testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; End to end (e2e) testing which includes live data used to be the weakest link of the CI process as it depends on multiple heavy services like DB. Use an environment which is as close to your real production environment as possible like a-continue (Missed -continue here, needs content. Judging by the &lt;strong&gt;Otherwise&lt;/strong&gt; clause, this should mention docker-compose)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Without docker-compose, teams must maintain a testing DB for each testing environment including developers&#39; machines, keep all those DBs in sync so test results won&#39;t vary across environments&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.11 Refactor regularly using static analysis tools&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Using static analysis tools helps by giving objective ways to improve code quality and keeps your code maintainable. You can add static analysis tools to your CI build to fail when it finds code smells. Its main selling points over plain linting are the ability to inspect quality in the context of multiple files (e.g. detect duplications), perform advanced analysis (e.g. code complexity), and follow the history and progress of code issues. Two examples of tools you can use are &lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;Sonarqube&lt;/a&gt; (2,600+ &lt;a href=&quot;https://github.com/SonarSource/sonarqube&quot;&gt;stars&lt;/a&gt;) and &lt;a href=&quot;https://codeclimate.com/&quot;&gt;Code Climate&lt;/a&gt; (1,500+ &lt;a href=&quot;https://github.com/codeclimate/codeclimate&quot;&gt;stars&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; With poor code quality, bugs and performance will always be an issue that no shiny new library or state of the art features can fix&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/refactoring.md&quot;&gt;&lt;strong&gt;Read More: Refactoring!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.12 Carefully choose your CI platform (Jenkins vs CircleCI vs Travis vs Rest of the world)&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your continuous integration platform (CICD) will host all the quality tools (e.g. test, lint) so it should come with a vibrant ecosystem of plugins. &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; used to be the default for many projects as it has the biggest community along with a very powerful platform at the price of a complex setup that demands a steep learning curve. Nowadays, it has become much easier to set up a CI solution using SaaS tools like &lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt; and others. These tools allow crafting a flexible CI pipeline without the burden of managing the whole infrastructure. Eventually, it&#39;s a trade-off between robustness and speed - choose your side carefully&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Choosing some niche vendor might get you blocked once you need some advanced customization. On the other hand, going with Jenkins might burn precious time on infrastructure setup&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/citools.md&quot;&gt;&lt;strong&gt;Read More: Choosing CI platform&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.13 Test your middlewares in isolation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When a middleware holds some immense logic that spans many requests, it is worth testing it in isolation without waking up the entire web framework. This can be easily achieved by stubbing and spying on the {req, res, next} objects&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A bug in Express middleware === a bug in all or most requests&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/test-middlewares.md&quot;&gt;&lt;strong&gt;Read More: Test middlewares in isolation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;5. Going To Production Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.1. Monitoring&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Monitoring is a game of finding out issues before customers do – obviously this should be assigned unprecedented importance. The market is overwhelmed with offers thus consider starting with defining the basic metrics you must follow (my suggestions inside), then go over additional fancy features and choose the solution that ticks all boxes. Click ‘The Gist’ below for an overview of the solutions&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failure === disappointed customers. Simple&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/monitoring.md&quot;&gt;&lt;strong&gt;Read More: Monitoring!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.2. Increase transparency using smart logging&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Logs can be a dumb warehouse of debug statements or the enabler of a beautiful dashboard that tells the story of your app. Plan your logging platform from day 1: how logs are collected, stored and analyzed to ensure that the desired information (e.g. error rate, following an entire transaction through services and servers, etc) can really be extracted&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You end up with a black box that is hard to reason about, then you start re-writing all logging statements to add additional information&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/smartlogging.md&quot;&gt;&lt;strong&gt;Read More: Increase transparency using smart logging&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.3. Delegate anything possible (e.g. gzip, SSL) to a reverse proxy&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node is awfully bad at doing CPU intensive tasks like gzipping, SSL termination, etc. You should use ‘real’ middleware services like nginx, HAproxy or cloud vendor services instead&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your poor single thread will stay busy doing infrastructural tasks instead of dealing with your application core and performance will degrade accordingly&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/delegatetoproxy.md&quot;&gt;&lt;strong&gt;Read More: Delegate anything possible (e.g. gzip, SSL) to a reverse proxy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.4. Lock dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your code must be identical across all environments, but amazingly npm lets dependencies drift across environments by default – when you install packages at various environments it tries to fetch packages’ latest patch version. Overcome this by using npm config files, .npmrc, that tell each environment to save the exact (not the latest) version of each package. Alternatively, for finer grained control use &lt;code&gt;npm shrinkwrap&lt;/code&gt;. *Update: as of NPM5, dependencies are locked by default. The new package manager in town, Yarn, also got us covered by default&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/lockdependencies.md&quot;&gt;&lt;strong&gt;Read More: Lock dependencies&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.5. Guard process uptime using the right tool&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The process must go on and get restarted upon failures. For simple scenarios, process management tools like PM2 might be enough but in today&#39;s ‘dockerized’ world, cluster management tools should be considered as well&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Running dozens of instances without a clear strategy and too many tools together (cluster management, docker, PM2) might lead to DevOps chaos&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/guardprocess.md&quot;&gt;&lt;strong&gt;Read More: Guard process uptime using the right tool&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.6. Utilize all CPU cores&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; At its basic form, a Node app runs on a single CPU core while all others are left idling. It’s your duty to replicate the Node process and utilize all CPUs – For small-medium apps you may use Node Cluster or PM2. For a larger app consider replicating the process using some Docker cluster (e.g. K8S, ECS) or deployment scripts that are based on Linux init system (e.g. systemd)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your app will likely utilize only 25% of its available resources(!) or even less. Note that a typical server has 4 CPU cores or more, naive deployment of Node.js utilizes only 1 (even using PaaS services like AWS beanstalk!)&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/utilizecpu.md&quot;&gt;&lt;strong&gt;Read More: Utilize all CPU cores&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.7. Create a ‘maintenance endpoint’&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Expose a set of system-related information, like memory usage and REPL, etc in a secured API. Although it’s highly recommended to rely on standard and battle-tests tools, some valuable information and operations are easier done using code&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You’ll find that you’re performing many “diagnostic deploys” – shipping code to production only to extract some information for diagnostic purposes&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/createmaintenanceendpoint.md&quot;&gt;&lt;strong&gt;Read More: Create a ‘maintenance endpoint’&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.8. Discover errors and downtime using APM products&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Application monitoring and performance products (a.k.a. APM) proactively gauge codebase and API so they can auto-magically go beyond traditional monitoring and measure the overall user-experience across services and tiers. For example, some APM products can highlight a transaction that loads too slow on the end-user&#39;s side while suggesting the root cause&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You might spend great effort on measuring API performance and downtimes, probably you’ll never be aware which is your slowest code parts under real-world scenario and how these affect the UX&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/apmproducts.md&quot;&gt;&lt;strong&gt;Read More: Discover errors and downtime using APM products&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.9. Make your code production-ready&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Code with the end in mind, plan for production from day 1. This sounds a bit vague so I’ve compiled a few development tips that are closely related to production maintenance (click Gist below)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A world champion IT/DevOps guy won’t save a system that is badly written&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/productioncode.md&quot;&gt;&lt;strong&gt;Read More: Make your code production-ready&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.10. Measure and guard the memory usage&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node.js has controversial relationships with memory: the v8 engine has soft limits on memory usage (1.4GB) and there are known paths to leak memory in Node’s code – thus watching Node’s process memory is a must. In small apps, you may gauge memory periodically using shell commands but in medium-large apps consider baking your memory watch into a robust monitoring system&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your process memory might leak a hundred megabytes a day like how it happened at &lt;a href=&quot;https://www.joyent.com/blog/walmart-node-js-memory-leak&quot;&gt;Walmart&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/measurememory.md&quot;&gt;&lt;strong&gt;Read More: Measure and guard the memory usage&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.11. Get your frontend assets out of Node&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Serve frontend content using dedicated middleware (nginx, S3, CDN) because Node performance really gets hurt when dealing with many static files due to its single-threaded model&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your single Node thread will be busy streaming hundreds of html/images/angular/react files instead of allocating all its resources for the task it was born for – serving dynamic content&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/frontendout.md&quot;&gt;&lt;strong&gt;Read More: Get your frontend assets out of Node&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.12. Be stateless, kill your servers almost every day&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Store any type of data (e.g. user sessions, cache, uploaded files) within external data stores. Consider ‘killing’ your servers periodically or use ‘serverless’ platform (e.g. AWS Lambda) that explicitly enforces a stateless behavior&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failure at a given server will result in application downtime instead of just killing a faulty machine. Moreover, scaling-out elasticity will get more challenging due to the reliance on a specific server&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/bestateless.md&quot;&gt;&lt;strong&gt;Read More: Be stateless, kill your Servers almost every day&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.13. Use tools that automatically detect vulnerabilities&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Even the most reputable dependencies such as Express have known vulnerabilities (from time to time) that can put a system at risk. This can be easily tamed using community and commercial tools that constantly check for vulnerabilities and warn (locally or at GitHub), some can even patch them immediately&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Keeping your code clean from vulnerabilities without dedicated tools will require you to constantly follow online publications about new threats. Quite tedious&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/detectvulnerabilities.md&quot;&gt;&lt;strong&gt;Read More: Use tools that automatically detect vulnerabilities&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.14. Assign a transaction id to each log statement&lt;/h2&gt; 
&lt;p&gt;Also known as correlation id / transit id / tracing id / request id / request context / etc.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Assign the same identifier, transaction-id: {some value}, to each log entry within a single request. Then when inspecting errors in logs, easily conclude what happened before and after. Until version 14 of Node, this was not easy to achieve due to Node&#39;s async nature, but since AsyncLocalStorage came to town, this became possible and easy than ever. see code examples inside&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Looking at a production error log without the context – what happened before – makes it much harder and slower to reason about the issue&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/assigntransactionid.md&quot;&gt;&lt;strong&gt;Read More: Assign ‘TransactionId’ to each log statement&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.15. Set &lt;code&gt;NODE_ENV=production&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Set the environment variable &lt;code&gt;NODE_ENV&lt;/code&gt; to ‘production’ or ‘development’ to flag whether production optimizations should get activated – many npm packages determine the current environment and optimize their code for production&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Omitting this simple property might greatly degrade performance. For example, when using Express for server-side rendering omitting &lt;code&gt;NODE_ENV&lt;/code&gt; makes it slower by a factor of three!&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/setnodeenv.md&quot;&gt;&lt;strong&gt;Read More: Set NODE_ENV=production&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.16. Design automated, atomic and zero-downtime deployments&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Research shows that teams who perform many deployments lower the probability of severe production issues. Fast and automated deployments that don’t require risky manual steps and service downtime significantly improve the deployment process. You should probably achieve this using Docker combined with CI tools as they became the industry standard for streamlined deployment&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Long deployments -&amp;gt; production downtime &amp;amp; human-related error -&amp;gt; team unconfident in making deployment -&amp;gt; fewer deployments and features&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.17. Use an LTS release of Node.js&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Ensure you are using an LTS version of Node.js to receive critical bug fixes, security updates and performance improvements&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Newly discovered bugs or vulnerabilities could be used to exploit an application running in production, and your application may become unsupported by various modules and harder to maintain&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/LTSrelease.md&quot;&gt;&lt;strong&gt;Read More: Use an LTS release of Node.js&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.18. Don&#39;t route logs within the app&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Log destinations should not be hard-coded by developers within the application code, but instead should be defined by the execution environment the application runs in. Developers should write logs to &lt;code&gt;stdout&lt;/code&gt; using a logger utility and then let the execution environment (container, server, etc.) pipe the &lt;code&gt;stdout&lt;/code&gt; stream to the appropriate destination (i.e. Splunk, Graylog, ElasticSearch, etc.).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Application handling log routing === hard to scale, loss of logs, poor separation of concerns&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/logrouting.md&quot;&gt;&lt;strong&gt;Read More: Log Routing&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.19. Install your packages with &lt;code&gt;npm ci&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; You have to be sure that production code uses the exact version of the packages you have tested it with. Run &lt;code&gt;npm ci&lt;/code&gt; to strictly do a clean install of your dependencies matching package.json and package-lock.json. Using this command is recommended in automated environments such as continuous integration pipelines.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/installpackageswithnpmci.md&quot;&gt;&lt;strong&gt;Read More: Use npm ci&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;6. Security Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.1. Embrace linter security rules&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Make use of security-related linter plugins such as &lt;a href=&quot;https://github.com/nodesecurity/eslint-plugin-security&quot;&gt;eslint-plugin-security&lt;/a&gt; to catch security vulnerabilities and issues as early as possible, preferably while they&#39;re being coded. This can help catching security weaknesses like using eval, invoking a child process or importing a module with a string literal (e.g. user input). Click &#39;Read more&#39; below to see code examples that will get caught by a security linter&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; What could have been a straightforward security weakness during development becomes a major issue in production. Also, the project may not follow consistent code security practices, leading to vulnerabilities being introduced, or sensitive secrets committed into remote repositories&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/lintrules.md&quot;&gt;&lt;strong&gt;Read More: Lint rules&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.2. Limit concurrent requests using a middleware&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; DOS attacks are very popular and relatively easy to conduct. Implement rate limiting using an external service such as cloud load balancers, cloud firewalls, nginx, &lt;a href=&quot;https://www.npmjs.com/package/rate-limiter-flexible&quot;&gt;rate-limiter-flexible&lt;/a&gt; package, or (for smaller and less critical apps) a rate-limiting middleware (e.g. &lt;a href=&quot;https://www.npmjs.com/package/express-rate-limit&quot;&gt;express-rate-limit&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An application could be subject to an attack resulting in a denial of service where real users receive a degraded or unavailable service.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/limitrequests.md&quot;&gt;&lt;strong&gt;Read More: Implement rate limiting&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.3 Extract secrets from config files or use packages to encrypt them&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Never store plain-text secrets in configuration files or source code. Instead, make use of secret-management systems like Vault products, Kubernetes/Docker Secrets, or using environment variables. As a last resort, secrets stored in source control must be encrypted and managed (rolling keys, expiring, auditing, etc). Make use of pre-commit/push hooks to prevent committing secrets accidentally&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Source control, even for private repositories, can mistakenly be made public, at which point all secrets are exposed. Access to source control for an external party will inadvertently provide access to related systems (databases, apis, services, etc).&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/secretmanagement.md&quot;&gt;&lt;strong&gt;Read More: Secret management&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.4. Prevent query injection vulnerabilities with ORM/ODM libraries&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; To prevent SQL/NoSQL injection and other malicious attacks, always make use of an ORM/ODM or a database library that escapes data or supports named or indexed parameterized queries, and takes care of validating user input for expected types. Never just use JavaScript template strings or string concatenation to inject values into queries as this opens your application to a wide spectrum of vulnerabilities. All the reputable Node.js data access libraries (e.g. &lt;a href=&quot;https://github.com/sequelize/sequelize&quot;&gt;Sequelize&lt;/a&gt;, &lt;a href=&quot;https://github.com/tgriesser/knex&quot;&gt;Knex&lt;/a&gt;, &lt;a href=&quot;https://github.com/Automattic/mongoose&quot;&gt;mongoose&lt;/a&gt;) have built-in protection against injection attacks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Unvalidated or unsanitized user input could lead to operator injection when working with MongoDB for NoSQL, and not using a proper sanitization system or ORM will easily allow SQL injection attacks, creating a giant vulnerability.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/ormodmusage.md&quot;&gt;&lt;strong&gt;Read More: Query injection prevention using ORM/ODM libraries&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.5. Collection of generic security best practices&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; This is a collection of security advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/commonsecuritybestpractices.md&quot;&gt;&lt;strong&gt;Read More: Common security best practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.6. Adjust the HTTP response headers for enhanced security&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your application should be using secure headers to prevent attackers from using common attacks like cross-site scripting (XSS), clickjacking and other malicious attacks. These can be configured easily using modules like &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Attackers could perform direct attacks on your application&#39;s users, leading to huge security vulnerabilities&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/secureheaders.md&quot;&gt;&lt;strong&gt;Read More: Using secure headers in your application&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.7. Constantly and automatically inspect for vulnerable dependencies&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; With the npm ecosystem it is common to have many dependencies for a project. Dependencies should always be kept in check as new vulnerabilities are found. Use tools like &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;npm audit&lt;/a&gt; or &lt;a href=&quot;https://snyk.io/&quot;&gt;snyk&lt;/a&gt; to track, monitor and patch vulnerable dependencies. Integrate these tools with your CI setup so you catch a vulnerable dependency before it makes it to production.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker could detect your web framework and attack all its known vulnerabilities.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/dependencysecurity.md&quot;&gt;&lt;strong&gt;Read More: Dependency security&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.8. Protect Users&#39; Passwords/Secrets using bcrypt or scrypt&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Passwords or secrets (e.g. API keys) should be stored using a secure hash + salt function like &lt;code&gt;bcrypt&lt;/code&gt;,&lt;code&gt;scrypt&lt;/code&gt;, or worst case &lt;code&gt;pbkdf2&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Passwords and secrets that are stored without using a secure function are vulnerable to brute forcing and dictionary attacks that will lead to their disclosure eventually.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/userpasswords.md&quot;&gt;&lt;strong&gt;Read More: User Passwords&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.9. Escape HTML, JS and CSS output&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Untrusted data that is sent down to the browser might get executed instead of just being displayed, this is commonly referred as a cross-site-scripting (XSS) attack. Mitigate this by using dedicated libraries that explicitly mark the data as pure content that should never get executed (i.e. encoding, escaping)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker might store malicious JavaScript code in your DB which will then be sent as-is to the poor clients&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/escape-output.md&quot;&gt;&lt;strong&gt;Read More: Escape output&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.10. Validate incoming JSON schemas&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Validate the incoming requests&#39; body payload and ensure it meets expectations, fail fast if it doesn&#39;t. To avoid tedious validation coding within each route you may use lightweight JSON-based validation schemas such as &lt;a href=&quot;https://www.npmjs.com/package/jsonschema&quot;&gt;jsonschema&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/joi&quot;&gt;joi&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your generosity and permissive approach greatly increases the attack surface and encourages the attacker to try out many inputs until they find some combination to crash the application&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/validation.md&quot;&gt;&lt;strong&gt;Read More: Validate incoming JSON schemas&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.11. Support blocklisting JWTs&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When using JSON Web Tokens (for example, with &lt;a href=&quot;https://github.com/jaredhanson/passport&quot;&gt;Passport.js&lt;/a&gt;), by default there&#39;s no mechanism to revoke access from issued tokens. Once you discover some malicious user activity, there&#39;s no way to stop them from accessing the system as long as they hold a valid token. Mitigate this by implementing a blocklist of untrusted tokens that are validated on each request.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Expired, or misplaced tokens could be used maliciously by a third party to access an application and impersonate the owner of the token.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/expirejwt.md&quot;&gt;&lt;strong&gt;Read More: Blocklist JSON Web Tokens&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.12. Prevent brute-force attacks against authorization&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A simple and powerful technique is to limit authorization attempts using two metrics:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first is number of consecutive failed attempts by the same user unique ID/name and IP address.&lt;/li&gt; 
 &lt;li&gt;The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker can issue unlimited automated password attempts to gain access to privileged accounts on an application&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/login-rate-limit.md&quot;&gt;&lt;strong&gt;Read More: Login rate limiting&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.13. Run Node.js as non-root user&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; There is a common scenario where Node.js runs as a root user with unlimited permissions. For example, this is the default behaviour in Docker containers. It&#39;s recommended to create a non-root user and either bake it into the Docker image (examples given below) or run the process on this user&#39;s behalf by invoking the container with the flag &quot;-u username&quot;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker who manages to run a script on the server gets unlimited power over the local machine (e.g. change iptable and re-route traffic to his server)&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/non-root-user.md&quot;&gt;&lt;strong&gt;Read More: Run Node.js as non-root user&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.14. Limit payload size using a reverse-proxy or a middleware&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The bigger the body payload is, the harder your single thread works in processing it. This is an opportunity for attackers to bring servers to their knees without tremendous amount of requests (DOS/DDOS attacks). Mitigate this limiting the body size of incoming requests on the edge (e.g. firewall, ELB) or by configuring &lt;a href=&quot;https://github.com/expressjs/body-parser&quot;&gt;express body parser&lt;/a&gt; to accept only small-size payloads&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your application will have to deal with large requests, unable to process the other important work it has to accomplish, leading to performance implications and vulnerability towards DOS attacks&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/requestpayloadsizelimit.md&quot;&gt;&lt;strong&gt;Read More: Limit payload size&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.15. Avoid JavaScript eval statements&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &lt;code&gt;eval&lt;/code&gt; is evil as it allows executing custom JavaScript code during run time. This is not just a performance concern but also an important security concern due to malicious JavaScript code that may be sourced from user input. Another language feature that should be avoided is &lt;code&gt;new Function&lt;/code&gt; constructor. &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; should never be passed dynamic JavaScript code either.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Malicious JavaScript code finds a way into text passed into &lt;code&gt;eval&lt;/code&gt; or other real-time evaluating JavaScript language functions, and will gain complete access to JavaScript permissions on the page. This vulnerability is often manifested as an XSS attack.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/avoideval.md&quot;&gt;&lt;strong&gt;Read More: Avoid JavaScript eval statements&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.16. Prevent evil RegEx from overloading your single thread execution&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Regular Expressions, while being handy, pose a real threat to JavaScript applications at large, and the Node.js platform in particular. A user input for text to match might require an outstanding amount of CPU cycles to process. RegEx processing might be inefficient to an extent that a single request that validates 10 words can block the entire event loop for 6 seconds and set the CPU on 🔥. For that reason, prefer third-party validation packages like &lt;a href=&quot;https://github.com/chriso/validator.js&quot;&gt;validator.js&lt;/a&gt; instead of writing your own Regex patterns, or make use of &lt;a href=&quot;https://github.com/substack/safe-regex&quot;&gt;safe-regex&lt;/a&gt; to detect vulnerable regex patterns&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Poorly written regexes could be susceptible to Regular Expression DoS attacks that will block the event loop completely. For example, the popular &lt;code&gt;moment&lt;/code&gt; package was found vulnerable with malicious RegEx usage in November of 2017&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/regex.md&quot;&gt;&lt;strong&gt;Read More: Prevent malicious RegEx&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.17. Avoid module loading using a variable&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid requiring/importing another file with a path that was given as parameter due to the concern that it could have originated from user input. This rule can be extended for accessing files in general (i.e. &lt;code&gt;fs.readFile()&lt;/code&gt;) or other sensitive resource access with dynamic variables originating from user input. &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-security&quot;&gt;Eslint-plugin-security&lt;/a&gt; linter can catch such patterns and warn early enough&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Malicious user input could find its way to a parameter that is used to require tampered files, for example, a previously uploaded file on the file system, or access already existing system files.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/safemoduleloading.md&quot;&gt;&lt;strong&gt;Read More: Safe module loading&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.18. Run unsafe code in a sandbox&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When tasked to run external code that is given at run-time (e.g. plugin), use any sort of &#39;sandbox&#39; execution environment that isolates and guards the main code against the plugin. This can be achieved using a dedicated process (e.g. &lt;code&gt;cluster.fork()&lt;/code&gt;), serverless environment or dedicated npm packages that act as a sandbox&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A plugin can attack through an endless variety of options like infinite loops, memory overloading, and access to sensitive process environment variables&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/sandbox.md&quot;&gt;&lt;strong&gt;Read More: Run unsafe code in a sandbox&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.19. Take extra care when working with child processes&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid using child processes when possible and validate and sanitize input to mitigate shell injection attacks if you still have to. Prefer using &lt;code&gt;child_process.execFile&lt;/code&gt; which by definition will only execute a single command with a set of attributes and will not allow shell parameter expansion.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Naive use of child processes could result in remote command execution or shell injection attacks due to malicious user input passed to an unsanitized system command.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/childprocesses.md&quot;&gt;&lt;strong&gt;Read More: Be cautious when working with child processes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.20. Hide error details from clients&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; An integrated express error handler hides the error details by default. However, great are the chances that you implement your own error handling logic with custom Error objects (considered by many as a best practice). If you do so, ensure not to return the entire Error object to the client, which might contain some sensitive application details&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Sensitive application details such as server file paths, third party modules in use, and other internal workflows of the application which could be exploited by an attacker, could be leaked from information found in a stack trace&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/hideerrors.md&quot;&gt;&lt;strong&gt;Read More: Hide error details from client&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.21. Configure 2FA for npm or Yarn&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Any step in the development chain should be protected with MFA (multi-factor authentication), npm/Yarn are a sweet opportunity for attackers who can get their hands on some developer&#39;s password. Using developer credentials, attackers can inject malicious code into libraries that are widely installed across projects and services. Maybe even across the web if published in public. Enabling 2-factor-authentication in npm leaves almost zero chances for attackers to alter your package code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; &lt;a href=&quot;https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8&quot;&gt;Have you heard about the eslint developer whose password was hijacked?&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.22. Modify session middleware settings&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Each web framework and technology has its known weaknesses - telling an attacker which web framework we use is a great help for them. Using the default settings for session middlewares can expose your app to module- and framework-specific hijacking attacks in a similar way to the &lt;code&gt;X-Powered-By&lt;/code&gt; header. Try hiding anything that identifies and reveals your tech stack (E.g. Node.js, express)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Cookies could be sent over insecure connections, and an attacker might use session identification to identify the underlying framework of the web application, as well as module-specific vulnerabilities&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/sessions.md&quot;&gt;&lt;strong&gt;Read More: Cookie and session security&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.23. Avoid DOS attacks by explicitly setting when a process should crash&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The Node process will crash when errors are not handled. Many best practices even recommend to exit even though an error was caught and got handled. Express, for example, will crash on any asynchronous error - unless you wrap routes with a catch clause. This opens a very sweet attack spot for attackers who recognize what input makes the process crash and repeatedly send the same request. There&#39;s no instant remedy for this but a few techniques can mitigate the pain: Alert with critical severity anytime a process crashes due to an unhandled error, validate the input and avoid crashing the process due to invalid user input, wrap all routes with a catch and consider not to crash when an error originated within a request (as opposed to what happens globally)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; This is just an educated guess: given many Node.js applications, if we try passing an empty JSON body to all POST requests - a handful of applications will crash. At that point, we can just repeat sending the same request to take down the applications with ease&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.24. Prevent unsafe redirects&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Redirects that do not validate user input can enable attackers to launch phishing scams, steal user credentials, and perform other malicious actions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; If an attacker discovers that you are not validating external, user-supplied input, they may exploit this vulnerability by posting specially-crafted links on forums, social media, and other public places to get users to click it.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/saferedirects.md&quot;&gt;&lt;strong&gt;Read More: Prevent unsafe redirects&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.25. Avoid publishing secrets to the npm registry&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Precautions should be taken to avoid the risk of accidentally publishing secrets to public npm registries. An &lt;code&gt;.npmignore&lt;/code&gt; file can be used to ignore specific files or folders, or the &lt;code&gt;files&lt;/code&gt; array in &lt;code&gt;package.json&lt;/code&gt; can act as an allow list.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your project&#39;s API keys, passwords or other secrets are open to be abused by anyone who comes across them, which may result in financial loss, impersonation, and other risks.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/avoid_publishing_secrets.md&quot;&gt;&lt;strong&gt;Read More: Avoid publishing secrets&lt;/strong&gt;&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;7. Draft: Performance Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;Our contributors are working on this section. &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/256&quot;&gt;Would you like to join?&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 7.1. Don&#39;t block the event loop&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid CPU intensive tasks as they will block the mostly single-threaded Event Loop and offload those to a dedicated thread, process or even a different technology based on the context.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; As the Event Loop is blocked, Node.js will be unable to handle other request thus causing delays for concurrent users. &lt;strong&gt;3000 users are waiting for a response, the content is ready to be served, but one single request blocks the server from dispatching the results back&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/performance/block-loop.md&quot;&gt;&lt;strong&gt;Read More: Do not block the event loop&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 7.2. Prefer native JS methods over user-land utils like Lodash&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; It&#39;s often more penalising to use utility libraries like &lt;code&gt;lodash&lt;/code&gt; and &lt;code&gt;underscore&lt;/code&gt; over native methods as it leads to unneeded dependencies and slower performance. Bear in mind that with the introduction of the new V8 engine alongside the new ES standards, native methods were improved in such a way that it&#39;s now about 50% more performant than utility libraries.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You&#39;ll have to maintain less performant projects where you could have simply used what was &lt;strong&gt;already&lt;/strong&gt; available or dealt with a few more lines in exchange of a few more files.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/performance/nativeoverutil.md&quot;&gt;&lt;strong&gt;Read More: Native over user land utils&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;8. Docker Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;🏅 Many thanks to &lt;a href=&quot;https://github.com/BretFisher&quot;&gt;Bret Fisher&lt;/a&gt; from whom we learned many of the following practices&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.1 Use multi-stage builds for leaner and more secure Docker images&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use multi-stage build to copy only necessary production artifacts. A lot of build-time dependencies and files are not needed for running your application. With multi-stage builds these resources can be used during build while the runtime environment contains only what&#39;s necessary. Multi-stage builds are an easy way to get rid of overweight and security threats.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Larger images will take longer to build and ship, build-only tools might contain vulnerabilities and secrets only meant for the build phase might be leaked.&lt;/p&gt; 
&lt;h3&gt;Example Dockerfile for multi-stage builds&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;FROM node:14.4.0 AS build

COPY . .
RUN npm ci &amp;amp;&amp;amp; npm run build

FROM node:slim-14.4.0

USER node
EXPOSE 8080

COPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./
RUN npm ci --production

CMD [ &quot;node&quot;, &quot;dist/app.js&quot; ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/multi_stage_builds.md&quot;&gt;&lt;strong&gt;Read More: Use multi-stage builds&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.2. Bootstrap using &lt;code&gt;node&lt;/code&gt; command, avoid &lt;code&gt;npm start&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; use &lt;code&gt;CMD [&#39;node&#39;,&#39;server.js&#39;]&lt;/code&gt; to start your app, avoid using npm scripts which don&#39;t pass OS signals to the code. This prevents problems with child-processes, signal handling, graceful shutdown and having zombie processes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When no signals are passed, your code will never be notified about shutdowns. Without this, it will lose its chance to close properly possibly losing current requests and/or data.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/bootstrap-using-node.md&quot;&gt;&lt;strong&gt;Read More: Bootstrap container using node command, avoid npm start&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.3. Let the Docker runtime handle replication and uptime&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When using a Docker run time orchestrator (e.g., Kubernetes), invoke the Node.js process directly without intermediate process managers or custom code that replicate the process (e.g. PM2, Cluster module). The runtime platform has the highest amount of data and visibility for making placement decision - It knows best how many processes are needed, how to spread them and what to do in case of crashes&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Container keeps crashing due to lack of resources will get restarted indefinitely by the process manager. Should Kubernetes be aware of that, it could relocate it to a different roomy instance&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/restart-and-replicate-processes.md&quot;&gt;&lt;strong&gt;Read More: Let the Docker orchestrator restart and replicate processes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.4. Use .dockerignore to prevent leaking secrets&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Include a &lt;code&gt;.dockerignore&lt;/code&gt; file that filters out common secret files and development artifacts. By doing so, you might prevent secrets from leaking into the image. As a bonus the build time will significantly decrease. Also, ensure not to copy all files recursively rather explicitly choose what should be copied to Docker&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;: Common personal secret files like &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;.aws&lt;/code&gt; and &lt;code&gt;.npmrc&lt;/code&gt; will be shared with anybody with access to the image (e.g. Docker repository)&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/docker-ignore.md&quot;&gt;&lt;strong&gt;Read More: Use .dockerignore&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.5. Clean-up dependencies before production&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Although Dev-Dependencies are sometimes needed during the build and test life-cycle, eventually the image that is shipped to production should be minimal and clean from development dependencies. Doing so guarantees that only necessary code is shipped and the amount of potential attacks (i.e. attack surface) is minimized. When using multi-stage build (see dedicated bullet) this can be achieved by installing all dependencies first and finally running &lt;code&gt;npm ci --production&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Many of the infamous npm security breaches were found within development packages (e.g. &lt;a href=&quot;https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes&quot;&gt;eslint-scope&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;🔗 Read More: &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/install-for-production.md&quot;&gt;Remove development dependencies&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.6. Shutdown smartly and gracefully&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Handle the process SIGTERM event and clean-up all existing connection and resources. This should be done while responding to ongoing requests. In Dockerized runtimes shutting down containers is not a rare event, rather a frequent occurrence that happen as part of routine work. Achieving this demands some thoughtful code to orchestrate several moving parts: The load balancer, keep-alive connections, the HTTP server and other resources&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Dying immediately means not responding to thousands of disappointed users&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/graceful-shutdown.md&quot;&gt;&lt;strong&gt;Read More: Graceful shutdown&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.7. Set memory limits using both Docker and v8&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Always configure a memory limit using both Docker and the JavaScript runtime flags. The Docker limit is needed to make thoughtful container placement decision, the --v8&#39;s flag max-old-space is needed to kick off the GC on time and prevent under utilization of memory. Practically, set the v8&#39;s old space memory to be a just bit less than the container limit&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The docker definition is needed to perform thoughtful scaling decision and prevent starving other citizens. Without also defining the v8&#39;s limits, it will under utilize the container resources - Without explicit instructions it crashes when utilizing ~50-60% of its host resources&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/memory-limit.md&quot;&gt;&lt;strong&gt;Read More: Set memory limits using Docker only&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.8. Plan for efficient caching&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Rebuilding a whole docker image from cache can be nearly instantaneous if done correctly. The less updated instructions should be at the top of your Dockerfile and the ones constantly changing (like app code) should be at the bottom.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Docker build will be very long and consume lot of resources even when making tiny changes&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/use-cache-for-shorter-build-time.md&quot;&gt;&lt;strong&gt;Read More: Leverage caching to reduce build times&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.9. Use explicit image reference, avoid &lt;code&gt;latest&lt;/code&gt; tag&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Specify an explicit image digest or versioned label, never refer to &lt;code&gt;latest&lt;/code&gt;. Developers are often led to believe that specifying the &lt;code&gt;latest&lt;/code&gt; tag will provide them with the most recent image in the repository however this is not the case. Using a digest guarantees that every instance of the service is running exactly the same code.&lt;/p&gt; 
&lt;p&gt;In addition, referring to an image tag means that the base image is subject to change, as image tags cannot be relied upon for a deterministic install. Instead, if a deterministic install is expected, a SHA256 digest can be used to reference an exact image.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A new version of a base image could be deployed into production with breaking changes, causing unintended application behaviour.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/image-tags.md&quot;&gt;&lt;strong&gt;Read More: Understand image tags and use the &quot;latest&quot; tag with caution&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.10. Prefer smaller Docker base images&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Large images lead to higher exposure to vulnerabilities and increased resource consumption. Using leaner Docker images, such as Slim and Alpine Linux variants, mitigates this issue.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Building, pushing, and pulling images will take longer, unknown attack vectors can be used by malicious actors and more resources are consumed.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/smaller_base_images.md&quot;&gt;&lt;strong&gt;Read More: Prefer smaller images&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.11. Clean-out build-time secrets, avoid secrets in args&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid secrets leaking from the Docker build environment. A Docker image is typically shared in multiple environment like CI and a registry that are not as sanitized as production. A typical example is an npm token which is usually passed to a dockerfile as argument. This token stays within the image long after it is needed and allows the attacker indefinite access to a private npm registry. This can be avoided by coping a secret file like &lt;code&gt;.npmrc&lt;/code&gt; and then removing it using multi-stage build (beware, build history should be deleted as well) or by using Docker build-kit secret feature which leaves zero traces&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Everyone with access to the CI and docker registry will also get access to some precious organization secrets as a bonus&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/avoid-build-time-secrets.md&quot;&gt;&lt;strong&gt;Read More: Clean-out build-time secrets&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.12. Scan images for multi layers of vulnerabilities&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Besides checking code dependencies vulnerabilities also scan the final image that is shipped to production. Docker image scanners check the code dependencies but also the OS binaries. This E2E security scan covers more ground and verifies that no bad guy injected bad things during the build. Consequently, it is recommended running this as the last step before deployment. There are a handful of free and commercial scanners that also provide CI/CD plugins&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your code might be entirely free from vulnerabilities. However it might still get hacked due to vulnerable version of OS-level binaries (e.g. OpenSSL, TarBall) that are commonly being used by applications&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/scan-images.md&quot;&gt;&lt;strong&gt;Read More: Scan the entire image before production&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.13 Clean NODE_MODULE cache&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; After installing dependencies in a container remove the local cache. It doesn&#39;t make any sense to duplicate the dependencies for faster future installs since there won&#39;t be any further installs - A Docker image is immutable. Using a single line of code tens of MB (typically 10-50% of the image size) are shaved off&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The image that will get shipped to production will weigh 30% more due to files that will never get used&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/clean-cache.md&quot;&gt;&lt;strong&gt;Read More: Clean NODE_MODULE cache&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.14. Generic Docker practices&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; This is a collection of Docker advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/generic-tips.md&quot;&gt;&lt;strong&gt;Read More: Generic Docker practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.15. Lint your Dockerfile&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Linting your Dockerfile is an important step to identify issues in your Dockerfile which differ from best practices. By checking for potential flaws using a specialised Docker linter, performance and security improvements can be easily identified, saving countless hours of wasted time or security issues in production code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Mistakenly the Dockerfile creator left Root as the production user, and also used an image from unknown source repository. This could be avoided with with just a simple linter.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/lint-dockerfile.md&quot;&gt;&lt;strong&gt;Read More: Lint your Dockerfile&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Milestones&lt;/h1&gt; 
&lt;p&gt;To maintain this guide and keep it up to date, we are constantly updating and improving the guidelines and best practices with the help of the community. You can follow our &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/milestones&quot;&gt;milestones&lt;/a&gt; and join the working groups if you want to contribute to this project&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;All translations are contributed by the community. We will be happy to get any help with either completed, ongoing or new translations!&lt;/p&gt; 
&lt;h3&gt;Completed translations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/BR.png&quot; alt=&quot;BR&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.brazilian-portuguese.md&quot;&gt;Brazilian Portuguese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/marcelosdm&quot;&gt;Marcelo Melo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/CN.png&quot; alt=&quot;CN&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.chinese.md&quot;&gt;Chinese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mattjin&quot;&gt;Matt Jin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/RU.png&quot; alt=&quot;RU&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.russian.md&quot;&gt;Russian&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/contributorpw&quot;&gt;Alex Ivanov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/PL.png&quot; alt=&quot;PL&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.polish.md&quot;&gt;Polish&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mbiesiad&quot;&gt;Michal Biesiada&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/JA.png&quot; alt=&quot;JA&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.japanese.md&quot;&gt;Japanese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/YukiOta&quot;&gt;Yuki Ota&lt;/a&gt;, &lt;a href=&quot;https://github.com/YA21&quot;&gt;Yuta Azumi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png&quot; alt=&quot;EU&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.basque.md&quot;&gt;Basque&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/anediaz&quot;&gt;Ane Diaz de Tuesta&lt;/a&gt; &amp;amp; Joxefe Diaz de Tuesta&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Translations in progress&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/FR.png&quot; alt=&quot;FR&quot;&gt; &lt;a href=&quot;https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md&quot;&gt;French&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/129&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/HE.png&quot; alt=&quot;HE&quot;&gt; Hebrew (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/156&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/KR.png&quot; alt=&quot;KR&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.korean.md&quot;&gt;Korean&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/uronly14me&quot;&gt;Sangbeom Han&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/94&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/ES.png&quot; alt=&quot;ES&quot;&gt; &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md&quot;&gt;Spanish&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/95&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/TR.png&quot; alt=&quot;TR&quot;&gt; Turkish (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/139&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Steering Committee&lt;/h2&gt; 
&lt;p&gt;Meet the steering committee members - the people who work together to provide guidance and future direction to the project. In addition, each member of the committee leads a project tracked under our &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/projects&quot;&gt;GitHub projects&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/goldbergyoni&quot;&gt;Yoni Goldberg&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Independent Node.js consultant who works with customers in the USA, Europe, and Israel on building large-scale Node.js applications. Many of the best practices above were first published at &lt;a href=&quot;https://goldbergyoni.com&quot;&gt;goldbergyoni.com&lt;/a&gt;. Reach Yoni at &lt;a href=&quot;https://github.com/goldbergyoni&quot;&gt;@goldbergyoni&lt;/a&gt; or &lt;a href=&quot;mailto:me@goldbergyoni.com&quot;&gt;me@goldbergyoni.com&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/BrunoScheufler&quot;&gt;Bruno Scheufler&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;💻 full-stack web engineer, Node.js &amp;amp; GraphQL enthusiast&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/js-kyle&quot;&gt;Kyle Martin&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Full Stack Developer &amp;amp; Site Reliability Engineer based in New Zealand, interested in web application security, and architecting and building Node.js applications to perform at global scale.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/kevynb&quot;&gt;Kevyn Bruyere&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Independent full-stack developer with a taste for Ops and automation.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Steering Committee Emeriti&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sagirk&quot;&gt;Sagir Khan&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Deep specialist in JavaScript and its ecosystem — React, Node.js, TypeScript, GraphQL, MongoDB, pretty much anything that involves JS/JSON in any layer of the system — building products using the web platform for the world’s most recognized brands. Individual Member of the Node.js Foundation.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Collaborators&lt;/h2&gt; 
&lt;p&gt;Thank you to all our collaborators! 🙏&lt;/p&gt; 
&lt;p&gt;Our collaborators are members who are contributing to the repository on a regular basis, through suggesting new best practices, triaging issues, reviewing pull requests and more. If you are interested in helping us guide thousands of people to craft better Node.js applications, please read our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/CONTRIBUTING.md&quot;&gt;contributor guidelines&lt;/a&gt; 🎉&lt;/p&gt; 
&lt;p&gt;| 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | | :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: | | &lt;a href=&quot;https://github.com/idori&quot;&gt;Ido Richter (Founder)&lt;/a&gt; | &lt;a href=&quot;https://github.com/TheHollidayInn&quot;&gt;Keith Holliday&lt;/a&gt; |&lt;/p&gt; 
&lt;h3&gt;Collaborator Emeriti&lt;/h3&gt; 
&lt;p&gt;| 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | | :-------------------------------------------------------------------------------------------------------------------------: | | &lt;a href=&quot;https://github.com/refack&quot;&gt;Refael Ackermann&lt;/a&gt; |&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve ever wanted to contribute to open source, now is your chance! See the &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/CONTRIBUTING.md&quot;&gt;contributing docs&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people who have contributed to this repository!&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>mjmlio/mjml</title>
      <link>https://github.com/mjmlio/mjml</link>
      <description>&lt;p&gt;MJML: the only framework that makes responsive-email easy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MJML 4&lt;/h1&gt; 
&lt;p&gt;If you&#39;re looking for MJML 3.3.X check &lt;a href=&quot;https://github.com/mjmlio/mjml/tree/3.3.x&quot;&gt;this branch&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h1&gt;Translated documentation&lt;/h1&gt; 
&lt;p&gt;| Language | Link for documentation | | :-: | :-: | | 日本語 | &lt;a href=&quot;https://github.com/mjmlio/mjml/blob/master/readme-ja.md&quot;&gt;日本語ドキュメント&lt;/a&gt; |&lt;/p&gt; 
&lt;h1&gt;Introduction&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;MJML&lt;/code&gt; is a markup language created by &lt;a href=&quot;https://www.mailjet.com/&quot;&gt;Mailjet&lt;/a&gt; and designed to reduce the pain of coding a responsive email. Its semantic syntax makes the language easy and straightforward while its rich standard components library shortens your development time and lightens your email codebase. MJML’s open-source engine takes care of translating the &lt;code&gt;MJML&lt;/code&gt; you wrote into responsive HTML.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;p&gt;You can install &lt;code&gt;MJML&lt;/code&gt; with &lt;code&gt;NPM&lt;/code&gt; to use it with NodeJS or the Command Line Interface. If you&#39;re not sure what those are, head over to 
 &lt;!-- raw HTML omitted --&gt;Usage
 &lt;!-- raw HTML omitted --&gt; for other ways to use MJML.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mjml
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Development&lt;/h1&gt; 
&lt;p&gt;To work on MJML, make changes and create merge requests, download and install &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/install/&quot;&gt;yarn&lt;/a&gt; for easy development.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/mjmlio/mjml.git &amp;amp;&amp;amp; cd mjml
yarn
yarn build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also run &lt;code&gt;yarn build:watch&lt;/code&gt; to rebuild the package as you code.&lt;/p&gt; 
&lt;h1&gt;Usage&lt;/h1&gt; 
&lt;h2&gt;Online&lt;/h2&gt; 
&lt;p&gt;Don&#39;t want to install anything? Use the free online editor!&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Applications and plugins&lt;/h2&gt; 
&lt;p&gt;MJML comes with an ecosystem of tools and plugins, check out:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://mjmlio.github.io/mjml-app/&quot;&gt;MJML App&lt;/a&gt; (MJML is included)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mjmlio/vscode-mjml&quot;&gt;Visual Studio Code plugin&lt;/a&gt; (MJML is included)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://atom.io/users/mjmlio&quot;&gt;Atom plugin&lt;/a&gt; (MJML needs to be installed separately)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/packages/MJML-syntax&quot;&gt;Sublime Text plugin&lt;/a&gt; (MJML needs to be installed separately)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For more tools, check the &lt;a href=&quot;https://mjml.io/community&quot;&gt;Community&lt;/a&gt; page.&lt;/p&gt; 
&lt;h2&gt;Command line interface&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Compiles the file and outputs the HTML generated in &lt;code&gt;output.html&lt;/code&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mjml input.mjml -o output.html
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can pass optional &lt;code&gt;arguments&lt;/code&gt; to the CLI and combine them.&lt;/p&gt; 
&lt;p&gt;argument | description | default value ---------|--------|-------------- &lt;code&gt;mjml -m [input]&lt;/code&gt; | Migrates a v3 MJML file to the v4 syntax | NA &lt;code&gt;mjml [input] -o [output]&lt;/code&gt; | Writes the output to [output] | NA &lt;code&gt;mjml [input] -s&lt;/code&gt; | Writes the output to &lt;code&gt;stdout&lt;/code&gt; | NA &lt;code&gt;mjml -w [input]&lt;/code&gt; | Watches the changes made to &lt;code&gt;[input]&lt;/code&gt; (file or folder) | NA &lt;code&gt;mjml [input] --config.beautify&lt;/code&gt; | Beautifies the output (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) | true &lt;code&gt;mjml [input] --config.minify&lt;/code&gt; | Minifies the output (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) | false&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md&quot;&gt;mjml-cli documentation&lt;/a&gt; for more information about config options.&lt;/p&gt; 
&lt;h2&gt;Inside Node.js&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import mjml2html from &#39;mjml&#39;

/*
  Compile an mjml string
*/
const htmlOutput = mjml2html(`
  &amp;lt;mjml&amp;gt;
    &amp;lt;mj-body&amp;gt;
      &amp;lt;mj-section&amp;gt;
        &amp;lt;mj-column&amp;gt;
          &amp;lt;mj-text&amp;gt;
            Hello World!
          &amp;lt;/mj-text&amp;gt;
        &amp;lt;/mj-column&amp;gt;
      &amp;lt;/mj-section&amp;gt;
    &amp;lt;/mj-body&amp;gt;
  &amp;lt;/mjml&amp;gt;
`, options)


/*
  Print the responsive HTML generated and MJML errors if any
*/
console.log(htmlOutput)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can pass optional &lt;code&gt;options&lt;/code&gt; as an object to the &lt;code&gt;mjml2html&lt;/code&gt; function:&lt;/p&gt; 
&lt;p&gt;option | unit | description | default value -------------|--------|--------------|--------------- fonts | object | Default fonts imported in the HTML rendered by HTML | See in &lt;a href=&quot;https://github.com/mjmlio/mjml/blob/master/packages/mjml-core/src/index.js#L36-L44&quot;&gt;index.js&lt;/a&gt; keepComments | boolean | Option to keep comments in the HTML output | true ignoreIncludes | boolean | Option to ignore mj-includes | false beautify | boolean | Option to beautify the HTML output | false minify | boolean | Option to minify the HTML output | false validationLevel | string | Available values for the &lt;a href=&quot;https://github.com/mjmlio/mjml/tree/master/packages/mjml-validator#validating-mjml&quot;&gt;validator&lt;/a&gt;: &#39;strict&#39;, &#39;soft&#39;, &#39;skip&#39; | &#39;soft&#39; filePath | string | Path of file, used for relative paths in mj-includes | &#39;.&#39; preprocessors | array of functions | Preprocessors applied to the xml before parsing. Input must be xml, not json. Functions must be (xml: string) =&amp;gt; string | [] juicePreserveTags | Preserve some tags when inlining css, see &lt;a href=&quot;https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md&quot;&gt;mjml-cli documentation&lt;/a&gt; for more info | NA minifyOptions | Options for html minifier, see &lt;a href=&quot;https://github.com/mjmlio/mjml/blob/master/packages/mjml-cli/README.md&quot;&gt;mjml-cli documentation&lt;/a&gt; for more info | NA mjmlConfigPath | string | The path or directory of the &lt;code&gt;.mjmlconfig&lt;/code&gt; file (for custom components use) | &lt;code&gt;process.cwd()&lt;/code&gt; useMjmlConfigOptions | Allows to use the &lt;code&gt;config&lt;/code&gt; attribute from &lt;code&gt;.mjmlconfig&lt;/code&gt; file | false&lt;/p&gt; 
&lt;h2&gt;Client-side (in browser)&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var mjml2html = require(&#39;mjml-browser&#39;)

/*
  Compile a mjml string
*/
var htmlOutput = mjml2html(`
  &amp;lt;mjml&amp;gt;
    &amp;lt;mj-body&amp;gt;
      &amp;lt;mj-section&amp;gt;
        &amp;lt;mj-column&amp;gt;
          &amp;lt;mj-text&amp;gt;
            Hello World!
          &amp;lt;/mj-text&amp;gt;
        &amp;lt;/mj-column&amp;gt;
      &amp;lt;/mj-section&amp;gt;
    &amp;lt;/mj-body&amp;gt;
  &amp;lt;/mjml&amp;gt;
`, options)


/*
  Print the responsive HTML generated and MJML errors if any
*/
console.log(htmlOutput)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;p&gt;A free-to-use MJML API is available to make it easy to integrate MJML in your application. Head over &lt;a href=&quot;https://mjml.io/api&quot;&gt;here&lt;/a&gt; to learn more about the API.&lt;/p&gt; 
&lt;h1&gt;MJML Slack&lt;/h1&gt; 
&lt;p&gt;MJML wouldn&#39;t be as cool without its amazing community. Head over the &lt;a href=&quot;https://slack.mjml.io/&quot;&gt;Community Slack&lt;/a&gt; to meet fellow MJML&#39;ers.&lt;/p&gt; 
&lt;h1&gt;Contributors&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iRyusa&quot;&gt;Maxime&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ngarnier&quot;&gt;Nicolas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kmcb777&quot;&gt;Cedric&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lohek&quot;&gt;Loeck&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/robink&quot;&gt;Robin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GuillaumeBadi&quot;&gt;Guillaume&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/meriadec&quot;&gt;Meriadec&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arnaudbreton&quot;&gt;Arnaud&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hteumeuleu&quot;&gt;HTeuMeuLeu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/epayet&quot;&gt;Emmanuel Payet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/swibge&quot;&gt;Matthieu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rogierslag&quot;&gt;Rogier&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>GUI/covid-vaccine-spotter</title>
      <link>https://github.com/GUI/covid-vaccine-spotter</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COVID-19 Vaccine Spotter&lt;/h1&gt; 
&lt;p&gt;A tool to help you track down COVID-19 vaccine appointment openings at your state&#39;s pharmacies. The code behind https://www.vaccinespotter.org.&lt;/p&gt; 
&lt;h2&gt;UI Development Setup&lt;/h2&gt; 
&lt;p&gt;Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js 14+&lt;/li&gt; 
 &lt;li&gt;Yarn&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This process is clunky right now, so my apologies.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/GUI/covid-vaccine-spotter.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install dependencies (inside the repo): &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fetch data from the &lt;a href=&quot;https://www.vaccinespotter.org/api/&quot;&gt;API&lt;/a&gt; for the website to run: &lt;code&gt;yarn setup&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;To run the development server for the website: &lt;code&gt;yarn dev&lt;/code&gt;. The development site should then be available at http://localhost:3000/.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;DB and Backend Development Setup&lt;/h2&gt; 
&lt;p&gt;docker-compose is used to bring up a local postgres DB. Then an image runs to bootstrap the database with states and postal codes. Finally, as an example of a backend task running, a container runs the &lt;code&gt;refresh-website&lt;/code&gt; task.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker-compose build
docker-compose up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run additional tasks, you can use &lt;code&gt;docker-compose run&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker-compose run --rm --no-deps task_runner bin/refresh-cvs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Very Beta API&lt;/h2&gt; 
&lt;p&gt;All of the data being collected is published as JSON files here: https://www.vaccinespotter.org/api/&lt;/p&gt; 
&lt;p&gt;Subscribe to this discussion for any announcement of API changes: https://github.com/GUI/covid-vaccine-spotter/discussions/27&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/GUI/covid-vaccine-spotter/main/LICENSE.txt&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>john-smilga/node-express-course</title>
      <link>https://github.com/john-smilga/node-express-course</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Node and Express Tutorial&lt;/h2&gt; 
&lt;h4&gt;Contents&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Node Tutorial&lt;/li&gt; 
 &lt;li&gt;Express Tutorial&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>mengshukeji/Luckysheet</title>
      <link>https://github.com/mengshukeji/Luckysheet</link>
      <description>&lt;p&gt;Luckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/docs/.vuepress/public/img/logo_text.png&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/mengshukeji/Luckysheet?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/mengshukeji/Luckysheet.svg&quot; alt=&quot;Join the chat at https://gitter.im/mengshukeji/Luckysheet&quot;&gt;&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;English| &lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/README-zh.md&quot;&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;🚀Luckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;p&gt;| Source Code | Documentation | Demo | Plugins Demo | Forum | | ------ | -------- | ------ | ------ | ------ | | &lt;a href=&quot;https://github.com/mengshukeji/Luckysheet&quot;&gt;Github&lt;/a&gt;| &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/&quot;&gt;Online Documentation&lt;/a&gt; | &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDemo&quot;&gt;Online Demo&lt;/a&gt; / &lt;a href=&quot;http://luckysheet.lashuju.com/demo/&quot;&gt;Cooperative editing demo&lt;/a&gt; | &lt;a href=&quot;https://mengshukeji.github.io/LuckyexcelDemo/&quot;&gt;Import Excel Demo&lt;/a&gt; | &lt;a href=&quot;https://support.qq.com/product/288322&quot;&gt;Chinese Forum&lt;/a&gt; | | &lt;a href=&quot;https://gitee.com/mengshukeji/Luckysheet&quot;&gt;Gitee Mirror&lt;/a&gt;| &lt;a href=&quot;https://mengshukeji.gitee.io/LuckysheetDocs/&quot;&gt;Gitee Online Documentation&lt;/a&gt; | &lt;a href=&quot;https://mengshukeji.gitee.io/luckysheetdemo/&quot;&gt;Gitee Online Demo&lt;/a&gt; | &lt;a href=&quot;https://mengshukeji.gitee.io/luckyexceldemo/&quot;&gt;Gitee Import Excel Demo&lt;/a&gt; | &lt;a href=&quot;https://groups.google.com/g/luckysheet&quot;&gt;Google Group&lt;/a&gt; |&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/docs/.vuepress/public/img/LuckysheetDemo.gif&quot; alt=&quot;Demo&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/Luckyexcel&quot;&gt;Luckyexcel&lt;/a&gt;: Excel import and export library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/chartMix&quot;&gt;chartMix&lt;/a&gt;: Chart plugin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;p&gt;| Project | Description | |---------|-------------| | &lt;a href=&quot;https://github.com/mengshukeji/luckysheet-vue&quot;&gt;Luckysheet Vue&lt;/a&gt; | Luckysheet and Luckyexcel in a vue cli3 project | | &lt;a href=&quot;https://github.com/mengshukeji/luckysheet-react&quot;&gt;Luckysheet React&lt;/a&gt; | Luckysheet in a React project | | &lt;a href=&quot;https://github.com/mengshukeji/Luckyexcel-node&quot;&gt;Luckyexcel Node&lt;/a&gt; | Use Luckyexcel in koa2 | | &lt;a href=&quot;https://github.com/mengshukeji/LuckysheetServer&quot;&gt;Luckysheet Server&lt;/a&gt; | Java backend Luckysheet Server | | &lt;a href=&quot;https://github.com/mengshukeji/LuckysheetServerStarter&quot;&gt;Luckysheet Server Starter&lt;/a&gt; | LuckysheetServer docker deployment startup template |&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Formatting&lt;/strong&gt;: style, conditional formatting, text alignment and rotation, text truncation, overflow, automatic line wrapping, multiple data types, cell segmentation style&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cells&lt;/strong&gt;: drag and drop, fill handle, multiple selection, find and replace, location, merge cells, data verification&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Row &amp;amp; column&lt;/strong&gt;: hide, insert, delete rows or columns, freeze, and split text&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Operation&lt;/strong&gt;: undo, redo, copy, paste, cut, hot key, format painter, drag and drop selection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Formulas &amp;amp; Functions&lt;/strong&gt;: Built-in, remote and custom formulas&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tables&lt;/strong&gt;: filter, sort&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enhanced functions&lt;/strong&gt;: Pivot tables, charts, comments, cooperative editing, insert picture, matrix calculations, screenshots, copying to other formats, EXCEL import and export, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a more detailed feature list, please refer to: &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/#features&quot;&gt;Features&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📖 Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Priority reading for new users: &lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/wiki/User-Guide&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For the tutorials, learning materials and supporting solutions provided by the community, please refer to: &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/resource.html&quot;&gt;Tutorials and Resources&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📜 Changelog&lt;/h2&gt; 
&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;❗️ Issues&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/contribute.html#how-to-submit-issues&quot;&gt;Issue Reporting Checklist&lt;/a&gt; before opening an issue. Issues not conforming to the guidelines may be closed immediately.&lt;/p&gt; 
&lt;h2&gt;✅ TODO&lt;/h2&gt; 
&lt;p&gt;Managed with &lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/projects/1&quot;&gt;GitHub Projects&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;💪Contribution&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the&lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/contribute.html&quot;&gt; Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;First step&lt;/h3&gt; 
&lt;p&gt;Introduce dependencies through CDN&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/css/pluginsCss.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/plugins.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/css/luckysheet.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/assets/iconfont/iconfont.css&#39; /&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/js/plugin.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/luckysheet.umd.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Second step&lt;/h3&gt; 
&lt;p&gt;Specify a table container&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;luckysheet&quot; style=&quot;margin:0px;padding:0px;position:absolute;width:100%;height:100%;left: 0px;top: 0px;&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Third step&lt;/h3&gt; 
&lt;p&gt;Create a table&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    $(function () {
        //Configuration item
        var options = {
            container: &#39;luckysheet&#39; //luckysheet is the container id
        }
        luckysheet.create(options)
    })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; Version &amp;gt;= 6&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm install
npm install gulp -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Package&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Partner project&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ly525/luban-h5&quot;&gt;luban-h5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MrXujiang/h5-Dooring&quot;&gt;h5-Dooring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitee.com/monksoul/Furion&quot;&gt;Furion&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/discussions&quot;&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/mengshukeji/Luckysheet&quot;&gt;Gitter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/README-zh.md&quot;&gt;Chinese community&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;Luckysheet is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/about/sponsor.html#sponsors-list&quot;&gt;backers&lt;/a&gt;. If you&#39;d like to join them, please consider:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.patreon.com/mengshukeji&quot;&gt;Become a backer or sponsor on Patreon&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://opencollective.com/luckysheet&quot;&gt;Become a backer or sponsor on Open Collective&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;One-time donation via PayPal, WeChat or Alipay&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;| PayPal | WeChat | Alipay | |---|---|---| | &lt;a href=&quot;https://www.paypal.me/wbfsa&quot;&gt;Paypal Me&lt;/a&gt; | 
 &lt;!-- raw HTML omitted --&gt;| 
 &lt;!-- raw HTML omitted --&gt; |&lt;/p&gt; 
&lt;h3&gt;What&#39;s the difference between Patreon and OpenCollective?&lt;/h3&gt; 
&lt;p&gt;Funds donated via Patreon go directly to support mengshukeji&#39;s work on Luckysheet. Funds donated via OpenCollective are managed with transparent expenses and will be used for compensating work and expenses for core team members or sponsoring community events. Your name/logo will receive proper recognition and exposure by donating on either platform.&lt;/p&gt; 
&lt;h2&gt;Sponsors List&lt;/h2&gt; 
&lt;p&gt;(Sort by time)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;*勇 ¥ 30&lt;/li&gt; 
 &lt;li&gt;虚我 ¥ 200&lt;/li&gt; 
 &lt;li&gt;甜党 ¥ 50&lt;/li&gt; 
 &lt;li&gt;Alphabet(Google)-gcf ¥ 1&lt;/li&gt; 
 &lt;li&gt;**平 ¥ 100&lt;/li&gt; 
 &lt;li&gt;**东 ¥ 10&lt;/li&gt; 
 &lt;li&gt;debugger ¥ 20&lt;/li&gt; 
 &lt;li&gt;烦了烦 ¥ 10&lt;/li&gt; 
 &lt;li&gt;文顶顶 ¥ 200&lt;/li&gt; 
 &lt;li&gt;yangxshn ¥ 10&lt;/li&gt; 
 &lt;li&gt;爱乐 ¥ 100&lt;/li&gt; 
 &lt;li&gt;小李飞刀刀 ¥ 66&lt;/li&gt; 
 &lt;li&gt;张铭 ¥ 200&lt;/li&gt; 
 &lt;li&gt;曹治军 ¥ 1&lt;/li&gt; 
 &lt;li&gt;*特 ¥ 10&lt;/li&gt; 
 &lt;li&gt;**权 ¥ 9.9&lt;/li&gt; 
 &lt;li&gt;**sdmq ¥ 20&lt;/li&gt; 
 &lt;li&gt;*旭 ¥ 10&lt;/li&gt; 
 &lt;li&gt;Quentin ¥ 20&lt;/li&gt; 
 &lt;li&gt;周宇凡 ¥ 100&lt;/li&gt; 
 &lt;li&gt;*超 ¥ 10&lt;/li&gt; 
 &lt;li&gt;维宁 ¥ 100&lt;/li&gt; 
 &lt;li&gt;hyy ¥ 20&lt;/li&gt; 
 &lt;li&gt;雨亭寒江月 ¥ 50&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Authors and acknowledgment&lt;/h2&gt; 
&lt;h3&gt;Active Core Team Members&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wbfsa&quot;&gt;@wbfsa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iamxuchen800117&quot;&gt;@iamxuchen800117&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wpxp123456&quot;&gt;@wpxp123456&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tonytonychopper123&quot;&gt;@tonytonychopper123&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Dushusir&quot;&gt;@Dushusir&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weibo.com/u/3884623955&quot;&gt;@c19c19i&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zhangchen915&quot;&gt;@zhangchen915&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jerry-f&quot;&gt;@jerry-f&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/flowerField&quot;&gt;@flowerField&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Community Partners&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danielcai1987&quot;&gt;@danielcai1987&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qq6690876&quot;&gt;@qq6690876&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/javahuang&quot;&gt;@javahuang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TimerGang&quot;&gt;@TimerGang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gsw945&quot;&gt;@gsw945&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/swen-xiong&quot;&gt;@swen-xiong&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lzmch&quot;&gt;@lzmch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kdevilpf&quot;&gt;@kdevilpf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/WJWM0316&quot;&gt;@WJWM0316&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2020-present, mengshukeji&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>learning-zone/nodejs-interview-questions</title>
      <link>https://github.com/learning-zone/nodejs-interview-questions</link>
      <description>&lt;p&gt;Frequently Asked Node.js Interview Questions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Interview Questions&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Click 
  &lt;!-- raw HTML omitted --&gt; if you like the project. Pull Request are highly appreciated.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/nodejs-api.md&quot;&gt;NodeJS APIs&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;| Sl.No| Questions | |------|------------------| | 01. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-does-the-runtime-environment-mean-in-nodejs&quot;&gt;What does the runtime environment mean in Node.js?&lt;/a&gt;| | 02. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-nodejs&quot;&gt;What is Node.js?&lt;/a&gt;| | 03. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-nodejs-process-model&quot;&gt;What is Node.js Process Model?&lt;/a&gt;| | 04. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-data-types-in-nodejs&quot;&gt;What are the data types in Node.js?&lt;/a&gt;| | 05. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-create-a-simple-server-in-nodejs-that-returns-hello-world&quot;&gt;How to create a simple server in Node.js that returns Hello World?&lt;/a&gt;| | 06. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-do-nodejs-works&quot;&gt;How do Node.js works?&lt;/a&gt;| | 07. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-an-error-first-callback&quot;&gt;What is an error-first callback?&lt;/a&gt;| | 08. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-callback-hell-in-nodejs&quot;&gt;What is callback hell in Node.js?&lt;/a&gt;| | 09. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-promises-in-nodejs&quot;&gt;What are Promises in Node.js?&lt;/a&gt;| | 10. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-tools-can-be-used-to-assure-consistent-style&quot;&gt;What tools can be used to assure consistent style?&lt;/a&gt;| | 11. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-when-should-you-npm-and-when-yarn&quot;&gt;When should you npm and when yarn?&lt;/a&gt;| | 12. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-stub&quot;&gt;What is a stub?&lt;/a&gt;| | 13. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-test-pyramid-how-can-you-implement-it-when-talking-about-http-apis&quot;&gt;What is a test pyramid? How can you implement it when talking about HTTP APIs?&lt;/a&gt;| | 14. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-secure-your-http-cookies-against-xss-attacks&quot;&gt;How can you secure your HTTP cookies against XSS attacks?&lt;/a&gt;| | 15. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-make-sure-your-dependencies-are-safe&quot;&gt;How can you make sure your dependencies are safe?&lt;/a&gt;| | 16. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-event-loop-in-nodejs-and-how-does-it-work&quot;&gt;What is Event loop in Node.js? And How does it work?&lt;/a&gt;| | 17. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-repl-what-purpose-it-is-used-for&quot;&gt;What is REPL? What purpose it is used for?&lt;/a&gt;| | 18. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-asynchronous-and-non-blocking&quot;&gt;What is the difference between Asynchronous and Non-blocking?&lt;/a&gt;| | 19. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-debug-an-application-in-nodejs&quot;&gt;How to debug an application in Node.js?&lt;/a&gt;| | 20. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-some-of-the-most-popular-modules-of-nodejs&quot;&gt;What are some of the most popular modules of Node.js?&lt;/a&gt;| | 21. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-eventemitter-in-nodejs&quot;&gt;What is EventEmitter in Node.js?&lt;/a&gt;| | 22. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-many-types-of-streams-are-present-in-nodejs&quot;&gt;How many types of streams are present in node.js?&lt;/a&gt;| | 23. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-crypto-in-nodejs-how-do-you-cipher-the-secure-information-in-nodejs&quot;&gt;What is crypto in Node.js? How do you cipher the secure information in Node.js?&lt;/a&gt;| | 24. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-use-of-dns-module-in-nodejs&quot;&gt;What is the use of DNS module in Node.js?&lt;/a&gt;| | 25. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-security-mechanisms-available-in-nodejs&quot;&gt;What are the security mechanisms available in Node.js?&lt;/a&gt;| | 26. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-name-the-types-of-api-functions-in-nodejs&quot;&gt;Name the types of API functions in Node.js.&lt;/a&gt; | 27. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-nodejs-handle-child-threads&quot;&gt;How does Node.js handle child threads?&lt;/a&gt;| | 28. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-preferred-method-of-resolving-unhandled-exceptions-in-nodejs&quot;&gt;What is the preferred method of resolving unhandled exceptions in Node.js?&lt;/a&gt;| | 29. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-nodejs-support-multi-processor-platforms-and-does-it-fully-utilize-all-processor-resources&quot;&gt;How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?&lt;/a&gt;| | 30. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-typically-the-first-argument-passed-to-a-nodejs-callback-handler&quot;&gt;What is typically the first argument passed to a Node.js callback handler?&lt;/a&gt;| | 31. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-nodejs-read-the-content-of-a-file&quot;&gt;How Node.js read the content of a file?&lt;/a&gt;| | 32. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-jit-and-how-is-it-related-to-nodejs&quot;&gt;What is JIT and how is it related to Node.js?&lt;/a&gt;| | 33. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-put-and-patch&quot;&gt;What is difference between put and patch?&lt;/a&gt;| | 34. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-list-types-of-http-requests-supported-by-nodejs&quot;&gt;List types of Http requests supported by Node.js.&lt;/a&gt; | 35. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-to-use-expressjs&quot;&gt;Why to use Express.js?&lt;/a&gt;| | 36. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-write-the-steps-for-setting-up-an-express-js-application&quot;&gt;Write the steps for setting up an Express JS application.&lt;/a&gt; | 37. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-since-node-is-a-single-threaded-process-how-to-make-use-of-all-cpus&quot;&gt;Since node is a single threaded process, how to make use of all CPUs?&lt;/a&gt;| | 38. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-does-emitter-do-and-what-is-dispatcher&quot;&gt;What does emitter do and what is dispatcher?&lt;/a&gt;| | 39. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-kill-child-processes-that-spawn-their-own-child-processes-in-nodejs&quot;&gt;How to kill child processes that spawn their own child processes in Node.js?&lt;/a&gt;| | 40. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-do-you-understand-by-reactor-pattern-in-nodejs&quot;&gt;What do you understand by Reactor Pattern in Node.js?&lt;/a&gt;| | 41. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-key-features-of-nodejs&quot;&gt;What are the key features of Node.js?&lt;/a&gt;| | 42. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-globals-in-nodejs&quot;&gt;What are globals in Node.js?&lt;/a&gt;| | 43. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-chaining-process-in-nodejs&quot;&gt;What is chaining process in Node.js?&lt;/a&gt;| | 44. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-control-flow-function-what-are-the-steps-does-it-execute&quot;&gt;What is a control flow function? what are the steps does it execute?&lt;/a&gt;| | 45. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-npm-in-nodejs&quot;&gt;What is npm in Node.js?&lt;/a&gt;| | 46. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-when-to-use-nodejs-and-when-not-to-use-it&quot;&gt;When to use Node.js and when not to use it?&lt;/a&gt;| | 47. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-how-does-nodejs-work&quot;&gt;Explain how does Node.js work?&lt;/a&gt;| | 48. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-is-nodejs-entirely-based-on-a-single-thread&quot;&gt;Is Node.js entirely based on a single-thread?&lt;/a&gt;| | 49. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-make-post-request-in-nodejs&quot;&gt;How to make post request in Node.js?&lt;/a&gt;| | 50. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-can-you-create-http-server-in-nodejs-explain-the-code-used-for-it&quot;&gt;Can you create http server in Node.js, explain the code used for it?&lt;/a&gt;| | 51. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-load-html-in-nodejs&quot;&gt;How to load html in Node.js?&lt;/a&gt;| | 52. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-listen-on-port-80-with-node&quot;&gt;How can you listen on port 80 with Node?&lt;/a&gt;| | 53. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-operational-and-programmer-errors&quot;&gt;What is the difference between operational and programmer errors?&lt;/a&gt;| | 54. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-npm-shrinkwrap-is-useful&quot;&gt;Why npm shrinkwrap is useful?&lt;/a&gt;| | 55. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-your-favourite-http-framework-and-why&quot;&gt;What is your favourite HTTP framework and why?&lt;/a&gt;| | 56. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-challenges-with-nodejs&quot;&gt;What are the Challenges with Node.js?&lt;/a&gt;| | 57. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-nodejs-vs-ajax&quot;&gt;What is the difference between Node.js vs Ajax?&lt;/a&gt;| | 58. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-nodejs-overcomes-the-problem-of-blocking-of-i-o-operations&quot;&gt;How Node.js overcomes the problem of blocking of I/O operations?&lt;/a&gt;| | 59. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-mention-the-steps-by-which-you-can-async-in-nodejs&quot;&gt;Mention the steps by which you can async in Node.js?&lt;/a&gt;| | 60. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-timing-features-of-nodejs&quot;&gt;What are the timing features of Node.js?&lt;/a&gt;| | 61. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-lts-releases-of-nodejs-why-should-you-care&quot;&gt;What is LTS releases of Node.js why should you care?&lt;/a&gt;| | 62. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-should-you-separate-express-app-and-server&quot;&gt;Why should you separate Express &#39;app&#39; and &#39;server&#39;?&lt;/a&gt;| | 63. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-processnexttick-and-setimmediate&quot;&gt;What is the difference between process.nextTick() and setImmediate()?&lt;/a&gt;| | 64. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-javascript-and-nodejs&quot;&gt;What is difference between JavaScript and Node.js?&lt;/a&gt;| | 65. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-difference-between-events-and-callbacks&quot;&gt;What are the difference between Events and Callbacks?&lt;/a&gt;| | 66. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-restful-web-services-in-nodejs&quot;&gt;Explain RESTful Web Services in Node.js?&lt;/a&gt;| | 67. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-handle-file-upload-in-node-js&quot;&gt;How to handle file upload in Node js?&lt;/a&gt;| | 68. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-the-terms-body-parser-cookie-parser-debug-jade-morgan-nodemon-pm2-serve-favicon-cors-in-express-js&quot;&gt;Explain the terms body-parser, cookie-parser, debug, jade, morgan, nodemon, pm2, serve-favicon, cors in Express JS?&lt;/a&gt;| | 69. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-routing-work-in-node-js&quot;&gt;How does routing work in Node.js&lt;/a&gt;| | 70. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-node-prevents-blocking-code&quot;&gt;How Node prevents blocking code?&lt;/a&gt;| | 71. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-promise-and-async-await-in-node-js&quot;&gt;What is difference between promise and async await in node js?&lt;/a&gt;| | 72. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-json-web-token-jwt-for-authentication-in-node-js&quot;&gt;How to use JSON Web Token (JWT) for authentication in node js?&lt;/a&gt;| | 73. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-build-a-microservices-architecture-with-node-js&quot;&gt;How to build a microservices architecture with node js?&lt;/a&gt;| | 74. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-q-promise-in-node-js&quot;&gt;How to use Q promise in node js?&lt;/a&gt;| | 75. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-locale-i18n-in-node-js&quot;&gt;How to use locale (i18n) in node js?&lt;/a&gt;| | 76. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-implement-memcached-in-nodejs&quot;&gt;How to Implement Memcached in Nodejs?&lt;/a&gt;| | 77. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-error-handling-in-nodejs&quot;&gt;Explain Error Handling in Nodejs?&lt;/a&gt;| | 78. |&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-generate-and-verify-checksum-of-the-given-string-in-nodejs&quot;&gt;How to generate and verify checksum of the given string in Nodejs&lt;/a&gt;|&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What does the runtime environment mean in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The Node.js runtime is the software stack responsible for installing your web service&#39;s code and its dependencies and running your service.&lt;/p&gt; 
&lt;p&gt;The Node.js runtime for App Engine in the standard environment is declared in the &lt;code&gt;app.yaml&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;runtime: nodejs10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The runtime environment is literally just the environment your application is running in. This can be used to describe both the hardware and the software that is running your application. How much RAM, what version of node, what operating system, how much CPU cores, can all be referenced when talking about a runtime environment.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is an open-source server side runtime environment built on Chrome&#39;s V8 JavaScript engine. It provides an event driven, non-blocking (asynchronous) I/O and cross-platform runtime environment for building highly scalable server-side applications using JavaScript.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Node.js Process Model?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js runs in a single process and the application code runs in a single thread and thereby needs less resources than other platforms. All the user requests to your web application will be handled by a single thread and all the I/O work or long running job is performed asynchronously for a particular request. So, this single thread doesn&#39;t have to wait for the request to complete and is free to handle the next request. When asynchronous I/O work completes then it processes the request further and sends the response.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the data types in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Primitive Types&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;String&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Number&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Boolean&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Undefined&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Null&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;RegExp&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Buffer&lt;/code&gt;: Node.js includes an additional data type called Buffer (not available in browser&#39;s JavaScript). Buffer is mainly used to store binary data, while reading from a file or receiving packets over the network.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to create a simple server in Node.js that returns Hello World?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Step 01&lt;/strong&gt;: Create a project directory&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir myapp
cd myapp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 02&lt;/strong&gt;: Initialize project and link it to npm&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This creates a &lt;code&gt;package.json&lt;/code&gt; file in your myapp folder. The file contains references for all npm packages you have downloaded to your project. The command will prompt you to enter a number of things. You can enter your way through all of them EXCEPT this one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;entry point: (index.js)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Rename this to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 03&lt;/strong&gt;: Install Express in the myapp directory&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 04&lt;/strong&gt;: app.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Hello World!&#39;);
});

app.listen(3000, function () {
  console.log(&#39;Example app listening on port 3000!&#39;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 05&lt;/strong&gt;: Run the app&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bah&quot;&gt;node app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How do Node.js works?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Node is completely event-driven. Basically the server consists of one thread processing one event after another.&lt;/p&gt; 
&lt;p&gt;A new request coming in is one kind of event. The server starts processing it and when there is a blocking IO operation, it does not wait until it completes and instead registers a callback function. The server then immediately starts to process another event (maybe another request). When the IO operation is finished, that is another kind of event, and the server will process it (i.e. continue working on the request) by executing the callback as soon as it has time.&lt;/p&gt; 
&lt;p&gt;So the server never needs to create additional threads or switch between threads, which means it has very little overhead. If you want to make full use of multiple hardware cores, you just start multiple instances of node.js&lt;/p&gt; 
&lt;p&gt;Node JS Platform does not follow Request/Response Multi-Threaded Stateless Model. It follows Single Threaded with Event Loop Model. Node JS Processing model mainly based on Javascript Event based model with Javascript callback mechanism.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Single Threaded Event Loop Model Processing Steps:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clients Send request to Web Server.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server internally maintains a Limited Thread pool to provide services to the Client Requests.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server receives those requests and places them into a Queue. It is known as “Event Queue”.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server internally has a Component, known as “Event Loop”. Why it got this name is that it uses indefinite loop to receive requests and process them.&lt;/li&gt; 
 &lt;li&gt;Event Loop uses Single Thread only. It is main heart of Node JS Platform Processing Model.&lt;/li&gt; 
 &lt;li&gt;Even Loop checks any Client Request is placed in Event Queue. If no, then wait for incoming requests for indefinitely.&lt;/li&gt; 
 &lt;li&gt;If yes, then pick up one Client Request from Event Queue 
  &lt;ul&gt; 
   &lt;li&gt;Starts process that Client Request&lt;/li&gt; 
   &lt;li&gt;If that Client Request Does Not requires any Blocking IO Operations, then process everything, prepare response and send it back to client.&lt;/li&gt; 
   &lt;li&gt;If that Client Request requires some Blocking IO Operations like interacting with Database, File System, External Services then it will follow different approach 
    &lt;ul&gt; 
     &lt;li&gt;Checks Threads availability from Internal Thread Pool&lt;/li&gt; 
     &lt;li&gt;Picks up one Thread and assign this Client Request to that thread.&lt;/li&gt; 
     &lt;li&gt;That Thread is responsible for taking that request, process it, perform Blocking IO operations, prepare response and send it back to the Event Loop&lt;/li&gt; 
     &lt;li&gt;Event Loop in turn, sends that Response to the respective Client.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is an error-first callback?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The pattern used across all the asynchronous methods in Node.js is called &lt;em&gt;Error-first Callback&lt;/em&gt;. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile( &quot;file.json&quot;, function ( err, data ) {
  if ( err ) {
    console.error( err );
  }
  console.log( data );
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Any asynchronous method expects one of the arguments to be a callback. The full callback argument list depends on the caller method, but the first argument is always an error object or null. When we go for the asynchronous method, an exception thrown during function execution cannot be detected in a try/catch statement. The event happens after the JavaScript engine leaves the try block.&lt;/p&gt; 
&lt;p&gt;In the preceding example, if any exception is thrown during the reading of the file, it lands on the callback function as the first and mandatory parameter.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is callback hell in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;Callback hell&lt;/code&gt; is a phenomenon that afflicts a JavaScript developer when he tries to execute multiple asynchronous operations one after the other.&lt;/p&gt; 
&lt;p&gt;An asynchronous function is one where some external activity must complete before a result can be processed; it is “asynchronous” in the sense that there is an unpredictable amount of time before a result becomes available. Such functions require a callback function to handle errors and process the result.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getData(function(a){
    getMoreData(a, function(b){
        getMoreData(b, function(c){ 
            getMoreData(c, function(d){ 
	            getMoreData(d, function(e){ 
		            ...
		        });
	        });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Techniques for avoiding callback hell&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Using Async.js&lt;/li&gt; 
 &lt;li&gt;Using Promises&lt;/li&gt; 
 &lt;li&gt;Using Async-Await&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Managing callbacks using Async.js&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;Async&lt;/code&gt; is a really powerful npm module for managing asynchronous nature of JavaScript. Along with Node.js, it also works for JavaScript written for browsers.&lt;/p&gt; 
&lt;p&gt;Async provides lots of powerful utilities to work with asynchronous processes under different scenarios.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save async
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ASYNC WATERFALL&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var async = require(&#39;async&#39;);
async.waterfall([
    function(callback) {
        //doSomething
        callback(null, paramx); //paramx will be availaible as the first parameter to the next function
        /**
            The 1st parameter passed in callback.
            @null or @undefined or @false control moves to the next function
            in the array
            if @true or @string the control is immedeatly moved
            to the final callback fucntion
            rest of the functions in the array
            would not be executed
        */
    },
    function(arg1, callback) {
        //doSomething else
      // arg1 now equals paramx
        callback(null, result);
    },
    function(arg1, callback) {
        //do More
        // arg1 now equals &#39;result&#39;
        callback(null, &#39;done&#39;);
    },
    function(arg1, callback) {
        //even more
        // arg1 now equals &#39;done&#39;
        callback(null, &#39;done&#39;);
    }
], function (err, result) {
    //final callback function
    //finally do something when all function are done.
    // result now equals &#39;done&#39;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ASYNC SERIES&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var async = require(&#39;async&#39;);
async.series([
    function(callback){
        // do some stuff ...
        callback(null, &#39;one&#39;);
        /**
            The 1st parameter passed in callback.
            @null or @undefined or @false control moves to the next function
            in the array
            if @true or @string the control is immedeatly moved
            to the final callback fucntion with the value of err same as
            passed over here and
            rest of the functions in the array
            would not be executed
        */
    },
    function(callback){
        // do some more stuff ...
        callback(null, &#39;two&#39;);
    }
],
// optional callback
function(err, results){
    // results is now equal to [&#39;one&#39;, &#39;two&#39;]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Managing callbacks hell using promises&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Promises are alternative to callbacks while dealing with asynchronous code. Promises return the value of the result or an error exception. The core of the promises is the &lt;code&gt;.then()&lt;/code&gt; function, which waits for the promise object to be returned. The &lt;code&gt;.then()&lt;/code&gt; function takes two optional functions as arguments and depending on the state of the promise only one will ever be called. The first function is called when the promise if fulfilled (A successful result). The second function is called when the promise is rejected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var outputPromise = getInputPromise().then(function (input) {
    //handle success
}, function (error) {
    //handle error
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Using Async Await&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Async await makes asynchronous code look like it\’s synchronous. This has only been possible because of the reintroduction of promises into node.js. Async-Await only works with functions that return a promise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const getrandomnumber = function(){
    return new Promise((resolve, reject)=&amp;gt;{
        setTimeout(() =&amp;gt; {
            resolve(Math.floor(Math.random() * 20));
        }, 1000);
    });
}

const addRandomNumber = async function(){
    const sum = await getrandomnumber() + await getrandomnumber();
    console.log(sum);
}

addRandomNumber();
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are Promises in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It allows to associate handlers to an asynchronous action&#39;s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of the final value, the asynchronous method returns a promise for the value at some point in the future.&lt;/p&gt; 
&lt;p&gt;Promises in node.js promised to do some work and then had separate callbacks that would be executed for success and failure as well as handling timeouts. Another way to think of promises in node.js was that they were emitters that could emit only two events: success and error.The cool thing about promises is you can combine them into dependency chains (do Promise C only when Promise A and Promise B complete).&lt;/p&gt; 
&lt;p&gt;The core idea behind promises is that a promise represents the result of an asynchronous operation. A promise is in one of three different states:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;pending - The initial state of a promise.&lt;/li&gt; 
 &lt;li&gt;fulfilled - The state of a promise representing a successful operation.&lt;/li&gt; 
 &lt;li&gt;rejected - The state of a promise representing a failed operation. Once a promise is fulfilled or rejected, it is immutable (i.e. it can never change again).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Creating a Promise&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myPromise = new Promise(function(resolve, reject){
   ....
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What tools can be used to assure consistent style?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ESLint&lt;/li&gt; 
 &lt;li&gt;Standard&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;When should you npm and when yarn?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;npm&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is the default method for managing packages in the Node.js runtime environment. It relies upon a command line client and a database made up of public and premium packages known as the the npm registry. Users can access the registry via the client and browse the many packages available through the npm website. Both npm and its registry are managed by npm, Inc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Yarn&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Yarn was developed by Facebook in attempt to resolve some of npm’s shortcomings. Yarn isn’t technically a replacement for npm since it relies on modules from the npm registry. Think of Yarn as a new installer that still relies upon the same npm structure. The registry itself hasn’t changed, but the installation method is different. Since Yarn gives you access to the same packages as npm, moving from npm to Yarn doesn’t require you to make any changes to your workflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install yarn --global
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Comparing Yarn vs npm&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fast: Yarn caches every package it downloads so it never needs to again. It also parallelizes operations to maximize resource utilization so install times are faster than ever.&lt;/li&gt; 
 &lt;li&gt;Reliable: Using a detailed, but concise, lockfile format, and a deterministic algorithm for installs, Yarn is able to guarantee that an install that worked on one system will work exactly the same way on any other system.&lt;/li&gt; 
 &lt;li&gt;Secure: Yarn uses checksums to verify the integrity of every installed package before its code is executed.&lt;/li&gt; 
 &lt;li&gt;Offline Mode: If you&#39;ve installed a package before, you can install it again without any internet connection.&lt;/li&gt; 
 &lt;li&gt;Deterministic: The same dependencies will be installed the same exact way across every machine regardless of install order.&lt;/li&gt; 
 &lt;li&gt;Network Performance: Yarn efficiently queues up requests and avoids request waterfalls in order to maximize network utilization.&lt;/li&gt; 
 &lt;li&gt;Multiple Registries: Install any package from either npm or Bower and keep your package workflow the same.&lt;/li&gt; 
 &lt;li&gt;Network Resilience: A single request failing won&#39;t cause an install to fail. Requests are retried upon failure.&lt;/li&gt; 
 &lt;li&gt;Flat Mode: Resolve mismatching versions of dependencies to a single version to avoid creating duplicates.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a stub?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Stubbing and verification for node.js tests. Enables you to validate and override behaviour of nested pieces of code such as methods, require() and npm modules or even instances of classes. This library is inspired on node-gently, MockJS and mock-require.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Features of Stub:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Produces simple, lightweight Objects capable of extending down their tree&lt;/li&gt; 
 &lt;li&gt;Compatible with Nodejs&lt;/li&gt; 
 &lt;li&gt;Easily extendable directly or through an ExtensionManager&lt;/li&gt; 
 &lt;li&gt;Comes with predefined, usable extensions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Stubs are functions/programs that simulate the behaviours of components/modules. Stubs provide canned answers to function calls made during test cases. Also, you can assert on with what these stubs were called.&lt;/p&gt; 
&lt;p&gt;A use-case can be a file read, when you do not want to read an actual file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&#39;fs&#39;);

var readFileStub = sinon.stub(fs, &#39;readFile&#39;, function (path, cb) {  
  return cb(null, &#39;filecontent&#39;);
});

expect(readFileStub).to.be.called;  
readFileStub.restore();
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a test pyramid? How can you implement it when talking about HTTP APIs?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &quot;Test Pyramid&quot; is a metaphor that tells us to group software tests into buckets of different granularity. It also gives an idea of how many tests we should have in each of these groups. It shows which kinds of tests you should be looking for in the different levels of the pyramid and gives practical examples on how these can be implemented.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Mike Cohn&#39;s original test pyramid consists of three layers that your test suite should consist of (bottom to top):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Unit Tests&lt;/li&gt; 
 &lt;li&gt;Service Tests&lt;/li&gt; 
 &lt;li&gt;User Interface Tests&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you secure your HTTP cookies against XSS attacks?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; When the web server sets cookies, it can provide some additional attributes to make sure the cookies won&#39;t be accessible by using malicious JavaScript. One such attribute is HttpOnly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Set-Cookie: [name]=[value]; HttpOnly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;HttpOnly makes sure the cookies will be submitted only to the domain they originated from.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; The &quot;Secure&quot; attribute can make sure the cookies are sent over secured channel only.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Set-Cookie: [name]=[value]; Secure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; The web server can use X-XSS-Protection response header to make sure pages do not load when they detect reflected cross-site scripting (XSS) attacks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;X-XSS-Protection: 1; mode=block
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; The web server can use HTTP Content-Security-Policy response header to control what resources a user agent is allowed to load for a certain page. It can help to prevent various types of attacks like Cross Site Scripting (XSS) and data injection attacks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Content-Security-Policy: default-src &#39;self&#39; *.http://sometrustedwebsite.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you make sure your dependencies are safe?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The only option is to automate the update / security audit of your dependencies. For that there are free and paid options:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;npm outdated&lt;/li&gt; 
 &lt;li&gt;Trace by RisingStack&lt;/li&gt; 
 &lt;li&gt;NSP&lt;/li&gt; 
 &lt;li&gt;GreenKeeper&lt;/li&gt; 
 &lt;li&gt;Snyk&lt;/li&gt; 
 &lt;li&gt;npm audit&lt;/li&gt; 
 &lt;li&gt;npm audit fix&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Event loop in Node.js? And How does it work?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The event loop is what allows Node.js to perform non-blocking I/O operations — despite the fact that JavaScript is single-threaded — by offloading operations to the system kernel whenever possible.&lt;/p&gt; 
&lt;p&gt;Node.js is a single-threaded application, but it can support concurrency via the concept of &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;callbacks&lt;/code&gt;. Every API of Node.js is asynchronous and being single-threaded, they use &lt;code&gt;async function calls&lt;/code&gt; to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Event-Driven Programming&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In an event-driven application, there is generally a main loop that listens for events, and then triggers a callback function when one of those events is detected.&lt;/p&gt; 
&lt;p&gt;Although events look quite similar to callbacks, the difference lies in the fact that callback functions are called when an asynchronous function returns its result, whereas event handling works on the observer pattern. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners as follows&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Import events module
var events = require(&#39;events&#39;);

// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Import events module
var events = require(&#39;events&#39;);

// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();

// Create an event handler as follows
var connectHandler = function connected() {
   console.log(&#39;connection succesful.&#39;);
  
   // Fire the data_received event 
   eventEmitter.emit(&#39;data_received&#39;);
}

// Bind the connection event with the handler
eventEmitter.on(&#39;connection&#39;, connectHandler);
 
// Bind the data_received event with the anonymous function
eventEmitter.on(&#39;data_received&#39;, function() {
   console.log(&#39;data received succesfully.&#39;);
});

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

console.log(&quot;Program Ended.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is REPL? What purpose it is used for?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;REPL (READ, EVAL, PRINT, LOOP) is a computer environment similar to Shell (Unix/Linux) and command prompt. Node comes with the REPL environment when it is installed. System interacts with the user through outputs of commands/expressions used. It is useful in writing and debugging the codes. The work of REPL can be understood from its full form:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt;: It reads the inputs from users and parses it into JavaScript data structure. It is then stored to memory.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Eval&lt;/strong&gt;: The parsed JavaScript data structure is evaluated for the results.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Print&lt;/strong&gt;: The result is printed after the evaluation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Loop&lt;/strong&gt;: Loops the input command. To come out of NODE REPL, press ctrl+c twice&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Simple Expression&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$ node
&amp;gt; 10 + 20
30
&amp;gt; 10 + ( 20 * 30 ) - 40
570
&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between Asynchronous and Non-blocking?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Asynchronous&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The architecture of asynchronous explains that the message sent will not give the reply on immediate basis just like we send the mail but do not get the reply on an immediate basis. It does not have any dependency or order. Hence improving the system efficiency and performance. The server stores the information and when the action is done it will be notified.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Non-Blocking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nonblocking immediately responses with whatever data available. Moreover, it does not block any execution and keeps on running as per the requests. If an answer could not be retrieved than in those cases API returns immediately with an error. Nonblocking is mostly used with I/O(input/output). Node.js is itself based on nonblocking I/O model. There are few ways of communication that a nonblocking I/O has completed. The callback function is to be called when the operation is completed. Nonblocking call uses the help of javascript which provides a callback function.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous VS Non-Blocking&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt;Asynchronous does not respond immediately, While Nonblocking responds immediately if the data is available and if not that simply returns an error.&lt;/li&gt; 
 &lt;li&gt;Asynchronous improves the efficiency by doing the task fast as the response might come later, meanwhile, can do complete other tasks. Nonblocking does not block any execution and if the data is available it retrieves the information quickly.&lt;/li&gt; 
 &lt;li&gt;Asynchronous is the opposite of synchronous while nonblocking I/O is the opposite of blocking. They both are fairly similar but they are also different as asynchronous is used with a broader range of operations while nonblocking is mostly used with I/O.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to debug an application in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;node-inspector&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g node-inspector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node-debug app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Debugger&lt;/li&gt; 
   &lt;li&gt;Node Inspector&lt;/li&gt; 
   &lt;li&gt;Visual Studio Code&lt;/li&gt; 
   &lt;li&gt;Cloud9&lt;/li&gt; 
   &lt;li&gt;Brackets&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profiling&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;1. node --prof ./app.js
2. node --prof-process ./the-generated-log-file
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Heapdumps&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;node-heapdump with Chrome Developer Tools&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tracing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Interactive Stack Traces with TraceGL&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Logging&lt;/strong&gt;&lt;br&gt; Libraries that output debugging information&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Caterpillar&lt;/li&gt; 
   &lt;li&gt;Tracer&lt;/li&gt; 
   &lt;li&gt;scribbles&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Libraries that enhance stack trace information&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Longjohn&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are some of the most popular modules of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Async&lt;/strong&gt;: Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Browserify&lt;/strong&gt;: Browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single 
  &lt;!-- raw HTML omitted --&gt; tag.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bower&lt;/strong&gt;: Bower is a package manager for the web. It works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you’re looking for.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backbone&lt;/strong&gt;: Backbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Csv&lt;/strong&gt;: csv module has four sub modules which provides CSV generation, parsing, transformation and serialization for Node.js.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;: Debug is a tiny node.js debugging utility modelled after node core&#39;s debugging technique.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Express&lt;/strong&gt;: Express is a fast, un-opinionated, minimalist web framework. It provides small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Forever&lt;/strong&gt;: A simple CLI tool for ensuring that a given node script runs continuously (i.e. forever).&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Grunt&lt;/strong&gt;: is a JavaScript Task Runner that facilitates creating new projects and makes performing repetitive but necessary tasks such as linting, unit testing, concatenating and minifying files (among other things) trivial.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Gulp&lt;/strong&gt;: is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hapi&lt;/strong&gt;: is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Http-server&lt;/strong&gt;: is a simple, zero-configuration command-line http server. It is powerful enough for production usage, but it&#39;s simple and hackable enough to be used for testing, local development, and learning.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Inquirer&lt;/strong&gt;: A collection of common interactive command line user interfaces.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jquery&lt;/strong&gt;: jQuery is a fast, small, and feature-rich JavaScript library.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jshint&lt;/strong&gt;: Static analysis tool to detect errors and potential problems in JavaScript code and to enforce your team&#39;s coding conventions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Koa&lt;/strong&gt;: Koa is web app framework. It is an expressive HTTP middleware for node.js to make web applications and APIs more enjoyable to write.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lodash&lt;/strong&gt;: The lodash library exported as a node module. Lodash is a modern JavaScript utility library delivering modularity, performance, &amp;amp; extras.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Less&lt;/strong&gt;: The less library exported as a node module.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Moment&lt;/strong&gt;: A lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mongoose&lt;/strong&gt;: It is a MongoDB object modeling tool designed to work in an asynchronous environment.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;: The official MongoDB driver for Node.js. It provides a high-level API on top of mongodb-core that is meant for end users.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Npm&lt;/strong&gt;: is package manager for javascript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nodemon&lt;/strong&gt;: It is a simple monitor script for use during development of a node.js app, It will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nodemailer&lt;/strong&gt;: This module enables e-mail sending from a Node.js applications.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optimist&lt;/strong&gt;: is a node.js library for option parsing with an argv hash.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Phantomjs&lt;/strong&gt;: An NPM installer for PhantomJS, headless webkit with JS API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Passport&lt;/strong&gt;: A simple, unobtrusive authentication middleware for Node.js. Passport uses the strategies to authenticate requests. Strategies can range from verifying username and password credentials or authentication using OAuth or OpenID.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: Q is a library for promises. A promise is an object that represents the return value or the thrown exception that the function may eventually provide.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: Request is Simplified HTTP request client make it possible to make http calls. It supports HTTPS and follows redirects by default.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Socket.io&lt;/strong&gt;: Its a node.js realtime framework server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sails&lt;/strong&gt;: Sails : API-driven framework for building realtime apps, using MVC conventions (based on Express and Socket.io)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Through&lt;/strong&gt;: It enables simplified stream construction. It is easy way to create a stream that is both readable and writable.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Underscore&lt;/strong&gt;: Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Validator&lt;/strong&gt;: A nodejs module for a library of string validators and sanitizers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Winston&lt;/strong&gt;: A multi-transport async logging library for Node.js&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ws&lt;/strong&gt;: A simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xml2js&lt;/strong&gt;: A Simple XML to JavaScript object converter.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Yo&lt;/strong&gt;: A CLI tool for running Yeoman generators&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Zmq&lt;/strong&gt;: Bindings for node.js and io.js to ZeroMQ .It is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is EventEmitter in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;All objects that emit events are members of EventEmitter class. These objects expose an &lt;code&gt;eventEmitter.on()&lt;/code&gt; function that allows one or more functions to be attached to named events emitted by the object.&lt;/p&gt; 
&lt;p&gt;When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. All values returned by the called listeners are ignored and will be discarded.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var events = require(&#39;events&#39;);
var eventEmitter = new events.EventEmitter();

// listener #1
var listner1 = function listner1() {
   console.log(&#39;listner1 executed.&#39;);
}

// listener #2
var listner2 = function listner2() {
   console.log(&#39;listner2 executed.&#39;);
}

// Bind the connection event with the listner1 function
eventEmitter.addListener(&#39;connection&#39;, listner1);

// Bind the connection event with the listner2 function
eventEmitter.on(&#39;connection&#39;, listner2);

var eventListeners = require(&#39;events&#39;).EventEmitter.listenerCount
   (eventEmitter,&#39;connection&#39;);
console.log(eventListeners + &quot; Listner(s) listening to connection event&quot;);

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

// Remove the binding of listner1 function
eventEmitter.removeListener(&#39;connection&#39;, listner1);
console.log(&quot;Listner1 will not listen now.&quot;);

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

eventListeners = require(&#39;events&#39;).EventEmitter.listenerCount(eventEmitter,&#39;connection&#39;);
console.log(eventListeners + &quot; Listner(s) listening to connection event&quot;);

console.log(&quot;Program Ended.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now run the main.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node main.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;2 Listner(s) listening to connection event
listner1 executed.
listner2 executed.
Listner1 will not listen now.
listner2 executed.
1 Listner(s) listening to connection event
Program Ended.
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How many types of streams are present in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Streams are objects that let you read data from a source or write data to a destination in continuous fashion. There are four types of streams&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Readable&lt;/strong&gt; − Stream which is used for read operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Writable&lt;/strong&gt; − Stream which is used for write operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Duplex&lt;/strong&gt; − Stream which can be used for both read and write operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt; − A type of duplex stream where the output is computed based on input.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each type of Stream is an EventEmitter instance and throws several events at different instance of times.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt; − This event is fired when there is data is available to read.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt; − This event is fired when there is no more data to read.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;error&lt;/strong&gt; − This event is fired when there is any error receiving or writing data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;finish&lt;/strong&gt; − This event is fired when all the data has been flushed to underlying system.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Reading from a Stream&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var data = &#39;&#39;;

// Create a readable stream
var readerStream = fs.createReadStream(&#39;input.txt&#39;);

// Set the encoding to be utf8. 
readerStream.setEncoding(&#39;UTF8&#39;);

// Handle stream events --&amp;gt; data, end, and error
readerStream.on(&#39;data&#39;, function(chunk) {
   data += chunk;
});

readerStream.on(&#39;end&#39;,function() {
   console.log(data);
});

readerStream.on(&#39;error&#39;, function(err) {
   console.log(err.stack);
});

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Writing to a Stream&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var data = &#39;Simply Easy Learning&#39;;

// Create a writable stream
var writerStream = fs.createWriteStream(&#39;output.txt&#39;);

// Write the data to stream with encoding to be utf8
writerStream.write(data,&#39;UTF8&#39;);

// Mark the end of file
writerStream.end();

// Handle stream events --&amp;gt; finish, and error
writerStream.on(&#39;finish&#39;, function() {
   console.log(&quot;Write completed.&quot;);
});

writerStream.on(&#39;error&#39;, function(err) {
   console.log(err.stack);
});

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Piping the Streams&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Piping is a mechanism where we provide the output of one stream as the input to another stream. It is normally used to get data from one stream and to pass the output of that stream to another stream. There is no limit on piping operations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);

// Create a readable stream
var readerStream = fs.createReadStream(&#39;input.txt&#39;);

// Create a writable stream
var writerStream = fs.createWriteStream(&#39;output.txt&#39;);

// Pipe the read and write operations
// read input.txt and write data to output.txt
readerStream.pipe(writerStream);

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Chaining the Streams&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Chaining is a mechanism to connect the output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var zlib = require(&#39;zlib&#39;);

// Compress the file input.txt to input.txt.gz
fs.createReadStream(&#39;input.txt&#39;)
   .pipe(zlib.createGzip())
   .pipe(fs.createWriteStream(&#39;input.txt.gz&#39;));
  
console.log(&quot;File Compressed.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is crypto in Node.js? How do you cipher the secure information in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The Node.js Crypto module supports cryptography. It provides cryptographic functionality that includes a set of wrappers for open SSL&#39;s hash HMAC, cipher, decipher, sign and verify functions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hash&lt;/strong&gt;: A hash is a fixed-length string of bits i.e. procedurally and deterministically generated from some arbitrary block of source data.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;HMAC&lt;/strong&gt;: HMAC stands for Hash-based Message Authentication Code. It is a process for applying a hash algorithm to both data and a secret key that results in a single final hash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Encryption Example using Hash and HMAC&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const secret = &#39;abcdefg&#39;;  
const hash = crypto.createHmac(&#39;sha256&#39;, secret)  
                   .update(&#39;Welcome to JavaTpoint&#39;)  
                   .digest(&#39;hex&#39;);  
console.log(hash);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Encryption example using Cipher&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);  
var encrypted = cipher.update(&#39;Hello JavaTpoint&#39;, &#39;utf8&#39;, &#39;hex&#39;);  
encrypted += cipher.final(&#39;hex&#39;);  
console.log(encrypted);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Decryption example using Decipher&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);  
var encrypted = &#39;4ce3b761d58398aed30d5af898a0656a3174d9c7d7502e781e83cf6b9fb836d5&#39;;  
var decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);  
decrypted += decipher.final(&#39;utf8&#39;);  
console.log(decrypted);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the use of DNS module in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;DNS is a node module used to do name resolution facility which is provided by the operating system as well as used to do an actual DNS lookup. No need for memorising IP addresses – DNS servers provide a nifty solution of converting domain or subdomain names to IP addresses. This module provides an asynchronous network wrapper and can be imported using the following syntax.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;dns.lookup()&lt;/code&gt; function&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.lookup(&#39;www.google.com&#39;, (err, addresses, family) =&amp;gt; {  
  console.log(&#39;addresses:&#39;, addresses);  
  console.log(&#39;family:&#39;,family);  
});  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;resolve4()&lt;/code&gt; and &lt;code&gt;reverse()&lt;/code&gt; functions&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.resolve4(&#39;www.google.com&#39;, (err, addresses) =&amp;gt; {  
  if (err) throw err;  
  console.log(`addresses: ${JSON.stringify(addresses)}`);  
  addresses.forEach((a) =&amp;gt; {  
    dns.reverse(a, (err, hostnames) =&amp;gt; {  
      if (err) {  
        throw err;  
      }  
      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);  
    });  
  });  
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: print the localhost name using &lt;code&gt;lookupService()&lt;/code&gt; function&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&amp;gt; {  
  console.log(hostname, service);  
    // Prints: localhost  
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the security mechanisms available in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Using the Helmet module&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Helmet helps to secure your Express applications by setting various HTTP headers, like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;X-Frame-Options to mitigates clickjacking attacks,&lt;/li&gt; 
 &lt;li&gt;Strict-Transport-Security to keep your users on HTTPS,&lt;/li&gt; 
 &lt;li&gt;X-XSS-Protection to prevent reflected XSS attacks,&lt;/li&gt; 
 &lt;li&gt;X-DNS-Prefetch-Control to disable browsers DNS prefetching.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const express = require(&#39;express&#39;)
const helmet = require(&#39;helmet&#39;)
const app = express()

app.use(helmet())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Validating user input&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Validating user input is one of the most important things to do when it comes to the security of your application. Failing to do it correctly can open up your application and users to a wide range of attacks, including command injection, SQL injection or stored cross-site scripting.&lt;/p&gt; 
&lt;p&gt;To validate user input, one of the best libraries you can pick is joi. Joi is an object schema description language and validator for JavaScript objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Joi = require(&#39;joi&#39;);

const schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(30).required(),
    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),
    access_token: [Joi.string(), Joi.number()],
    birthyear: Joi.number().integer().min(1900).max(2013),
    email: Joi.string().email()
}).with(&#39;username&#39;, &#39;birthyear&#39;).without(&#39;password&#39;, &#39;access_token&#39;)

// Return result
const result = Joi.validate({
    username: &#39;abc&#39;,
    birthyear: 1994
}, schema)
// result.error === null -&amp;gt; valid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Securing your Regular Expressions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Regular Expressions are a great way to manipulate texts and get the parts that you need from them. However, there is an attack vector called Regular Expression Denial of Service attack, which exposes the fact that most Regular Expression implementations may reach extreme situations for specially crafted input, that cause them to work extremely slowly.&lt;/p&gt; 
&lt;p&gt;The Regular Expressions that can do such a thing are commonly referred as Evil Regexes. These expressions contain: *grouping with repetition, *inside the repeated group: *repetition, or *alternation with overlapping&lt;/p&gt; 
&lt;p&gt;Examples of Evil Regular Expressions patterns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(a+)+
([a-zA-Z]+)*
(a|aa)+
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Security.txt&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Security.txt defines a standard to help organizations define the process for security researchers to securely disclose security vulnerabilities.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const express = require(&#39;express&#39;)
const securityTxt = require(&#39;express-security.txt&#39;)

const app = express()

app.get(&#39;/security.txt&#39;, securityTxt({
  // your security address
  contact: &#39;email@example.com&#39;,
  // your pgp key
  encryption: &#39;encryption&#39;,
  // if you have a hall of fame for securty resourcers, include the link here
  acknowledgements: &#39;http://acknowledgements.example.com&#39;
}))
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Name the types of API functions in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;There are two types of API functions in Node.js:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Asynchronous, Non-blocking functions&lt;/li&gt; 
 &lt;li&gt;Synchronous, Blocking functions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;1. Blocking functions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In a blocking operation, all other code is blocked from executing until an I/O event that is being waited on occurs. Blocking functions execute synchronously.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fs = require(&#39;fs&#39;);
const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read
console.log(data);
// moreWork(); will run after console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The second line of code blocks the execution of additional JavaScript until the entire file is read. moreWork () will only be called after Console.log&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Non-blocking functions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In a non-blocking operation, multiple I/O calls can be performed without the execution of the program being halted. Non-blocking functions execute asynchronously.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fs = require(&#39;fs&#39;);
fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {
  if (err) throw err;
  console.log(data);
});
// moreWork(); will run before console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since &lt;code&gt;fs.readFile()&lt;/code&gt; is non-blocking, moreWork() does not have to wait for the file read to complete before being called. This allows for higher throughput.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does Node.js handle child threads?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nodejs Primary application runs in an event loop, which is in a single thread.&lt;/li&gt; 
 &lt;li&gt;Background I/O is running in a thread pool that is only accessible to C/C++ or other compiled/native modules and mostly transparent to the JS.&lt;/li&gt; 
 &lt;li&gt;Node v11/12 now has experimental worker_threads, which is another option.&lt;/li&gt; 
 &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; 
 &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; 
 &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the preferred method of resolving unhandled exceptions in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Unhandled exceptions in Node.js can be caught at the Process level by attaching a handler for uncaughtException event.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;process.on(&#39;uncaughtException&#39;, function(err) {
    console.log(&#39;Caught exception: &#39; + err);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Process is a global object that provides information about the current Node.js process. Process is a listener function that is always listening to events.&lt;/p&gt; 
&lt;p&gt;Few events are :&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Exit&lt;/li&gt; 
 &lt;li&gt;disconnect&lt;/li&gt; 
 &lt;li&gt;unhandledException&lt;/li&gt; 
 &lt;li&gt;rejectionHandled&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Since Node.js is by default a single thread application, it will run on a single processor core and will not take full advantage of multiple core resources. However, Node.js provides support for deployment on multiple-core systems, to take greater advantage of the hardware. The Cluster module is one of the core Node.js modules and it allows running multiple Node.js worker processes that will share the same port.&lt;/p&gt; 
&lt;p&gt;The cluster module helps to spawn new processes on the operating system. Each process works independently, so you cannot use shared state between child processes. Each process communicates with the main process by IPC and pass server handles back and forth.&lt;/p&gt; 
&lt;p&gt;Cluster supports two types of load distribution:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The main process listens on a port, accepts new connection and assigns it to a child process in a round robin fashion.&lt;/li&gt; 
 &lt;li&gt;The main process assigns the port to a child process and child process itself listen the port.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is typically the first argument passed to a Node.js callback handler?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The first argument to any callback handler is an optional error object&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function callback(err, results) {
    // usually we&#39;ll check for the error before handling results
    if(err) {
        // handle error somehow and return
    }
    // no error, perform standard callback handling
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How Node.js read the content of a file?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &quot;normal&quot; way in Node.js is probably to read in the content of a file in a non-blocking, asynchronous way. That is, to tell Node to read in the file, and then to get a callback when the file-reading has been finished. That would allow us to hand several requests in parallel.&lt;/p&gt; 
&lt;p&gt;Common use for the File System module:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read files&lt;/li&gt; 
 &lt;li&gt;Create files&lt;/li&gt; 
 &lt;li&gt;Update files&lt;/li&gt; 
 &lt;li&gt;Delete files&lt;/li&gt; 
 &lt;li&gt;Rename files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Read Files&lt;/strong&gt;&lt;br&gt; index.html&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;My Header&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;My paragraph.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// read_file.js

var http = require(&#39;http&#39;);
var fs = require(&#39;fs&#39;);
http.createServer(function (req, res) {
  fs.readFile(&#39;index.html&#39;, function(err, data) {
    res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;});
    res.write(data);
    res.end();
  });
}).listen(8080);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Initiate read_file.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node read_file.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is JIT and how is it related to Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js has depended on the V8 JavaScript engine to provide code execution in the language. The V8 is a JavaScript engine built at the google development center, in Germany. It is open source and written in C++. It is used for both client side (Google Chrome) and server side (node.js) JavaScript applications. A central piece of the V8 engine that allows it to execute JavaScript at high speed is the JIT (Just In Time) compiler. This is a dynamic compiler that can optimize code during runtime. When V8 was first built the JIT Compiler was dubbed FullCodegen. Then, the V8 team implemented Crankshaft, which included many performance optimizations that FullCodegen did not implement.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;V8&lt;/code&gt; was first designed to increase the performance of the JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler like a lot of modern JavaScript engines such as SpiderMonkey or Rhino (Mozilla) are doing. The main difference with V8 is that it doesn’t produce bytecode or any intermediate code.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between put and patch?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;PUT and PATCH are HTTP verbs and they both relate to updating a resource. The main difference between PUT and PATCH requests are in the way the server processes the enclosed entity to modify the resource identified by the Request-URI.&lt;/p&gt; 
&lt;p&gt;In a PUT request, the enclosed entity is considered to be a modified version of the resource stored on the origin server, and the client is requesting that the stored version be replaced.&lt;/p&gt; 
&lt;p&gt;With PATCH, however, the enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version.&lt;/p&gt; 
&lt;p&gt;Also, another difference is that when you want to update a resource with PUT request, you have to send the full payload as the request whereas with PATCH, you only send the parameters which you want to update.&lt;/p&gt; 
&lt;p&gt;The most commonly used HTTP verbs POST, GET, PUT, DELETE are similar to CRUD (Create, Read, Update and Delete) operations in database. We specify these HTTP verbs in the capital case. So, the below is the comparison between them.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; - create&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; - read&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; - update&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; - delete&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: Submits a partial modification to a resource. If you only need to update one field for the resource, you may want to use the PATCH method.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;List types of Http requests supported by Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The HTTP core module is a key module to Node.js networking.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const http = require(&#39;http&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;http.METHODS&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;require(&#39;http&#39;).METHODS
[ &#39;ACL&#39;,
  &#39;BIND&#39;,
  &#39;CHECKOUT&#39;,
  &#39;CONNECT&#39;,
  &#39;COPY&#39;,
  &#39;DELETE&#39;,
  &#39;GET&#39;,
  &#39;HEAD&#39;,
  &#39;LINK&#39;,
  &#39;LOCK&#39;,
  &#39;M-SEARCH&#39;,
  &#39;MERGE&#39;,
  &#39;MKACTIVITY&#39;,
  &#39;MKCALENDAR&#39;,
  &#39;MKCOL&#39;,
  &#39;MOVE&#39;,
  &#39;NOTIFY&#39;,
  &#39;OPTIONS&#39;,
  &#39;PATCH&#39;,
  &#39;POST&#39;,
  &#39;PROPFIND&#39;,
  &#39;PROPPATCH&#39;,
  &#39;PURGE&#39;,
  &#39;PUT&#39;,
  &#39;REBIND&#39;,
  &#39;REPORT&#39;,
  &#39;SEARCH&#39;,
  &#39;SUBSCRIBE&#39;,
  &#39;TRACE&#39;,
  &#39;UNBIND&#39;,
  &#39;UNLINK&#39;,
  &#39;UNLOCK&#39;,
  &#39;UNSUBSCRIBE&#39; ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;http.STATUS_CODES&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;require(&#39;http&#39;).STATUS_CODES
{ &#39;100&#39;: &#39;Continue&#39;,
&#39;101&#39;: &#39;Switching Protocols&#39;,
&#39;102&#39;: &#39;Processing&#39;,
&#39;200&#39;: &#39;OK&#39;,
&#39;201&#39;: &#39;Created&#39;,
&#39;202&#39;: &#39;Accepted&#39;,
&#39;203&#39;: &#39;Non-Authoritative Information&#39;,
&#39;204&#39;: &#39;No Content&#39;,
&#39;205&#39;: &#39;Reset Content&#39;,
&#39;206&#39;: &#39;Partial Content&#39;,
&#39;207&#39;: &#39;Multi-Status&#39;,
&#39;208&#39;: &#39;Already Reported&#39;,
&#39;226&#39;: &#39;IM Used&#39;,
&#39;300&#39;: &#39;Multiple Choices&#39;,
&#39;301&#39;: &#39;Moved Permanently&#39;,
&#39;302&#39;: &#39;Found&#39;,
&#39;303&#39;: &#39;See Other&#39;,
&#39;304&#39;: &#39;Not Modified&#39;,
&#39;305&#39;: &#39;Use Proxy&#39;,
&#39;307&#39;: &#39;Temporary Redirect&#39;,
&#39;308&#39;: &#39;Permanent Redirect&#39;,
&#39;400&#39;: &#39;Bad Request&#39;,
&#39;401&#39;: &#39;Unauthorized&#39;,
&#39;402&#39;: &#39;Payment Required&#39;,
&#39;403&#39;: &#39;Forbidden&#39;,
&#39;404&#39;: &#39;Not Found&#39;,
&#39;405&#39;: &#39;Method Not Allowed&#39;,
&#39;406&#39;: &#39;Not Acceptable&#39;,
&#39;407&#39;: &#39;Proxy Authentication Required&#39;,
&#39;408&#39;: &#39;Request Timeout&#39;,
&#39;409&#39;: &#39;Conflict&#39;,
&#39;410&#39;: &#39;Gone&#39;,
&#39;411&#39;: &#39;Length Required&#39;,
&#39;412&#39;: &#39;Precondition Failed&#39;,
&#39;413&#39;: &#39;Payload Too Large&#39;,
&#39;414&#39;: &#39;URI Too Long&#39;,
&#39;415&#39;: &#39;Unsupported Media Type&#39;,
&#39;416&#39;: &#39;Range Not Satisfiable&#39;,
&#39;417&#39;: &#39;Expectation Failed&#39;,
&#39;418&#39;: &#39;I\&#39;m a teapot&#39;,
&#39;421&#39;: &#39;Misdirected Request&#39;,
&#39;422&#39;: &#39;Unprocessable Entity&#39;,
&#39;423&#39;: &#39;Locked&#39;,
&#39;424&#39;: &#39;Failed Dependency&#39;,
&#39;425&#39;: &#39;Unordered Collection&#39;,
&#39;426&#39;: &#39;Upgrade Required&#39;,
&#39;428&#39;: &#39;Precondition Required&#39;,
&#39;429&#39;: &#39;Too Many Requests&#39;,
&#39;431&#39;: &#39;Request Header Fields Too Large&#39;,
&#39;451&#39;: &#39;Unavailable For Legal Reasons&#39;,
&#39;500&#39;: &#39;Internal Server Error&#39;,
&#39;501&#39;: &#39;Not Implemented&#39;,
&#39;502&#39;: &#39;Bad Gateway&#39;,
&#39;503&#39;: &#39;Service Unavailable&#39;,
&#39;504&#39;: &#39;Gateway Timeout&#39;,
&#39;505&#39;: &#39;HTTP Version Not Supported&#39;,
&#39;506&#39;: &#39;Variant Also Negotiates&#39;,
&#39;507&#39;: &#39;Insufficient Storage&#39;,
&#39;508&#39;: &#39;Loop Detected&#39;,
&#39;509&#39;: &#39;Bandwidth Limit Exceeded&#39;,
&#39;510&#39;: &#39;Not Extended&#39;,
&#39;511&#39;: &#39;Network Authentication Required&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Making HTTP Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const request = require(&#39;request&#39;);

request(&#39;https://nodejs.org/&#39;, function(err, res, body) {
    console.log(body);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The first argument to request can either be a URL string, or an object of options. Here are some of the more common options you&#39;ll encounter in your applications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt;: The destination URL of the HTTP request&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt;: The HTTP method to be used (GET, POST, DELETE, etc)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt;: An object of HTTP headers (key-value) to be set in the request&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;form&lt;/strong&gt;: An object containing key-value form data&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const request = require(&#39;request&#39;);

const options = {
    url: &#39;https://nodejs.org/file.json&#39;,
    method: &#39;GET&#39;,
    headers: {
        &#39;Accept&#39;: &#39;application/json&#39;,
        &#39;Accept-Charset&#39;: &#39;utf-8&#39;,
        &#39;User-Agent&#39;: &#39;my-reddit-client&#39;
    }
};

request(options, function(err, res, body) {
    let json = JSON.parse(body);
    console.log(json);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using the options object, this request uses the GET method to retrieve JSON data directly from Reddit, which is returned as a string in the body field. From here, you can use &lt;code&gt;JSON.parse&lt;/code&gt; and use the data as a normal JavaScript object.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why to use Express.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;ExpressJS is a prebuilt NodeJS framework that can help you in creating server-side web applications faster and smarter. Simplicity, minimalism, flexibility, scalability are some of its characteristics and since it is made in NodeJS itself, it inherited its performance as well.&lt;/p&gt; 
&lt;p&gt;Express 3.x is a light-weight web application framework to help organize your web application into an MVC architecture on the server side. You can then use a database like &lt;code&gt;MongoDB&lt;/code&gt; with &lt;code&gt;Mongoose&lt;/code&gt; (for modeling) to provide a backend for your Node.js application. Express.js basically helps you manage everything, from routes, to handling requests and views.&lt;/p&gt; 
&lt;p&gt;It has become the standard server framework for node.js. Express is the backend part of something known as the MEAN stack. The MEAN is a free and open-source JavaScript software stack for building dynamic web sites and web applications which has the following components;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; - The standard NoSQL database&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Express.js&lt;/strong&gt; - The default web applications framework&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Angular.js&lt;/strong&gt; - The JavaScript MVC framework used for web applications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; - Framework used for scalable server-side and networking applications.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The Express.js framework makes it very easy to develop an application which can be used to handle multiple types of requests like the GET, PUT, and POST and DELETE requests.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;using Express&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var express=require(&#39;express&#39;);
var app=express();
app.get(&#39;/&#39;,function(req,res) {
  res.send(&#39;Hello World!&#39;);
});
var server=app.listen(3000,function() {});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Write the steps for setting up an Express JS application?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Install Express Generator&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node&amp;gt;npm install -g express-generator
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Create an Express Project&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node&amp;gt;express --view=&quot;ejs&quot; nodetest1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3. Edit Dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MAKE SURE TO CD INTO YOUR nodetest FOLDER. OK, now we have some basic structure in there, but we&#39;re not quite done. You&#39;ll note that the express-generator routine created a file called package.json in your nodetest1 directory. Open this up in a text editor and it&#39;ll look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// C:\node\nodetest1\package.json
{
  &quot;name&quot;: &quot;nodetest1&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;
  },
  &quot;dependencies&quot;: {
    &quot;cookie-parser&quot;: &quot;~1.4.3&quot;,
    &quot;debug&quot;: &quot;~2.6.9&quot;,
    &quot;ejs&quot;: &quot;~2.5.7&quot;,
    &quot;express&quot;: &quot;~4.16.0&quot;,
    &quot;http-errors&quot;: &quot;~1.6.2&quot;,
    &quot;morgan&quot;: &quot;~1.9.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a basic JSON file describing our app and its dependencies. We need to add a few things to it. Specifically, calls for MongoDB and Monk.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node\nodetest1&amp;gt;npm install --save monk@^6.0.6 mongodb@^3.1.13
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4. Install Dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node\nodetest1&amp;gt;npm install
C:\node\nodetest1&amp;gt;npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Node Console&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt; nodetest1@0.0.0 start C:\node\nodetest1
&amp;gt; node ./bin/www
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Since node is a single threaded process, how to make use of all CPUs?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; 
 &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; 
 &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A single instance of Node.js runs in a single thread. To take advantage of multi-core systems, the user will sometimes want to launch a cluster of Node.js processes to handle the load. The cluster module allows easy creation of child processes that all share server ports.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const cluster = require(&#39;cluster&#39;);
const http = require(&#39;http&#39;);
const numCPUs = require(&#39;os&#39;).cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i &amp;lt; numCPUs; i++) {
    cluster.fork();
  }

  cluster.on(&#39;exit&#39;, (worker, code, signal) =&amp;gt; {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) =&amp;gt; {
    res.writeHead(200);
    res.end(&#39;hello world\n&#39;);
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Running Node.js will now share port 8000 between the workers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node server.js
Master 3596 is running
Worker 4324 started
Worker 4520 started
Worker 6056 started
Worker 5644 started
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The worker processes are spawned using the &lt;code&gt;child_process.fork()&lt;/code&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.&lt;/p&gt; 
&lt;p&gt;The cluster module supports two methods of distributing incoming connections.&lt;/p&gt; 
&lt;p&gt;The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.&lt;/p&gt; 
&lt;p&gt;The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What does emitter do and what is dispatcher?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js core API is based on asynchronous event-driven architecture in which certain kind of objects called emitters periodically emit events that cause listener objects to be called.&lt;/p&gt; 
&lt;p&gt;All objects that emit events are members of EventEmitter class. These objects expose an eventEmitter.on() function that allows one or more functions to be attached to named events emitted by the object.&lt;/p&gt; 
&lt;p&gt;When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. All values returned by the called listeners are ignored and will be discarded.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const EventEmitter = require(&#39;events&#39;);
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on(&#39;event&#39;, function(a, b) {
  console.log(a, b, this);
  // Prints:
  //   Technoetics Club MyEmitter {
  //     domain: null,
  //     _events: { event: [Function] },
  //     _eventsCount: 1,
  //     _maxListeners: undefined }
});
myEmitter.emit(&#39;event&#39;,&#39;Technoetics&#39;, &#39;Club&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here we create a myEmitter object and emit event at the end which triggers the callback function and we are able to get the desired output.&lt;/p&gt; 
&lt;p&gt;By default, all listeners attached to a particular event object are called by the EventListener object synchronously in the order in which they are registered or attached to the event object.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Dispatcher&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Dispatcher has functionality not provided nor expected in EventEmitter, the most notable being waitFor, which allows a store to ensure that another store has been updated in response to an action before it proceeds.&lt;/p&gt; 
&lt;p&gt;Pattern-wise, the Dispatcher is also a singleton, whereas EventEmitter is an API that you might object-assign onto multiple stores.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to kill child processes that spawn their own child processes in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;If a child process in Node.js spawn their own child processes, kill() method will not kill the child process’s own child processes. For example, if I start a process that starts it’s own child processes via child_process module, killing that child process will not make my program to quit.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var spawn = require(&#39;child_process&#39;).spawn;
var child = spawn(&#39;my-command&#39;);

child.kill();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The program above will not quit if &lt;code&gt;my-command&lt;/code&gt; spins up some more processes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PID range hack&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;We can start child processes with {detached: true} option so those processes will not be attached to main process but they will go to a new group of processes. Then using process.kill(-pid) method on main process we can kill all processes that are in the same group of a child process with the same pid group. In my case, I only have one processes in this group.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var spawn = require(&#39;child_process&#39;).spawn;
var child = spawn(&#39;my-command&#39;, {detached: true});

process.kill(-child.pid);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note - before pid. This converts a pid to a group of pids for process kill() method.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What do you understand by Reactor Pattern in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Reactor Pattern is an idea of non-blocking I/O operations in Node.js. This pattern provides a handler(in case of Node.js, a callback function) that is associated with each I/O operation. When an I/O request is generated, it is submitted to a demultiplexer.&lt;/p&gt; 
&lt;p&gt;This demultiplexer is a notification interface that is used to handle concurrency in non-blocking I/O mode and collects every request in form of an event and queues each event in a queue. Thus, the demultiplexer provides the Event Queue, which we often hear. When a request is collected by the demultiplexer, it returns the control back to the system and does not blocks the I/O. At the same time, there is an Event Loop which iterates over the items in the Event Queue. Every event has a callback function associated with it, and that callback function is invoked when the Event Loop iterates.&lt;/p&gt; 
&lt;p&gt;The callback function further mostly have other callbacks associated within representing some asynchronous operations. These operations are inserted in the Event Queue by the demultiplexer and are ready to be processed once the Event Loop iterates over them. That is why calls to other operations must be asynchronous.&lt;/p&gt; 
&lt;p&gt;When all the items in the Event Queue are processed and there are no pending operations left, Node.js terminates the application automatically.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ol&gt; 
 &lt;li&gt;The application generates a new I/O operation by submitting a request to the Event Demultiplexer. The application also specifies a handler, which will be invoked when the operation completes. Submitting a new request to the Event Demultiplexer is a non-blocking call and it immediately returns the control back to the application.&lt;/li&gt; 
 &lt;li&gt;When a set of I/O operations completes, the Event Demultiplexer pushes the new events into the Event Queue.&lt;/li&gt; 
 &lt;li&gt;At this point, the Event Loop iterates over the items of the Event Queue.&lt;/li&gt; 
 &lt;li&gt;For each event, the associated handler is invoked.&lt;/li&gt; 
 &lt;li&gt;The handler, which is part of the application code, will give back the control to the Event Loop when its execution completes (5a). However, new asynchronous operations might be requested during the execution of the handler (5b), causing new operations to be inserted in the Event Demultiplexer (1), before the control is given back to the Event Loop.&lt;/li&gt; 
 &lt;li&gt;When all the items in the Event Queue are processed, the loop will block again on the Event Demultiplexer which will then trigger another cycle.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the key features of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous event driven IO helps concurrent request handling&lt;/strong&gt; – All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the processing of other requests. Thus it will not wait for the response from the previous requests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast in Code execution&lt;/strong&gt; – Node.js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node.js also become faster.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Single Threaded but Highly Scalable&lt;/strong&gt; – Node.js uses a single thread model for event looping. The response from these events may or may not reach the server immediately. However, this does not block other operations. Thus making Node.js highly scalable. Traditional servers create limited threads to handle requests while Node.js creates a single thread that provides service to much larger numbers of such requests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js library uses JavaScript&lt;/strong&gt; – This is another important aspect of Node.js from the developer’s point of view. The majority of developers are already well-versed in JavaScript. Hence, development in Node.js becomes easier for a developer who knows JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;There is an Active and vibrant community for the Node.js framework&lt;/strong&gt; – The active community always keeps the framework updated with the latest trends in the web development.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No Buffering&lt;/strong&gt; – Node.js applications never buffer any data. They simply output the data in chunks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are globals in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;There are three keywords in Node.js which constitute as Globals. These are Global, Process, and Buffer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Global&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Global keyword represents the global namespace object. It acts as a container for all other &lt;code&gt;global&lt;/code&gt; objects. If we type &lt;code&gt;console.log(global)&lt;/code&gt;, it will print out all of them.&lt;/p&gt; 
&lt;p&gt;An important point to note about the global objects is that not all of them are in the global scope, some of them fall in the module scope. So, it is wise to declare them without using the var keyword or add them to Global object.&lt;/p&gt; 
&lt;p&gt;Variables declared using the var keyword become local to the module whereas those declared without it get subscribed to the global object.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Process&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is also one of the global objects but includes additional functionality to turn a synchronous function into an async callback. There is no boundation to access it from anywhere in the code. It is the instance of the EventEmitter class. And each node application object is an instance of the Process object.&lt;/p&gt; 
&lt;p&gt;It primarily gives back the information about the application or the environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.execPath&amp;gt;&lt;/code&gt; – to get the execution path of the Node app.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.Version&amp;gt;&lt;/code&gt; – to get the Node version currently running.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.platform&amp;gt;&lt;/code&gt; – to get the server platform.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some of the other useful Process methods are as follows.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.memoryUsage&amp;gt;&lt;/code&gt; – To know the memory used by Node application.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.NextTick&amp;gt;&lt;/code&gt; – To attach a callback function that will get called during the next loop. It can cause a delay in executing a function.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. Buffer&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Buffer is a class in Node.js to handle binary data. It is similar to a list of integers but stores as a raw memory outside the V8 heap.&lt;/p&gt; 
&lt;p&gt;We can convert JavaScript string objects into Buffers. But it requires mentioning the encoding type explicitly.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;ascii&amp;gt;&lt;/code&gt; – Specifies 7-bit ASCII data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;utf8&amp;gt;&lt;/code&gt; – Represents multibyte encoded Unicode char set.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;utf16le&amp;gt;&lt;/code&gt; – Indicates 2 or 4 bytes, little endian encoded Unicode chars.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;base64&amp;gt;&lt;/code&gt; – Used for Base64 string encoding.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;hex&amp;gt;&lt;/code&gt; – Encodes each byte as two hexadecimal chars.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is the syntax to use the Buffer class.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var buffer = new Buffer(string, [encoding]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command will allocate a new buffer holding the string with &lt;code&gt;utf8&lt;/code&gt; as the default encoding. However, if you like to write a &lt;code&gt;string&lt;/code&gt; to an existing buffer object, then use the following line of code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;buffer.write(string)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This class also offers other methods like &lt;code&gt;readInt8&lt;/code&gt; and &lt;code&gt;writeUInt8&lt;/code&gt; that allows read/write from various types of data to the buffer.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is chaining process in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It is an approach to connect the output of one stream to the input of another stream, thus creating a chain of multiple stream operations.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a control flow function? what are the steps does it execute?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It is a generic piece of code which runs in between several asynchronous function calls is known as control flow function.&lt;/p&gt; 
&lt;p&gt;It executes the following steps.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Control the order of execution.&lt;/li&gt; 
 &lt;li&gt;Collect data.&lt;/li&gt; 
 &lt;li&gt;Limit concurrency.&lt;/li&gt; 
 &lt;li&gt;Call the next step in the program.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is npm in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;NPM stands for Node Package Manager. It provides following two main functionalities.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It works as an Online repository for node.js packages/modules which are present at &amp;lt;nodejs.org&amp;gt;.&lt;/li&gt; 
 &lt;li&gt;It works as Command line utility to install packages, do version management and dependency management of Node.js packages. NPM comes bundled along with Node.js installable. We can verify its version using the following command-&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NPM helps to install any Node.js module using the following command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install &amp;lt;Module Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, following is the command to install a famous Node.js web framework module called express-&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;When to use Node.js and when not to use it?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;When to use Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is ideal to use Node.js for developing streaming or event-based real-time applications that require less CPU usage such as.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Chat applications.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Game servers -- Node.js is good for fast and high-performance servers, that face the need to handle thousands of user requests simultaneously.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Good For A Collaborative Environment -- It is suitable for environments where multiple people work together. For example, they post their documents, modify them by doing check-out and check-in of these documents. Node.js supports such situations by creating an event loop for every change made to the document. The “Event loop” feature of Node.js enables it to handle multiple events simultaneously without getting blocked.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Advertisement Servers -- Here again, we have servers that handle thousands of request for downloading advertisements from a central host. And Node.js is an ideal solution to handle such tasks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Streaming Servers -- Another ideal scenario to use Node.js is for multimedia streaming servers where clients fire request’s towards the server to download different multimedia contents from it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To summarize, it’s good to use Node.js, when you need high levels of concurrency but less amount of dedicated CPU time.&lt;/p&gt; 
&lt;p&gt;Last but not the least, since Node.js uses JavaScript internally, so it fits best for building client-side applications that also use JavaScript.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When to not use Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;However, we can use Node.js for a variety of applications. But it is a single threaded framework, so we should not use it for cases where the application requires long processing time. If the server is doing some calculation, it won’t be able to process any other requests. Hence, Node.js is best when processing needs less dedicated CPU time.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain how does Node.js work?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;A Node.js application creates a single thread on its invocation. Whenever Node.js receives a request, it first completes its processing before moving on to the next request.&lt;/p&gt; 
&lt;p&gt;Node.js works asynchronously by using the event loop and callback functions, to handle multiple requests coming in parallel. An Event Loop is a functionality which handles and processes all your external events and just converts them to a callback function. It invokes all the event handlers at a proper time. Thus, lots of work is done on the back-end, while processing a single request, so that the new incoming request doesn’t have to wait if the processing is not complete.&lt;/p&gt; 
&lt;p&gt;While processing a request, Node.js attaches a callback function to it and moves it to the back-end. Now, whenever its response is ready, an event is called which triggers the associated callback function to send this response.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Is Node.js entirely based on a single-thread?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Yes, it is true that Node.js processes all requests on a single thread. But it is just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.&lt;/p&gt; 
&lt;p&gt;Moreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.&lt;/p&gt; 
&lt;p&gt;To explain it practically, let’s assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to make post request in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Following code snippet can be used to make a Post Request in Node.js.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var request = require(&#39;request&#39;);
    request.post(&#39;http://www.example.com/action&#39;, { form: { key: &#39;value&#39; } },
    function (error, response, body) {
        if (!error &amp;amp;&amp;amp; response.statusCode == 200) {
            console.log(body)
        }
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Can you create http server in Node.js, explain the code used for it?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Yes, we can create HTTP Server in Node.js. We can use the &lt;code&gt;&amp;lt;http-server&amp;gt;&lt;/code&gt; command to do so.&lt;/p&gt; 
&lt;p&gt;Following is the sample code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var http = require(&#39;http&#39;);
var requestListener = function (request, response) {
    response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
    response.end(&#39;Welcome Viewers\n&#39;);
}
var server = http.createServer(requestListener);
server.listen(4200); // The port where you want to start with.
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to load html in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;To load HTML in Node.js we have to change the “Content-type” in the HTML code from text/plain to text/html.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile(filename, &quot;binary&quot;, function(err, file) {
    if(err) { 
        response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
        response.write(err + &quot;\n&quot;);
        response.end();
        return;
    }

response.writeHead(200);
response.write(file, &quot;binary&quot;);
response.end();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we will modify this code to load an HTML page instead of plain text.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile(filename, &quot;binary&quot;, function(err, file) {
    if(err) { 
        response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/html&quot;});
        response.write(err + &quot;\n&quot;);
        response.end();
        return;
    }

response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
response.write(file);
response.end();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you listen on port 80 with Node?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Instead of running on port 80 we can redirect port 80 to your application&#39;s port (&amp;gt;1024) using&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between operational and programmer errors?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Operation errors are not bugs, but problems with the system, like request timeout or hardware failure. On the other hand programmer errors are actual bugs.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why npm shrinkwrap is useful?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;NPM shrinkwrap lets you lock down the ver­sions of installed pack­ages and their descen­dant pack­ages. It helps you use same package versions on all environments (development, staging, production) and also improve download and installation speed. Having same versions of packages on all environments can help you test systems and deploy with confidence. If all tests pass on one machine, you can be sure that it will pass on all other because you know that you use same code!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm shrinkwrap
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It should create new npm-shrinkwrap.json file with information about all packages you use.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is your favourite HTTP framework and why?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Express.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Express provides a thin layer on top of Node.js with web application features such as basic routing, middleware, template engine and static files serving, so the drastic I/O performance of Node.js doesn’t get compromised.&lt;/p&gt; 
&lt;p&gt;Express is a minimal, un-opinionated framework. it doesn’t apply any of the prevalent design patterns such as MVC, MVP, MVVM or whatever is trending out of the box. For fans of simplicity, this is a big plus among all other frameworks because you can build your application with your own preference and no unnecessary learning curve. This is especially advantageous when creating a new personal project with no historical burden, but as the project or developing team grows, lack of standardization may lead to extra work for project/code management, and worst case scenario it may lead to the inability to maintain.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Generator&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Even though the framework is un-opinionated, it does have the generator that generates specific project folder structure. After installing express-generator npm package and creating application skeleton with generator command, an application folder with clear hierarchy will be created to help you organize images, front-end static JavaScript, stylesheet files and HTML template files.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express-generator -g
express helloapp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Middleware&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Middleware are basically just functions that have full access to both request and response objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = express();

app.use(cookieParser());
app.use(bodyParser());
app.use(logger());
app.use(authentication());

app.get(&#39;/&#39;, function (req, res) {
  // ...
});

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An Express application is essentially Node.js with a host of middleware functions, whether you want to customize your own middleware or take advantage of the built-in middlewares of the framework, Express made the process natural and intuitive.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Template Engine&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Template engines allow developer to embed backend variables into HTML files, and when requested the template file will be rendered to plain HTML format with the variables interpolated with their actual values. By default, the express-generator uses Pug (originally known as Jade) template engine, but other options like Mustache and EJS also work with Express seamlessly.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Database Integration&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;As a minimal framework, Express does not consider database integration as a required aspect within its package, thus it leans toward no specific database usage whatsoever. While adopting a particular data storage technology, be it MySQL, MongoDB, PostgreSQL, Redis, ElasticSearch or something else, it’s just a matter of installing the particular npm package as database driver. These third party database drivers do not conform to unified syntax when doing CRUD instructions, which makes switching databases a big hassle and error prone.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the Challenges with Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Challenges with Node.js Application Maintenance&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Improper maintenance of an application can result in issues related to stability or flexibility, often leading to the app&#39;s failure. If the code is not well-written or if developers use outdated tools, the performance can suffer, and users might experience more bugs and app crashes. On top of that, poor-quality code can hamper the app’s scaling capacity and the further development of the application. In the worst case scenario, it might become impossible to introduce new features without rewriting the codebase from scratch.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Extensive stack&lt;/li&gt; 
 &lt;li&gt;Technical Debt&lt;/li&gt; 
 &lt;li&gt;Scalability challanges&lt;/li&gt; 
 &lt;li&gt;Poor documentation&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;How to Deal With Maintenance Problems&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Conduct code review&lt;/li&gt; 
 &lt;li&gt;Use microservices&lt;/li&gt; 
 &lt;li&gt;Improve code quality&lt;/li&gt; 
 &lt;li&gt;Test before new feature implementation&lt;/li&gt; 
 &lt;li&gt;Improve documentation&lt;/li&gt; 
 &lt;li&gt;Update the stack&lt;/li&gt; 
 &lt;li&gt;Dig into the roots&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between Node.js vs Ajax?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. AJAX&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;AJAX stands for Asynchronous Javascript and XML, it’s used to allow web pages (client-side) to update asynchronously by communicating with a web server and by exchanging data. This essentially means that applications can talk to a server in the background of the application. It uses some core components to function:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The browser &lt;code&gt;XMLHttpRequest&lt;/code&gt; object to request data from a server&lt;/li&gt; 
 &lt;li&gt;HTML/CSS to display or collect data&lt;/li&gt; 
 &lt;li&gt;DOM for dynamic display&lt;/li&gt; 
 &lt;li&gt;JSON/XML for interchanging the data&lt;/li&gt; 
 &lt;li&gt;Javascript to unify everything&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;2. Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Node.js allows the developers to develop a web application in a single language called JavaScript for both client side and server side.&lt;/p&gt; 
&lt;p&gt;Unlike the other programming languages, Node.js has its cycle of the event in the form of language which is very beneficial for high-performance and scalable application development.&lt;/p&gt; 
&lt;p&gt;It is required for those web applications where traffic rate is very high. Node.js is an event based I/O language and its response time is very high rather than the other traditional languages. It is being used by the famous websites like Linked in, Twitter and Gmail.&lt;/p&gt; 
&lt;p&gt;The runtime environment of Node.js interprets JavaScript, which is very easy and simple to understand and code. Due to this reason, even the developers find it easy going which keeps them happy and relaxed. It is pertinent for real-time collaborative apps.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How Node.js overcomes the problem of blocking of I/O operations?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js solves this problem by putting the event based model at its core, using an event loop instead of threads.&lt;/p&gt; 
&lt;p&gt;Node.js uses an event loop for this. An event loop is “an entity that handles and processes external events and converts them into callback invocations”. Whenever data is needed nodejs registers a callback and sends the operation to this event loop. Whenever the data is available the callback is called.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Mention the steps by which you can async in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;ES 2017 introduced Asynchronous functions. Async functions are essentially a cleaner way to work with asynchronous code in JavaScript.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Async/Await&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The newest way to write asynchronous code in JavaScript.&lt;/li&gt; 
 &lt;li&gt;It is non blocking (just like promises and callbacks).&lt;/li&gt; 
 &lt;li&gt;Async/Await was created to simplify the process of working with and writing chained promises.&lt;/li&gt; 
 &lt;li&gt;Async functions return a Promise. If the function throws an error, the Promise will be rejected. If the function returns a value, the Promise will be resolved.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Syntax&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Normal Function
function add(x,y){
  return x + y;
}
// Async Function
async function add(x,y){
  return x + y;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Await&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Async functions can make use of the await expression. This will pause the async function and wait for the Promise to resolve prior to moving on.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function doubleAfter2Seconds(x) {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      resolve(x * 2);
    }, 2000);
  });
}

async function addAsync(x) {
  const a = await doubleAfter2Seconds(10);
  const b = await doubleAfter2Seconds(20);
  const c = await doubleAfter2Seconds(30);
  return x + a + b + c;
}


addAsync(10).then((sum) =&amp;gt; {
  console.log(sum);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the timing features of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The Performance Timing API provides an implementation of the W3C Performance Timeline specification. The purpose of the API is to support collection of high resolution performance metrics. This is the same Performance API as implemented in modern Web browsers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { PerformanceObserver, performance } = require(&#39;perf_hooks&#39;);

const obs = new PerformanceObserver((items) =&amp;gt; {
  console.log(items.getEntries()[0].duration);
  performance.clearMarks();
});
obs.observe({ entryTypes: [&#39;measure&#39;] });

performance.mark(&#39;A&#39;);
doSomeLongRunningProcess(() =&amp;gt; {
  performance.mark(&#39;B&#39;);
  performance.measure(&#39;A to B&#39;, &#39;A&#39;, &#39;B&#39;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;code&gt;request&lt;/code&gt; module&lt;/strong&gt;&lt;br&gt; The popular request module has a built-in method to measure HTTP timings. You can enable it with the time property.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const request = require(&#39;request&#39;)

request({
  uri: &#39;https://nodejs.org&#39;,
  method: &#39;GET&#39;,
  time: true
}, (err, resp) =&amp;gt; {
  console.log(err || resp.timings)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is LTS releases of Node.js why should you care?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;An LTS(Long Term Support) version of Node.js receives all the critical bug fixes, security updates and performance&lt;/p&gt; 
&lt;p&gt;LTS versions of Node.js are supported for at least 18 months and are indicated by even version numbers (e.g. 4, 6, 8). They’re best for production since the LTS release line is focussed on stability and security, whereas the Current release line has a shorter lifespan and more frequent updates to the code. Changes to LTS versions are limited to bug fixes for stability, security updates, possible npm updates, documentation updates and certain performance improvements that can be demonstrated to not break existing applications.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why should you separate Express &#39;app&#39; and &#39;server&#39;?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Keeping the API declaration separated from the network related configuration (port, protocol, etc) allows testing the API in-process, without performing network calls, with all the benefits that it brings to the table: fast testing execution and getting coverage metrics of the code. It also allows deploying the same API under flexible and different network conditions. Bonus: better separation of concerns and cleaner code.&lt;/p&gt; 
&lt;p&gt;API declaration, should reside in app.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = express();
app.use(bodyParser.json());
app.use(&quot;/api/events&quot;, events.API);
app.use(&quot;/api/forms&quot;, forms);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Server network declaration, should reside in /bin/www:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = require(&#39;../app&#39;);
var http = require(&#39;http&#39;);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || &#39;3000&#39;);
app.set(&#39;port&#39;, port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between process.nextTick() and setImmediate()?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The difference between &lt;code&gt;process.nextTick()&lt;/code&gt; and &lt;code&gt;setImmediate()&lt;/code&gt; is that &lt;code&gt;process.nextTick()&lt;/code&gt; defers the execution of an action till the next pass around the event loop or it simply calls the callback function once the ongoing execution of the event loop is finished whereas &lt;code&gt;setImmediate()&lt;/code&gt; executes a callback on the next cycle of the event loop and it gives back to the event loop for executing any I/O operations.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between JavaScript and Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;| |JavaScript |Node JS | |-------|-----------|-----------| |Type |JavaScript is a programming language. It running in any web browser with a proper browser engine.| It is an interpreter and environment for JavaScript with some specific useful libraries which JavaScript programming can use separately.| |Utility |Mainly using for any client-side activity for a web application, like possible attribute validation or refreshing the page in a specific interval or provide some dynamic changes in web pages without refreshing the page.| It mainly used for accessing or performing any non-blocking operation of any operating system, like creating or executing a shell script or accessing any hardware specific information or running any backend job.| |Running Engine| JavaScript running any engine like Spider monkey (FireFox), JavaScript Core (Safari), V8 (Google Chrome).| Node JS only run in a V8 engine which mainly used by google chrome. And javascript program which will be written under this Node JS will be always run in V8 Engine.|&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the difference between Events and Callbacks?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single-threaded application, but it support concurrency via the concept of &lt;strong&gt;event&lt;/strong&gt; and &lt;strong&gt;callbacks&lt;/strong&gt;. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.&lt;/p&gt; 
&lt;p&gt;callback functions are called when an asynchronous function returns its result, whereas event handling works on the &lt;strong&gt;observer pattern&lt;/strong&gt;. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Callback&lt;/strong&gt;: A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: synchronous callback&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function greeting(name) {
  alert(&#39;Hello &#39; + name);
}

function processUserInput(callback) {
  var name = prompt(&#39;Please enter your name.&#39;);
  callback(name);
}

processUserInput(greeting);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Events&lt;/strong&gt;: Every action on a computer is an event. Node.js allows us to create and handle custom events easily by using events module. Event module includes &lt;code&gt;EventEmitter&lt;/code&gt; class which can be used to raise and handle custom events.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var event = require(&#39;events&#39;);  
var eventEmitter = new event.EventEmitter();  
  
//  Add listener function for Sum event  
eventEmitter.on(&#39;Sum&#39;, function(num1, num2) {  
    console.log(&#39;Total: &#39; + (Number(num1) + Number(num2)));  
});  

//  Call Event.  
eventEmitter.emit(&#39;Sum&#39;, &#39;10&#39;, &#39;20&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain RESTful Web Services in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It is an architectural style as well as an approach for communications purposes that is often used in various web services development. A REST Server simply provides access to resources and REST client accesses and modifies the resources using HTTP protocol.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;HTTP methods&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; − Provides read-only access to a resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; − Creates a new resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; − Removes a resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; − Updates an existing resource or creates a new resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;− Update/modify a resource&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Principles of REST&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Uniform Interface&lt;/li&gt; 
 &lt;li&gt;Stateless&lt;/li&gt; 
 &lt;li&gt;Cacheable&lt;/li&gt; 
 &lt;li&gt;Client-Server&lt;/li&gt; 
 &lt;li&gt;Layered System&lt;/li&gt; 
 &lt;li&gt;Code on Demand (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;users.json&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
   &quot;user1&quot; : {
      &quot;id&quot;: 1,
      &quot;name&quot; : &quot;Ehsan Philip&quot;,
      &quot;age&quot; : 24
   },

   &quot;user2&quot; : {
      &quot;id&quot;: 2,
      &quot;name&quot; : &quot;Karim Jimenez&quot;,
      &quot;age&quot; : 22
   },

   &quot;user3&quot; : {
      &quot;id&quot;: 3,
      &quot;name&quot; : &quot;Giacomo Weir&quot;,
      &quot;age&quot; : 18
   }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;List Users&lt;/strong&gt; ( &lt;code&gt;GET&lt;/code&gt; method)&lt;/p&gt; 
&lt;p&gt;Let&#39;s implement our first RESTful API listUsers using the following code in a server.js file −&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

app.get(&#39;/listUsers&#39;, function (req, res) {
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      console.log( data );
      res.end( data );
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Add User&lt;/strong&gt; ( &lt;code&gt;POST&lt;/code&gt; method )&lt;/p&gt; 
&lt;p&gt;Following API will show you how to add new user in the list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

var user = {
   &quot;user4&quot; : {
      &quot;id&quot;: 4,
      &quot;name&quot; : &quot;Spencer Amos&quot;,
      &quot;age&quot; : 28
   }
}

app.post(&#39;/addUser&#39;, function (req, res) {
   // First read existing users.
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      data = JSON.parse( data );
      data[&quot;user4&quot;] = user[&quot;user4&quot;];
      console.log( data );
      res.end( JSON.stringify(data));
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Delete User&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

var id = 2;

app.delete(&#39;/deleteUser&#39;, function (req, res) {
   // First read existing users.
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      data = JSON.parse( data );
      delete data[&quot;user&quot; + 2];
      console.log( data );
      res.end( JSON.stringify(data));
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to handle file upload in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;express&lt;/strong&gt;: Popular web framework built on top of Node.js, used for creating REST-API.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;body-parser&lt;/strong&gt;: Parse incoming request bodies in a middleware&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;multer&lt;/strong&gt;: Middleware for handling multipart/form-data — file uploads&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;1. Installing the dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express body-parser multer --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Package.json&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;name&quot;: &quot;file_upload&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;4.13.3&quot;,
    &quot;multer&quot;: &quot;1.1.0&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;should&quot;: &quot;~7.1.0&quot;,
    &quot;mocha&quot;: &quot;~2.3.3&quot;,
    &quot;supertest&quot;: &quot;~1.1.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3. Server.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&quot;express&quot;);
var bodyParser = require(&#39;body-parser&#39;);
var multer  = require(&#39;multer&#39;);
var app = express();

// for text/number data transfer between clientg and server
app.use(bodyParser());

var storage =   multer.diskStorage({
  destination: function (req, file, callback) {
    callback(null, &#39;./uploads&#39;);
  },
  filename: function (req, file, callback) {
    callback(null, file.fieldname + &#39;-&#39; + Date.now());
  }
});

var upload = multer({ storage : storage}).single(&#39;userPhoto&#39;);

app.get(&#39;/&#39;, function(req, res) {
      res.sendFile(__dirname + &quot;/index.html&quot;);
});

// POST: upload for single file upload
app.post(&#39;/api/photo&#39;, function(req, res) {
    upload(req,res,function(err) {
        if(err) {
            return res.end(&quot;Error uploading file.&quot;);
        }
        res.end(&quot;File is uploaded&quot;);
    });
});

app.listen(3000, function(){
    console.log(&quot;Listening on port 3000&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4. index.html&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Multer-File-Upload&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;MULTER File Upload | Single File Upload&amp;lt;/h1&amp;gt; 

    &amp;lt;form id = &quot;uploadForm&quot;
         enctype = &quot;multipart/form-data&quot;
         action = &quot;/api/photo&quot;
         method = &quot;post&quot;
    &amp;gt;
      &amp;lt;input type=&quot;file&quot; name=&quot;userPhoto&quot; /&amp;gt;
      &amp;lt;input type=&quot;submit&quot; value=&quot;Upload Image&quot; name=&quot;submit&quot;&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain the terms body-parser, cookie-parser, morgan, nodemon, pm2, serve-favicon, cors, dotenv, fs-extra, moment in Express JS?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;a) body-parser&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;body-parser&lt;/code&gt; extract the entire body portion of an incoming request stream and exposes it on &lt;code&gt;req.body&lt;/code&gt;. This body-parser module parses the JSON, buffer, string and URL encoded data submitted using HTTP POST request.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express ejs body-parser
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// server.js

var express = require(&#39;express&#39;)
var bodyParser = require(&#39;body-parser&#39;)

var app = express()

// create application/json parser
var jsonParser = bodyParser.json()

// create application/x-www-form-urlencoded parser
var urlencodedParser = bodyParser.urlencoded({ extended: false })

// POST /login gets urlencoded bodies
app.post(&#39;/login&#39;, urlencodedParser, function (req, res) {
  res.send(&#39;welcome, &#39; + req.body.username)
})

// POST /api/users gets JSON bodies
app.post(&#39;/api/users&#39;, jsonParser, function (req, res) {
  // create user in req.body
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;b) cookie-parser&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A cookie is a piece of data that is sent to the client-side with a request and is stored on the client-side itself by the Web Browser the user is currently using.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;cookie-parser&lt;/code&gt; middleware&#39;s cookieParser function takes a &lt;code&gt;secret&lt;/code&gt; string or array of strings as the first argument and an &lt;code&gt;options&lt;/code&gt; object as the second argument.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cookie-parser
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cookieParser = require(&#39;cookie-parser&#39;)

var app = express()
app.use(cookieParser())

app.get(&#39;/&#39;, function (req, res) {
  // Cookies that have not been signed
  console.log(&#39;Cookies: &#39;, req.cookies)

  // Cookies that have been signed
  console.log(&#39;Signed Cookies: &#39;, req.signedCookies)
})

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;c) morgan&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;HTTP request logger middleware for node.js.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install morgan
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: write logs to a file&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var fs = require(&#39;fs&#39;)
var morgan = require(&#39;morgan&#39;)
var path = require(&#39;path&#39;)

var app = express()

// create a write stream (in append mode)
var accessLogStream = fs.createWriteStream(path.join(__dirname, &#39;access.log&#39;), { flags: &#39;a&#39; })

// setup the logger
app.use(morgan(&#39;combined&#39;, { stream: accessLogStream }))

app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;hello, world!&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;d) nodemon&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nodemon is a utility that will monitor for any changes in source and automatically restart your server.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g nodemon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  // ...
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;nodemon server.js&quot;
  },
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;e) pm2&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;(rocess) &lt;strong&gt;M&lt;/strong&gt;(anager) &lt;strong&gt;2&lt;/strong&gt; (pm2) is a production process manager for Node.js applications with a built-in load balancer. It allows to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install pm2 -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Start an application&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pm2 start app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;[&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/quick-start/&quot;&gt;Read More&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;f) serve-favicon&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Node.js middleware for serving a favicon. The &lt;code&gt;serve-favicon&lt;/code&gt; module lets us exclude requests for the favicon in our logger middleware. It also caches the icon in memory to improve performance by reducing disk access. In addition, it provides an &lt;code&gt;ETag&lt;/code&gt; based on the contents of the icon, rather than file system properties.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install serve-favicon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var favicon = require(&#39;serve-favicon&#39;)
var path = require(&#39;path&#39;)

var app = express()
app.use(favicon(path.join(__dirname, &#39;public&#39;, &#39;favicon.ico&#39;)))

// Add your routes here, etc.

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;g) cors&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ross-&lt;strong&gt;O&lt;/strong&gt;rigin &lt;strong&gt;R&lt;/strong&gt;esource &lt;strong&gt;S&lt;/strong&gt;haring (CORS) headers allow apps running in the browser to make requests to servers on different domains (also known as origins). CORS headers are set on the server side - the HTTP server is responsible for indicating that a given HTTP request can be cross-origin. CORS defines a way in which a browser and server can interact and determine whether or not it is safe to allow a cross-origin request.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cors
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example: Enable All CORS Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cors = require(&#39;cors&#39;)
var app = express()

app.use(cors())

app.get(&#39;/products/:id&#39;, function (req, res, next) {
  res.json({msg: &#39;This is CORS-enabled for all origins!&#39;})
})

app.listen(8080, function () {
  console.log(&#39;CORS-enabled web server listening on port 80&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example: Enable CORS for a Single Route&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cors = require(&#39;cors&#39;)
var app = express()

app.get(&#39;/products/:id&#39;, cors(), function (req, res, next) {
  res.json({msg: &#39;This is CORS-enabled for a Single Route&#39;})
})

app.listen(8080, function () {
  console.log(&#39;CORS-enabled web server listening on port 80&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;h) dotenv&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;When a NodeJs application runs, it injects a global variable called &lt;code&gt;process.env&lt;/code&gt; which contains information about the state of environment in which the application is running. The &lt;code&gt;dotenv&lt;/code&gt; loads environment variables stored in the &lt;code&gt;.env&lt;/code&gt; file into &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install dotenv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .env

DB_HOST=localhost
DB_USER=admin
DB_PASS=root
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// config.js

const db = require(&#39;db&#39;)

db.connect({
  host: process.env.DB_HOST,
  username: process.env.DB_USER,
  password: process.env.DB_PASS
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;i) fs-extra&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fs-extra&lt;/code&gt; contains methods that aren&#39;t included in the vanilla Node.js fs package. Such as recursive &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, and &lt;code&gt;remove&lt;/code&gt;. It also uses graceful-fs to prevent &lt;code&gt;EMFILE&lt;/code&gt; errors.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install fs-extra
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs-extra&#39;)


// Async with callbacks:
fs.copy(&#39;/tmp/myfile&#39;, &#39;/tmp/mynewfile&#39;, err =&amp;gt; {
  if (err) return console.error(err)
  console.log(&#39;success!&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;j) moment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install moment --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Format Dates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment().format(&#39;MMMM Do YYYY, h:mm:ss a&#39;); // October 24th 2020, 3:15:22 pm
moment().format(&#39;dddd&#39;);                    // Saturday
moment().format(&quot;MMM Do YY&quot;);               // Oct 24th 20
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Relative Time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment(&quot;20111031&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 9 years ago
moment(&quot;20120620&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 8 years ago
moment().startOf(&#39;day&#39;).fromNow();        // 15 hours ago
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Calendar Time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment().subtract(10, &#39;days&#39;).calendar(); // 10/14/2020
moment().subtract(6, &#39;days&#39;).calendar();  // Last Sunday at 3:18 PM
moment().subtract(3, &#39;days&#39;).calendar();  // Last Wednesday at 3:18 PM
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does routing work in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Routing defines the way in which the client requests are handled by the application endpoints. We define routing using methods of the Express app object that correspond to HTTP methods; for example, &lt;code&gt;app.get()&lt;/code&gt; to handle &lt;code&gt;GET&lt;/code&gt; requests and &lt;code&gt;app.post&lt;/code&gt; to handle &lt;code&gt;POST&lt;/code&gt; requests, &lt;code&gt;app.all()&lt;/code&gt; to handle all HTTP methods and &lt;code&gt;app.use()&lt;/code&gt; to specify middleware as the callback function.&lt;/p&gt; 
&lt;p&gt;These routing methods &quot;listens&quot; for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Syntax&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.METHOD(PATH, HANDLER)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;app is an instance of express.&lt;/li&gt; 
 &lt;li&gt;METHOD is an &lt;code&gt;HTTP request method&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;PATH is a path on the server.&lt;/li&gt; 
 &lt;li&gt;HANDLER is the function executed when the route is matched.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;a) Route methods&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// GET method route
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;GET request&#39;)
})

// POST method route
app.post(&#39;/login&#39;, function (req, res) {
  res.send(&#39;POST request&#39;)
})

// ALL method route
app.all(&#39;/secret&#39;, function (req, res, next) {
  console.log(&#39;Accessing the secret section ...&#39;)
  next() // pass control to the next handler
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;b) Route paths&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Route paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.&lt;/p&gt; 
&lt;p&gt;The characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;()&lt;/code&gt; are subsets of their regular expression counterparts. The hyphen &lt;code&gt;(-)&lt;/code&gt; and the dot &lt;code&gt;(.)&lt;/code&gt; are interpreted literally by string-based paths.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This route path will match requests to /about.
app.get(&#39;/about&#39;, function (req, res) {
  res.send(&#39;about&#39;)
})


// This route path will match acd and abcd.
app.get(&#39;/ab?cd&#39;, function (req, res) {
  res.send(&#39;ab?cd&#39;)
})


// This route path will match butterfly and dragonfly
app.get(/.*fly$/, function (req, res) {
  res.send(&#39;/.*fly$/&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;c) Route parameters&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the &lt;code&gt;req.params&lt;/code&gt; object, with the name of the route parameter specified in the path as their respective keys.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/users/:userId&#39;, function (req, res) {
  res.send(req.params)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Response methods&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;| Method | Description | |-------------------|-------------------------------| |&lt;code&gt;res.download()&lt;/code&gt; |Prompt a file to be downloaded.| |&lt;code&gt;res.end()&lt;/code&gt; |End the response process.| |&lt;code&gt;res.json()&lt;/code&gt; |Send a JSON response.| |&lt;code&gt;res.jsonp()&lt;/code&gt; |Send a JSON response with JSONP support.| |&lt;code&gt;res.redirect()&lt;/code&gt; |Redirect a request.| |&lt;code&gt;res.render()&lt;/code&gt; |Render a view template.| |&lt;code&gt;res.send()&lt;/code&gt; |Send a response of various types.| |&lt;code&gt;res.sendFile()&lt;/code&gt; |Send a file as an octet stream.| |&lt;code&gt;res.sendStatus()&lt;/code&gt; |Set the response status code and send its string representation as the response body.|&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;d) Router method&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var router = express.Router()

// middleware that is specific to this router
router.use(function timeLog (req, res, next) {
  console.log(&#39;Time: &#39;, Date.now())
  next()
})

// define the home page route
router.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Birds home page&#39;)
})

// define the about route
router.get(&#39;/about&#39;, function (req, res) {
  res.send(&#39;About birds&#39;)
})

module.exports = router
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How node.js prevents blocking code?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Blocking vs Non-blocking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Blocking&lt;/strong&gt; is when the execution of additional JavaScript in the Node.js process must wait until a non-JavaScript operation completes. This happens because the event loop is unable to continue running JavaScript while a &lt;strong&gt;blocking&lt;/strong&gt; operation is occurring.&lt;/p&gt; 
&lt;p&gt;Synchronous methods in the Node.js standard library that use &lt;strong&gt;libuv&lt;/strong&gt; are the most commonly used blocking operations. Native modules may also have blocking methods. Blocking methods execute &lt;code&gt;synchronously&lt;/code&gt; and non-blocking methods execute &lt;code&gt;asynchronously&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Blocking
const fs = require(&#39;fs&#39;);
const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read
console.log(data);
moreWork(); // will run after console.log

// Non-blocking
const fs = require(&#39;fs&#39;);
fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {
  if (err) throw err;
  console.log(data);
});
moreWork(); // will run before console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between promises and async-await in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Promises&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A promise is used to handle the asynchronous result of an operation. JavaScript is designed to not wait for an asynchronous block of code to completely execute before other synchronous parts of the code can run. With Promises, we can defer the execution of a code block until an async request is completed. This way, other operations can keep running without interruption.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;States of Promises:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Pending&lt;/code&gt;: Initial State, before the Promise succeeds or fails.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Resolved&lt;/code&gt;: Completed Promise&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Rejected&lt;/code&gt;: Failed Promise, throw an error&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function logFetch(url) {
  return fetch(url)
    .then(response =&amp;gt; {
      console.log(response);
    })
    .catch(err =&amp;gt; {
      console.error(&#39;fetch failed&#39;, err);
    });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Async-Await&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Await&lt;/code&gt; is basically syntactic sugar for &lt;strong&gt;Promises&lt;/strong&gt;. It makes asynchronous code look more like synchronous/procedural code, which is easier for humans to understand.&lt;/p&gt; 
&lt;p&gt;Putting the keyword &lt;code&gt;async&lt;/code&gt; before a function tells the function to return a Promise. If the code returns something that is not a &lt;code&gt;Promise&lt;/code&gt;, then JavaScript automatically wraps it into a resolved promise with that value. The &lt;code&gt;await&lt;/code&gt; keyword simply makes JavaScript wait until that &lt;code&gt;Promise&lt;/code&gt; settles and then returns its result.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function logFetch(url) {
  try {
    const response = await fetch(url);
    console.log(response);
  }
  catch (err) {
    console.log(&#39;fetch failed&#39;, err);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;72Q. &lt;em&gt;&lt;strong&gt;How to use JSON Web Token (JWT) for authentication in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;p&gt;JSON Web Token (JWT) is an open standard that defines a compact and self-contained way of securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.&lt;/p&gt; 
&lt;p&gt;There are some advantages of using JWT for authorization:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Purely stateless. No additional server or infra required to store session information.&lt;/li&gt; 
 &lt;li&gt;It can be easily shared among services.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;JSON Web Tokens consist of three parts separated by dots (.), which are:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jwt.sign(payload, secretOrPrivateKey, [options, callback])
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt; - Consists of two parts: the type of token (i.e., JWT) and the signing algorithm (i.e., HS512)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Payload&lt;/strong&gt; - Contains the claims that provide information about a user who has been authenticated along with other information such as token expiration time.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt; - Final part of a token that wraps in the encoded header and payload, along with the algorithm and a secret&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install jsonwebtoken bcryptjs --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: AuthController.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var router = express.Router();
var bodyParser = require(&#39;body-parser&#39;);
var User = require(&#39;../user/User&#39;);

var jwt = require(&#39;jsonwebtoken&#39;);
var bcrypt = require(&#39;bcryptjs&#39;);
var config = require(&#39;../config&#39;);


router.use(bodyParser.urlencoded({ extended: false }));
router.use(bodyParser.json());

router.post(&#39;/register&#39;, function(req, res) {
  
  var hashedPassword = bcrypt.hashSync(req.body.password, 8);
  
  User.create({
    name : req.body.name,
    email : req.body.email,
    password : hashedPassword
  },
  function (err, user) {
    if (err) return res.status(500).send(&quot;There was a problem registering the user.&quot;)
    // create a token
    var token = jwt.sign({ id: user._id }, config.secret, {
      expiresIn: 86400 // expires in 24 hours
    });
    res.status(200).send({ auth: true, token: token });
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;config.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// config.js
module.exports = {
  &#39;secret&#39;: &#39;supersecret&#39;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;jwt.sign()&lt;/code&gt; method takes a payload and the secret key defined in &lt;code&gt;config.js&lt;/code&gt; as parameters. It creates a unique string of characters representing the payload. In our case, the payload is an object containing only the id of the user.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://www.npmjs.com/package/jsonwebtoken&quot;&gt;Reference&lt;/a&gt;]&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to build a microservices architecture with Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Microservices&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Microservices are a style of &lt;strong&gt;service-oriented architecture&lt;/strong&gt; (SOA) where the app is structured on an assembly of interconnected services. With microservices, the application architecture is built with lightweight protocols. The services are finely seeded in the architecture. Microservices disintegrate the app into smaller services and enable improved modularity.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;There are few things worth emphasizing about the superiority of microservices, and distributed systems generally, over monolithic architecture:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modularity — responsibility for specific operations is assigned to separate pieces of the application&lt;/li&gt; 
 &lt;li&gt;Uniformity — microservices interfaces (API endpoints) consist of a base URI identifying a data object and standard HTTP methods (GET, POST, PUT, PATCH and DELETE) used to manipulate the object&lt;/li&gt; 
 &lt;li&gt;Robustness — component failures cause only the absence or reduction of a specific unit of functionality&lt;/li&gt; 
 &lt;li&gt;Maintainability — system components can be modified and deployed independently&lt;/li&gt; 
 &lt;li&gt;Scalability — instances of a service can be added or removed to respond to changes in demand.&lt;/li&gt; 
 &lt;li&gt;Availability — new features can be added to the system while maintaining 100% availability.&lt;/li&gt; 
 &lt;li&gt;Testability — new solutions can be tested directly in the production environment by implementing them for restricted segments of users to see how they behave in real life.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Creating Microservices with Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Step 01: Creating a Server to Accept Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This file is creating our server and assigns routes to process all requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//  server.js

const express = require(&#39;express&#39;)
const app = express();
const port = process.env.PORT || 3000;

const routes = require(&#39;./api/routes&#39;);
routes(app);
app.listen(port, function() {
   console.log(&#39;Server started on port: &#39; + port);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 02: Defining the routes&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The next step is to define the routes for the microservices and then assign each to a target in the controller. We have two endpoints. One endpoint called &quot;about&quot; that returns information about the application. And a &quot;distance&quot; endpoint that includes two path parameters, both Zip Codes of the Lego store. This endpoint returns the distance, in miles, between these two Zip Codes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const controller = require(&#39;./controller&#39;);

module.exports = function(app) {
   app.route(&#39;/about&#39;)
       .get(controller.about);
   app.route(&#39;/distance/:zipcode1/:zipcode2&#39;)
       .get(controller.getDistance);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 03: Adding Controller Logic&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Within the controller file, we are going to create a controller object with two properties. Those properties are the functions to handle the requests we defined in the routes module.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var properties = require(&#39;../package.json&#39;)
var distance = require(&#39;../service/distance&#39;);

var controllers = {
   about: function(req, res) {
       var aboutInfo = {
           name: properties.name,
           version: properties.version
       }
       res.json(aboutInfo);
   },
   getDistance: function(req, res) {
           distance.find(req, res, function(err, dist) {
               if (err)
                   res.send(err);
               res.json(dist);
           });
       },
};

module.exports = controllers;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to use Q promise in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;A promise is an object that represents the return value or the thrown exception that the function may eventually provide. A promise can also be used as a proxy for a remote object to overcome latency.&lt;/p&gt; 
&lt;p&gt;Promise is relatively an easy implementation for asynchronous operation. The promise object returned from the function represents an operation which is not completed yet, but it guarantees to the caller of the operation that the operation will be completed in future.&lt;/p&gt; 
&lt;p&gt;Promise has the following states:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Pending&lt;/strong&gt; - asynchronous operation is not yet completed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fulfilled&lt;/strong&gt; - asynchronous operation is completed successfully.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rejected&lt;/strong&gt; - asynchronous operation is terminated with an error.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Settled&lt;/strong&gt; - asynchronous operation is either fulfilled or rejected.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Callback&lt;/strong&gt; - function is executed if the promise is executed with value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Errback&lt;/strong&gt; - function is executed if the promise is rejected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Moving to Promises from Callback&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;On the first pass, promises can mitigate the &lt;strong&gt;Pyramid of Doom&lt;/strong&gt;: the situation where code marches to the right faster than it marches forward.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;step1(function (value1) {
    step2(value1, function(value2) {
        step3(value2, function(value3) {
            step4(value3, function(value4) {
                // Do something with value4
            });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With a promise library, it can flatten the pyramid.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Q.fcall(promisedStep1)
.then(promisedStep2)
.then(promisedStep3)
.then(promisedStep4)
.then(function (value4) {
    // Do something with value4
})
.catch(function (error) {
    // Handle any error from all above steps
})
.done();
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[&lt;a href=&quot;https://www.npmjs.com/package/q&quot;&gt;Reference&lt;/a&gt;]&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to implement Memcached in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Memcached&lt;/strong&gt; is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. Memcached is free and open-source software, licensed under the Revised BSD licence. Memcached runs on Unix-like operating systems (at least LINUX and OS X) and on Microsoft windows.&lt;/p&gt; 
&lt;p&gt;We can store data to memcached server in key pair format. So whenever any request come from the app can be matched with memcached server without any query from mysql/Nosql server. This increases the performance of the application.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install memcached
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Setting up the client&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The constructor of the memcached client take 2 different arguments server locations and options. Syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;var Memcached = require(&#39;memcached&#39;);
var memcached = new Memcached(Server locations, options);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example usage&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var Memcached = require(&#39;memcached&#39;);
// all global configurations should be applied to the .config object of the Client.
Memcached.config.poolSize = 25;

var memcached = new Memcached(&#39;localhost:11211&#39;, {retries:10,retry:10000,remove:true,failOverServers:[&#39;192.168.0.103:11211&#39;]});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;[&lt;a href=&quot;https://www.npmjs.com/package/memcached&quot;&gt;Reference&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to generate and verify checksum of the given string in Nodejs&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &lt;strong&gt;checksum&lt;/strong&gt; (aka &lt;strong&gt;hash sum&lt;/strong&gt;) calculation is a one-way process of mapping an extensive data set of variable length (e.g., message, file), to a smaller data set of a fixed length (hash). The length depends on a hashing algorithm.&lt;/p&gt; 
&lt;p&gt;For the checksum generation, we can use node &lt;code&gt;crypto()&lt;/code&gt; module. The module uses &lt;code&gt;createHash(algorithm)&lt;/code&gt; to create a checksum (hash) generator. The algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const crypto = require(&#39;crypto&#39;);

// To get a list of all available hash algorithms
crypto.getHashes() // [ &#39;md5&#39;, &#39;sha1&#39;, &#39;sha3-256&#39;, ... ]

  
// Create hash of SHA1 type
const key = &quot;MY_SECRET_KEY&quot;;


// &#39;digest&#39; is the output of hash function containing  
// only hexadecimal digits
hashPwd = crypto.createHash(&#39;sha1&#39;).update(key).digest(&#39;hex&#39;);
  
console.log(hashPwd); //ef5225a03e4f9cc953ab3c4dd41f5c4db7dc2e5b
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;Explain Error Handling in Nodejs?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to use locale (i18n) in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;What are the types of memory leaks in node.js&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to implement a Sleep function?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How does the cluster load balance work in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;What is daemon process? how to implement it in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>rauenzi/BetterDiscordApp</title>
      <link>https://github.com/rauenzi/BetterDiscordApp</link>
      <description>&lt;p&gt;Better Discord enhances Discord desktop app with new features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BetterDiscord &lt;a href=&quot;https://travis-ci.com/rauenzi/BetterDiscordApp&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/com/rauenzi/BetterDiscordApp.svg?style=flat-square&amp;amp;branch=stable&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/rauenzi/BetterDiscordApp/context:javascript&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/grade/javascript/g/rauenzi/BetterDiscordApp.svg?style=flat-square&quot; alt=&quot;Language Grade&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/BetterDiscord/Installer/latest/total?style=flat-square&quot; alt=&quot;GitHub Releases&quot;&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://patreon.com/Zerebos&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.herokuapp.com%2FZerebos&amp;amp;style=flat-square&quot; alt=&quot;Patreon&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/ZackRauen&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paypal-Donate!-%2300457C.svg?logo=paypal&amp;amp;style=flat-square&quot; alt=&quot;Paypal&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;BetterDiscord is a client modification for Discord. This allows you to add plugins and themes to your personal copy of Discord. BetterDiscord also adds a number of other features out of the box.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Auto Installers&lt;/h2&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Grab the &lt;code&gt;exe&lt;/code&gt; file from &lt;a href=&quot;https://github.com/BetterDiscord/Installer/releases/latest/download/BetterDiscord-Windows.exe&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;macOS/OS X&lt;/h3&gt; 
&lt;p&gt;Grab the &lt;code&gt;zip&lt;/code&gt; file from &lt;a href=&quot;https://github.com/BetterDiscord/Installer/releases/latest/download/BetterDiscord-Mac.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;Grab the &lt;code&gt;AppImage&lt;/code&gt; file from &lt;a href=&quot;https://github.com/BetterDiscord/Installer/releases/latest/download/BetterDiscord-Linux.AppImage&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual Installation&lt;/h2&gt; 
&lt;p&gt;For normal users, installing via the installers makes the most sense. However when wanting to either develop BetterDiscord, or when the installers do not work, this option can be used.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;: &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; 12.x+ and the package manager &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone this repository &lt;code&gt;git clone https://github.com/rauenzi/BetterDiscordApp.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install dependencies with &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build both the Injector and Renderer bundles with &lt;code&gt;npm run build&lt;/code&gt; this will create a &lt;code&gt;injector.js&lt;/code&gt;, &lt;code&gt;preload.js&lt;/code&gt;, and &lt;code&gt;renderer.js&lt;/code&gt; in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/li&gt; 
 &lt;li&gt;Run the inject script to inject the local files into your Discord client (&lt;code&gt;npm run inject&lt;/code&gt;). Alternately install it to non-stable using &lt;code&gt;npm run inject canary&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;FAQ&lt;/h1&gt; 
&lt;h3&gt;What is this?&lt;/h3&gt; 
&lt;p&gt;This is a client modification for Discord. It allows you to add plugins and themes to your client. Plugins can add functionality and useful features. Themes can completely change the look and feel of Discord.&lt;/p&gt; 
&lt;p&gt;BD has some other built-in features such as Emotes from Twitch, FFZ, and BBTV, as well as an in-client server browser.&lt;/p&gt; 
&lt;h3&gt;Where can I get plugins and themes?&lt;/h3&gt; 
&lt;p&gt;In our support servers we have channels with lists of 
 &lt;!-- raw HTML omitted --&gt;official
 &lt;!-- raw HTML omitted --&gt; plugins and themes. Please note we do not have an official listing on a website and are &lt;strong&gt;not affiliated with any of those websites&lt;/strong&gt;. However &lt;a href=&quot;https://betterdiscordlibrary.com/&quot;&gt;BetterDiscordLibrary&lt;/a&gt; is generally trustworthy.&lt;/p&gt; 
&lt;h3&gt;Support Servers?&lt;/h3&gt; 
&lt;p&gt;There are two: &lt;a href=&quot;https://discord.gg/0Tmfo5ZbORCRqbAd&quot;&gt;The main server&lt;/a&gt;, and &lt;a href=&quot;https://discord.gg/2HScm8j&quot;&gt;the backup&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Supporters&lt;/h1&gt; 
&lt;p&gt;These people have all subscribed to the &lt;code&gt;True Supporter&lt;/code&gt; tier on Patreon to support me.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Bandagers&lt;/h1&gt; 
&lt;p&gt;These people have all subscribed to the &lt;code&gt;Bandager&lt;/code&gt; tier on Patreon to support me.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Donors&lt;/h1&gt; 
&lt;p&gt;These people have either donated or subscribed to the most basic patron tier to support me.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>zadam/trilium</title>
      <link>https://github.com/zadam/trilium</link>
      <description>&lt;p&gt;Build your personal knowledge base with Trilium Notes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Trilium Notes&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/zadam/trilium/blob/master/README.md&quot;&gt;English&lt;/a&gt; | &lt;a href=&quot;https://github.com/zadam/trilium/blob/master/README-ZH_CN.md&quot;&gt;Chinese&lt;/a&gt; | &lt;a href=&quot;https://github.com/zadam/trilium/blob/master/README.ru.md&quot;&gt;Russian&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/trilium-notes/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/trilium-notes/Lobby.svg&quot; alt=&quot;Join the chat at https://gitter.im/trilium-notes/Lobby&quot;&gt;&lt;/a&gt; Trilium Notes is a hierarchical note taking application with focus on building large personal knowledge bases. See &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Screenshot-tour&quot;&gt;screenshots&lt;/a&gt; for quick overview:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/zadam/trilium/images/screenshot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Notes can be arranged into arbitrarily deep tree. Single note can be placed into multiple places in the tree (see &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Cloning-notes&quot;&gt;cloning&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Rich WYSIWYG note editing including e.g. tables, images and &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Text-notes#math-support&quot;&gt;math&lt;/a&gt; with markdown &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Text-notes#autoformat&quot;&gt;autoformat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Support for editing &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Code-notes&quot;&gt;notes with source code&lt;/a&gt;, including syntax highlighting&lt;/li&gt; 
 &lt;li&gt;Fast and easy &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Note-navigation&quot;&gt;navigation between notes&lt;/a&gt;, full text search and &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Note-hoisting&quot;&gt;note hoisting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Seamless &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Note-revisions&quot;&gt;note versioning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Note &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Attributes&quot;&gt;attributes&lt;/a&gt; can be used for note organization, querying and advanced &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Scripts&quot;&gt;scripting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zadam/trilium/wiki/Synchronization&quot;&gt;Synchronization&lt;/a&gt; with self-hosted sync server&lt;/li&gt; 
 &lt;li&gt;Strong &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Protected-notes&quot;&gt;note encryption&lt;/a&gt; with per-note granularity&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zadam/trilium/wiki/Relation-map&quot;&gt;Relation maps&lt;/a&gt; and &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Link-map&quot;&gt;link maps&lt;/a&gt; for visualizing notes and their relations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zadam/trilium/wiki/Scripts&quot;&gt;Scripting&lt;/a&gt; - see &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Advanced-showcases&quot;&gt;Advanced showcases&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Scales well in both usability and performance upwards of 100 000 notes&lt;/li&gt; 
 &lt;li&gt;Touch optimized &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Mobile-frontend&quot;&gt;mobile frontend&lt;/a&gt; for smartphones and tablets&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zadam/trilium/wiki/Themes&quot;&gt;Night theme&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zadam/trilium/wiki/Evernote-import&quot;&gt;Evernote&lt;/a&gt; and &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Markdown&quot;&gt;Markdown import &amp;amp; export&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zadam/trilium/wiki/Web-clipper&quot;&gt;Web Clipper&lt;/a&gt; for easy saving of web content&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Builds&lt;/h2&gt; 
&lt;p&gt;Trilium is provided as either desktop application (Linux and Windows) or web application hosted on your server (Linux). Mac OS desktop build is available, but it is &lt;a href=&quot;https://github.com/zadam/trilium/wiki/FAQ#mac-os-support&quot;&gt;unsupported&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If you want to use Trilium on the desktop, download binary release for your platform from &lt;a href=&quot;https://github.com/zadam/trilium/releases/latest&quot;&gt;latest release&lt;/a&gt;, unzip the package and run &lt;code&gt;trilium&lt;/code&gt; executable.&lt;/li&gt; 
 &lt;li&gt;If you want to install Trilium on server, follow &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Server-installation&quot;&gt;this page&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;Currently only recent Chrome and Firefox are supported (tested) browsers.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/zadam/trilium/wiki/&quot;&gt;See wiki for complete list of documentation pages.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;You can also read &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Patterns-of-personal-knowledge-base&quot;&gt;Patterns of personal knowledge base&lt;/a&gt; to get some inspiration on how you might use Trilium.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;Use a browser based dev environment&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/#https://github.com/zadam/trilium&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Or clone locally and run&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install
npm run start-server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Shoutouts&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ckeditor/ckeditor5&quot;&gt;CKEditor 5&lt;/a&gt; - best WYSIWYG editor on the market, very interactive and listening team&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mar10/fancytree&quot;&gt;FancyTree&lt;/a&gt; - very feature rich tree library without real competition. Trilium Notes would not be the same without it.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/codemirror/CodeMirror&quot;&gt;CodeMirror&lt;/a&gt; - code editor with support for huge amount of languages&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jsplumb/jsplumb&quot;&gt;jsPlumb&lt;/a&gt; - visual connectivity library without competition. Used in &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Relation-map&quot;&gt;relation maps&lt;/a&gt; and &lt;a href=&quot;https://github.com/zadam/trilium/wiki/Link-map&quot;&gt;link maps&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>chartjs/Chart.js</title>
      <link>https://github.com/chartjs/Chart.js</link>
      <description>&lt;p&gt;Simple HTML5 Charts using the &lt;canvas&gt; tag&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;All the links point to the new version 3 of the lib.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/getting-started/index&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/general/data-structures&quot;&gt;General&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/configuration/index&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/charts/line&quot;&gt;Charts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/axes/index&quot;&gt;Axes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/developers/index&quot;&gt;Developers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chartjs/awesome&quot;&gt;Popular Extensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/samples/&quot;&gt;Samples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In case you are looking for the docs of version 2, you will have to specify the specific version in the url like this: &lt;a href=&quot;https://www.chartjs.org/docs/2.9.4/&quot;&gt;https://www.chartjs.org/docs/2.9.4/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Instructions on building and testing Chart.js can be found in &lt;a href=&quot;https://www.chartjs.org/docs/master/developers/contributing.html#building-and-testing&quot;&gt;the documentation&lt;/a&gt;. Before submitting an issue or a pull request, please take a moment to look over the &lt;a href=&quot;https://www.chartjs.org/docs/master/developers/contributing&quot;&gt;contributing guidelines&lt;/a&gt; first. For support, please post questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/chartjs&quot;&gt;Stack Overflow&lt;/a&gt; with the &lt;code&gt;chartjs&lt;/code&gt; tag.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Chart.js is available under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
