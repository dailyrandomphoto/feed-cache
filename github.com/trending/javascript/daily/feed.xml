<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Sun, 04 Apr 2021 02:08:01 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>chartjs/Chart.js</title>
      <link>https://github.com/chartjs/Chart.js</link>
      <description>&lt;p&gt;Simple HTML5 Charts using the &lt;canvas&gt; tag&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;All the links point to the new version 3 of the lib.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/getting-started/index&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/general/data-structures&quot;&gt;General&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/configuration/index&quot;&gt;Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/charts/line&quot;&gt;Charts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/axes/index&quot;&gt;Axes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/docs/latest/developers/index&quot;&gt;Developers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chartjs/awesome&quot;&gt;Popular Extensions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.chartjs.org/samples/&quot;&gt;Samples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In case you are looking for the docs of version 2, you will have to specify the specific version in the url like this: &lt;a href=&quot;https://www.chartjs.org/docs/2.9.4/&quot;&gt;https://www.chartjs.org/docs/2.9.4/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Instructions on building and testing Chart.js can be found in &lt;a href=&quot;https://www.chartjs.org/docs/master/developers/contributing.html#building-and-testing&quot;&gt;the documentation&lt;/a&gt;. Before submitting an issue or a pull request, please take a moment to look over the &lt;a href=&quot;https://www.chartjs.org/docs/master/developers/contributing&quot;&gt;contributing guidelines&lt;/a&gt; first. For support, please post questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/chartjs&quot;&gt;Stack Overflow&lt;/a&gt; with the &lt;code&gt;chartjs&lt;/code&gt; tag.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Chart.js is available under the &lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>john-smilga/node-express-course</title>
      <link>https://github.com/john-smilga/node-express-course</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Node and Express Tutorial&lt;/h2&gt; 
&lt;h4&gt;Contents&lt;/h4&gt; 
&lt;ol&gt; 
 &lt;li&gt;Node Tutorial&lt;/li&gt; 
 &lt;li&gt;Express Tutorial&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>discordjs/discord.js</title>
      <link>https://github.com/discordjs/discord.js</link>
      <description>&lt;p&gt;A powerful JavaScript library for interacting with the Discord API&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#audio-engines&quot;&gt;Audio engines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#optional-packages&quot;&gt;Optional packages&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#example-usage&quot;&gt;Example Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#links&quot;&gt;Links&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#help&quot;&gt;Help&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;discord.js is a powerful &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; module that allows you to easily interact with the &lt;a href=&quot;https://discord.com/developers/docs/intro&quot;&gt;Discord API&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Object-oriented&lt;/li&gt; 
 &lt;li&gt;Predictable abstractions&lt;/li&gt; 
 &lt;li&gt;Performant&lt;/li&gt; 
 &lt;li&gt;100% coverage of the Discord API&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Node.js 14.0.0 or newer is required.&lt;/strong&gt;&lt;br&gt; Ignore any warnings about unmet peer dependencies, as they&#39;re all optional.&lt;/p&gt; 
&lt;p&gt;Without voice support: &lt;code&gt;npm install discord.js&lt;/code&gt;&lt;br&gt; With voice support (&lt;a href=&quot;https://www.npmjs.com/package/@discordjs/opus&quot;&gt;@discordjs/opus&lt;/a&gt;): &lt;code&gt;npm install discord.js @discordjs/opus&lt;/code&gt;&lt;br&gt; With voice support (&lt;a href=&quot;https://www.npmjs.com/package/opusscript&quot;&gt;opusscript&lt;/a&gt;): &lt;code&gt;npm install discord.js opusscript&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Audio engines&lt;/h3&gt; 
&lt;p&gt;The preferred audio engine is @discordjs/opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose @discordjs/opus. Using opusscript is only recommended for development environments where @discordjs/opus is tough to get working. For production bots, using @discordjs/opus should be considered a necessity, especially if they&#39;re going to be running on multiple servers.&lt;/p&gt; 
&lt;h3&gt;Optional packages&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/zlib-sync&quot;&gt;zlib-sync&lt;/a&gt; for WebSocket data compression and inflation (&lt;code&gt;npm install zlib-sync&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/discord/erlpack&quot;&gt;erlpack&lt;/a&gt; for significantly faster WebSocket data (de)serialisation (&lt;code&gt;npm install discord/erlpack&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;One of the following packages can be installed for faster voice packet encryption and decryption: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/sodium&quot;&gt;sodium&lt;/a&gt; (&lt;code&gt;npm install sodium&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/libsodium-wrappers&quot;&gt;libsodium.js&lt;/a&gt; (&lt;code&gt;npm install libsodium-wrappers&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/bufferutil&quot;&gt;bufferutil&lt;/a&gt; for a much faster WebSocket connection (&lt;code&gt;npm install bufferutil&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/utf-8-validate&quot;&gt;utf-8-validate&lt;/a&gt; in combination with &lt;code&gt;bufferutil&lt;/code&gt; for much faster WebSocket processing (&lt;code&gt;npm install utf-8-validate&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { Client, Intents } = require(&#39;discord.js&#39;);
const client = new Client({ intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] });

client.on(&#39;ready&#39;, () =&amp;gt; {
  console.log(`Logged in as ${client.user.tag}!`);
});

client.on(&#39;message&#39;, msg =&amp;gt; {
  if (msg.content === &#39;ping&#39;) {
    msg.channel.send(&#39;pong&#39;);
  }
});

client.login(&#39;token&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.js.org/&quot;&gt;Website&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/website&quot;&gt;source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.js.org/#/docs/main/master/general/welcome&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discordjs.guide/&quot;&gt;Guide&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/guide&quot;&gt;source&lt;/a&gt;) - this is still for stable&lt;br&gt; See also the &lt;a href=&quot;https://discordjs.guide/additional-info/changes-in-v12.html&quot;&gt;Update Guide&lt;/a&gt;, including updated and removed items in the library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/bRCvFy9&quot;&gt;Discord.js Discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/discord-api&quot;&gt;Discord API Discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/discordjs/discord.js&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/discord.js&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discordapi.com/unofficial/libs.html&quot;&gt;Related libraries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/discord-rpc&quot;&gt;RPC&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/RPC&quot;&gt;source&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before creating an issue, please ensure that it hasn&#39;t already been reported/suggested, and double-check the &lt;a href=&quot;https://discord.js.org/#/docs&quot;&gt;documentation&lt;/a&gt;.&lt;br&gt; See &lt;a href=&quot;https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md&quot;&gt;the contribution guide&lt;/a&gt; if you&#39;d like to submit a PR.&lt;/p&gt; 
&lt;h2&gt;Help&lt;/h2&gt; 
&lt;p&gt;If you don&#39;t understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don&#39;t hesitate to join our official &lt;a href=&quot;https://discord.gg/bRCvFy9&quot;&gt;Discord.js Server&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GUI/covid-vaccine-spotter</title>
      <link>https://github.com/GUI/covid-vaccine-spotter</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;COVID-19 Vaccine Spotter&lt;/h1&gt; 
&lt;p&gt;A tool to help you track down COVID-19 vaccine appointment openings at your state&#39;s pharmacies. The code behind https://www.vaccinespotter.org.&lt;/p&gt; 
&lt;h2&gt;UI Development Setup&lt;/h2&gt; 
&lt;p&gt;Requirements:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js 14+&lt;/li&gt; 
 &lt;li&gt;Yarn&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This process is clunky right now, so my apologies.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/GUI/covid-vaccine-spotter.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install dependencies (inside the repo): &lt;code&gt;yarn install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Fetch data from the &lt;a href=&quot;https://www.vaccinespotter.org/api/&quot;&gt;API&lt;/a&gt; for the website to run: &lt;code&gt;yarn setup&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;To run the development server for the website: &lt;code&gt;yarn dev&lt;/code&gt;. The development site should then be available at http://localhost:3000/.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;DB and Backend Development Setup&lt;/h2&gt; 
&lt;p&gt;docker-compose is used to bring up a local postgres DB. Then an image runs to bootstrap the database with states and postal codes. Finally, as an example of a backend task running, a container runs the &lt;code&gt;refresh-website&lt;/code&gt; task.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker-compose build
docker-compose up
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run additional tasks, you can use &lt;code&gt;docker-compose run&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;docker-compose run --rm --no-deps task_runner bin/refresh-cvs
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Very Beta API&lt;/h2&gt; 
&lt;p&gt;All of the data being collected is published as JSON files here: https://www.vaccinespotter.org/api/&lt;/p&gt; 
&lt;p&gt;Subscribe to this discussion for any announcement of API changes: https://github.com/GUI/covid-vaccine-spotter/discussions/27&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/GUI/covid-vaccine-spotter/main/LICENSE.txt&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rauenzi/BetterDiscordApp</title>
      <link>https://github.com/rauenzi/BetterDiscordApp</link>
      <description>&lt;p&gt;Better Discord enhances Discord desktop app with new features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BetterDiscord &lt;a href=&quot;https://travis-ci.com/rauenzi/BetterDiscordApp&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/com/rauenzi/BetterDiscordApp.svg?style=flat-square&amp;amp;branch=stable&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/rauenzi/BetterDiscordApp/context:javascript&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/grade/javascript/g/rauenzi/BetterDiscordApp.svg?style=flat-square&quot; alt=&quot;Language Grade&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/BetterDiscord/Installer/latest/total?style=flat-square&quot; alt=&quot;GitHub Releases&quot;&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://patreon.com/Zerebos&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Fshieldsio-patreon.herokuapp.com%2FZerebos&amp;amp;style=flat-square&quot; alt=&quot;Patreon&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://paypal.me/ZackRauen&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Paypal-Donate!-%2300457C.svg?logo=paypal&amp;amp;style=flat-square&quot; alt=&quot;Paypal&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;BetterDiscord is a client modification for Discord. This allows you to add plugins and themes to your personal copy of Discord. BetterDiscord also adds a number of other features out of the box.&lt;/p&gt; 
&lt;h1&gt;Installation&lt;/h1&gt; 
&lt;h2&gt;Auto Installers&lt;/h2&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;p&gt;Grab the &lt;code&gt;exe&lt;/code&gt; file from &lt;a href=&quot;https://github.com/BetterDiscord/Installer/releases/latest/download/BetterDiscord-Windows.exe&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;macOS/OS X&lt;/h3&gt; 
&lt;p&gt;Grab the &lt;code&gt;zip&lt;/code&gt; file from &lt;a href=&quot;https://github.com/BetterDiscord/Installer/releases/latest/download/BetterDiscord-Mac.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Linux&lt;/h3&gt; 
&lt;p&gt;Grab the &lt;code&gt;AppImage&lt;/code&gt; file from &lt;a href=&quot;https://github.com/BetterDiscord/Installer/releases/latest/download/BetterDiscord-Linux.AppImage&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Manual Installation&lt;/h2&gt; 
&lt;p&gt;For normal users, installing via the installers makes the most sense. However when wanting to either develop BetterDiscord, or when the installers do not work, this option can be used.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;: &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; 12.x+ and the package manager &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone this repository &lt;code&gt;git clone https://github.com/rauenzi/BetterDiscordApp.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install dependencies with &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Build both the Injector and Renderer bundles with &lt;code&gt;npm run build&lt;/code&gt; this will create a &lt;code&gt;injector.js&lt;/code&gt;, &lt;code&gt;preload.js&lt;/code&gt;, and &lt;code&gt;renderer.js&lt;/code&gt; in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/li&gt; 
 &lt;li&gt;Run the inject script to inject the local files into your Discord client (&lt;code&gt;npm run inject&lt;/code&gt;). Alternately install it to non-stable using &lt;code&gt;npm run inject canary&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;FAQ&lt;/h1&gt; 
&lt;h3&gt;What is this?&lt;/h3&gt; 
&lt;p&gt;This is a client modification for Discord. It allows you to add plugins and themes to your client. Plugins can add functionality and useful features. Themes can completely change the look and feel of Discord.&lt;/p&gt; 
&lt;p&gt;BD has some other built-in features such as Emotes from Twitch, FFZ, and BBTV, as well as an in-client server browser.&lt;/p&gt; 
&lt;h3&gt;Where can I get plugins and themes?&lt;/h3&gt; 
&lt;p&gt;In our support servers we have channels with lists of 
 &lt;!-- raw HTML omitted --&gt;official
 &lt;!-- raw HTML omitted --&gt; plugins and themes. Please note we do not have an official listing on a website and are &lt;strong&gt;not affiliated with any of those websites&lt;/strong&gt;. However &lt;a href=&quot;https://betterdiscordlibrary.com/&quot;&gt;BetterDiscordLibrary&lt;/a&gt; is generally trustworthy.&lt;/p&gt; 
&lt;h3&gt;Support Servers?&lt;/h3&gt; 
&lt;p&gt;There are two: &lt;a href=&quot;https://discord.gg/0Tmfo5ZbORCRqbAd&quot;&gt;The main server&lt;/a&gt;, and &lt;a href=&quot;https://discord.gg/2HScm8j&quot;&gt;the backup&lt;/a&gt;.&lt;/p&gt; 
&lt;h1&gt;Supporters&lt;/h1&gt; 
&lt;p&gt;These people have all subscribed to the &lt;code&gt;True Supporter&lt;/code&gt; tier on Patreon to support me.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Bandagers&lt;/h1&gt; 
&lt;p&gt;These people have all subscribed to the &lt;code&gt;Bandager&lt;/code&gt; tier on Patreon to support me.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Donors&lt;/h1&gt; 
&lt;p&gt;These people have either donated or subscribed to the most basic patron tier to support me.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>fei-protocol/fei-protocol-core</title>
      <link>https://github.com/fei-protocol/fei-protocol-core</link>
      <description>&lt;p&gt;Smart contract code for Fei Protocol&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fei Protocol ·&lt;/h1&gt; 
&lt;p&gt;Smart contract code for Fei Protocol and the FEI stablecoin&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://docs.fei.money&quot;&gt;docs&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Fei Protocol is under &lt;a href=&quot;https://github.com/fei-protocol/fei-protocol-core/tree/7160dda163d45e6d6c7092ef021c365e0031a71f/LICENSE.md&quot;&gt;the AGPL v3 license&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pixeltris/TwitchAdSolutions</title>
      <link>https://github.com/pixeltris/TwitchAdSolutions</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TwitchAdSolutions&lt;/h1&gt; 
&lt;p&gt;This repo aims to provide multiple solutions for blocking Twitch ads.&lt;/p&gt; 
&lt;h2&gt;Recommendations&lt;/h2&gt; 
&lt;p&gt;M3U8 proxies (or full proxies / VPNs) are currently the most reliable way of avoiding ads. More proxy hosts would be ideal (see &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/issues/8&quot;&gt;#8&lt;/a&gt;).&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;There currently aren&#39;t any public proxies. &lt;code&gt;Twitch AdBlock&lt;/code&gt; was taken down on March 31 (see &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/issues/22&quot;&gt;#22&lt;/a&gt;).&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Alternatively:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;notify-strip&lt;/code&gt; is ok-ish.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Alternate Player for Twitch.tv&lt;/code&gt; consistently updates with new ad-blocking methods.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ttv_adEraser&lt;/code&gt; somewhat fixes the purple screen issue of &lt;code&gt;ttv-ublock&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;ttv-tools&lt;/code&gt; (firefox) has nice features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Current solutions&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;These solutions generally aren&#39;t compatible with other Twitch ad blockers. e.g. &lt;code&gt;ttv-ublock&lt;/code&gt; will break some of these.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;If you want a perfect solution, please use&lt;/strong&gt; &lt;code&gt;Twitch AdBlock&lt;/code&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;notify-strip (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-strip/notify-strip-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-strip/notify-strip.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;The same as &lt;code&gt;strip&lt;/code&gt;, but notifies Twitch that ads were &quot;watched&quot; (reduces preroll ad frequency).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;notify-reload (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-reload/notify-reload-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-reload/notify-reload.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Notifies that ads were watched, then reloads the player.&lt;/li&gt; 
   &lt;li&gt;Repeats this until no ads &lt;strong&gt;(which may never happen ~ infinite reload)&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;You should expect 3-10 player reloads (give or take). Once successful you shouldn&#39;t see preroll ads for a while on any stream (10+ minutes?).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;strip (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/strip/strip-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/strip/strip.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Ad segments are replaced by low resolution stream segments (on a m3u8 level).&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;TODO: Fix midrolls issues (stream freezes for several seconds / potentially longer low res than needed).&lt;/em&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;NOTE: Removing segments doesn&#39;t notify Twitch that ads were watched (aka more served ads).&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;low-res (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/low-res/low-res-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/low-res/low-res.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;No ads.&lt;/li&gt; 
   &lt;li&gt;The stream is 480p for the duration of the stream.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;mute-black (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/mute-black/mute-black-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/mute-black/mute-black.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Ads are muted / blacked out for the duration of the ad.&lt;/li&gt; 
   &lt;li&gt;You might see tiny bits of the ad.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;video-swap (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/video-swap/video-swap-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/video-swap/video-swap.user.js&quot;&gt;userscript&lt;/a&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;Ads are replaced by a low resolution stream for the duration of the ad.&lt;/li&gt; 
   &lt;li&gt;Similar to &lt;code&gt;strip&lt;/code&gt;, but skips closer to 20 seconds when switching to the live stream (TODO: low latency support).&lt;/li&gt; 
   &lt;li&gt;You might see tiny bits of the ad.&lt;/li&gt; 
   &lt;li&gt;Audio controls wont work whilst the ad is playing.&lt;/li&gt; 
   &lt;li&gt;&lt;em&gt;There are various UX/UI issues with this script which need to be addressed.&lt;/em&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;~~proxy-m3u8 (&lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/proxy-m3u8/proxy-m3u8-ublock-origin.js&quot;&gt;ublock&lt;/a&gt; / &lt;a href=&quot;https://github.com/pixeltris/TwitchAdSolutions/raw/master/proxy-m3u8/proxy-m3u8.user.js&quot;&gt;userscript&lt;/a&gt;)~~ &lt;strong&gt;(proxy currently points to a dead url)&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Uses a proxy server to fetch an ad-free stream.&lt;/li&gt; 
   &lt;li&gt;Currently only the initial m3u8 is proxied, so there shouldn&#39;t be any additional latency.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Assumes the proxy server acts in good faith and maintains a good uptime.&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;The following renamed/deprecated scripts will be removed from the master branch on &lt;code&gt;1st March 2021&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;dyn&lt;/code&gt; renamed to &lt;code&gt;strip&lt;/code&gt; as this better reflects the functionality (strips ad segments).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dyn-skip&lt;/code&gt; removed as it no longer works.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dyn-skip-midroll&lt;/code&gt; renamed to &lt;code&gt;notify-reload&lt;/code&gt; as the original name has lost its meaning.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dyn-skip-midroll-alt&lt;/code&gt; renamed to &lt;code&gt;notify-strip&lt;/code&gt; as the original name has lost its meaning.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dyn-video-swap&lt;/code&gt; renamed to &lt;code&gt;video-swap&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Applying a solution (uBlock Origin)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Navigate to the uBlock Origin Dashboard (the extension options)&lt;/li&gt; 
 &lt;li&gt;Under the &lt;code&gt;My filters&lt;/code&gt; tab add &lt;code&gt;twitch.tv##+js(twitch-videoad)&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Under the &lt;code&gt;Settings&lt;/code&gt; tab, enable &lt;code&gt;I am an advanced user&lt;/code&gt;, then click the cog that appears. Modify the value of &lt;code&gt;userResourcesLocation&lt;/code&gt; from &lt;code&gt;unset&lt;/code&gt; to the full url of the solution you wish to use (if a url is already in use, add a space after the existing url). e.g. &lt;code&gt;userResourcesLocation https://github.com/pixeltris/TwitchAdSolutions/raw/master/notify-strip/notify-strip-ublock-origin.js&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;To ensure uBlock Origin loads the script I recommend that you disable/enable the uBlock Origin extension (or restart your browser).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Applying a solution (userscript)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Viewing one of the userscript files should prompt the given script to be added.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other solutions / projects&lt;/h2&gt; 
&lt;p&gt;For a more detailed description of the following please refer to &lt;a href=&quot;https://raw.githubusercontent.com/pixeltris/TwitchAdSolutions/master/other-solutions.md&quot;&gt;this&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://github.com/odensc/ttv-ublock (extension - purple screen may display every 10-15 mins)&lt;/li&gt; 
 &lt;li&gt;https://github.com/Nerixyz/ttv-tools (Firefox extension)&lt;/li&gt; 
 &lt;li&gt;https://github.com/LeonHeidelbach/ttv_adEraser (extension)&lt;/li&gt; 
 &lt;li&gt;https://github.com/instance01/Twitch-HLS-AdBlock (extension)&lt;/li&gt; 
 &lt;li&gt;https://github.com/Wilkolicious/twitchAdSkip (UserScript + FrankerFaceZ)&lt;/li&gt; 
 &lt;li&gt;https://gist.github.com/simple-hacker/ddd81964b3e8bca47e0aead5ad19a707 (UserScript + FrankerFaceZ(optional))&lt;/li&gt; 
 &lt;li&gt;https://greasyfork.org/en/scripts/415412-twitch-refresh-on-advert/code (UserScript + FrankerFaceZ(optional))&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/bhplkbgoehhhddaoolmakpocnenplmhf&quot;&gt;Alternate Player for Twitch.tv&lt;/a&gt; - &lt;a href=&quot;https://robwu.nl/crxviewer/?crx=bhplkbgoehhhddaoolmakpocnenplmhf&amp;amp;qf=player.js&quot;&gt;code&lt;/a&gt; (extension)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://github.com/streamlink/streamlink (desktop application)&lt;/li&gt; 
 &lt;li&gt;https://github.com/nopbreak/TwitchMod (android app)&lt;/li&gt; 
 &lt;li&gt;https://twitchls.com/ (external site - purple screen may display every 10-15 mins)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reddit.com/r/Twitch/comments/kisdsy/i_did_a_little_test_regarding_ads_on_twitch_and/&quot;&gt;Use a VPN targeting a region without ads&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;NOTE/TODO&lt;/h2&gt; 
&lt;p&gt;NOTE: Many of these solutions could do with improvements.&lt;br&gt; TODO: Test midroll ads.&lt;br&gt; TODO: More testing in general.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MichMich/MagicMirror</title>
      <link>https://github.com/MichMich/MagicMirror</link>
      <description>&lt;p&gt;MagicMirror² is an open source modular smart mirror platform. With a growing list of installable modules, the MagicMirror² allows you to convert your hallway or bathroom mirror into your personal assistant.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MichMich/MagicMirror/master/.github/header.png&quot; alt=&quot;MagicMirror²: The open source modular smart mirror platform. &quot;&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;strong&gt;MagicMirror²&lt;/strong&gt; is an open source modular smart mirror platform. With a growing list of installable modules, the &lt;strong&gt;MagicMirror²&lt;/strong&gt; allows you to convert your hallway or bathroom mirror into your personal assistant. &lt;strong&gt;MagicMirror²&lt;/strong&gt; is built by the creator of &lt;a href=&quot;https://michaelteeuw.nl/tagged/magicmirror&quot;&gt;the original MagicMirror&lt;/a&gt; with the incredible help of a &lt;a href=&quot;https://github.com/MichMich/MagicMirror/graphs/contributors&quot;&gt;growing community of contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;MagicMirror² focuses on a modular plugin system and uses &lt;a href=&quot;https://www.electronjs.org/&quot;&gt;Electron&lt;/a&gt; as an application wrapper. So no more web server or browser installs necessary!&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;For the full documentation including &lt;strong&gt;&lt;a href=&quot;https://docs.magicmirror.builders/getting-started/installation.html&quot;&gt;installation instructions&lt;/a&gt;&lt;/strong&gt;, please visit our dedicated documentation website: &lt;a href=&quot;https://docs.magicmirror.builders&quot;&gt;https://docs.magicmirror.builders&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;https://magicmirror.builders&quot;&gt;https://magicmirror.builders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Documentation: &lt;a href=&quot;https://docs.magicmirror.builders&quot;&gt;https://docs.magicmirror.builders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Forum: &lt;a href=&quot;https://forum.magicmirror.builders&quot;&gt;https://forum.magicmirror.builders&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Discord: &lt;a href=&quot;https://discord.gg/J5BAtvx&quot;&gt;https://discord.gg/J5BAtvx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Blog: &lt;a href=&quot;https://michaelteeuw.nl/tagged/magicmirror&quot;&gt;https://michaelteeuw.nl/tagged/magicmirror&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Donations: &lt;a href=&quot;https://magicmirror.builders/#donate&quot;&gt;https://magicmirror.builders/#donate&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing Guidelines&lt;/h2&gt; 
&lt;p&gt;Contributions of all kinds are welcome, not only in the form of code but also with regards to&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;bug reports&lt;/li&gt; 
 &lt;li&gt;documentation&lt;/li&gt; 
 &lt;li&gt;translations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For the full contribution guidelines, check out: &lt;a href=&quot;https://docs.magicmirror.builders/getting-started/contributing.html&quot;&gt;https://docs.magicmirror.builders/getting-started/contributing.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Enjoying MagicMirror? Consider a donation!&lt;/h2&gt; 
&lt;p&gt;MagicMirror² is opensource and free. That doesn&#39;t mean we don&#39;t need any money.&lt;/p&gt; 
&lt;p&gt;Please consider a donation to help us cover the ongoing costs like webservers and email services. If we receive enough donations we might even be able to free up some working hours and spend some extra time improving the MagicMirror² core.&lt;/p&gt; 
&lt;p&gt;To donate, please follow &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=G5D8E9MR5DTD2&amp;amp;source=url&quot;&gt;this&lt;/a&gt; link.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>zhp8341/flink-streaming-platform-web</title>
      <link>https://github.com/zhp8341/flink-streaming-platform-web</link>
      <description>&lt;p&gt;基于flink-sql的实时流计算web平台&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;国内文章备用地址（因为github上面 图片效果可能看不到，原因你懂的 哈哈）&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;https://xie.infoq.cn/article/1af0cb75be056fea788e6c86b&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;github地址&lt;/strong&gt; https://github.com/zhp8341/flink-streaming-platform-web&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;国内gitee 地址&lt;/strong&gt; https://gitee.com/zhuhuipei/flink-streaming-platform-web&lt;/p&gt; 
&lt;h2&gt;一、简介&lt;/h2&gt; 
&lt;p&gt;flink-streaming-platform-web系统是基于&lt;a href=&quot;https://flink.apache.org&quot;&gt;Apache Flink&lt;/a&gt; 封装的一个可视化的、轻量级的flink web客户端系统，用户只需在web 界面进行sql配置就能完成流计算任务。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;主要功能&lt;/strong&gt;:包含任务配置、启/停任务、告警、日志等功能，支持sql语法提示，格式化、sql语句校验。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;:减少开发、降低成本 完全实现sql化 流计算任务。&lt;/p&gt; 
&lt;h3&gt;1、主要功能&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;[1] 任务支持单流 、双流、 单流与维表等。&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[2] 支持本地模式、yarn-per模式、STANDALONE模式。&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[3] 支持catalog、hive。&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[4] 支持自定义udf、连接器等,完全兼容官方连接器。&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[5] 支持sql的在线开发，语法提示，格式化。&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[6] 支持钉钉告警、自定义回调告警、自动拉起任务。&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[7] 支持自定义Jar提交任务。&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[8] 支持多版本flink版本（需要用户编译对应flink版本）。&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;[9] 支持自动、手动savepoint备份，并且从savepoint恢复任务。&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;目前flink版本已经升级到1.12&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;如果您觉得还不错请在右上角点一下star 谢谢 🙏 大家的支持是开源最大动力&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;2、效果及源码文档&lt;/h3&gt; 
&lt;p&gt;1、 &lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/img.md&quot;&gt;点击查看WEB页面功能显示效果&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2、 &lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/source.md&quot;&gt;源码讲解文档&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;二、环境搭建及安装&lt;/h2&gt; 
&lt;p&gt;1、 &lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/img.md&quot;&gt;Flink 和 flink-streaming-platform-web 安装部署&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;三、功能介绍&lt;/h2&gt; 
&lt;h3&gt;3.1 配置操作&lt;/h3&gt; 
&lt;p&gt;1、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/manual-sql.md&quot;&gt;sql任务配置&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/manual-jar.md&quot;&gt;jar任务配置&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;3.2 sql配置demo&lt;/h3&gt; 
&lt;p&gt;1、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/sql_demo/demo_1.md&quot;&gt;demo1 单流kafka写入mysqld 参考 &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;2、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/sql_demo/demo_2.md&quot;&gt;demo2 双流kafka写入mysql 参考&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;3、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/sql_demo/demo_3.md&quot;&gt;demo3 kafka和mysql维表实时关联写入mysql 参考&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;4、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/sql_demo/demo_4.md&quot;&gt;demo4 滚动窗口 &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;5、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/sql_demo/demo_5.md&quot;&gt;demo5 滑动窗口&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;6、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/sql_demo/demo_6.md&quot;&gt;demo6 JDBC CDC的使用示例&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;7、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/sql_demo/demo_datagen.md&quot;&gt;demo7 datagen简介&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;8、&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/catalog.md&quot;&gt;catalog 使用示例&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;3.2 hello-word demo&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;请使用下面的sql进行环境测试 用于新用户跑一个hello word 对平台有个感知的认识&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;
  CREATE TABLE source_table (
  f0 INT,
  f1 INT,
  f2 STRING
 ) WITH (
  &#39;connector&#39; = &#39;datagen&#39;,
  &#39;rows-per-second&#39;=&#39;5&#39;
 );
  
  
 CREATE TABLE print_table (
  f0 INT,
  f1 INT,
  f2 STRING
 ) WITH (
  &#39;connector&#39; = &#39;print&#39;
 );
  
  
  insert into print_table select f0,f1,f2 from source_table;
 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;官方相关连接器下载&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;请移步 https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/&lt;/p&gt; 
&lt;h2&gt;四、支持flink sql官方语法&lt;/h2&gt; 
&lt;p&gt;| 支持的sql语法 | | -------- | | INSERT INTO |&lt;br&gt; | INSERT OVERWRITE |&lt;br&gt; | CREATE TABLE |&lt;br&gt; | CREATE FUNCTION |&lt;br&gt; | CREATE VIEW |&lt;br&gt; | USE CATALOG |&lt;br&gt; | DROP |&lt;br&gt; | ALTER |&lt;br&gt; | SHOW CATALOGS |&lt;br&gt; | SHOW DATABASES |&lt;br&gt; | SHOW TABLES |&lt;br&gt; | SHOW FUNCTIONS |&lt;br&gt; | CREATE CATALOG |&lt;br&gt; | SET |&lt;br&gt; | SELECT (不支持) |&lt;/p&gt; 
&lt;h2&gt;五、其他&lt;/h2&gt; 
&lt;p&gt;1、由于hadoop集群环境不一样可能导致部署出现困难,整个搭建比较耗时.&lt;/p&gt; 
&lt;p&gt;2、由于es 、hbase等版本不一样可能需要下载源码重新选择对应版本 源码地址 &lt;a href=&quot;https://github.com/zhp8341/flink-streaming-platform-web&quot;&gt;https://github.com/zhp8341/flink-streaming-platform-web&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;交流和解答&lt;/p&gt; 
&lt;p&gt;钉钉 http://img.ccblog.cn/flink/dd2.png&lt;/p&gt; 
&lt;p&gt;微信二维码 http://img.ccblog.cn/flink/wx2.png&lt;/p&gt; 
&lt;p&gt;完全按照flink1.12的连接器相关的配置详见&lt;/p&gt; 
&lt;p&gt;https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/&lt;/p&gt; 
&lt;p&gt;如果需要使用到连接器请去官方下载 如：kafka 连接器 https://ci.apache.org/projects/flink/flink-docs-release-1.12/dev/table/connectors/kafka.html&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;第一种下载连接器后直接放到 flink/lib/目录下就可以使用了&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;1、该方案存在jar冲突可能，特别是连接器多了以后
2、在非yarn模式下每次新增jar需要重启flink集群服务器
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;第二种放到http的服务下填写到三方地址&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;公司内部建议放到内网的某个http服务
http://ccblog.cn/jars/flink-connector-jdbc_2.11-1.12.0.jar
http://ccblog.cn/jars/flink-sql-connector-kafka_2.11-1.12.0.jar
http://ccblog.cn/jars/flink-streaming-udf.jar
http://ccblog.cn/jars/mysql-connector-java-5.1.25.jar
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;http://img.ccblog.cn/flink/9.png&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt; 
&lt;p&gt;多个url使用换行&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;自定义连接器打包的时候需要打成shade 并且解决jar的冲突&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;个人建议使用第二种方式，每个任务之间jar独立，如果把所有连接器放到lib 可能会和其他任务的jar冲突&lt;/strong&gt; &lt;strong&gt;公用的可以放到flink/lib目录里面 如：mysql驱动 kafka连接器等&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;六、问题&lt;/h2&gt; 
&lt;p&gt;1、 &lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/question.md&quot;&gt;可能遇到的问题和解决方案&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;七、RoadMap&lt;/h2&gt; 
&lt;p&gt;1、 支持除官方以外的连接器 如：阿里云的sls&lt;/p&gt; 
&lt;p&gt;2、 任务告警自动拉起 (完成)&lt;/p&gt; 
&lt;p&gt;3、 支持Application模式&lt;/p&gt; 
&lt;p&gt;4、 完善文档 （持续过程）&lt;/p&gt; 
&lt;p&gt;5、 支持sql预校验，编写sql的时候语法提示等友好的用户体验(完成)&lt;/p&gt; 
&lt;p&gt;6、 checkpoint支持rocksDB (完成)&lt;/p&gt; 
&lt;p&gt;7、 支持jar模式提交任务 (完成)&lt;/p&gt; 
&lt;h2&gt;八、源码编译&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zhp8341/flink-streaming-platform-web/master/docs/compile.md&quot;&gt;根据自己的flink版本重新编译web客户端&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;九、联系方式&lt;/h2&gt; 
&lt;p&gt;钉钉 &lt;a href=&quot;http://img.ccblog.cn/flink/dd2.png&quot;&gt;钉钉二维码&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;http://img.ccblog.cn/flink/dd2.png&lt;/p&gt; 
&lt;p&gt;微信二维码 http://img.ccblog.cn/flink/wx2.png&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://img.ccblog.cn/flink/wx2.png&quot;&gt;微信二维码&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;十、捐赠&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://img.ccblog.cn/jz/zfb.jpg&quot;&gt;点击打开支付宝捐赠&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://img.ccblog.cn/jz/wxzf.jpg&quot;&gt;点击打开微信捐赠&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>inertiajs/inertia</title>
      <link>https://github.com/inertiajs/inertia</link>
      <description>&lt;p&gt;Inertia.js lets you quickly build modern single-page React, Vue and Svelte apps using classic server-side routing and controllers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://inertiajs.com/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/inertiajs/inertia/master/.github/LOGO.png&quot; alt=&quot;Inertia.js&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Inertia.js lets you quickly build modern single-page React, Vue and Svelte apps using classic server-side routing and controllers. Find full documentation at &lt;a href=&quot;https://inertiajs.com/&quot;&gt;inertiajs.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you&#39;re interested in contributing to Inertia.js, please read our &lt;a href=&quot;https://github.com/inertiajs/inertia/blob/master/.github/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;A huge thanks to all &lt;a href=&quot;https://inertiajs.com/sponsors&quot;&gt;our sponsors&lt;/a&gt; who help push Inertia.js development forward! In particular, we&#39;d like to say a special thank you to our gold sponsors:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://brook.io/&quot;&gt;Brook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://ploi.io/&quot;&gt;Ploi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forge.laravel.com/&quot;&gt;Forge&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.activitysource.com/&quot;&gt;ActivitySource&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.aryeo.com/&quot;&gt;Aryeo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.indigit.pt/en&quot;&gt;Indigit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://scoutapm.com/?utm_campaign=community_inertisjs_2021_q1&amp;amp;utm_medium=github-sponsorship&amp;amp;utm_source=inertisjs&quot;&gt;Scout APM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://contestkit.com/&quot;&gt;ContestKit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;d like to become a sponsor, please &lt;a href=&quot;https://inertiajs.com/sponsors&quot;&gt;see here&lt;/a&gt; for more information. 💜&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>academicpages/academicpages.github.io</title>
      <link>https://github.com/academicpages/academicpages.github.io</link>
      <description>&lt;p&gt;Github Pages template for academic personal websites, forked from mmistakes/minimal-mistakes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;A Github Pages template for academic websites. This was forked (then detached) by &lt;a href=&quot;https://github.com/staeiou&quot;&gt;Stuart Geiger&lt;/a&gt; from the &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes Jekyll Theme&lt;/a&gt;, which is © 2016 Michael Rose and released under the MIT License. See LICENSE.md.&lt;/p&gt; 
&lt;p&gt;I think I&#39;ve got things running smoothly and fixed some major bugs, but feel free to file issues or make pull requests if you want to improve the generic template / theme.&lt;/p&gt; 
&lt;h3&gt;Note: if you are using this repo and now get a notification about a security vulnerability, delete the Gemfile.lock file.&lt;/h3&gt; 
&lt;h1&gt;Instructions&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;Register a GitHub account if you don&#39;t have one and confirm your e-mail (required!)&lt;/li&gt; 
 &lt;li&gt;Fork &lt;a href=&quot;https://github.com/academicpages/academicpages.github.io&quot;&gt;this repository&lt;/a&gt; by clicking the &quot;fork&quot; button in the top right.&lt;/li&gt; 
 &lt;li&gt;Go to the repository&#39;s settings (rightmost item in the tabs that start with &quot;Code&quot;, should be below &quot;Unwatch&quot;). Rename the repository &quot;[your GitHub username].github.io&quot;, which will also be your website&#39;s URL.&lt;/li&gt; 
 &lt;li&gt;Set site-wide configuration and create content &amp;amp; metadata (see below -- also see &lt;a href=&quot;http://archive.is/3TPas&quot;&gt;this set of diffs&lt;/a&gt; showing what files were changed to set up &lt;a href=&quot;https://getorg-testacct.github.io&quot;&gt;an example site&lt;/a&gt; for a user with the username &quot;getorg-testacct&quot;)&lt;/li&gt; 
 &lt;li&gt;Upload any files (like PDFs, .zip files, etc.) to the files/ directory. They will appear at https://[your GitHub username].github.io/files/example.pdf.&lt;/li&gt; 
 &lt;li&gt;Check status by going to the repository settings, in the &quot;GitHub pages&quot; section&lt;/li&gt; 
 &lt;li&gt;(Optional) Use the Jupyter notebooks or python scripts in the &lt;code&gt;markdown_generator&lt;/code&gt; folder to generate markdown files for publications and talks from a TSV file.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;See more info at https://academicpages.github.io/&lt;/p&gt; 
&lt;h2&gt;To run locally (not on GitHub Pages, to serve on your own computer)&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Clone the repository and made updates as detailed above&lt;/li&gt; 
 &lt;li&gt;Make sure you have ruby-dev, bundler, and nodejs installed: &lt;code&gt;sudo apt install ruby-dev ruby-bundler nodejs&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bundle clean&lt;/code&gt; to clean up the directory (no need to run &lt;code&gt;--force&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bundle install&lt;/code&gt; to install ruby dependencies. If you get errors, delete Gemfile.lock and try again.&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;bundle exec jekyll liveserve&lt;/code&gt; to generate the HTML and serve it from &lt;code&gt;localhost:4000&lt;/code&gt; the local server will automatically rebuild and refresh the pages on change.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Changelog -- bugfixes and enhancements&lt;/h1&gt; 
&lt;p&gt;There is one logistical issue with a ready-to-fork template theme like academic pages that makes it a little tricky to get bug fixes and updates to the core theme. If you fork this repository, customize it, then pull again, you&#39;ll probably get merge conflicts. If you want to save your various .yml configuration files and markdown files, you can delete the repository and fork it again. Or you can manually patch.&lt;/p&gt; 
&lt;p&gt;To support this, all changes to the underlying code appear as a closed issue with the tag &#39;code change&#39; -- get the list &lt;a href=&quot;https://github.com/academicpages/academicpages.github.io/issues?q=is%3Aclosed%20is%3Aissue%20label%3A%22code%20change%22%20&quot;&gt;here&lt;/a&gt;. Each issue thread includes a comment linking to the single commit or a diff across multiple commits, so those with forked repositories can easily identify what they need to patch.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vercel/next.js</title>
      <link>https://github.com/vercel/next.js</link>
      <description>&lt;p&gt;The React Framework&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit 
 &lt;!-- raw HTML omitted --&gt;https://nextjs.org/learn
 &lt;!-- raw HTML omitted --&gt; to get started with Next.js.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://nextjs.org/docs&quot;&gt;https://nextjs.org/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; 
&lt;h2&gt;Who is using Next.js?&lt;/h2&gt; 
&lt;p&gt;Next.js is used by the world&#39;s leading companies. Check out the &lt;a href=&quot;https://nextjs.org/showcase&quot;&gt;Next.js Showcase&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The Next.js community can be found on &lt;a href=&quot;https://github.com/vercel/next.js/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; 
&lt;p&gt;To chat with other community members you can join the &lt;a href=&quot;https://nextjs.org/discord&quot;&gt;Next.js Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/vercel/next.js/blob/canary/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; applies to all Next.js community channels.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/vercel/next.js/canary/contributing.md&quot;&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tim Neutkens (&lt;a href=&quot;https://twitter.com/timneutkens&quot;&gt;@timneutkens&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/timneutkens&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Naoyuki Kanezawa (&lt;a href=&quot;https://twitter.com/nkzawa&quot;&gt;@nkzawa&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/nkzawa&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Guillermo Rauch (&lt;a href=&quot;https://twitter.com/rauchg&quot;&gt;@rauchg&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/rauchg&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Arunoda Susiripala (&lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;@arunoda&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Tony Kovanen (&lt;a href=&quot;https://twitter.com/tonykovanen&quot;&gt;@tonykovanen&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Dan Zajdband (&lt;a href=&quot;https://twitter.com/impronunciable&quot;&gt;@impronunciable&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>expressjs/express</title>
      <link>https://github.com/expressjs/express</link>
      <description>&lt;p&gt;Fast, unopinionated, minimalist web framework for node.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;http://expressjs.com/&quot;&gt;&lt;img src=&quot;https://i.cloudup.com/zfY6lL7eFa-3000x3000.png&quot; alt=&quot;Express Logo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Fast, unopinionated, minimalist web framework for &lt;a href=&quot;http://nodejs.org&quot;&gt;node&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/express&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/express.svg&quot; alt=&quot;NPM Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmcharts.com/compare/express?minimal=true&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/express.svg&quot; alt=&quot;NPM Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/expressjs/express&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/expressjs/express/master.svg?label=linux&quot; alt=&quot;Linux Build&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/dougwilson/express&quot;&gt;&lt;img src=&quot;https://img.shields.io/appveyor/ci/dougwilson/express/master.svg?label=windows&quot; alt=&quot;Windows Build&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/expressjs/express?branch=master&quot;&gt;&lt;img src=&quot;https://img.shields.io/coveralls/expressjs/express/master.svg&quot; alt=&quot;Test Coverage&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const express = require(&#39;express&#39;)
const app = express()

app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Hello World&#39;)
})

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;This is a &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; module available through the &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm registry&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before installing, &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;download and install Node.js&lt;/a&gt;. Node.js 0.10 or higher is required.&lt;/p&gt; 
&lt;p&gt;If this is a brand new project, make sure to create a &lt;code&gt;package.json&lt;/code&gt; first with the &lt;a href=&quot;https://docs.npmjs.com/creating-a-package-json-file&quot;&gt;&lt;code&gt;npm init&lt;/code&gt; command&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Installation is done using the &lt;a href=&quot;https://docs.npmjs.com/getting-started/installing-npm-packages-locally&quot;&gt;&lt;code&gt;npm install&lt;/code&gt; command&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install express
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Follow &lt;a href=&quot;http://expressjs.com/en/starter/installing.html&quot;&gt;our installing guide&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Robust routing&lt;/li&gt; 
 &lt;li&gt;Focus on high performance&lt;/li&gt; 
 &lt;li&gt;Super-high test coverage&lt;/li&gt; 
 &lt;li&gt;HTTP helpers (redirection, caching, etc)&lt;/li&gt; 
 &lt;li&gt;View system supporting 14+ template engines&lt;/li&gt; 
 &lt;li&gt;Content negotiation&lt;/li&gt; 
 &lt;li&gt;Executable for generating applications quickly&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Docs &amp;amp; Community&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://expressjs.com/&quot;&gt;Website and Documentation&lt;/a&gt; - [&lt;a href=&quot;https://github.com/expressjs/expressjs.com&quot;&gt;website repo&lt;/a&gt;]&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://webchat.freenode.net/?channels=express&quot;&gt;#express&lt;/a&gt; on freenode IRC&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/expressjs&quot;&gt;GitHub Organization&lt;/a&gt; for Official Middleware &amp;amp; Modules&lt;/li&gt; 
 &lt;li&gt;Visit the &lt;a href=&quot;https://github.com/expressjs/express/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://groups.google.com/group/express-js&quot;&gt;Google Group&lt;/a&gt; for discussion&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/expressjs/express&quot;&gt;Gitter&lt;/a&gt; for support and discussion&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;PROTIP&lt;/strong&gt; Be sure to read &lt;a href=&quot;https://github.com/expressjs/express/wiki/Migrating-from-3.x-to-4.x&quot;&gt;Migrating from 3.x to 4.x&lt;/a&gt; as well as &lt;a href=&quot;https://github.com/expressjs/express/wiki/New-features-in-4.x&quot;&gt;New features in 4.x&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Security Issues&lt;/h3&gt; 
&lt;p&gt;If you discover a security vulnerability in Express, please see &lt;a href=&quot;https://raw.githubusercontent.com/expressjs/express/master/Security.md&quot;&gt;Security Policies and Procedures&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;The quickest way to get started with express is to utilize the executable &lt;a href=&quot;https://github.com/expressjs/generator&quot;&gt;&lt;code&gt;express(1)&lt;/code&gt;&lt;/a&gt; to generate an application as shown below:&lt;/p&gt; 
&lt;p&gt;Install the executable. The executable&#39;s major version will match Express&#39;s:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install -g express-generator@4
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Create the app:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ express /tmp/foo &amp;amp;&amp;amp; cd /tmp/foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start the server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;View the website at: http://localhost:3000&lt;/p&gt; 
&lt;h2&gt;Philosophy&lt;/h2&gt; 
&lt;p&gt;The Express philosophy is to provide small, robust tooling for HTTP servers, making it a great solution for single page applications, websites, hybrids, or public HTTP APIs.&lt;/p&gt; 
&lt;p&gt;Express does not force you to use any specific ORM or template engine. With support for over 14 template engines via &lt;a href=&quot;https://github.com/tj/consolidate.js&quot;&gt;Consolidate.js&lt;/a&gt;, you can quickly craft your perfect framework.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;To view the examples, clone the Express repo and install the dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git clone git://github.com/expressjs/express.git --depth 1
$ cd express
$ npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then run whichever example you want:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node examples/content-negotiation
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;To run the test suite, first install the dependencies, then run &lt;code&gt;npm test&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install
$ npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/expressjs/express/master/Contributing.md&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;People&lt;/h2&gt; 
&lt;p&gt;The original author of Express is &lt;a href=&quot;https://github.com/tj&quot;&gt;TJ Holowaychuk&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The current lead maintainer is &lt;a href=&quot;https://github.com/dougwilson&quot;&gt;Douglas Christopher Wilson&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/expressjs/express/graphs/contributors&quot;&gt;List of all contributors&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/expressjs/express/master/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Momo707577045/m3u8-downloader</title>
      <link>https://github.com/Momo707577045/m3u8-downloader</link>
      <description>&lt;p&gt;m3u8 视频在线提取工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;m3u8 视频在线提取工具(&lt;a href=&quot;https://github.com/Momo707577045/m3u8-downloader/blob/master/README-EN.md&quot;&gt;English version&lt;/a&gt;)&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/01.jpeg&quot; alt=&quot;界面&quot;&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;http://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html&quot;&gt;工具在线地址&lt;/a&gt;，推荐使用 chrome 浏览器。&lt;/h3&gt; 
&lt;h3&gt;研发背景&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;m3u8视频格式简介&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;m3u8视频格式原理：将完整的视频拆分成多个 .ts 视频碎片，.m3u8 文件详细记录每个视频片段的地址。&lt;/li&gt; 
   &lt;li&gt;视频播放时，会先读取 .m3u8 文件，再逐个下载播放 .ts 视频片段。&lt;/li&gt; 
   &lt;li&gt;常用于直播业务，也常用该方法规避视频窃取的风险。加大视频窃取难度。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;鉴于 m3u8 以上特点，无法简单通过视频链接下载，需使用特定下载软件。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;但软件下载过程繁琐，试错成本高。&lt;/li&gt; 
   &lt;li&gt;使用软件的下载情况不稳定，常出现浏览器正常播放，但软件下载速度慢，甚至无法正常下载的情况。&lt;/li&gt; 
   &lt;li&gt;软件被编译打包，无法了解内部运行机制，不清楚里面到底发生了什么。&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;基于以上原因，开发了本工具。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/09.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;工具特点&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;无需安装，打开网页即可用。&lt;/li&gt; 
 &lt;li&gt;强制下载现有片段，无需等待完整视频下载完成。&lt;/li&gt; 
 &lt;li&gt;操作直观，精确到视频碎片的操作。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;功能说明&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/02.jpeg&quot; alt=&quot;&quot;&gt; 【解析下载】输入 m3u8 链接，点击下载视频。 【跨域复制代码】当资源出现跨域限制时，点击复制页面代码，在视频页面的控制台输入。将工具注入到视频页面中，解决跨域问题。 【重新下载错误片段】当部分视频片段下载失败时，点击该按钮，重新下载错误片段。 【强制下载现有片段】将已经下载好的视频片段强制整合下载。可以提前观看已经下载的片段。该操作不影响当前下载进程。 【片段Icon】对应每一个 .ts 视频片段的下载情况。「灰色」：待下载，「绿色」：下载成功，「红色」：下载失败。点击红色 Icon 可重新下载对应错误片段。&lt;/p&gt; 
&lt;h3&gt;使用说明&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;打开视频目标网页，鼠标右键「检查」，或者「开发者工具」，或者按下键盘的「F12」键&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;找到 network，输入 m3u8，过滤 m3u8 文件。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;刷新页面，监听 m3u8 文件。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/03.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;找到目标m3u8文件，查看文件内容，是否符合格式。&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;如下为索引文件，不是真正的视频 m3u8 文件&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/04.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;一般内容有许多 ts 字眼的文件才是我们需要的视频 m3u8 文件。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/05.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;拷贝这个 m3u8 文件的链接。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/06.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;打开工具页面，输入链接，点击「解析下载」。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;出现片段 Icon，则证明操作成功，耐心等待视频下载。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;片段全部下载成功，将触发浏览器自动下载，下载整合后的完整视频。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果有片段下载失败，则点击对应片段，或点击「重新下载错误片段」按钮。重新下载错误片段。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/08.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;异常情况&lt;/h3&gt; 
&lt;p&gt;【无法下载，没有显示片段Icon】&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;一般由于跨域造成。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;点击「跨域复制代码」按钮。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;打开视频目标网页的「开发者工具界面」，找到 console 栏。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/10.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;粘贴刚刚复制的内容，回车。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;滚动页面到底部，发现工具显示在底部。然后在注入的工具中正常使用。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/11.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;【下载后的视频资源不可看】&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;网站对视频源进行了加密操作。不同的视频网站有不同的算法操作。无法通用处理。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;一般网站不会有这种情况。爱奇艺，腾讯等大视频网站才会有该安全措施。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/12.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;实现思路&lt;/h3&gt; 
&lt;p&gt;【下载并解析 m3u8 文件】&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;直接通过 ajax 的 get 请求 m3u8 文件。得到 m3u8 文件的内容字符串。读取字符串进行解析。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;需要注意的是，m3u8 文件不是 json 格式，不能将 dataType 设置为 json。 【队列下载 ts 视频片段】&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;同样使用 ajax 的 get 请求视频碎片，一个 ajax 请求一个 ts 视频碎片，但关键点在于，下载的是视频文件，属于二进制数据，需要将 responseType 请求头设置为 arraybuffer。&lt;code&gt;xhr.responseType = &#39;arraybuffer&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用队列下载，是因为视频碎片太多，不可能一次性请求全部。需要分批下载。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;同时由于浏览器同源并发限制，视频同时请求数不能过多。本工具设置为并发下载数为 10。 【组合 ts 视频片段】&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;看似很难，但其实使用 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Blob&quot;&gt;Blob&lt;/a&gt; 对象即可将多个 ts 文件整合成一个文件。new Blob()，传入 ts 文件数组。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;这里有个小细节需要注意，需要在 new Blob 的第二个参数中设置文件的 MIME 类型，否则将默认为 txt 文件。 &lt;code&gt;const fileBlob = new Blob(fileDataList, { type: &#39;video/MP2T&#39; }) &lt;/code&gt; 【自动下载】&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;下载，当然先要获得文件链接，即刚生成的 Blob 文件链接。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;使用 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL&quot;&gt;URL.createObjectURL&lt;/a&gt;，即可得到浏览器内存中，Blob 的文件链接。&lt;code&gt;URL.createObjectURL(fileBlob)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;最后，使用 a 标签的 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a&quot;&gt;a.download&lt;/a&gt; 属性，将 a 标签设置为下载功能。主动调用 click 事件&lt;code&gt;a.click()&lt;/code&gt;。完成文件自动下载。&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/13.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;核心代码&lt;/h3&gt; 
&lt;p&gt;【整合及自动下载】&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    // 下载整合后的TS文件
    downloadFile(fileDataList, fileName, fileType) {
      this.tips = &#39;ts 碎片整合中，请留意浏览器下载&#39;
      const fileBlob = new Blob(fileDataList, { type: &#39;video/MP2T&#39; }) // 创建一个Blob对象，并设置文件的 MIME 类型
      const a = document.createElement(&#39;a&#39;)
      a.download = fileName + &#39;.&#39; + fileType
      a.href = URL.createObjectURL(fileBlob)
      a.style.display = &#39;none&#39;
      document.body.appendChild(a)
      a.click()
      a.remove()
    },
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;是的，涉及新知识点的部分只有上面一小段，其他的都是 JS 的基础应用。&lt;/p&gt; 
&lt;p&gt;除了 vue.js 文件，本工具代码均包含在 index.html 文件里面。包括换行，一共 540 行代码，其中 css 样式 190 行，html 标签 30 行。JS 逻辑代码 300 行。&lt;/p&gt; 
&lt;p&gt;罗列这些代码量只是想表明，本工具运用到的都只是 JS 的常见知识，并不复杂。鼓励大家多尝试阅读源码，其实看源码并没有想象中的那么困难。&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/Momo707577045/m3u8-downloader/blob/master/index.html&quot;&gt;源码链接&lt;/a&gt;&lt;/h3&gt; 
&lt;h3&gt;AES 常规解密功能&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;借助「aes-decryptor.js」，该文件来至 &lt;a href=&quot;https://github.com/video-dev/hls.js&quot;&gt;hls.js&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MP4 转码功能&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;借助「mux-mp4.js」，源码来至 &lt;a href=&quot;https://github.com/videojs/mux.js#mp4&quot;&gt;mux.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;但 mux.js 存在一个无法计算视频长度的 bug&lt;/li&gt; 
 &lt;li&gt;本人已 fork 该项目，并修复该 bug，修复后的项目&lt;a href=&quot;https://github.com/Momo707577045/mux.js&quot;&gt;链接在这里&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;第三方接入&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;在 url 中通过 source 参数拼接下载地址即可，如：&lt;code&gt;http://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html?source=http://1257120875.vod2.myqcloud.com/0ef121cdvodtransgzp1257120875/3055695e5285890780828799271/v.f230.m3u8&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;系统将自动解析该参数&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/16.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;油猴插件&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/15.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;「跳转下载」即新开页面，打开本工具页面，自动携带并解析目标地址&lt;/li&gt; 
 &lt;li&gt;「注入下载」为解决跨域而生，直接将代码注入到当前视频网站，进行视频下载&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://greasyfork.org/zh-CN/scripts/422237-m3u8-downloader&quot;&gt;插件地址点这里&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;不一定能用，但可以试试。不行就用回老方法试试。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;完结撒花，感谢阅读。&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;http://upyun.luckly-mjw.cn/Assets/m3u8-download/14.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Asabeneh/30-Days-Of-React</title>
      <link>https://github.com/Asabeneh/30-Days-Of-React</link>
      <description>&lt;p&gt;30 Days of React challenge is a step by step guide to learn React in 30 days. It requires HTML, CSS, and JavaScript knowledge. You should be comfortable with JavaScript before you start to React. If you are not comfortable with JavaScript check out 30DaysOfJavaScript. This is a continuation of 30 Days Of JS. This challenge may take up to 100 day…&lt;/p&gt;&lt;hr&gt;&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;Author: 
 &lt;!-- raw HTML omitted --&gt;Asabeneh Yetayeh
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; October, 2020
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;| # Day | Topics | | ----- | :-------------------------------------------------------------------------------------------------------------------------: | | 00 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&quot;&gt;Introduction&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&quot;&gt;How to Use Repo&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&quot;&gt;Requirements&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&quot;&gt;Setup&lt;/a&gt; | | 01 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;JavaScript Refresher&lt;/a&gt; | | 02 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/02_Day_Introduction_to_React/02_introduction_to_react.md&quot;&gt;Getting Started React&lt;/a&gt; | | 03 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/03_Day_Setting_Up/03_setting_up.md&quot;&gt;Setting Up&lt;/a&gt; | | 04 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/04_Day_Components/04_components.md&quot;&gt;Components&lt;/a&gt; | | 05 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/05_Day_Props/05_props.md&quot;&gt;Props&lt;/a&gt; | | 06 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/06_Day_Map_List_Keys/06_map_list_keys.md&quot;&gt;List, Map and Keys&lt;/a&gt; | | 07 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/07_Day_Class_Components/07_class_components.md&quot;&gt;Class Components&lt;/a&gt; | | 08 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/08_Day_States/08_states.md&quot;&gt;States&lt;/a&gt; | | 09 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/09_Day_Conditional_Rendering/09_conditional_rendering.md&quot;&gt;Conditional Rendering&lt;/a&gt; | | 10 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/10_React_Project_Folder_Structure/10_react_project_folder_structure.md&quot;&gt;React Project Folder Structure&lt;/a&gt; | | 11 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/11_Day_Events/11_events.md&quot;&gt;Events&lt;/a&gt; | | 12 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/12_Day_Forms/12_forms.md&quot;&gt;Forms&lt;/a&gt; | | 13 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/13_Day_Controlled_Versus_Uncontrolled_Input/13_uncontrolled_input.md&quot;&gt;Controlled and Uncontrolled Component&lt;/a&gt; | | 14 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/14_Day_Component_Life_Cycles/14_component_life_cycles.md&quot;&gt;Component Life Cycles&lt;/a&gt; | | 15 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/15_Third_Party_Packages/15_third_party_packages.md&quot;&gt;Third Party Packages&lt;/a&gt; | | 16 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/16_Higher_Order_Component/16_higher_order_component.md&quot;&gt;Higher Order Components&lt;/a&gt; | | 17 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/17_React_Router/17_react_router.md&quot;&gt;React Router&lt;/a&gt; | | 18 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/18_Fetch_And_Axios/18_fetch_axios.md&quot;&gt;Fetch versus Axios&lt;/a&gt; | | 19 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/19_projects/19_projects.md&quot;&gt;Projects&lt;/a&gt; | | 20 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/20_projects/20_projects.md&quot;&gt;Projects&lt;/a&gt; | | 21 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/21_Introducing_Hooks/21_introducing_hooks.md&quot;&gt;Hooks&lt;/a&gt; | | 22 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/22_Form_Using_Hooks/22_form_using_hooks.md&quot;&gt;Forms Using Hook&lt;/a&gt; | | 23 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/23_Fetching_Data_Using_Hooks/23_fetching_data_using_hooks.md&quot;&gt;Fetching Data Using Hooks&lt;/a&gt; | | 24 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/24_projects/24_projects.md&quot;&gt;Project using Hooks&lt;/a&gt; | | 25 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/25_Custom_Hooks/25_custom_hooks.md&quot;&gt;Custom Hooks&lt;/a&gt; | | 26 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/26_Context/26_context.md&quot;&gt;Context&lt;/a&gt; | | 27 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/27_Ref/27_ref.md&quot;&gt;Ref&lt;/a&gt; | | 28 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/28_project/28_project.md&quot;&gt;project&lt;/a&gt; | | 29 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/29_explore/29_explore.md&quot;&gt;Explore&lt;/a&gt; | | 30 | &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/30_conclusions/30_conclusions.md&quot;&gt;Conclusions&lt;/a&gt; |&lt;/p&gt; 
&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&quot;&gt;How to Use Repo&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#star-and-fork-this-repo&quot;&gt;Star and Fork this Repo&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#clone-your-fork&quot;&gt;Clone your Fork&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#create-a-new-branch&quot;&gt;Create a New Branch&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#structure-exercise-solutions&quot;&gt;Structure Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#commit-exercise-solutions&quot;&gt;Commit Exercise Solutions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#update-your-fork-daily&quot;&gt;Update your Fork Daily&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&quot;&gt;Setup&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#install-nodejs&quot;&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#browser&quot;&gt;Browser&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-google-chrome&quot;&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#opening-google-chrome-console&quot;&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#writing-code-on-browser-console&quot;&gt;Writing Code on Browser Console&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog&quot;&gt;Console.log&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog-with-multiple-arguments&quot;&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#arithmetics&quot;&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#code-editor&quot;&gt;Code Editor&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-visual-studio-code&quot;&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-visual-studio-code&quot;&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of React programming challenge. In this challenge you will learn everything you need to use to develop a React application. In the end of the challenge you will get a 30DaysOfReact programming challenge completion certificate. In case you need help or if you would like to help others you may join the &lt;a href=&quot;https://t.me/thirtydaysofreact&quot;&gt;telegram group&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A 30DaysOfReact&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript and React developers. Welcome to 30 Days Of React. React is a JavaScript library. I enjoy using and teaching React and I hope you will do so too. In this step by step 30 Days React challenge, you will learn React which is one of most popular user interface JavaScript libraries. React can do everything that JavaScript can do. React can be used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt;. I believe you will learn quite a lot in the next 30 days and your programming and problem solving skills will also be improved significantly.&lt;/p&gt; 
&lt;p&gt;I will use conversational English and less jargons to write this challenge. The content will be continuously updated. If you find a typo or grammar mistakes don&#39;t be surprised because I don&#39;t do any proof read before I publish it. I would recommend you to focus on the main message of the challenge instead of the English and some minor mistakes. I really appreciate if you send me pull requests for improvement and remember to pull first from master before you send pull requests. Most of the images I have used in this challenge came from 30DaysOfJavaScript challenge therefore you may need to rename file names and folders 30DaysOfReact. If you are good at arrays, loops, functions, objects, functional programming, destructuring and spreading and class then you will be able to follow the challenge properly. Otherwise, I strongly recommend you to check &lt;a href=&quot;https://github.com/Asabeneh/30-Days-Of-JavaScript&quot;&gt;30DaysOfJavaScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Before you dive into this course, you may check the &lt;a href=&quot;https://t.me/thirtydaysofreact/992&quot;&gt;review&lt;/a&gt; of 30 Days Of React.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;To get along with the challenge you need to have the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Motivation&lt;/li&gt; 
 &lt;li&gt;A computer&lt;/li&gt; 
 &lt;li&gt;Internet&lt;/li&gt; 
 &lt;li&gt;A browser&lt;/li&gt; 
 &lt;li&gt;A code editor&lt;/li&gt; 
 &lt;li&gt;HTML, CSS and JavaScript intermediate level skill&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;How to Use Repo&lt;/h2&gt; 
&lt;h3&gt;Star and Fork this Repo&lt;/h3&gt; 
&lt;p&gt;Star this repo to support this work and Fork the repo to create your own copy to work from.&lt;/p&gt; 
&lt;h3&gt;Clone your Fork&lt;/h3&gt; 
&lt;p&gt;You should always work directly from your forked copy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# note that an `ssh` link is used here, but an `https` link will work the same
git clone git@github.com:username/30-Days-Of-React.git
cd 30-Days-Of-React
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Create a New Branch&lt;/h3&gt; 
&lt;p&gt;To complete daily exercises, my suggestion is to create a separate branch to house your exercise folder or any other changes you make. This will keep your master branch clean at all times, which means your master will always be similar to the original master.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout -b exercise-solutions # `-b` creates the branch if it does not exist
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Structure Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;In your new branch, you can use files/folders to structure your solutions to daily exercises&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir -p solutions/day-01 # `-p` helps create nested directories
touch solutions/day-01/level1.js # touch creates a file
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Commit Exercise Solutions&lt;/h3&gt; 
&lt;p&gt;Commit your solutions to your Fork&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git add solutions/day-01/level1.js
git commit -m &quot;chore: exercise level1 complete&quot;
git push origin exercise-solutions # branch `exercise-solutions` was created earlier
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update your Fork Daily&lt;/h3&gt; 
&lt;p&gt;This repo will be updated daily throughout the month. When a new day&#39;s content becomes available, you can update your forked copy with the steps below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# 1. switch to master branch
git checkout master
# 2. check if your local copy has a link to original `...Asabeneh/30-Days-Of-React.git`
git remote -v
# 3. if not, add a link to original, you can choose any name for the link or use `upstream`
git remote add upstream git@github.com:Asabeneh/30-Days-Of-React.git
# 4. check again to confirm link added
git remote -v
# 5. now you can fetch updates from original repo, assuming you named this `upstream`
git fetch upstream
# 6. merge the updates to your local master branch
git merge upstream/master master
# 7. push the merged updates to your Forked copy on GitHub
git push origin master
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note that the updates are only applied to the master branch. If you wish to update any other branch, repeat steps 6-7 with the branch name. See snippet below for &lt;code&gt;exercise-solutions&lt;/code&gt; branch&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git merge upstream/master exercise-solutions
git push origin exercise-solutions
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. In addition to that basic to intermediate level HTML, CSS and JS. If you have those, then you have everything to get started.&lt;/p&gt; 
&lt;h3&gt;Install Node.js&lt;/h3&gt; 
&lt;p&gt;You may not need node.js right now but you may need it for later. Install &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/download_node.png&quot; alt=&quot;Node download&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After downloading double click and install&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/install_node.png&quot; alt=&quot;Install node&quot;&gt;&lt;/p&gt; 
&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;asabeneh $ node -v
v12.14.0
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When making this tutorial I was using node version 12.14.0, but now the recommended version of node.js for download is 12.17.0.&lt;/p&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; 
&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; 
&lt;p&gt;Install &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;google chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/google_chrome.png&quot; alt=&quot;Google Chrome&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; 
&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_developer_tool.png&quot; alt=&quot;Opening chrome&quot;&gt;&lt;/p&gt; 
&lt;p&gt;To open the Chrome console using a keyboard shortcut. It is good to know the shortcut too as a JavaScript and React developer you will spend much time on a browser console and don&#39;t be lazy to open it during development.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Mac
Command+Option+J

Windows/Linux:
Ctl+Shift+J
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_chrome_console_shortcut.png&quot; alt=&quot;Opening console&quot;&gt;&lt;/p&gt; 
&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/js_code_on_chrome_console.png&quot; alt=&quot;write code on console&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; 
&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;Mac
Command+Option+I

Windows:
Ctl+Shift+I
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log&lt;/h5&gt; 
&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed &#39;Hello, World&#39; as input data or argument in the console.log() function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; 
&lt;p&gt;The &lt;strong&gt;console.log()&lt;/strong&gt; function can take multiple parameters separated by comma. The syntax looks like as follows:&lt;strong&gt;console.log(param1, param2, param3)&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/console_log_multipl_arguments.png&quot; alt=&quot;console log multiple arguments&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello&#39;, &#39;World&#39;, &#39;!&#39;)
console.log(&#39;HAPPY&#39;, &#39;NEW&#39;, &#39;YEAR&#39;, 2020)
console.log(&#39;Welcome&#39;, &#39;to&#39;, 30, &#39;Days&#39;, &#39;Of&#39;, &#39;JavaScript&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;console.log()&lt;/em&gt; can take multiple arguments. It is recommended to use as many console.log() prints to check what is happening in your code but don&#39;t keep all console.log() tests on your code forever. Make your life easy by keeping the browser console open.&lt;/p&gt; 
&lt;h5&gt;Comments&lt;/h5&gt; 
&lt;p&gt;We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code.In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this /* */ is also a comment.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;// This is the first comment&lt;br&gt; // This is the second comment&lt;br&gt; // I am a single line comment&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;/* This is a multiline comment&lt;br&gt; Multiline comments can take multiple lines&lt;br&gt; JavaScript is the language of the web&lt;br&gt; */&lt;/p&gt; 
&lt;h5&gt;Syntax&lt;/h5&gt; 
&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is &lt;em&gt;the structure of statements in a computer language.&lt;/em&gt; Programing languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/raising_syntax_error.png&quot; alt=&quot;Error&quot;&gt;&lt;/p&gt; 
&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
console.log(&#39;Hello, World!&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;console.log()&lt;/em&gt;. If we are printing text or string using &lt;em&gt;console.log()&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick quotes. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(&#39;Hello, World!&#39;)
console.log(&#39;Hello, World!&#39;)
console.log(`Hello, World!`)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Arithmetics&lt;/h4&gt; 
&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;console.log()&lt;/em&gt; on google chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. The console can directly take arguments without the &lt;strong&gt;&lt;em&gt;console.log()&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/arithmetic.png&quot; alt=&quot;Arithmetic&quot;&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(2 + 3) // Addition
console.log(3 - 2) // Subtraction
console.log(2 * 3) // Multiplication
console.log(3 / 2) // Division
console.log(3 % 2) // Modulus - finding remainder
console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Code Editor&lt;/h3&gt; 
&lt;p&gt;We can write our codes on the browser console, but it won&#39;t do for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; 
&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Visual studio code is a very popular open-source text editor. I would recommend to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode.png&quot; alt=&quot;Vscode&quot;&gt;&lt;/p&gt; 
&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; 
&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; 
&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode_ui.png&quot; alt=&quot;Vscode ui&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/adding_project_to_vscode.png&quot; alt=&quot;Vscode add project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_project_on_vscode.png&quot; alt=&quot;Vscode open project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/scripts_on_vscode.png&quot; alt=&quot;script file&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vsc_live_server.png&quot; alt=&quot;Installing Live Server&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/running_script.png&quot; alt=&quot;running script&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/launched_on_new_tab.png&quot; alt=&quot;coding running&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Congratulations! You have completed the setup you need to get started with React, but before we dive into React let&#39;s do a JavaScript refresher. If you are very comfortable with JavaScript you may skip day 1 JavaScript refresher. The JavaScript refresher section is vast and it may take more than one day. From my experience people usually get stuck in React because their JavaScript knowledge is very shallow therefore to fill that gap all the necessary JavaScript features which can be used in React are covered in the JavaScript refresher section. There are many exercises but you are not required to solve them. Click &lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/30-Days-Of-React/02_Day_Introduction_to_React/02_introduction_to_react.md&quot;&gt;here&lt;/a&gt; if you want skip JavaScript and jump directly into React.&lt;/p&gt; 
&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&quot;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>github/docs</title>
      <link>https://github.com/github/docs</link>
      <description>&lt;p&gt;The open-source repo for docs.github.com&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;GitHub Docs 
 &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt; 
&lt;p&gt;This repository contains the documentation website code and Markdown source files for &lt;a href=&quot;https://docs.github.com&quot;&gt;docs.github.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;GitHub&#39;s Docs team works on pre-production content in a private repo that regularly syncs with this public repo.&lt;/p&gt; 
&lt;p&gt;In this article:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/#readmes&quot;&gt;READMEs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;h3&gt;Start contributing right now:&lt;/h3&gt; 
&lt;p&gt;We accept a lot of &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/CONTRIBUTING.md/#types-of-contributions-memo&quot;&gt;different contributions&lt;/a&gt;, including some that don&#39;t require you to write a single line of code.&lt;/p&gt; 
&lt;h4&gt;Click &lt;strong&gt;make a contribution&lt;/strong&gt; from docs&lt;/h4&gt; 
&lt;p&gt;As you&#39;re using GitHub Docs, you may find something in an article that you&#39;d like to add to, update, or change. Click on &lt;strong&gt;make a contribution&lt;/strong&gt; to navigate directly to that article in the codebase, so that you can begin making your contribution.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;Open an issue&lt;/h4&gt; 
&lt;p&gt;If you&#39;ve found a problem, you can open an issue using a &lt;a href=&quot;https://github.com/github/docs/issues/new/choose&quot;&gt;template&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Solve an issue&lt;/h4&gt; 
&lt;p&gt;If you have a solution to one of the open issues, you will need to fork the repository and submit a pull request using the &lt;a href=&quot;https://github.com/github/docs/blob/main/CONTRIBUTING.md#pull-request-template&quot;&gt;template&lt;/a&gt; that is visible automatically in the pull request body. For more details about this process, please check out &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/CONTRIBUTING.md&quot;&gt;Getting Started with Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Join us in discussions&lt;/h4&gt; 
&lt;p&gt;We use GitHub Discussions to talk about all sorts of topics related to documentation and this site. For example: if you&#39;d like help troubleshooting a PR, have a great new idea, or want to share something amazing you&#39;ve learned in our docs, join us in &lt;a href=&quot;https://github.com/github/docs/discussions&quot;&gt;discussions&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;And that&#39;s it!&lt;/h4&gt; 
&lt;p&gt;That&#39;s how you can get started easily as a member of the GitHub Documentation community. :sparkles:&lt;/p&gt; 
&lt;p&gt;If you want to know more, or you&#39;re making a more complex contribution, check out &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/CONTRIBUTING.md&quot;&gt;Getting Started with Contributing&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There are a few more things to know when you&#39;re getting started with this repo:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;If you&#39;re having trouble with your GitHub account, contact &lt;a href=&quot;https://support.github.com/contact&quot;&gt;Support&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;We do not accept pull requests for translated content - see &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;READMEs&lt;/h2&gt; 
&lt;p&gt;In addition to the README you&#39;re reading right now, this repo includes other READMEs that describe the purpose of each subdirectory in more detail:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/content/README.md&quot;&gt;content/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/content/graphql/README.md&quot;&gt;content/graphql/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/content/rest/README.md&quot;&gt;content/rest/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/contributing/README.md&quot;&gt;contributing/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/data/README.md&quot;&gt;data/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/data/reusables/README.md&quot;&gt;data/reusables/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/data/variables/README.md&quot;&gt;data/variables/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/includes/liquid-tags/README.md&quot;&gt;includes/liquid-tags/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/includes/README.md&quot;&gt;includes/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/javascripts/README.md&quot;&gt;javascripts/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/layouts/README.md&quot;&gt;layouts/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/lib/liquid-tags/README.md&quot;&gt;lib/liquid-tags/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/middleware/README.md&quot;&gt;middleware/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/script/README.md&quot;&gt;script/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/stylesheets/README.md&quot;&gt;stylesheets/README.md&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/tests/README.md&quot;&gt;tests/README.md&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;The GitHub product documentation in the assets, content, and data folders are licensed under a &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/LICENSE&quot;&gt;CC-BY license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;All other code in this repository is licensed under a &lt;a href=&quot;https://raw.githubusercontent.com/github/docs/main/LICENSE-CODE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When using the GitHub logos, be sure to follow the &lt;a href=&quot;https://github.com/logos&quot;&gt;GitHub logo guidelines&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>socketio/socket.io</title>
      <link>https://github.com/socketio/socket.io</link>
      <description>&lt;p&gt;Realtime application framework (Node.JS server)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;socket.io&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://repl.it/github/socketio/socket.io&quot;&gt;&lt;img src=&quot;https://repl.it/badge/github/socketio/socket.io&quot; alt=&quot;Run on Repl.it&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/socketio/socket.io/master/#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/socketio/backers/badge.svg&quot; alt=&quot;Backers on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/socketio/socket.io/master/#sponsors&quot;&gt;&lt;img src=&quot;https://opencollective.com/socketio/sponsors/badge.svg&quot; alt=&quot;Sponsors on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/socketio/socket.io/actions&quot;&gt;&lt;img src=&quot;https://github.com/socketio/socket.io/workflows/CI/badge.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/socketio/socket.io&quot;&gt;&lt;img src=&quot;https://david-dm.org/socketio/socket.io.svg&quot; alt=&quot;Dependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/socketio/socket.io#info=devDependencies&quot;&gt;&lt;img src=&quot;https://david-dm.org/socketio/socket.io/dev-status.svg&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/socket.io&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/socket.io.svg&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/npm/dm/socket.io.svg?style=flat&quot; alt=&quot;Downloads&quot;&gt; &lt;a href=&quot;https://slackin-socketio.now.sh&quot;&gt;&lt;img src=&quot;https://slackin-socketio.now.sh/badge.svg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;Socket.IO enables real-time bidirectional event-based communication. It consists of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;a Node.js server (this repository)&lt;/li&gt; 
 &lt;li&gt;a &lt;a href=&quot;https://github.com/socketio/socket.io-client&quot;&gt;Javascript client library&lt;/a&gt; for the browser (or a Node.js client)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some implementations in other languages are also available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/socketio/socket.io-client-java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/socketio/socket.io-client-cpp&quot;&gt;C++&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/socketio/socket.io-client-swift&quot;&gt;Swift&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rikulo/socket.io-client-dart&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/miguelgrinberg/python-socketio&quot;&gt;Python&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Quobject/SocketIoClientDotNet&quot;&gt;.Net&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Its main features are:&lt;/p&gt; 
&lt;h4&gt;Reliability&lt;/h4&gt; 
&lt;p&gt;Connections are established even in the presence of:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;proxies and load balancers.&lt;/li&gt; 
 &lt;li&gt;personal firewall and antivirus software.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For this purpose, it relies on &lt;a href=&quot;https://github.com/socketio/engine.io&quot;&gt;Engine.IO&lt;/a&gt;, which first establishes a long-polling connection, then tries to upgrade to better transports that are &quot;tested&quot; on the side, like WebSocket. Please see the &lt;a href=&quot;https://github.com/socketio/engine.io#goals&quot;&gt;Goals&lt;/a&gt; section for more information.&lt;/p&gt; 
&lt;h4&gt;Auto-reconnection support&lt;/h4&gt; 
&lt;p&gt;Unless instructed otherwise a disconnected client will try to reconnect forever, until the server is available again. Please see the available reconnection options &lt;a href=&quot;https://socket.io/docs/v3/client-api/#new-Manager-url-options&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Disconnection detection&lt;/h4&gt; 
&lt;p&gt;A heartbeat mechanism is implemented at the Engine.IO level, allowing both the server and the client to know when the other one is not responding anymore.&lt;/p&gt; 
&lt;p&gt;That functionality is achieved with timers set on both the server and the client, with timeout values (the &lt;code&gt;pingInterval&lt;/code&gt; and &lt;code&gt;pingTimeout&lt;/code&gt; parameters) shared during the connection handshake. Those timers require any subsequent client calls to be directed to the same server, hence the &lt;code&gt;sticky-session&lt;/code&gt; requirement when using multiples nodes.&lt;/p&gt; 
&lt;h4&gt;Binary support&lt;/h4&gt; 
&lt;p&gt;Any serializable data structures can be emitted, including:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;ArrayBuffer&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Blob&quot;&gt;Blob&lt;/a&gt; in the browser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;ArrayBuffer&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;Buffer&lt;/a&gt; in Node.js&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Simple and convenient API&lt;/h4&gt; 
&lt;p&gt;Sample code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;io.on(&#39;connection&#39;, socket =&amp;gt; {
  socket.emit(&#39;request&#39;, /* … */); // emit an event to the socket
  io.emit(&#39;broadcast&#39;, /* … */); // emit an event to all connected sockets
  socket.on(&#39;reply&#39;, () =&amp;gt; { /* … */ }); // listen to the event
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Cross-browser&lt;/h4&gt; 
&lt;p&gt;Browser support is tested in Sauce Labs:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://saucelabs.com/u/socket&quot;&gt;&lt;img src=&quot;https://saucelabs.com/browser-matrix/socket.svg&quot; alt=&quot;Sauce Test Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Multiplexing support&lt;/h4&gt; 
&lt;p&gt;In order to create separation of concerns within your application (for example per module, or based on permissions), Socket.IO allows you to create several &lt;code&gt;Namespaces&lt;/code&gt;, which will act as separate communication channels but will share the same underlying connection.&lt;/p&gt; 
&lt;h4&gt;Room support&lt;/h4&gt; 
&lt;p&gt;Within each &lt;code&gt;Namespace&lt;/code&gt;, you can define arbitrary channels, called &lt;code&gt;Rooms&lt;/code&gt;, that sockets can join and leave. You can then broadcast to any given room, reaching every socket that has joined it.&lt;/p&gt; 
&lt;p&gt;This is a useful feature to send notifications to a group of users, or to a given user connected on several devices for example.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Socket.IO is not a WebSocket implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: the packet type, the namespace and the ack id when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server (like &lt;code&gt;ws://echo.websocket.org&lt;/code&gt;) either. Please see the protocol specification &lt;a href=&quot;https://github.com/socketio/socket.io-protocol&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;// with npm
npm install socket.io

// with yarn
yarn add socket.io
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How to use&lt;/h2&gt; 
&lt;p&gt;The following example attaches socket.io to a plain Node.JS HTTP server listening on port &lt;code&gt;3000&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const server = require(&#39;http&#39;).createServer();
const io = require(&#39;socket.io&#39;)(server);
io.on(&#39;connection&#39;, client =&amp;gt; {
  client.on(&#39;event&#39;, data =&amp;gt; { /* … */ });
  client.on(&#39;disconnect&#39;, () =&amp;gt; { /* … */ });
});
server.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Standalone&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const io = require(&#39;socket.io&#39;)();
io.on(&#39;connection&#39;, client =&amp;gt; { ... });
io.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;In conjunction with Express&lt;/h3&gt; 
&lt;p&gt;Starting with &lt;strong&gt;3.0&lt;/strong&gt;, express applications have become request handler functions that you pass to &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt; &lt;code&gt;Server&lt;/code&gt; instances. You need to pass the &lt;code&gt;Server&lt;/code&gt; to &lt;code&gt;socket.io&lt;/code&gt;, and not the express application function. Also make sure to call &lt;code&gt;.listen&lt;/code&gt; on the &lt;code&gt;server&lt;/code&gt;, not the &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const app = require(&#39;express&#39;)();
const server = require(&#39;http&#39;).createServer(app);
const io = require(&#39;socket.io&#39;)(server);
io.on(&#39;connection&#39;, () =&amp;gt; { /* … */ });
server.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;In conjunction with Koa&lt;/h3&gt; 
&lt;p&gt;Like Express.JS, Koa works by exposing an application as a request handler function, but only by calling the &lt;code&gt;callback&lt;/code&gt; method.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const app = require(&#39;koa&#39;)();
const server = require(&#39;http&#39;).createServer(app.callback());
const io = require(&#39;socket.io&#39;)(server);
io.on(&#39;connection&#39;, () =&amp;gt; { /* … */ });
server.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;In conjunction with Fastify&lt;/h3&gt; 
&lt;p&gt;To integrate Socket.io in your Fastify application you just need to register &lt;code&gt;fastify-socket.io&lt;/code&gt; plugin. It will create a &lt;code&gt;decorator&lt;/code&gt; called &lt;code&gt;io&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const app = require(&#39;fastify&#39;)();
app.register(require(&#39;fastify-socket.io&#39;));
app.io.on(&#39;connection&#39;, () =&amp;gt; { /* … */ });
app.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Please see the documentation &lt;a href=&quot;https://socket.io/docs/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The source code of the website can be found &lt;a href=&quot;https://github.com/socketio/socket.io-website&quot;&gt;here&lt;/a&gt;. Contributions are welcome!&lt;/p&gt; 
&lt;h2&gt;Debug / logging&lt;/h2&gt; 
&lt;p&gt;Socket.IO is powered by &lt;a href=&quot;https://github.com/visionmedia/debug&quot;&gt;debug&lt;/a&gt;. In order to see all the debug output, run your app with the environment variable &lt;code&gt;DEBUG&lt;/code&gt; including the desired scope.&lt;/p&gt; 
&lt;p&gt;To see the output from all of Socket.IO&#39;s debugging scopes you can use:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;DEBUG=socket.io* node myapp
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Testing&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This runs the &lt;code&gt;gulp&lt;/code&gt; task &lt;code&gt;test&lt;/code&gt;. By default the test will be run with the source code in &lt;code&gt;lib&lt;/code&gt; directory.&lt;/p&gt; 
&lt;p&gt;Set the environmental variable &lt;code&gt;TEST_VERSION&lt;/code&gt; to &lt;code&gt;compat&lt;/code&gt; to test the transpiled es5-compat version of the code.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;gulp&lt;/code&gt; task &lt;code&gt;test&lt;/code&gt; will always transpile the source code into es5 and export to &lt;code&gt;dist&lt;/code&gt; first before running the test.&lt;/p&gt; 
&lt;h2&gt;Backers&lt;/h2&gt; 
&lt;p&gt;Support us with a monthly donation and help us continue our activities. [&lt;a href=&quot;https://opencollective.com/socketio#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Become a sponsor and get your logo on our README on Github with a link to your site. [&lt;a href=&quot;https://opencollective.com/socketio#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/socketio/socket.io/master/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mengshukeji/Luckysheet</title>
      <link>https://github.com/mengshukeji/Luckysheet</link>
      <description>&lt;p&gt;Luckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/docs/.vuepress/public/img/logo_text.png&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/mengshukeji/Luckysheet?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/mengshukeji/Luckysheet.svg&quot; alt=&quot;Join the chat at https://gitter.im/mengshukeji/Luckysheet&quot;&gt;&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;English| &lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/README-zh.md&quot;&gt;简体中文&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;🚀Luckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;p&gt;| Source Code | Documentation | Demo | Plugins Demo | Forum | | ------ | -------- | ------ | ------ | ------ | | &lt;a href=&quot;https://github.com/mengshukeji/Luckysheet&quot;&gt;Github&lt;/a&gt;| &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/&quot;&gt;Online Documentation&lt;/a&gt; | &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDemo&quot;&gt;Online Demo&lt;/a&gt; / &lt;a href=&quot;http://luckysheet.lashuju.com/demo/&quot;&gt;Cooperative editing demo&lt;/a&gt; | &lt;a href=&quot;https://mengshukeji.github.io/LuckyexcelDemo/&quot;&gt;Import Excel Demo&lt;/a&gt; | &lt;a href=&quot;https://support.qq.com/product/288322&quot;&gt;Chinese Forum&lt;/a&gt; | | &lt;a href=&quot;https://gitee.com/mengshukeji/Luckysheet&quot;&gt;Gitee Mirror&lt;/a&gt;| &lt;a href=&quot;https://mengshukeji.gitee.io/LuckysheetDocs/&quot;&gt;Gitee Online Documentation&lt;/a&gt; | &lt;a href=&quot;https://mengshukeji.gitee.io/luckysheetdemo/&quot;&gt;Gitee Online Demo&lt;/a&gt; | &lt;a href=&quot;https://mengshukeji.gitee.io/luckyexceldemo/&quot;&gt;Gitee Import Excel Demo&lt;/a&gt; | &lt;a href=&quot;https://groups.google.com/g/luckysheet&quot;&gt;Google Group&lt;/a&gt; |&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/docs/.vuepress/public/img/LuckysheetDemo.gif&quot; alt=&quot;Demo&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/Luckyexcel&quot;&gt;Luckyexcel&lt;/a&gt;: Excel import and export library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/chartMix&quot;&gt;chartMix&lt;/a&gt;: Chart plugin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;p&gt;| Project | Description | |---------|-------------| | &lt;a href=&quot;https://github.com/mengshukeji/luckysheet-vue&quot;&gt;Luckysheet Vue&lt;/a&gt; | Luckysheet and Luckyexcel in a vue cli3 project | | &lt;a href=&quot;https://github.com/mengshukeji/luckysheet-react&quot;&gt;Luckysheet React&lt;/a&gt; | Luckysheet in a React project | | &lt;a href=&quot;https://github.com/mengshukeji/Luckyexcel-node&quot;&gt;Luckyexcel Node&lt;/a&gt; | Use Luckyexcel in koa2 | | &lt;a href=&quot;https://github.com/mengshukeji/LuckysheetServer&quot;&gt;Luckysheet Server&lt;/a&gt; | Java backend Luckysheet Server | | &lt;a href=&quot;https://github.com/mengshukeji/LuckysheetServerStarter&quot;&gt;Luckysheet Server Starter&lt;/a&gt; | LuckysheetServer docker deployment startup template |&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Formatting&lt;/strong&gt;: style, conditional formatting, text alignment and rotation, text truncation, overflow, automatic line wrapping, multiple data types, cell segmentation style&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cells&lt;/strong&gt;: drag and drop, fill handle, multiple selection, find and replace, location, merge cells, data verification&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Row &amp;amp; column&lt;/strong&gt;: hide, insert, delete rows or columns, freeze, and split text&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Operation&lt;/strong&gt;: undo, redo, copy, paste, cut, hot key, format painter, drag and drop selection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Formulas &amp;amp; Functions&lt;/strong&gt;: Built-in, remote and custom formulas&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tables&lt;/strong&gt;: filter, sort&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enhanced functions&lt;/strong&gt;: Pivot tables, charts, comments, cooperative editing, insert picture, matrix calculations, screenshots, copying to other formats, EXCEL import and export, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a more detailed feature list, please refer to: &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/#features&quot;&gt;Features&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;📖 Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Priority reading for new users: &lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/wiki/User-Guide&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For the tutorials, learning materials and supporting solutions provided by the community, please refer to: &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/resource.html&quot;&gt;Tutorials and Resources&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;📜 Changelog&lt;/h2&gt; 
&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;❗️ Issues&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/contribute.html#how-to-submit-issues&quot;&gt;Issue Reporting Checklist&lt;/a&gt; before opening an issue. Issues not conforming to the guidelines may be closed immediately.&lt;/p&gt; 
&lt;h2&gt;✅ TODO&lt;/h2&gt; 
&lt;p&gt;Managed with &lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/projects/1&quot;&gt;GitHub Projects&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;💪Contribution&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the&lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/contribute.html&quot;&gt; Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;First step&lt;/h3&gt; 
&lt;p&gt;Introduce dependencies through CDN&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/css/pluginsCss.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/plugins.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/css/luckysheet.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/assets/iconfont/iconfont.css&#39; /&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/js/plugin.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/luckysheet.umd.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Second step&lt;/h3&gt; 
&lt;p&gt;Specify a table container&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;luckysheet&quot; style=&quot;margin:0px;padding:0px;position:absolute;width:100%;height:100%;left: 0px;top: 0px;&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Third step&lt;/h3&gt; 
&lt;p&gt;Create a table&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    $(function () {
        //Configuration item
        var options = {
            container: &#39;luckysheet&#39; //luckysheet is the container id
        }
        luckysheet.create(options)
    })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; Version &amp;gt;= 6&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm install
npm install gulp -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Package&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Partner project&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ly525/luban-h5&quot;&gt;luban-h5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MrXujiang/h5-Dooring&quot;&gt;h5-Dooring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitee.com/monksoul/Furion&quot;&gt;Furion&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/discussions&quot;&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/mengshukeji/Luckysheet&quot;&gt;Gitter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/README-zh.md&quot;&gt;Chinese community&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;Luckysheet is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/about/sponsor.html#sponsors-list&quot;&gt;backers&lt;/a&gt;. If you&#39;d like to join them, please consider:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.patreon.com/mengshukeji&quot;&gt;Become a backer or sponsor on Patreon&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://opencollective.com/luckysheet&quot;&gt;Become a backer or sponsor on Open Collective&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;One-time donation via PayPal, WeChat or Alipay&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;| PayPal | WeChat | Alipay | |---|---|---| | &lt;a href=&quot;https://www.paypal.me/wbfsa&quot;&gt;Paypal Me&lt;/a&gt; | 
 &lt;!-- raw HTML omitted --&gt;| 
 &lt;!-- raw HTML omitted --&gt; |&lt;/p&gt; 
&lt;h3&gt;What&#39;s the difference between Patreon and OpenCollective?&lt;/h3&gt; 
&lt;p&gt;Funds donated via Patreon go directly to support mengshukeji&#39;s work on Luckysheet. Funds donated via OpenCollective are managed with transparent expenses and will be used for compensating work and expenses for core team members or sponsoring community events. Your name/logo will receive proper recognition and exposure by donating on either platform.&lt;/p&gt; 
&lt;h2&gt;Sponsors List&lt;/h2&gt; 
&lt;p&gt;(Sort by time)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;*勇 ¥ 30&lt;/li&gt; 
 &lt;li&gt;虚我 ¥ 200&lt;/li&gt; 
 &lt;li&gt;甜党 ¥ 50&lt;/li&gt; 
 &lt;li&gt;Alphabet(Google)-gcf ¥ 1&lt;/li&gt; 
 &lt;li&gt;**平 ¥ 100&lt;/li&gt; 
 &lt;li&gt;**东 ¥ 10&lt;/li&gt; 
 &lt;li&gt;debugger ¥ 20&lt;/li&gt; 
 &lt;li&gt;烦了烦 ¥ 10&lt;/li&gt; 
 &lt;li&gt;文顶顶 ¥ 200&lt;/li&gt; 
 &lt;li&gt;yangxshn ¥ 10&lt;/li&gt; 
 &lt;li&gt;爱乐 ¥ 100&lt;/li&gt; 
 &lt;li&gt;小李飞刀刀 ¥ 66&lt;/li&gt; 
 &lt;li&gt;张铭 ¥ 200&lt;/li&gt; 
 &lt;li&gt;曹治军 ¥ 1&lt;/li&gt; 
 &lt;li&gt;*特 ¥ 10&lt;/li&gt; 
 &lt;li&gt;**权 ¥ 9.9&lt;/li&gt; 
 &lt;li&gt;**sdmq ¥ 20&lt;/li&gt; 
 &lt;li&gt;*旭 ¥ 10&lt;/li&gt; 
 &lt;li&gt;Quentin ¥ 20&lt;/li&gt; 
 &lt;li&gt;周宇凡 ¥ 100&lt;/li&gt; 
 &lt;li&gt;*超 ¥ 10&lt;/li&gt; 
 &lt;li&gt;维宁 ¥ 100&lt;/li&gt; 
 &lt;li&gt;hyy ¥ 20&lt;/li&gt; 
 &lt;li&gt;雨亭寒江月 ¥ 50&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Authors and acknowledgment&lt;/h2&gt; 
&lt;h3&gt;Active Core Team Members&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wbfsa&quot;&gt;@wbfsa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iamxuchen800117&quot;&gt;@iamxuchen800117&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wpxp123456&quot;&gt;@wpxp123456&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tonytonychopper123&quot;&gt;@tonytonychopper123&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Dushusir&quot;&gt;@Dushusir&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weibo.com/u/3884623955&quot;&gt;@c19c19i&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zhangchen915&quot;&gt;@zhangchen915&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jerry-f&quot;&gt;@jerry-f&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/flowerField&quot;&gt;@flowerField&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Community Partners&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danielcai1987&quot;&gt;@danielcai1987&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qq6690876&quot;&gt;@qq6690876&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/javahuang&quot;&gt;@javahuang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TimerGang&quot;&gt;@TimerGang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gsw945&quot;&gt;@gsw945&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/swen-xiong&quot;&gt;@swen-xiong&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lzmch&quot;&gt;@lzmch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kdevilpf&quot;&gt;@kdevilpf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/WJWM0316&quot;&gt;@WJWM0316&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2020-present, mengshukeji&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cypress-io/cypress</title>
      <link>https://github.com/cypress-io/cypress</link>
      <description>&lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Cypress?&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/cypress&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/cypress.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Install Cypress for Mac, Linux, or Windows, then &lt;a href=&quot;https://docs.cypress.io/guides/getting-started/installing-cypress.html&quot;&gt;get started&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1271364/31740846-7bf607f0-b420-11e7-855f-41c996040d31.gif&quot; alt=&quot;installing-cli e1693232&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/CONTRIBUTING.md&quot;&gt;Contributing Guideline&lt;/a&gt; which explains repo organization, linting, testing, and other steps.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg&quot; alt=&quot;license&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;Let the world know your project is using Cypress.io to test with this cool badge&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.cypress.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg&quot; alt=&quot;Cypress.io&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>reactjs/server-components-demo</title>
      <link>https://github.com/reactjs/server-components-demo</link>
      <description>&lt;p&gt;Demo app of React Server Components.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Server Components Demo&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#what-is-this&quot;&gt;What is this?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#when-will-i-be-able-to-use-this&quot;&gt;When will I be able to use this?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#db-setup&quot;&gt;DB Setup&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#step-1-create-the-database&quot;&gt;Step 1. Create the Database&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#step-2-connect-to-the-database&quot;&gt;Step 2. Connect to the Database&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#step-3-run-the-seed-script&quot;&gt;Step 3. Run the seed script&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#notes-about-this-app&quot;&gt;Notes about this app&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#interesting-things-to-try&quot;&gt;Interesting things to try&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#built-by-a-z&quot;&gt;Built by (A-Z)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/reactjs/server-components-demo/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;What is this?&lt;/h2&gt; 
&lt;p&gt;This is a demo app built with Server Components, an experimental React feature. &lt;strong&gt;We strongly recommend &lt;a href=&quot;https://reactjs.org/server-components&quot;&gt;watching our talk introducing Server Components&lt;/a&gt; before exploring this demo.&lt;/strong&gt; The talk includes a walkthrough of the demo code and highlights key points of how Server Components work and what features they provide.&lt;/p&gt; 
&lt;h2&gt;When will I be able to use this?&lt;/h2&gt; 
&lt;p&gt;Server Components are an experimental feature and &lt;strong&gt;are not ready for adoption&lt;/strong&gt;. For now, we recommend experimenting with Server Components via this demo app. &lt;strong&gt;Use this in your projects at your own risk.&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;p&gt;You will need to have nodejs &amp;gt;=14.9.0 in order to run this demo. &lt;a href=&quot;https://nodejs.org/en/about/releases/&quot;&gt;Node 14 LTS&lt;/a&gt; is a good choice!&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install
npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(Or &lt;code&gt;npm run start:prod&lt;/code&gt; for a production build.)&lt;/p&gt; 
&lt;p&gt;Then open http://localhost:4000.&lt;/p&gt; 
&lt;p&gt;The app won&#39;t work until you set up the database, as described below.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;DB Setup&lt;/h2&gt; 
&lt;p&gt;This demo uses Postgres. First, follow its &lt;a href=&quot;https://wiki.postgresql.org/wiki/Detailed_installation_guides&quot;&gt;installation link&lt;/a&gt; for your platform.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can check out this &lt;a href=&quot;https://github.com/pomber/server-components-demo/&quot;&gt;fork&lt;/a&gt; which will let you run the demo app without needing a database. However, you won&#39;t be able to execute SQL queries (but fetch should still work). There is also &lt;a href=&quot;https://github.com/prisma/server-components-demo&quot;&gt;another fork&lt;/a&gt; that uses Prisma with SQLite, so it doesn&#39;t require additional setup.&lt;/p&gt; 
&lt;p&gt;The below example will set up the database for this app, assuming that you have a UNIX-like platform:&lt;/p&gt; 
&lt;h3&gt;Step 1. Create the Database&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;psql postgres

CREATE DATABASE notesapi;
CREATE ROLE notesadmin WITH LOGIN PASSWORD &#39;password&#39;;
ALTER ROLE notesadmin WITH SUPERUSER;
ALTER DATABASE notesapi OWNER TO notesadmin;
\q
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Step 2. Connect to the Database&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;psql -d postgres -U notesadmin;

\c notesapi

DROP TABLE IF EXISTS notes;
CREATE TABLE notes (
  id SERIAL PRIMARY KEY,
  created_at TIMESTAMP NOT NULL,
  updated_at TIMESTAMP NOT NULL,
  title TEXT,
  body TEXT
);

\q
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Step 3. Run the seed script&lt;/h3&gt; 
&lt;p&gt;Finally, run &lt;code&gt;npm run seed&lt;/code&gt; to populate some data.&lt;/p&gt; 
&lt;p&gt;And you&#39;re done!&lt;/p&gt; 
&lt;h2&gt;Notes about this app&lt;/h2&gt; 
&lt;p&gt;The demo is a note-taking app called &lt;strong&gt;React Notes&lt;/strong&gt;. It consists of a few major parts:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It uses a Webpack plugin (not defined in this repo) that allows us to only include client components in build artifacts&lt;/li&gt; 
 &lt;li&gt;An Express server that: 
  &lt;ul&gt; 
   &lt;li&gt;Serves API endpoints used in the app&lt;/li&gt; 
   &lt;li&gt;Renders Server Components into a special format that we can read on the client&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;A React app containing Server and Client components used to build React Notes&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;This demo is built on top of our Webpack plugin, but this is not how we envision using Server Components when they are stable. They are intended to be used in a framework that supports server rendering — for example, in Next.js. This is an early demo -- the real integration will be developed in the coming months. Learn more in the &lt;a href=&quot;https://reactjs.org/server-components&quot;&gt;announcement post&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Interesting things to try&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Expand note(s) by hovering over the note in the sidebar, and clicking the expand/collapse toggle. Next, create or delete a note. What happens to the expanded notes?&lt;/li&gt; 
 &lt;li&gt;Change a note&#39;s title while editing, and notice how editing an existing item animates in the sidebar. What happens if you edit a note in the middle of the list?&lt;/li&gt; 
 &lt;li&gt;Search for any title. With the search text still in the search input, create a new note with a title matching the search text. What happens?&lt;/li&gt; 
 &lt;li&gt;Search while on Slow 3G, observe the inline loading indicator.&lt;/li&gt; 
 &lt;li&gt;Switch between two notes back and forth. Observe we don&#39;t send new responses next time we switch them again.&lt;/li&gt; 
 &lt;li&gt;Uncomment the &lt;code&gt;fetch(&#39;http://localhost:4000/sleep/....&#39;)&lt;/code&gt; call in &lt;code&gt;Note.server.js&lt;/code&gt; or &lt;code&gt;NoteList.server.js&lt;/code&gt; to introduce an artificial delay and trigger Suspense. 
  &lt;ul&gt; 
   &lt;li&gt;If you only uncomment it in &lt;code&gt;Note.server.js&lt;/code&gt;, you&#39;ll see the fallback every time you open a note.&lt;/li&gt; 
   &lt;li&gt;If you only uncomment it in &lt;code&gt;NoteList.server.js&lt;/code&gt;, you&#39;ll see the list fallback on first page load.&lt;/li&gt; 
   &lt;li&gt;If you uncomment it in both, it won&#39;t be very interesting because we have nothing new to show until they both respond.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Add a new Server Component and place it above the search bar in &lt;code&gt;App.server.js&lt;/code&gt;. Import &lt;code&gt;db&lt;/code&gt; from &lt;code&gt;db.server&lt;/code&gt; and use &lt;code&gt;db.query()&lt;/code&gt; from it to get the number of notes. Oberserve what happens when you add or delete a note.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can watch a &lt;a href=&quot;https://youtu.be/La4agIEgoNg?t=600&quot;&gt;recorded walkthrough of all these demo points here&lt;/a&gt; (with timestamps).&lt;/p&gt; 
&lt;h2&gt;Built by (A-Z)&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/acdlite&quot;&gt;Andrew Clark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;Dan Abramov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/en_JS&quot;&gt;Joe Savona&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/sugarpirate_&quot;&gt;Lauren Tan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/sebmarkbage&quot;&gt;Sebastian Markbåge&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.tatestrickland.com/&quot;&gt;Tate Strickland&lt;/a&gt; (Design)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://engineering.fb.com/codeofconduct/&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the &lt;a href=&quot;https://engineering.fb.com/codeofconduct/&quot;&gt;full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This demo is MIT licensed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lan-tianxiang/jd_shell</title>
      <link>https://github.com/lan-tianxiang/jd_shell</link>
      <description>&lt;p&gt;京豆 京东 lxk0301 jd-base loon docker 羊毛 脚本&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;必要声明:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;本仓库发布的SHELL项目，是用于对第三方js库进行自动更新，管理和运行的一体化软件.&lt;/li&gt; 
 &lt;li&gt;本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。&lt;/li&gt; 
 &lt;li&gt;本仓库发布的SHELL项目中涉及的任何脚本，仅用于测试和学习研究，禁止用于商业用途，不能保证其合法性，准确性，完整性和有效性，请根据情况自行判断.&lt;/li&gt; 
 &lt;li&gt;所有使用者在使用SHELL项目的任何部分时，需先遵守法律法规。对于一切使用不当所造成的后果，需自行承担.对任何脚本问题概不负责，包括但不限于由任何脚本错误导致的任何损失或损害.&lt;/li&gt; 
 &lt;li&gt;间接使用SHELL项目的任何用户，包括但不限于建立VPS或在某些行为违反国家/地区法律或相关法规的情况下进行传播, 本人对于由此引起的任何隐私泄漏或其他后果概不负责.&lt;/li&gt; 
 &lt;li&gt;如果任何单位或个人认为该项目可能涉嫌侵犯其权利，则应及时通知并提供身份证明，所有权证明，我们将在收到认证文件后删除相关文件.&lt;/li&gt; 
 &lt;li&gt;任何以任何方式查看此项目的人或直接或间接使用该SHELL项目的任何脚本的使用者都应仔细阅读此声明。本人保留随时更改或补充此免责声明的权利。一旦使用并复制了任何相关脚本或SHELL项目的规则，则视为您已接受此免责声明.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;您必须在下载后的24小时内从计算机或手机中完全删除以上内容.&lt;/strong&gt; 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;&lt;strong&gt;您使用或者复制了本仓库且本人制作的任何脚本，则视为&lt;code&gt;已接受&lt;/code&gt;此声明，请仔细阅读&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;☣请各位不要传播！！☣&lt;/h5&gt; 
&lt;h3&gt;通知&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;2021/3/31 9:00 &lt;code&gt;Docker重要通知&lt;/code&gt;&lt;/strong&gt; 修复Docker遗留的隐藏BUG，为了保持docker和linux修复脚本的一致，请所有使用&lt;code&gt;Docker&lt;/code&gt;重新安装一键脚本，选择删除已部署的镜像即可。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;2021/3/30 9:00 &lt;code&gt;长期&lt;/code&gt;&lt;/strong&gt; ㅤ有好用的第三方脚本欢迎提交到https://github.com/lan-tianxiang/jd_scripts&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;开发行程&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;2021/4/5 12:00 &lt;code&gt;完成多账户并发运行任务功能&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2021/4/10 12:00 &lt;code&gt;对结构优化，减少执行文件&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2021/4/15 12:00 &lt;code&gt;不知道要更什么功能，你们来提！！！&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;2021/4/15 12:00 &lt;code&gt;尚待继续！！！&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;适用于以下系统&lt;/h2&gt; 
&lt;h3&gt;如何部署？&lt;/h3&gt; 
&lt;h2&gt;&lt;code&gt;Linux&lt;/code&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/lan-tianxiang/jd_shell/wiki/Linux&quot;&gt;Debian/Ubuntu/Armbian/OpenMediaVault等Debian系&lt;/a&gt; 🔻&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/lan-tianxiang/jd_shell/wiki/Linux&quot;&gt;CentOS/RedHat/Fedora等红帽系&lt;/a&gt; 🔻&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/lan-tianxiang/jd_shell/wiki/Android&quot;&gt;Android等使用Termux模拟Linux的系统&lt;/a&gt; 🔻&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/lan-tianxiang/jd_shell/wiki/Unix&quot;&gt;OpenWRT、MacOs等类UNIX系统&lt;/a&gt; 🔻&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;code&gt;Docker&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lan-tianxiang/jd_shell/wiki/Docker&quot;&gt;Docker&lt;/a&gt; 🔻&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;code&gt;Windows10&lt;/code&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lan-tianxiang/jd_shell/wiki/Win10&quot;&gt;Win10安装 WSL Ubuntu&lt;/a&gt; 🔻&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/lan-tianxiang/jd_shell/wiki/Instruction&quot;&gt;WIKI&lt;/a&gt; 和各文件注释都含有大量教程，请自行翻阅❗❗&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;小彩蛋&lt;/h5&gt; 
&lt;h5&gt;默认隐藏，欢迎加入交流&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;更新日志&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;只记录大的更新，小修小改不记录。&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;2021-04-01, 新增在线SHELL调试功能，具体查看WIKI，Docker用户不支持&lt;/p&gt; 
&lt;p&gt;2021-03-30, 修复Docker遗留的隐藏BUG，保持docker和linux修复脚本的一致&lt;/p&gt; 
&lt;p&gt;2021-03-29, 增加超时关闭，以防因网络等未知原因卡住而不断消耗系统资源（默认关闭）&lt;/p&gt; 
&lt;p&gt;2021-03-28, 自动配置并填写助力码，在config最后的专区内，无需人工干预（默认关闭）&lt;/p&gt; 
&lt;p&gt;2021-02-19，面板功能集成至jd.sh内，运行jd.sh会出现操作提示&lt;/p&gt; 
&lt;p&gt;2021-01-23，控制面板增加日志查看功能，Docker重启容器后可以使用&lt;code&gt;docker restart jd&lt;/code&gt;，非Docker如果是pm2方式的请重启pm2进程&lt;code&gt;pm2 resatrt server.js&lt;/code&gt;。&lt;/p&gt; 
&lt;p&gt;2020-01-21，增加shylocks/Loon脚本。&lt;/p&gt; 
&lt;p&gt;2021-01-15，如果本机上安装了pm2，则挂机程序以pm2启动，否则以nohup启动。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yairEO/tagify</title>
      <link>https://github.com/yairEO/tagify</link>
      <description>&lt;p&gt;🔖 lightweight, efficient Tags input component in Vanilla JS / React / Angular / Vue&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#features&quot;&gt;What can Tagify do&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#building-the-project&quot;&gt;Building the project&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#adding-tags-dynamically&quot;&gt;Adding tags dynamically&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#output-value&quot;&gt;Output value&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#ajax-whitelist&quot;&gt;Ajax whitelist&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#edit-tags&quot;&gt;Edit tags&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#drag--sort&quot;&gt;Drag &amp;amp; Sort&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#dom-templates&quot;&gt;DOM Templates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#suggestions-selectbox&quot;&gt;Suggestions selectbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#mixed-content&quot;&gt;Tags mixed with text&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#single-value&quot;&gt;Single-Value Only&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#react&quot;&gt;React wrapper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Brakebein/ngx-tagify&quot;&gt;Angular wrapper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codesandbox.io/s/tagify-tags-component-vue-example-l8ok4&quot;&gt;Vue Example&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#jquery-version&quot;&gt;jQuery version&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#FAQ&quot;&gt;FAQ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#css-variables&quot;&gt;CSS Variables&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#methods&quot;&gt;Methods&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;Events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#hooks&quot;&gt;Hooks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&quot;&gt;Settings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm i @yaireo/tagify --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage (in your bundle):&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/simple-tagify-setup-6pfi2&quot;&gt;live demo using Parcel as bundler&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import Tagify from &#39;@yaireo/tagify&#39;

var tagify = new Tagify(...)
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Don&#39;t forget to &lt;strong&gt;include &lt;code&gt;tagify.css&lt;/code&gt;&lt;/strong&gt; file in your project. CSS location: &lt;code&gt;@yaireo/tagify/dist/tagify.css&lt;/code&gt; SCSS location: &lt;code&gt;@yaireo/tagify/src/tagify.scss&lt;/code&gt; &lt;a href=&quot;https://github.com/yairEO/tagify/pull/282&quot;&gt;See SCSS usecase &amp;amp; example&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Can be applied on input &amp;amp; textarea elements&lt;/li&gt; 
 &lt;li&gt;Supports &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#mixed-content&quot;&gt;mix content&lt;/a&gt; (text and tags together)&lt;/li&gt; 
 &lt;li&gt;Supports &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#single-value&quot;&gt;single-value&lt;/a&gt; mode (like &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Supports whitelist/blacklist&lt;/li&gt; 
 &lt;li&gt;Supports Templates for: 
  &lt;!-- raw HTML omitted --&gt;component wrapper
  &lt;!-- raw HTML omitted --&gt;, 
  &lt;!-- raw HTML omitted --&gt;tag items
  &lt;!-- raw HTML omitted --&gt;, 
  &lt;!-- raw HTML omitted --&gt;suggestion list
  &lt;!-- raw HTML omitted --&gt; &amp;amp; 
  &lt;!-- raw HTML omitted --&gt;suggestion items
  &lt;!-- raw HTML omitted --&gt;&lt;/li&gt; 
 &lt;li&gt;Shows suggestions selectbox (flexiable settings &amp;amp; styling) at &lt;em&gt;full (component) width&lt;/em&gt; or &lt;em&gt;next to&lt;/em&gt; the typed texted (caret)&lt;/li&gt; 
 &lt;li&gt;Allows setting suggestions&#39; &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#example-for-a-suggestion-item-alias&quot;&gt;aliases&lt;/a&gt; for easier fuzzy-searching&lt;/li&gt; 
 &lt;li&gt;Auto-suggest input as-you-type with ability to auto-complete&lt;/li&gt; 
 &lt;li&gt;Can paste in multiple values: &lt;code&gt;tag 1, tag 2, tag 3&lt;/code&gt; or even newline-separated tags&lt;/li&gt; 
 &lt;li&gt;Tags can be created by Regex delimiter or by pressing the &quot;Enter&quot; key / focusing of the input&lt;/li&gt; 
 &lt;li&gt;Validate tags by Regex &lt;em&gt;pattern&lt;/em&gt; or by function&lt;/li&gt; 
 &lt;li&gt;Tags may be &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#edit-tags&quot;&gt;editable&lt;/a&gt; (double-click)&lt;/li&gt; 
 &lt;li&gt;
  &lt;!-- raw HTML omitted --&gt;ARIA accessibility support
  &lt;!-- raw HTML omitted --&gt;(Component too generic for any meaningful ARIA)&lt;/li&gt; 
 &lt;li&gt;Supports read-only mode to the whole componenet or per-tag&lt;/li&gt; 
 &lt;li&gt;Each tag can have any properties desired (class, data-whatever, readonly...)&lt;/li&gt; 
 &lt;li&gt;Automatically disallow duplicate tags (vis &quot;settings&quot; object)&lt;/li&gt; 
 &lt;li&gt;Has built-in CSS loader, if needed (Ex. 
  &lt;!-- raw HTML omitted --&gt;AJAX
  &lt;!-- raw HTML omitted --&gt; whitelist pulling)&lt;/li&gt; 
 &lt;li&gt;Tags can be trimmed via &lt;code&gt;hellip&lt;/code&gt; by giving &lt;code&gt;max-width&lt;/code&gt; to the &lt;code&gt;tag&lt;/code&gt; element in your &lt;code&gt;CSS&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Easily change direction to RTL (via the SCSS file)&lt;/li&gt; 
 &lt;li&gt;Internet Explorer - A polyfill script should be used: &lt;code&gt;tagify.polyfills.min.js&lt;/code&gt; (in &lt;code&gt;/dist&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Many useful custom &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Original input/textarea element values kept in sync with Tagify&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building the project&lt;/h2&gt; 
&lt;p&gt;Simply run &lt;code&gt;gulp&lt;/code&gt; in your terminal, from the project&#39;s path (&lt;a href=&quot;https://gulpjs.com&quot;&gt;Gulp&lt;/a&gt; should be installed first).&lt;/p&gt; 
&lt;p&gt;Source files are this path: &lt;code&gt;/src/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Output files, which are automatically generated using Gulp, are in: &lt;code&gt;/dist/&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The rest of the files are most likely irrelevant.&lt;/p&gt; 
&lt;h2&gt;Adding tags dynamically&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var tagify = new Tagify(...);

tagify.addTags([&quot;banana&quot;, &quot;orange&quot;, &quot;apple&quot;])

// or add tags with pre-defined propeties

tagify.addTags([{value:&quot;banana&quot;, color:&quot;yellow&quot;}, {value:&quot;apple&quot;, color:&quot;red&quot;}, {value:&quot;watermelon&quot;, color:&quot;green&quot;}])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Output value&lt;/h2&gt; 
&lt;p&gt;There are two possible ways to get the value of the tags:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Access the tagify&#39;s instance&#39;s &lt;code&gt;value&lt;/code&gt; prop: &lt;code&gt;tagify.value&lt;/code&gt; (Array of tags)&lt;/li&gt; 
 &lt;li&gt;Access the &lt;em&gt;original&lt;/em&gt; input&#39;s value: &lt;code&gt;inputElm.value&lt;/code&gt; (Stringified Array of tags)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The most common way is to simply listen to the &lt;code&gt;change&lt;/code&gt; event on the &lt;em&gt;original input&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var inputElm = document.querySelector,
    tagify = new Tagify (inputElm);

inputElm.addEventListener(&#39;change&#39;, onChange)

function onChange(e){
  // outputs a String
  console.log(e.target.value)
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a href=&quot;https://jsbin.com/paxijaj/edit?html,js,output&quot;&gt;Modify original input value format&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Default format is a JSON string:
 &lt;!-- raw HTML omitted --&gt; &lt;code&gt;&#39;[{&quot;value&quot;:&quot;cat&quot;}, {&quot;value&quot;:&quot;dog&quot;}]&#39;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;I &lt;strong&gt;recommend&lt;/strong&gt; keeping this because some situations might have values such as addresses (tags contain commas):
 &lt;!-- raw HTML omitted --&gt; &lt;code&gt;&#39;[{&quot;value&quot;:&quot;Apt. 2A, Jacksonville, FL 39404&quot;}, {&quot;value&quot;:&quot;Forrest Ray, 191-103 Integer Rd., Corona New Mexico&quot;}]&#39;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Another example for complex tags state might be disabled tags, or ones with custom identifier &lt;em&gt;class&lt;/em&gt;:
 &lt;!-- raw HTML omitted --&gt; &lt;em&gt;(tags can be clicked, so delevopers can choose to use this to disable/enable tags)&lt;/em&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;code&gt;&#39;[{&quot;value&quot;:&quot;cat&quot;, &quot;disabled&quot;:true}, {&quot;value&quot;:&quot;dog&quot;}, {&quot;value&quot;:&quot;bird&quot;, &quot;class&quot;:&quot;color-green&quot;}]&#39;&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;To change the format, assuming your tags have no commas and are fairly simple:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var tagify = new Tagify(inputElm, {
  originalInputValueFormat: valuesArr =&amp;gt; valuesArr.map(item =&amp;gt; item.value).join(&#39;,&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;code&gt;&quot;cat,dog&quot;&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Ajax whitelist&lt;/h2&gt; 
&lt;p&gt;Dynamically-loaded suggestions list (&lt;em&gt;whitelist&lt;/em&gt;) from the server (as the user types) is a frequent need to many.&lt;/p&gt; 
&lt;p&gt;Tagify comes with its own loading animation, which is a very lightweight CSS-only code, and the 
 &lt;!-- raw HTML omitted --&gt;loading
 &lt;!-- raw HTML omitted --&gt; state is controlled by the method &lt;code&gt;tagify.loading&lt;/code&gt; which accepts &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; as arguments.&lt;/p&gt; 
&lt;p&gt;Below is a basic example using the &lt;code&gt;fetch&lt;/code&gt; API. I advise to abort the last request on any input before starting a new request.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var input = document.querySelector(&#39;input&#39;),
    tagify = new Tagify(input, {whitelist:[]}),
    controller; // for aborting the call

// listen to any keystrokes which modify tagify&#39;s input
tagify.on(&#39;input&#39;, onInput)

function onInput( e ){
  var value = e.detail.value;
  tagify.settings.whitelist.length = 0; // reset the whitelist

  // https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort
  controller &amp;amp;&amp;amp; controller.abort();
  controller = new AbortController();

  // show loading animation and hide the suggestions dropdown
  tagify.loading(true).dropdown.hide.call(tagify)

  fetch(&#39;http://get_suggestions.com?value=&#39; + value, {signal:controller.signal})
    .then(RES =&amp;gt; RES.json())
    .then(function(whitelist){
      // update inwhitelist Array in-place
      tagify.settings.whitelist.splice(0, whitelist.length, ...whitelist)
      tagify.loading(false).dropdown.show.call(tagify, value); // render the suggestions dropdown
    })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Edit tags&lt;/h2&gt; 
&lt;p&gt;Tags which aren&#39;t &lt;code&gt;read-only&lt;/code&gt; can be edited by double-clicking them (by default) or by changing the &lt;code&gt;editTags&lt;/code&gt; &lt;em&gt;setting&lt;/em&gt; to &lt;code&gt;1&lt;/code&gt;, making tags editable by single-clicking them.&lt;/p&gt; 
&lt;p&gt;The value is saved on &lt;code&gt;blur&lt;/code&gt; or by pressing &lt;code&gt;enter&lt;/code&gt; key. Pressing &lt;code&gt;Escape&lt;/code&gt; will revert the change trigger &lt;code&gt;blur&lt;/code&gt;. 
 &lt;!-- raw HTML omitted --&gt;ctrl
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;z
 &lt;!-- raw HTML omitted --&gt; will revert the change if an edited tag was marked as not valid (perhaps duplicate or blacklisted)&lt;/p&gt; 
&lt;p&gt;To prevent &lt;em&gt;all&lt;/em&gt; tags from being allowed to be editable, set the &lt;code&gt;editTags&lt;/code&gt; setting to &lt;code&gt;false&lt;/code&gt; (or &lt;code&gt;null&lt;/code&gt;).
 &lt;!-- raw HTML omitted --&gt; To do the same but for specific tag(s), set those tags&#39; data with &lt;code&gt;editable&lt;/code&gt; property set to &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input value=&#39;[{&quot;value&quot;:&quot;foo&quot;, &quot;editable&quot;:false}, {&quot;value&quot;:&quot;bar&quot;}]&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Drag &amp;amp; Sort&lt;/h2&gt; 
&lt;p&gt;To be able to sort tags by draging, a 3rd-party script is needed.&lt;/p&gt; 
&lt;p&gt;I have made a very simple &lt;em&gt;drag &amp;amp; drop&lt;/em&gt; (~&lt;code&gt;11kb&lt;/code&gt; &lt;em&gt;unminified&lt;/em&gt;) script which uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API&quot;&gt;HTML5 native API&lt;/a&gt; and it is available to download via &lt;a href=&quot;https://www.npmjs.com/package/@yaireo/dragsort&quot;&gt;NPM&lt;/a&gt; or &lt;a href=&quot;https://github.com/yairEO/dragsort&quot;&gt;Github&lt;/a&gt; but any other &lt;em&gt;drag &amp;amp; drop&lt;/em&gt; script may possibly work. I could not find in the whole internet a decent lightweight script.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://codepen.io/vsync/pen/jOqYOVJ&quot;&gt;Integration example&lt;/a&gt;:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var tagify = new Tagify(inputElement)

// bind &quot;DragSort&quot; to Tagify&#39;s main element and tell
// it that all the items with the below &quot;selector&quot; are &quot;draggable&quot;
var dragsort = new DragSort(tagify.DOM.scope, {
    selector: &#39;.&#39;+tagify.settings.classNames.tag,
    callbacks: {
        dragEnd: onDragEnd
    }
})

// must update Tagify&#39;s value according to the re-ordered nodes in the DOM
function onDragEnd(elm){
    tagify.updateValueByDOMTags()
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;DOM Templates&lt;/h2&gt; 
&lt;p&gt;It&#39;s possible to control the templates for some of the HTML elements tagify is using by modifying the &lt;code&gt;settings.templates&lt;/code&gt; Object with your own custom functions which &lt;strong&gt;must return&lt;/strong&gt; an &lt;em&gt;HTML string&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Available templates are: &lt;code&gt;wrapper&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;dropdown&lt;/code&gt;, &lt;code&gt;dropdownItem&lt;/code&gt; and the optional &lt;code&gt;dropdownItemNoMatch&lt;/code&gt; which is a special template for rendering a suggestion item (in the dropdown list) only if there were no matches found for the typed input.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/blob/master/src/parts/templates.js&quot;&gt;View templates&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Suggestions selectbox&lt;/h2&gt; 
&lt;p&gt;The suggestions selectbox is shown is a whitelist Array of Strings or Objects was passed in the settings when the Tagify instance was created. Suggestions list will only be rendered if there are at least two matching suggestions (case-insensitive).&lt;/p&gt; 
&lt;p&gt;The selectbox dropdown will be appended to the document&#39;s &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element and will be rendered by default in a position below (bottom of) the Tagify element. Using the keyboard arrows up/down will highlight an option from the list, and hitting the Enter key to select.&lt;/p&gt; 
&lt;p&gt;It is possible to tweak the selectbox dropdown via 2 settings:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt; - this is a numeral value which tells Tagify when to show the suggestions dropdown, when a minimum of N characters were typed.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;maxItems&lt;/code&gt; - Limits the number of items the suggestions selectbox will render&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var input = document.querySelector(&#39;input&#39;),
    tagify = new Tagify(input, {
        whitelist : [&#39;aaa&#39;, &#39;aaab&#39;, &#39;aaabb&#39;, &#39;aaabc&#39;, &#39;aaabd&#39;, &#39;aaabe&#39;, &#39;aaac&#39;, &#39;aaacc&#39;],
        dropdown : {
            classname     : &quot;color-blue&quot;,
            enabled       : 0,              // show the dropdown immediately on focus
            maxItems      : 5,
            position      : &quot;text&quot;,         // place the dropdown near the typed text
            closeOnSelect : false,          // keep the dropdown open after selecting a suggestion
            highlightFirst: true
        }
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;tagify__dropdown tagify__dropdown--text&quot; style=&quot;left:993.5px; top:106.375px; width:616px;&quot;&amp;gt;
    &amp;lt;div class=&quot;tagify__dropdown__wrapper&quot;&amp;gt;
      &amp;lt;div class=&quot;tagify__dropdown__item tagify__dropdown__item--active&quot; value=&quot;aaab&quot;&amp;gt;aaab&amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;tagify__dropdown__item&quot; value=&quot;aaabb&quot;&amp;gt;aaabb&amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;tagify__dropdown__item&quot; value=&quot;aaabc&quot;&amp;gt;aaabc&amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;tagify__dropdown__item&quot; value=&quot;aaabd&quot;&amp;gt;aaabd&amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;tagify__dropdown__item&quot; value=&quot;aaabe&quot;&amp;gt;aaabe&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default searching the suggestions is using &lt;a href=&quot;https://en.wikipedia.org/wiki/Approximate_string_matching&quot;&gt;fuzzy-search&lt;/a&gt; (see &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&quot;&gt;settings&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;If you wish to assign &lt;em&gt;alias&lt;/em&gt; to items (in your suggestion list), add the &lt;code&gt;searchBy&lt;/code&gt; property to &lt;em&gt;whitelist&lt;/em&gt; items you wish to have an &lt;em&gt;alias&lt;/em&gt; for.&lt;/p&gt; 
&lt;p&gt;In the below example, typing a part of a string which is included in the &lt;code&gt;searchBy&lt;/code&gt; property, for example &lt;em&gt;&lt;code&gt;land midd&quot;&lt;/code&gt;&lt;/em&gt; - the suggested item which match the value &quot;Israel&quot; will be rendered in the suggestions (dropdown) list.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://yaireo.github.io/tagify/#section-extra-properties&quot;&gt;Example&lt;/a&gt; for a suggestion item alias&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;whitelist = [
    ...
    { value:&#39;Israel&#39;, code:&#39;IL&#39;, searchBy:&#39;holy land, desert, middle east&#39; },
    ...
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another handy setting is &lt;code&gt;dropdown.searchKeys&lt;/code&gt; which, like the above &lt;code&gt;dropdown.searchBy&lt;/code&gt; setting, allows expanding the search of any typed terms to more than the &lt;code&gt;value&lt;/code&gt; property of the whitelist items (if items are a &lt;em&gt;Collection&lt;/em&gt;).&lt;/p&gt; 
&lt;h3&gt;Example whitelist:&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[
  {
    value    : 123456,
    nickname : &quot;foo&quot;,
    email    : &quot;foo@mail.com&quot;
  },
  {
    value    : 987654,
    nickname : &quot;bar&quot;,
    email    : &quot;bar@mail.com&quot;
  },
  ...more..
]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;// setting to search in other keys:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  dropdown: {
    searchKeys: [&quot;nickname&quot;, &quot;email&quot;] //  fuzzy-search matching for those whitelist items&#39; properties
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Mixed-Content&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;To use this feature it must be toggled - see &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&quot;&gt;settings&lt;/a&gt;. full &lt;a href=&quot;https://yaireo.github.io/tagify/#section-mix&quot;&gt;demo here&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;When mixing text with tags, the original textarea (or input) element will have a value as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[[cartman]]⁠ and [[kyle]]⁠ do not know [[Homer simpson]]⁠
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the inital value of the textarea or input is formatted as the above example, tagify will try to automatically convert everything between &lt;code&gt;[[&lt;/code&gt; &amp;amp; &lt;code&gt;]]&lt;/code&gt; to a tag, if tag exists in the &lt;em&gt;whitelist&lt;/em&gt;, so make sure when the Tagify instance is initialized, that it has tags with the correct &lt;code&gt;value&lt;/code&gt; property that match the same values that appear between &lt;code&gt;[[&lt;/code&gt; &amp;amp; &lt;code&gt;]]&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Applying the setting &lt;code&gt;dropdown.position:&quot;text&quot;&lt;/code&gt; is encouraged for mixed-content tags, because the suggestions list will be rendered right next to the caret location and not the the bottom of the Tagify componenet, which might look weird when there is already a lot of content at multiple lines.&lt;/p&gt; 
&lt;p&gt;If a tag does not exists in the &lt;em&gt;whitelist&lt;/em&gt;, it may be created by the user and all you should do is listen to the &lt;code&gt;add&lt;/code&gt; event and update your local/remote state.&lt;/p&gt; 
&lt;h2&gt;Single-Value&lt;/h2&gt; 
&lt;p&gt;Similar to native &lt;code&gt;&amp;lt;Select&amp;gt;&lt;/code&gt; element, but allows typing text as value.&lt;/p&gt; 
&lt;h2&gt;React&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://codesandbox.io/s/tagify-react-wrapper-oempc&quot;&gt;&lt;strong&gt;live demo&lt;/strong&gt;&lt;/a&gt; for React integration examples.&lt;/p&gt; 
&lt;p&gt;A Tagify React component is exported from &lt;a href=&quot;https://github.com/yairEO/tagify/blob/master/dist/react.tagify.js&quot;&gt;&lt;code&gt;react.tagify.js&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;h3&gt;Update regarding &lt;code&gt;onChange&lt;/code&gt; prop:&lt;/h3&gt; 
&lt;p&gt;I have changed how the &lt;code&gt;onChange&lt;/code&gt; works internally within the Wrapper of Tagify so as of &lt;em&gt;March 30, 2021&lt;/em&gt; the &lt;code&gt;e&lt;/code&gt; argument will include a &lt;code&gt;detail&lt;/code&gt; parameter with the value as string. There is no more &lt;code&gt;e.target&lt;/code&gt;, and to access the original DOM input element, do this: &lt;code&gt;e.detail.tagify.DOM.originalInput&lt;/code&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: You will need to inport Tagify&#39;s CSS also, either by javasceript or by SCSS &lt;code&gt;@import&lt;/code&gt; (which is preferable)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Tags from &quot;@yaireo/tagify/dist/react.tagify&quot; // React-wrapper file
import &quot;@yaireo/tagify/dist/tagify.css&quot; // Tagify CSS

const App = () =&amp;gt; {
  return (
    &amp;lt;Tags
      tagifyRef={tagifyRef} // optional Ref object for the Tagify instance itself, to get access to  inner-methods
      settings={settings}  // tagify settings object
      value=&quot;a,b,c&quot;
      {...tagifyProps}   // dynamic props such as &quot;loading&quot;, &quot;showDropdown:&#39;abc&#39;&quot;, &quot;value&quot;
      onChange={ e =&amp;gt; console.log(&quot;CHANGED:&quot;, JSON.parse(e.detail.value)) }
    /&amp;gt;
  )
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To gain full access to Tagify&#39;s (instance) inner methods, A custom &lt;code&gt;ref&lt;/code&gt; can be used:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;...
const tagifyRef = useRef()
...
&amp;lt;Tags tagifyRef={tagifyRef} ... /&amp;gt;

// or mix-mode
&amp;lt;MixedTags
  settings={...}
  onChange={...}
  value={`This is a textarea which mixes text with [[{&quot;value&quot;:&quot;tags&quot;}]].`}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;&amp;lt;MixedTags&amp;gt;&lt;/code&gt; component is a shorthand for &lt;code&gt;&amp;lt;Tags InputMode=&quot;textarea&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;Updating the component&#39;s state&lt;/h4&gt; 
&lt;p&gt;The &lt;code&gt;settings&lt;/code&gt; prop is &lt;strong&gt;only used once&lt;/strong&gt; in the initialization process, please do not update it afterwards.&lt;/p&gt; 
&lt;hr&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Prop | Type | Updatable | Info ----------------------- | ------------------------- |:---------:| ----------------------------------------------------------- settings | 
 &lt;!-- raw HTML omitted --&gt;Object
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&quot;&gt;&lt;em&gt;settings&lt;/em&gt; section&lt;/a&gt; name | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | ✔ | &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&#39;s element &lt;code&gt;name&lt;/code&gt; attribute value | 
 &lt;!-- raw HTML omitted --&gt;String/Array
 &lt;!-- raw HTML omitted --&gt; | ✔ | Initial value. defaultValue | 
 &lt;!-- raw HTML omitted --&gt;String/Array
 &lt;!-- raw HTML omitted --&gt; | | Only affects the hidden &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element placeholder | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | ✔ | placeholder text for the component readOnly | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | ✔ | Toggles &lt;code&gt;readonly&lt;/code&gt; state. With capital &lt;code&gt;O&lt;/code&gt;. tagifyRef | 
 &lt;!-- raw HTML omitted --&gt;Object
 &lt;!-- raw HTML omitted --&gt; | | &lt;code&gt;useRef&lt;/code&gt; hook refference for the component inner instance of vailla &lt;em&gt;Tagify&lt;/em&gt; (for methods access) showFilteredDropdown | 
 &lt;!-- raw HTML omitted --&gt;Boolean/String
 &lt;!-- raw HTML omitted --&gt; | ✔ | if &lt;code&gt;true&lt;/code&gt; shows the suggestions dropdown. if assigned a String, show the dropdown pre-filtered. loading | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | ✔ | Toggles &lt;code&gt;loading&lt;/code&gt; state for the whole component whitelist | 
 &lt;!-- raw HTML omitted --&gt;Array
 &lt;!-- raw HTML omitted --&gt; | ✔ | Sets the &lt;code&gt;whitelist&lt;/code&gt; which is the basis for the suggestions dropdown &amp;amp; autocomplete className | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | | Component&#39;s optional class name to be added InputMode | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | | &lt;code&gt;&quot;textarea&quot;&lt;/code&gt; will create a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; (hidden) element instead of the default &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and automatically make Tagify act as &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#mixed-content&quot;&gt;&lt;em&gt;&quot;mix mode&quot;&lt;/em&gt;&lt;/a&gt; autoFocus | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | | Should the component have focus on mount. Must be unique, per-page. children | 
 &lt;!-- raw HTML omitted --&gt;String/Nodes
 &lt;!-- raw HTML omitted --&gt; | | &lt;code&gt;value&lt;/code&gt; prop is prefered of this onChange | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onInput | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onAdd | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onRemove | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onEdit | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onInvalid | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onClick | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onKeydown | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onFocus | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt; onBlur | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | See &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#events&quot;&gt;&lt;em&gt;events&lt;/em&gt; section&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h2&gt;jQuery version&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;jQuery.tagify.js&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;A jQuery wrapper verison is also available, but I advise not using it because it&#39;s basically the exact same as the &quot;normal&quot; script (non-jqueryfied) and all the jQuery&#39;s wrapper does is allowing to chain the event listeners for (&#39;add&#39;, &#39;remove&#39;, &#39;invalid&#39;)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;[name=tags]&#39;)
    .tagify()
    .on(&#39;add&#39;, function(e, tagData){
        console.log(&#39;added&#39;, ...tagData)  // data, index, and DOM node
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Accessing methods can be done via the &lt;a href=&quot;https://api.jquery.com/data&quot;&gt;&lt;code&gt;.data(&#39;tagify&#39;)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;[name=tags]&#39;).tagify();
// get tags from the server (ajax) and add them:
$(&#39;[name=tags]&#39;).data(&#39;tagify&#39;).addTags(&#39;aaa, bbb, ccc&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;HTML input &amp;amp; textarea attributes&lt;/h2&gt; 
&lt;p&gt;The below list of &lt;em&gt;attributes&lt;/em&gt; affect &lt;em&gt;Tagify&lt;/em&gt;.
 &lt;!-- raw HTML omitted --&gt; These can also be set by Tagify &lt;a href=&quot;https://raw.githubusercontent.com/yairEO/tagify/master/#settings&quot;&gt;settings&lt;/a&gt; Object manually, and not &lt;em&gt;declerativly&lt;/em&gt; (via attributes).&lt;/p&gt; 
&lt;p&gt;Attribute | Example | Info ----------------- | ----------------------------------------------------- | -------------------- &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern&quot;&gt;pattern&lt;/a&gt; | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;&amp;lt;input pattern=&#39;^[A-Za-z_✲ ]{1,15}$&#39;&amp;gt;&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt; | Tag Regex pattern which tag input is validated by. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefplaceholder&quot;&gt;placeholder&lt;/a&gt; | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;&amp;lt;input placeholder=&#39;please type your tags&#39;&amp;gt;&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt; | This attribute&#39;s value will be used as a constant placeholder, which is visible unless something is being typed. readOnly | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;&amp;lt;input readOnly&amp;gt;&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt; | No user-interaction (add/remove/edit) allowed. autofocus | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;&amp;lt;input autofocus&amp;gt;&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt; | Automatically focus the the Tagify component when the component is loaded required | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;&amp;lt;input required&amp;gt;&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt; | Adds a &lt;code&gt;required&lt;/code&gt; attribute to the Tagify wrapper element. Does nothing more.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;List of questions &amp;amp; scenarios which might come up during development with Tagify:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Tagify does not accept just &lt;em&gt;any&lt;/em&gt; kind of data structure.
 &lt;!-- raw HTML omitted --&gt; If a tag data is represented as an &lt;code&gt;Object&lt;/code&gt;, it &lt;strong&gt;must&lt;/strong&gt; contain a &lt;strong&gt;unique&lt;/strong&gt; property &lt;code&gt;value&lt;/code&gt; which Tagify uses to check if a tag already exists, among other things, so make sure it is present.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Incorrect&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[{ &quot;id&quot;:1, &quot;name&quot;:&quot;foo bar&quot; }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Correct&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[{ &quot;id&quot;:1, &quot;value&quot;: 1, &quot;name&quot;:&quot;foo bar&quot; }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[{ &quot;value&quot;:1, &quot;name&quot;:&quot;foo bar&quot; }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[{ &quot;value&quot;:&quot;foo bar&quot; }]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// ad a simple array of Strings
[&quot;foo bar&quot;]
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In framework-less projects, the developer should save the state of the Tagify component (somewhere), and the question is:
 &lt;!-- raw HTML omitted --&gt; &lt;strong&gt;when should the state be saved?&lt;/strong&gt; On every change made to &lt;em&gt;Tagify&#39;s&lt;/em&gt; internal state (&lt;code&gt;tagify.value&lt;/code&gt; via the &lt;code&gt;update()&lt;/code&gt; method).
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var tagify = new Tagify(...)

// listen to &quot;change&quot; events on the &quot;original&quot; input/textarea element
tagify.DOM.originalInput.addEventListener(&#39;change&#39;, onTagsChange)

// This example uses async/await but you can use Promises, of course, if you prefer.
async function onTagsChange(e){
  const {name, value} = e.target
  // &quot;imaginary&quot; async function &quot;saveToServer&quot; should get the field&#39;s name &amp;amp; value
  await saveToServer(name, value)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using &lt;em&gt;React/Vue/Angular&lt;/em&gt; or any &quot;modern&quot; framework, then you already know how to attach &quot;onChange&quot; event listeners to your &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; elements, so the above is irrelevant.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Stopping tags from wrapping to new lines, add this to your &lt;code&gt;.tagify&lt;/code&gt; &lt;em&gt;selector CSS Rule&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;flex-wrap: nowrap;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Tagify internally has &lt;code&gt;state&lt;/code&gt; property, per &lt;code&gt;Tagify&lt;/code&gt; instance and this may be useful for a variety of things when implementing a specific scenario.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var tagify = new Tagify(...)
var formElm = document.forms[0]; // just an example

tagify.on(&#39;keydown&#39;, onTagifyKeyDown)

function onTagifyKeyDown(e){
  if( e.key == &#39;Enter&#39; &amp;amp;&amp;amp;         // &quot;enter&quot; key pressed
      !tagify.state.inputText &amp;amp;&amp;amp;  // assuming user is not in the middle oy adding a tag
      !tagify.state.editing       // user not editing a tag
    ){
    setTimeout(() =&amp;gt; formElm.submit())  // put some buffer to make sure tagify has done with whatever, to be on the safe-side
  }

}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/247&quot;&gt;Double-click tag fires both &quot;edit&quot; &amp;amp; &quot;click&quot; custom events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/254&quot;&gt;Manualy open the suggestions dropdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/244&quot;&gt;Render your own suggestions dropdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/252&quot;&gt;Allow max length on mix mode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/253&quot;&gt;Always show dropdown&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/245&quot;&gt;Limit the length of a tag value (minimum &amp;amp; maximum)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/237&quot;&gt;&lt;em&gt;Mixed mode&lt;/em&gt; initial value&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/223&quot;&gt;Random colors for each tag&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/220&quot;&gt;Format input value for server side&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/294&quot;&gt;Writing to tagify textarea&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/145&quot;&gt;Scroll all tags within one line, instead of growing vertically&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/365&quot;&gt;Insert emoji at caret location when editing a tag&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/413&quot;&gt;propagate &lt;code&gt;change&lt;/code&gt; event&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/433&quot;&gt;Manually update tag data after it was added&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/465&quot;&gt;Ajax Whitelist with &quot;enforceWhitelist&quot; setting enabled&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/474&quot;&gt;Custom (multiple) tag validation &amp;amp; AJAX&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/160&quot;&gt;Make tags from pasted multi-line text&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/issues/524#issuecomment-699140465&quot;&gt;Add a tag at &lt;em&gt;caret&lt;/em&gt; position in &lt;em&gt;mixed mode&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;CSS Variables&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Learn more about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&quot;&gt;CSS Variables&lt;/a&gt;) (custom properties)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Tagify&#39;s utilizes &lt;em&gt;CSS variables&lt;/em&gt; which allow easy customization without the need to manually write CSS. If you do wish to heavily style your Tagify components, then you can (and should) use the below variables within your modified styles as much as you can.&lt;/p&gt; 
&lt;p&gt;For a &lt;em&gt;live&lt;/em&gt; example, see the &lt;a href=&quot;https://yaireo.github.io/tagify/#section-different-look&quot;&gt;demos page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Name | Info ------------------------------- | -------------------------------- --tags-border-color | The outer border color which surrounds tagify --tags-hover-border-color | &lt;em&gt;hover&lt;/em&gt; state --tags-focus-border-color | &lt;em&gt;focus&lt;/em&gt; state --tag-bg | Tag background color --tag-hover | Tag background color on hover (mouse) --tag-text-color | Tag text color --tag-text-color--edit | Tag text color when a Tag is being edited --tag-pad | Tag padding, from all sides. Ex. &lt;code&gt;.3em .5em&lt;/code&gt; --tag--min-width | Minimum Tag width --tag--max-width | Maximum tag width, which gets trimmed with &lt;em&gt;hellip&lt;/em&gt; after --tag-inset-shadow-size | This is the inner shadow size, which dictates the color of the Tags.
 &lt;!-- raw HTML omitted --&gt;It&#39;s important the size fits &lt;em&gt;exactly&lt;/em&gt; to the tag.
 &lt;!-- raw HTML omitted --&gt;Change this if you change the &lt;code&gt;--tag-pad&lt;/code&gt; or fontsize. --tag-invalid-color | For border color of edited tags with invalid value being typed into them --tag-invalid-bg | Background color for invalid Tags. --tag-remove-bg | Tag background color when hovering the &lt;code&gt;×&lt;/code&gt; button. --tag-remove-btn-color | Remove (&lt;code&gt;×&lt;/code&gt;) button text color --tag-remove-btn-bg | Remove (&lt;code&gt;×&lt;/code&gt;) button background color --tag-remove-btn-bg--hover | Remove (&lt;code&gt;×&lt;/code&gt;) button hover background color --loader-size | Loading animation size. &lt;code&gt;1em&lt;/code&gt; is pretty big, default is a bit less. --tag-hide-transition | Controls the transition property when a tag is removed. default is &#39;.3s&#39; --placeholder-color | Placeholder text color --placeholder-color-focus | Placeholder text color when Tagify has focus and no input was typed --input-color | Input text color&lt;/p&gt; 
&lt;h3&gt;Full list of Tagify&#39;s &lt;a href=&quot;https://github.com/yairEO/tagify/blob/master/src/tagify.scss#L9-L24&quot;&gt;SCSS variables&lt;/a&gt;&lt;/h3&gt; 
&lt;h2&gt;Methods&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;Tagify&lt;/code&gt; is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes&quot;&gt;prototype&lt;/a&gt; based and There are many methods, but I&#39;ve chosen to list the most relevant ones:&lt;/p&gt; 
&lt;p&gt;Name | Parameters | Info -------------------------- | --------------------------------------------------------------------------------------- | -------------------------------------------------------------------------- &lt;code&gt;destroy&lt;/code&gt; | | Reverts the input element back as it was before Tagify was applied &lt;code&gt;removeAllTags&lt;/code&gt; | | Removes all tags and resets the original input tag&#39;s value property &lt;code&gt;addTags&lt;/code&gt; | 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;Array&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Object&lt;/code&gt; tag(s) to add
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;Boolean&lt;/code&gt; clear input after adding
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;Boolean&lt;/code&gt; - skip adding invalids
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | Accepts a String (word, single or multiple with a delimiter), an Array of Objects (see above) or Strings. &lt;code&gt;addMixTags&lt;/code&gt; | &lt;code&gt;Array&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt; | Bypasses the normalization process in &lt;code&gt;addTags&lt;/code&gt;, forcefully adding tags at the last caret location or at the end, if there&#39;s no last caret location saved (at &lt;code&gt;tagify.state.selection&lt;/code&gt;) &lt;code&gt;removeTags&lt;/code&gt; | 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;Array&lt;/code&gt;/&lt;code&gt;HTMLElement&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt; tag(s) to remove
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;silent&lt;/code&gt; does not update the component&#39;s value
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;tranDuration&lt;/code&gt; Transition duration (in &lt;code&gt;ms&lt;/code&gt;)
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | (#502) Remove single/multiple Tags. When nothing passed, removes last tag. 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;silent&lt;/code&gt; - A flag, which when turned on, does not remove any value and does not update the original input value but simply removes the tag from tagify
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;tranDuration&lt;/code&gt; - delay for animation, after which the tag will be removed from the DOM
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;code&gt;addEmptyTag&lt;/code&gt; | &lt;code&gt;Object&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(&lt;code&gt;tagData&lt;/code&gt;)
 &lt;!-- raw HTML omitted --&gt; | Create an empty tag (optionally with pre-defined data) and enters &quot;edit&quot; mode directly. &lt;a href=&quot;https://yaireo.github.io/tagify#section-different-look&quot;&gt;See demo&lt;/a&gt; &lt;code&gt;loadOriginalValues&lt;/code&gt; | &lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Array&lt;/code&gt; | Converts the input&#39;s value into tags. This method gets called automatically when instansiating Tagify. Also works for mixed-tags &lt;code&gt;getWhitelistItemsByValue&lt;/code&gt; | &lt;code&gt;Object&lt;/code&gt; | &lt;code&gt;{value}&lt;/code&gt; - return an Array of found matching items (case-insensitive) &lt;code&gt;getTagIndexByValue&lt;/code&gt; | &lt;code&gt;String&lt;/code&gt; | Returns the index of a specific tag, by value &lt;code&gt;getTagElmByValue&lt;/code&gt; | &lt;code&gt;String&lt;/code&gt; | Returns the first matched tag node, if found &lt;code&gt;isTagDuplicate&lt;/code&gt; | &lt;code&gt;String&lt;/code&gt; | Returns how many tags already exists with that value &lt;code&gt;parseMixTags&lt;/code&gt; | &lt;code&gt;String&lt;/code&gt; | Converts a String argument (&lt;code&gt;[[foo]]⁠ and [[bar]]⁠ are..&lt;/code&gt;) into HTML with mixed tags &amp;amp; texts &lt;code&gt;getTagElms&lt;/code&gt; | | Returns a DOM nodes list of all the tags &lt;code&gt;getTagElmByValue&lt;/code&gt; | &lt;code&gt;String&lt;/code&gt; | Returns a specific tag DOM node by value &lt;code&gt;tagData&lt;/code&gt; | &lt;code&gt;HTMLElement&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt; | set/get tag data on a tag element (has&lt;code&gt;.tagify__tag&lt;/code&gt; class by default) &lt;code&gt;editTag&lt;/code&gt; | &lt;code&gt;HTMLElement&lt;/code&gt; | Goes to edit-mode in a specific tag &lt;code&gt;replaceTag&lt;/code&gt; | &lt;code&gt;tagElm&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(&lt;code&gt;tagData&lt;/code&gt;)
 &lt;!-- raw HTML omitted --&gt; | Exit a tag&#39;s edit-mode. if &quot;tagData&quot; exists, replace the tag element with new data and update Tagify value &lt;code&gt;loading&lt;/code&gt; | &lt;code&gt;Boolean&lt;/code&gt; | Toogle loading state on/off (Ex. AJAX whitelist pulling) &lt;code&gt;tagLoading&lt;/code&gt; | &lt;code&gt;HTMLElement&lt;/code&gt;, Boolean | same as above but for a specific tag element &lt;code&gt;createTagElem&lt;/code&gt; | &lt;code&gt;Object&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(&lt;code&gt;tagData&lt;/code&gt;)
 &lt;!-- raw HTML omitted --&gt; | Returns a tag element from the supplied tag data &lt;code&gt;injectAtCaret&lt;/code&gt; | &lt;code&gt;HTMLElement&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(&lt;code&gt;injectedNode&lt;/code&gt;)
 &lt;!-- raw HTML omitted --&gt;, &lt;code&gt;Object&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(&lt;code&gt;range&lt;/code&gt;)
 &lt;!-- raw HTML omitted --&gt; | Injects text or HTML node at last caret position. &lt;code&gt;range&lt;/code&gt; parameter is &lt;em&gt;optional&lt;/em&gt; &lt;code&gt;placeCaretAfterNode&lt;/code&gt; | &lt;code&gt;HTMLElement&lt;/code&gt; | Places the caret after a given node &lt;code&gt;insertAfterTag&lt;/code&gt; | &lt;code&gt;HTMLElement&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(tag element)
 &lt;!-- raw HTML omitted --&gt;, &lt;code&gt;HTMLElement&lt;/code&gt;/&lt;code&gt;String&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(whatever to insert after)
 &lt;!-- raw HTML omitted --&gt; | &lt;code&gt;toggleClass&lt;/code&gt; | &lt;code&gt;Boolean&lt;/code&gt; | Toggles &lt;code&gt;class&lt;/code&gt; on the main &lt;em&gt;tagify&lt;/em&gt; container (&lt;code&gt;scope&lt;/code&gt;) &lt;code&gt;dropdown.selectAll&lt;/code&gt; | | Add &lt;strong&gt;all&lt;/strong&gt; whitelist items as tags and close the suggestion dropdown &lt;code&gt;updateValueByDOMTags&lt;/code&gt; | | Iterate tag DOM nodes and re-build the &lt;code&gt;tagify.value&lt;/code&gt; array (call this if tags get sorted manually) &lt;code&gt;parseTemplate&lt;/code&gt; | &lt;code&gt;String&lt;/code&gt;/&lt;code&gt;Function&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(template name or function)
 &lt;!-- raw HTML omitted --&gt;, &lt;code&gt;Array&lt;/code&gt; 
 &lt;!-- raw HTML omitted --&gt;(data)
 &lt;!-- raw HTML omitted --&gt; | converts a template string (by selecting one from the &lt;code&gt;settings.templates&lt;/code&gt; by name or supplying a template function which returns a String) into a DOM node &lt;code&gt;setReadonly&lt;/code&gt; | &lt;code&gt;Boolean&lt;/code&gt; | Toggles &quot;readonly&quot; mode on/off&lt;/p&gt; 
&lt;h2&gt;Events&lt;/h2&gt; 
&lt;p&gt;All triggered events return the instance&#39;s scope (tagify).
 &lt;!-- raw HTML omitted --&gt; See &lt;code&gt;e.detail&lt;/code&gt; for custom event additional data.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var tagify = new Tagify(...)

// events can be chainable, and multiple events may be binded for the same callback
tagify
  .on(&#39;input&#39;, e =&amp;gt; console.log(e.detail))
  .on(&#39;edit:input edit:updated edit:start edit:keydown&#39;, e =&amp;gt; console.log(e.type, e.detail))
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var tagify = new Tagify(inputNode, {
  callbacks: {
    &quot;change&quot;: (e) =&amp;gt; console.log(e.detail))
    &quot;dropdown:show&quot;: (e) =&amp;gt; console.log(e.detail))
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Name | Info ------------------ | -------------------------------------------------------------------------- change | Any change to the value has occured. &lt;code&gt;e.details.value&lt;/code&gt; callback listener argument is a &lt;em&gt;String&lt;/em&gt; add | A tag has been added remove | A tag has been removed (&lt;a href=&quot;https://github.com/yairEO/tagify/issues/222&quot;&gt;use &lt;code&gt;removeTag&lt;/code&gt;&lt;/a&gt; instead with &lt;em&gt;jQuery&lt;/em&gt;) invalid | A tag has been added but did not pass vaildation. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events&quot;&gt;event detail&lt;/a&gt; input | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/input&quot;&gt;Input&lt;/a&gt; event, when a tag is being typed/edited. &lt;code&gt;e.detail&lt;/code&gt; exposes &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;inputElm&lt;/code&gt; &amp;amp; &lt;code&gt;isValid&lt;/code&gt; click | Clicking a tag. Exposes the tag element, its index &amp;amp; data dblclick | Double-clicking a tag keydown | When tagify input has focus and a key was pressed focus | The component currently has focus blur | The component lost focus edit:input | Typing inside an edited tag edit:beforeUpdate | Just before a tag has been updated, while still in &quot;edit&quot; mode edit:updated | A tag as been updated (changed view editing or by directly calling the &lt;code&gt;replaceTag()&lt;/code&gt; method) edit:start | A tag is now in &quot;edit mode&quot; edit:keydown | keydown event while an edited tag is in focus dropdown:show | Suggestions dropdown is to be rendered. The dropdown DOM node is passed in the callback, &lt;a href=&quot;https://yaireo.github.io/tagify/#section-basic&quot;&gt;see demo&lt;/a&gt;. dropdown:hide | Suggestions dropdown has been removed from the DOM dropdown:select | Suggestions dropdown item selected (by mouse/keyboard/touch) dropdown:scroll | Tells the percentage scrolled. (&lt;code&gt;event.detail.percentage&lt;/code&gt;) dropdown:noMatch | No whitelist suggestion item matched for the the typed input. At this point it is possible to manually set &lt;code&gt;tagify.suggestedListItems&lt;/code&gt; to any possible custom value, for example: &lt;code&gt;[{ value:&quot;default&quot; }]&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Hooks&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Promise&lt;/strong&gt;-based hooks for &lt;em&gt;async&lt;/em&gt; program flow scenarios.&lt;/p&gt; 
&lt;p&gt;Allows to &quot;hook&quot; (intervene) at certain points of the program, which were selected as a suitable place to &lt;strong&gt;pause&lt;/strong&gt; the program flow and wait for further instructions on how/if to procceed.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var input = document.querySelector(&#39;input&#39;)
var tagify = new Tagify(input,{
    hooks: {
        /**
         * Removes a tag
         * @param  {Array}  tags [Array of Objects [{node:..., data:...}, {...}, ...]]
         */
        beforeRemoveTag : function( tags ){
            return new Promise((resolve, reject) =&amp;gt; {
                confirm(&quot;Remove &quot; + tags[0].data.value + &quot;?&quot;)
                    ? resolve()
                    : reject()
            })
        }
    }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Name | Parameters | Info ---------------------- | ------------------------------------------- | -------------------------------------------------------------------------- beforeRemoveTag | Array 
 &lt;!-- raw HTML omitted --&gt;(of Objects)
 &lt;!-- raw HTML omitted --&gt; | &lt;a href=&quot;https://jsbin.com/xoseyux/edit?html,js,output&quot;&gt;Example&lt;/a&gt; suggestionClick | Object 
 &lt;!-- raw HTML omitted --&gt;(click event data)
 &lt;!-- raw HTML omitted --&gt; | &lt;a href=&quot;https://jsbin.com/tuwihuf/edit?html,js,output&quot;&gt;Example&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/yairEO/tagify/blob/master/src/parts/defaults.js#L1&quot;&gt;Settings&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;Name | Type | Default | Info ------------------------- | ---------------------------- | ------------------------------------------- | -------------------------------------------------------------------------- tagTextProp | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | &lt;code&gt;&quot;value&quot;&lt;/code&gt; | Tag data Object property which will be displayed as the tag&#39;s text. Remember to keep &quot;value&quot; property 
 &lt;!-- raw HTML omitted --&gt;unique
 &lt;!-- raw HTML omitted --&gt;. placeholder | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | | Placeholder text. If this attribute is set on an input/textarea element it will override this setting delimiters | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | &lt;code&gt;&quot;,&quot;&lt;/code&gt; | [RegEx &lt;strong&gt;string&lt;/strong&gt;] split tags by any of these delimiters. Example delimeters: &quot;,|.| &quot; (&lt;em&gt;comma&lt;/em&gt;, &lt;em&gt;dot&lt;/em&gt; or &lt;em&gt;whitespace&lt;/em&gt;) pattern | 
 &lt;!-- raw HTML omitted --&gt;String/RegEx
 &lt;!-- raw HTML omitted --&gt; | null | Validate input by RegEx pattern (can also be applied on the input itself as an attribute) Ex: &lt;code&gt;/[1-9]/&lt;/code&gt; mode | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | null | Use &lt;code&gt;select&lt;/code&gt; for single-value dropdown-like select box. See &lt;code&gt;mix&lt;/code&gt; as value to allow mixed-content. The &#39;pattern&#39; setting must be set to some character. mixTagsInterpolator | 
 &lt;!-- raw HTML omitted --&gt;Array
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;[&#39;[[&#39;, &#39;]]&#39;]&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt; | Interpolation for mix mode. Everything between these will become a tag mixTagsAllowedAfter | 
 &lt;!-- raw HTML omitted --&gt;RegEx
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;/,\|\.\|\:\|\s/&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt; | Define conditions in which typed mix-tags content is allowing a tag to be created after. duplicates | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | false | Should duplicate tags be allowed or not trim | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | true | If &lt;code&gt;true&lt;/code&gt; trim the tag&#39;s value (remove before/after whitespaces) enforceWhitelist | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | false | Should ONLY use tags allowed in whitelist.
 &lt;!-- raw HTML omitted --&gt;In &lt;code&gt;mix-mode&lt;/code&gt;, setting it to &lt;code&gt;false&lt;/code&gt; will not allow creating new tags. autoComplete.enabled | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | true | Tries to suggest the input&#39;s value while typing (match from whitelist) by adding the rest of term as grayed-out text autoComplete.rightKey | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | false | If &lt;code&gt;true&lt;/code&gt;, when &lt;code&gt;→&lt;/code&gt; is pressed, use the suggested value to create a tag, else just auto-completes the input. In mixed-mode this is ignored and treated as &quot;true&quot; whitelist | 
 &lt;!-- raw HTML omitted --&gt;Array
 &lt;!-- raw HTML omitted --&gt; | [] | An array of allowed tags (&lt;em&gt;Strings&lt;/em&gt; or &lt;em&gt;Objects&lt;/em&gt;). When using &lt;em&gt;Objects&lt;/em&gt; in the &lt;em&gt;whitelist&lt;/em&gt; array a &lt;code&gt;value&lt;/code&gt; property is a must. 
 &lt;!-- raw HTML omitted --&gt;Also, the &lt;em&gt;whitelist used for auto-completion when &lt;code&gt;autoCompletion.enabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; blacklist | 
  &lt;!-- raw HTML omitted --&gt;Array
  &lt;!-- raw HTML omitted --&gt; | [] | An array of tags which aren&#39;t allowed addTagOnBlur | 
  &lt;!-- raw HTML omitted --&gt;Boolean
  &lt;!-- raw HTML omitted --&gt; | true | Automatically adds the text which was inputed as a tag when blur event happens callbacks | 
  &lt;!-- raw HTML omitted --&gt;Object
  &lt;!-- raw HTML omitted --&gt; | {} | Exposed callbacks object to be triggered on events: &lt;code&gt;&#39;add&#39;&lt;/code&gt; / &lt;code&gt;&#39;remove&#39;&lt;/code&gt; tags maxTags | 
  &lt;!-- raw HTML omitted --&gt;Number
  &lt;!-- raw HTML omitted --&gt; | Infinity | Maximum number of allowed tags. when reached, adds a class &quot;tagify--hasMaxTags&quot; to &lt;code&gt;&amp;lt;Tags&amp;gt;&lt;/code&gt; editTags | 
  &lt;!-- raw HTML omitted --&gt;Object/Number
  &lt;!-- raw HTML omitted --&gt; | {} | &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; will disallow editing editTags.clicks | 
  &lt;!-- raw HTML omitted --&gt;Number
  &lt;!-- raw HTML omitted --&gt; | 2 | Number of clicks to enter &quot;edit-mode&quot;: 1 for single click. Any other value is considered as double-click editTags.keepInvalid | 
  &lt;!-- raw HTML omitted --&gt;Boolean
  &lt;!-- raw HTML omitted --&gt; | true | keeps invalid edits as-is until &lt;code&gt;esc&lt;/code&gt; is pressed while in focus templates | 
  &lt;!-- raw HTML omitted --&gt;Object
  &lt;!-- raw HTML omitted --&gt; | 
  &lt;!-- raw HTML omitted --&gt;&lt;code&gt;wrapper&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;dropdownItem&lt;/code&gt;
  &lt;!-- raw HTML omitted --&gt; | Object consisting of functions which return template strings validate | 
  &lt;!-- raw HTML omitted --&gt;Function
  &lt;!-- raw HTML omitted --&gt; | | If the &lt;code&gt;pattern&lt;/code&gt; setting does not meet your needs, use this function, which recieves &lt;em&gt;tag data object&lt;/em&gt; as an argument and should return &lt;code&gt;true&lt;/code&gt; if validaiton passed or &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;string&lt;/code&gt; of not. A &lt;em&gt;string&lt;/em&gt; may be returned as the reason of the validation failure. transformTag | 
  &lt;!-- raw HTML omitted --&gt;Function
  &lt;!-- raw HTML omitted --&gt; | | Takes a tag data as argument and allows mutating it before a tag is created or edited.
  &lt;!-- raw HTML omitted --&gt;Should not &lt;code&gt;return&lt;/code&gt; anything, only &lt;strong&gt;mutate&lt;/strong&gt;. keepInvalidTags | 
  &lt;!-- raw HTML omitted --&gt;Boolean
  &lt;!-- raw HTML omitted --&gt; | false | If &lt;code&gt;true&lt;/code&gt;, do not remove tags which did not pass validation skipInvalid | 
  &lt;!-- raw HTML omitted --&gt;Boolean
  &lt;!-- raw HTML omitted --&gt; | false | If &lt;code&gt;true&lt;/code&gt;, do not add invalid, temporary, tags before automatically removing them backspace | 
  &lt;!-- raw HTML omitted --&gt;&lt;/em&gt;
 &lt;!-- raw HTML omitted --&gt; | true | On pressing backspace key:
 &lt;!-- raw HTML omitted --&gt; &lt;code&gt;true&lt;/code&gt; - remove last tag 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;edit&lt;/code&gt; - edit last tag originalInputValueFormat | 
 &lt;!-- raw HTML omitted --&gt;Function
 &lt;!-- raw HTML omitted --&gt; | | If you wish your original input/textarea &lt;code&gt;value&lt;/code&gt; property format to other than the default (which I recommend keeping) you may use this and make sure it returns a &lt;em&gt;string&lt;/em&gt;. mixMode.insertAfterTag | 
 &lt;!-- raw HTML omitted --&gt;Node/String
 &lt;!-- raw HTML omitted --&gt; | &lt;code&gt;\u00A0&lt;/code&gt; | &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt; to add after a tag added | dropdown.&lt;em&gt;enabled&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Number
 &lt;!-- raw HTML omitted --&gt; | 2 | Minimum characters input for showing a suggestions list. &lt;code&gt;false&lt;/code&gt; will not render a suggestions list. dropdown.&lt;em&gt;caseSensitive&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | false | if &lt;code&gt;true&lt;/code&gt;, match &lt;strong&gt;exact&lt;/strong&gt; item when a suggestion is selected (from the dropdown) and also more strict matching for dulpicate items. &lt;strong&gt;Ensure&lt;/strong&gt; &lt;code&gt;fuzzySearch&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; for this to work. dropdown.&lt;em&gt;maxItems&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Number
 &lt;!-- raw HTML omitted --&gt; | 10 | Maximum items to show in the suggestions list dropdown.&lt;em&gt;classname&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | &lt;code&gt;&quot;&quot;&lt;/code&gt; | Custom &lt;em&gt;classname&lt;/em&gt; for the dropdown suggestions selectbox dropdown.&lt;em&gt;fuzzySearch&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | true | Enables filtering dropdown items values&#39; by string &lt;em&gt;containing&lt;/em&gt; and not only &lt;em&gt;beginning&lt;/em&gt; dropdown.&lt;em&gt;accentedSearch&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | true | Enable searching for 
 &lt;!-- raw HTML omitted --&gt;accented
 &lt;!-- raw HTML omitted --&gt; items in the whitelist without typing exact match (#491) dropdown.&lt;em&gt;position&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;String
 &lt;!-- raw HTML omitted --&gt; | &lt;code&gt;&quot;all&quot;&lt;/code&gt; | 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;manual&lt;/code&gt; - will not render the dropdown, and you would need to do it yourself. &lt;a href=&quot;https://yaireo.github.io/tagify/#section-manual-suggestions&quot;&gt;See demo&lt;/a&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;text&lt;/code&gt; - places the dropdown next to the caret
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;input&lt;/code&gt; - places the dropdown next to the input (useful in rare situations)
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;all&lt;/code&gt; - normal, full-width design
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; dropdown.&lt;em&gt;highlightFirst&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | false | When a suggestions list is shown, highlight the first item, and also suggest it in the input (The suggestion can be accepted with 
 &lt;!-- raw HTML omitted --&gt;→
 &lt;!-- raw HTML omitted --&gt; key) dropdown.&lt;em&gt;closeOnSelect&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | true | close the dropdown after selecting an item, if &lt;code&gt;enabled:0&lt;/code&gt; is set (which means always show dropdown on focus) dropdown.&lt;em&gt;clearOnSelect&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | true | Keep typed text after selecting a suggestion dropdown.&lt;em&gt;mapValueTo&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Function/String
 &lt;!-- raw HTML omitted --&gt; | | If whitelist is an Array of Objects:
 &lt;!-- raw HTML omitted --&gt;Ex. &lt;code&gt;[{value:&#39;foo&#39;, email:&#39;foo@a.com&#39;},...]&lt;/code&gt;)
 &lt;!-- raw HTML omitted --&gt; this setting controlls which data 
 &lt;!-- raw HTML omitted --&gt;key
 &lt;!-- raw HTML omitted --&gt; will be printed in the dropdown.
 &lt;!-- raw HTML omitted --&gt; Ex.1: &lt;code&gt;mapValueTo: data =&amp;gt; &quot;To:&quot; + data.email&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;Ex.2: &lt;code&gt;mapValueTo: &quot;email&quot;&lt;/code&gt; dropdown.&lt;em&gt;searchKeys&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Array
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;[&quot;value&quot;, &quot;searchBy&quot;]&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt; | When a user types something and trying to match the whitelist items for suggestions, this setting allows matching other keys of a whitelist objects dropdown.&lt;em&gt;appendTarget&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;HTMLNode
 &lt;!-- raw HTML omitted --&gt; | &lt;code&gt;document.body&lt;/code&gt; | Target-Node which the &lt;em&gt;suggestions dropdown&lt;/em&gt; is appended to (&lt;em&gt;only when rendered&lt;/em&gt;) dropdown.&lt;em&gt;placeAbove&lt;/em&gt; | 
 &lt;!-- raw HTML omitted --&gt;Boolean
 &lt;!-- raw HTML omitted --&gt; | | If defined, will force the placement of the dropdown in respect to the Boolean value: &lt;code&gt;true&lt;/code&gt; will always show the suggestions dropdown above the input field and &lt;code&gt;false&lt;/code&gt; will always show it below. By default this setting it not defined and the placement of the dropdown is automatically decided according to the space availble, where opening it &lt;em&gt;below&lt;/em&gt; the input is preferred.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tighten/ziggy</title>
      <link>https://github.com/tighten/ziggy</link>
      <description>&lt;p&gt;Use your Laravel named routes in JavaScript&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/ziggy-banner.png&quot; alt=&quot;Ziggy - Use your Laravel named routes in JavaScript&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Ziggy – Use your Laravel routes in JavaScript&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/tighten/ziggy/actions?query=workflow:Tests+branch:main&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/workflow/status/tighten/ziggy/Tests?label=tests&amp;amp;style=flat&quot; alt=&quot;GitHub Actions Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/tightenco/ziggy&quot;&gt;&lt;img src=&quot;https://img.shields.io/packagist/v/tightenco/ziggy.svg?style=flat&quot; alt=&quot;Latest Version on Packagist&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/tightenco/ziggy&quot;&gt;&lt;img src=&quot;https://img.shields.io/packagist/dt/tightenco/ziggy.svg?style=flat&quot; alt=&quot;Downloads on Packagist&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmjs.com/package/ziggy-js&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ziggy-js.svg?style=flat&quot; alt=&quot;Latest Version on NPM&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmjs.com/package/ziggy-js&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/ziggy-js.svg?style=flat&quot; alt=&quot;Downloads on NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Ziggy provides a JavaScript &lt;code&gt;route()&lt;/code&gt; helper function that works like Laravel&#39;s, making it easy to use your Laravel named routes in JavaScript.&lt;/p&gt; 
&lt;p&gt;Ziggy supports all versions of Laravel from &lt;code&gt;5.4&lt;/code&gt; onward, and all modern browsers.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#installation&quot;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#usage&quot;&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#the-route-helper&quot;&gt;The &lt;code&gt;route()&lt;/code&gt; helper&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#the-router-class&quot;&gt;The &lt;code&gt;Router&lt;/code&gt; class&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#route-model-binding&quot;&gt;Route-model binding&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#typescript-support&quot;&gt;TypeScript support&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#advanced-setup&quot;&gt;&lt;strong&gt;Advanced Setup&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#javascript-frameworks&quot;&gt;JavaScript frameworks&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#vue&quot;&gt;Vue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#react&quot;&gt;React&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#spas-or-separate-repos&quot;&gt;SPAs or separate repos&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#filtering-routes&quot;&gt;&lt;strong&gt;Filtering Routes&lt;/strong&gt;&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#basic-filtering&quot;&gt;Basic Filtering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#filtering-using-groups&quot;&gt;Filtering using Groups&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#other&quot;&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#contributing&quot;&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Install Ziggy into your Laravel app with &lt;code&gt;composer require tightenco/ziggy&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Add the &lt;code&gt;@routes&lt;/code&gt; Blade directive to your main layout (&lt;em&gt;before&lt;/em&gt; your application&#39;s JavaScript), and the &lt;code&gt;route()&lt;/code&gt; helper function will now be available globally!&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h4&gt;The &lt;code&gt;route()&lt;/code&gt; helper&lt;/h4&gt; 
&lt;p&gt;Ziggy&#39;s &lt;code&gt;route()&lt;/code&gt; helper function works like Laravel&#39;s—you can pass it the name of one of your routes, and the parameters you want to pass to the route, and it will return a URL.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Basic usage&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// routes/web.php

Route::get(&#39;posts&#39;, fn (Request $request) =&amp;gt; /* ... */)-&amp;gt;name(&#39;posts.index&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

route(&#39;posts.index&#39;); // &#39;https://ziggy.test/posts&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;With parameters&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// routes/web.php

Route::get(&#39;posts/{post}&#39;, fn (Request $request, Post $post) =&amp;gt; /* ... */)-&amp;gt;name(&#39;posts.show&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

route(&#39;posts.show&#39;, 1);           // &#39;https://ziggy.test/posts/1&#39;
route(&#39;posts.show&#39;, [1]);         // &#39;https://ziggy.test/posts/1&#39;
route(&#39;posts.show&#39;, { post: 1 }); // &#39;https://ziggy.test/posts/1&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;With multiple parameters&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// routes/web.php

Route::get(&#39;events/{event}/venues/{venue}&#39;, fn (Request $request, Event $event, Venue $venue) =&amp;gt; /* ... */)-&amp;gt;name(&#39;events.venues.show&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

route(&#39;events.venues.show&#39;, [1, 2]);                 // &#39;https://ziggy.test/events/1/venues/2&#39;
route(&#39;events.venues.show&#39;, { event: 1, venue: 2 }); // &#39;https://ziggy.test/events/1/venues/2&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;With query parameters&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// routes/web.php

Route::get(&#39;events/{event}/venues/{venue}&#39;, fn (Request $request, Event $event, Venue $venue) =&amp;gt; /* ... */)-&amp;gt;name(&#39;events.venues.show&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

route(&#39;events.venues.show&#39;, {
    event: 1,
    venue: 2,
    page: 5,
    count: 10,
});
// &#39;https://ziggy.test/events/1/venues/2?page=5&amp;amp;count=10&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you have a query parameter with the same name as a route parameter, nest it under a &lt;code&gt;_query&lt;/code&gt; key:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;route(&#39;events.venues.show&#39;, {
    event: 1,
    venue: 2,
    _query: {
        event: 3,
        page: 5,
    },
});
// &#39;https://ziggy.test/events/1/venues/2?event=3&amp;amp;page=5&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Like Laravel&#39;s &lt;code&gt;route()&lt;/code&gt; helper, Ziggy automatically encodes boolean query parameters as integers in the query string:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;route(&#39;events.venues.show&#39;, {
    event: 1,
    venue: 2,
    _query: {
        draft: false,
        overdue: true,
    },
});
// &#39;https://ziggy.test/events/1/venues/2?draft=0&amp;amp;overdue=1&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;With default parameter values&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://laravel.com/docs/urls#default-values&quot;&gt;Laravel documentation on default route parameter values&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// routes/web.php

Route::get(&#39;{locale}/posts/{post}&#39;, fn (Request $request, Post $post) =&amp;gt; /* ... */)-&amp;gt;name(&#39;posts.show&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// app/Http/Middleware/SetLocale.php

URL::defaults([&#39;locale&#39; =&amp;gt; $request-&amp;gt;user()-&amp;gt;locale ?? &#39;de&#39;]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

route(&#39;posts.show&#39;, 1); // &#39;https://ziggy.test/de/posts/1&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Practical AJAX example&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const post = { id: 1, title: &#39;Ziggy Stardust&#39; };

return axios.get(route(&#39;posts.show&#39;, post)).then((response) =&amp;gt; response.data);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;The &lt;code&gt;Router&lt;/code&gt; class&lt;/h4&gt; 
&lt;p&gt;Calling Ziggy&#39;s &lt;code&gt;route()&lt;/code&gt; helper function with no arguments will return an instance of the JavaScript &lt;code&gt;Router&lt;/code&gt; class, which has some other useful properties and methods.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Checking the current route: &lt;code&gt;route().current()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Route called &#39;events.index&#39;, with URI &#39;/events&#39;
// Current window URL is https://ziggy.test/events

route().current();               // &#39;events.index&#39;
route().current(&#39;events.index&#39;); // true
route().current(&#39;events.*&#39;);     // true
route().current(&#39;events.show&#39;);  // false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;current()&lt;/code&gt; method optionally accepts parameters as its second argument, and will check that their values also match in the current URL:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Route called &#39;events.venues.show&#39;, with URI &#39;/events/{event}/venues/{venue}&#39;
// Current window URL is https://myapp.com/events/1/venues/2?authors=all

route().current(&#39;events.venues.show&#39;, { event: 1, venue: 2 }); // true
route().current(&#39;events.venues.show&#39;, { authors: &#39;all&#39; });     // true
route().current(&#39;events.venues.show&#39;, { venue: 6 });           // false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Checking if a route exists: &lt;code&gt;route().has()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// App has only one named route, &#39;home&#39;

route().has(&#39;home&#39;);   // true
route().has(&#39;orders&#39;); // false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Retrieving the current route params: &lt;code&gt;route().params&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Route called &#39;events.venues.show&#39;, with URI &#39;/events/{event}/venues/{venue}&#39;
// Current window URL is https://myapp.com/events/1/venues/2?authors=all

route().params; // { event: &#39;1&#39;, venue: &#39;2&#39;, authors: &#39;all&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: parameter values retrieved with &lt;code&gt;route().params&lt;/code&gt; will always be returned as strings.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;Route-model binding&lt;/h4&gt; 
&lt;p&gt;Ziggy supports Laravel &lt;a href=&quot;https://laravel.com/docs/routing#route-model-binding&quot;&gt;route-model binding&lt;/a&gt;, and can even recognize custom route key names. If you pass &lt;code&gt;route()&lt;/code&gt; a JavaScript object as one of the route parameters, Ziggy will use the registered route-model binding keys for that route to find the parameter value in the object and insert it into the URL (falling back to an &lt;code&gt;id&lt;/code&gt; key if there is one and the route-model binding key isn&#39;t present).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// app/Models/Post.php

class Post extends Model
{
    public function getRouteKeyName()
    {
        return &#39;slug&#39;;
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// app/Http/Controllers/PostController.php

class PostController
{
    public function show(Request $request, Post $post)
    {
        return view(&#39;posts.show&#39;, [&#39;post&#39; =&amp;gt; $post]);
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// routes/web.php

Route::get(&#39;blog/{post}&#39;, [PostController::class, &#39;show&#39;])-&amp;gt;name(&#39;posts.show&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

const post = {
    title: &#39;Introducing Ziggy v1&#39;,
    slug: &#39;introducing-ziggy-v1&#39;,
    date: &#39;2020-10-23T20:59:24.359278Z&#39;,
};

// Ziggy knows that this route uses the &#39;slug&#39; route-model binding key name:

route(&#39;posts.show&#39;, post); // &#39;https://ziggy.test/blog/introducing-ziggy-v1&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Ziggy also supports &lt;a href=&quot;https://laravel.com/docs/routing#customizing-the-key&quot;&gt;custom keys&lt;/a&gt; for scoped bindings in the route definition (requires Laravel 7+):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// routes/web.php

Route::get(&#39;authors/{author}/photos/{photo:uuid}&#39;, fn (Request $request, Author $author, Photo $photo) =&amp;gt; /* ... */)-&amp;gt;name(&#39;authors.photos.show&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

const photo = {
    uuid: &#39;714b19e8-ac5e-4dab-99ba-34dc6fdd24a5&#39;,
    filename: &#39;sunset.jpg&#39;,
}

route(&#39;authors.photos.show&#39;, [{ id: 1, name: &#39;Jacob&#39; }, photo]);
// &#39;https://ziggy.test/authors/1/photos/714b19e8-ac5e-4dab-99ba-34dc6fdd24a5&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;TypeScript support&lt;/h4&gt; 
&lt;p&gt;Unofficial TypeScript type definitions for Ziggy are maintained by &lt;a href=&quot;https://github.com/benallfree&quot;&gt;benallfree&lt;/a&gt; as part of &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;Definitely Typed&lt;/a&gt;, and can be installed with &lt;code&gt;npm install @types/ziggy-js&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Advanced Setup&lt;/h2&gt; 
&lt;h4&gt;JavaScript frameworks&lt;/h4&gt; 
&lt;p&gt;If you are not using Blade, or would prefer not to use the &lt;code&gt;@routes&lt;/code&gt; directive, Ziggy provides an artisan command to output its config and routes to a file: &lt;code&gt;php artisan ziggy:generate&lt;/code&gt;. By default this command stores your routes at &lt;code&gt;resources/js/ziggy.js&lt;/code&gt;, but you can pass an argument to it to use a different path. Alternatively, you can return Ziggy&#39;s config as JSON from an endpoint in your Laravel API (see &lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#retrieving-ziggys-routes-and-config-from-an-api-endpoint&quot;&gt;Retrieving Ziggy&#39;s routes and config from an API endpoint&lt;/a&gt; below for an example of how to set this up).&lt;/p&gt; 
&lt;p&gt;The file generated by &lt;code&gt;php artisan ziggy:generate&lt;/code&gt; will look something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ziggy.js

const Ziggy = {
    routes: {&quot;home&quot;:{&quot;uri&quot;:&quot;\/&quot;,&quot;methods&quot;:[&quot;GET&quot;,&quot;HEAD&quot;],&quot;domain&quot;:null},&quot;login&quot;:{&quot;uri&quot;:&quot;login&quot;,&quot;methods&quot;:[&quot;GET&quot;,&quot;HEAD&quot;],&quot;domain&quot;:null}},
    url: &#39;http://ziggy.test&#39;,
    port: false
};

export { Ziggy };
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can optionally create a webpack alias to make importing Ziggy&#39;s core source files easier:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.mix.js

// Mix v6
const path = require(&#39;path&#39;);

mix.alias({
    ziggy: path.resolve(&#39;vendor/tightenco/ziggy/dist&#39;),
});

// Mix v5
const path = require(&#39;path&#39;);

mix.webpackConfig({
    resolve: {
        alias: {
            ziggy: path.resolve(&#39;vendor/tightenco/ziggy/dist&#39;),
        },
    },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Finally, import and use Ziggy like any other JavaScript library. Because the Ziggy config object is not available globally in this setup, you&#39;ll usually have to pass it to the &lt;code&gt;route()&lt;/code&gt; function manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

import route from &#39;ziggy&#39;;
import { Ziggy } from &#39;./ziggy&#39;;

// ...

route(&#39;home&#39;, undefined, undefined, Ziggy);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Vue&lt;/h4&gt; 
&lt;p&gt;To use the &lt;code&gt;route()&lt;/code&gt; helper in Vue components, you can add a mixin to make it available globally:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

import route from &#39;ziggy&#39;;
import { Ziggy } from &#39;./ziggy&#39;;

Vue.mixin({
    methods: {
        route: (name, params, absolute, config = Ziggy) =&amp;gt; route(name, params, absolute, config),
    },
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you include the &lt;code&gt;@routes&lt;/code&gt; Blade directive in your views, the &lt;code&gt;route()&lt;/code&gt; helper will already be available globally, including in your Vue app, so you don&#39;t need to import &lt;code&gt;route&lt;/code&gt; or &lt;code&gt;Ziggy&lt;/code&gt;. For convenience, you can optionally create a simpler version of the above mixin to make &lt;code&gt;route()&lt;/code&gt; easily accessibly inside your components:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Vue.mixin({ methods: { route }});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Now you can use the method in your Vue components like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a class=&quot;nav-link&quot; :href=&quot;route(&#39;home&#39;)&quot;&amp;gt;Home&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/Archer70&quot;&gt;Scott Christianson&lt;/a&gt; for originally sharing &lt;a href=&quot;https://github.com/tighten/ziggy/issues/70#issuecomment-369129032&quot;&gt;this solution&lt;/a&gt;!&lt;/p&gt; 
&lt;h4&gt;React&lt;/h4&gt; 
&lt;p&gt;To use Ziggy with React, start by importing the &lt;code&gt;route()&lt;/code&gt; function and your Ziggy config. Because the Ziggy config object is not available globally in this setup, you&#39;ll have to pass it to the &lt;code&gt;route()&lt;/code&gt; function manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

import route from &#39;ziggy&#39;;
import { Ziggy } from &#39;./ziggy&#39;;

// ...

route(&#39;home&#39;, undefined, undefined, Ziggy);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We&#39;re working on adding a Hook to Ziggy to make this cleaner, but for now make sure you pass the configuration object as the fourth argument to the &lt;code&gt;route()&lt;/code&gt; function as shown above.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you include the &lt;code&gt;@routes&lt;/code&gt; Blade directive in your views, the &lt;code&gt;route()&lt;/code&gt; helper will already be available globally, including in your React app, so you don&#39;t need to import &lt;code&gt;route&lt;/code&gt; or &lt;code&gt;Ziggy&lt;/code&gt; anywhere.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;SPAs or separate repos&lt;/h4&gt; 
&lt;p&gt;Ziggy&#39;s &lt;code&gt;route()&lt;/code&gt; helper function is also available as an NPM package, for use in JavaScript projects managed separately from their Laravel backend (i.e. without Composer or a &lt;code&gt;vendor&lt;/code&gt; directory). You can install the NPM package with &lt;code&gt;npm install ziggy-js&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;To make your routes available on the frontend for this function to use, you can either run &lt;code&gt;php artisan ziggy:generate&lt;/code&gt; and add the generated routes file to your project, or you can return Ziggy&#39;s config as JSON from an endpoint in your Laravel API (see &lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/#retrieving-ziggys-routes-and-config-from-an-api-endpoint&quot;&gt;Retrieving Ziggy&#39;s routes and config from an API endpoint&lt;/a&gt; below for an example of how to set this up).&lt;/p&gt; 
&lt;p&gt;Then, import and use Ziggy as above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

import route from &#39;ziggy-js&#39;;

import { Ziggy } from &#39;./ziggy&#39;;
// or...
const response = await fetch(&#39;/api/ziggy&#39;);
const Ziggy = await response.toJson();

// ...

route(&#39;home&#39;, undefined, undefined, Ziggy);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Filtering Routes&lt;/h2&gt; 
&lt;p&gt;Ziggy supports filtering the routes it makes available to your JavaScript, which is great if you have certain routes that you don&#39;t want to be included and visible in the source of the response sent back to clients. Filtering routes is optional—by default, Ziggy includes all your application&#39;s named routes.&lt;/p&gt; 
&lt;h4&gt;Basic filtering&lt;/h4&gt; 
&lt;p&gt;To set up basic route filtering, create a config file in your Laravel app at &lt;code&gt;config/ziggy.php&lt;/code&gt; and define &lt;strong&gt;either&lt;/strong&gt; an &lt;code&gt;only&lt;/code&gt; or &lt;code&gt;except&lt;/code&gt; setting as an array of route name patterns.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: You have to choose one or the other. Setting both &lt;code&gt;only&lt;/code&gt; and &lt;code&gt;except&lt;/code&gt; will disable filtering altogether and return all named routes.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// config/ziggy.php

return [
    &#39;only&#39; =&amp;gt; [&#39;home&#39;, &#39;posts.index&#39;, &#39;posts.show&#39;],
];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also use asterisks as wildcards in route filters. In the example below, &lt;code&gt;admin.*&lt;/code&gt; will exclude routes named &lt;code&gt;admin.login&lt;/code&gt; and &lt;code&gt;admin.register&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// config/ziggy.php

return [
    &#39;except&#39; =&amp;gt; [&#39;_debugbar.*&#39;, &#39;horizon.*&#39;, &#39;admin.*&#39;],
];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Filtering using groups&lt;/h4&gt; 
&lt;p&gt;You can also define groups of routes that you want make available in different places in your app, using a &lt;code&gt;groups&lt;/code&gt; key in your config file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// config/ziggy.php

return [
    &#39;groups&#39; =&amp;gt; [
        &#39;admin&#39; =&amp;gt; [&#39;admin.*&#39;, &#39;users.*&#39;],
        &#39;author&#39; =&amp;gt; [&#39;posts.*&#39;],
    ],
];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, you can expose a specific group by passing the group name into the &lt;code&gt;@routes&lt;/code&gt; Blade directive:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-blade&quot;&gt;{{-- authors.blade.php --}}

@routes(&#39;author&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To expose multiple groups you can pass an array of group names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-blade&quot;&gt;{{-- admin.blade.php --}}

@routes([&#39;admin&#39;, &#39;author&#39;])
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: Passing group names to the &lt;code&gt;@routes&lt;/code&gt; directive will always take precedence over your other &lt;code&gt;only&lt;/code&gt; or &lt;code&gt;except&lt;/code&gt; settings.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Other&lt;/h2&gt; 
&lt;h4&gt;Using &lt;code&gt;@routes&lt;/code&gt; with a Content Security Policy&lt;/h4&gt; 
&lt;p&gt;A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;Content Security Policy&lt;/a&gt; (CSP) may block inline scripts, including those output by Ziggy&#39;s &lt;code&gt;@routes&lt;/code&gt; Blade directive. If you have a CSP and are using a nonce to flag safe inline scripts, you can pass the nonce as as the second argument to the &lt;code&gt;@routes&lt;/code&gt; directive and it will be added to Ziggy&#39;s script tag:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;@routes(false, &#39;your-nonce-here&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Disabling the &lt;code&gt;route()&lt;/code&gt; helper&lt;/h4&gt; 
&lt;p&gt;If you only want to use the &lt;code&gt;@routes&lt;/code&gt; directive to make your app&#39;s routes available in JavaScript, but don&#39;t need the &lt;code&gt;route()&lt;/code&gt; helper function, set the &lt;code&gt;skip-route-function&lt;/code&gt; config value to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// config/ziggy.php

return [
    &#39;skip-route-function&#39; =&amp;gt; true,
];
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Retrieving Ziggy&#39;s routes and config from an API endpoint&lt;/h4&gt; 
&lt;p&gt;Ziggy can easily return its config object as JSON from an endpoint in your Laravel app. For example, you could set up an &lt;code&gt;/api/ziggy&lt;/code&gt; route that looks something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// routes/api.php

use Tightenco\Ziggy\Ziggy;

Route::get(&#39;api/ziggy&#39;, fn () =&amp;gt; response()-&amp;gt;json(new Ziggy));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then, client-side, you could retrieve the config with an HTTP request:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// app.js

import route from &#39;ziggy-js&#39;;

const response = await fetch(&#39;/api/ziggy&#39;);
const Ziggy = await response.toJson();

// ...

route(&#39;home&#39;, undefined, undefined, Ziggy);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Re-generating the routes file when your app routes change&lt;/h4&gt; 
&lt;p&gt;If you&#39;re exporting your Ziggy routes as a file by running &lt;code&gt;php artisan ziggy:generate&lt;/code&gt;, you may want to watch your app&#39;s route files and re-run the command automatically whenever they&#39;re updated. The example below is a Laravel Mix plugin, but similar functionality could be achieved without Mix. Huge thanks to &lt;a href=&quot;https://github.com/nacr&quot;&gt;Nuno Rodrigues&lt;/a&gt; for &lt;a href=&quot;https://github.com/tighten/ziggy/issues/321#issuecomment-689150082&quot;&gt;the idea and a sample implementation&lt;/a&gt;!&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mix = require(&#39;laravel-mix&#39;);
const { exec } = require(&#39;child_process&#39;);

mix.extend(&#39;ziggy&#39;, new class {
    register(config = {}) {
        this.watch = config.watch ?? [&#39;routes/**/*.php&#39;];
        this.path = config.path ?? &#39;&#39;;
        this.enabled = config.enabled ?? !Mix.inProduction();
    }

    boot() {
        if (!this.enabled) return;

        const command = () =&amp;gt; exec(
            `php artisan ziggy:generate ${this.path}`,
            (error, stdout, stderr) =&amp;gt; console.log(stdout)
        );

        command();

        if (Mix.isWatching() &amp;amp;&amp;amp; this.watch) {
            ((require(&#39;chokidar&#39;)).watch(this.watch))
                .on(&#39;change&#39;, (path) =&amp;gt; {
                    console.log(`${path} changed...`);
                    command();
                });
        };
    }
}());

mix.js(&#39;resources/js/app.js&#39;, &#39;public/js&#39;)
    .postCss(&#39;resources/css/app.css&#39;, &#39;public/css&#39;, [])
    .ziggy();
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;To get started contributing to Ziggy, check out &lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/CONTRIBUTING.md&quot;&gt;the contribution guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/DCoulbourne&quot;&gt;Daniel Coulbourne&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/jakebathman&quot;&gt;Jake Bathman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/stauffermatt&quot;&gt;Matt Stauffer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/bakerkretzmar&quot;&gt;Jacob Baker-Kretzmar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tighten/ziggy/contributors&quot;&gt;All contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;http://twitter.com/calebporzio&quot;&gt;Caleb Porzio&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/adamwathan&quot;&gt;Adam Wathan&lt;/a&gt;, and &lt;a href=&quot;http://twitter.com/jeffrey_way&quot;&gt;Jeffrey Way&lt;/a&gt; for help solidifying the idea.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;If you discover any security related issues, please email &lt;a href=&quot;mailto:hello@tighten.co&quot;&gt;hello@tighten.co&lt;/a&gt; instead of using the issue tracker.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Ziggy is open source software released under the MIT license. See &lt;a href=&quot;https://raw.githubusercontent.com/tighten/ziggy/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>quasarframework/quasar</title>
      <link>https://github.com/quasarframework/quasar</link>
      <description>&lt;p&gt;Quasar Framework - Build high-performance VueJS user interfaces in record time&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.quasar.dev/logo/svg/quasar-logo-full-inline.svg&quot; alt=&quot;Quasar Framework logo&quot;&gt;&lt;/p&gt; 
&lt;h1&gt;Quasar Framework&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Build high-performance VueJS user interfaces in record time: responsive Single Page Apps, SSR Apps, PWAs, Browser extensions, Hybrid Mobile Apps and Electron Apps. If you want, all using the same codebase!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://chat.quasar.dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/chat-on%20discord-7289da.svg&quot; alt=&quot;Join the chat at https://chat.quasar.dev&quot;&gt;&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://good-labs.github.io/greater-good-affirmation&quot;&gt;&lt;img src=&quot;https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg&quot; alt=&quot;https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Please submit a PR to https://github.com/quasarframework/quasar-awesome with your website/app/Quasar tutorial/video etc. Thank you!&lt;/p&gt; 
&lt;h2&gt;Supporting Quasar&lt;/h2&gt; 
&lt;p&gt;Quasar Framework is an MIT-licensed open source project. Its ongoing development is made possible thanks to the support by these awesome &lt;a href=&quot;https://github.com/rstoenescu/quasar-framework/blob/dev/backers.md&quot;&gt;backers&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Please read our manifest on &lt;a href=&quot;https://quasar.dev/why-donate&quot;&gt;Why donations are important&lt;/a&gt;&lt;/strong&gt;. If you&#39;d like to become a donator, check out &lt;a href=&quot;https://donate.quasar.dev&quot;&gt;Quasar Framework&#39;s Donator campaign&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Proudly sponsored by:&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Head on to the Quasar Framework official website: &lt;a href=&quot;https://quasar.dev&quot;&gt;https://quasar.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Stay in Touch&lt;/h2&gt; 
&lt;p&gt;For latest releases and announcements, follow on Twitter: &lt;a href=&quot;https://twitter.com/quasarframework&quot;&gt;@quasarframework&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Chat Support&lt;/h2&gt; 
&lt;p&gt;Ask questions at the official community Discord server: &lt;a href=&quot;https://chat.quasar.dev&quot;&gt;https://chat.quasar.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community Forum&lt;/h2&gt; 
&lt;p&gt;Ask questions at the official community forum: &lt;a href=&quot;https://forum.quasar.dev&quot;&gt;https://forum.quasar.dev&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://raw.githubusercontent.com/quasarframework/quasar/dev/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; before making a pull request. If you have a Quasar-related project/component/tool, add it with a pull request to &lt;a href=&quot;https://github.com/quasarframework/quasar-awesome&quot;&gt;this curated list&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;Thank you to all the people who already &lt;a href=&quot;https://github.com/quasarframework/quasar/graphs/contributors&quot;&gt;contributed to Quasar&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;Semver&lt;/h2&gt; 
&lt;p&gt;Quasar is following &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning 2.0&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2015-present Razvan Stoenescu&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>goldbergyoni/nodebestpractices</title>
      <link>https://github.com/goldbergyoni/nodebestpractices</link>
      <description>&lt;p&gt;✅ The Node.js best practices list (March 2021)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Best Practices&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nodepractices/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/twitter-s.png&quot; alt=&quot;nodepractices&quot;&gt;&lt;/a&gt; &lt;strong&gt;Follow us on Twitter!&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/nodepractices/&quot;&gt;&lt;strong&gt;@nodepractices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Read in a different language: &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.chinese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/CN.png&quot; alt=&quot;CN&quot;&gt;&lt;strong&gt;CN&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.brazilian-portuguese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/BR.png&quot; alt=&quot;BR&quot;&gt;&lt;strong&gt;BR&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.russian.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/RU.png&quot; alt=&quot;RU&quot;&gt;&lt;strong&gt;RU&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.polish.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/PL.png&quot; alt=&quot;PL&quot;&gt;&lt;strong&gt;PL&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.japanese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/JA.png&quot; alt=&quot;JA&quot;&gt;&lt;strong&gt;JA&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.basque.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png&quot; alt=&quot;EU&quot;&gt;&lt;strong&gt;EU&lt;/strong&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translations&quot;&gt;(&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/ES.png&quot; alt=&quot;ES&quot;&gt;&lt;strong&gt;ES&lt;/strong&gt;, &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/FR.png&quot; alt=&quot;FR&quot;&gt;&lt;strong&gt;FR&lt;/strong&gt;, &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/HE.png&quot; alt=&quot;HE&quot;&gt;&lt;strong&gt;HE&lt;/strong&gt;, &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/KR.png&quot; alt=&quot;KR&quot;&gt;&lt;strong&gt;KR&lt;/strong&gt; and &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/TR.png&quot; alt=&quot;TR&quot;&gt;&lt;strong&gt;TR&lt;/strong&gt; in progress! )&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h6&gt;Built and maintained by our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#steering-committee&quot;&gt;Steering Committee&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#collaborators&quot;&gt;Collaborators&lt;/a&gt;&lt;/h6&gt; 
&lt;h1&gt;Latest Best Practices and News&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png&quot; alt=&quot;EU&quot;&gt; Basque translation!:&lt;/strong&gt; wow even our Basque readers can read in their mother-tongue language! Courtesy of &lt;a href=&quot;https://github.com/anediaz&quot;&gt;Ane Diaz de Tuesta&lt;/a&gt; who did this all by her self&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🇯🇵 Japanese translation:&lt;/strong&gt; Our guide is now also translated to Japanese! Courtesy of the amazing &lt;a href=&quot;https://github.com/YukiOta&quot;&gt;YukiOta&lt;/a&gt; and &lt;a href=&quot;https://github.com/YA21&quot;&gt;Yuta Azumi&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;🎊 60,000 stars!&lt;/strong&gt;: Our repo was starred and trusted by 60,100 developers. We&#39;re speechless&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;Welcome! 3 Things You Ought To Know First&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;1. You are reading dozens of the best Node.js articles -&lt;/strong&gt; this repository is a summary and curation of the top-ranked content on Node.js best practices, as well as content written here by collaborators&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. It is the largest compilation, and it is growing every week -&lt;/strong&gt; currently, more than 80 best practices, style guides, and architectural tips are presented. New issues and pull requests are created every day to keep this live book updated. We&#39;d love to see you contributing here, whether that is fixing code mistakes, helping with translations, or suggesting brilliant new ideas. See our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/writing-guidelines.md&quot;&gt;writing guidelines here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. Best practices have additional info -&lt;/strong&gt; most bullets include a &lt;strong&gt;🔗Read More&lt;/strong&gt; link that expands on the practice with code examples, quotes from selected blogs, and more information&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#1-project-structure-practices&quot;&gt;Project Structure Practices (5)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#2-error-handling-practices&quot;&gt;Error Handling Practices (12) &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#3-code-style-practices&quot;&gt;Code Style Practices (12) &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#4-testing-and-overall-quality-practices&quot;&gt;Testing And Overall Quality Practices (13) &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#5-going-to-production-practices&quot;&gt;Going To Production Practices (19) &lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#6-security-best-practices&quot;&gt;Security Practices (25)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#7-draft-performance-best-practices&quot;&gt;Performance Practices (2) (Work In Progress️ ✍️)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#8-docker-best-practices&quot;&gt;Docker Practices (15)&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;1. Project Structure Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.1 Structure your solution by components&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The worst large applications pitfall is maintaining a huge code base with hundreds of dependencies - such a monolith slows down developers as they try to incorporate new features. Instead, partition your code into components, each gets its folder or a dedicated codebase, and ensure that each unit is kept small and simple. Visit &#39;Read More&#39; below to see examples of correct project structure&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When developers who code new features struggle to realize the impact of their change and fear to break other dependent components - deployments become slower and riskier. It&#39;s also considered harder to scale-out when all the business units are not separated&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/breakintcomponents.md&quot;&gt;&lt;strong&gt;Read More: structure by components&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.2 Layer your components, keep the web layer within its boundaries&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Each component should contain &#39;layers&#39; - a dedicated object for the web, logic, and data access code. This not only draws a clean separation of concerns but also significantly eases mocking and testing the system. Though this is a very common pattern, API developers tend to mix layers by passing the web layer objects (e.g. Express req, res) to business logic and data layers - this makes your application dependent on and accessible only by specific web frameworks&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; App that mixes web objects with other layers cannot be accessed by testing code, CRON jobs, triggers from message queues, etc&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/createlayers.md&quot;&gt;&lt;strong&gt;Read More: layer your app&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.3 Wrap common utilities as npm packages&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In a large app that constitutes a large codebase, cross-cutting-concern utilities like a logger, encryption and alike, should be wrapped by your code and exposed as private npm packages. This allows sharing them among multiple codebases and projects&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You&#39;ll have to invent your deployment and the dependency wheel&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/wraputilities.md&quot;&gt;&lt;strong&gt;Read More: Structure by feature&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.4 Separate Express &#39;app&#39; and &#39;server&#39;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid the nasty habit of defining the entire &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; app in a single huge file - separate your &#39;Express&#39; definition to at least two files: the API declaration (app.js) and the networking concerns (WWW). For even better structure, locate your API declaration within components&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your API will be accessible for testing via HTTP calls only (slower and much harder to generate coverage reports). It probably won&#39;t be a big pleasure to maintain hundreds of lines of code in a single file&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/separateexpress.md&quot;&gt;&lt;strong&gt;Read More: separate Express &#39;app&#39; and &#39;server&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 1.5 Use environment aware, secure and hierarchical config&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A perfect and flawless configuration setup should ensure (a) keys can be read from file AND from environment variable (b) secrets are kept outside committed code (c) config is hierarchical for easier findability. There are a few packages that can help tick most of those boxes like &lt;a href=&quot;https://www.npmjs.com/package/rc&quot;&gt;rc&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/nconf&quot;&gt;nconf&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/config&quot;&gt;config&lt;/a&gt;, and &lt;a href=&quot;https://www.npmjs.com/package/convict&quot;&gt;convict&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failing to satisfy any of the config requirements will simply bog down the development or DevOps team. Probably both&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/configguide.md&quot;&gt;&lt;strong&gt;Read More: configuration best practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;2. Error Handling Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.1 Use Async-Await or promises for async error handling&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Handling async errors in callback style is probably the fastest way to hell (a.k.a the pyramid of doom). The best gift you can give to your code is using a reputable promise library or async-await instead which enables a much more compact and familiar code syntax like try-catch&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Node.js callback style, function(err, response), is a promising way to un-maintainable code due to the mix of error handling with casual code, excessive nesting, and awkward coding patterns&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/asyncerrorhandling.md&quot;&gt;&lt;strong&gt;Read More: avoiding callbacks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.2 Use only the built-in Error object&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Many throw errors as a string or as some custom type – this complicates the error handling logic and the interoperability between modules. Whether you reject a promise, throw an exception or emit an error – using only the built-in Error object (or an object that extends the built-in Error object) will increase uniformity and prevent loss of information. There is &lt;code&gt;no-throw-literal&lt;/code&gt; ESLint rule that strictly checks that (although it have some &lt;a href=&quot;https://eslint.org/docs/rules/no-throw-literal&quot;&gt;limitations&lt;/a&gt; which can be solved when using TypeScript and setting the &lt;code&gt;@typescript-eslint/no-throw-literal&lt;/code&gt; rule)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When invoking some component, being uncertain which type of errors come in return – it makes proper error handling much harder. Even worse, using custom types to describe errors might lead to loss of critical error information like the stack trace!&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/useonlythebuiltinerror.md&quot;&gt;&lt;strong&gt;Read More: using the built-in error object&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.3 Distinguish operational vs programmer errors&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Operational errors (e.g. API received an invalid input) refer to known cases where the error impact is fully understood and can be handled thoughtfully. On the other hand, programmer error (e.g. trying to read an undefined variable) refers to unknown code failures that dictate to gracefully restart the application&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may always restart the application when an error appears, but why let ~5000 online users down because of a minor, predicted, operational error? the opposite is also not ideal – keeping the application up when an unknown issue (programmer error) occurred might lead to an unpredicted behavior. Differentiating the two allows acting tactfully and applying a balanced approach based on the given context&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/operationalvsprogrammererror.md&quot;&gt;&lt;strong&gt;Read More: operational vs programmer error&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.4 Handle errors centrally, not within a middleware&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Error handling logic such as mail to admin and logging should be encapsulated in a dedicated and centralized object that all endpoints (e.g. Express middleware, cron jobs, unit-testing) call when an error comes in&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Not handling errors within a single place will lead to code duplication and probably to improperly handled errors&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/centralizedhandling.md&quot;&gt;&lt;strong&gt;Read More: handling errors in a centralized place&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.5 Document API errors using Swagger or GraphQL&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Let your API callers know which errors might come in return so they can handle these thoughtfully without crashing. For RESTful APIs, this is usually done with documentation frameworks like Swagger. If you&#39;re using GraphQL, you can utilize your schema and comments as well.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An API client might decide to crash and restart only because it received back an error it couldn’t understand. Note: the caller of your API might be you (very typical in a microservice environment)&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/documentingusingswagger.md&quot;&gt;&lt;strong&gt;Read More: documenting API errors in Swagger or GraphQL&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.6 Exit the process gracefully when a stranger comes to town&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When an unknown error occurs (a developer error, see best practice 2.3) - there is uncertainty about the application healthiness. Common practice suggests restarting the process carefully using a process management tool like &lt;a href=&quot;https://www.npmjs.com/package/forever&quot;&gt;Forever&lt;/a&gt; or &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When an unfamiliar exception occurs, some object might be in a faulty state (e.g. an event emitter which is used globally and not firing events anymore due to some internal failure) and all future requests might fail or behave crazily&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/shuttingtheprocess.md&quot;&gt;&lt;strong&gt;Read More: shutting the process&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.7 Use a mature logger to increase error visibility&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A set of mature logging tools like &lt;a href=&quot;https://github.com/pinojs/pino&quot;&gt;Pino&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/log4js&quot;&gt;Log4js&lt;/a&gt;, will speed-up error discovery and understanding. So forget about console.log&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Skimming through console.logs or manually through messy text file without querying tools or a decent log viewer might keep you busy at work until late&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/usematurelogger.md&quot;&gt;&lt;strong&gt;Read More: using a mature logger&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.8 Test error flows using your favorite test framework&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Whether professional automated QA or plain manual developer testing – Ensure that your code not only satisfies positive scenarios but also handles and returns the right errors. Testing frameworks like Mocha &amp;amp; Chai can handle this easily (see code examples within the &quot;Gist popup&quot;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Without testing, whether automatically or manually, you can’t rely on your code to return the right errors. Without meaningful errors – there’s no error handling&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/testingerrorflows.md&quot;&gt;&lt;strong&gt;Read More: testing error flows&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.9 Discover errors and downtime using APM products&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Monitoring and performance products (a.k.a APM) proactively gauge your codebase or API so they can automagically highlight errors, crashes, and slow parts that you were missing&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You might spend great effort on measuring API performance and downtimes, probably you’ll never be aware which are your slowest code parts under real-world scenario and how these affect the UX&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/apmproducts.md&quot;&gt;&lt;strong&gt;Read More: using APM products&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.10 Catch unhandled promise rejections&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Any exception thrown within a promise will get swallowed and discarded unless a developer didn’t forget to explicitly handle it. Even if your code is subscribed to &lt;code&gt;process.uncaughtException&lt;/code&gt;! Overcome this by registering to the event &lt;code&gt;process.unhandledRejection&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your errors will get swallowed and leave no trace. Nothing to worry about&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/catchunhandledpromiserejection.md&quot;&gt;&lt;strong&gt;Read More: catching unhandled promise rejection&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.11 Fail fast, validate arguments using a dedicated library&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Assert API input to avoid nasty bugs that are much harder to track later. The validation code is usually tedious unless you are using a very cool helper library like &lt;a href=&quot;https://www.npmjs.com/package/ajv&quot;&gt;ajv&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/joi&quot;&gt;Joi&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Consider this – your function expects a numeric argument “Discount” which the caller forgets to pass, later on, your code checks if Discount!=0 (amount of allowed discount is greater than zero), then it will allow the user to enjoy a discount. OMG, what a nasty bug. Can you see it?&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/failfast.md&quot;&gt;&lt;strong&gt;Read More: failing fast&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 2.12 Always await promises before returning to avoid a partial stacktrace&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Always do &lt;code&gt;return await&lt;/code&gt; when returning a promise to benefit full error stacktrace. If a function returns a promise, that function must be declared as &lt;code&gt;async&lt;/code&gt; function and explicitly &lt;code&gt;await&lt;/code&gt; the promise before returning it&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The function that returns a promise without awaiting won&#39;t appear in the stacktrace. Such missing frames would probably complicate the understanding of the flow that leads to the error, especially if the cause of the abnormal behavior is inside of the missing function&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/returningpromises.md&quot;&gt;&lt;strong&gt;Read More: returning promises&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;3. Code Style Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.1 Use ESLint&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &lt;a href=&quot;https://eslint.org&quot;&gt;ESLint&lt;/a&gt; is the de-facto standard for checking possible code errors and fixing code style, not only to identify nitty-gritty spacing issues but also to detect serious code anti-patterns like developers throwing errors without classification. Though ESLint can automatically fix code styles, other tools like &lt;a href=&quot;https://www.npmjs.com/package/prettier&quot;&gt;prettier&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/js-beautify&quot;&gt;beautify&lt;/a&gt; are more powerful in formatting the fix and work in conjunction with ESLint&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Developers will focus on tedious spacing and line-width concerns and time might be wasted overthinking the project&#39;s code style&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/codestylepractices/eslint_prettier.md&quot;&gt;&lt;strong&gt;Read More: Using ESLint and Prettier&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.2 Node.js specific plugins&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; On top of ESLint standard rules that cover vanilla JavaScript, add Node.js specific plugins like &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-node&quot;&gt;eslint-plugin-node&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-mocha&quot;&gt;eslint-plugin-mocha&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-security&quot;&gt;eslint-plugin-node-security&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Many faulty Node.js code patterns might escape under the radar. For example, developers might require(variableAsPath) files with a variable given as a path which allows attackers to execute any JS script. Node.js linters can detect such patterns and complain early&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.3 Start a Codeblock&#39;s Curly Braces on the Same Line&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The opening curly braces of a code block should be on the same line as the opening statement&lt;/p&gt; 
&lt;h3&gt;Code Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
function someFunction() {
  // code block
}

// Avoid
function someFunction() {
  // code block
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Deferring from this best practice might lead to unexpected results, as seen in the StackOverflow thread below:&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;Why do results vary based on curly brace placement?&quot; (StackOverflow)&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.4 Separate your statements properly&lt;/h2&gt; 
&lt;p&gt;No matter if you use semicolons or not to separate your statements, knowing the common pitfalls of improper linebreaks or automatic semicolon insertion, will help you to eliminate regular syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use ESLint to gain awareness about separation concerns. &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; or &lt;a href=&quot;https://standardjs.com/&quot;&gt;Standardjs&lt;/a&gt; can automatically resolve these issues.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; As seen in the previous section, JavaScript&#39;s interpreter automatically adds a semicolon at the end of a statement if there isn&#39;t one, or considers a statement as not ended where it should, which might lead to some undesired results. You can use assignments and avoid using immediately invoked function expressions to prevent most of the unexpected errors.&lt;/p&gt; 
&lt;h3&gt;Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
function doThing() {
    // ...
}

doThing()

// Do

const items = [1, 2, 3]
items.forEach(console.log)

// Avoid — throws exception
const m = new Map()
const a = [1,2,3]
[...m.values()].forEach(console.log)
&amp;gt; [...m.values()].forEach(console.log)
&amp;gt;  ^^^
&amp;gt; SyntaxError: Unexpected token ...

// Avoid — throws exception
const count = 2 // it tries to run 2(), but 2 is not a function
(function doSomething() {
  // do something amazing
}())
// put a semicolon before the immediate invoked function, after the const definition, save the return value of the anonymous function to a variable or avoid IIFEs altogether
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://eslint.org/docs/rules/semi&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;Semi ESLint rule&quot;&lt;/a&gt; 🔗 &lt;a href=&quot;https://eslint.org/docs/rules/no-unexpected-multiline&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;No unexpected multiline ESLint rule&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.5 Name your functions&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Name all functions, including closures and callbacks. Avoid anonymous functions. This is especially useful when profiling a node app. Naming all functions will allow you to easily understand what you&#39;re looking at when checking a memory snapshot&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Debugging production issues using a core dump (memory snapshot) might become challenging as you notice significant memory consumption from anonymous functions&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.6 Use naming conventions for variables, constants, functions and classes&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use &lt;strong&gt;&lt;em&gt;lowerCamelCase&lt;/em&gt;&lt;/strong&gt; when naming constants, variables and functions and &lt;strong&gt;&lt;em&gt;UpperCamelCase&lt;/em&gt;&lt;/strong&gt; (capital first letter as well) when naming classes. This will help you to easily distinguish between plain variables/functions, and classes that require instantiation. Use descriptive names, but try to keep them short&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; JavaScript is the only language in the world that allows invoking a constructor (&quot;Class&quot;) directly without instantiating it first. Consequently, Classes and function-constructors are differentiated by starting with UpperCamelCase&lt;/p&gt; 
&lt;h3&gt;3.6 Code Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// for class name we use UpperCamelCase
class SomeClassExample {}

// for const names we use the const keyword and lowerCamelCase
const config = {
  key: &quot;value&quot;,
};

// for variables and functions names we use lowerCamelCase
let someVariableExample = &quot;value&quot;;
function doSomething() {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.7 Prefer const over let. Ditch the var&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Using &lt;code&gt;const&lt;/code&gt; means that once a variable is assigned, it cannot be reassigned. Preferring &lt;code&gt;const&lt;/code&gt; will help you to not be tempted to use the same variable for different uses, and make your code clearer. If a variable needs to be reassigned, in a for loop, for example, use &lt;code&gt;let&lt;/code&gt; to declare it. Another important aspect of &lt;code&gt;let&lt;/code&gt; is that a variable declared using it is only available in the block scope in which it was defined. &lt;code&gt;var&lt;/code&gt; is function scoped, not block-scoped, and &lt;a href=&quot;https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70&quot;&gt;shouldn&#39;t be used in ES6&lt;/a&gt; now that you have &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; at your disposal&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Debugging becomes way more cumbersome when following a variable that frequently changes&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75&quot;&gt;&lt;strong&gt;Read more: JavaScript ES6+: var, let, or const?&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.8 Require modules first, not inside functions&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Require modules at the beginning of each file, before and outside of any functions. This simple best practice will not only help you easily and quickly tell the dependencies of a file right at the top but also avoids a couple of potential problems&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Requires are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. Also, if a required module or any of its dependencies throw an error and crash the server, it is best to find out about it as soon as possible, which might not be the case if that module is required from within a function&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.9 Require modules by folders, as opposed to the files directly&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When developing a module/library in a folder, place an index.js file that exposes the module&#39;s internals so every consumer will pass through it. This serves as an &#39;interface&#39; to your module and eases future changes without breaking the contract&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Changing the internal structure of files or the signature may break the interface with clients&lt;/p&gt; 
&lt;h3&gt;3.9 Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
module.exports.SMSProvider = require(&quot;./SMSProvider&quot;);
module.exports.SMSNumberResolver = require(&quot;./SMSNumberResolver&quot;);

// Avoid
module.exports.SMSProvider = require(&quot;./SMSProvider/SMSProvider.js&quot;);
module.exports.SMSNumberResolver = require(&quot;./SMSNumberResolver/SMSNumberResolver.js&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.10 Use the &lt;code&gt;===&lt;/code&gt; operator&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Prefer the strict equality operator &lt;code&gt;===&lt;/code&gt; over the weaker abstract equality operator &lt;code&gt;==&lt;/code&gt;. &lt;code&gt;==&lt;/code&gt; will compare two variables after converting them to a common type. There is no type conversion in &lt;code&gt;===&lt;/code&gt;, and both variables must be of the same type to be equal&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Unequal variables might return true when compared with the &lt;code&gt;==&lt;/code&gt; operator&lt;/p&gt; 
&lt;h3&gt;3.10 Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;&quot; == &quot;0&quot;; // false
0 == &quot;&quot;; // true
0 == &quot;0&quot;; // true

false == &quot;false&quot;; // false
false == &quot;0&quot;; // true

false == undefined; // false
false == null; // false
null == undefined; // true

&quot; \t\r\n &quot; == 0; // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All statements above will return false if used with &lt;code&gt;===&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.11 Use Async Await, avoid callbacks&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node 8 LTS now has full support for Async-await. This is a new way of dealing with asynchronous code which supersedes callbacks and promises. Async-await is non-blocking, and it makes asynchronous code look synchronous. The best gift you can give to your code is using async-await which provides a much more compact and familiar code syntax like try-catch&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Handling async errors in callback style are probably the fastest way to hell - this style forces to check errors all over, deal with awkward code nesting, and makes it difficult to reason about the code flow&lt;/p&gt; 
&lt;p&gt;🔗&lt;a href=&quot;https://github.com/yortus/asyncawait&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; Guide to async-await 1.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 3.12 Use arrow function expressions (=&amp;gt;)&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Though it&#39;s recommended to use async-await and avoid function parameters when dealing with older APIs that accept promises or callbacks - arrow functions make the code structure more compact and keep the lexical context of the root function (i.e. &lt;code&gt;this&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Longer code (in ES5 functions) is more prone to bugs and cumbersome to read&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75&quot;&gt;&lt;strong&gt;Read more: It’s Time to Embrace Arrow Functions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;4. Testing And Overall Quality Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.1 At the very least, write API (component) testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Most projects just don&#39;t have any automated testing due to short timetables or often the &#39;testing project&#39; ran out of control and was abandoned. For that reason, prioritize and start with API testing which is the easiest way to write and provides more coverage than unit testing (you may even craft API tests without code using tools like &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;). Afterward, should you have more resources and time, continue with advanced test types like unit testing, DB testing, performance testing, etc&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may spend long days on writing unit tests to find out that you got only 20% system coverage&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.2 Include 3 parts in each test name&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Make the test speak at the requirements level so it&#39;s self-explanatory also to QA engineers and developers who are not familiar with the code internals. State in the test name what is being tested (unit under test), under what circumstances, and what is the expected result&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A deployment just failed, a test named “Add product” failed. Does this tell you what exactly is malfunctioning?&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/3-parts-in-name.md&quot;&gt;&lt;strong&gt;Read More: Include 3 parts in each test name&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.3 Structure tests by the AAA pattern&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Structure your tests with 3 well-separated sections: Arrange, Act &amp;amp; Assert (AAA). The first part includes the test setup, then the execution of the unit under test, and finally the assertion phase. Following this structure guarantees that the reader spends no brain CPU on understanding the test plan&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Not only you spend long daily hours on understanding the main code, but now also what should have been the simple part of the day (testing) stretches your brain&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/aaa.md&quot;&gt;&lt;strong&gt;Read More: Structure tests by the AAA pattern&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.4 Detect code issues with a linter&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use a code linter to check the basic quality and detect anti-patterns early. Run it before any test and add it as a pre-commit git-hook to minimize the time needed to review and correct any issue. Also check &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#3-code-style-practices&quot;&gt;Section 3&lt;/a&gt; on Code Style Practices&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may let pass some anti-pattern and possible vulnerable code to your production environment.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.5 Avoid global test fixtures and seeds, add data per-test&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; To prevent test coupling and easily reason about the test flow, each test should add and act on its own set of DB rows. Whenever a test needs to pull or assume the existence of some DB data - it must explicitly add that data and avoid mutating any other records&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Consider a scenario where deployment is aborted due to failing tests, team is now going to spend precious investigation time that ends in a sad conclusion: the system works well, the tests however interfere with each other and break the build&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/avoid-global-test-fixture.md&quot;&gt;&lt;strong&gt;Read More: Avoid global test fixtures&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.6 Constantly inspect for vulnerable dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Even the most reputable dependencies such as Express have known vulnerabilities. This can get easily tamed using community and commercial tools such as 🔗 &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;npm audit&lt;/a&gt; and 🔗 &lt;a href=&quot;https://snyk.io&quot;&gt;snyk.io&lt;/a&gt; that can be invoked from your CI on every build&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Keeping your code clean from vulnerabilities without dedicated tools will require to constantly follow online publications about new threats. Quite tedious&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.7 Tag your tests&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Different tests must run on different scenarios: quick smoke, IO-less, tests should run when a developer saves or commits a file, full end-to-end tests usually run when a new pull request is submitted, etc. This can be achieved by tagging tests with keywords like #cold #api #sanity so you can grep with your testing harness and invoke the desired subset. For example, this is how you would invoke only the sanity test group with &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;: mocha --grep &#39;sanity&#39;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Running all the tests, including tests that perform dozens of DB queries, any time a developer makes a small change can be extremely slow and keeps developers away from running tests&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.8 Check your test coverage, it helps to identify wrong test patterns&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Code coverage tools like &lt;a href=&quot;https://github.com/istanbuljs/istanbuljs&quot;&gt;Istanbul&lt;/a&gt;/&lt;a href=&quot;https://github.com/istanbuljs/nyc&quot;&gt;NYC&lt;/a&gt; are great for 3 reasons: it comes for free (no effort is required to benefit this reports), it helps to identify a decrease in testing coverage, and last but not least it highlights testing mismatches: by looking at colored code coverage reports you may notice, for example, code areas that are never tested like catch clauses (meaning that tests only invoke the happy paths and not how the app behaves on errors). Set it to fail builds if the coverage falls under a certain threshold&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; There won&#39;t be any automated metric telling you when a large portion of your code is not covered by testing&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.9 Inspect for outdated packages&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use your preferred tool (e.g. &lt;code&gt;npm outdated&lt;/code&gt; or &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;npm-check-updates&lt;/a&gt;) to detect installed outdated packages, inject this check into your CI pipeline and even make a build fail in a severe scenario. For example, a severe scenario might be when an installed package is 5 patch commits behind (e.g. local version is 1.3.1 and repository version is 1.3.8) or it is tagged as deprecated by its author - kill the build and prevent deploying this version&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your production will run packages that have been explicitly tagged by their author as risky&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.10 Use production-like environment for e2e testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; End to end (e2e) testing which includes live data used to be the weakest link of the CI process as it depends on multiple heavy services like DB. Use an environment which is as close to your real production environment as possible like a-continue (Missed -continue here, needs content. Judging by the &lt;strong&gt;Otherwise&lt;/strong&gt; clause, this should mention docker-compose)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Without docker-compose, teams must maintain a testing DB for each testing environment including developers&#39; machines, keep all those DBs in sync so test results won&#39;t vary across environments&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.11 Refactor regularly using static analysis tools&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Using static analysis tools helps by giving objective ways to improve code quality and keeps your code maintainable. You can add static analysis tools to your CI build to fail when it finds code smells. Its main selling points over plain linting are the ability to inspect quality in the context of multiple files (e.g. detect duplications), perform advanced analysis (e.g. code complexity), and follow the history and progress of code issues. Two examples of tools you can use are &lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;Sonarqube&lt;/a&gt; (2,600+ &lt;a href=&quot;https://github.com/SonarSource/sonarqube&quot;&gt;stars&lt;/a&gt;) and &lt;a href=&quot;https://codeclimate.com/&quot;&gt;Code Climate&lt;/a&gt; (1,500+ &lt;a href=&quot;https://github.com/codeclimate/codeclimate&quot;&gt;stars&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; With poor code quality, bugs and performance will always be an issue that no shiny new library or state of the art features can fix&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/refactoring.md&quot;&gt;&lt;strong&gt;Read More: Refactoring!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.12 Carefully choose your CI platform (Jenkins vs CircleCI vs Travis vs Rest of the world)&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your continuous integration platform (CICD) will host all the quality tools (e.g. test, lint) so it should come with a vibrant ecosystem of plugins. &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; used to be the default for many projects as it has the biggest community along with a very powerful platform at the price of a complex setup that demands a steep learning curve. Nowadays, it has become much easier to set up a CI solution using SaaS tools like &lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt; and others. These tools allow crafting a flexible CI pipeline without the burden of managing the whole infrastructure. Eventually, it&#39;s a trade-off between robustness and speed - choose your side carefully&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Choosing some niche vendor might get you blocked once you need some advanced customization. On the other hand, going with Jenkins might burn precious time on infrastructure setup&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/citools.md&quot;&gt;&lt;strong&gt;Read More: Choosing CI platform&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 4.13 Test your middlewares in isolation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When a middleware holds some immense logic that spans many requests, it is worth testing it in isolation without waking up the entire web framework. This can be easily achieved by stubbing and spying on the {req, res, next} objects&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A bug in Express middleware === a bug in all or most requests&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/test-middlewares.md&quot;&gt;&lt;strong&gt;Read More: Test middlewares in isolation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;5. Going To Production Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.1. Monitoring&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Monitoring is a game of finding out issues before customers do – obviously this should be assigned unprecedented importance. The market is overwhelmed with offers thus consider starting with defining the basic metrics you must follow (my suggestions inside), then go over additional fancy features and choose the solution that ticks all boxes. Click ‘The Gist’ below for an overview of the solutions&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failure === disappointed customers. Simple&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/monitoring.md&quot;&gt;&lt;strong&gt;Read More: Monitoring!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.2. Increase transparency using smart logging&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Logs can be a dumb warehouse of debug statements or the enabler of a beautiful dashboard that tells the story of your app. Plan your logging platform from day 1: how logs are collected, stored and analyzed to ensure that the desired information (e.g. error rate, following an entire transaction through services and servers, etc) can really be extracted&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You end up with a black box that is hard to reason about, then you start re-writing all logging statements to add additional information&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/smartlogging.md&quot;&gt;&lt;strong&gt;Read More: Increase transparency using smart logging&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.3. Delegate anything possible (e.g. gzip, SSL) to a reverse proxy&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node is awfully bad at doing CPU intensive tasks like gzipping, SSL termination, etc. You should use ‘real’ middleware services like nginx, HAproxy or cloud vendor services instead&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your poor single thread will stay busy doing infrastructural tasks instead of dealing with your application core and performance will degrade accordingly&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/delegatetoproxy.md&quot;&gt;&lt;strong&gt;Read More: Delegate anything possible (e.g. gzip, SSL) to a reverse proxy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.4. Lock dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your code must be identical across all environments, but amazingly npm lets dependencies drift across environments by default – when you install packages at various environments it tries to fetch packages’ latest patch version. Overcome this by using npm config files, .npmrc, that tell each environment to save the exact (not the latest) version of each package. Alternatively, for finer grained control use &lt;code&gt;npm shrinkwrap&lt;/code&gt;. *Update: as of NPM5, dependencies are locked by default. The new package manager in town, Yarn, also got us covered by default&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/lockdependencies.md&quot;&gt;&lt;strong&gt;Read More: Lock dependencies&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.5. Guard process uptime using the right tool&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The process must go on and get restarted upon failures. For simple scenarios, process management tools like PM2 might be enough but in today&#39;s ‘dockerized’ world, cluster management tools should be considered as well&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Running dozens of instances without a clear strategy and too many tools together (cluster management, docker, PM2) might lead to DevOps chaos&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/guardprocess.md&quot;&gt;&lt;strong&gt;Read More: Guard process uptime using the right tool&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.6. Utilize all CPU cores&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; At its basic form, a Node app runs on a single CPU core while all others are left idling. It’s your duty to replicate the Node process and utilize all CPUs – For small-medium apps you may use Node Cluster or PM2. For a larger app consider replicating the process using some Docker cluster (e.g. K8S, ECS) or deployment scripts that are based on Linux init system (e.g. systemd)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your app will likely utilize only 25% of its available resources(!) or even less. Note that a typical server has 4 CPU cores or more, naive deployment of Node.js utilizes only 1 (even using PaaS services like AWS beanstalk!)&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/utilizecpu.md&quot;&gt;&lt;strong&gt;Read More: Utilize all CPU cores&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.7. Create a ‘maintenance endpoint’&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Expose a set of system-related information, like memory usage and REPL, etc in a secured API. Although it’s highly recommended to rely on standard and battle-tests tools, some valuable information and operations are easier done using code&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You’ll find that you’re performing many “diagnostic deploys” – shipping code to production only to extract some information for diagnostic purposes&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/createmaintenanceendpoint.md&quot;&gt;&lt;strong&gt;Read More: Create a ‘maintenance endpoint’&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.8. Discover errors and downtime using APM products&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Application monitoring and performance products (a.k.a. APM) proactively gauge codebase and API so they can auto-magically go beyond traditional monitoring and measure the overall user-experience across services and tiers. For example, some APM products can highlight a transaction that loads too slow on the end-user&#39;s side while suggesting the root cause&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You might spend great effort on measuring API performance and downtimes, probably you’ll never be aware which is your slowest code parts under real-world scenario and how these affect the UX&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/apmproducts.md&quot;&gt;&lt;strong&gt;Read More: Discover errors and downtime using APM products&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.9. Make your code production-ready&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Code with the end in mind, plan for production from day 1. This sounds a bit vague so I’ve compiled a few development tips that are closely related to production maintenance (click Gist below)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A world champion IT/DevOps guy won’t save a system that is badly written&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/productioncode.md&quot;&gt;&lt;strong&gt;Read More: Make your code production-ready&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.10. Measure and guard the memory usage&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node.js has controversial relationships with memory: the v8 engine has soft limits on memory usage (1.4GB) and there are known paths to leak memory in Node’s code – thus watching Node’s process memory is a must. In small apps, you may gauge memory periodically using shell commands but in medium-large apps consider baking your memory watch into a robust monitoring system&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your process memory might leak a hundred megabytes a day like how it happened at &lt;a href=&quot;https://www.joyent.com/blog/walmart-node-js-memory-leak&quot;&gt;Walmart&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/measurememory.md&quot;&gt;&lt;strong&gt;Read More: Measure and guard the memory usage&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.11. Get your frontend assets out of Node&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Serve frontend content using dedicated middleware (nginx, S3, CDN) because Node performance really gets hurt when dealing with many static files due to its single-threaded model&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your single Node thread will be busy streaming hundreds of html/images/angular/react files instead of allocating all its resources for the task it was born for – serving dynamic content&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/frontendout.md&quot;&gt;&lt;strong&gt;Read More: Get your frontend assets out of Node&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.12. Be stateless, kill your servers almost every day&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Store any type of data (e.g. user sessions, cache, uploaded files) within external data stores. Consider ‘killing’ your servers periodically or use ‘serverless’ platform (e.g. AWS Lambda) that explicitly enforces a stateless behavior&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failure at a given server will result in application downtime instead of just killing a faulty machine. Moreover, scaling-out elasticity will get more challenging due to the reliance on a specific server&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/bestateless.md&quot;&gt;&lt;strong&gt;Read More: Be stateless, kill your Servers almost every day&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.13. Use tools that automatically detect vulnerabilities&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Even the most reputable dependencies such as Express have known vulnerabilities (from time to time) that can put a system at risk. This can be easily tamed using community and commercial tools that constantly check for vulnerabilities and warn (locally or at GitHub), some can even patch them immediately&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Keeping your code clean from vulnerabilities without dedicated tools will require you to constantly follow online publications about new threats. Quite tedious&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/detectvulnerabilities.md&quot;&gt;&lt;strong&gt;Read More: Use tools that automatically detect vulnerabilities&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.14. Assign a transaction id to each log statement&lt;/h2&gt; 
&lt;p&gt;Also known as correlation id / transit id / tracing id / request id / request context / etc.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Assign the same identifier, transaction-id: {some value}, to each log entry within a single request. Then when inspecting errors in logs, easily conclude what happened before and after. Until version 14 of Node, this was not easy to achieve due to Node&#39;s async nature, but since AsyncLocalStorage came to town, this became possible and easy than ever. see code examples inside&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Looking at a production error log without the context – what happened before – makes it much harder and slower to reason about the issue&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/assigntransactionid.md&quot;&gt;&lt;strong&gt;Read More: Assign ‘TransactionId’ to each log statement&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.15. Set &lt;code&gt;NODE_ENV=production&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Set the environment variable &lt;code&gt;NODE_ENV&lt;/code&gt; to ‘production’ or ‘development’ to flag whether production optimizations should get activated – many npm packages determine the current environment and optimize their code for production&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Omitting this simple property might greatly degrade performance. For example, when using Express for server-side rendering omitting &lt;code&gt;NODE_ENV&lt;/code&gt; makes it slower by a factor of three!&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/setnodeenv.md&quot;&gt;&lt;strong&gt;Read More: Set NODE_ENV=production&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.16. Design automated, atomic and zero-downtime deployments&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Research shows that teams who perform many deployments lower the probability of severe production issues. Fast and automated deployments that don’t require risky manual steps and service downtime significantly improve the deployment process. You should probably achieve this using Docker combined with CI tools as they became the industry standard for streamlined deployment&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Long deployments -&amp;gt; production downtime &amp;amp; human-related error -&amp;gt; team unconfident in making deployment -&amp;gt; fewer deployments and features&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.17. Use an LTS release of Node.js&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Ensure you are using an LTS version of Node.js to receive critical bug fixes, security updates and performance improvements&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Newly discovered bugs or vulnerabilities could be used to exploit an application running in production, and your application may become unsupported by various modules and harder to maintain&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/LTSrelease.md&quot;&gt;&lt;strong&gt;Read More: Use an LTS release of Node.js&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.18. Don&#39;t route logs within the app&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Log destinations should not be hard-coded by developers within the application code, but instead should be defined by the execution environment the application runs in. Developers should write logs to &lt;code&gt;stdout&lt;/code&gt; using a logger utility and then let the execution environment (container, server, etc.) pipe the &lt;code&gt;stdout&lt;/code&gt; stream to the appropriate destination (i.e. Splunk, Graylog, ElasticSearch, etc.).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Application handling log routing === hard to scale, loss of logs, poor separation of concerns&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/logrouting.md&quot;&gt;&lt;strong&gt;Read More: Log Routing&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 5.19. Install your packages with &lt;code&gt;npm ci&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; You have to be sure that production code uses the exact version of the packages you have tested it with. Run &lt;code&gt;npm ci&lt;/code&gt; to strictly do a clean install of your dependencies matching package.json and package-lock.json. Using this command is recommended in automated environments such as continuous integration pipelines.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/installpackageswithnpmci.md&quot;&gt;&lt;strong&gt;Read More: Use npm ci&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;6. Security Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.1. Embrace linter security rules&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Make use of security-related linter plugins such as &lt;a href=&quot;https://github.com/nodesecurity/eslint-plugin-security&quot;&gt;eslint-plugin-security&lt;/a&gt; to catch security vulnerabilities and issues as early as possible, preferably while they&#39;re being coded. This can help catching security weaknesses like using eval, invoking a child process or importing a module with a string literal (e.g. user input). Click &#39;Read more&#39; below to see code examples that will get caught by a security linter&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; What could have been a straightforward security weakness during development becomes a major issue in production. Also, the project may not follow consistent code security practices, leading to vulnerabilities being introduced, or sensitive secrets committed into remote repositories&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/lintrules.md&quot;&gt;&lt;strong&gt;Read More: Lint rules&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.2. Limit concurrent requests using a middleware&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; DOS attacks are very popular and relatively easy to conduct. Implement rate limiting using an external service such as cloud load balancers, cloud firewalls, nginx, &lt;a href=&quot;https://www.npmjs.com/package/rate-limiter-flexible&quot;&gt;rate-limiter-flexible&lt;/a&gt; package, or (for smaller and less critical apps) a rate-limiting middleware (e.g. &lt;a href=&quot;https://www.npmjs.com/package/express-rate-limit&quot;&gt;express-rate-limit&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An application could be subject to an attack resulting in a denial of service where real users receive a degraded or unavailable service.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/limitrequests.md&quot;&gt;&lt;strong&gt;Read More: Implement rate limiting&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.3 Extract secrets from config files or use packages to encrypt them&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Never store plain-text secrets in configuration files or source code. Instead, make use of secret-management systems like Vault products, Kubernetes/Docker Secrets, or using environment variables. As a last resort, secrets stored in source control must be encrypted and managed (rolling keys, expiring, auditing, etc). Make use of pre-commit/push hooks to prevent committing secrets accidentally&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Source control, even for private repositories, can mistakenly be made public, at which point all secrets are exposed. Access to source control for an external party will inadvertently provide access to related systems (databases, apis, services, etc).&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/secretmanagement.md&quot;&gt;&lt;strong&gt;Read More: Secret management&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.4. Prevent query injection vulnerabilities with ORM/ODM libraries&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; To prevent SQL/NoSQL injection and other malicious attacks, always make use of an ORM/ODM or a database library that escapes data or supports named or indexed parameterized queries, and takes care of validating user input for expected types. Never just use JavaScript template strings or string concatenation to inject values into queries as this opens your application to a wide spectrum of vulnerabilities. All the reputable Node.js data access libraries (e.g. &lt;a href=&quot;https://github.com/sequelize/sequelize&quot;&gt;Sequelize&lt;/a&gt;, &lt;a href=&quot;https://github.com/tgriesser/knex&quot;&gt;Knex&lt;/a&gt;, &lt;a href=&quot;https://github.com/Automattic/mongoose&quot;&gt;mongoose&lt;/a&gt;) have built-in protection against injection attacks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Unvalidated or unsanitized user input could lead to operator injection when working with MongoDB for NoSQL, and not using a proper sanitization system or ORM will easily allow SQL injection attacks, creating a giant vulnerability.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/ormodmusage.md&quot;&gt;&lt;strong&gt;Read More: Query injection prevention using ORM/ODM libraries&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.5. Collection of generic security best practices&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; This is a collection of security advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/commonsecuritybestpractices.md&quot;&gt;&lt;strong&gt;Read More: Common security best practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.6. Adjust the HTTP response headers for enhanced security&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your application should be using secure headers to prevent attackers from using common attacks like cross-site scripting (XSS), clickjacking and other malicious attacks. These can be configured easily using modules like &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Attackers could perform direct attacks on your application&#39;s users, leading to huge security vulnerabilities&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/secureheaders.md&quot;&gt;&lt;strong&gt;Read More: Using secure headers in your application&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.7. Constantly and automatically inspect for vulnerable dependencies&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; With the npm ecosystem it is common to have many dependencies for a project. Dependencies should always be kept in check as new vulnerabilities are found. Use tools like &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;npm audit&lt;/a&gt; or &lt;a href=&quot;https://snyk.io/&quot;&gt;snyk&lt;/a&gt; to track, monitor and patch vulnerable dependencies. Integrate these tools with your CI setup so you catch a vulnerable dependency before it makes it to production.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker could detect your web framework and attack all its known vulnerabilities.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/dependencysecurity.md&quot;&gt;&lt;strong&gt;Read More: Dependency security&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.8. Protect Users&#39; Passwords/Secrets using bcrypt or scrypt&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Passwords or secrets (e.g. API keys) should be stored using a secure hash + salt function like &lt;code&gt;bcrypt&lt;/code&gt;,&lt;code&gt;scrypt&lt;/code&gt;, or worst case &lt;code&gt;pbkdf2&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Passwords and secrets that are stored without using a secure function are vulnerable to brute forcing and dictionary attacks that will lead to their disclosure eventually.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/userpasswords.md&quot;&gt;&lt;strong&gt;Read More: User Passwords&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.9. Escape HTML, JS and CSS output&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Untrusted data that is sent down to the browser might get executed instead of just being displayed, this is commonly referred as a cross-site-scripting (XSS) attack. Mitigate this by using dedicated libraries that explicitly mark the data as pure content that should never get executed (i.e. encoding, escaping)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker might store malicious JavaScript code in your DB which will then be sent as-is to the poor clients&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/escape-output.md&quot;&gt;&lt;strong&gt;Read More: Escape output&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.10. Validate incoming JSON schemas&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Validate the incoming requests&#39; body payload and ensure it meets expectations, fail fast if it doesn&#39;t. To avoid tedious validation coding within each route you may use lightweight JSON-based validation schemas such as &lt;a href=&quot;https://www.npmjs.com/package/jsonschema&quot;&gt;jsonschema&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/joi&quot;&gt;joi&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your generosity and permissive approach greatly increases the attack surface and encourages the attacker to try out many inputs until they find some combination to crash the application&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/validation.md&quot;&gt;&lt;strong&gt;Read More: Validate incoming JSON schemas&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.11. Support blocklisting JWTs&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When using JSON Web Tokens (for example, with &lt;a href=&quot;https://github.com/jaredhanson/passport&quot;&gt;Passport.js&lt;/a&gt;), by default there&#39;s no mechanism to revoke access from issued tokens. Once you discover some malicious user activity, there&#39;s no way to stop them from accessing the system as long as they hold a valid token. Mitigate this by implementing a blocklist of untrusted tokens that are validated on each request.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Expired, or misplaced tokens could be used maliciously by a third party to access an application and impersonate the owner of the token.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/expirejwt.md&quot;&gt;&lt;strong&gt;Read More: Blocklist JSON Web Tokens&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.12. Prevent brute-force attacks against authorization&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A simple and powerful technique is to limit authorization attempts using two metrics:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first is number of consecutive failed attempts by the same user unique ID/name and IP address.&lt;/li&gt; 
 &lt;li&gt;The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker can issue unlimited automated password attempts to gain access to privileged accounts on an application&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/login-rate-limit.md&quot;&gt;&lt;strong&gt;Read More: Login rate limiting&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.13. Run Node.js as non-root user&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; There is a common scenario where Node.js runs as a root user with unlimited permissions. For example, this is the default behaviour in Docker containers. It&#39;s recommended to create a non-root user and either bake it into the Docker image (examples given below) or run the process on this user&#39;s behalf by invoking the container with the flag &quot;-u username&quot;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker who manages to run a script on the server gets unlimited power over the local machine (e.g. change iptable and re-route traffic to his server)&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/non-root-user.md&quot;&gt;&lt;strong&gt;Read More: Run Node.js as non-root user&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.14. Limit payload size using a reverse-proxy or a middleware&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The bigger the body payload is, the harder your single thread works in processing it. This is an opportunity for attackers to bring servers to their knees without tremendous amount of requests (DOS/DDOS attacks). Mitigate this limiting the body size of incoming requests on the edge (e.g. firewall, ELB) or by configuring &lt;a href=&quot;https://github.com/expressjs/body-parser&quot;&gt;express body parser&lt;/a&gt; to accept only small-size payloads&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your application will have to deal with large requests, unable to process the other important work it has to accomplish, leading to performance implications and vulnerability towards DOS attacks&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/requestpayloadsizelimit.md&quot;&gt;&lt;strong&gt;Read More: Limit payload size&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.15. Avoid JavaScript eval statements&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &lt;code&gt;eval&lt;/code&gt; is evil as it allows executing custom JavaScript code during run time. This is not just a performance concern but also an important security concern due to malicious JavaScript code that may be sourced from user input. Another language feature that should be avoided is &lt;code&gt;new Function&lt;/code&gt; constructor. &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; should never be passed dynamic JavaScript code either.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Malicious JavaScript code finds a way into text passed into &lt;code&gt;eval&lt;/code&gt; or other real-time evaluating JavaScript language functions, and will gain complete access to JavaScript permissions on the page. This vulnerability is often manifested as an XSS attack.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/avoideval.md&quot;&gt;&lt;strong&gt;Read More: Avoid JavaScript eval statements&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.16. Prevent evil RegEx from overloading your single thread execution&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Regular Expressions, while being handy, pose a real threat to JavaScript applications at large, and the Node.js platform in particular. A user input for text to match might require an outstanding amount of CPU cycles to process. RegEx processing might be inefficient to an extent that a single request that validates 10 words can block the entire event loop for 6 seconds and set the CPU on 🔥. For that reason, prefer third-party validation packages like &lt;a href=&quot;https://github.com/chriso/validator.js&quot;&gt;validator.js&lt;/a&gt; instead of writing your own Regex patterns, or make use of &lt;a href=&quot;https://github.com/substack/safe-regex&quot;&gt;safe-regex&lt;/a&gt; to detect vulnerable regex patterns&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Poorly written regexes could be susceptible to Regular Expression DoS attacks that will block the event loop completely. For example, the popular &lt;code&gt;moment&lt;/code&gt; package was found vulnerable with malicious RegEx usage in November of 2017&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/regex.md&quot;&gt;&lt;strong&gt;Read More: Prevent malicious RegEx&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.17. Avoid module loading using a variable&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid requiring/importing another file with a path that was given as parameter due to the concern that it could have originated from user input. This rule can be extended for accessing files in general (i.e. &lt;code&gt;fs.readFile()&lt;/code&gt;) or other sensitive resource access with dynamic variables originating from user input. &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-security&quot;&gt;Eslint-plugin-security&lt;/a&gt; linter can catch such patterns and warn early enough&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Malicious user input could find its way to a parameter that is used to require tampered files, for example, a previously uploaded file on the file system, or access already existing system files.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/safemoduleloading.md&quot;&gt;&lt;strong&gt;Read More: Safe module loading&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.18. Run unsafe code in a sandbox&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When tasked to run external code that is given at run-time (e.g. plugin), use any sort of &#39;sandbox&#39; execution environment that isolates and guards the main code against the plugin. This can be achieved using a dedicated process (e.g. &lt;code&gt;cluster.fork()&lt;/code&gt;), serverless environment or dedicated npm packages that act as a sandbox&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A plugin can attack through an endless variety of options like infinite loops, memory overloading, and access to sensitive process environment variables&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/sandbox.md&quot;&gt;&lt;strong&gt;Read More: Run unsafe code in a sandbox&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.19. Take extra care when working with child processes&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid using child processes when possible and validate and sanitize input to mitigate shell injection attacks if you still have to. Prefer using &lt;code&gt;child_process.execFile&lt;/code&gt; which by definition will only execute a single command with a set of attributes and will not allow shell parameter expansion.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Naive use of child processes could result in remote command execution or shell injection attacks due to malicious user input passed to an unsanitized system command.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/childprocesses.md&quot;&gt;&lt;strong&gt;Read More: Be cautious when working with child processes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.20. Hide error details from clients&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; An integrated express error handler hides the error details by default. However, great are the chances that you implement your own error handling logic with custom Error objects (considered by many as a best practice). If you do so, ensure not to return the entire Error object to the client, which might contain some sensitive application details&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Sensitive application details such as server file paths, third party modules in use, and other internal workflows of the application which could be exploited by an attacker, could be leaked from information found in a stack trace&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/hideerrors.md&quot;&gt;&lt;strong&gt;Read More: Hide error details from client&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.21. Configure 2FA for npm or Yarn&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Any step in the development chain should be protected with MFA (multi-factor authentication), npm/Yarn are a sweet opportunity for attackers who can get their hands on some developer&#39;s password. Using developer credentials, attackers can inject malicious code into libraries that are widely installed across projects and services. Maybe even across the web if published in public. Enabling 2-factor-authentication in npm leaves almost zero chances for attackers to alter your package code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; &lt;a href=&quot;https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8&quot;&gt;Have you heard about the eslint developer whose password was hijacked?&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.22. Modify session middleware settings&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Each web framework and technology has its known weaknesses - telling an attacker which web framework we use is a great help for them. Using the default settings for session middlewares can expose your app to module- and framework-specific hijacking attacks in a similar way to the &lt;code&gt;X-Powered-By&lt;/code&gt; header. Try hiding anything that identifies and reveals your tech stack (E.g. Node.js, express)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Cookies could be sent over insecure connections, and an attacker might use session identification to identify the underlying framework of the web application, as well as module-specific vulnerabilities&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/sessions.md&quot;&gt;&lt;strong&gt;Read More: Cookie and session security&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.23. Avoid DOS attacks by explicitly setting when a process should crash&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The Node process will crash when errors are not handled. Many best practices even recommend to exit even though an error was caught and got handled. Express, for example, will crash on any asynchronous error - unless you wrap routes with a catch clause. This opens a very sweet attack spot for attackers who recognize what input makes the process crash and repeatedly send the same request. There&#39;s no instant remedy for this but a few techniques can mitigate the pain: Alert with critical severity anytime a process crashes due to an unhandled error, validate the input and avoid crashing the process due to invalid user input, wrap all routes with a catch and consider not to crash when an error originated within a request (as opposed to what happens globally)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; This is just an educated guess: given many Node.js applications, if we try passing an empty JSON body to all POST requests - a handful of applications will crash. At that point, we can just repeat sending the same request to take down the applications with ease&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.24. Prevent unsafe redirects&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Redirects that do not validate user input can enable attackers to launch phishing scams, steal user credentials, and perform other malicious actions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; If an attacker discovers that you are not validating external, user-supplied input, they may exploit this vulnerability by posting specially-crafted links on forums, social media, and other public places to get users to click it.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/saferedirects.md&quot;&gt;&lt;strong&gt;Read More: Prevent unsafe redirects&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 6.25. Avoid publishing secrets to the npm registry&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Precautions should be taken to avoid the risk of accidentally publishing secrets to public npm registries. An &lt;code&gt;.npmignore&lt;/code&gt; file can be used to ignore specific files or folders, or the &lt;code&gt;files&lt;/code&gt; array in &lt;code&gt;package.json&lt;/code&gt; can act as an allow list.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your project&#39;s API keys, passwords or other secrets are open to be abused by anyone who comes across them, which may result in financial loss, impersonation, and other risks.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/avoid_publishing_secrets.md&quot;&gt;&lt;strong&gt;Read More: Avoid publishing secrets&lt;/strong&gt;&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;7. Draft: Performance Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;Our contributors are working on this section. &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/256&quot;&gt;Would you like to join?&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 7.1. Don&#39;t block the event loop&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid CPU intensive tasks as they will block the mostly single-threaded Event Loop and offload those to a dedicated thread, process or even a different technology based on the context.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; As the Event Loop is blocked, Node.js will be unable to handle other request thus causing delays for concurrent users. &lt;strong&gt;3000 users are waiting for a response, the content is ready to be served, but one single request blocks the server from dispatching the results back&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/performance/block-loop.md&quot;&gt;&lt;strong&gt;Read More: Do not block the event loop&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 7.2. Prefer native JS methods over user-land utils like Lodash&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; It&#39;s often more penalising to use utility libraries like &lt;code&gt;lodash&lt;/code&gt; and &lt;code&gt;underscore&lt;/code&gt; over native methods as it leads to unneeded dependencies and slower performance. Bear in mind that with the introduction of the new V8 engine alongside the new ES standards, native methods were improved in such a way that it&#39;s now about 50% more performant than utility libraries.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You&#39;ll have to maintain less performant projects where you could have simply used what was &lt;strong&gt;already&lt;/strong&gt; available or dealt with a few more lines in exchange of a few more files.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/performance/nativeoverutil.md&quot;&gt;&lt;strong&gt;Read More: Native over user land utils&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;&lt;code&gt;8. Docker Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;🏅 Many thanks to &lt;a href=&quot;https://github.com/BretFisher&quot;&gt;Bret Fisher&lt;/a&gt; from whom we learned many of the following practices&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.1 Use multi-stage builds for leaner and more secure Docker images&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use multi-stage build to copy only necessary production artifacts. A lot of build-time dependencies and files are not needed for running your application. With multi-stage builds these resources can be used during build while the runtime environment contains only what&#39;s necessary. Multi-stage builds are an easy way to get rid of overweight and security threats.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Larger images will take longer to build and ship, build-only tools might contain vulnerabilities and secrets only meant for the build phase might be leaked.&lt;/p&gt; 
&lt;h3&gt;Example Dockerfile for multi-stage builds&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;FROM node:14.4.0 AS build

COPY . .
RUN npm ci &amp;amp;&amp;amp; npm run build

FROM node:slim-14.4.0

USER node
EXPOSE 8080

COPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./
RUN npm ci --production

CMD [ &quot;node&quot;, &quot;dist/app.js&quot; ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/multi_stage_builds.md&quot;&gt;&lt;strong&gt;Read More: Use multi-stage builds&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.2. Bootstrap using &lt;code&gt;node&lt;/code&gt; command, avoid &lt;code&gt;npm start&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; use &lt;code&gt;CMD [&#39;node&#39;,&#39;server.js&#39;]&lt;/code&gt; to start your app, avoid using npm scripts which don&#39;t pass OS signals to the code. This prevents problems with child-processes, signal handling, graceful shutdown and having zombie processes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When no signals are passed, your code will never be notified about shutdowns. Without this, it will lose its chance to close properly possibly losing current requests and/or data.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/bootstrap-using-node.md&quot;&gt;&lt;strong&gt;Read More: Bootstrap container using node command, avoid npm start&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.3. Let the Docker runtime handle replication and uptime&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When using a Docker run time orchestrator (e.g., Kubernetes), invoke the Node.js process directly without intermediate process managers or custom code that replicate the process (e.g. PM2, Cluster module). The runtime platform has the highest amount of data and visibility for making placement decision - It knows best how many processes are needed, how to spread them and what to do in case of crashes&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Container keeps crashing due to lack of resources will get restarted indefinitely by the process manager. Should Kubernetes be aware of that, it could relocate it to a different roomy instance&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/restart-and-replicate-processes.md&quot;&gt;&lt;strong&gt;Read More: Let the Docker orchestrator restart and replicate processes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.4. Use .dockerignore to prevent leaking secrets&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Include a &lt;code&gt;.dockerignore&lt;/code&gt; file that filters out common secret files and development artifacts. By doing so, you might prevent secrets from leaking into the image. As a bonus the build time will significantly decrease. Also, ensure not to copy all files recursively rather explicitly choose what should be copied to Docker&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;: Common personal secret files like &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;.aws&lt;/code&gt; and &lt;code&gt;.npmrc&lt;/code&gt; will be shared with anybody with access to the image (e.g. Docker repository)&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/docker-ignore.md&quot;&gt;&lt;strong&gt;Read More: Use .dockerignore&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.5. Clean-up dependencies before production&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Although Dev-Dependencies are sometimes needed during the build and test life-cycle, eventually the image that is shipped to production should be minimal and clean from development dependencies. Doing so guarantees that only necessary code is shipped and the amount of potential attacks (i.e. attack surface) is minimized. When using multi-stage build (see dedicated bullet) this can be achieved by installing all dependencies first and finally running &lt;code&gt;npm ci --production&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Many of the infamous npm security breaches were found within development packages (e.g. &lt;a href=&quot;https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes&quot;&gt;eslint-scope&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;🔗 Read More: &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/install-for-production.md&quot;&gt;Remove development dependencies&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.6. Shutdown smartly and gracefully&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Handle the process SIGTERM event and clean-up all existing connection and resources. This should be done while responding to ongoing requests. In Dockerized runtimes shutting down containers is not a rare event, rather a frequent occurrence that happen as part of routine work. Achieving this demands some thoughtful code to orchestrate several moving parts: The load balancer, keep-alive connections, the HTTP server and other resources&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Dying immediately means not responding to thousands of disappointed users&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/graceful-shutdown.md&quot;&gt;&lt;strong&gt;Read More: Graceful shutdown&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.7. Set memory limits using both Docker and v8&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Always configure a memory limit using both Docker and the JavaScript runtime flags. The Docker limit is needed to make thoughtful container placement decision, the --v8&#39;s flag max-old-space is needed to kick off the GC on time and prevent under utilization of memory. Practically, set the v8&#39;s old space memory to be a just bit less than the container limit&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The docker definition is needed to perform thoughtful scaling decision and prevent starving other citizens. Without also defining the v8&#39;s limits, it will under utilize the container resources - Without explicit instructions it crashes when utilizing ~50-60% of its host resources&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/memory-limit.md&quot;&gt;&lt;strong&gt;Read More: Set memory limits using Docker only&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.8. Plan for efficient caching&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Rebuilding a whole docker image from cache can be nearly instantaneous if done correctly. The less updated instructions should be at the top of your Dockerfile and the ones constantly changing (like app code) should be at the bottom.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Docker build will be very long and consume lot of resources even when making tiny changes&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/use-cache-for-shorter-build-time.md&quot;&gt;&lt;strong&gt;Read More: Leverage caching to reduce build times&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.9. Use explicit image reference, avoid &lt;code&gt;latest&lt;/code&gt; tag&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Specify an explicit image digest or versioned label, never refer to &lt;code&gt;latest&lt;/code&gt;. Developers are often led to believe that specifying the &lt;code&gt;latest&lt;/code&gt; tag will provide them with the most recent image in the repository however this is not the case. Using a digest guarantees that every instance of the service is running exactly the same code.&lt;/p&gt; 
&lt;p&gt;In addition, referring to an image tag means that the base image is subject to change, as image tags cannot be relied upon for a deterministic install. Instead, if a deterministic install is expected, a SHA256 digest can be used to reference an exact image.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A new version of a base image could be deployed into production with breaking changes, causing unintended application behaviour.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/image-tags.md&quot;&gt;&lt;strong&gt;Read More: Understand image tags and use the &quot;latest&quot; tag with caution&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.10. Prefer smaller Docker base images&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Large images lead to higher exposure to vulnerabilities and increased resource consumption. Using leaner Docker images, such as Slim and Alpine Linux variants, mitigates this issue.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Building, pushing, and pulling images will take longer, unknown attack vectors can be used by malicious actors and more resources are consumed.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/smaller_base_images.md&quot;&gt;&lt;strong&gt;Read More: Prefer smaller images&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.11. Clean-out build-time secrets, avoid secrets in args&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid secrets leaking from the Docker build environment. A Docker image is typically shared in multiple environment like CI and a registry that are not as sanitized as production. A typical example is an npm token which is usually passed to a dockerfile as argument. This token stays within the image long after it is needed and allows the attacker indefinite access to a private npm registry. This can be avoided by coping a secret file like &lt;code&gt;.npmrc&lt;/code&gt; and then removing it using multi-stage build (beware, build history should be deleted as well) or by using Docker build-kit secret feature which leaves zero traces&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Everyone with access to the CI and docker registry will also get access to some precious organization secrets as a bonus&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/avoid-build-time-secrets.md&quot;&gt;&lt;strong&gt;Read More: Clean-out build-time secrets&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.12. Scan images for multi layers of vulnerabilities&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Besides checking code dependencies vulnerabilities also scan the final image that is shipped to production. Docker image scanners check the code dependencies but also the OS binaries. This E2E security scan covers more ground and verifies that no bad guy injected bad things during the build. Consequently, it is recommended running this as the last step before deployment. There are a handful of free and commercial scanners that also provide CI/CD plugins&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your code might be entirely free from vulnerabilities. However it might still get hacked due to vulnerable version of OS-level binaries (e.g. OpenSSL, TarBall) that are commonly being used by applications&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/scan-images.md&quot;&gt;&lt;strong&gt;Read More: Scan the entire image before production&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.13 Clean NODE_MODULE cache&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; After installing dependencies in a container remove the local cache. It doesn&#39;t make any sense to duplicate the dependencies for faster future installs since there won&#39;t be any further installs - A Docker image is immutable. Using a single line of code tens of MB (typically 10-50% of the image size) are shaved off&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The image that will get shipped to production will weigh 30% more due to files that will never get used&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/clean-cache.md&quot;&gt;&lt;strong&gt;Read More: Clean NODE_MODULE cache&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.14. Generic Docker practices&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; This is a collection of Docker advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/generic-tips.md&quot;&gt;&lt;strong&gt;Read More: Generic Docker practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;✔&quot;&gt; 8.15. Lint your Dockerfile&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Linting your Dockerfile is an important step to identify issues in your Dockerfile which differ from best practices. By checking for potential flaws using a specialised Docker linter, performance and security improvements can be easily identified, saving countless hours of wasted time or security issues in production code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Mistakenly the Dockerfile creator left Root as the production user, and also used an image from unknown source repository. This could be avoided with with just a simple linter.&lt;/p&gt; 
&lt;p&gt;🔗 &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/lint-dockerfile.md&quot;&gt;&lt;strong&gt;Read More: Lint your Dockerfile&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h1&gt;Milestones&lt;/h1&gt; 
&lt;p&gt;To maintain this guide and keep it up to date, we are constantly updating and improving the guidelines and best practices with the help of the community. You can follow our &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/milestones&quot;&gt;milestones&lt;/a&gt; and join the working groups if you want to contribute to this project&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;All translations are contributed by the community. We will be happy to get any help with either completed, ongoing or new translations!&lt;/p&gt; 
&lt;h3&gt;Completed translations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/BR.png&quot; alt=&quot;BR&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.brazilian-portuguese.md&quot;&gt;Brazilian Portuguese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/marcelosdm&quot;&gt;Marcelo Melo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/CN.png&quot; alt=&quot;CN&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.chinese.md&quot;&gt;Chinese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mattjin&quot;&gt;Matt Jin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/RU.png&quot; alt=&quot;RU&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.russian.md&quot;&gt;Russian&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/contributorpw&quot;&gt;Alex Ivanov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/PL.png&quot; alt=&quot;PL&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.polish.md&quot;&gt;Polish&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mbiesiad&quot;&gt;Michal Biesiada&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/JA.png&quot; alt=&quot;JA&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.japanese.md&quot;&gt;Japanese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/YukiOta&quot;&gt;Yuki Ota&lt;/a&gt;, &lt;a href=&quot;https://github.com/YA21&quot;&gt;Yuta Azumi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png&quot; alt=&quot;EU&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.basque.md&quot;&gt;Basque&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/anediaz&quot;&gt;Ane Diaz de Tuesta&lt;/a&gt; &amp;amp; Joxefe Diaz de Tuesta&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Translations in progress&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/FR.png&quot; alt=&quot;FR&quot;&gt; &lt;a href=&quot;https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md&quot;&gt;French&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/129&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/HE.png&quot; alt=&quot;HE&quot;&gt; Hebrew (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/156&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/KR.png&quot; alt=&quot;KR&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.korean.md&quot;&gt;Korean&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/uronly14me&quot;&gt;Sangbeom Han&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/94&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/ES.png&quot; alt=&quot;ES&quot;&gt; &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md&quot;&gt;Spanish&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/95&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/TR.png&quot; alt=&quot;TR&quot;&gt; Turkish (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/139&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Steering Committee&lt;/h2&gt; 
&lt;p&gt;Meet the steering committee members - the people who work together to provide guidance and future direction to the project. In addition, each member of the committee leads a project tracked under our &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/projects&quot;&gt;GitHub projects&lt;/a&gt;.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/goldbergyoni&quot;&gt;Yoni Goldberg&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Independent Node.js consultant who works with customers in the USA, Europe, and Israel on building large-scale Node.js applications. Many of the best practices above were first published at &lt;a href=&quot;https://goldbergyoni.com&quot;&gt;goldbergyoni.com&lt;/a&gt;. Reach Yoni at &lt;a href=&quot;https://github.com/goldbergyoni&quot;&gt;@goldbergyoni&lt;/a&gt; or &lt;a href=&quot;mailto:me@goldbergyoni.com&quot;&gt;me@goldbergyoni.com&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/BrunoScheufler&quot;&gt;Bruno Scheufler&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;💻 full-stack web engineer, Node.js &amp;amp; GraphQL enthusiast&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/js-kyle&quot;&gt;Kyle Martin&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Full Stack Developer &amp;amp; Site Reliability Engineer based in New Zealand, interested in web application security, and architecting and building Node.js applications to perform at global scale.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/kevynb&quot;&gt;Kevyn Bruyere&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Independent full-stack developer with a taste for Ops and automation.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Steering Committee Emeriti&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sagirk&quot;&gt;Sagir Khan&lt;/a&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Deep specialist in JavaScript and its ecosystem — React, Node.js, TypeScript, GraphQL, MongoDB, pretty much anything that involves JS/JSON in any layer of the system — building products using the web platform for the world’s most recognized brands. Individual Member of the Node.js Foundation.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Collaborators&lt;/h2&gt; 
&lt;p&gt;Thank you to all our collaborators! 🙏&lt;/p&gt; 
&lt;p&gt;Our collaborators are members who are contributing to the repository on a regular basis, through suggesting new best practices, triaging issues, reviewing pull requests and more. If you are interested in helping us guide thousands of people to craft better Node.js applications, please read our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/CONTRIBUTING.md&quot;&gt;contributor guidelines&lt;/a&gt; 🎉&lt;/p&gt; 
&lt;p&gt;| 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | | :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: | | &lt;a href=&quot;https://github.com/idori&quot;&gt;Ido Richter (Founder)&lt;/a&gt; | &lt;a href=&quot;https://github.com/TheHollidayInn&quot;&gt;Keith Holliday&lt;/a&gt; |&lt;/p&gt; 
&lt;h3&gt;Collaborator Emeriti&lt;/h3&gt; 
&lt;p&gt;| 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; | | :-------------------------------------------------------------------------------------------------------------------------: | | &lt;a href=&quot;https://github.com/refack&quot;&gt;Refael Ackermann&lt;/a&gt; |&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve ever wanted to contribute to open source, now is your chance! See the &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/CONTRIBUTING.md&quot;&gt;contributing docs&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Contributors ✨&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people who have contributed to this repository!&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
  </channel>
</rss>
