<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Fri, 22 Jan 2021 02:48:01 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>bradtraversy/react-crash-2021</title>
      <link>https://github.com/bradtraversy/react-crash-2021</link>
      <description>&lt;p&gt;Task tracking application from the React crash course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Crash Course 2021 (Task Tracker App)&lt;/h1&gt; 
&lt;p&gt;This is the project from the &lt;a href=&quot;https://www.youtube.com/watch?v=w7ejDZ8SWv8&quot;&gt;YouTube crash course&lt;/a&gt;. It includes the react ui as well as JSON-server for our mock backend&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Install dependencies&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run React dev server (http://localhost:3000)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Run the JSON server (http://localhost:5000)&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm run server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;To build for production&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>shylocks/Loon</title>
      <link>https://github.com/shylocks/Loon</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;通知频道：&lt;/h2&gt; 
&lt;p&gt;https://t.me/joinchat/V0oxYENmx2PTlY1L&lt;/p&gt; 
&lt;h2&gt;赞赏码:&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/shylocks/Loon/main/icons/donate.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;特别声明:&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;本仓库发布的Script项目中涉及的任何解锁和解密分析脚本，仅用于测试和学习研究，禁止用于商业用途，不能保证其合法性，准确性，完整性和有效性，请根据情况自行判断.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;shylocks对任何脚本问题概不负责，包括但不限于由任何脚本错误导致的任何损失或损害.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;间接使用脚本的任何用户，包括但不限于建立VPS或在某些行为违反国家/地区法律或相关法规的情况下进行传播, shylocks 对于由此引起的任何隐私泄漏或其他后果概不负责.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;请勿将Script项目的任何内容用于商业或非法目的，否则后果自负.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;如果任何单位或个人认为该项目的脚本可能涉嫌侵犯其权利，则应及时通知并提供身份证明，所有权证明，我们将在收到认证文件后删除相关脚本.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;任何以任何方式查``看此项目的人或直接或间接使用该Script项目的任何脚本的使用者都应仔细阅读此声明。shylocks 保留随时更改或补充此免责声明的权利。一旦使用并复制了任何相关脚本或Script项目的规则，则视为您已接受此免责声明.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;您必须在下载后的24小时内从计算机或手机中完全删除以上内容.&lt;/strong&gt; 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;&lt;strong&gt;您使用或者复制了本仓库且本人制作的任何脚本，则视为&lt;code&gt;已接受&lt;/code&gt;此声明，请仔细阅读&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>bradtraversy/vanillawebprojects</title>
      <link>https://github.com/bradtraversy/vanillawebprojects</link>
      <description>&lt;p&gt;Mini projects built with HTML5, CSS &amp; JavaScript. No frameworks or libraries&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;20+ Web Projects With Vanilla JavaScript&lt;/h1&gt; 
&lt;p&gt;This is the main repository for all of the projects in the course.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/course/web-projects-with-vanilla-javascript/?referralCode=F9B7C7FED834F91ADE75&quot;&gt;Course Link&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://vanillawebprojects.com&quot;&gt;Course Info Website&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;| # | Project | Live Demo | | :-: | :----------------------------: | :-------: | | 01 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/form-validator&quot;&gt;Form Validator&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/form-validator/&quot;&gt;Live Demo&lt;/a&gt; | | 02 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/movie-seat-booking&quot;&gt;Movie Seat Booking&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/movie-seat-booking/&quot;&gt;Live Demo&lt;/a&gt; | | 03 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/custom-video-player&quot;&gt;Custom Video Player&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/custom-video-player/&quot;&gt;Live Demo&lt;/a&gt; | | 04 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/exchange-rate&quot;&gt;Exchange Rate Calculator&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/exchange-rate/&quot;&gt;Live Demo&lt;/a&gt; | | 05 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/dom-array-methods&quot;&gt;DOM Array Methods Project&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/dom-array-methods/&quot;&gt;Live Demo&lt;/a&gt; | | 06 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/modal-menu-slider&quot;&gt;Menu Slider &amp;amp; Modal&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/modal-menu-slider/&quot;&gt;Live Demo&lt;/a&gt; | | 07 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/hangman&quot;&gt;Hangman Game&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/hangman/&quot;&gt;Live Demo&lt;/a&gt; | | 08 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/meal-finder&quot;&gt;Mealfinder App&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/meal-finder/&quot;&gt;Live Demo&lt;/a&gt; | | 09 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/expense-tracker&quot;&gt;Expense Tracker&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/expense-tracker/&quot;&gt;Live Demo&lt;/a&gt; | | 10 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/music-player&quot;&gt;Music Player&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/music-player/&quot;&gt;Live Demo&lt;/a&gt; | | 11 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/infinite_scroll_blog&quot;&gt;Infinite Scrolling&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/infinite_scroll_blog/&quot;&gt;Live Demo&lt;/a&gt; | | 12 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/typing-game&quot;&gt;Typing Game&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/typing-game/&quot;&gt;Live Demo&lt;/a&gt; | | 13 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/speech-text-reader&quot;&gt;Speech Text Reader&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/speech-text-reader/&quot;&gt;Live Demo&lt;/a&gt; | | 14 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/memory-cards&quot;&gt;Memory Cards&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/memory-cards/&quot;&gt;Live Demo&lt;/a&gt; | | 15 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/lyrics-search&quot;&gt;LyricsSearch App&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/lyrics-search/&quot;&gt;Live Demo&lt;/a&gt; | | 16 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/relaxer-app&quot;&gt;Relaxer App&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects//relaxer-app/&quot;&gt;Live Demo&lt;/a&gt; | | 17 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/breakout-game&quot;&gt;Breakout Game&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/breakout-game/&quot;&gt;Live Demo&lt;/a&gt; | | 18 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/new-year-countdown&quot;&gt;New Year Countdown&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/new-year-countdown/&quot;&gt;Live Demo&lt;/a&gt; | | 19 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/sortable-list&quot;&gt;Sortable List&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/sortable-list/&quot;&gt;Live Demo&lt;/a&gt; | | 20 | &lt;a href=&quot;https://github.com/bradtraversy/vanillawebprojects/tree/master/speak-number-guess&quot;&gt;Speak Number Guessing Game&lt;/a&gt; | &lt;a href=&quot;https://vanillawebprojects.com/projects/speak-number-guess/&quot;&gt;Live Demo&lt;/a&gt; |&lt;/p&gt; 
&lt;p&gt;NOTE ON PULL REQUESTS: All of these projects are part of the course. While I do appreciate people trying to make some things prettier or adding new features, we are only accepting pull requests and looking at issues for bug fixes so that the code stays inline with the course&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cypress-io/cypress</title>
      <link>https://github.com/cypress-io/cypress</link>
      <description>&lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Cypress?&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/cypress&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/cypress.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Install Cypress for Mac, Linux, or Windows, then &lt;a href=&quot;https://docs.cypress.io/guides/getting-started/installing-cypress.html&quot;&gt;get started&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1271364/31740846-7bf607f0-b420-11e7-855f-41c996040d31.gif&quot; alt=&quot;installing-cli e1693232&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/CONTRIBUTING.md&quot;&gt;Contributing Guideline&lt;/a&gt; which explains repo organization, linting, testing, and other steps.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg&quot; alt=&quot;license&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;Let the world know your project is using Cypress.io to test with this cool badge&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.cypress.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg&quot; alt=&quot;Cypress.io&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>twbs/bootstrap</title>
      <link>https://github.com/twbs/bootstrap</link>
      <description>&lt;p&gt;The most popular HTML, CSS, and JavaScript framework for developing responsive, mobile first projects on the web.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Bootstrap 4&lt;/h2&gt; 
&lt;p&gt;Our default branch is for development of our upcoming Bootstrap 5 release. Head to the &lt;a href=&quot;https://github.com/twbs/bootstrap/tree/v4-dev&quot;&gt;&lt;code&gt;v4-dev&lt;/code&gt; branch&lt;/a&gt; to view the readme, documentation, and source code for Bootstrap 4.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#quick-start&quot;&gt;Quick start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#status&quot;&gt;Status&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#whats-included&quot;&gt;What&#39;s included&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#bugs-and-feature-requests&quot;&gt;Bugs and feature requests&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#community&quot;&gt;Community&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#versioning&quot;&gt;Versioning&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#creators&quot;&gt;Creators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#thanks&quot;&gt;Thanks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#copyright-and-license&quot;&gt;Copyright and license&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;p&gt;Several quick start options are available:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/twbs/bootstrap/archive/v5.0.0-beta1.zip&quot;&gt;Download the latest release&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/twbs/bootstrap.git&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;: &lt;code&gt;npm install bootstrap@next&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn&lt;/a&gt;: &lt;code&gt;yarn add bootstrap@next&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;: &lt;code&gt;composer require twbs/bootstrap:5.0.0-beta1&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Install with &lt;a href=&quot;https://www.nuget.org/&quot;&gt;NuGet&lt;/a&gt;: CSS: &lt;code&gt;Install-Package bootstrap&lt;/code&gt; Sass: &lt;code&gt;Install-Package bootstrap.sass&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://getbootstrap.com/docs/5.0/getting-started/introduction/&quot;&gt;Getting started page&lt;/a&gt; for information on the framework contents, templates and examples, and more.&lt;/p&gt; 
&lt;h2&gt;Status&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://bootstrap-slack.herokuapp.com/&quot;&gt;&lt;img src=&quot;https://bootstrap-slack.herokuapp.com/badge.svg&quot; alt=&quot;Slack&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/actions?query=workflow%3AJS+Tests+branch%3Amain&quot;&gt;&lt;img src=&quot;https://github.com/twbs/bootstrap/workflows/JS%20Tests/badge.svg?branch=main&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/bootstrap&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://rubygems.org/gems/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/gem/v/bootstrap&quot; alt=&quot;Gem version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://atmospherejs.com/twbs/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/meteor-twbs%3Abootstrap-blue&quot; alt=&quot;Meteor Atmosphere&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagist.org/packages/twbs/bootstrap&quot;&gt;&lt;img src=&quot;https://img.shields.io/packagist/vpre/twbs/bootstrap&quot; alt=&quot;Packagist Prerelease&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.nuget.org/packages/bootstrap/absoluteLatest&quot;&gt;&lt;img src=&quot;https://img.shields.io/nuget/vpre/bootstrap&quot; alt=&quot;NuGet&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/twbs/bootstrap?type=peer&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/peer/twbs/bootstrap&quot; alt=&quot;peerDependencies Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/twbs/bootstrap?type=dev&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/dev/twbs/bootstrap&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/twbs/bootstrap?branch=main&quot;&gt;&lt;img src=&quot;https://img.shields.io/coveralls/github/twbs/bootstrap/main&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/css/bootstrap.min.css&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/css/bootstrap.min.css?compression=gzip&amp;amp;label=CSS%20gzip%20size&quot; alt=&quot;CSS gzip size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/css/bootstrap.min.css&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/css/bootstrap.min.css?compression=brotli&amp;amp;label=CSS%20Brotli%20size&quot; alt=&quot;CSS Brotli size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/js/bootstrap.min.js&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/js/bootstrap.min.js?compression=gzip&amp;amp;label=JS%20gzip%20size&quot; alt=&quot;JS gzip size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/dist/js/bootstrap.min.js&quot;&gt;&lt;img src=&quot;https://img.badgesize.io/twbs/bootstrap/main/dist/js/bootstrap.min.js?compression=brotli&amp;amp;label=JS%20Brotli%20size&quot; alt=&quot;JS Brotli size&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.browserstack.com/automate/public-build/SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229&quot;&gt;&lt;img src=&quot;https://www.browserstack.com/automate/badge.svg?badge_key=SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229&quot; alt=&quot;BrowserStack Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#backers&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/backers/bootstrap&quot; alt=&quot;Backers on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/twbs/bootstrap/main/#sponsors&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/sponsors/bootstrap&quot; alt=&quot;Sponsors on Open Collective&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What&#39;s included&lt;/h2&gt; 
&lt;p&gt;Within the download you&#39;ll find the following directories and files, logically grouping common assets and providing both compiled and minified variations. You&#39;ll see something like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;bootstrap/
├── css/
│   ├── bootstrap-grid.css
│   ├── bootstrap-grid.css.map
│   ├── bootstrap-grid.min.css
│   ├── bootstrap-grid.min.css.map
│   ├── bootstrap-grid.rtl.css
│   ├── bootstrap-grid.rtl.css.map
│   ├── bootstrap-grid.rtl.min.css
│   ├── bootstrap-grid.rtl.min.css.map
│   ├── bootstrap-reboot.css
│   ├── bootstrap-reboot.css.map
│   ├── bootstrap-reboot.min.css
│   ├── bootstrap-reboot.min.css.map
│   ├── bootstrap-reboot.rtl.css
│   ├── bootstrap-reboot.rtl.css.map
│   ├── bootstrap-reboot.rtl.min.css
│   ├── bootstrap-reboot.rtl.min.css.map
│   ├── bootstrap-utilities.css
│   ├── bootstrap-utilities.css.map
│   ├── bootstrap-utilities.min.css
│   ├── bootstrap-utilities.min.css.map
│   ├── bootstrap-utilities.rtl.css
│   ├── bootstrap-utilities.rtl.css.map
│   ├── bootstrap-utilities.rtl.min.css
│   ├── bootstrap-utilities.rtl.min.css.map
│   ├── bootstrap.css
│   ├── bootstrap.css.map
│   ├── bootstrap.min.css
│   ├── bootstrap.min.css.map
│   ├── bootstrap.rtl.css
│   ├── bootstrap.rtl.css.map
│   ├── bootstrap.rtl.min.css
│   └── bootstrap.rtl.min.css.map
└── js/
    ├── bootstrap.bundle.js
    ├── bootstrap.bundle.js.map
    ├── bootstrap.bundle.min.js
    ├── bootstrap.bundle.min.js.map
    ├── bootstrap.esm.js
    ├── bootstrap.esm.js.map
    ├── bootstrap.esm.min.js
    ├── bootstrap.esm.min.js.map
    ├── bootstrap.js
    ├── bootstrap.js.map
    ├── bootstrap.min.js
    └── bootstrap.min.js.map
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We provide compiled CSS and JS (&lt;code&gt;bootstrap.*&lt;/code&gt;), as well as compiled and minified CSS and JS (&lt;code&gt;bootstrap.min.*&lt;/code&gt;). &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&quot;&gt;source maps&lt;/a&gt; (&lt;code&gt;bootstrap.*.map&lt;/code&gt;) are available for use with certain browsers&#39; developer tools. Bundled JS files (&lt;code&gt;bootstrap.bundle.js&lt;/code&gt; and minified &lt;code&gt;bootstrap.bundle.min.js&lt;/code&gt;) include &lt;a href=&quot;https://popper.js.org/&quot;&gt;Popper&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Bugs and feature requests&lt;/h2&gt; 
&lt;p&gt;Have a bug or a feature request? Please first read the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.github/CONTRIBUTING.md#using-the-issue-tracker&quot;&gt;issue guidelines&lt;/a&gt; and search for existing and closed issues. If your problem or idea is not addressed yet, &lt;a href=&quot;https://github.com/twbs/bootstrap/issues/new&quot;&gt;please open a new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Bootstrap&#39;s documentation, included in this repo in the root directory, is built with &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; and publicly hosted on GitHub Pages at &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;https://getbootstrap.com/&lt;/a&gt;. The docs may also be run locally.&lt;/p&gt; 
&lt;p&gt;Documentation search is powered by &lt;a href=&quot;https://community.algolia.com/docsearch/&quot;&gt;Algolia&#39;s DocSearch&lt;/a&gt;. Working on our search? Be sure to set &lt;code&gt;debug: true&lt;/code&gt; in &lt;code&gt;site/assets/js/search.js&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Running documentation locally&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the Node.js dependencies, including Hugo (the site builder).&lt;/li&gt; 
 &lt;li&gt;Run &lt;code&gt;npm run test&lt;/code&gt; (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.&lt;/li&gt; 
 &lt;li&gt;From the root &lt;code&gt;/bootstrap&lt;/code&gt; directory, run &lt;code&gt;npm run docs-serve&lt;/code&gt; in the command line.&lt;/li&gt; 
 &lt;li&gt;Open &lt;code&gt;http://localhost:9001/&lt;/code&gt; in your browser, and voilà.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Learn more about using Hugo by reading its &lt;a href=&quot;https://gohugo.io/documentation/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Documentation for previous releases&lt;/h3&gt; 
&lt;p&gt;You can find all our previous releases docs on &lt;a href=&quot;https://getbootstrap.com/docs/versions/&quot;&gt;https://getbootstrap.com/docs/versions/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/twbs/bootstrap/releases&quot;&gt;Previous releases&lt;/a&gt; and their documentation are also available for download.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read through our &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.github/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt;. Included are directions for opening issues, coding standards, and notes on development.&lt;/p&gt; 
&lt;p&gt;Moreover, if your pull request contains JavaScript patches or features, you must include &lt;a href=&quot;https://github.com/twbs/bootstrap/tree/main/js/tests&quot;&gt;relevant unit tests&lt;/a&gt;. All HTML and CSS should conform to the &lt;a href=&quot;https://github.com/mdo/code-guide&quot;&gt;Code Guide&lt;/a&gt;, maintained by &lt;a href=&quot;https://github.com/mdo&quot;&gt;Mark Otto&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Editor preferences are available in the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/.editorconfig&quot;&gt;editor config&lt;/a&gt; for easy use in common text editors. Read more and download plugins at &lt;a href=&quot;https://editorconfig.org/&quot;&gt;https://editorconfig.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;Get updates on Bootstrap&#39;s development and chat with the project maintainers and community members.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follow &lt;a href=&quot;https://twitter.com/getbootstrap&quot;&gt;@getbootstrap on Twitter&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read and subscribe to &lt;a href=&quot;https://blog.getbootstrap.com/&quot;&gt;The Official Bootstrap Blog&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Join &lt;a href=&quot;https://bootstrap-slack.herokuapp.com/&quot;&gt;the official Slack room&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Chat with fellow Bootstrappers in IRC. On the &lt;code&gt;irc.freenode.net&lt;/code&gt; server, in the &lt;code&gt;##bootstrap&lt;/code&gt; channel.&lt;/li&gt; 
 &lt;li&gt;Implementation help may be found at Stack Overflow (tagged &lt;a href=&quot;https://stackoverflow.com/questions/tagged/bootstrap-5&quot;&gt;&lt;code&gt;bootstrap-5&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;Developers should use the keyword &lt;code&gt;bootstrap&lt;/code&gt; on packages which modify or add to the functionality of Bootstrap when distributing through &lt;a href=&quot;https://www.npmjs.com/browse/keyword/bootstrap&quot;&gt;npm&lt;/a&gt; or similar delivery mechanisms for maximum discoverability.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under &lt;a href=&quot;https://semver.org/&quot;&gt;the Semantic Versioning guidelines&lt;/a&gt;. Sometimes we screw up, but we adhere to those rules whenever possible.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/twbs/bootstrap/releases&quot;&gt;the Releases section of our GitHub project&lt;/a&gt; for changelogs for each release version of Bootstrap. Release announcement posts on &lt;a href=&quot;https://blog.getbootstrap.com/&quot;&gt;the official Bootstrap blog&lt;/a&gt; contain summaries of the most noteworthy changes made in each release.&lt;/p&gt; 
&lt;h2&gt;Creators&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Mark Otto&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/mdo&quot;&gt;https://twitter.com/mdo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mdo&quot;&gt;https://github.com/mdo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Jacob Thornton&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/fat&quot;&gt;https://twitter.com/fat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fat&quot;&gt;https://github.com/fat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Thanks&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://www.browserstack.com/&quot;&gt;BrowserStack&lt;/a&gt; for providing the infrastructure that allows us to test in real browsers!&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/bootstrap#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/0/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/0/avatar.svg&quot; alt=&quot;OC sponsor 0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/1/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/1/avatar.svg&quot; alt=&quot;OC sponsor 1&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/2/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/2/avatar.svg&quot; alt=&quot;OC sponsor 2&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/3/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/3/avatar.svg&quot; alt=&quot;OC sponsor 3&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/4/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/4/avatar.svg&quot; alt=&quot;OC sponsor 4&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/5/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/5/avatar.svg&quot; alt=&quot;OC sponsor 5&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/6/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/6/avatar.svg&quot; alt=&quot;OC sponsor 6&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/7/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/7/avatar.svg&quot; alt=&quot;OC sponsor 7&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/8/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/8/avatar.svg&quot; alt=&quot;OC sponsor 8&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/bootstrap/sponsor/9/website&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/sponsor/9/avatar.svg&quot; alt=&quot;OC sponsor 9&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Backers&lt;/h2&gt; 
&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&quot;https://opencollective.com/bootstrap#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/bootstrap#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/bootstrap/backers.svg?width=890&quot; alt=&quot;Backers&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Copyright and license&lt;/h2&gt; 
&lt;p&gt;Code and documentation copyright 2011–2021 the &lt;a href=&quot;https://github.com/twbs/bootstrap/graphs/contributors&quot;&gt;Bootstrap Authors&lt;/a&gt; and &lt;a href=&quot;https://twitter.com&quot;&gt;Twitter, Inc.&lt;/a&gt; Code released under the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/main/LICENSE&quot;&gt;MIT License&lt;/a&gt;. Docs released under &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scutan90/DeepLearning-500-questions</title>
      <link>https://github.com/scutan90/DeepLearning-500-questions</link>
      <description>&lt;p&gt;深度学习500问，以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述，以帮助自己及有需要的读者。 全书分为18个章节，50余万字。由于水平有限，书中不妥之处恳请广大读者批评指正。 未完待续............ 如有意合作，联系scutjy2015@163.com 版权所有，违权必究 Tan 2018.06&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;京东预售链接：https://item.jd.com/12785031.html&lt;/h1&gt; 
&lt;h2&gt;深度学习500问——AI工程师面试宝典(博文视点出品)，谈继勇 主编，郭子钊，李剑，佃松宜 副主编 著&lt;/h2&gt; 
&lt;h1&gt;内容简介&lt;/h1&gt; 
&lt;p&gt;本书系统地描述了深度学习的基本理论算法及应用。全书共14章，第1-3章论述了数学基础、机器学习基础和深度学习基础；第4-7章介绍了一些经典网络及计算机视觉领域中常用的CNN、RNN、GAN等网络结构技术；第8-9章介绍了深度学习在计算机视觉领域的目标检测及图像分割两大应用；第10-14章介绍了计算机视觉领域主要的优化方法及思路等，包括迁移学习、网络架构及训练、网络优化技巧、超参数调整及模型的压缩和加速等。本书凝聚了众多一线科研人员及工程师的经验，旨在培养读者发现问题、解决问题、扩展问题的能力。&lt;/p&gt; 
&lt;p&gt;本书内容取材于编者在日常学习过程中总结的知识点及各大公司常见的笔试、面试题。本书可为高等院校计算机科学、信息科学、人工智能、控制科学与工程、电子科学与技术等领域的研究及教学人员提供参考，也可为相关专业本科生及研究生提供思考方向，还可为深度学习及计算机视觉领域的初、中级研究人员和工程技术人员提供参考，尤其适合需要查漏补缺的应聘者及提供相关岗位的面试官阅读。&lt;/p&gt; 
&lt;h1&gt;作者简介&lt;/h1&gt; 
&lt;p&gt;谈继勇 主编&lt;/p&gt; 
&lt;p&gt;南方科技大学和哈尔滨工业大学联合培养博士（在读），现任瀚维智能医疗技术总监，深圳工信局专家库专家，兼任南方科技大学、四川大学研究生企业导师，南方科技大学和瀚维智能医疗联合实验室副主任，北京探工所特聘技术专家，曾先后在中科院信工所、香港中文大学（深圳）、FOXCONN机器人与人工智能实验室、顺丰科技等单位任职。主要专注于智能感知与控制、实时智能与计算机视觉方向的研究，主持/主研国家自然科学基金、省重点研发计划、深圳战略性新兴产业计划等项目20余项，发表SCI/EI论文20余篇，申请发明专利40余项，获全国发明金奖。&lt;/p&gt; 
&lt;p&gt;郭子钊 副主编&lt;/p&gt; 
&lt;p&gt;四川大学计算机科学专业博士，硕士毕业于四川大学自动化系，主要从事AI芯片、深度学习、行为检测识别、人脸检测识别等相关研究工作。&lt;/p&gt; 
&lt;p&gt;李剑 副主编&lt;/p&gt; 
&lt;p&gt;同济大学计算机科学专业博士，浙江农林大学副教授、硕士生导师，主要从事推荐系统、排序学习、凸优化等机器学习领域的科研和教学工作，发表SCI论文10余篇，曾获浙江省科技进步二等奖等多项省部级奖项。&lt;/p&gt; 
&lt;p&gt;佃松宜 副主编&lt;/p&gt; 
&lt;p&gt;日本东北大学博士，四川大学电气工程学院教授、自动化系系主任，四川省信息与自动化技术重点实验室主任。主要专注于先进控制理论与人工智能算法研究、嵌入式计算与实时智能系统的研究与开发、机器人与智能装备的智能感知与控制技术的研究、工业测控与智能物联的研究。近5年来主持包括国家重点研发计划、基金、国网总部项目等各类科研项目近30项，累计总经费近2200万元；发表论文100多篇，其中SCI/EI检索近40篇，ESI高引论文1篇。参与编撰专著3部（其中英文专著1部），参编国家九五规划教材1部。&lt;/p&gt; 
&lt;p&gt;王晋东 特邀编委&lt;/p&gt; 
&lt;p&gt;中科院计算所博士，微软亚洲研究院机器学习研究员，主要从事迁移学习和机器学习方向的研究工作，在IJCAI、CVPR、ICDM、UbiComp、ACMMM、PERCOM、IJCNN、PRICAI、IEEE TNNLS、NEUNET、PRL、PMCJ、IMWUT、IJMLC、ICME、ACM TIST等国际权威期刊和会议上发表论文20余篇，多次获得“最佳论文”奖。作品有《迁移学习简明手册》等。&lt;/p&gt; 
&lt;p&gt;王超锋&lt;/p&gt; 
&lt;p&gt;上海大学硕士，百度计算机视觉算法工程师，主研图像处理，深度学习等方向。曾多次在国内外各类知名计算机视觉挑战赛中获得优异成绩。&lt;/p&gt; 
&lt;p&gt;郭晓锋&lt;/p&gt; 
&lt;p&gt;中国科学院硕士，爱奇艺算法工程师，主要从事图像处理、深度学习等方向的研究，曾获“2017华为软件精英挑战赛”复赛第6名。&lt;/p&gt; 
&lt;p&gt;黄伟&lt;/p&gt; 
&lt;p&gt;华南理工大学硕士，顺丰科技机器人算法工程师，主要从事计算机视觉和自然语言处理方向的研究。曾在相关领域国际期刊、会议上发表论文，并在相关竞赛中获得优异成绩。&lt;/p&gt; 
&lt;p&gt;陈方杰（Amusi）&lt;/p&gt; 
&lt;p&gt;上海大学硕士，CVer（计算机视觉知识分享和学习交流平台）创始人。&lt;/p&gt; 
&lt;p&gt;李元伟&lt;/p&gt; 
&lt;p&gt;国防科技大学硕士，深圳瀚维智能医疗科技公司高级算法工程师，南方科技大学和瀚维智能医疗联合实验室委员，主要从事机器视觉、图像处理及深度学习方向的研究工作，参编普通高等教育十三五规划教材《图像通信基础》，在IEEE TCSVT、COGN COMPUT等发表学术论文多篇，曾获湖南省/全军优秀硕士论文。&lt;/p&gt; 
&lt;p&gt;陈琳&lt;/p&gt; 
&lt;p&gt;北京航空航天大学博士（在读），研究方向为无人机智能控制与决策、仿生智能计算。&lt;/p&gt; 
&lt;h1&gt;目录&lt;/h1&gt; 
&lt;p&gt;第1章 数学基础 1&lt;/p&gt; 
&lt;p&gt;1.1 向量和矩阵 1&lt;/p&gt; 
&lt;p&gt;1.1.1 标量、向量、矩阵和张量 1&lt;/p&gt; 
&lt;p&gt;1.1.2 张量与矩阵的区别 2&lt;/p&gt; 
&lt;p&gt;1.1.3 矩阵和向量相乘的结果 2&lt;/p&gt; 
&lt;p&gt;1.1.4 向量和矩阵的范数归纳 2&lt;/p&gt; 
&lt;p&gt;1.1.5 判断一个矩阵是否为正定矩阵 4&lt;/p&gt; 
&lt;p&gt;1.2 导数和偏导数 5&lt;/p&gt; 
&lt;p&gt;1.2.1 导数偏导计算 5&lt;/p&gt; 
&lt;p&gt;1.2.2 导数和偏导数的区别 6&lt;/p&gt; 
&lt;p&gt;1.3 特征值和特征向量 6&lt;/p&gt; 
&lt;p&gt;1.3.1 特征值分解 6&lt;/p&gt; 
&lt;p&gt;1.3.2 奇异值和特征值的关系 6&lt;/p&gt; 
&lt;p&gt;1.4 概率分布与随机变量 7&lt;/p&gt; 
&lt;p&gt;1.4.1 机器学习为什么要使用概率 7&lt;/p&gt; 
&lt;p&gt;1.4.2 变量与随机变量的区别 7&lt;/p&gt; 
&lt;p&gt;1.4.3 随机变量与概率分布的联系 8&lt;/p&gt; 
&lt;p&gt;1.4.4 离散型随机变量和概率质量函数 8&lt;/p&gt; 
&lt;p&gt;1.4.5 连续型随机变量和概率密度函数 8&lt;/p&gt; 
&lt;p&gt;1.4.6 举例理解条件概率 9&lt;/p&gt; 
&lt;p&gt;1.4.7 联合概率与边缘概率的区别和联系 9&lt;/p&gt; 
&lt;p&gt;1.4.8 条件概率的链式法则 10&lt;/p&gt; 
&lt;p&gt;1.4.9 独立性和条件独立性 10&lt;/p&gt; 
&lt;p&gt;1.5 常见概率分布 11&lt;/p&gt; 
&lt;p&gt;1.5.1 伯努利分布 11&lt;/p&gt; 
&lt;p&gt;1.5.2 高斯分布 11&lt;/p&gt; 
&lt;p&gt;1.5.3 何时采用正态分布 12&lt;/p&gt; 
&lt;p&gt;1.5.4 指数分布 12&lt;/p&gt; 
&lt;p&gt;1.5.5 Laplace分布 13&lt;/p&gt; 
&lt;p&gt;1.5.6 Dirac分布和经验分布 13&lt;/p&gt; 
&lt;p&gt;1.6 期望、方差、协方差、相关系数 13&lt;/p&gt; 
&lt;p&gt;1.6.1 期望 13&lt;/p&gt; 
&lt;p&gt;1.6.2 方差 14&lt;/p&gt; 
&lt;p&gt;1.6.3 协方差 14&lt;/p&gt; 
&lt;p&gt;1.6.4 相关系数 15&lt;/p&gt; 
&lt;p&gt;第2章 机器学习基础 16&lt;/p&gt; 
&lt;p&gt;2.1 基本概念 16&lt;/p&gt; 
&lt;p&gt;2.1.1 大话机器学习本质 16&lt;/p&gt; 
&lt;p&gt;2.1.2 什么是神经网络 16&lt;/p&gt; 
&lt;p&gt;2.1.3 各种常见算法图示 17&lt;/p&gt; 
&lt;p&gt;2.1.4 计算图的导数计算 17&lt;/p&gt; 
&lt;p&gt;2.1.5 理解局部最优与全局最优 18&lt;/p&gt; 
&lt;p&gt;2.1.6 大数据与深度学习之间的关系 19&lt;/p&gt; 
&lt;p&gt;2.2 机器学习的学习方式 20&lt;/p&gt; 
&lt;p&gt;2.2.1 监督学习 20&lt;/p&gt; 
&lt;p&gt;2.2.2 非监督学习 20&lt;/p&gt; 
&lt;p&gt;2.2.3 半监督学习 20&lt;/p&gt; 
&lt;p&gt;2.2.4 弱监督学习 20&lt;/p&gt; 
&lt;p&gt;2.2.5 监督学习模型的搭建步骤 21&lt;/p&gt; 
&lt;p&gt;2.3 分类算法 22&lt;/p&gt; 
&lt;p&gt;2.3.1 常用分类算法的优缺点 22&lt;/p&gt; 
&lt;p&gt;2.3.2 分类算法的评估方法 23&lt;/p&gt; 
&lt;p&gt;2.3.3 正确率能否很好地评估分类算法 25&lt;/p&gt; 
&lt;p&gt;2.3.4 什么样的分类器是最好的 26&lt;/p&gt; 
&lt;p&gt;2.4 逻辑回归 26&lt;/p&gt; 
&lt;p&gt;2.4.1 回归的种类 26&lt;/p&gt; 
&lt;p&gt;2.4.2 逻辑回归适用性 27&lt;/p&gt; 
&lt;p&gt;2.4.3 逻辑回归与朴素贝叶斯的区别 27&lt;/p&gt; 
&lt;p&gt;2.4.4 线性回归与逻辑回归的区别 27&lt;/p&gt; 
&lt;p&gt;2.5 代价函数 28&lt;/p&gt; 
&lt;p&gt;2.5.1 为什么需要代价函数 28&lt;/p&gt; 
&lt;p&gt;2.5.2 代价函数作用原理 28&lt;/p&gt; 
&lt;p&gt;2.5.3 常见代价函数 30&lt;/p&gt; 
&lt;p&gt;2.5.4 为什么代价函数要非负 31&lt;/p&gt; 
&lt;p&gt;2.5.5 为什么用交叉熵代替二次代价函数 31&lt;/p&gt; 
&lt;p&gt;2.6 损失函数 32&lt;/p&gt; 
&lt;p&gt;2.6.1 什么是损失函数 32&lt;/p&gt; 
&lt;p&gt;2.6.2 常见的损失函数 32&lt;/p&gt; 
&lt;p&gt;2.6.3 逻辑回归为什么使用对数损失函数 34&lt;/p&gt; 
&lt;p&gt;2.6.4 对数损失函数如何度量损失 34&lt;/p&gt; 
&lt;p&gt;2.7 梯度下降法 35&lt;/p&gt; 
&lt;p&gt;2.7.1 梯度下降法的作用 36&lt;/p&gt; 
&lt;p&gt;2.7.2 梯度下降法的直观理解 36&lt;/p&gt; 
&lt;p&gt;2.7.3 梯度下降法算法描述 37&lt;/p&gt; 
&lt;p&gt;2.7.4 梯度下降法的缺点 38&lt;/p&gt; 
&lt;p&gt;2.7.5 如何对梯度下降法进行调优 38&lt;/p&gt; 
&lt;p&gt;2.7.6 随机梯度下降和批量梯度下降的区别 38&lt;/p&gt; 
&lt;p&gt;2.7.7 各种梯度下降法性能比较 40&lt;/p&gt; 
&lt;p&gt;2.8 线性判别分析 40&lt;/p&gt; 
&lt;p&gt;2.8.1 LDA思想总结 40&lt;/p&gt; 
&lt;p&gt;2.8.2 图解LDA核心思想 41&lt;/p&gt; 
&lt;p&gt;2.8.3 二类LDA算法原理 41&lt;/p&gt; 
&lt;p&gt;2.8.4 LDA算法流程总结 42&lt;/p&gt; 
&lt;p&gt;2.8.5 LDA和PCA的异同 43&lt;/p&gt; 
&lt;p&gt;2.8.6 LDA的优缺点 43&lt;/p&gt; 
&lt;p&gt;2.9 主成分分析 43&lt;/p&gt; 
&lt;p&gt;2.9.1 图解PCA核心思想 43&lt;/p&gt; 
&lt;p&gt;2.9.2 PCA算法推理 44&lt;/p&gt; 
&lt;p&gt;2.9.3 PCA算法流程总结 45&lt;/p&gt; 
&lt;p&gt;2.9.4 PCA思想总结 46&lt;/p&gt; 
&lt;p&gt;2.9.5 PCA算法的优缺点 46&lt;/p&gt; 
&lt;p&gt;2.9.6 降维的必要性及目的 46&lt;/p&gt; 
&lt;p&gt;2.9.7 KPCA与PCA的区别 47&lt;/p&gt; 
&lt;p&gt;2.10 模型评估 47&lt;/p&gt; 
&lt;p&gt;2.10.1 模型评估常用方法 48&lt;/p&gt; 
&lt;p&gt;2.10.2 误差、偏差和方差的区别和联系 48&lt;/p&gt; 
&lt;p&gt;2.10.3 为什么使用标准差 49&lt;/p&gt; 
&lt;p&gt;2.10.4 经验误差与泛化误差 50&lt;/p&gt; 
&lt;p&gt;2.10.5 图解欠拟合与过拟合 50&lt;/p&gt; 
&lt;p&gt;2.10.6 如何解决欠拟合与过拟合 52&lt;/p&gt; 
&lt;p&gt;2.10.7 交叉验证的主要作用 52&lt;/p&gt; 
&lt;p&gt;2.10.8 理解K折交叉验证 53&lt;/p&gt; 
&lt;p&gt;2.10.9 理解混淆矩阵 53&lt;/p&gt; 
&lt;p&gt;2.10.10 理解查准率与查全率 53&lt;/p&gt; 
&lt;p&gt;2.10.11 理解ROC与AUC 54&lt;/p&gt; 
&lt;p&gt;2.10.12 如何绘制ROC曲线 55&lt;/p&gt; 
&lt;p&gt;2.10.13 如何计算TPR和FPR 56&lt;/p&gt; 
&lt;p&gt;2.10.14 如何计算AUC 58&lt;/p&gt; 
&lt;p&gt;2.10.15 直观理解AUC 58&lt;/p&gt; 
&lt;p&gt;2.10.16 ROC评估分类器 60&lt;/p&gt; 
&lt;p&gt;2.10.17 代价敏感错误率与代价曲线 60&lt;/p&gt; 
&lt;p&gt;2.10.18 比较检验方法 61&lt;/p&gt; 
&lt;p&gt;2.11 决策树 61&lt;/p&gt; 
&lt;p&gt;2.11.1 决策树的基本原理 62&lt;/p&gt; 
&lt;p&gt;2.11.2 决策树的生成过程 62&lt;/p&gt; 
&lt;p&gt;2.11.3 决策树学习基本算法步骤 62&lt;/p&gt; 
&lt;p&gt;2.11.4 决策树算法的优缺点 63&lt;/p&gt; 
&lt;p&gt;2.11.5 决策树和熵的联系 63&lt;/p&gt; 
&lt;p&gt;2.11.6 熵的概念及定义 63&lt;/p&gt; 
&lt;p&gt;2.11.7 理解信息增益 64&lt;/p&gt; 
&lt;p&gt;2.11.8 决策树中熵、条件熵和信息增益的联系 64&lt;/p&gt; 
&lt;p&gt;2.11.9 决策树算法中剪枝的作用及策略 65&lt;/p&gt; 
&lt;p&gt;2.12 支持向量机（SVM） 65&lt;/p&gt; 
&lt;p&gt;2.12.1 什么是SVM 65&lt;/p&gt; 
&lt;p&gt;2.12.2 SVM能解决的问题 66&lt;/p&gt; 
&lt;p&gt;2.12.3 核函数特点及其作用 67&lt;/p&gt; 
&lt;p&gt;2.12.4 SVM为什么引入对偶问题 67&lt;/p&gt; 
&lt;p&gt;2.12.5 如何理解SVM中的对偶问题 67&lt;/p&gt; 
&lt;p&gt;2.12.6 常见的核函数 69&lt;/p&gt; 
&lt;p&gt;2.12.7 SVM的主要特点 69&lt;/p&gt; 
&lt;p&gt;2.12.8 SVM的主要缺点 70&lt;/p&gt; 
&lt;p&gt;2.12.9 逻辑回归与SVM的异同 70&lt;/p&gt; 
&lt;p&gt;2.13 贝叶斯分类器 72&lt;/p&gt; 
&lt;p&gt;2.13.1 贝叶斯分类器的基本原理 72&lt;/p&gt; 
&lt;p&gt;2.13.2 朴素贝叶斯分类器 72&lt;/p&gt; 
&lt;p&gt;2.13.3 举例理解朴素贝叶斯分类器 73&lt;/p&gt; 
&lt;p&gt;2.13.4 半朴素贝叶斯分类器 75&lt;/p&gt; 
&lt;p&gt;2.13.5 极大似然估计和贝叶斯估计的联系与区别 75&lt;/p&gt; 
&lt;p&gt;2.13.6 极大似然估计原理 76&lt;/p&gt; 
&lt;p&gt;2.13.7 图解极大似然估计 76&lt;/p&gt; 
&lt;p&gt;2.14 EM算法 77&lt;/p&gt; 
&lt;p&gt;2.14.1 EM算法的基本思想 77&lt;/p&gt; 
&lt;p&gt;2.14.2 EM算法推导 77&lt;/p&gt; 
&lt;p&gt;2.14.3 图解EM算法 78&lt;/p&gt; 
&lt;p&gt;2.14.4 EM算法流程 79&lt;/p&gt; 
&lt;p&gt;2.15 降维和聚类 79&lt;/p&gt; 
&lt;p&gt;2.15.1 图解为什么会产生维数灾难 79&lt;/p&gt; 
&lt;p&gt;2.15.2 怎样避免维数灾难 83&lt;/p&gt; 
&lt;p&gt;2.15.3 聚类和降维 83&lt;/p&gt; 
&lt;p&gt;2.15.4 聚类算法优劣的衡量标准 84&lt;/p&gt; 
&lt;p&gt;2.15.5 聚类和分类 85&lt;/p&gt; 
&lt;p&gt;2.15.6 聚类算法的性能比较 85&lt;/p&gt; 
&lt;p&gt;2.15.7 4种常用聚类方法比较 85&lt;/p&gt; 
&lt;p&gt;第3章 深度学习基础 89&lt;/p&gt; 
&lt;p&gt;3.1 基本概念 89&lt;/p&gt; 
&lt;p&gt;3.1.1 神经网络的类型 89&lt;/p&gt; 
&lt;p&gt;3.1.2 神经网络的常用模型结构 92&lt;/p&gt; 
&lt;p&gt;3.1.3 深度学习和机器学习的区别与联系 93&lt;/p&gt; 
&lt;p&gt;3.1.4 为什么使用深层表示 93&lt;/p&gt; 
&lt;p&gt;3.1.5 深度学习架构分类 94&lt;/p&gt; 
&lt;p&gt;3.1.6 如何选择深度学习开发平台 94&lt;/p&gt; 
&lt;p&gt;3.2 神经网络计算 95&lt;/p&gt; 
&lt;p&gt;3.2.1 前向传播和反向传播 95&lt;/p&gt; 
&lt;p&gt;3.2.2 如何计算神经网络的输出 96&lt;/p&gt; 
&lt;p&gt;3.2.3 如何计算卷积神经网络输出值 97&lt;/p&gt; 
&lt;p&gt;3.2.4 如何计算池化层输出值 100&lt;/p&gt; 
&lt;p&gt;3.2.5 反向传播实例 101&lt;/p&gt; 
&lt;p&gt;3.2.6 神经网络更“深”的意义 104&lt;/p&gt; 
&lt;p&gt;3.3 激活函数 104&lt;/p&gt; 
&lt;p&gt;3.3.1 为什么需要激活函数 104&lt;/p&gt; 
&lt;p&gt;3.3.2 为什么激活函数需要非线性函数 105&lt;/p&gt; 
&lt;p&gt;3.3.3 常见的激活函数及其图像 105&lt;/p&gt; 
&lt;p&gt;3.3.4 常见激活函数的导数计算 107&lt;/p&gt; 
&lt;p&gt;3.3.5 激活函数有哪些性质 108&lt;/p&gt; 
&lt;p&gt;3.3.6 如何选择激活函数 108&lt;/p&gt; 
&lt;p&gt;3.3.7 为什么tanh收敛速度比sigmoid快 109&lt;/p&gt; 
&lt;p&gt;3.3.8 Relu激活函数的优点 109&lt;/p&gt; 
&lt;p&gt;3.3.9 理解Relu激活函数的稀疏激活性 109&lt;/p&gt; 
&lt;p&gt;3.3.10 什么时候可以用线性激活函数 109&lt;/p&gt; 
&lt;p&gt;3.3.11 softmax函数的定义及作用 110&lt;/p&gt; 
&lt;p&gt;3.3.12 softmax函数如何应用于多分类 110&lt;/p&gt; 
&lt;p&gt;3.4 BATCH SIZE 112&lt;/p&gt; 
&lt;p&gt;3.4.1 为什么需要Batch Size 112&lt;/p&gt; 
&lt;p&gt;3.4.2 如何选择Batch Size值 112&lt;/p&gt; 
&lt;p&gt;3.4.3 调节Batch Size对训练效果的影响 113&lt;/p&gt; 
&lt;p&gt;3.4.4 在合理范围内增大Batch Size的好处 113&lt;/p&gt; 
&lt;p&gt;3.4.5 盲目增大Batch Size的坏处 114&lt;/p&gt; 
&lt;p&gt;3.5 归一化 114&lt;/p&gt; 
&lt;p&gt;3.5.1 理解归一化含义 114&lt;/p&gt; 
&lt;p&gt;3.5.2 归一化和标准化的联系与区别 114&lt;/p&gt; 
&lt;p&gt;3.5.3 为什么要归一化或标准化 115&lt;/p&gt; 
&lt;p&gt;3.5.4 图解为什么要归一化 115&lt;/p&gt; 
&lt;p&gt;3.5.5 为什么归一化能提高求最优解速度 115&lt;/p&gt; 
&lt;p&gt;3.5.6 归一化有哪些类型 116&lt;/p&gt; 
&lt;p&gt;3.5.7 局部响应归一化作用 116&lt;/p&gt; 
&lt;p&gt;3.5.8 局部响应归一化原理 117&lt;/p&gt; 
&lt;p&gt;3.5.9 什么是批归一化 118&lt;/p&gt; 
&lt;p&gt;3.5.10 批归一化的优点 118&lt;/p&gt; 
&lt;p&gt;3.5.11 批归一化算法流程 118&lt;/p&gt; 
&lt;p&gt;3.5.12 批归一化和组归一化比较 119&lt;/p&gt; 
&lt;p&gt;3.5.13 权重归一化和批归一化比较 119&lt;/p&gt; 
&lt;p&gt;3.5.14 批归一化适用范围 120&lt;/p&gt; 
&lt;p&gt;3.5.15 BN、LN、IN和GN的对比 120&lt;/p&gt; 
&lt;p&gt;3.6 参数初始化 121&lt;/p&gt; 
&lt;p&gt;3.6.1 参数初始化应满足的条件 121&lt;/p&gt; 
&lt;p&gt;3.6.2 常用的几种初始化方式 121&lt;/p&gt; 
&lt;p&gt;3.6.3 全0初始化带来的问题 121&lt;/p&gt; 
&lt;p&gt;3.6.4 全都初始化为同样的值 122&lt;/p&gt; 
&lt;p&gt;3.6.5 初始化为小的随机数 123&lt;/p&gt; 
&lt;p&gt;3.6.6 用 校准方差 123&lt;/p&gt; 
&lt;p&gt;3.7 预训练与微调 123&lt;/p&gt; 
&lt;p&gt;3.7.1 什么是预训练和微调 123&lt;/p&gt; 
&lt;p&gt;3.7.2 预训练和微调的作用 124&lt;/p&gt; 
&lt;p&gt;3.7.3 预训练模型的复用 124&lt;/p&gt; 
&lt;p&gt;3.7.4 预训练和迁移学习 125&lt;/p&gt; 
&lt;p&gt;3.7.5 微调时网络参数是否更新 125&lt;/p&gt; 
&lt;p&gt;3.7.6 微调模型的三种状态 125&lt;/p&gt; 
&lt;p&gt;3.7.7 为什么深层神经网络难以训练 125&lt;/p&gt; 
&lt;p&gt;3.8 超参数 127&lt;/p&gt; 
&lt;p&gt;3.8.1 超参数有哪些 127&lt;/p&gt; 
&lt;p&gt;3.8.2 参数和模型的关系 127&lt;/p&gt; 
&lt;p&gt;3.8.3 参数和超参数的区别 127&lt;/p&gt; 
&lt;p&gt;3.8.4 如何寻找超参数的最优值 128&lt;/p&gt; 
&lt;p&gt;3.8.5 超参数搜索的一般过程 128&lt;/p&gt; 
&lt;p&gt;3.9 学习率 129&lt;/p&gt; 
&lt;p&gt;3.9.1 学习率的作用 129&lt;/p&gt; 
&lt;p&gt;3.9.2 学习率衰减的常用参数 129&lt;/p&gt; 
&lt;p&gt;3.9.3 常用的学习率衰减方法 129&lt;/p&gt; 
&lt;p&gt;3.10 正则化 133&lt;/p&gt; 
&lt;p&gt;3.10.1 为什么要正则化 133&lt;/p&gt; 
&lt;p&gt;3.10.2 常见正则化方法 133&lt;/p&gt; 
&lt;p&gt;3.10.3 图解L1和L2正则化 134&lt;/p&gt; 
&lt;p&gt;3.10.4 Dropout具体工作流程 135&lt;/p&gt; 
&lt;p&gt;3.10.5 为什么Dropout可以解决过拟合问题 137&lt;/p&gt; 
&lt;p&gt;3.10.6 Dropout的缺点&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Marak/faker.js</title>
      <link>https://github.com/Marak/faker.js</link>
      <description>&lt;p&gt;generate massive amounts of realistic fake data in Node.js and the browser&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;faker.js - generate massive amounts of fake data in the browser and node.js&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Marak/faker.js/master/logo.png&quot; alt=&quot;Faker.js&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/Marak/faker.js&quot;&gt;&lt;img src=&quot;https://travis-ci.org/Marak/faker.js.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/Marak/faker.js?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/Marak/faker.js/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://badge.fury.io/js/faker&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/faker.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Marak/faker.js/master/#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/fakerjs/backers/badge.svg&quot; alt=&quot;OpenCollective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/Marak/faker.js/master/#sponsors&quot;&gt;&lt;img src=&quot;https://opencollective.com/fakerjs/sponsors/badge.svg&quot; alt=&quot;OpenCollective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/Faker-js/community&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/marak/faker.js.png&quot; alt=&quot;Gitter chat&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Demo&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://rawgit.com/Marak/faker.js/master/examples/browser/index.html&quot;&gt;https://rawgit.com/Marak/faker.js/master/examples/browser/index.html&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;Browser&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;script src = &quot;faker.js&quot; type = &quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
      var randomName = faker.name.findName(); // Caitlyn Kerluke
      var randomEmail = faker.internet.email(); // Rusty@arne.info
      var randomCard = faker.helpers.createCard(); // random contact card containing many properties
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Node.js&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;    var faker = require(&#39;faker&#39;);

    var randomName = faker.name.findName(); // Rowan Nikolaus
    var randomEmail = faker.internet.email(); // Kassandra.Haley@erich.biz
    var randomCard = faker.helpers.createCard(); // random contact card containing many properties
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;h3&gt;JSDoc API Browser&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;http://marak.github.io/faker.js/&quot;&gt;http://marak.github.io/faker.js/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;API Methods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;address 
  &lt;ul&gt; 
   &lt;li&gt;zipCode&lt;/li&gt; 
   &lt;li&gt;zipCodeByState&lt;/li&gt; 
   &lt;li&gt;city&lt;/li&gt; 
   &lt;li&gt;cityPrefix&lt;/li&gt; 
   &lt;li&gt;citySuffix&lt;/li&gt; 
   &lt;li&gt;streetName&lt;/li&gt; 
   &lt;li&gt;streetAddress&lt;/li&gt; 
   &lt;li&gt;streetSuffix&lt;/li&gt; 
   &lt;li&gt;streetPrefix&lt;/li&gt; 
   &lt;li&gt;secondaryAddress&lt;/li&gt; 
   &lt;li&gt;county&lt;/li&gt; 
   &lt;li&gt;country&lt;/li&gt; 
   &lt;li&gt;countryCode&lt;/li&gt; 
   &lt;li&gt;state&lt;/li&gt; 
   &lt;li&gt;stateAbbr&lt;/li&gt; 
   &lt;li&gt;latitude&lt;/li&gt; 
   &lt;li&gt;longitude&lt;/li&gt; 
   &lt;li&gt;direction&lt;/li&gt; 
   &lt;li&gt;cardinalDirection&lt;/li&gt; 
   &lt;li&gt;ordinalDirection&lt;/li&gt; 
   &lt;li&gt;nearbyGPSCoordinate&lt;/li&gt; 
   &lt;li&gt;timeZone&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;commerce 
  &lt;ul&gt; 
   &lt;li&gt;color&lt;/li&gt; 
   &lt;li&gt;department&lt;/li&gt; 
   &lt;li&gt;productName&lt;/li&gt; 
   &lt;li&gt;price&lt;/li&gt; 
   &lt;li&gt;productAdjective&lt;/li&gt; 
   &lt;li&gt;productMaterial&lt;/li&gt; 
   &lt;li&gt;product&lt;/li&gt; 
   &lt;li&gt;productDescription&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;company 
  &lt;ul&gt; 
   &lt;li&gt;suffixes&lt;/li&gt; 
   &lt;li&gt;companyName&lt;/li&gt; 
   &lt;li&gt;companySuffix&lt;/li&gt; 
   &lt;li&gt;catchPhrase&lt;/li&gt; 
   &lt;li&gt;bs&lt;/li&gt; 
   &lt;li&gt;catchPhraseAdjective&lt;/li&gt; 
   &lt;li&gt;catchPhraseDescriptor&lt;/li&gt; 
   &lt;li&gt;catchPhraseNoun&lt;/li&gt; 
   &lt;li&gt;bsAdjective&lt;/li&gt; 
   &lt;li&gt;bsBuzz&lt;/li&gt; 
   &lt;li&gt;bsNoun&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;database 
  &lt;ul&gt; 
   &lt;li&gt;column&lt;/li&gt; 
   &lt;li&gt;type&lt;/li&gt; 
   &lt;li&gt;collation&lt;/li&gt; 
   &lt;li&gt;engine&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;date 
  &lt;ul&gt; 
   &lt;li&gt;past&lt;/li&gt; 
   &lt;li&gt;future&lt;/li&gt; 
   &lt;li&gt;between&lt;/li&gt; 
   &lt;li&gt;recent&lt;/li&gt; 
   &lt;li&gt;soon&lt;/li&gt; 
   &lt;li&gt;month&lt;/li&gt; 
   &lt;li&gt;weekday&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;fake&lt;/li&gt; 
 &lt;li&gt;finance 
  &lt;ul&gt; 
   &lt;li&gt;account&lt;/li&gt; 
   &lt;li&gt;accountName&lt;/li&gt; 
   &lt;li&gt;routingNumber&lt;/li&gt; 
   &lt;li&gt;mask&lt;/li&gt; 
   &lt;li&gt;amount&lt;/li&gt; 
   &lt;li&gt;transactionType&lt;/li&gt; 
   &lt;li&gt;currencyCode&lt;/li&gt; 
   &lt;li&gt;currencyName&lt;/li&gt; 
   &lt;li&gt;currencySymbol&lt;/li&gt; 
   &lt;li&gt;bitcoinAddress&lt;/li&gt; 
   &lt;li&gt;litecoinAddress&lt;/li&gt; 
   &lt;li&gt;creditCardNumber&lt;/li&gt; 
   &lt;li&gt;creditCardCVV&lt;/li&gt; 
   &lt;li&gt;ethereumAddress&lt;/li&gt; 
   &lt;li&gt;iban&lt;/li&gt; 
   &lt;li&gt;bic&lt;/li&gt; 
   &lt;li&gt;transactionDescription&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;git 
  &lt;ul&gt; 
   &lt;li&gt;branch&lt;/li&gt; 
   &lt;li&gt;commitEntry&lt;/li&gt; 
   &lt;li&gt;commitMessage&lt;/li&gt; 
   &lt;li&gt;commitSha&lt;/li&gt; 
   &lt;li&gt;shortSha&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;hacker 
  &lt;ul&gt; 
   &lt;li&gt;abbreviation&lt;/li&gt; 
   &lt;li&gt;adjective&lt;/li&gt; 
   &lt;li&gt;noun&lt;/li&gt; 
   &lt;li&gt;verb&lt;/li&gt; 
   &lt;li&gt;ingverb&lt;/li&gt; 
   &lt;li&gt;phrase&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;helpers 
  &lt;ul&gt; 
   &lt;li&gt;randomize&lt;/li&gt; 
   &lt;li&gt;slugify&lt;/li&gt; 
   &lt;li&gt;replaceSymbolWithNumber&lt;/li&gt; 
   &lt;li&gt;replaceSymbols&lt;/li&gt; 
   &lt;li&gt;replaceCreditCardSymbols&lt;/li&gt; 
   &lt;li&gt;repeatString&lt;/li&gt; 
   &lt;li&gt;regexpStyleStringParse&lt;/li&gt; 
   &lt;li&gt;shuffle&lt;/li&gt; 
   &lt;li&gt;mustache&lt;/li&gt; 
   &lt;li&gt;createCard&lt;/li&gt; 
   &lt;li&gt;contextualCard&lt;/li&gt; 
   &lt;li&gt;userCard&lt;/li&gt; 
   &lt;li&gt;createTransaction&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;image 
  &lt;ul&gt; 
   &lt;li&gt;image&lt;/li&gt; 
   &lt;li&gt;avatar&lt;/li&gt; 
   &lt;li&gt;imageUrl&lt;/li&gt; 
   &lt;li&gt;abstract&lt;/li&gt; 
   &lt;li&gt;animals&lt;/li&gt; 
   &lt;li&gt;business&lt;/li&gt; 
   &lt;li&gt;cats&lt;/li&gt; 
   &lt;li&gt;city&lt;/li&gt; 
   &lt;li&gt;food&lt;/li&gt; 
   &lt;li&gt;nightlife&lt;/li&gt; 
   &lt;li&gt;fashion&lt;/li&gt; 
   &lt;li&gt;people&lt;/li&gt; 
   &lt;li&gt;nature&lt;/li&gt; 
   &lt;li&gt;sports&lt;/li&gt; 
   &lt;li&gt;technics&lt;/li&gt; 
   &lt;li&gt;transport&lt;/li&gt; 
   &lt;li&gt;dataUri&lt;/li&gt; 
   &lt;li&gt;lorempixel&lt;/li&gt; 
   &lt;li&gt;unsplash&lt;/li&gt; 
   &lt;li&gt;lorempicsum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;internet 
  &lt;ul&gt; 
   &lt;li&gt;avatar&lt;/li&gt; 
   &lt;li&gt;email&lt;/li&gt; 
   &lt;li&gt;exampleEmail&lt;/li&gt; 
   &lt;li&gt;userName&lt;/li&gt; 
   &lt;li&gt;protocol&lt;/li&gt; 
   &lt;li&gt;url&lt;/li&gt; 
   &lt;li&gt;domainName&lt;/li&gt; 
   &lt;li&gt;domainSuffix&lt;/li&gt; 
   &lt;li&gt;domainWord&lt;/li&gt; 
   &lt;li&gt;ip&lt;/li&gt; 
   &lt;li&gt;ipv6&lt;/li&gt; 
   &lt;li&gt;userAgent&lt;/li&gt; 
   &lt;li&gt;color&lt;/li&gt; 
   &lt;li&gt;mac&lt;/li&gt; 
   &lt;li&gt;password&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;lorem 
  &lt;ul&gt; 
   &lt;li&gt;word&lt;/li&gt; 
   &lt;li&gt;words&lt;/li&gt; 
   &lt;li&gt;sentence&lt;/li&gt; 
   &lt;li&gt;slug&lt;/li&gt; 
   &lt;li&gt;sentences&lt;/li&gt; 
   &lt;li&gt;paragraph&lt;/li&gt; 
   &lt;li&gt;paragraphs&lt;/li&gt; 
   &lt;li&gt;text&lt;/li&gt; 
   &lt;li&gt;lines&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;music 
  &lt;ul&gt; 
   &lt;li&gt;genre&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;name 
  &lt;ul&gt; 
   &lt;li&gt;firstName&lt;/li&gt; 
   &lt;li&gt;lastName&lt;/li&gt; 
   &lt;li&gt;middleName&lt;/li&gt; 
   &lt;li&gt;findName&lt;/li&gt; 
   &lt;li&gt;jobTitle&lt;/li&gt; 
   &lt;li&gt;gender&lt;/li&gt; 
   &lt;li&gt;prefix&lt;/li&gt; 
   &lt;li&gt;suffix&lt;/li&gt; 
   &lt;li&gt;title&lt;/li&gt; 
   &lt;li&gt;jobDescriptor&lt;/li&gt; 
   &lt;li&gt;jobArea&lt;/li&gt; 
   &lt;li&gt;jobType&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;phone 
  &lt;ul&gt; 
   &lt;li&gt;phoneNumber&lt;/li&gt; 
   &lt;li&gt;phoneNumberFormat&lt;/li&gt; 
   &lt;li&gt;phoneFormats&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;random 
  &lt;ul&gt; 
   &lt;li&gt;number&lt;/li&gt; 
   &lt;li&gt;float&lt;/li&gt; 
   &lt;li&gt;arrayElement&lt;/li&gt; 
   &lt;li&gt;arrayElements&lt;/li&gt; 
   &lt;li&gt;objectElement&lt;/li&gt; 
   &lt;li&gt;uuid&lt;/li&gt; 
   &lt;li&gt;boolean&lt;/li&gt; 
   &lt;li&gt;word&lt;/li&gt; 
   &lt;li&gt;words&lt;/li&gt; 
   &lt;li&gt;image&lt;/li&gt; 
   &lt;li&gt;locale&lt;/li&gt; 
   &lt;li&gt;alpha&lt;/li&gt; 
   &lt;li&gt;alphaNumeric&lt;/li&gt; 
   &lt;li&gt;hexaDecimal&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;system 
  &lt;ul&gt; 
   &lt;li&gt;fileName&lt;/li&gt; 
   &lt;li&gt;commonFileName&lt;/li&gt; 
   &lt;li&gt;mimeType&lt;/li&gt; 
   &lt;li&gt;commonFileType&lt;/li&gt; 
   &lt;li&gt;commonFileExt&lt;/li&gt; 
   &lt;li&gt;fileType&lt;/li&gt; 
   &lt;li&gt;fileExt&lt;/li&gt; 
   &lt;li&gt;directoryPath&lt;/li&gt; 
   &lt;li&gt;filePath&lt;/li&gt; 
   &lt;li&gt;semver&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;time 
  &lt;ul&gt; 
   &lt;li&gt;recent&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;unique&lt;/li&gt; 
 &lt;li&gt;vehicle 
  &lt;ul&gt; 
   &lt;li&gt;vehicle&lt;/li&gt; 
   &lt;li&gt;manufacturer&lt;/li&gt; 
   &lt;li&gt;model&lt;/li&gt; 
   &lt;li&gt;type&lt;/li&gt; 
   &lt;li&gt;fuel&lt;/li&gt; 
   &lt;li&gt;vin&lt;/li&gt; 
   &lt;li&gt;color&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Faker.fake()&lt;/h3&gt; 
&lt;p&gt;faker.js contains a super useful generator method &lt;code&gt;Faker.fake&lt;/code&gt; for combining faker API methods using a mustache string format.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(faker.fake(&quot;{{name.lastName}}, {{name.firstName}} {{name.suffix}}&quot;));
// outputs: &quot;Marks, Dean Sr.&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will interpolate the format string with the value of methods &lt;code&gt;name.lastName()&lt;/code&gt;, &lt;code&gt;name.firstName()&lt;/code&gt;, and &lt;code&gt;name.suffix()&lt;/code&gt;&lt;/p&gt; 
&lt;h2&gt;Localization&lt;/h2&gt; 
&lt;p&gt;As of version &lt;code&gt;v2.0.0&lt;/code&gt; faker.js has support for multiple localities.&lt;/p&gt; 
&lt;p&gt;The default language locale is set to English.&lt;/p&gt; 
&lt;p&gt;Setting a new locale is simple:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// sets locale to de
faker.locale = &quot;de&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;az&lt;/li&gt; 
 &lt;li&gt;ar&lt;/li&gt; 
 &lt;li&gt;cz&lt;/li&gt; 
 &lt;li&gt;de&lt;/li&gt; 
 &lt;li&gt;de_AT&lt;/li&gt; 
 &lt;li&gt;de_CH&lt;/li&gt; 
 &lt;li&gt;en&lt;/li&gt; 
 &lt;li&gt;en_AU&lt;/li&gt; 
 &lt;li&gt;en_AU_ocker&lt;/li&gt; 
 &lt;li&gt;en_BORK&lt;/li&gt; 
 &lt;li&gt;en_CA&lt;/li&gt; 
 &lt;li&gt;en_GB&lt;/li&gt; 
 &lt;li&gt;en_IE&lt;/li&gt; 
 &lt;li&gt;en_IND&lt;/li&gt; 
 &lt;li&gt;en_US&lt;/li&gt; 
 &lt;li&gt;en_ZA&lt;/li&gt; 
 &lt;li&gt;es&lt;/li&gt; 
 &lt;li&gt;es_MX&lt;/li&gt; 
 &lt;li&gt;fa&lt;/li&gt; 
 &lt;li&gt;fi&lt;/li&gt; 
 &lt;li&gt;fr&lt;/li&gt; 
 &lt;li&gt;fr_CA&lt;/li&gt; 
 &lt;li&gt;fr_CH&lt;/li&gt; 
 &lt;li&gt;ge&lt;/li&gt; 
 &lt;li&gt;id_ID&lt;/li&gt; 
 &lt;li&gt;it&lt;/li&gt; 
 &lt;li&gt;ja&lt;/li&gt; 
 &lt;li&gt;ko&lt;/li&gt; 
 &lt;li&gt;nb_NO&lt;/li&gt; 
 &lt;li&gt;nep&lt;/li&gt; 
 &lt;li&gt;nl&lt;/li&gt; 
 &lt;li&gt;nl_BE&lt;/li&gt; 
 &lt;li&gt;pl&lt;/li&gt; 
 &lt;li&gt;pt_BR&lt;/li&gt; 
 &lt;li&gt;pt_PT&lt;/li&gt; 
 &lt;li&gt;ro&lt;/li&gt; 
 &lt;li&gt;ru&lt;/li&gt; 
 &lt;li&gt;sk&lt;/li&gt; 
 &lt;li&gt;sv&lt;/li&gt; 
 &lt;li&gt;tr&lt;/li&gt; 
 &lt;li&gt;uk&lt;/li&gt; 
 &lt;li&gt;vi&lt;/li&gt; 
 &lt;li&gt;zh_CN&lt;/li&gt; 
 &lt;li&gt;zh_TW&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Individual Localization Packages&lt;/h3&gt; 
&lt;p&gt;faker.js supports incremental loading of locales.&lt;/p&gt; 
&lt;p&gt;By default, requiring &lt;code&gt;faker&lt;/code&gt; will include &lt;em&gt;all&lt;/em&gt; locale data.&lt;/p&gt; 
&lt;p&gt;In a production environment, you may only want to include the locale data for a specific set of locales.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// loads only de locale
var faker = require(&#39;faker/locale/de&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Setting a randomness seed&lt;/h2&gt; 
&lt;p&gt;If you want consistent results, you can set your own seed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;faker.seed(123);

var firstRandom = faker.random.number();

// Setting the seed again resets the sequence.
faker.seed(123);

var secondRandom = faker.random.number();

console.log(firstRandom === secondRandom);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install .
make test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can view a code coverage report generated in coverage/lcov-report/index.html.&lt;/p&gt; 
&lt;h2&gt;Building faker.js&lt;/h2&gt; 
&lt;p&gt;faker uses &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp&lt;/a&gt; to automate its build process. Each build operation is a separate task which can be run independently.&lt;/p&gt; 
&lt;h3&gt;Browser Bundle&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm run browser
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building JSDocs&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://jsdoc.app/&quot;&gt;JSDOC&lt;/a&gt; v3 HTML API documentation&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm run jsdoc
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Building ReadMe&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;ReadMe.md&lt;/code&gt; file for &lt;code&gt;faker.js&lt;/code&gt; is automatically generated and should not be modified directly. All updates to &lt;code&gt;ReadMe.md&lt;/code&gt; should be performed in &lt;code&gt;./build/src/docs.md&lt;/code&gt; and then the build script should be run.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm run readme
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Version Release Schedule&lt;/h2&gt; 
&lt;p&gt;faker.js is a popular project used by many organizations and individuals in production settings. Major and Minor version releases are generally on a monthly schedule. Bugs fixes are addressed by severity and fixed as soon as possible.&lt;/p&gt; 
&lt;p&gt;If you require the absolute latest version of &lt;code&gt;faker.js&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch @ &lt;a href=&quot;http://github.com/marak/faker.js/&quot;&gt;http://github.com/marak/faker.js/&lt;/a&gt; should always be up to date and working.&lt;/p&gt; 
&lt;h2&gt;Maintainer&lt;/h2&gt; 
&lt;h4&gt;Marak Squires&lt;/h4&gt; 
&lt;p&gt;faker.js - Copyright (c) 2020 Marak Squires www.marak.com http://github.com/marak/faker.js/&lt;/p&gt; 
&lt;p&gt;faker.js was inspired by and has used data definitions from:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stympy/faker/&quot;&gt;https://github.com/stympy/faker/&lt;/a&gt; - Copyright (c) 2007-2010 Benjamin Curtis&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://search.cpan.org/%7Ejasonk/Data-Faker-0.07/&quot;&gt;http://search.cpan.org/~jasonk/Data-Faker-0.07/&lt;/a&gt; - Copyright 2004-2005 by Jason Kohles&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; 
&lt;h2&gt;Backers&lt;/h2&gt; 
&lt;p&gt;Support us with a monthly donation and help us continue our activities. [&lt;a href=&quot;https://opencollective.com/fakerjs#backer&quot;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;Become a sponsor and get your logo on our README on Github with a link to your site. [&lt;a href=&quot;https://opencollective.com/fakerjs#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vercel/next.js</title>
      <link>https://github.com/vercel/next.js</link>
      <description>&lt;p&gt;The React Framework&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit 
 &lt;!-- raw HTML omitted --&gt;https://nextjs.org/learn
 &lt;!-- raw HTML omitted --&gt; to get started with Next.js.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://nextjs.org/docs&quot;&gt;https://nextjs.org/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; 
&lt;h2&gt;Who is using Next.js?&lt;/h2&gt; 
&lt;p&gt;Next.js is used by the world&#39;s leading companies. Check out the &lt;a href=&quot;https://nextjs.org/showcase&quot;&gt;Next.js Showcase&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The Next.js community can be found on &lt;a href=&quot;https://github.com/vercel/next.js/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; 
&lt;p&gt;To chat with other community members you can join the &lt;a href=&quot;https://nextjs.org/discord&quot;&gt;Next.js Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/vercel/next.js/blob/canary/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; applies to all Next.js community channels.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/vercel/next.js/canary/contributing.md&quot;&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Arunoda Susiripala (&lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;@arunoda&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/arunoda-zeit&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tim Neutkens (&lt;a href=&quot;https://twitter.com/timneutkens&quot;&gt;@timneutkens&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/timneutkens&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Naoyuki Kanezawa (&lt;a href=&quot;https://twitter.com/nkzawa&quot;&gt;@nkzawa&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/nkzawa&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Tony Kovanen (&lt;a href=&quot;https://twitter.com/tonykovanen&quot;&gt;@tonykovanen&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Guillermo Rauch (&lt;a href=&quot;https://twitter.com/rauchg&quot;&gt;@rauchg&lt;/a&gt;) – &lt;a href=&quot;https://vercel.com/about/rauchg&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dan Zajdband (&lt;a href=&quot;https://twitter.com/impronunciable&quot;&gt;@impronunciable&lt;/a&gt;) – Knight-Mozilla / Coral Project&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>benmosher/eslint-plugin-import</title>
      <link>https://github.com/benmosher/eslint-plugin-import</link>
      <description>&lt;p&gt;ESLint plugin with rules that help validate proper imports.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eslint-plugin-import&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/benmosher/eslint-plugin-import&quot;&gt;&lt;img src=&quot;https://travis-ci.org/benmosher/eslint-plugin-import.svg?branch=master&quot; alt=&quot;build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/benmosher/eslint-plugin-import?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/benmosher/eslint-plugin-import/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/benmosher/eslint-plugin-import/branch/master&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/3mw2fifalmjlqf56/branch/master?svg=true&quot; alt=&quot;win32 build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-import&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/eslint-plugin-import.svg&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.npmtrends.com/eslint-plugin-import&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/eslint-plugin-import.svg?maxAge=2592000&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This plugin intends to support linting of ES2015+ (ES6+) import/export syntax, and prevent issues with misspelling of file paths and import names. All the goodness that the ES2015+ static module syntax intends to provide, marked up in your editor.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IF YOU ARE USING THIS WITH SUBLIME&lt;/strong&gt;: see the &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/#sublimelinter-eslint&quot;&gt;bottom section&lt;/a&gt; for important info.&lt;/p&gt; 
&lt;h2&gt;Rules&lt;/h2&gt; 
&lt;h3&gt;Static analysis&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure imports point to a file/module that can be resolved. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unresolved.md&quot;&gt;&lt;code&gt;no-unresolved&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure named imports correspond to a named export in the remote file. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/named.md&quot;&gt;&lt;code&gt;named&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure a default export is present, given a default import. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/default.md&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure imported namespaces contain dereferenced properties as they are dereferenced. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/namespace.md&quot;&gt;&lt;code&gt;namespace&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Restrict which files can be imported in a given folder (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-restricted-paths.md&quot;&gt;&lt;code&gt;no-restricted-paths&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid import of modules using absolute paths (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-absolute-path.md&quot;&gt;&lt;code&gt;no-absolute-path&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid &lt;code&gt;require()&lt;/code&gt; calls with expressions (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-dynamic-require.md&quot;&gt;&lt;code&gt;no-dynamic-require&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prevent importing the submodules of other modules (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-internal-modules.md&quot;&gt;&lt;code&gt;no-internal-modules&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid webpack loader syntax in imports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-webpack-loader-syntax.md&quot;&gt;&lt;code&gt;no-webpack-loader-syntax&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid a module from importing itself (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-self-import.md&quot;&gt;&lt;code&gt;no-self-import&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid a module from importing a module with a dependency path back to itself (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-cycle.md&quot;&gt;&lt;code&gt;no-cycle&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prevent unnecessary path segments in import and require statements (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-useless-path-segments.md&quot;&gt;&lt;code&gt;no-useless-path-segments&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid importing modules from parent directories (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-relative-parent-imports.md&quot;&gt;&lt;code&gt;no-relative-parent-imports&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Helpful warnings&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Report any invalid exports, i.e. re-export of the same name (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/export.md&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report use of exported name as identifier of default export (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-named-as-default.md&quot;&gt;&lt;code&gt;no-named-as-default&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report use of exported name as property of default export (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-named-as-default-member.md&quot;&gt;&lt;code&gt;no-named-as-default-member&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report imported names marked with &lt;code&gt;@deprecated&lt;/code&gt; documentation tag (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-deprecated.md&quot;&gt;&lt;code&gt;no-deprecated&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid the use of extraneous packages (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-extraneous-dependencies.md&quot;&gt;&lt;code&gt;no-extraneous-dependencies&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid the use of mutable exports with &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-mutable-exports.md&quot;&gt;&lt;code&gt;no-mutable-exports&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report modules without exports, or exports without matching import in another module (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unused-modules.md&quot;&gt;&lt;code&gt;no-unused-modules&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Module systems&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Report potentially ambiguous parse goal (&lt;code&gt;script&lt;/code&gt; vs. &lt;code&gt;module&lt;/code&gt;) (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/unambiguous.md&quot;&gt;&lt;code&gt;unambiguous&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report CommonJS &lt;code&gt;require&lt;/code&gt; calls and &lt;code&gt;module.exports&lt;/code&gt; or &lt;code&gt;exports.*&lt;/code&gt;. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-commonjs.md&quot;&gt;&lt;code&gt;no-commonjs&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report AMD &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;define&lt;/code&gt; calls. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-amd.md&quot;&gt;&lt;code&gt;no-amd&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;No Node.js builtin modules. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-nodejs-modules.md&quot;&gt;&lt;code&gt;no-nodejs-modules&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Style guide&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure all imports appear before other statements (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/first.md&quot;&gt;&lt;code&gt;first&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure all exports appear after other statements (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/exports-last.md&quot;&gt;&lt;code&gt;exports-last&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report repeated import of the same module in multiple places (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-duplicates.md&quot;&gt;&lt;code&gt;no-duplicates&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid namespace (a.k.a. &quot;wildcard&quot; &lt;code&gt;*&lt;/code&gt;) imports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-namespace.md&quot;&gt;&lt;code&gt;no-namespace&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure consistent use of file extension within the import path (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/extensions.md&quot;&gt;&lt;code&gt;extensions&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Enforce a convention in module import order (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/order.md&quot;&gt;&lt;code&gt;order&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Enforce a newline after import statements (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/newline-after-import.md&quot;&gt;&lt;code&gt;newline-after-import&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prefer a default export if module exports a single name (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/prefer-default-export.md&quot;&gt;&lt;code&gt;prefer-default-export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Limit the maximum number of dependencies a module can have (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/max-dependencies.md&quot;&gt;&lt;code&gt;max-dependencies&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid unassigned imports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unassigned-import.md&quot;&gt;&lt;code&gt;no-unassigned-import&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid named default exports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-named-default.md&quot;&gt;&lt;code&gt;no-named-default&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid default exports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-default-export.md&quot;&gt;&lt;code&gt;no-default-export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid named exports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-named-export.md&quot;&gt;&lt;code&gt;no-named-export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid anonymous values as default exports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-anonymous-default-export.md&quot;&gt;&lt;code&gt;no-anonymous-default-export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prefer named exports to be grouped together in a single export declaration (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/group-exports.md&quot;&gt;&lt;code&gt;group-exports&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Enforce a leading comment with the webpackChunkName for dynamic imports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/dynamic-import-chunkname.md&quot;&gt;&lt;code&gt;dynamic-import-chunkname&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;code&gt;eslint-plugin-import&lt;/code&gt; for enterprise&lt;/h2&gt; 
&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; 
&lt;p&gt;The maintainers of &lt;code&gt;eslint-plugin-import&lt;/code&gt; and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&quot;https://tidelift.com/subscription/pkg/npm-eslint-plugin-import?utm_source=npm-eslint-plugin-import&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&quot;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install eslint-plugin-import -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or if you manage ESLint as a dev dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# inside your project&#39;s working tree
npm install eslint-plugin-import --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All rules are off by default. However, you may configure them manually in your &lt;code&gt;.eslintrc.(yml|json|js)&lt;/code&gt;, or extend one of the canned configs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
extends:
  - eslint:recommended
  - plugin:import/errors
  - plugin:import/warnings

# or configure manually:
plugins:
  - import

rules:
  import/no-unresolved: [2, {commonjs: true, amd: true}]
  import/named: 2
  import/namespace: 2
  import/default: 2
  import/export: 2
  # etc...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;TypeScript&lt;/h1&gt; 
&lt;p&gt;You may use the following shortcut or assemble your own config using the granular settings described below.&lt;/p&gt; 
&lt;p&gt;Make sure you have installed &lt;a href=&quot;https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser&quot;&gt;&lt;code&gt;@typescript-eslint/parser&lt;/code&gt;&lt;/a&gt; which is used in the following configuration. Unfortunately NPM does not allow to list optional peer dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;extends:
  - eslint:recommended
  - plugin:import/errors
  - plugin:import/warnings
  - plugin:import/typescript # this line does the trick
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Resolvers&lt;/h1&gt; 
&lt;p&gt;With the advent of module bundlers and the current state of modules and module syntax specs, it&#39;s not always obvious where &lt;code&gt;import x from &#39;module&#39;&lt;/code&gt; should look to find the file behind &lt;code&gt;module&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Up through v0.10ish, this plugin has directly used substack&#39;s &lt;a href=&quot;https://www.npmjs.com/package/resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; plugin, which implements Node&#39;s import behavior. This works pretty well in most cases.&lt;/p&gt; 
&lt;p&gt;However, webpack allows a number of things in import module source strings that Node does not, such as loaders (&lt;code&gt;import &#39;file!./whatever&#39;&lt;/code&gt;) and a number of aliasing schemes, such as &lt;a href=&quot;http://webpack.github.io/docs/library-and-externals.html&quot;&gt;&lt;code&gt;externals&lt;/code&gt;&lt;/a&gt;: mapping a module id to a global name at runtime (allowing some modules to be included more traditionally via script tags).&lt;/p&gt; 
&lt;p&gt;In the interest of supporting both of these, v0.11 introduces resolvers.&lt;/p&gt; 
&lt;p&gt;Currently &lt;a href=&quot;https://www.npmjs.com/package/eslint-import-resolver-node&quot;&gt;Node&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/eslint-import-resolver-webpack&quot;&gt;webpack&lt;/a&gt; resolution have been implemented, but the resolvers are just npm packages, so &lt;a href=&quot;https://github.com/benmosher/eslint-plugin-import/wiki/Resolvers&quot;&gt;third party packages are supported&lt;/a&gt; (and encouraged!).&lt;/p&gt; 
&lt;p&gt;You can reference resolvers in several ways (in order of precedence):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;as a conventional &lt;code&gt;eslint-import-resolver&lt;/code&gt; name, like &lt;code&gt;eslint-import-resolver-foo&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  # uses &#39;eslint-import-resolver-foo&#39;:
  import/resolver: foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .eslintrc.js
module.exports = {
  settings: {
    &#39;import/resolver&#39;: {
      foo: { someConfig: value }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;with a full npm module name, like &lt;code&gt;my-awesome-npm-module&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/resolver: &#39;my-awesome-npm-module&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .eslintrc.js
module.exports = {
  settings: {
    &#39;import/resolver&#39;: {
      &#39;my-awesome-npm-module&#39;: { someConfig: value }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;with a filesystem path to resolver, defined in this example as a &lt;code&gt;computed property&lt;/code&gt; name:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .eslintrc.js
module.exports = {
  settings: {
    &#39;import/resolver&#39;: {
      [path.resolve(&#39;../../../my-resolver&#39;)]: { someConfig: value }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Relative paths will be resolved relative to the source&#39;s nearest &lt;code&gt;package.json&lt;/code&gt; or the process&#39;s current working directory if no &lt;code&gt;package.json&lt;/code&gt; is found.&lt;/p&gt; 
&lt;p&gt;If you are interesting in writing a resolver, see the &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/resolvers/README.md&quot;&gt;spec&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h1&gt;Settings&lt;/h1&gt; 
&lt;p&gt;You may set the following settings in your &lt;code&gt;.eslintrc&lt;/code&gt;:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/extensions&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A list of file extensions that will be parsed as modules and inspected for &lt;code&gt;export&lt;/code&gt;s.&lt;/p&gt; 
&lt;p&gt;This defaults to &lt;code&gt;[&#39;.js&#39;]&lt;/code&gt;, unless you are using the &lt;code&gt;react&lt;/code&gt; shared config, in which case it is specified as &lt;code&gt;[&#39;.js&#39;, &#39;.jsx&#39;]&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;settings&quot;: {
  &quot;import/extensions&quot;: [
    &quot;.js&quot;,
    &quot;.jsx&quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you require more granular extension definitions, you can use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;settings&quot;: {
  &quot;import/resolver&quot;: {
    &quot;node&quot;: {
      &quot;extensions&quot;: [
        &quot;.js&quot;,
        &quot;.jsx&quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that this is different from (and likely a subset of) any &lt;code&gt;import/resolver&lt;/code&gt; extensions settings, which may include &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.coffee&lt;/code&gt;, etc. which will still factor into the &lt;code&gt;no-unresolved&lt;/code&gt; rule.&lt;/p&gt; 
&lt;p&gt;Also, the following &lt;code&gt;import/ignore&lt;/code&gt; patterns will overrule this list.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/ignore&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A list of regex strings that, if matched by a path, will not report the matching module if no &lt;code&gt;export&lt;/code&gt;s are found. In practice, this means rules other than &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unresolved.md#ignore&quot;&gt;&lt;code&gt;no-unresolved&lt;/code&gt;&lt;/a&gt; will not report on any &lt;code&gt;import&lt;/code&gt;s with (absolute filesystem) paths matching this pattern.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;no-unresolved&lt;/code&gt; has its own &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unresolved.md#ignore&quot;&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt; setting.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;settings:
  import/ignore:
    - \.coffee$          # fraught with parse errors
    - \.(scss|less|css)$ # can&#39;t parse unprocessed CSS modules, either
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;import/core-modules&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;An array of additional modules to consider as &quot;core&quot; modules--modules that should be considered resolved but have no path on the filesystem. Your resolver may already define some of these (for example, the Node resolver knows about &lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt;), so you need not redefine those.&lt;/p&gt; 
&lt;p&gt;For example, Electron exposes an &lt;code&gt;electron&lt;/code&gt; module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import &#39;electron&#39;  // without extra config, will be flagged as unresolved!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;that would otherwise be unresolved. To avoid this, you may provide &lt;code&gt;electron&lt;/code&gt; as a core module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/core-modules: [ electron ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In Electron&#39;s specific case, there is a shared config named &lt;code&gt;electron&lt;/code&gt; that specifies this for you.&lt;/p&gt; 
&lt;p&gt;Contribution of more such shared configs for other platforms are welcome!&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/external-module-folders&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;An array of folders. Resolved modules only from those folders will be considered as &quot;external&quot;. By default - &lt;code&gt;[&quot;node_modules&quot;]&lt;/code&gt;. Makes sense if you have configured your path or webpack to handle your internal paths differently and want to consider modules from some folders, for example &lt;code&gt;bower_components&lt;/code&gt; or &lt;code&gt;jspm_modules&lt;/code&gt;, as &quot;external&quot;.&lt;/p&gt; 
&lt;p&gt;This option is also useful in a monorepo setup: list here all directories that contain monorepo&#39;s packages and they will be treated as external ones no matter which resolver is used.&lt;/p&gt; 
&lt;p&gt;Each item in this array is either a folder&#39;s name, its subpath, or its absolute prefix path:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;jspm_modules&lt;/code&gt; will match any file or folder named &lt;code&gt;jspm_modules&lt;/code&gt; or which has a direct or non-direct parent named &lt;code&gt;jspm_modules&lt;/code&gt;, e.g. &lt;code&gt;/home/me/project/jspm_modules&lt;/code&gt; or &lt;code&gt;/home/me/project/jspm_modules/some-pkg/index.js&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;packages/core&lt;/code&gt; will match any path that contains these two segments, for example &lt;code&gt;/home/me/project/packages/core/src/utils.js&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;/home/me/project/packages&lt;/code&gt; will only match files and directories inside this directory, and the directory itself.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please note that incomplete names are not allowed here so &lt;code&gt;components&lt;/code&gt; won&#39;t match &lt;code&gt;bower_components&lt;/code&gt; and &lt;code&gt;packages/ui&lt;/code&gt; won&#39;t match &lt;code&gt;packages/ui-utils&lt;/code&gt; (but will match &lt;code&gt;packages/ui/utils&lt;/code&gt;).&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/parsers&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A map from parsers to file extension arrays. If a file extension is matched, the dependency parser will require and use the map key as the parser instead of the configured ESLint parser. This is useful if you&#39;re inter-op-ing with TypeScript directly using webpack, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/parsers:
    @typescript-eslint/parser: [ .ts, .tsx ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case, &lt;a href=&quot;https://www.npmjs.com/package/@typescript-eslint/parser&quot;&gt;&lt;code&gt;@typescript-eslint/parser&lt;/code&gt;&lt;/a&gt; must be installed and require-able from the running &lt;code&gt;eslint&lt;/code&gt; module&#39;s location (i.e., install it as a peer of ESLint).&lt;/p&gt; 
&lt;p&gt;This is currently only tested with &lt;code&gt;@typescript-eslint/parser&lt;/code&gt; (and its predecessor, &lt;code&gt;typescript-eslint-parser&lt;/code&gt;) but should theoretically work with any moderately ESTree-compliant parser.&lt;/p&gt; 
&lt;p&gt;It&#39;s difficult to say how well various plugin features will be supported, too, depending on how far down the rabbit hole goes. Submit an issue if you find strange behavior beyond here, but steel your heart against the likely outcome of closing with &lt;code&gt;wontfix&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/resolver&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/#resolvers&quot;&gt;resolvers&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/cache&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Settings for cache behavior. Memoization is used at various levels to avoid the copious amount of &lt;code&gt;fs.statSync&lt;/code&gt;/module parse calls required to correctly report errors.&lt;/p&gt; 
&lt;p&gt;For normal &lt;code&gt;eslint&lt;/code&gt; console runs, the cache lifetime is irrelevant, as we can strongly assume that files should not be changing during the lifetime of the linter process (and thus, the cache in memory)&lt;/p&gt; 
&lt;p&gt;For long-lasting processes, like &lt;a href=&quot;https://www.npmjs.com/package/eslint_d&quot;&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/eslint-loader&quot;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt;, however, it&#39;s important that there be some notion of staleness.&lt;/p&gt; 
&lt;p&gt;If you never use &lt;a href=&quot;https://www.npmjs.com/package/eslint_d&quot;&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/eslint-loader&quot;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt;, you may set the cache lifetime to &lt;code&gt;Infinity&lt;/code&gt; and everything should be fine:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/cache:
    lifetime: ∞  # or Infinity
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Otherwise, set some integer, and cache entries will be evicted after that many seconds have elapsed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/cache:
    lifetime: 5  # 30 is the default
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;import/internal-regex&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A regex for packages should be treated as internal. Useful when you are utilizing a monorepo setup or developing a set of packages that depend on each other.&lt;/p&gt; 
&lt;p&gt;By default, any package referenced from &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/#importexternal-module-folders&quot;&gt;&lt;code&gt;import/external-module-folders&lt;/code&gt;&lt;/a&gt; will be considered as &quot;external&quot;, including packages in a monorepo like yarn workspace or lerna environment. If you want to mark these packages as &quot;internal&quot; this will be useful.&lt;/p&gt; 
&lt;p&gt;For example, if your packages in a monorepo are all in &lt;code&gt;@scope&lt;/code&gt;, you can configure &lt;code&gt;import/internal-regex&lt;/code&gt; like this&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/internal-regex: ^@scope/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SublimeLinter-eslint&lt;/h2&gt; 
&lt;p&gt;SublimeLinter-eslint introduced a change to support &lt;code&gt;.eslintignore&lt;/code&gt; files which altered the way file paths are passed to ESLint when linting during editing. This change sends a relative path instead of the absolute path to the file (as ESLint normally provides), which can make it impossible for this plugin to resolve dependencies on the filesystem.&lt;/p&gt; 
&lt;p&gt;This workaround should no longer be necessary with the release of ESLint 2.0, when &lt;code&gt;.eslintignore&lt;/code&gt; will be updated to work more like a &lt;code&gt;.gitignore&lt;/code&gt;, which should support proper ignoring of absolute paths via &lt;code&gt;--stdin-filename&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In the meantime, see &lt;a href=&quot;https://github.com/roadhump/SublimeLinter-eslint/issues/58&quot;&gt;roadhump/SublimeLinter-eslint#58&lt;/a&gt; for more details and discussion, but essentially, you may find you need to add the following &lt;code&gt;SublimeLinter&lt;/code&gt; config to your Sublime project file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;folders&quot;:
    [
        {
            &quot;path&quot;: &quot;code&quot;
        }
    ],
    &quot;SublimeLinter&quot;:
    {
        &quot;linters&quot;:
        {
            &quot;eslint&quot;:
            {
                &quot;chdir&quot;: &quot;${project}/code&quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;${project}/code&lt;/code&gt; matches the &lt;code&gt;code&lt;/code&gt; provided at &lt;code&gt;folders[0].path&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The purpose of the &lt;code&gt;chdir&lt;/code&gt; setting, in this case, is to set the working directory from which ESLint is executed to be the same as the directory on which SublimeLinter-eslint bases the relative path it provides.&lt;/p&gt; 
&lt;p&gt;See the SublimeLinter docs on &lt;a href=&quot;http://www.sublimelinter.com/en/latest/linter_settings.html#chdir&quot;&gt;&lt;code&gt;chdir&lt;/code&gt;&lt;/a&gt; for more information, in case this does not work with your project.&lt;/p&gt; 
&lt;p&gt;If you are not using &lt;code&gt;.eslintignore&lt;/code&gt;, or don&#39;t have a Sublime project file, you can also do the following via a &lt;code&gt;.sublimelinterrc&lt;/code&gt; file in some ancestor directory of your code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;linters&quot;: {
    &quot;eslint&quot;: {
      &quot;args&quot;: [&quot;--stdin-filename&quot;, &quot;@&quot;]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I also found that I needed to set &lt;code&gt;rc_search_limit&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;, which removes the file hierarchy search limit when looking up the directory tree for &lt;code&gt;.sublimelinterrc&lt;/code&gt;:&lt;/p&gt; 
&lt;p&gt;In Package Settings / SublimeLinter / User Settings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;user&quot;: {
    &quot;rc_search_limit&quot;: null
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I believe this defaults to &lt;code&gt;3&lt;/code&gt;, so you may not need to alter it depending on your project folder max depth.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>strapi/strapi</title>
      <link>https://github.com/strapi/strapi</link>
      <description>&lt;p&gt;🚀 Open source Node.js Headless CMS to easily build customisable APIs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Strapi is a free and open-source headless CMS delivering your content anywhere you need.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Keep control over your data&lt;/strong&gt;. With Strapi, you know where your data is stored, and you keep full control at all times.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Self-hosted&lt;/strong&gt;. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Database agnostic&lt;/strong&gt;. You can choose the database you prefer. Strapi works with SQL &amp;amp; NoSQL databases: MongoDB, PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;Read the Getting Started tutorial
 &lt;!-- raw HTML omitted --&gt; or follow the steps below:&lt;/p&gt; 
&lt;h3&gt;⏳ Installation&lt;/h3&gt; 
&lt;p&gt;Install Strapi with this &lt;strong&gt;Quickstart&lt;/strong&gt; command to create a Strapi project instantly:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Use &lt;strong&gt;yarn&lt;/strong&gt; to install the Strapi project (recommended). &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/install/&quot;&gt;Install yarn with these docs&lt;/a&gt;.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn create strapi-app my-project --quickstart
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;(Use npm/npx to install the Strapi project.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-strapi-app my-project --quickstart
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This command generates a brand new project with the default features (authentication, permissions, content management, content type builder &amp;amp; file upload). The &lt;strong&gt;Quickstart&lt;/strong&gt; command installs Strapi using a &lt;strong&gt;SQLite&lt;/strong&gt; database which is used for prototyping in development.&lt;/p&gt; 
&lt;p&gt;Enjoy 🎉&lt;/p&gt; 
&lt;h3&gt;🖐 Requirements&lt;/h3&gt; 
&lt;p&gt;Complete installation requirements can be found in the documentation under 
 &lt;!-- raw HTML omitted --&gt;Installation Requirements
 &lt;!-- raw HTML omitted --&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Supported operating systems&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ubuntu LTS/Debian 9.x&lt;/li&gt; 
 &lt;li&gt;CentOS/RHEL 8&lt;/li&gt; 
 &lt;li&gt;macOS Mojave&lt;/li&gt; 
 &lt;li&gt;Windows 10&lt;/li&gt; 
 &lt;li&gt;Docker - &lt;a href=&quot;https://github.com/strapi/strapi-docker&quot;&gt;Docker-Repo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NodeJS &amp;gt;= 10.16 &amp;lt;=14&lt;/li&gt; 
 &lt;li&gt;NPM &amp;gt;= 6.x&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;MongoDB &amp;gt;= 3.6&lt;/li&gt; 
 &lt;li&gt;MySQL &amp;gt;= 5.6&lt;/li&gt; 
 &lt;li&gt;MariaDB &amp;gt;= 10.1&lt;/li&gt; 
 &lt;li&gt;PostgreSQL &amp;gt;= 10&lt;/li&gt; 
 &lt;li&gt;SQLite &amp;gt;= 3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;We recommend always using the latest version of Strapi to start your new projects&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Modern Admin Panel:&lt;/strong&gt; Elegant, entirely customizable and a fully extensible admin panel.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Secure by default:&lt;/strong&gt; Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Plugins Oriented:&lt;/strong&gt; Install the auth system, content management, custom plugins, and more, in seconds.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Blazing Fast:&lt;/strong&gt; Built on top of Node.js, Strapi delivers amazing performance.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Front-end Agnostic:&lt;/strong&gt; Use any front-end framework (React, Vue, Angular, etc.), mobile apps or even IoT.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Powerful CLI:&lt;/strong&gt; Scaffold projects and APIs on the fly.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;SQL &amp;amp; NoSQL databases:&lt;/strong&gt; Works with MongoDB, PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://strapi.io/overview&quot;&gt;See more on our website&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read our &lt;a href=&quot;https://raw.githubusercontent.com/strapi/strapi/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; before submitting a Pull Request to the project.&lt;/p&gt; 
&lt;h2&gt;Community support&lt;/h2&gt; 
&lt;p&gt;For general help using Strapi, please refer to &lt;a href=&quot;https://strapi.io/documentation/&quot;&gt;the official Strapi documentation&lt;/a&gt;. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://slack.strapi.io&quot;&gt;Slack&lt;/a&gt; (For live discussion with the Community and Strapi team)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/strapi/strapi&quot;&gt;GitHub&lt;/a&gt; (Bug reports, Contributions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://forum.strapi.io&quot;&gt;Community Forum&lt;/a&gt; (Questions and Discussions)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://academy.strapi.io&quot;&gt;Academy&lt;/a&gt; (Learn the fundamentals of Strapi)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://portal.productboard.com/strapi/tabs/2-under-consideration&quot;&gt;ProductBoard&lt;/a&gt; (Roadmap, Feature requests)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/strapijs&quot;&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/Strapi-616063331867161&quot;&gt;Facebook&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/strapi&quot;&gt;YouTube Channel&lt;/a&gt; (Learn from Video Tutorials)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Migration&lt;/h2&gt; 
&lt;p&gt;Follow our &lt;a href=&quot;https://strapi.io/documentation/developer-docs/latest/migration-guide/#migrations-guides&quot;&gt;migration guides&lt;/a&gt; on the documentation to keep your projects up-to-date.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://portal.productboard.com/strapi&quot;&gt;roadmap&lt;/a&gt; to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;See our dedicated &lt;a href=&quot;https://github.com/strapi/documentation&quot;&gt;repository&lt;/a&gt; for the Strapi documentation, or view our documentation live:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://strapi.io/documentation/developer-docs/latest&quot;&gt;Developer docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://strapi.io/documentation/user-docs/latest&quot;&gt;User docs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Try live demo&lt;/h2&gt; 
&lt;p&gt;See for yourself what&#39;s under the hood by getting access to a &lt;a href=&quot;https://strapi.io/demo&quot;&gt;hosted Strapi project&lt;/a&gt; with sample data.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/strapi/strapi/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for licensing information.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ipfs/js-ipfs</title>
      <link>https://github.com/ipfs/js-ipfs</link>
      <description>&lt;p&gt;IPFS implementation in JavaScript&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;Upgrading from &amp;lt;=0.40 to 0.48?&lt;/strong&gt; See the &lt;a href=&quot;https://github.com/ipfs/js-ipfs/issues/2656&quot;&gt;release notes&lt;/a&gt; for the list of API changes and the &lt;a href=&quot;https://github.com/ipfs/js-ipfs/tree/master/docs/MIGRATION-TO-ASYNC-AWAIT.md&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;We&#39;ve come a long way, but this project is still in Alpha, lots of development is happening, APIs might change, beware of 🐉..&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read the &lt;a href=&quot;https://github.com/ipfs/js-ipfs/tree/master/docs&quot;&gt;docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Look into the &lt;a href=&quot;https://github.com/ipfs/js-ipfs/tree/master/examples&quot;&gt;examples&lt;/a&gt; to learn how to spawn an IPFS node in Node.js and in the Browser&lt;/li&gt; 
 &lt;li&gt;Consult the &lt;a href=&quot;https://github.com/ipfs/js-ipfs/tree/master/docs/core-api&quot;&gt;Core API docs&lt;/a&gt; to see what you can do with an IPFS node&lt;/li&gt; 
 &lt;li&gt;Visit https://dweb-primer.ipfs.io to learn about IPFS and the concepts that underpin it&lt;/li&gt; 
 &lt;li&gt;Head over to https://proto.school to take interactive tutorials that cover core IPFS APIs&lt;/li&gt; 
 &lt;li&gt;Check out https://docs.ipfs.io for tips, how-tos and more&lt;/li&gt; 
 &lt;li&gt;See https://blog.ipfs.io for news and more&lt;/li&gt; 
 &lt;li&gt;Need help? Please ask &#39;How do I?&#39; questions on https://discuss.ipfs.io&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Lead Maintainer 
 &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://github.com/achingbrain&quot;&gt;Alex Potsides&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents 
 &lt;!-- raw HTML omitted --&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/#getting-started&quot;&gt;Getting started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/#documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/#structure&quot;&gt;Structure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/#want-to-hack-on-ipfs&quot;&gt;Want to hack on IPFS?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;h3&gt;Install as a CLI user&lt;/h3&gt; 
&lt;p&gt;Installing &lt;code&gt;ipfs&lt;/code&gt; globally will give you the &lt;code&gt;jsipfs&lt;/code&gt; command which you can use to start a daemon running:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install -g ipfs
$ jsipfs daemon
Initializing IPFS daemon...
js-ipfs version: x.x.x
System version: x64/darwin
Node.js version: x.x.x
Swarm listening on /ip4/127.0
.... more output
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can then add a file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ jsipfs add ./hello-world.txt
added QmXXY5ZxbtuYj6DnfApLiGstzPN7fvSyigrRee3hDWPCaf hello-world.txt
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Install as an application developer&lt;/h3&gt; 
&lt;p&gt;If you do not need to run a command line daemon, use the &lt;code&gt;ipfs-core&lt;/code&gt; package - it has all the features of &lt;code&gt;ipfs&lt;/code&gt; but in a lighter package:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install ipfs-core
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then start a node in your app:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const IPFS = require(&#39;ipfs-core&#39;)

const ipfs = await IPFS.create()
const { cid } = await ipfs.add(&#39;Hello world&#39;)
console.info(cid)
// QmXXY5ZxbtuYj6DnfApLiGstzPN7fvSyigrRee3hDWPCaf
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/docs/CONFIG.md&quot;&gt;Config&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/docs/core-api&quot;&gt;Core API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/examples&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/docs/DEVELOPMENT.md&quot;&gt;Development&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Structure&lt;/h2&gt; 
&lt;p&gt;This project is broken into several modules, their purposes are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/interface-ipfs-core&quot;&gt;&lt;code&gt;/packages/interface-ipfs-core&lt;/code&gt;&lt;/a&gt; Tests to ensure adherence of an implementation to the spec&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs&quot;&gt;&lt;code&gt;/packages/ipfs&lt;/code&gt;&lt;/a&gt; The core implementation&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs-core-utils&quot;&gt;&lt;code&gt;/packages/ipfs-core-utils&lt;/code&gt;&lt;/a&gt; Helpers and utilities common to core and the HTTP RPC API client&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs-http-client&quot;&gt;&lt;code&gt;/packages/ipfs-http-client&lt;/code&gt;&lt;/a&gt; A client for the RPC-over-HTTP API presented by both js-ipfs and go-ipfs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs-http-client&quot;&gt;&lt;code&gt;/packages/ipfs-message-port-client&lt;/code&gt;&lt;/a&gt; A client for the RPC-over-HTTP API presented by both js-ipfs and go-ipfs&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs-message-port-client&quot;&gt;&lt;code&gt;/packages/ipfs-message-port-client&lt;/code&gt;&lt;/a&gt; A client for the RPC-over-message-port API presented by js-ipfs running in a shared worker&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs-message-port-protocol&quot;&gt;&lt;code&gt;/packages/ipfs-message-port-protocol&lt;/code&gt;&lt;/a&gt; Code shared by the message port client &amp;amp; server&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs/js-ipfs/master/packages/ipfs-message-port-server&quot;&gt;&lt;code&gt;/packages/ipfs-message-port-server&lt;/code&gt;&lt;/a&gt; The server that receives requests from ipfs-message-port-client&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Packages&lt;/h2&gt; 
&lt;p&gt;List of the main packages that make up the IPFS ecosystem.&lt;/p&gt; 
&lt;p&gt;| Package | Version | Deps | CI/Travis | Coverage | Lead Maintainer | | ---------|---------|---------|---------|---------|--------- | | &lt;strong&gt;Files&lt;/strong&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-unixfs&quot;&gt;&lt;code&gt;ipfs-unixfs-exporter&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-unixfs/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-unixfs-exporter.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-unixfs.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-unixfs/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-unixfs/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:alex.potsides@protocol.ai&quot;&gt;Alex Potsides&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-unixfs&quot;&gt;&lt;code&gt;ipfs-unixfs-importer&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-unixfs/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-unixfs-importer.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-unixfs.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-unixfs/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-unixfs/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:alex.potsides@protocol.ai&quot;&gt;Alex Potsides&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-unixfs&quot;&gt;&lt;code&gt;ipfs-unixfs&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-unixfs/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-unixfs.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-unixfs.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-unixfs/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-unixfs&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-unixfs/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:alex.potsides@protocol.ai&quot;&gt;Alex Potsides&lt;/a&gt; | | &lt;strong&gt;Repo&lt;/strong&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-repo&quot;&gt;&lt;code&gt;ipfs-repo&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-repo/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-repo.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-repo&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-repo.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-repo&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-repo/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-repo&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-repo/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:alex@achingbrain.net&quot;&gt;Alex Potsides&lt;/a&gt; | | &lt;strong&gt;Exchange&lt;/strong&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-block-service&quot;&gt;&lt;code&gt;ipfs-block-service&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-block-service/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-block-service.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-block-service&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-block-service.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-block-service&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-block-service/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-block-service&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-block-service/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:volker.mische@gmail.com&quot;&gt;Volker Mische&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-block&quot;&gt;&lt;code&gt;ipfs-block&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-block/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-block.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-block&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-block.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-block&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-block/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-block&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-block/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:volker.mische@gmail.com&quot;&gt;Volker Mische&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-bitswap&quot;&gt;&lt;code&gt;ipfs-bitswap&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-bitswap/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-bitswap.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-bitswap&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-bitswap.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-bitswap&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-bitswap/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-bitswap&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-bitswap/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:dirk@protocol.ai&quot;&gt;Dirk McCormick&lt;/a&gt; | | &lt;strong&gt;IPNS&lt;/strong&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipns&quot;&gt;&lt;code&gt;ipns&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipns/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipns.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipns&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipns.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipns&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipns/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipns&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipns/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:vasco.santos@moxy.studio&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;strong&gt;Generics/Utils&lt;/strong&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs&quot;&gt;&lt;code&gt;ipfs-utils&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-utils.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:hugomrdias@gmail.com&quot;&gt;Hugo Dias&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs&quot;&gt;&lt;code&gt;ipfs-http-client&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-http-client.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:alex@achingbrain.net&quot;&gt;Alex Potsides&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-http-response&quot;&gt;&lt;code&gt;ipfs-http-response&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-http-response/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-http-response.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-http-response&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-http-response.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-http-response&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-http-response/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-http-response&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-http-response/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:vasco.santos@moxy.studio&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfsd-ctl&quot;&gt;&lt;code&gt;ipfsd-ctl&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfsd-ctl/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfsd-ctl.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfsd-ctl&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfsd-ctl.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfsd-ctl&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfsd-ctl/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfsd-ctl&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfsd-ctl/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:mail@hugodias.me&quot;&gt;Hugo Dias&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/is-ipfs&quot;&gt;&lt;code&gt;is-ipfs&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/is-ipfs/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/is-ipfs.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/is-ipfs&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/is-ipfs.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/is-ipfs&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/is-ipfs/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/is-ipfs&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/is-ipfs/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:lidel@lidel.org&quot;&gt;Marcin Rataj&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/aegir&quot;&gt;&lt;code&gt;aegir&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/aegir/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/aegir.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/aegir&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/aegir.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/aegir&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/aegir/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/aegir&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/aegir/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:hugomrdias@gmail.com&quot;&gt;Hugo Dias&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-repo-migrations&quot;&gt;&lt;code&gt;ipfs-repo-migrations&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipfs/js-ipfs-repo-migrations/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipfs-repo-migrations.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipfs/js-ipfs-repo-migrations&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs/js-ipfs-repo-migrations.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipfs/js-ipfs-repo-migrations&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipfs/js-ipfs-repo-migrations/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipfs/js-ipfs-repo-migrations&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipfs/js-ipfs-repo-migrations/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | N/A | | &lt;strong&gt;libp2p&lt;/strong&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p&quot;&gt;&lt;code&gt;libp2p&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:jacobheun@gmail.com&quot;&gt;Jacob Heun&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-peer-id&quot;&gt;&lt;code&gt;peer-id&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-peer-id/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/peer-id.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-peer-id&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-peer-id.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-peer-id&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-peer-id/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-peer-id&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-peer-id/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:santos.vasco10@gmail.com&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-crypto&quot;&gt;&lt;code&gt;libp2p-crypto&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-crypto/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-crypto.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-crypto&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-crypto.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-crypto&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-crypto/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-crypto&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-crypto/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:jacobheun@gmail.com&quot;&gt;Jacob Heun&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-floodsub&quot;&gt;&lt;code&gt;libp2p-floodsub&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-floodsub/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-floodsub.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-floodsub&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-floodsub.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-floodsub&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-floodsub/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-floodsub&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-floodsub/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:vasco.santos@moxy.studio&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ChainSafe/gossipsub-js&quot;&gt;&lt;code&gt;libp2p-gossipsub&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ChainSafe/gossipsub-js/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-gossipsub.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ChainSafe/gossipsub-js&quot;&gt;&lt;img src=&quot;https://david-dm.org/ChainSafe/gossipsub-js.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ChainSafe/gossipsub-js&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ChainSafe/gossipsub-js/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ChainSafe/gossipsub-js&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ChainSafe/gossipsub-js/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:caymannava@gmail.com&quot;&gt;Cayman Nava&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-kad-dht&quot;&gt;&lt;code&gt;libp2p-kad-dht&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-kad-dht/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-kad-dht.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-kad-dht&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-kad-dht.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-kad-dht&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-kad-dht/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-kad-dht&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-kad-dht/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:vasco.santos@moxy.studio&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-mdns&quot;&gt;&lt;code&gt;libp2p-mdns&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-mdns/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-mdns.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-mdns&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-mdns.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-mdns&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-mdns/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-mdns&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-mdns/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:jacobheun@gmail.com&quot;&gt;Jacob Heun&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-bootstrap&quot;&gt;&lt;code&gt;libp2p-bootstrap&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-bootstrap/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-bootstrap.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-bootstrap&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-bootstrap.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-bootstrap&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-bootstrap/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-bootstrap&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-bootstrap/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:vasco.santos@moxy.studio&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/NodeFactoryIo/js-libp2p-noise&quot;&gt;&lt;code&gt;libp2p-noise&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/NodeFactoryIo/js-libp2p-noise/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-noise.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/NodeFactoryIo/js-libp2p-noise&quot;&gt;&lt;img src=&quot;https://david-dm.org/NodeFactoryIo/js-libp2p-noise.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/NodeFactoryIo/js-libp2p-noise&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/NodeFactoryIo/js-libp2p-noise/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/NodeFactoryIo/js-libp2p-noise&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/NodeFactoryIo/js-libp2p-noise/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | N/A | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-tcp&quot;&gt;&lt;code&gt;libp2p-tcp&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-tcp/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-tcp.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-tcp&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-tcp.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-tcp&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-tcp/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-tcp&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-tcp/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:jacobheun@gmail.com&quot;&gt;Jacob Heun&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-webrtc-star&quot;&gt;&lt;code&gt;libp2p-webrtc-star&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-webrtc-star/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-webrtc-star.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-webrtc-star&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-webrtc-star.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-webrtc-star&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-webrtc-star/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-webrtc-star&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-webrtc-star/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:vasco.santos@moxy.studio&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-websockets&quot;&gt;&lt;code&gt;libp2p-websockets&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-websockets/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-websockets.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-websockets&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-websockets.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-websockets&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-websockets/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-websockets&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-websockets/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:jacobheun@gmail.com&quot;&gt;Jacob Heun&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-mplex&quot;&gt;&lt;code&gt;libp2p-mplex&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-mplex/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-mplex.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-mplex&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-mplex.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-mplex&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-mplex/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-mplex&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-mplex/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:vasco.santos@moxy.studio&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-delegated-content-routing&quot;&gt;&lt;code&gt;libp2p-delegated-content-routing&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-delegated-content-routing/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-delegated-content-routing.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-delegated-content-routing&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-delegated-content-routing.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-delegated-content-routing&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-delegated-content-routing/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-delegated-content-routing&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-delegated-content-routing/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:jacobheun@gmail.com&quot;&gt;Jacob Heun&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-delegated-peer-routing&quot;&gt;&lt;code&gt;libp2p-delegated-peer-routing&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/libp2p/js-libp2p-delegated-peer-routing/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/libp2p-delegated-peer-routing.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/libp2p/js-libp2p-delegated-peer-routing&quot;&gt;&lt;img src=&quot;https://david-dm.org/libp2p/js-libp2p-delegated-peer-routing.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/libp2p/js-libp2p-delegated-peer-routing&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/libp2p/js-libp2p-delegated-peer-routing/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/libp2p/js-libp2p-delegated-peer-routing&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/libp2p/js-libp2p-delegated-peer-routing/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:jacobheun@gmail.com&quot;&gt;Jacob Heun&lt;/a&gt; | | &lt;strong&gt;IPLD&lt;/strong&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipld/js-ipld&quot;&gt;&lt;code&gt;ipld&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipld/js-ipld/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipld.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipld/js-ipld&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipld/js-ipld.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipld/js-ipld&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipld/js-ipld/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipld/js-ipld&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipld/js-ipld/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:volker.mische@gmail.com&quot;&gt;Volker Mische&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipld/js-ipld-dag-pb&quot;&gt;&lt;code&gt;ipld-dag-pb&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipld/js-ipld-dag-pb/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipld-dag-pb.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipld/js-ipld-dag-pb&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipld/js-ipld-dag-pb.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipld/js-ipld-dag-pb&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipld/js-ipld-dag-pb/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipld/js-ipld-dag-pb&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipld/js-ipld-dag-pb/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:volker.mische@gmail.com&quot;&gt;Volker Mische&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipld/js-ipld-dag-cbor&quot;&gt;&lt;code&gt;ipld-dag-cbor&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/ipld/js-ipld-dag-cbor/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/ipld-dag-cbor.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/ipld/js-ipld-dag-cbor&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipld/js-ipld-dag-cbor.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/ipld/js-ipld-dag-cbor&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/ipld/js-ipld-dag-cbor/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/ipld/js-ipld-dag-cbor&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/ipld/js-ipld-dag-cbor/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:volker.mische@gmail.com&quot;&gt;Volker Mische&lt;/a&gt; | | &lt;strong&gt;Multiformats&lt;/strong&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/multiformats/js-multihashing&quot;&gt;&lt;code&gt;multihashing&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/multiformats/js-multihashing/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/multihashing.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/multiformats/js-multihashing&quot;&gt;&lt;img src=&quot;https://david-dm.org/multiformats/js-multihashing.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/multiformats/js-multihashing&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/multiformats/js-multihashing/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/multiformats/js-multihashing&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/multiformats/js-multihashing/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:mail@hugodias.me&quot;&gt;Hugo Dias&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/multiformats/js-mafmt&quot;&gt;&lt;code&gt;mafmt&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/multiformats/js-mafmt/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/mafmt.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/multiformats/js-mafmt&quot;&gt;&lt;img src=&quot;https://david-dm.org/multiformats/js-mafmt.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/multiformats/js-mafmt&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/multiformats/js-mafmt/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/multiformats/js-mafmt&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/multiformats/js-mafmt/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:vasco.santos@moxy.studio&quot;&gt;Vasco Santos&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/multiformats/js-multiaddr&quot;&gt;&lt;code&gt;multiaddr&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/multiformats/js-multiaddr/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/multiaddr.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/multiformats/js-multiaddr&quot;&gt;&lt;img src=&quot;https://david-dm.org/multiformats/js-multiaddr.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/multiformats/js-multiaddr&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/multiformats/js-multiaddr/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/multiformats/js-multiaddr&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/multiformats/js-multiaddr/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:jacobheun@gmail.com&quot;&gt;Jacob Heun&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/multiformats/js-multihash&quot;&gt;&lt;code&gt;multihashes&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;https://raw.githubusercontent.com/github.com/multiformats/js-multihash/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/multihashes.svg?maxAge=86400&amp;amp;style=flat-square&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://david-dm.org/multiformats/js-multihash&quot;&gt;&lt;img src=&quot;https://david-dm.org/multiformats/js-multihash.svg?style=flat-square&quot; alt=&quot;Deps&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://travis-ci.com/multiformats/js-multihash&quot;&gt;&lt;img src=&quot;https://flat.badgen.net/travis/multiformats/js-multihash/master&quot; alt=&quot;Travis CI&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;https://codecov.io/gh/multiformats/js-multihash&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/multiformats/js-multihash/branch/master/graph/badge.svg?style=flat-square&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt; | &lt;a href=&quot;mailto:daviddias@ipfs.io&quot;&gt;David Dias&lt;/a&gt; |&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This table is generated using the module &lt;a href=&quot;https://www.npmjs.com/package/package-table&quot;&gt;&lt;code&gt;package-table&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;package-table --data=package-list.json&lt;/code&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Want to hack on IPFS?&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/ipfs/community/blob/master/CONTRIBUTING.md&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The IPFS implementation in JavaScript needs your help! There are a few things you can do right now to help out:&lt;/p&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://github.com/ipfs/community/blob/master/code-of-conduct.md&quot;&gt;Code of Conduct&lt;/a&gt; and &lt;a href=&quot;https://github.com/ipfs/community/blob/master/CONTRIBUTING_JS.md&quot;&gt;JavaScript Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Check out existing issues&lt;/strong&gt; The &lt;a href=&quot;https://github.com/ipfs/js-ipfs/issues&quot;&gt;issue list&lt;/a&gt; has many that are marked as &lt;a href=&quot;https://github.com/ipfs/js-ipfs/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22help+wanted%22&quot;&gt;&#39;help wanted&#39;&lt;/a&gt; or &lt;a href=&quot;https://github.com/ipfs/js-ipfs/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Adifficulty%3Aeasy&quot;&gt;&#39;difficulty:easy&#39;&lt;/a&gt; which make great starting points for development, many of which can be tackled with no prior IPFS knowledge&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Look at the &lt;a href=&quot;https://github.com/ipfs/roadmap&quot;&gt;IPFS Roadmap&lt;/a&gt;&lt;/strong&gt; This are the high priority items being worked on right now&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Perform code reviews&lt;/strong&gt; More eyes will help a. speed the project along b. ensure quality, and c. reduce possible future bugs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Add tests&lt;/strong&gt;. There can never be enough tests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Join the &lt;a href=&quot;https://github.com/ipfs/team-mgmt/issues/992&quot;&gt;Weekly Core Implementations Call&lt;/a&gt;&lt;/strong&gt; it&#39;s where everyone discusses what&#39;s going on with IPFS and what&#39;s next&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bgithub.com%2Fipfs%2Fjs-ipfs?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fipfs%2Fjs-ipfs.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SortableJS/Sortable</title>
      <link>https://github.com/SortableJS/Sortable</link>
      <description>&lt;p&gt;Create and reorder lists with drag-and-drop. For use with modern browsers and touch devices&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sortable &amp;nbsp; &lt;a href=&quot;https://opencollective.com/Sortable&quot;&gt;&lt;img src=&quot;https://opencollective.com/Sortable/all/badge.svg?label=financial+contributors&quot; alt=&quot;Financial Contributors on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/SortableJS/Sortable&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/SortableJS/Sortable.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://deepscan.io/dashboard#view=project&amp;amp;tid=3901&amp;amp;pid=5666&amp;amp;bid=43977&quot;&gt;&lt;img src=&quot;https://deepscan.io/api/teams/3901/projects/5666/branches/43977/badge/grade.svg&quot; alt=&quot;DeepScan grade&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.jsdelivr.com/package/npm/sortablejs&quot;&gt;&lt;img src=&quot;https://data.jsdelivr.com/v1/package/npm/sortablejs/badge&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/sortablejs&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/sortablejs.svg&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;Sortable is a JavaScript library for reorderable drag-and-drop lists.&lt;/p&gt; 
&lt;p&gt;Demo: http://sortablejs.github.io/Sortable/&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://saucelabs.com/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Supports touch devices and &lt;a href=&quot;http://caniuse.com/#search=drag&quot;&gt;modern&lt;/a&gt; browsers (including IE9)&lt;/li&gt; 
 &lt;li&gt;Can drag from one list to another or within the same list&lt;/li&gt; 
 &lt;li&gt;CSS animation when moving items&lt;/li&gt; 
 &lt;li&gt;Supports drag handles &lt;em&gt;and selectable text&lt;/em&gt; (better than voidberg&#39;s html5sortable)&lt;/li&gt; 
 &lt;li&gt;Smart auto-scrolling&lt;/li&gt; 
 &lt;li&gt;Advanced swap detection&lt;/li&gt; 
 &lt;li&gt;Smooth animations&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/tree/master/plugins/MultiDrag&quot;&gt;Multi-drag&lt;/a&gt; support&lt;/li&gt; 
 &lt;li&gt;Support for CSS transforms&lt;/li&gt; 
 &lt;li&gt;Built using native HTML5 drag and drop API&lt;/li&gt; 
 &lt;li&gt;Supports 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/meteor-sortablejs&quot;&gt;Meteor&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Angular 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/angular-sortablejs&quot;&gt;2.0+&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/angular-legacy-sortablejs&quot;&gt;1.*&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;React 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/react-sortablejs&quot;&gt;ES2015+&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/react-mixin-sortablejs&quot;&gt;Mixin&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/knockout-sortablejs&quot;&gt;Knockout&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/polymer-sortablejs&quot;&gt;Polymer&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Vue.Draggable&quot;&gt;Vue&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/ember-sortablejs&quot;&gt;Ember&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Supports any CSS library, e.g. &lt;a href=&quot;https://raw.githubusercontent.com/SortableJS/Sortable/master/#bs&quot;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Simple API&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://raw.githubusercontent.com/SortableJS/Sortable/master/#plugins&quot;&gt;plugins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SortableJS/Sortable/master/#cdn&quot;&gt;CDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;No jQuery required (but there is &lt;a href=&quot;https://github.com/SortableJS/jquery-sortablejs&quot;&gt;support&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Typescript definitions at &lt;code&gt;@types/sortablejs&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Articles&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Dragging-Multiple-Items-in-Sortable&quot;&gt;Dragging Multiple Items in Sortable&lt;/a&gt; (April 26, 2019)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Swap-Thresholds-and-Direction&quot;&gt;Swap Thresholds and Direction&lt;/a&gt; (December 2, 2018)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Sortable-v1.0-%E2%80%94-New-capabilities/&quot;&gt;Sortable v1.0 — New capabilities&lt;/a&gt; (December 22, 2014)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Sorting-with-the-help-of-HTML5-Drag&#39;n&#39;Drop-API/&quot;&gt;Sorting with the help of HTML5 Drag&#39;n&#39;Drop API&lt;/a&gt; (December 23, 2013)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Getting Started&lt;/h3&gt; 
&lt;p&gt;Install with NPM:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install sortablejs --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Install with Bower:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower install --save sortablejs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Import into your project:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Default SortableJS
import Sortable from &#39;sortablejs&#39;;

// Core SortableJS (without default plugins)
import Sortable from &#39;sortablejs/modular/sortable.core.esm.js&#39;;

// Complete SortableJS (with all plugins)
import Sortable from &#39;sortablejs/modular/sortable.complete.esm.js&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Cherrypick plugins:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Cherrypick extra plugins
import Sortable, { MultiDrag, Swap } from &#39;sortablejs&#39;;

Sortable.mount(new MultiDrag(), new Swap());


// Cherrypick default plugins
import Sortable, { AutoScroll } from &#39;sortablejs/modular/sortable.core.esm.js&#39;;

Sortable.mount(new AutoScroll());
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul id=&quot;items&quot;&amp;gt;
	&amp;lt;li&amp;gt;item 1&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;item 2&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;item 3&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var el = document.getElementById(&#39;items&#39;);
var sortable = Sortable.create(el);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use any element for the list and its elements, not just &lt;code&gt;ul&lt;/code&gt;/&lt;code&gt;li&lt;/code&gt;. Here is an &lt;a href=&quot;https://jsbin.com/visimub/edit?html,js,output&quot;&gt;example with &lt;code&gt;div&lt;/code&gt;s&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Options&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var sortable = new Sortable(el, {
	group: &quot;name&quot;,  // or { name: &quot;...&quot;, pull: [true, false, &#39;clone&#39;, array], put: [true, false, array] }
	sort: true,  // sorting inside list
	delay: 0, // time in milliseconds to define when the sorting should start
	delayOnTouchOnly: false, // only delay if user is using touch
	touchStartThreshold: 0, // px, how many pixels the point should move before cancelling a delayed drag event
	disabled: false, // Disables the sortable if set to true.
	store: null,  // @see Store
	animation: 150,  // ms, animation speed moving items when sorting, `0` — without animation
	easing: &quot;cubic-bezier(1, 0, 0, 1)&quot;, // Easing for animation. Defaults to null. See https://easings.net/ for examples.
	handle: &quot;.my-handle&quot;,  // Drag handle selector within list items
	filter: &quot;.ignore-elements&quot;,  // Selectors that do not lead to dragging (String or Function)
	preventOnFilter: true, // Call `event.preventDefault()` when triggered `filter`
	draggable: &quot;.item&quot;,  // Specifies which items inside the element should be draggable

	dataIdAttr: &#39;data-id&#39;,

	ghostClass: &quot;sortable-ghost&quot;,  // Class name for the drop placeholder
	chosenClass: &quot;sortable-chosen&quot;,  // Class name for the chosen item
	dragClass: &quot;sortable-drag&quot;,  // Class name for the dragging item

	swapThreshold: 1, // Threshold of the swap zone
	invertSwap: false, // Will always use inverted swap zone if set to true
	invertedSwapThreshold: 1, // Threshold of the inverted swap zone (will be set to swapThreshold value by default)
	direction: &#39;horizontal&#39;, // Direction of Sortable (will be detected automatically if not given)

	forceFallback: false,  // ignore the HTML5 DnD behaviour and force the fallback to kick in

	fallbackClass: &quot;sortable-fallback&quot;,  // Class name for the cloned DOM Element when using forceFallback
	fallbackOnBody: false,  // Appends the cloned DOM Element into the Document&#39;s Body
	fallbackTolerance: 0, // Specify in pixels how far the mouse should move before it&#39;s considered as a drag.

	dragoverBubble: false,
	removeCloneOnHide: true, // Remove the clone element when it is not showing, rather than just hiding it
	emptyInsertThreshold: 5, // px, distance mouse must be from empty sortable to insert drag element into it


	setData: function (/** DataTransfer */dataTransfer, /** HTMLElement*/dragEl) {
		dataTransfer.setData(&#39;Text&#39;, dragEl.textContent); // `dataTransfer` object of HTML5 DragEvent
	},

	// Element is chosen
	onChoose: function (/**Event*/evt) {
		evt.oldIndex;  // element index within parent
	},

	// Element is unchosen
	onUnchoose: function(/**Event*/evt) {
		// same properties as onEnd
	},

	// Element dragging started
	onStart: function (/**Event*/evt) {
		evt.oldIndex;  // element index within parent
	},

	// Element dragging ended
	onEnd: function (/**Event*/evt) {
		var itemEl = evt.item;  // dragged HTMLElement
		evt.to;    // target list
		evt.from;  // previous list
		evt.oldIndex;  // element&#39;s old index within old parent
		evt.newIndex;  // element&#39;s new index within new parent
		evt.oldDraggableIndex; // element&#39;s old index within old parent, only counting draggable elements
		evt.newDraggableIndex; // element&#39;s new index within new parent, only counting draggable elements
		evt.clone // the clone element
		evt.pullMode;  // when item is in another sortable: `&quot;clone&quot;` if cloning, `true` if moving
	},

	// Element is dropped into the list from another list
	onAdd: function (/**Event*/evt) {
		// same properties as onEnd
	},

	// Changed sorting within list
	onUpdate: function (/**Event*/evt) {
		// same properties as onEnd
	},

	// Called by any change to the list (add / update / remove)
	onSort: function (/**Event*/evt) {
		// same properties as onEnd
	},

	// Element is removed from the list into another list
	onRemove: function (/**Event*/evt) {
		// same properties as onEnd
	},

	// Attempt to drag a filtered element
	onFilter: function (/**Event*/evt) {
		var itemEl = evt.item;  // HTMLElement receiving the `mousedown|tapstart` event.
	},

	// Event when you move an item in the list or between lists
	onMove: function (/**Event*/evt, /**Event*/originalEvent) {
		// Example: https://jsbin.com/nawahef/edit?js,output
		evt.dragged; // dragged HTMLElement
		evt.draggedRect; // DOMRect {left, top, right, bottom}
		evt.related; // HTMLElement on which have guided
		evt.relatedRect; // DOMRect
		evt.willInsertAfter; // Boolean that is true if Sortable will insert drag element after target by default
		originalEvent.clientY; // mouse position
		// return false; — for cancel
		// return -1; — insert before target
		// return 1; — insert after target
		// return true; — keep default insertion point based on the direction
		// return void; — keep default insertion point based on the direction
	},

	// Called when creating a clone of element
	onClone: function (/**Event*/evt) {
		var origEl = evt.item;
		var cloneEl = evt.clone;
	},

	// Called when dragging element changes position
	onChange: function(/**Event*/evt) {
		evt.newIndex // most likely why this event is used is to get the dragging element&#39;s current index
		// same properties as onEnd
	}
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;group&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;To drag elements from one list into another, both lists must have the same &lt;code&gt;group&lt;/code&gt; value. You can also define whether lists can give away, give and keep a copy (&lt;code&gt;clone&lt;/code&gt;), and receive elements.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;name: &lt;code&gt;String&lt;/code&gt; — group name&lt;/li&gt; 
 &lt;li&gt;pull: &lt;code&gt;true|false|[&quot;foo&quot;, &quot;bar&quot;]|&#39;clone&#39;|function&lt;/code&gt; — ability to move from the list. &lt;code&gt;clone&lt;/code&gt; — copy the item, rather than move. Or an array of group names which the elements may be put in. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;put: &lt;code&gt;true|false|[&quot;baz&quot;, &quot;qux&quot;]|function&lt;/code&gt; — whether elements can be added from other lists, or an array of group names from which elements can be added.&lt;/li&gt; 
 &lt;li&gt;revertClone: &lt;code&gt;boolean&lt;/code&gt; — revert cloned element to initial position after moving to a another list.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Demo:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://jsbin.com/hijetos/edit?js,output&lt;/li&gt; 
 &lt;li&gt;https://jsbin.com/nacoyah/edit?js,output — use of complex logic in the &lt;code&gt;pull&lt;/code&gt; and&lt;code&gt; put&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;https://jsbin.com/bifuyab/edit?js,output — use &lt;code&gt;revertClone: true&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;sort&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Allow sorting inside list.&lt;/p&gt; 
&lt;p&gt;Demo: https://jsbin.com/jayedig/edit?js,output&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;delay&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Time in milliseconds to define when the sorting should start. Unfortunately, due to browser restrictions, delaying is not possible on IE or Edge with native drag &amp;amp; drop.&lt;/p&gt; 
&lt;p&gt;Demo: https://jsbin.com/zosiwah/edit?js,output&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;delayOnTouchOnly&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Whether or not the delay should be applied only if the user is using touch (eg. on a mobile device). No delay will be applied in any other case. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;swapThreshold&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Percentage of the target that the swap zone will take up, as a float between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Swap-Thresholds-and-Direction#swap-threshold&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Demo: http://sortablejs.github.io/Sortable#thresholds&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;invertSwap&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to set the swap zone to the sides of the target, for the effect of sorting &quot;in between&quot; items.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Swap-Thresholds-and-Direction#forcing-inverted-swap-zone&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Demo: http://sortablejs.github.io/Sortable#thresholds&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;invertedSwapThreshold&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Percentage of the target that the inverted swap zone will take up, as a float between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. If not given, will default to &lt;code&gt;swapThreshold&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Swap-Thresholds-and-Direction#dealing-with-swap-glitching&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;direction&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Direction that the Sortable should sort in. Can be set to &lt;code&gt;&#39;vertical&#39;&lt;/code&gt;, &lt;code&gt;&#39;horizontal&#39;&lt;/code&gt;, or a function, which will be called whenever a target is dragged over. Must return &lt;code&gt;&#39;vertical&#39;&lt;/code&gt; or &lt;code&gt;&#39;horizontal&#39;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Swap-Thresholds-and-Direction#direction&quot;&gt;Read more&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Example of direction detection for vertical list that includes full column and half column elements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Sortable.create(el, {
	direction: function(evt, target, dragEl) {
		if (target !== null &amp;amp;&amp;amp; target.className.includes(&#39;half-column&#39;) &amp;amp;&amp;amp; dragEl.className.includes(&#39;half-column&#39;)) {
			return &#39;horizontal&#39;;
		}
		return &#39;vertical&#39;;
	}
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;touchStartThreshold&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;This option is similar to &lt;code&gt;fallbackTolerance&lt;/code&gt; option.&lt;/p&gt; 
&lt;p&gt;When the &lt;code&gt;delay&lt;/code&gt; option is set, some phones with very sensitive touch displays like the Samsung Galaxy S8 will fire unwanted touchmove events even when your finger is not moving, resulting in the sort not triggering.&lt;/p&gt; 
&lt;p&gt;This option sets the minimum pointer movement that must occur before the delayed sorting is cancelled.&lt;/p&gt; 
&lt;p&gt;Values between 3 to 5 are good.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;disabled&lt;/code&gt; options&lt;/h4&gt; 
&lt;p&gt;Disables the sortable if set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Demo: https://jsbin.com/sewokud/edit?js,output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var sortable = Sortable.create(list);

document.getElementById(&quot;switcher&quot;).onclick = function () {
	var state = sortable.option(&quot;disabled&quot;); // get

	sortable.option(&quot;disabled&quot;, !state); // set
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;handle&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;To make list items draggable, Sortable disables text selection by the user. That&#39;s not always desirable. To allow text selection, define a drag handler, which is an area of every list element that allows it to be dragged around.&lt;/p&gt; 
&lt;p&gt;Demo: https://jsbin.com/numakuh/edit?html,js,output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Sortable.create(el, {
	handle: &quot;.my-handle&quot;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;span class=&quot;my-handle&quot;&amp;gt;::&amp;lt;/span&amp;gt; list item text one
	&amp;lt;li&amp;gt;&amp;lt;span class=&quot;my-handle&quot;&amp;gt;::&amp;lt;/span&amp;gt; list item text two
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.my-handle {
	cursor: move;
	cursor: -webkit-grabbing;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;filter&lt;/code&gt; option&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Sortable.create(list, {
	filter: &quot;.js-remove, .js-edit&quot;,
	onFilter: function (evt) {
		var item = evt.item,
			ctrl = evt.target;

		if (Sortable.utils.is(ctrl, &quot;.js-remove&quot;)) {  // Click on remove button
			item.parentNode.removeChild(item); // remove sortable item
		}
		else if (Sortable.utils.is(ctrl, &quot;.js-edit&quot;)) {  // Click on edit link
			// ...
		}
	}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;ghostClass&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Class name for the drop placeholder (default &lt;code&gt;sortable-ghost&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Demo: https://jsbin.com/henuyiw/edit?css,js,output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.ghost {
  opacity: 0.4;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Sortable.create(list, {
  ghostClass: &quot;ghost&quot;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;chosenClass&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Class name for the chosen item (default &lt;code&gt;sortable-chosen&lt;/code&gt;).&lt;/p&gt; 
&lt;p&gt;Demo: https://jsbin.com/hoqufox/edit?css,js,output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.chosen {
  color: #fff;
  background-color: #c00;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Sortable.create(list, {
  delay: 500,
  chosenClass: &quot;chosen&quot;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;forceFallback&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, the Fallback for non HTML5 Browser will be used, even if we are using an HTML5 Browser. This gives us the possibility to test the behaviour for older Browsers even in newer Browser, or make the Drag &#39;n Drop feel more consistent between Desktop , Mobile and old Browsers.&lt;/p&gt; 
&lt;p&gt;On top of that, the Fallback always generates a copy of that DOM Element and appends the class &lt;code&gt;fallbackClass&lt;/code&gt; defined in the options. This behaviour controls the look of this &#39;dragged&#39; Element.&lt;/p&gt; 
&lt;p&gt;Demo: https://jsbin.com/sibiput/edit?html,css,js,output&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;fallbackTolerance&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;Emulates the native drag threshold. Specify in pixels how far the mouse should move before it&#39;s considered as a drag. Useful if the items are also clickable like in a list of links.&lt;/p&gt; 
&lt;p&gt;When the user clicks inside a sortable element, it&#39;s not uncommon for your hand to move a little between the time you press and the time you release. Dragging only starts if you move the pointer past a certain tolerance, so that you don&#39;t accidentally start dragging every time you click.&lt;/p&gt; 
&lt;p&gt;3 to 5 are probably good values.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;dragoverBubble&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;If set to &lt;code&gt;true&lt;/code&gt;, the dragover event will bubble to parent sortables. Works on both fallback and native dragover event. By default, it is false, but Sortable will only stop bubbling the event once the element has been inserted into a parent Sortable, or &lt;em&gt;can&lt;/em&gt; be inserted into a parent Sortable, but isn&#39;t at that specific time (due to animation, etc).&lt;/p&gt; 
&lt;p&gt;Since 1.8.0, you will probably want to leave this option as false. Before 1.8.0, it may need to be &lt;code&gt;true&lt;/code&gt; for nested sortables to work.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;removeCloneOnHide&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;If set to &lt;code&gt;false&lt;/code&gt;, the clone is hidden by having it&#39;s CSS &lt;code&gt;display&lt;/code&gt; property set to &lt;code&gt;none&lt;/code&gt;. By default, this option is &lt;code&gt;true&lt;/code&gt;, meaning Sortable will remove the cloned element from the DOM when it is supposed to be hidden.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h4&gt;&lt;code&gt;emptyInsertThreshold&lt;/code&gt; option&lt;/h4&gt; 
&lt;p&gt;The distance (in pixels) the mouse must be from an empty sortable while dragging for the drag element to be inserted into that sortable. Defaults to &lt;code&gt;5&lt;/code&gt;. Set to &lt;code&gt;0&lt;/code&gt; to disable this feature.&lt;/p&gt; 
&lt;p&gt;Demo: https://jsbin.com/becavoj/edit?js,output&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Event object (&lt;a href=&quot;https://jsbin.com/fogujiv/edit?js,output&quot;&gt;demo&lt;/a&gt;)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;to:&lt;code&gt;HTMLElement&lt;/code&gt; — list, in which moved element&lt;/li&gt; 
 &lt;li&gt;from:&lt;code&gt;HTMLElement&lt;/code&gt; — previous list&lt;/li&gt; 
 &lt;li&gt;item:&lt;code&gt;HTMLElement&lt;/code&gt; — dragged element&lt;/li&gt; 
 &lt;li&gt;clone:&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;oldIndex:&lt;code&gt;Number|undefined&lt;/code&gt; — old index within parent&lt;/li&gt; 
 &lt;li&gt;newIndex:&lt;code&gt;Number|undefined&lt;/code&gt; — new index within parent&lt;/li&gt; 
 &lt;li&gt;oldDraggableIndex: &lt;code&gt;Number|undefined&lt;/code&gt; — old index within parent, only counting draggable elements&lt;/li&gt; 
 &lt;li&gt;newDraggableIndex: &lt;code&gt;Number|undefined&lt;/code&gt; — new index within parent, only counting draggable elements&lt;/li&gt; 
 &lt;li&gt;pullMode:&lt;code&gt;String|Boolean|undefined&lt;/code&gt; — Pull mode if dragging into another sortable (&lt;code&gt;&quot;clone&quot;&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt;), otherwise undefined&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;code&gt;move&lt;/code&gt; event object&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;to:&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;from:&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;dragged:&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;draggedRect:&lt;code&gt;DOMRect&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;related:&lt;code&gt;HTMLElement&lt;/code&gt; — element on which have guided&lt;/li&gt; 
 &lt;li&gt;relatedRect:&lt;code&gt;DOMRect&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;willInsertAfter:&lt;code&gt;Boolean&lt;/code&gt; — &lt;code&gt;true&lt;/code&gt; if will element be inserted after target (or &lt;code&gt;false&lt;/code&gt; if before)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;Method&lt;/h3&gt; 
&lt;h5&gt;option(name:&lt;code&gt;String&lt;/code&gt;[, value:&lt;code&gt;*&lt;/code&gt;]):&lt;code&gt;*&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;Get or set the option.&lt;/p&gt; 
&lt;h5&gt;closest(el:&lt;code&gt;HTMLElement&lt;/code&gt;[, selector:&lt;code&gt;String&lt;/code&gt;]):&lt;code&gt;HTMLElement|null&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.&lt;/p&gt; 
&lt;h5&gt;toArray():&lt;code&gt;String[]&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;Serializes the sortable&#39;s item &lt;code&gt;data-id&lt;/code&gt;&#39;s (&lt;code&gt;dataIdAttr&lt;/code&gt; option) into an array of string.&lt;/p&gt; 
&lt;h5&gt;sort(order:&lt;code&gt;String[]&lt;/code&gt;, useAnimation:&lt;code&gt;Boolean&lt;/code&gt;)&lt;/h5&gt; 
&lt;p&gt;Sorts the elements according to the array.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var order = sortable.toArray();
sortable.sort(order.reverse(), true); // apply
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;save()&lt;/h5&gt; 
&lt;p&gt;Save the current sorting (see &lt;a href=&quot;https://raw.githubusercontent.com/SortableJS/Sortable/master/#store&quot;&gt;store&lt;/a&gt;)&lt;/p&gt; 
&lt;h5&gt;destroy()&lt;/h5&gt; 
&lt;p&gt;Removes the sortable functionality completely.&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Store&lt;/h3&gt; 
&lt;p&gt;Saving and restoring of the sort.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
	&amp;lt;li data-id=&quot;1&quot;&amp;gt;order&amp;lt;/li&amp;gt;
	&amp;lt;li data-id=&quot;2&quot;&amp;gt;save&amp;lt;/li&amp;gt;
	&amp;lt;li data-id=&quot;3&quot;&amp;gt;restore&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Sortable.create(el, {
	group: &quot;localStorage-example&quot;,
	store: {
		/**
		 * Get the order of elements. Called once during initialization.
		 * @param   {Sortable}  sortable
		 * @returns {Array}
		 */
		get: function (sortable) {
			var order = localStorage.getItem(sortable.options.group.name);
			return order ? order.split(&#39;|&#39;) : [];
		},

		/**
		 * Save the order of elements. Called onEnd (when the item is dropped).
		 * @param {Sortable}  sortable
		 */
		set: function (sortable) {
			var order = sortable.toArray();
			localStorage.setItem(sortable.options.group.name, order.join(&#39;|&#39;));
		}
	}
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Bootstrap&lt;/h3&gt; 
&lt;p&gt;Demo: https://jsbin.com/visimub/edit?html,js,output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Latest compiled and minified CSS --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css&quot;/&amp;gt;


&amp;lt;!-- Latest Sortable --&amp;gt;
&amp;lt;script src=&quot;http://SortableJS.github.io/Sortable/Sortable.js&quot;&amp;gt;&amp;lt;/script&amp;gt;


&amp;lt;!-- Simple List --&amp;gt;
&amp;lt;ul id=&quot;simpleList&quot; class=&quot;list-group&quot;&amp;gt;
	&amp;lt;li class=&quot;list-group-item&quot;&amp;gt;This is &amp;lt;a href=&quot;http://SortableJS.github.io/Sortable/&quot;&amp;gt;Sortable&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li class=&quot;list-group-item&quot;&amp;gt;It works with Bootstrap...&amp;lt;/li&amp;gt;
	&amp;lt;li class=&quot;list-group-item&quot;&amp;gt;...out of the box.&amp;lt;/li&amp;gt;
	&amp;lt;li class=&quot;list-group-item&quot;&amp;gt;It has support for touch devices.&amp;lt;/li&amp;gt;
	&amp;lt;li class=&quot;list-group-item&quot;&amp;gt;Just drag some elements around.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;script&amp;gt;
    // Simple list
    Sortable.create(simpleList, { /* options */ });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Static methods &amp;amp; properties&lt;/h3&gt; 
&lt;h5&gt;Sortable.create(el:&lt;code&gt;HTMLElement&lt;/code&gt;[, options:&lt;code&gt;Object&lt;/code&gt;]):&lt;code&gt;Sortable&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;Create new instance.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h5&gt;Sortable.active:&lt;code&gt;Sortable&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;The active Sortable instance.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h5&gt;Sortable.dragged:&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;The element being dragged.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h5&gt;Sortable.ghost:&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;The ghost element.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h5&gt;Sortable.clone:&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;The clone element.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h5&gt;Sortable.get(element:&lt;code&gt;HTMLElement&lt;/code&gt;):&lt;code&gt;Sortable&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;Get the Sortable instance on an element.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h5&gt;Sortable.mount(plugin:&lt;code&gt;...SortablePlugin|SortablePlugin[]&lt;/code&gt;)&lt;/h5&gt; 
&lt;p&gt;Mounts a plugin to Sortable.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h5&gt;Sortable.utils&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;on(el&lt;code&gt;:HTMLElement&lt;/code&gt;, event&lt;code&gt;:String&lt;/code&gt;, fn&lt;code&gt;:Function&lt;/code&gt;) — attach an event handler function&lt;/li&gt; 
 &lt;li&gt;off(el&lt;code&gt;:HTMLElement&lt;/code&gt;, event&lt;code&gt;:String&lt;/code&gt;, fn&lt;code&gt;:Function&lt;/code&gt;) — remove an event handler&lt;/li&gt; 
 &lt;li&gt;css(el&lt;code&gt;:HTMLElement&lt;/code&gt;)&lt;code&gt;:Object&lt;/code&gt; — get the values of all the CSS properties&lt;/li&gt; 
 &lt;li&gt;css(el&lt;code&gt;:HTMLElement&lt;/code&gt;, prop&lt;code&gt;:String&lt;/code&gt;)&lt;code&gt;:Mixed&lt;/code&gt; — get the value of style properties&lt;/li&gt; 
 &lt;li&gt;css(el&lt;code&gt;:HTMLElement&lt;/code&gt;, prop&lt;code&gt;:String&lt;/code&gt;, value&lt;code&gt;:String&lt;/code&gt;) — set one CSS properties&lt;/li&gt; 
 &lt;li&gt;css(el&lt;code&gt;:HTMLElement&lt;/code&gt;, props&lt;code&gt;:Object&lt;/code&gt;) — set more CSS properties&lt;/li&gt; 
 &lt;li&gt;find(ctx&lt;code&gt;:HTMLElement&lt;/code&gt;, tagName&lt;code&gt;:String&lt;/code&gt;[, iterator&lt;code&gt;:Function&lt;/code&gt;])&lt;code&gt;:Array&lt;/code&gt; — get elements by tag name&lt;/li&gt; 
 &lt;li&gt;bind(ctx&lt;code&gt;:Mixed&lt;/code&gt;, fn&lt;code&gt;:Function&lt;/code&gt;)&lt;code&gt;:Function&lt;/code&gt; — Takes a function and returns a new one that will always have a particular context&lt;/li&gt; 
 &lt;li&gt;is(el&lt;code&gt;:HTMLElement&lt;/code&gt;, selector&lt;code&gt;:String&lt;/code&gt;)&lt;code&gt;:Boolean&lt;/code&gt; — check the current matched set of elements against a selector&lt;/li&gt; 
 &lt;li&gt;closest(el&lt;code&gt;:HTMLElement&lt;/code&gt;, selector&lt;code&gt;:String&lt;/code&gt;[, ctx&lt;code&gt;:HTMLElement&lt;/code&gt;])&lt;code&gt;:HTMLElement|Null&lt;/code&gt; — for each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree&lt;/li&gt; 
 &lt;li&gt;clone(el&lt;code&gt;:HTMLElement&lt;/code&gt;)&lt;code&gt;:HTMLElement&lt;/code&gt; — create a deep copy of the set of matched elements&lt;/li&gt; 
 &lt;li&gt;toggleClass(el&lt;code&gt;:HTMLElement&lt;/code&gt;, name&lt;code&gt;:String&lt;/code&gt;, state&lt;code&gt;:Boolean&lt;/code&gt;) — add or remove one classes from each element&lt;/li&gt; 
 &lt;li&gt;detectDirection(el&lt;code&gt;:HTMLElement&lt;/code&gt;)&lt;code&gt;:String&lt;/code&gt; — automatically detect the &lt;a href=&quot;https://github.com/SortableJS/Sortable/wiki/Swap-Thresholds-and-Direction#direction&quot;&gt;direction&lt;/a&gt; of the element as either &lt;code&gt;&#39;vertical&#39;&lt;/code&gt; or &lt;code&gt;&#39;horizontal&#39;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;Plugins&lt;/h3&gt; 
&lt;h4&gt;Extra Plugins (included in complete versions)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/tree/master/plugins/MultiDrag&quot;&gt;MultiDrag&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/tree/master/plugins/Swap&quot;&gt;Swap&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Default Plugins (included in default versions)&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/tree/master/plugins/AutoScroll&quot;&gt;AutoScroll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SortableJS/Sortable/tree/master/plugins/OnSpill&quot;&gt;OnSpill&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;CDN&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- jsDelivr :: Sortable :: Latest (https://www.jsdelivr.com/package/npm/sortablejs) --&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Contributing (Issue/PR)&lt;/h3&gt; 
&lt;p&gt;Please, &lt;a href=&quot;https://raw.githubusercontent.com/SortableJS/Sortable/master/CONTRIBUTING.md&quot;&gt;read this&lt;/a&gt;.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;h3&gt;Code Contributors&lt;/h3&gt; 
&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&quot;https://raw.githubusercontent.com/SortableJS/Sortable/master/CONTRIBUTING.md&quot;&gt;Contribute&lt;/a&gt;]. 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;Financial Contributors&lt;/h3&gt; 
&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&quot;https://opencollective.com/Sortable/contribute&quot;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; 
&lt;h4&gt;Individuals&lt;/h4&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h4&gt;Organizations&lt;/h4&gt; 
&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&quot;https://opencollective.com/Sortable/contribute&quot;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;MIT LICENSE&lt;/h2&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>brave/brave-browser</title>
      <link>https://github.com/brave/brave-browser</link>
      <description>&lt;p&gt;Next generation Brave browser for Android, Linux, macOS, Windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Brave Browser&lt;/h1&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This repository holds the build tools needed to build the Brave desktop browser for macOS, Windows, and Linux. In particular, it fetches and syncs code from the projects we define in &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;src/brave/DEPS&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://chromium.googlesource.com/chromium/src.git&quot;&gt;Chromium&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Fetches code via &lt;code&gt;depot_tools&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;sets the branch for Chromium (ex: 65.0.3325.181).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-core&quot;&gt;brave-core&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Mounted at &lt;code&gt;src/brave&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Maintains patches for 3rd party Chromium code.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/adblock-rust&quot;&gt;adblock-rust&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Implements Brave&#39;s ad-block engine.&lt;/li&gt; 
   &lt;li&gt;Linked through &lt;a href=&quot;https://github.com/brave/adblock-rust-ffi&quot;&gt;brave/adblock-rust-ffi&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Downloads&lt;/h2&gt; 
&lt;p&gt;You can &lt;a href=&quot;https://brave.com/download&quot;&gt;visit our website&lt;/a&gt; to get the latest stable release.&lt;/p&gt; 
&lt;h2&gt;Other repositories&lt;/h2&gt; 
&lt;p&gt;For other versions of our browser, please see:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS - &lt;a href=&quot;https://github.com/brave/brave-ios&quot;&gt;brave/brave-ios&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see the &lt;a href=&quot;https://raw.githubusercontent.com/brave/brave-browser/master/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://community.brave.com/&quot;&gt;Join the Q&amp;amp;A community&lt;/a&gt; if you&#39;d like to get more involved with Brave. You can &lt;a href=&quot;https://community.brave.com/c/support-and-troubleshooting&quot;&gt;ask for help&lt;/a&gt;, &lt;a href=&quot;https://community.brave.com/c/brave-feature-requests&quot;&gt;discuss features you&#39;d like to see&lt;/a&gt;, and a lot more. We&#39;d love to have your help so that we can continue improving Brave.&lt;/p&gt; 
&lt;p&gt;Help us translate Brave to your language by submitting translations at https://www.transifex.com/brave/brave/&lt;/p&gt; 
&lt;p&gt;Follow &lt;a href=&quot;https://twitter.com/brave&quot;&gt;@brave&lt;/a&gt; on Twitter for important news and announcements.&lt;/p&gt; 
&lt;h2&gt;Install prerequisites&lt;/h2&gt; 
&lt;p&gt;Follow the instructions for your platform:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-browser/wiki/macOS-Development-Environment&quot;&gt;macOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-browser/wiki/Windows-Development-Environment&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-browser/wiki/Linux-Development-Environment&quot;&gt;Linux/Android&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Clone and initialize the repo&lt;/h2&gt; 
&lt;p&gt;Once you have the prerequisites installed, you can get the code and initialize the build environment.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone git@github.com:brave/brave-browser.git
cd brave-browser
npm install

# this takes 30-45 minutes to run
# the Chromium source is downloaded which has a large history
npm run init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;brave-core based android builds should use &lt;code&gt;npm run init -- --target_os=android --target_arch=arm&lt;/code&gt; (or whatever cpu type you want to build for)&lt;/p&gt; 
&lt;p&gt;You can also set the target_os and target_arch for init and build using&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm config set target_os android
npm config set target_arch arm
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Build Brave&lt;/h2&gt; 
&lt;p&gt;The default build type is component.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# start the component build compile
npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To do a release build:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;# start the release compile
npm run build Release
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;brave-core based android builds should use &lt;code&gt;npm run build -- --target_os=android --target_arch=arm&lt;/code&gt; or set the npm config variables as specified above for &lt;code&gt;init&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Build Configurations&lt;/h3&gt; 
&lt;p&gt;Running a release build with &lt;code&gt;npm run build Release&lt;/code&gt; can be very slow and use a lot of RAM especially on Linux with the Gold LLVM plugin.&lt;/p&gt; 
&lt;p&gt;To run a statically linked build (takes longer to build, but starts faster)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build -- Static
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To run a debug build (Component build with is_debug=true)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build -- Debug
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may also want to try [[using sccache|sccache-for-faster-builds]].&lt;/p&gt; 
&lt;h2&gt;Run Brave&lt;/h2&gt; 
&lt;p&gt;To start the build:&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;npm start [Release|Component|Static|Debug]&lt;/code&gt;&lt;/p&gt; 
&lt;h1&gt;Update Brave&lt;/h1&gt; 
&lt;p&gt;&lt;code&gt;npm run sync -- [--force] [--init] [--create] [brave_core_ref]&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;This will attempt to stash your local changes in brave-core, but it&#39;s safer to commit local changes before running this&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;npm run sync&lt;/code&gt; will (depending on the below flags):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;📥 Update sub-projects (chromium, brave-core) to latest commit of a git ref (e.g. tag or branch)&lt;/li&gt; 
 &lt;li&gt;🤕 Apply patches&lt;/li&gt; 
 &lt;li&gt;🔄 Update gclient DEPS dependencies&lt;/li&gt; 
 &lt;li&gt;⏩ Run hooks (e.g. to perform &lt;code&gt;npm install&lt;/code&gt; on child projects)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;| flag | Description | |---|---| |&lt;code&gt;[no flags]&lt;/code&gt;|updates chromium if needed and re-applies patches. If the chromium version did not change it will only re-apply patches that have changed. Will update child dependencies &lt;strong&gt;only if any project needed updating during this script run&lt;/strong&gt; 
 &lt;!-- raw HTML omitted --&gt; **Use this if you want the script to manage keeping you up to date instead of pulling or switching branch manually. **| |&lt;code&gt;--create&lt;/code&gt;|when used with &lt;code&gt;brave_core_ref&lt;/code&gt; it will create a branch if one does not already exist| |&lt;code&gt;--force&lt;/code&gt;|updates both &lt;em&gt;Chromium&lt;/em&gt; and &lt;em&gt;brave-core&lt;/em&gt; to the latest remote commit for the current brave-core branch and the &lt;em&gt;Chromium&lt;/em&gt; ref specified in brave-browser/package.json (e.g. &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;74.0.0.103&lt;/code&gt;). Will re-apply all patches. Will force update all child dependencies 
 &lt;!-- raw HTML omitted --&gt; **Use this if you&#39;re having trouble and want to force the branches back to a known state. **| |&lt;code&gt;--init&lt;/code&gt;|force update both &lt;em&gt;Chromium&lt;/em&gt; and &lt;em&gt;brave-core&lt;/em&gt; to the versions specified in brave-browser/package.json and force updates all dependent repos - same as &lt;code&gt;npm run init&lt;/code&gt;|&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;npm run sync brave_core_ref&lt;/code&gt; to checkout the specified &lt;em&gt;brave-core&lt;/em&gt; ref and update all dependent repos including chromium if needed&lt;/p&gt; 
&lt;h3&gt;Scenarios&lt;/h3&gt; 
&lt;h4&gt;Create a new branch&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-core&amp;gt; git checkout -b branch_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-browser&amp;gt; npm run sync -- --create branch_name
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Checkout an existing branch or tag&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-core&amp;gt; git fetch origin
brave-core&amp;gt; git checkout [-b] branch_name
brave-core&amp;gt; npm run sync
...Updating 2 patches...
...Updating child dependencies...
...Running hooks...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-browser&amp;gt; npm run sync --create branch_name
...Updating 2 patches...
...Updating child dependencies...
...Running hooks...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Update the current branch to latest remote&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-core&amp;gt; git pull
brave-core&amp;gt; npm run sync
...Updating 2 patches...
...Updating child dependencies...
...Running hooks...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Reset to latest brave-browser master, brave-core master and chromium&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-browser&amp;gt; git checkout master
brave-browser&amp;gt; git pull
brave-browser&amp;gt; npm run sync -- --init
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;When you know that DEPS didn&#39;t change, but .patch files did (quickest)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brave-core&amp;gt; git checkout featureB
brave-core&amp;gt; git pull
brave-browser&amp;gt; npm run apply_patches
...Applying 2 patches...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Enabling third-party APIs:&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;Google Safe Browsing&lt;/strong&gt;: Get an API key with SafeBrowsing API enabled from https://console.developers.google.com/. Update the &lt;code&gt;GOOGLE_API_KEY&lt;/code&gt; environment variable with your key as per https://www.chromium.org/developers/how-tos/api-keys to enable Google SafeBrowsing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;Troubleshooting&lt;/h1&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/brave/brave-browser/wiki/Troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt; for solutions to common problems.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lerna/lerna</title>
      <link>https://github.com/lerna/lerna</link>
      <description>&lt;p&gt;🐉 A tool for managing JavaScript projects with multiple packages.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#how-it-works&quot;&gt;How It Works&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Commands 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/publish#readme&quot;&gt;&lt;code&gt;lerna publish&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/version#readme&quot;&gt;&lt;code&gt;lerna version&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/bootstrap#readme&quot;&gt;&lt;code&gt;lerna bootstrap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/list#readme&quot;&gt;&lt;code&gt;lerna list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/changed#readme&quot;&gt;&lt;code&gt;lerna changed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/diff#readme&quot;&gt;&lt;code&gt;lerna diff&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/exec#readme&quot;&gt;&lt;code&gt;lerna exec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/run#readme&quot;&gt;&lt;code&gt;lerna run&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/init#readme&quot;&gt;&lt;code&gt;lerna init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/add#readme&quot;&gt;&lt;code&gt;lerna add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/clean#readme&quot;&gt;&lt;code&gt;lerna clean&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/import#readme&quot;&gt;&lt;code&gt;lerna import&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/link#readme&quot;&gt;&lt;code&gt;lerna link&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/create#readme&quot;&gt;&lt;code&gt;lerna create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/info#readme&quot;&gt;&lt;code&gt;lerna info&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#concepts&quot;&gt;Concepts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#lernajson&quot;&gt;Lerna.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/core/global-options&quot;&gt;Global Flags&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/core/filter-options&quot;&gt;Filter Flags&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Splitting up large codebases into separate independently versioned packages is extremely useful for code sharing. However, making changes across many repositories is &lt;em&gt;messy&lt;/em&gt; and difficult to track, and testing across repositories becomes complicated very quickly.&lt;/p&gt; 
&lt;p&gt;To solve these (and many other) problems, some projects will organize their codebases into multi-package repositories (sometimes called &lt;a href=&quot;https://github.com/babel/babel/blob/master/doc/design/monorepo.md&quot;&gt;monorepos&lt;/a&gt;). Projects like &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages&quot;&gt;Babel&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/react/tree/master/packages&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/angular/tree/master/modules&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/master/packages&quot;&gt;Ember&lt;/a&gt;, &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages&quot;&gt;Meteor&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/jest/tree/master/packages&quot;&gt;Jest&lt;/a&gt;, and many others develop all of their packages within a single repository.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Lerna can also reduce the time and space requirements for numerous copies of packages in development and build environments - normally a downside of dividing a project into many separate NPM packages. See the &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/doc/hoist.md&quot;&gt;hoist documentation&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;What does a Lerna repo look like?&lt;/h3&gt; 
&lt;p&gt;There&#39;s actually very little to it. You have a file structure that looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;my-lerna-repo/
  package.json
  packages/
    package-1/
      package.json
    package-2/
      package.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;What can Lerna do?&lt;/h3&gt; 
&lt;p&gt;The two primary commands in Lerna are &lt;code&gt;lerna bootstrap&lt;/code&gt; and &lt;code&gt;lerna publish&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; will link dependencies in the repo together. &lt;code&gt;publish&lt;/code&gt; will help publish any updated packages.&lt;/p&gt; 
&lt;h3&gt;What can&#39;t Lerna do?&lt;/h3&gt; 
&lt;p&gt;Lerna is not a deployment tool for serverless monorepos. Hoisting might be incompatible with traditional serverless monorepo deployment techniques.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The instructions below are for Lerna 3.x. We recommend using it instead of 2.x for a new Lerna project.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Let&#39;s start by installing Lerna as a dev dependency of your project with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ mkdir lerna-repo &amp;amp;&amp;amp; cd $_
$ npx lerna init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a &lt;code&gt;lerna.json&lt;/code&gt; configuration file as well as a &lt;code&gt;packages&lt;/code&gt; folder, so your folder should now look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;lerna-repo/
  packages/
  package.json
  lerna.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How It Works&lt;/h2&gt; 
&lt;p&gt;Lerna allows you to manage your project using one of two modes: Fixed or Independent.&lt;/p&gt; 
&lt;h3&gt;Fixed/Locked mode (default)&lt;/h3&gt; 
&lt;p&gt;Fixed mode Lerna projects operate on a single version line. The version is kept in the &lt;code&gt;lerna.json&lt;/code&gt; file at the root of your project under the &lt;code&gt;version&lt;/code&gt; key. When you run &lt;code&gt;lerna publish&lt;/code&gt;, if a module has been updated since the last time a release was made, it will be updated to the new version you&#39;re releasing. This means that you only publish a new version of a package when you need to.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you have a major version zero, all updates are &lt;a href=&quot;https://semver.org/#spec-item-4&quot;&gt;considered breaking&lt;/a&gt;. Because of that, running &lt;code&gt;lerna publish&lt;/code&gt; with a major version zero and choosing any non-prerelease version number will cause new versions to be published for all packages, even if not all packages have changed since the last release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This is the mode that &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; is currently using. Use this if you want to automatically tie all package versions together. One issue with this approach is that a major change in any package will result in all packages having a new major version.&lt;/p&gt; 
&lt;h3&gt;Independent mode&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;lerna init --independent&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Independent mode Lerna projects allows maintainers to increment package versions independently of each other. Each time you publish, you will get a prompt for each package that has changed to specify if it&#39;s a patch, minor, major or custom change.&lt;/p&gt; 
&lt;p&gt;Independent mode allows you to more specifically update versions for each package and makes sense for a group of components. Combining this mode with something like &lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot;&gt;semantic-release&lt;/a&gt; would make it less painful. (There is work on this already at &lt;a href=&quot;https://github.com/atlassian/lerna-semantic-release&quot;&gt;atlassian/lerna-semantic-release&lt;/a&gt;).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Set the &lt;code&gt;version&lt;/code&gt; key in &lt;code&gt;lerna.json&lt;/code&gt; to &lt;code&gt;independent&lt;/code&gt; to run in independent mode.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;If you encounter any issues while using Lerna please check out our &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/doc/troubleshooting.md&quot;&gt;Troubleshooting&lt;/a&gt; document where you might find the answer to your problem.&lt;/p&gt; 
&lt;h2&gt;Frequently asked questions&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/FAQ.md&quot;&gt;FAQ.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Concepts&lt;/h2&gt; 
&lt;p&gt;Lerna will log to a &lt;code&gt;lerna-debug.log&lt;/code&gt; file (same as &lt;code&gt;npm-debug.log&lt;/code&gt;) when it encounters an error running a command.&lt;/p&gt; 
&lt;p&gt;Lerna also has support for &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped packages&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;lerna --help&lt;/code&gt; to see all available commands and options.&lt;/p&gt; 
&lt;h3&gt;lerna.json&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;version&quot;: &quot;1.1.3&quot;,
  &quot;npmClient&quot;: &quot;npm&quot;,
  &quot;command&quot;: {
    &quot;publish&quot;: {
      &quot;ignoreChanges&quot;: [&quot;ignored-file&quot;, &quot;*.md&quot;],
      &quot;message&quot;: &quot;chore(release): publish&quot;,
      &quot;registry&quot;: &quot;https://npm.pkg.github.com&quot;
    },
    &quot;bootstrap&quot;: {
      &quot;ignore&quot;: &quot;component-*&quot;,
      &quot;npmClientArgs&quot;: [&quot;--no-package-lock&quot;]
    }
  },
  &quot;packages&quot;: [&quot;packages/*&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: the current version of the repository.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npmClient&lt;/code&gt;: an option to specify a specific client to run commands with (this can also be specified on a per command basis). Change to &lt;code&gt;&quot;yarn&quot;&lt;/code&gt; to run all commands with yarn. Defaults to &quot;npm&quot;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.ignoreChanges&lt;/code&gt;: an array of globs that won&#39;t be included in &lt;code&gt;lerna changed/publish&lt;/code&gt;. Use this to prevent publishing a new version unnecessarily for changes, such as fixing a &lt;code&gt;README.md&lt;/code&gt; typo.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.message&lt;/code&gt;: a custom commit message when performing version updates for publication. See &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/version#--message-msg&quot;&gt;@lerna/version&lt;/a&gt; for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.registry&lt;/code&gt;: use it to set a custom registry url to publish to instead of npmjs.org, you must already be authenticated if required.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.ignore&lt;/code&gt;: an array of globs that won&#39;t be bootstrapped when running the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.npmClientArgs&lt;/code&gt;: array of strings that will be passed as arguments directly to &lt;code&gt;npm install&lt;/code&gt; during the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.scope&lt;/code&gt;: an array of globs that restricts which packages will be bootstrapped when running the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;packages&lt;/code&gt;: Array of globs to use as package locations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The packages config in &lt;code&gt;lerna.json&lt;/code&gt; is a list of globs that match directories containing a &lt;code&gt;package.json&lt;/code&gt;, which is how lerna recognizes &quot;leaf&quot; packages (vs the &quot;root&quot; &lt;code&gt;package.json&lt;/code&gt;, which is intended to manage the dev dependencies and scripts for the entire repo).&lt;/p&gt; 
&lt;p&gt;By default, lerna initializes the packages list as &lt;code&gt;[&quot;packages/*&quot;]&lt;/code&gt;, but you can also use another directory such as &lt;code&gt;[&quot;modules/*&quot;]&lt;/code&gt;, or &lt;code&gt;[&quot;package1&quot;, &quot;package2&quot;]&lt;/code&gt;. The globs defined are relative to the directory that &lt;code&gt;lerna.json&lt;/code&gt; lives in, which is usually the repository root. The only restriction is that you can&#39;t directly nest package locations, but this is a restriction shared by &quot;normal&quot; npm packages as well.&lt;/p&gt; 
&lt;p&gt;For example, &lt;code&gt;[&quot;packages/*&quot;, &quot;src/**&quot;]&lt;/code&gt; matches this tree:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;packages/
├── foo-pkg
│   └── package.json
├── bar-pkg
│   └── package.json
├── baz-pkg
│   └── package.json
└── qux-pkg
    └── package.json
src/
├── admin
│   ├── my-app
│   │   └── package.json
│   ├── stuff
│   │   └── package.json
│   └── things
│       └── package.json
├── profile
│   └── more-things
│       └── package.json
├── property
│   ├── more-stuff
│   │   └── package.json
│   └── other-things
│       └── package.json
└── upload
    └── other-stuff
        └── package.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Locating leaf packages under &lt;code&gt;packages/*&lt;/code&gt; is considered a &quot;best-practice&quot;, but is not a requirement for using Lerna.&lt;/p&gt; 
&lt;h4&gt;Legacy Fields&lt;/h4&gt; 
&lt;p&gt;Some &lt;code&gt;lerna.json&lt;/code&gt; fields are no longer in use. Those of note include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lerna&lt;/code&gt;: originally used to indicate the current version of Lerna. &lt;a href=&quot;https://github.com/lerna/lerna/pull/1122&quot;&gt;Made obsolete&lt;/a&gt; and &lt;a href=&quot;https://github.com/lerna/lerna/pull/1225&quot;&gt;removed&lt;/a&gt; in v3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Common &lt;code&gt;devDependencies&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Most &lt;code&gt;devDependencies&lt;/code&gt; can be pulled up to the root of a Lerna repo with &lt;code&gt;lerna link convert&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The above command will automatically hoist things and use relative &lt;code&gt;file:&lt;/code&gt; specifiers.&lt;/p&gt; 
&lt;p&gt;Hoisting has a few benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All packages use the same version of a given dependency&lt;/li&gt; 
 &lt;li&gt;Can keep dependencies at the root up-to-date with an automated tool such as &lt;a href=&quot;https://greenkeeper.io/&quot;&gt;GreenKeeper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dependency installation time is reduced&lt;/li&gt; 
 &lt;li&gt;Less storage is needed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that &lt;code&gt;devDependencies&lt;/code&gt; providing &quot;binary&quot; executables that are used by npm scripts still need to be installed directly in each package where they&#39;re used.&lt;/p&gt; 
&lt;p&gt;For example the &lt;code&gt;nsp&lt;/code&gt; dependency is necessary in this case for &lt;code&gt;lerna run nsp&lt;/code&gt; (and &lt;code&gt;npm run nsp&lt;/code&gt; within the package&#39;s directory) to work correctly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;scripts&quot;: {
    &quot;nsp&quot;: &quot;nsp&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;nsp&quot;: &quot;^2.3.3&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Git Hosted Dependencies&lt;/h3&gt; 
&lt;p&gt;Lerna allows target versions of local dependent packages to be written as a &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;git remote url&lt;/a&gt; with a &lt;code&gt;committish&lt;/code&gt; (e.g., &lt;code&gt;#v1.0.0&lt;/code&gt; or &lt;code&gt;#semver:^1.0.0&lt;/code&gt;) instead of the normal numeric version range. This allows packages to be distributed via git repositories when packages must be private and a &lt;a href=&quot;https://www.dotconferences.com/2016/05/fabien-potencier-monolithic-repositories-vs-many-repositories&quot;&gt;private npm registry is not desired&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please note that lerna does &lt;em&gt;not&lt;/em&gt; perform the actual splitting of git history into the separate read-only repositories. This is the responsibility of the user. (See &lt;a href=&quot;https://github.com/lerna/lerna/pull/1033#issuecomment-335894690&quot;&gt;this comment&lt;/a&gt; for implementation details)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// packages/pkg-1/package.json
{
  name: &quot;pkg-1&quot;,
  version: &quot;1.0.0&quot;,
  dependencies: {
    &quot;pkg-2&quot;: &quot;github:example-user/pkg-2#v1.0.0&quot;
  }
}

// packages/pkg-2/package.json
{
  name: &quot;pkg-2&quot;,
  version: &quot;1.0.0&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the example above,&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lerna bootstrap&lt;/code&gt; will properly symlink &lt;code&gt;pkg-2&lt;/code&gt; into &lt;code&gt;pkg-1&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lerna publish&lt;/code&gt; will update the committish (&lt;code&gt;#v1.0.0&lt;/code&gt;) in &lt;code&gt;pkg-1&lt;/code&gt; when &lt;code&gt;pkg-2&lt;/code&gt; changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;README Badge&lt;/h3&gt; 
&lt;p&gt;Using Lerna? Add a README badge to show it off: &lt;a href=&quot;https://lerna.js.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg&quot; alt=&quot;lerna&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Wizard&lt;/h3&gt; 
&lt;p&gt;If you prefer some guidance for cli (in case you&#39;re about to start using lerna or introducing it to a new team), you might like &lt;a href=&quot;https://github.com/szarouski/lerna-wizard&quot;&gt;lerna-wizard&lt;/a&gt;. It will lead you through a series of well-defined steps:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/szarouski/lerna-wizard/2e269fb5a3af7100397a1f874cea3fa78089486e/demo.png&quot; alt=&quot;lerna-wizard demo image&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mui-org/material-ui</title>
      <link>https://github.com/mui-org/material-ui</link>
      <description>&lt;p&gt;Material-UI is a simple and customizable component library to build faster, beautiful, and more accessible React applications. Follow your own design system, or start with Material Design.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Quickly build beautiful &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; apps. Material-UI is a simple and customizable component library to build faster, beautiful, and more accessible React applications. Follow your own design system, or start with &lt;a href=&quot;https://material.io/design/introduction/&quot;&gt;Material Design&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/mui-org/material-ui/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg&quot; alt=&quot;license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@material-ui/core&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@material-ui/core/latest.svg&quot; alt=&quot;npm latest package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@material-ui/core&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@material-ui/core/next.svg&quot; alt=&quot;npm next package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/@material-ui/core&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/@material-ui/core.svg&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.circleci.com/pipelines/github/mui-org/material-ui?branch=next&quot;&gt;&lt;img src=&quot;https://img.shields.io/circleci/project/github/mui-org/material-ui/next.svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/mui-org/material-ui/branch/next&quot;&gt;&lt;img src=&quot;https://img.shields.io/codecov/c/github/mui-org/material-ui/next.svg&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/MaterialUI&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/MaterialUI.svg?label=follow+Material-UI&quot; alt=&quot;Follow on Twitter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dependabot.com&quot;&gt;&lt;img src=&quot;https://api.dependabot.com/badges/status?host=github&amp;amp;repo=mui-org/material-ui&quot; alt=&quot;Dependabot Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://isitmaintained.com/project/mui-org/material-ui&quot; title=&quot;Average time to resolve an issue&quot;&gt;&lt;img src=&quot;https://isitmaintained.com/badge/resolution/mui-org/material-ui.svg&quot; alt=&quot;Average time to resolve an issue&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://translate.material-ui.com/project/material-ui-docs&quot;&gt;&lt;img src=&quot;https://badges.crowdin.net/material-ui-docs/localized.svg&quot; alt=&quot;Crowdin&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/material-ui&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/all/material-ui&quot; alt=&quot;Open Collective backers and sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Material-UI is available as an &lt;a href=&quot;https://www.npmjs.com/package/@material-ui/core&quot;&gt;npm package&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://material-ui.com/&quot;&gt;Stable channel v4&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;// with npm
npm install @material-ui/core

// with yarn
yarn add @material-ui/core
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;⚠️ All ongoing work has moved to v5. The development of v4 is limited to important bug fixes, security patches and easing the upgrade path to v5.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://next.material-ui.com/&quot;&gt;Alpha channel v5&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;// with npm
npm install @material-ui/core@next @emotion/react @emotion/styled

// with yarn
yarn add @material-ui/core@next @emotion/react @emotion/styled
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://v3.material-ui.com/&quot;&gt;v3.x&lt;/a&gt;&lt;/strong&gt; (&lt;a href=&quot;https://material-ui.com/guides/migration-v3/&quot;&gt;Migration from v3 to v4&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://v0.material-ui.com/&quot;&gt;v0.x&lt;/a&gt;&lt;/strong&gt; (&lt;a href=&quot;https://material-ui.com/guides/migration-v0x/&quot;&gt;Migration to v1&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Please note that &lt;code&gt;@next&lt;/code&gt; will only point to pre-releases; to get the latest stable release use &lt;code&gt;@latest&lt;/code&gt; instead.&lt;/p&gt; 
&lt;h2&gt;Who sponsors Material-UI?&lt;/h2&gt; 
&lt;h3&gt;Diamond 💎&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Diamond Sponsors are those who have pledged $1,500/month or more to Material-UI.&lt;/p&gt; 
&lt;h3&gt;Gold 🏆&lt;/h3&gt; 
&lt;p&gt;via &lt;a href=&quot;https://www.patreon.com/oliviertassinari&quot;&gt;Patreon&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;via &lt;a href=&quot;https://opencollective.com/material-ui&quot;&gt;OpenCollective&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Direct&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Gold Sponsors are those who have pledged $500/month or more to Material-UI.&lt;/p&gt; 
&lt;h3&gt;There is more!&lt;/h3&gt; 
&lt;p&gt;See the full list of &lt;a href=&quot;https://material-ui.com/discover-more/backers/&quot;&gt;our backers&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Here is a quick example to get you started, &lt;strong&gt;it&#39;s all you need&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import * as React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import Button from &#39;@material-ui/core/Button&#39;;

function App() {
  return &amp;lt;Button variant=&quot;contained&quot;&amp;gt;Hello World&amp;lt;/Button&amp;gt;;
}

ReactDOM.render(&amp;lt;App /&amp;gt;, document.querySelector(&#39;#app&#39;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yes, it&#39;s really all you need to get started as you can see in this live and interactive demo:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/4j7m47vlm4&quot;&gt;&lt;img src=&quot;https://codesandbox.io/static/img/play-codesandbox.svg&quot; alt=&quot;Edit Button&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Questions&lt;/h2&gt; 
&lt;p&gt;For &lt;em&gt;how-to&lt;/em&gt; questions and other non-issues, please use &lt;a href=&quot;https://stackoverflow.com/questions/tagged/material-ui&quot;&gt;StackOverflow&lt;/a&gt; instead of GitHub issues. There is a StackOverflow tag called &quot;material-ui&quot; that you can use to tag your questions.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;Are you looking for an example project to get started? &lt;a href=&quot;https://material-ui.com/getting-started/example-projects/&quot;&gt;We host some&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://material-ui.com/&quot;&gt;documentation website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Premium Themes&lt;/h2&gt; 
&lt;p&gt;You can find complete templates &amp;amp; themes in the &lt;a href=&quot;https://material-ui.com/store/?utm_source=docs&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme-store&quot;&gt;Material-UI store&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Read the &lt;a href=&quot;https://raw.githubusercontent.com/mui-org/material-ui/next/CONTRIBUTING.md&quot;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to Material-UI.&lt;/p&gt; 
&lt;p&gt;Notice that contributions go far beyond pull requests and commits. Although we love giving you the opportunity to put your stamp on Material-UI, we also are thrilled to receive a variety of &lt;a href=&quot;https://material-ui.com/getting-started/faq/#material-ui-is-awesome-how-can-i-support-the-project&quot;&gt;other contributions&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;If you have recently updated, please read the &lt;a href=&quot;https://github.com/mui-org/material-ui/releases&quot;&gt;changelog&lt;/a&gt; for details of what has changed.&lt;/p&gt; 
&lt;h2&gt;Roadmap&lt;/h2&gt; 
&lt;p&gt;The future plans and high priority features and enhancements can be found in the &lt;a href=&quot;https://material-ui.com/discover-more/roadmap/&quot;&gt;roadmap&lt;/a&gt; file.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/mui-org/material-ui/next/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsoring services&lt;/h2&gt; 
&lt;p&gt;These great services sponsor Material-UI&#39;s core infrastructure:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;GitHub allows us to host the Git repository.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://circleci.com/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;CircleCI allows us to run the test suite.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.netlify.com/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Netlify allows us to distribute the documentation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://crowdin.com/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;CrowdIn allows us to translate the documentation.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.browserstack.com/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;BrowserStack allows us to test in real browsers.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://codecov.io/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;CodeCov allows us to monitor the test coverage.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavisPeng/taojinbi</title>
      <link>https://github.com/JavisPeng/taojinbi</link>
      <description>&lt;p&gt;淘宝淘金币自动执行脚本，包含蚂蚁森林收取能量，年货节浇灌福气，解放你的双手&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;taobao_taojinbi&lt;/h1&gt; 
&lt;p&gt;本项目主要用于自动执行淘金币相关活动，用于参与淘金币夺宝活动(可下注抢茅台)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;后续代码持续更新，转载引用请注明出处，你的☆就是我的动力&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;测试环境&lt;/h1&gt; 
&lt;p&gt;华为P30Pro + &lt;a href=&quot;https://share.weiyun.com/owu3tBNr&quot;&gt;autojs4.1.1&lt;/a&gt; + &lt;a href=&quot;https://www.wandoujia.com/apps/32267/history&quot;&gt;淘宝v9.18.0&lt;/a&gt; (&lt;em&gt;华为P30Pro屏幕大小为1080x2340,此分辨率对特殊任务支持最佳&lt;/em&gt;)&lt;/p&gt; 
&lt;h1&gt;脚本功能列表&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;自动执行淘金币所有浏览任务&lt;/li&gt; 
 &lt;li&gt;自动执行[逛好店领一大波金币]任务 (包含浏览10s+10金币任务/收藏店铺+10金币)&lt;/li&gt; 
 &lt;li&gt;自动执行[逛蚂蚁庄园喂小鸡]任务&lt;/li&gt; 
 &lt;li&gt;自动执行[签到领取话费充值金]任务&lt;/li&gt; 
 &lt;li&gt;自动执行[淘宝成就签到任务]&lt;/li&gt; 
 &lt;li&gt;自动执行[淘宝人生逛街领能量]掷色子任务 (需截图权限)&lt;/li&gt; 
 &lt;li&gt;自动执行[逛农场领免费水果]任务 (需截图权限)&lt;/li&gt; 
 &lt;li&gt;自动执行[蚂蚁森林]任务,收取好友能量 (需截图权限)&lt;/li&gt; 
 &lt;li&gt;自动执行[淘宝通知权限任务]任务（在华为机上测试通过）&lt;/li&gt; 
 &lt;li&gt;自动执行[年货节浇灌福气]任务&lt;/li&gt; 
 &lt;li&gt;自动执行[淘金币夺宝]任务&lt;/li&gt; 
 &lt;li&gt;自动执行[天天步数红包赛]任务&lt;/li&gt; 
 &lt;li&gt;浏览任务完成立即返回，&lt;strong&gt;无需额外等待&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;单独执行[年货节浇灌福气]：启动程序后下拉找到“单独执行年货节浇灌福气”按钮，点击即可，请使用淘宝v9.0.0版本,第二天升级也才加0.02%，卸载换回最新版又正常了，不知道淘宝的检测机制，很迷&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;更新日志&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.4&lt;/strong&gt; 2021年1月21日11:54:11&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复年货节浇灌福气运行错误问题，暂未发现升级才加0.02%的原因，实在不行请重装最新淘宝手动执吧&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.3&lt;/strong&gt; 2021年1月20日20:46:10&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;淘宝v9.0.0测试年货节浇灌福气任务&lt;/li&gt; 
 &lt;li&gt;新版年货节浇灌福气任务默认执行2次，解决漏掉新刷新的简单任务(不同的淘宝用户，特殊任务不一样)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.2&lt;/strong&gt; 2021年1月19日19:59:32&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复掷骰子任务-弹窗礼包问题&lt;/li&gt; 
 &lt;li&gt;[去年货节浇灌福气]界面布局更新，添加了[消消乐任务]，非P30Pro手机建议单独执行[去年货节浇灌福气]全任务&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.1&lt;/strong&gt; 2021年1月18日20:34:58&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决[年货节浇灌福气]任务中&quot;集福气&quot;按钮的text变化问题&lt;/li&gt; 
 &lt;li&gt;恢复[加载配置]按钮,解决脚本最新配置和用户配置不匹配问题(用户自定义配置后，请和最新脚本进行比对后再加载，否则可能会导致新脚本一些功能因为旧的配置而无法使用)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.5.0&lt;/strong&gt; 2021年1月17日19:28:30&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;更新UI界面，用户可以在主主界面选择执行选定的任务，在配置界面配置对应的任务关键字,用户可自行修改(&lt;strong&gt;解决活动经常更换名称问题&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;新增[年货节浇灌福气]任务,用户可在淘金币列表选择中勾选[年货节浇灌福气]任务进行执行，若未勾选[执行福气全部子任务]，只会执行[年货节浇灌福气]的签到任务和施肥;用户也可单独执行该任务(在程序主界面下拉可见，单独执行默认运行全部子任务)&lt;/li&gt; 
 &lt;li&gt;添加[保存当前配置]按钮用于保存当前用户的选择项和关键字配置信息，下一次启动默认自动加载上传保存的配置信息&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.4.2&lt;/strong&gt; 2021年1月14日19:19:03&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复直播活动更新后无法返回问题&lt;/li&gt; 
 &lt;li&gt;延长点击关注店铺时长，解决网络卡顿导致关注不成功问题&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.4.2]apk版，&lt;strong&gt;请提前为程序开启无障碍服务和悬浮框权限&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;由于个人问题(年后换工作)，以后将不定期维护该项目，望谅解&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.4.1&lt;/strong&gt; 2021年1月12日19:46:43&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复[淘金币夺宝任务]下注太快无奖励问题&lt;/li&gt; 
 &lt;li&gt;添加[保存选择项状态]按钮用于保存当前用户的任务选择状态&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.4.0&lt;/strong&gt; 2021年1月11日20:30:34&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;更新UI界面，所有特殊任务都在列表中可选择执行&lt;/li&gt; 
 &lt;li&gt;添加[淘金币夺宝任务],需花费100淘金币，做人还是需要点理想，说不定就中了呢&lt;/li&gt; 
 &lt;li&gt;新增[直接启动支付宝蚂蚁森林偷取好友能量]按钮,需提前添加蚂蚁森林到首页&lt;/li&gt; 
 &lt;li&gt;新增[取消所有关注的店铺]按钮用于取消所有关注的店铺，&lt;strong&gt;慎用&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.11&lt;/strong&gt; 2021年1月10日09:36:43&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;淘宝升级到v9.18.0&lt;/li&gt; 
 &lt;li&gt;修复淘宝新版本[天天红包赛]弹窗问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.10&lt;/strong&gt; 2021年1月7日19:50:28&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复[关注+10]单击问题，感谢Sirius2s的提醒&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.3.10]apk版&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.9&lt;/strong&gt; 2021年1月3日21:58:23&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;删掉淘金币夺宝任务(下注才能获取能量)，不知道你们中过没有，反正我全输光了- -&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.8&lt;/strong&gt; 2020年12月29日19:42:37&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;更新[淘金币夺宝任务]的关键字名称&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.7&lt;/strong&gt; 2020年12月29日19:42:37&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;应网友请求，添加[去天猫APP领红包任务]到任务选择栏中&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.6&lt;/strong&gt; 2020年12月24日19:22:57&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决消消乐完成消除回到主界面，出现[再玩一次]弹窗问题&lt;/li&gt; 
 &lt;li&gt;淘金币auto.js-v1.3.6全任务视频演示：https://www.bilibili.com/video/BV1Dt4y1k7xq/&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.5&lt;/strong&gt; 2020年12月23日20:13:04&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决[淘宝吃货任务]弹窗导致无法返回问题&lt;/li&gt; 
 &lt;li&gt;解决[消消乐任务]弹窗导致无法返回问题&lt;/li&gt; 
 &lt;li&gt;在[开启淘宝通知权限任务]中暂时关闭终端显示&lt;/li&gt; 
 &lt;li&gt;删除了活力中心脚本，有需要的可在&lt;a href=&quot;https://github.com/JavisPeng/taojinbi/tree/v1.3.4&quot;&gt;v1.3.4页面&lt;/a&gt;下载&lt;/li&gt; 
 &lt;li&gt;所有任务默认检查执行3次，每次执行后检查是否在淘金币列表界面，不在则跳转到该界面，防止back函数导致乱跳转问题&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.3.5]apk版&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.4&lt;/strong&gt; 2020年12月22日19:46:20&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;淘金币新增[淘宝通知权限任务],开启后会再执行关闭 (默认在通知关闭下才有该任务,在华为机上测试通过)&lt;/li&gt; 
 &lt;li&gt;查找‘赚金币’按钮时间由3秒修改为8秒，兼容部分机型卡顿问题&lt;/li&gt; 
 &lt;li&gt;个人精力有限，今后只重点维护淘金币任务，因而把活力中心代码分离出来(huoli.js)，后期不在维护该脚本，有需要的可在&lt;a href=&quot;https://github.com/JavisPeng/taojinbi/tree/v1.3.4&quot;&gt;v1.3.4页面&lt;/a&gt;下载&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;至此淘宝币全任务在P30Pro上测试通过&lt;/strong&gt;，当然不包含特定时间刷的任务和下单任务&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.3&lt;/strong&gt; 2020年12月21日19:50:31&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;用户可在文件开头中定义，需跳过不执行的简单浏览任务主题关键字&lt;/li&gt; 
 &lt;li&gt;用户可在文件开头中定义[去天猫APP领红包任务]是否执行&lt;/li&gt; 
 &lt;li&gt;解决活力中心[1000步换红包任务]执行失败问题&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.3.3]apk版&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.2&lt;/strong&gt; 2020年12月20日11:44:35&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复淘金币在任务列表中继续返回导致任务结束问题,&lt;/li&gt; 
 &lt;li&gt;淘宝人生掷色子任务中，添加了自动领取包裹和奖励，解决任务卡住问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.1&lt;/strong&gt; 2020年12月19日13:18:57&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;淘金币任务列表新增[100淘金币夺宝任务]&lt;/li&gt; 
 &lt;li&gt;解决活力中心训练时无法单击关闭按钮问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.3.0&lt;/strong&gt; 2020年12月18日19:56:49&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;应网友请求，附加&lt;strong&gt;活力中心任务&lt;/strong&gt;(包括自动浏览任务和自动点击训练按钮),默认在淘金币完成后执行，若只执行活力中心任务,可在main函数注释掉taojinbi_task()这行&lt;/li&gt; 
 &lt;li&gt;整合特殊任务[逛直播间任务]到简单浏览任务中&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.2.3&lt;/strong&gt; 2020年12月17日20:50:41&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;消消乐和蚂蚁森林任务中暂时隐藏终端,对应任务结束后再显示 (不隐藏可能收取不到全部能量)&lt;/li&gt; 
 &lt;li&gt;发布[淘金币v1.2.3]apk版&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.2.2&lt;/strong&gt; 2020年12月16日19:36:39&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;新增蚂蚁森林任务，支持自定义&#39;找能量&#39;收取好友能量的次数&lt;/li&gt; 
 &lt;li&gt;解决&#39;天猫领红包任务&#39;，取消了&#39;继续逛逛&#39;按钮问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.2.1&lt;/strong&gt; 2020年12月14日19:57:06&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;新增消消乐任务，需截图权限，目前在测试P30Pro上测试通过&lt;/li&gt; 
 &lt;li&gt;考虑到不同的机型，某些需截图权限的特殊任务可能会不兼容，启动时添加了可选的额外执行的任务： [&#39;淘宝人生掷色子任务&#39;, &#39;逛农场领免费水果任务&#39;, &#39;消消乐任务&#39;]&lt;/li&gt; 
 &lt;li&gt;添加了APK发布版，用户可直接运行&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.2.0&lt;/strong&gt; 2020年12月13日20:52:53&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;简化代码删减了双12的部分&lt;/li&gt; 
 &lt;li&gt;对需要截图功能的[淘宝人生逛街领能量]和[逛农场领免费水果] 设置了是否执行的全局变量，用户可选择是否执行该任务&lt;/li&gt; 
 &lt;li&gt;任务执行等待时间设置为全局变量，默认为15秒&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.4&lt;/strong&gt; 2020年12月12日21:04:28&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复淘金币看直播任务，有时不能返回问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.3&lt;/strong&gt; 2020年12月11日20:13:13&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复天猫app没安装，等待过长问题&lt;/li&gt; 
 &lt;li&gt;修复特殊任务后，新出简单浏览任务遗漏问题&lt;/li&gt; 
 &lt;li&gt;无法修复&#39;双12红包兑现红包太少问题&#39;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.2&lt;/strong&gt; 2020年12月10日20:38:12&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;解决淘金币执行过程中会返回到主页面问题(本质是按钮单击没有生效)&lt;/li&gt; 
 &lt;li&gt;把淘宝人生、逛好店任务、喂小鸡任务、逛直播间任务添加到特殊任务中&lt;/li&gt; 
 &lt;li&gt;解决芭芭农场双12任务后，淘金币没有肥料问题&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.1&lt;/strong&gt; 2020年12月9日19:36:44&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;修复逛新加任务不能获取问题&lt;/li&gt; 
 &lt;li&gt;某些任务(拍照识图)只在最新版淘宝中才存在,当前淘宝已换成最新版v9.16.0,经测试金币还是同样的奖励&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;v1.1.0&lt;/strong&gt; 2020年12月8日19:51:51&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;代码基本重构，为适应不同机型，添加了截图查找功能(&lt;strong&gt;需授予截图权限&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;添加任务运行选择功能，可单独执行任务&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;使用说明&lt;/h1&gt; 
&lt;h2&gt;Auto.js中运行&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;下载 &lt;a href=&quot;https://share.weiyun.com/owu3tBNr&quot;&gt;autojs4.1.1&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;在电脑端下载taojinbi.js文件，使用电脑端qq或微信发给手机端&lt;/li&gt; 
 &lt;li&gt;导入js文件到autojs(可直接在微信/QQ/文件浏览中选择使用其他方式打开)&lt;/li&gt; 
 &lt;li&gt;在autojs中开启无障碍服务并点击运行导入的js文件&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;auto.js视频运行教程:https://www.bilibili.com/video/BV1Dt4y1k7xq/&lt;/p&gt; 
&lt;h2&gt;淘金币app运行&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;在&lt;a href=&quot;https://github.com/JavisPeng/taojinbi/releases&quot;&gt;release页面&lt;/a&gt;下载taojinbi.apk并安装&lt;/li&gt; 
 &lt;li&gt;为淘金币开启无障碍服务和悬浮框权限(悬浮框权限在华为手机：设置-&amp;gt;应用-&amp;gt;应用功能-&amp;gt;淘金币-&amp;gt;显示在其他应用的上层-&amp;gt;允许)&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;淘金币app视频运行教程：https://www.bilibili.com/video/BV1kp4y1q7CD/&lt;/p&gt; 
&lt;h1&gt;免责声明&lt;/h1&gt; 
&lt;p&gt;为本人Auto.js学习交流的开源非营利项目，仅作为程序员之间相互学习交流之用，使用需严格遵守开源许可协议。严禁用于商业用途，禁止使用进行任何盈利活动。对一切非法使用所产生的后果，本人概不负责。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SeanPrashad/leetcode-patterns</title>
      <link>https://github.com/SeanPrashad/leetcode-patterns</link>
      <description>&lt;p&gt;A curated list of 170 leetcode questions grouped by their common patterns&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Leetcode Patterns&lt;/h1&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#preface&quot;&gt;Preface&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#notes&quot;&gt;Notes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#question-list&quot;&gt;Question List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#solutions&quot;&gt;Solutions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#leetcode-discuss&quot;&gt;Leetcode Discuss&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#tips-to-consider&quot;&gt;Tips to Consider&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#suggestions&quot;&gt;Suggestions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanPrashad/leetcode-patterns/master/#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Background&lt;/h2&gt; 
&lt;p&gt;This repo is intended for any individual wanting to improve their problem solving skills for software engineering interviews.&lt;/p&gt; 
&lt;p&gt;Problems are grouped under their respective subtopic, in order to focus on repeatedly applying common patterns rather than randomly tackling questions.&lt;/p&gt; 
&lt;p&gt;All questions are available on &lt;a href=&quot;https://leetcode.com&quot;&gt;leetcode.com&lt;/a&gt; with some requiring &lt;a href=&quot;https://leetcode.com/subscribe/&quot;&gt;leetcode premium&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Preface&lt;/h2&gt; 
&lt;p&gt;It is highly recommended to read chapters 1, 2, 3, 4, 8, and 10 of &lt;a href=&quot;http://www.crackingthecodinginterview.com/contents.html&quot;&gt;Cracking The Coding Interview&lt;/a&gt; to familiarize yourself with the following data structures and their operations:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Arrays&lt;/li&gt; 
 &lt;li&gt;Maps&lt;/li&gt; 
 &lt;li&gt;Linked Lists&lt;/li&gt; 
 &lt;li&gt;Queues&lt;/li&gt; 
 &lt;li&gt;Heaps&lt;/li&gt; 
 &lt;li&gt;Stacks&lt;/li&gt; 
 &lt;li&gt;Trees&lt;/li&gt; 
 &lt;li&gt;Graphs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In addition, you should have a good grasp on common algorithms such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Breadth-first search&lt;/li&gt; 
 &lt;li&gt;Depth-first search&lt;/li&gt; 
 &lt;li&gt;Binary search&lt;/li&gt; 
 &lt;li&gt;Recursion&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Notes&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=1ao4ZA28zzBttDkuS6MLQI52gDs_CJZEm&quot;&gt;This pdf&lt;/a&gt; contains useful information for the built-in data structures in Java.&lt;/p&gt; 
&lt;p&gt;Other useful methods to know include &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#substring-int-int-&quot;&gt;&lt;code&gt;substring()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toCharArray--&quot;&gt;&lt;code&gt;toCharArray()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#max-int-int-&quot;&gt;&lt;code&gt;Math.max()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#min-int-int-&quot;&gt;&lt;code&gt;Math.min()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#fill-int:A-int-&quot;&gt;&lt;code&gt;Arrays.fill()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Question List&lt;/h2&gt; 
&lt;p&gt;The entire question list can be found here: https://seanprashad.com/leetcode-patterns/.&lt;/p&gt; 
&lt;p&gt;In addition to viewing the question list, companies that have previously asked the question in the past 6 months (&lt;em&gt;as of December 2020&lt;/em&gt;) will be listed. You can also use the checkboxes to mark which questions you&#39;ve completed!&lt;/p&gt; 
&lt;h2&gt;Solutions&lt;/h2&gt; 
&lt;p&gt;Solutions written in Java can be found in the &lt;a href=&quot;https://github.com/SeanPrashad/leetcode-patterns/tree/solutions&quot;&gt;solutions&lt;/a&gt; branch.&lt;/p&gt; 
&lt;h2&gt;Leetcode Discuss&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/discuss/interview-question&quot;&gt;Leetcode discuss&lt;/a&gt; is an amazing resource and features previous interview questions, as well as compensation and general career advice.&lt;/p&gt; 
&lt;h2&gt;Tips to Consider&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;If input array is sorted then
    - Binary search
    - Two pointers

If asked for all permutations/subsets then
    - Backtracking

If given a tree then
    - DFS
    - BFS

If given a graph then
    - DFS
    - BFS

If given a linked list then
    - Two pointers

If recursion is banned then
    - Stack

If must solve in-place then
    - Swap corresponding values
    - Store one or more different values in the same pointer

If asked for maximum/minumum subarray/subset/options then
    - Dynamic programming

If asked for top/least K items then
    - Heap

If asked for common strings then
    - Map
    - Trie

Else
    - Map/Set for O(1) time &amp;amp; O(n) space
    - Sort input for O(nlogn) time and O(1) space
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Suggestions&lt;/h2&gt; 
&lt;p&gt;Think a question should/shouldn&#39;t be included? Wish there was another feature? Feel free to open an &lt;a href=&quot;https://github.com/SeanPrashad/leetcode-patterns/issues/new&quot;&gt;issue&lt;/a&gt; with your suggestion!&lt;/p&gt; 
&lt;h2&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;This list is heavily inspired from &lt;a href=&quot;https://www.educative.io/courses/grokking-the-coding-interview&quot;&gt;Grokking the Coding Interview&lt;/a&gt; with additional problems extracted from the &lt;a href=&quot;https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU?utm_source=share&amp;amp;utm_medium=ios_app&quot;&gt;Blind 75 list&lt;/a&gt; and this medium article on &lt;a href=&quot;https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed&quot;&gt;14 patterns to ace any coding interview question&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MrRio/jsPDF</title>
      <link>https://github.com/MrRio/jsPDF</link>
      <description>&lt;p&gt;Client-side JavaScript PDF generation for everyone.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://parall.ax/parallax-2016/img/svg/jspdf-logo.svg&quot; alt=&quot;jsPDF&quot;&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://saucelabs.com/beta/builds/526e7fda50bd4f97a854bf10f280305d&quot;&gt;&lt;img src=&quot;https://saucelabs.com/buildstatus/jspdf&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/repos/57f943855cdc43705e00592f/feed&quot;&gt;&lt;img src=&quot;https://codeclimate.com/repos/57f943855cdc43705e00592f/badges/2665cddeba042dc5191f/gpa.svg&quot; alt=&quot;Code Climate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/repos/57f943855cdc43705e00592f/coverage&quot;&gt;&lt;img src=&quot;https://codeclimate.com/repos/57f943855cdc43705e00592f/badges/2665cddeba042dc5191f/coverage.svg&quot; alt=&quot;Test Coverage&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/MrRio/jsPDF/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/license/MrRio/jsPDF.svg&quot; alt=&quot;GitHub license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/MrRio/jsPDF/alerts/&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/alerts/g/MrRio/jsPDF.svg?logo=lgtm&amp;amp;logoWidth=18&quot; alt=&quot;Total alerts&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/MrRio/jsPDF/context:javascript&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/grade/javascript/g/MrRio/jsPDF.svg?logo=lgtm&amp;amp;logoWidth=18&quot; alt=&quot;Language grade: JavaScript&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitpod.io/from-referrer/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&quot; alt=&quot;Gitpod ready-to-code&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A library to generate PDFs in JavaScript.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You can &lt;a href=&quot;http://twitter.com/MrRio&quot;&gt;catch me on twitter&lt;/a&gt;: &lt;a href=&quot;http://twitter.com/MrRio&quot;&gt;@MrRio&lt;/a&gt; or head over to &lt;a href=&quot;http://parall.ax&quot;&gt;my company&#39;s website&lt;/a&gt; for consultancy.&lt;/p&gt; 
&lt;p&gt;jsPDF is now co-maintained by &lt;a href=&quot;https://www.yworks.com/&quot;&gt;yWorks - the diagramming experts&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;http://raw.githack.com/MrRio/jsPDF/master/&quot;&gt;Live Demo&lt;/a&gt; | &lt;a href=&quot;http://raw.githack.com/MrRio/jsPDF/master/docs/&quot;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Recommended: get jsPDF from npm:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install jspdf --save
# or
yarn add jspdf
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, load it from a CDN:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.0/jspdf.umd.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or always get latest version via &lt;a href=&quot;https://unpkg.com/browse/jspdf/&quot;&gt;unpkg&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;dist&lt;/code&gt; folder of this package contains different kinds of files:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;jspdf.es.*.js&lt;/strong&gt;: Modern ES2015 module format.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;jspdf.node.*.js&lt;/strong&gt;: For running in Node. Uses file operations for loading/saving files instead of browser APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;jspdf.umd.*.js&lt;/strong&gt;: UMD module format. For AMD or script-tag loading.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;polyfills*.js&lt;/strong&gt;: Required polyfills for older browsers like Internet Explorer. The es variant simply imports all required polyfills from &lt;code&gt;core-js&lt;/code&gt;, the umd variant is self-contained.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Usually it is not necessary to specify the exact file in the import statement. Build tools or Node automatically figure out the right file, so importing &quot;jspdf&quot; is enough.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Then you&#39;re ready to start making your document:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { jsPDF } from &quot;jspdf&quot;;

// Default export is a4 paper, portrait, using millimeters for units
const doc = new jsPDF();

doc.text(&quot;Hello world!&quot;, 10, 10);
doc.save(&quot;a4.pdf&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to change the paper size, orientation, or units, you can do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Landscape export, 2×4 inches
const doc = new jsPDF({
  orientation: &quot;landscape&quot;,
  unit: &quot;in&quot;,
  format: [4, 2]
});

doc.text(&quot;Hello world!&quot;, 1, 1);
doc.save(&quot;two-by-four.pdf&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Running in Node.js&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { jsPDF } = require(&quot;jspdf&quot;); // will automatically load the node version

const doc = new jsPDF();
doc.text(&quot;Hello world!&quot;, 10, 10);
doc.save(&quot;a4.pdf&quot;); // will save the file in the current working directory
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Other Module Formats&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;require([&quot;jspdf&quot;], ({ jsPDF }) =&amp;gt; {
  const doc = new jsPDF();
  doc.text(&quot;Hello world!&quot;, 10, 10);
  doc.save(&quot;a4.pdf&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { jsPDF } = window.jspdf;

const doc = new jsPDF();
doc.text(&quot;Hello world!&quot;, 10, 10);
doc.save(&quot;a4.pdf&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Optional dependencies&lt;/h3&gt; 
&lt;p&gt;Some functions of jsPDF require optional dependencies. E.g. the &lt;code&gt;html&lt;/code&gt; method, which depends on &lt;code&gt;html2canvas&lt;/code&gt; and, when supplied with a string HTML document, &lt;code&gt;dompurify&lt;/code&gt;. JsPDF loads them dynamically when required (using the respective module format, e.g. dynamic imports). Build tools like Webpack will automatically create separate chunks for each of the optional dependencies. If your application does not use any of the optional dependencies, you can prevent Webpack from generating the chunks by defining them as external dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// webpack.config.js
module.exports = {
  // ...
  externals: {
    // only define the dependencies you are NOT using as externals!
    canvg: &quot;canvg&quot;,
    html2canvas: &quot;html2canvas&quot;,
    dompurify: &quot;dompurify&quot;
  }
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In &lt;strong&gt;Vue CLI&lt;/strong&gt; projects, externals can be defined via the &lt;a href=&quot;https://cli.vuejs.org/config/#configurewebpack&quot;&gt;configureWebpack&lt;/a&gt; or &lt;a href=&quot;https://cli.vuejs.org/config/#chainwebpack&quot;&gt;chainWebpack&lt;/a&gt; properties of the &lt;code&gt;vue.config.js&lt;/code&gt; file (needs to be created, first, in fresh projects).&lt;/p&gt; 
&lt;p&gt;In &lt;strong&gt;Angular&lt;/strong&gt; projects, externals can be defined using &lt;a href=&quot;https://github.com/just-jeb/angular-builders/tree/master/packages/custom-webpack&quot;&gt;custom webpack builders&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In &lt;strong&gt;React&lt;/strong&gt; (&lt;code&gt;create-react-app&lt;/code&gt;) projects, externals can be defined by either using &lt;a href=&quot;https://github.com/timarney/react-app-rewired&quot;&gt;react-app-rewired&lt;/a&gt; or ejecting.&lt;/p&gt; 
&lt;h3&gt;TypeScript/Angular/Webpack/React/etc. Configuration:&lt;/h3&gt; 
&lt;p&gt;jsPDF can be imported just like any other 3rd party library. This works with all major toolkits and frameworks. jsPDF also offers a typings file for TypeScript projects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { jsPDF } from &quot;jspdf&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can add jsPDF to your meteor-project as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;meteor add jspdf:core
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Polyfills&lt;/h3&gt; 
&lt;p&gt;jsPDF requires modern browser APIs in order to function. To use jsPDF in older browsers like Internet Explorer, polyfills are required. You can load all required polyfills as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import &quot;jspdf/dist/polyfills.es.js&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can load the prebundled polyfill file. This is not recommended, since you might end up loading polyfills multiple times. Might still be nifty for small applications or quick POCs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.0/polyfills.umd.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Use of Unicode Characters / UTF-8:&lt;/h2&gt; 
&lt;p&gt;The 14 standard fonts in PDF are limited to the ASCII-codepage. If you want to use UTF-8 you have to integrate a custom font, which provides the needed glyphs. jsPDF supports .ttf-files. So if you want to have for example Chinese text in your pdf, your font has to have the necessary Chinese glyphs. So, check if your font supports the wanted glyphs or else it will show garbled characters instead of the right text.&lt;/p&gt; 
&lt;p&gt;To add the font to jsPDF use our fontconverter in &lt;a href=&quot;https://rawgit.com/MrRio/jsPDF/master/fontconverter/fontconverter.html&quot;&gt;/fontconverter/fontconverter.html&lt;/a&gt;. The fontconverter will create a js-file with the content of the provided ttf-file as base64 encoded string and additional code for jsPDF. You just have to add this generated js-File to your project. You are then ready to go to use setFont-method in your code and write your UTF-8 encoded text.&lt;/p&gt; 
&lt;p&gt;Alternatively you can just load the content of the *.ttf file as a binary string using &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;XMLHttpRequest&lt;/code&gt; and add the font to the PDF file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const doc = new jsPDF();

const myFont = ... // load the *.ttf font file as binary string

// add the font to jsPDF
doc.addFileToVFS(&quot;MyFont.ttf&quot;, myFont);
doc.addFont(&quot;MyFont.ttf&quot;, &quot;MyFont&quot;, &quot;normal&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Advanced Functionality&lt;/h2&gt; 
&lt;p&gt;Since the merge with the &lt;a href=&quot;https://github.com/yWorks/jsPDF&quot;&gt;yWorks fork&lt;/a&gt; there are a lot of new features. However, some of them are API breaking, which is why there is an API-switch between two API modes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In &quot;compat&quot; API mode, jsPDF has the same API as MrRio&#39;s original version, which means full compatibility with plugins. However, some advanced features like transformation matrices and patterns won&#39;t work. This is the default mode.&lt;/li&gt; 
 &lt;li&gt;In &quot;advanced&quot; API mode, jsPDF has the API you&#39;re used from the yWorks-fork version. This means the availability of all advanced features like patterns, FormObjects, and transformation matrices.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can switch between the two modes by calling&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doc.advancedAPI(doc =&amp;gt; {
  // your code
});
// or
doc.compatAPI(doc =&amp;gt; {
  // your code
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;JsPDF will automatically switch back to the original API mode after the callback has run.&lt;/p&gt; 
&lt;h2&gt;Support&lt;/h2&gt; 
&lt;p&gt;Please check if your question is already handled at Stackoverflow &lt;a href=&quot;https://stackoverflow.com/questions/tagged/jspdf&quot;&gt;https://stackoverflow.com/questions/tagged/jspdf&lt;/a&gt;. Feel free to ask a question there with the tag &lt;code&gt;jspdf&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Feature requests, bug reports, etc. are very welcome as issues. Note that bug reports should follow these guidelines:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;A bug should be reported as an &lt;a href=&quot;https://stackoverflow.com/help/mcve&quot;&gt;mcve&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Make sure code is properly indented and &lt;a href=&quot;https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code&quot;&gt;formatted&lt;/a&gt; (Use ``` around code blocks)&lt;/li&gt; 
 &lt;li&gt;Provide a runnable example.&lt;/li&gt; 
 &lt;li&gt;Try to make sure and show in your issue that the issue is actually related to jspdf and not your framework of choice.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;jsPDF cannot live without help from the community! If you think a feature is missing or you found a bug, please consider if you can spare one or two hours and prepare a pull request. If you&#39;re simply interested in this project and want to help, have a look at the open issues, especially those labeled with &quot;bug&quot;.&lt;/p&gt; 
&lt;p&gt;You can find information about building and testing jsPDF in the &lt;a href=&quot;https://github.com/MrRio/jsPDF/blob/master/CONTRIBUTING.md#pull-requests&quot;&gt;contribution guide&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Big thanks to Daniel Dotsenko from &lt;a href=&quot;https://github.com/willowsystems&quot;&gt;Willow Systems Corporation&lt;/a&gt; for making huge contributions to the codebase.&lt;/li&gt; 
 &lt;li&gt;Thanks to Ajaxian.com for &lt;a href=&quot;http://ajaxian.com/archives/dynamically-generic-pdfs-with-javascript&quot;&gt;featuring us back in 2009&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Our special thanks to GH Lee (&lt;a href=&quot;https://github.com/sphilee&quot;&gt;sphilee&lt;/a&gt;) for programming the ttf-file-support and providing a large and long sought after feature&lt;/li&gt; 
 &lt;li&gt;Everyone else that&#39;s contributed patches or bug reports. You rock.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License (MIT)&lt;/h2&gt; 
&lt;p&gt;Copyright (c) 2010-2020 James Hall, https://github.com/MrRio/jsPDF (c) 2015-2020 yWorks GmbH, https://www.yworks.com/&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mapbox/mapbox-gl-js</title>
      <link>https://github.com/mapbox/mapbox-gl-js</link>
      <description>&lt;p&gt;Interactive, thoroughly customizable maps in the browser, powered by vector tiles and WebGL&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://www.mapbox.com/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Mapbox GL JS&lt;/strong&gt; is a JavaScript library for interactive, customizable vector maps on the web. It takes map styles that conform to the &lt;a href=&quot;https://docs.mapbox.com/mapbox-gl-js/style-spec/&quot;&gt;Mapbox Style Specification&lt;/a&gt;, applies them to vector tiles that conform to the &lt;a href=&quot;https://github.com/mapbox/vector-tile-spec&quot;&gt;Mapbox Vector Tile Specification&lt;/a&gt;, and renders them using WebGL.&lt;/p&gt; 
&lt;p&gt;Mapbox GL JS is part of the &lt;a href=&quot;https://www.mapbox.com/maps/&quot;&gt;cross-platform Mapbox GL ecosystem&lt;/a&gt;, which also includes compatible native SDKs for applications on &lt;a href=&quot;https://docs.mapbox.com/android/maps/overview/&quot;&gt;Android&lt;/a&gt;, &lt;a href=&quot;https://docs.mapbox.com/ios/maps/overview/&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;http://mapbox.github.io/mapbox-gl-native/macos&quot;&gt;macOS&lt;/a&gt;, &lt;a href=&quot;https://github.com/mapbox/mapbox-gl-native/tree/master/platform/qt&quot;&gt;Qt&lt;/a&gt;, and &lt;a href=&quot;https://github.com/mapbox/react-native-mapbox-gl/&quot;&gt;React Native&lt;/a&gt;. Mapbox provides building blocks to add location features like maps, search, and navigation into any experience you create. To get started with GL JS or any of our other building blocks, &lt;a href=&quot;https://www.mapbox.com/signup/&quot;&gt;sign up for a Mapbox account&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;In addition to GL JS, this repository contains code, issues, and test fixtures that are common to both GL JS and the native SDKs. For code and issues specific to the native SDKs, see the &lt;a href=&quot;https://github.com/mapbox/mapbox-gl-native/&quot;&gt;mapbox/mapbox-gl-native&lt;/a&gt; repository.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.mapbox.com/mapbox-gl-js/overview/&quot;&gt;Getting started with Mapbox GL JS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.mapbox.com/help/tutorials/#web-apps&quot;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.mapbox.com/mapbox-gl-js/api/&quot;&gt;API documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.mapbox.com/mapbox-gl-js/examples/&quot;&gt;Examples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.mapbox.com/mapbox-gl-js/style-spec/&quot;&gt;Style documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mapbox/mapbox-gl-styles&quot;&gt;Open source styles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mapbox/mapbox-gl-js/main/CONTRIBUTING.md&quot;&gt;Contributor documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.mapbox.com/gallery/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Copyright © 2020 Mapbox&lt;/p&gt; 
&lt;p&gt;All rights reserved.&lt;/p&gt; 
&lt;p&gt;Mapbox gl-js version 2.0 or higher (“Mapbox Web SDK”) must be used according to the Mapbox Terms of Service. This license allows developers with a current active Mapbox account to use and modify the Mapbox Web SDK. Developers may modify the Mapbox Web SDK code so long as the modifications do not change or interfere with marked portions of the code related to billing, accounting, and anonymized data collection. The Mapbox Web SDK only sends anonymized usage data, which Mapbox uses for fixing bugs and errors, accounting, and generating aggregated anonymized statistics. This license terminates automatically if a user no longer has an active Mapbox account.&lt;/p&gt; 
&lt;p&gt;For the full license terms, please see the &lt;a href=&quot;https://www.mapbox.com/legal/tos/&quot;&gt;Mapbox Terms of Service&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>appium/appium</title>
      <link>https://github.com/appium/appium</link>
      <description>&lt;p&gt;📱 Automation for iOS, Android, and Windows Apps.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Appium&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/appium&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/appium.svg&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/appium/appium&quot;&gt;&lt;img src=&quot;https://david-dm.org/appium/appium.svg&quot; alt=&quot;Dependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/appium/appium#info=devDependencies&quot;&gt;&lt;img src=&quot;https://david-dm.org/appium/appium/dev-status.svg&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/appium&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/appium.svg&quot; alt=&quot;Monthly Downloads&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=shield&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Appium is an open-source, cross-platform test automation tool for native, hybrid, and mobile web and desktop apps. We support simulators (iOS), emulators (Android), and real devices (iOS, Android, Windows, Mac).&lt;/p&gt; 
&lt;p&gt;Want to skip straight to the action? Check out our &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/getting-started.md&quot;&gt;getting started&lt;/a&gt; doc.&lt;/p&gt; 
&lt;h3&gt;Supported Platforms&lt;/h3&gt; 
&lt;p&gt;Appium supports app automation across a variety of platforms, like iOS, Android, and Windows. Each platform is supported by one or more &quot;drivers&quot;, which know how to automate that particular platform. Choose a driver below for specific information about how that driver works and how to set it up:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;iOS 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/drivers/ios-xcuitest.md&quot;&gt;XCUITest Driver&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;(DEPRECATED) The &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/drivers/ios-uiautomation.md&quot;&gt;UIAutomation Driver&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Android 
  &lt;ul&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/drivers/android-espresso.md&quot;&gt;Espresso Driver&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/drivers/android-uiautomator2.md&quot;&gt;UiAutomator2 Driver&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;(DEPRECATED) The &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/drivers/android-uiautomator.md&quot;&gt;UiAutomator Driver&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/drivers/windows.md&quot;&gt;Windows Driver&lt;/a&gt; (for Windows Desktop apps)&lt;/li&gt; 
 &lt;li&gt;The &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/drivers/mac.md&quot;&gt;Mac Driver&lt;/a&gt; (for Mac Desktop apps)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Why Appium?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;You don&#39;t have to recompile your app or modify it in any way, due to the use of standard automation APIs on all platforms.&lt;/li&gt; 
 &lt;li&gt;You can write tests with your favorite dev tools using any &lt;a href=&quot;https://w3c.github.io/webdriver/webdriver-spec.html&quot;&gt;WebDriver&lt;/a&gt;-compatible language such as Java, Objective-C, JavaScript (Node), PHP, Python, Ruby, C#, Clojure, or Perl with the Selenium WebDriver API and &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/appium-clients.md&quot;&gt;language-specific client libraries&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;You can use any testing framework.&lt;/li&gt; 
 &lt;li&gt;Appium has built-in mobile web and hybrid app support. Within the same script, you can switch seamlessly between native app automation and webview automation, all using the WebDriver model that&#39;s already the standard for web automation.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Investing in the &lt;a href=&quot;https://w3c.github.io/webdriver/webdriver-spec.html&quot;&gt;WebDriver&lt;/a&gt; protocol means you are betting on a single, free, and open protocol for testing that has become a web standard. Don&#39;t lock yourself into a proprietary stack.&lt;/p&gt; 
&lt;p&gt;For example, if you use Apple&#39;s XCUITest library without Appium you can only write tests using Obj-C/Swift, and you can only run tests through Xcode. Similarly, with Google&#39;s UiAutomator or Espresso, you can only write tests in Java/Kotlin. Appium opens up the possibility of true cross-platform native app automation, for mobile and beyond. Finally!&lt;/p&gt; 
&lt;p&gt;If you&#39;re new to Appium or want a more comprehensive description of what this is all about, please read our &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/intro.md&quot;&gt;Introduction to Appium Concepts&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;Your environment needs to be set up for the particular platforms that you want to run tests on. Each of the drivers above documents the requirements for their particular brand of automation. At a minimum, you will need to be able to run Node.js 10+.&lt;/p&gt; 
&lt;h3&gt;Get Started&lt;/h3&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/getting-started.md&quot;&gt;Getting Started&lt;/a&gt; guide to get going with Appium.&lt;/p&gt; 
&lt;p&gt;There is also a sample code that contains &lt;a href=&quot;https://github.com/appium/appium/tree/master/sample-code&quot;&gt;many examples of tests in a variety of different languages&lt;/a&gt;!&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For prettily-rendered docs, please visit &lt;a href=&quot;http://appium.io&quot;&gt;appium.io&lt;/a&gt;. You can always find the full list of Appium doc pages at &lt;a href=&quot;https://github.com/appium/appium/tree/master/docs/en/&quot;&gt;Appium&#39;s GitHub Repo&lt;/a&gt; as well.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/appium/appium/blob/master/ci-jobs/update-appium-io.yml&quot;&gt;update-appium-io.yml&lt;/a&gt; creates a PR by &lt;a href=&quot;https://dev.azure.com/AppiumCI/Appium%20CI/_build?definitionId=37&quot;&gt;CI job&lt;/a&gt;. in the appium.io repository with the documentation update.&lt;/p&gt; 
&lt;p&gt;Once the PR has been merged, the latest documentation will be in &lt;a href=&quot;http://appium.io&quot;&gt;appium.io&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Please take a look at our &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/CONTRIBUTING.md&quot;&gt;contribution documentation&lt;/a&gt; for instructions on how to build, test, and run Appium from the source.&lt;/p&gt; 
&lt;h3&gt;Roadmap&lt;/h3&gt; 
&lt;p&gt;Interested in where Appium is heading in the future? Check out the &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/ROADMAP.md&quot;&gt;Roadmap&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Project History, Credits &amp;amp; Inspiration&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://appium.io/history&quot;&gt;History&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/contributing-to-appium/credits.md&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;User Forums&lt;/h3&gt; 
&lt;p&gt;Announcements and debates often take place on the &lt;a href=&quot;https://discuss.appium.io&quot;&gt;Discussion Group&lt;/a&gt;, be sure to sign up!&lt;/p&gt; 
&lt;h3&gt;Troubleshooting&lt;/h3&gt; 
&lt;p&gt;We put together a &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/writing-running-appium/other/troubleshooting.md&quot;&gt;troubleshooting guide&lt;/a&gt;. Please have a look here first if you run into any problems. It contains instructions for checking a lot of common errors and how to get in touch with the community if you&#39;re stumped.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>adonismendozaperez/33-js-conceptos</title>
      <link>https://github.com/adonismendozaperez/33-js-conceptos</link>
      <description>&lt;p&gt;📜 33 Conceptos que todo desarrollador de JavaScript debería saber.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;﻿
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;&amp;lt;img src=&quot;https://i.imgur.com/dsHmk6H.jpg&quot; alt=&quot;33 Concepts Every JS Developer Should Know&quot; width=200&quot;&amp;gt;
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 33 Conceptos que todo desarrollador de JavaScript debería saber 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Introducción&lt;/h2&gt; 
&lt;p&gt;Este repositorio fue creado con la intención de ayudar a los desarrolladores a dominar sus conceptos en JavaScript. No es un requisito, sino una guía para futuros estudios. Está basado en un artículo escrito por &lt;a href=&quot;https://twitter.com/stephenthecurt&quot;&gt;Stephen Curtis&lt;/a&gt; y puede leerlo &lt;a href=&quot;https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Comunidad&lt;/h2&gt; 
&lt;p&gt;Siéntase libre de enviar un PR agregando un enlace a sus propios resúmenes o comentarios. Si desea traducir el repositorio a su idioma nativo, no dude en hacerlo.&lt;/p&gt; 
&lt;p&gt;Todas las traducciones para este repo serán enumeradas abajo:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stephentian/33-js-concepts&quot;&gt;Chino&lt;/a&gt; — Re Tian&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tiagoboeing/33-js-concepts&quot;&gt;Portugués&lt;/a&gt; — Tiago Boeing&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yjs03057/33-js-concepts.git&quot;&gt;Koreano&lt;/a&gt; — Suin Lee&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ilker0/33-js-concepts&quot;&gt;Turco&lt;/a&gt; — İlker Demir&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gumennii/33-js-concepts&quot;&gt;Ruso&lt;/a&gt; — Mihail Gumennii&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nguyentranchung/33-js-concepts&quot;&gt;Vietnamita&lt;/a&gt; — Nguyễn Trần Chung&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lip3k/33-js-concepts&quot;&gt;Polaco&lt;/a&gt; — Dawid Lipinski&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/majidalavizadeh/33-js-concepts&quot;&gt;Persa&lt;/a&gt; — Majid Alavizadeh&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rijdz/33-js-concepts&quot;&gt;Indonés&lt;/a&gt; — Rijdzuan Sampoerna&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/leonardomso/33-js-concepts&quot;&gt;Inglés&lt;/a&gt; — Leonardo Maldonado&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/robinmetral/33-concepts-js&quot;&gt;Francés&lt;/a&gt; — Robin Métral&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vikaschauhan/33-js-concepts&quot;&gt;Hindú&lt;/a&gt; — Vikas Chauhan&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Tabla de contenido&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#1-pila-de-llamadas&quot;&gt;Pila de llamadas&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#2-tipos-primitivos&quot;&gt;Tipos primitivos&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#3-tipos-de-valores-y-tipos-de-referencias&quot;&gt;Tipos de valor y tipos de referencia&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#4-impl%C3%ADcito-expl%C3%ADcito-nominal-estructuraci%C3%B3n-y-escritura-de-pato&quot;&gt;Implícito, Explícito, Nominal, Estructuración y Escritura de pato&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#5--vs--vs-typeof&quot;&gt;== vs === vs typeof&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#6-alcance-de-la-funci%C3%B3n-%C3%A1mbito-de-bloque-y-alcance-l%C3%A9xico&quot;&gt;Alcance de la función, Ámbito de bloque y alcance léxico&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#7-expression-vs-statement&quot;&gt;Expression vs Statement&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#8-iife-m%C3%B3dulos-y-espacios-de-nombres&quot;&gt;IIFE, módulos y espacios de nombres&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#9-message-queue-y-event-loop&quot;&gt;Message Queue y Event Loop&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#10-settimeout-setinterval-y-requestanimationframe&quot;&gt;setTimeout, setInterval y requestAnimationFrame&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#11-motores-de-JavaScript&quot;&gt;Motores de JavaScript&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#12-bitwise-operators-type-arrays-y-array-buffers&quot;&gt;Bitwise Operators, Type Arrays y Array Buffers&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#13-dom-y-layout-trees&quot;&gt;DOM y Layout Trees&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#14-factories-y-classes&quot;&gt;Factories y Classes&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#15-this-call-apply-y-bind&quot;&gt;this, call, apply y bind&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#16-new-constructor-instanceof-y-instances&quot;&gt;new, Constructor, instanceof y Instances&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#17-prototype-inheritance-y-prototype-chain&quot;&gt;Prototype Inheritance y Prototype Chain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#18-objectcreate-y-objectassign&quot;&gt;Object.create y Object.assign&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#19-map-reduce-filter&quot;&gt;map, reduce, filter&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#20-Funciones-puras-efectos-secundarios-y-mutaci%C3%B3n-de-estado&quot;&gt;Funciones puras, efectos secundarios y mutación de estado&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#21-closures&quot;&gt;Closures&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#22-high-order-functions&quot;&gt;High Order Functions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#23-recursion&quot;&gt;Recursion&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#24-collections-y-generators&quot;&gt;Collections y Generators&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#25-promesas&quot;&gt;Promesas&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#26-asyncawait&quot;&gt;async/await&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#27-estructuras-de-datos&quot;&gt;Estructuras de datos&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#28-expensive-operation-y-big-o-notation&quot;&gt;Expensive Operation y Big O Notation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#29-algoritmos&quot;&gt;Algoritmos&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#30-herencia-polimorfismo-y-reutilizaci%C3%B3n-de-c%C3%B3digo&quot;&gt;Herencia, polimorfismo y reutilización de código&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#31-patrones-de-dise%C3%B1o&quot;&gt;Patrones de diseño&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#32-partial-applications-currying-compose-y-pipe&quot;&gt;Partial Applications, Currying, Compose y Pipe&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#33-c%C3%B3digo-limpio&quot;&gt;Código limpio&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;hr&gt; 
&lt;h2&gt;1. Pila de llamadas&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec&quot;&gt;Understanding Javascript Call Stack, Event Loops — Gaurav Pandvia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4&quot;&gt;Understanding the JavaScript Call Stack — Charles Freeborn&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.valentinog.com/blog/js-execution-context-call-stack/&quot;&gt;Javascript: What Is The Execution Context? What Is The Call Stack? — Valentino Gagliardi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://gist.github.com/jesstelford/9a35d20a2aa044df8bf241e00d7bc2d0&quot;&gt;What is the JS Event Loop and Call Stack? — Jess Telford&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Call_stack&quot;&gt;Call Stack — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0&quot;&gt;Understanding Execution Context and Execution Stack in Javascript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf&quot;&gt;How JavaScript Works: An Overview of the Engine, the Runtime, and the Call Stack — Alexander Zlatkov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/&quot;&gt;The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=w6QGEiQceOM&quot;&gt;Javascript: the Call Stack explained — Coding Blocks India&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=W8AeMrVtFLY&quot;&gt;The JS Call Stack Explained In 9 Minutes — Colt Steele&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=jT0USJeNFEA&quot;&gt;JavaScript Execution Stack — Codecademy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=w7QWQlkLY_s&quot;&gt;What is the Call Stack? — Eric Traub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Q2sFmqvpBe0&quot;&gt;The Call Stack — Kevin Drumm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD&quot;&gt;Understanding JavaScript Execution — Codesmith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=mk0lu9MKBto&quot;&gt;Call Stack &amp;amp; Event Loop — movies com&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Nt-qa_LlUH0&quot;&gt;The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;2. Tipos primitivos&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://2ality.com/2012/04/number-encoding.html&quot;&gt;How numbers are encoded in JavaScript — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/javascripts-number-type-8d59199db1b6&quot;&gt;What You Need to Know About JavaScript Number Type — Max Wizard K&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/&quot;&gt;What Every JavaScript Developer Should Know About Floating Point Numbers — Chewxy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/&quot;&gt;The Secret Life of JavaScript Primitives — Angus Croll&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://flow.org/en/docs/types/primitives/&quot;&gt;Primitive Types — Flow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/&quot;&gt;(Not) Everything in JavaScript is an Object - Daniel Li&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values&quot;&gt;JavaScript data types and data structures - MDN&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=9ooYYRLdg_g&quot;&gt;JavaScript Reference vs Primitive Types — Academind&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=HsbWQsSCE5Y&quot;&gt;JavaScript Primitive Types — Simon Sez IT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=F7YbhKbpFic&quot;&gt;Javascript Primitive and Reference Types — Baljeet Singh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=e-_mDyqm2oU&quot;&gt;Value Types and Reference Types in JavaScript — Programming with Mosh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qw3j0A3DIzQ&quot;&gt;JavaScript Primitive Data Types — Avelx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=MqHDDtVYJRI&quot;&gt;Everything you never wanted to know about JavaScript numbers — Bartek Szopka&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;3. Tipos de valores y tipos de referencias&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0&quot;&gt;Explaining Value vs. Reference in Javascript — Arnav Aggarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.zsoltnagy.eu/understand-value-and-reference-types-in-javascript/&quot;&gt;Understand Value and Reference Types in JavaScript — Zsolt Nagy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c&quot;&gt;Primitive Types &amp;amp; Reference Types in JavaScript — Bran van der Meer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@benastontweet/lesson-1b-javascript-fundamentals-380f601ba851&quot;&gt;Value Types, Reference Types and Scope in JavaScript — Ben Aston&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18&quot;&gt;Back to roots: JavaScript Value vs Reference — Miro Koczka&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293&quot;&gt;Grasp “By Value” and “By Reference” in JavaScript — Léna Faure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0&quot;&gt;JavaScript Reference and Copy Variables — Vítor Capretz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/&quot;&gt;JavaScript Primitive vs Reference Values&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=E-dAnFdq8k8&quot;&gt;Javascript Pass by Value vs Pass by Reference — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=fD0t_DKREbE&quot;&gt;JavaScript Value vs Reference Types — Programming with Mosh&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;4. Implícito, Explícito, Nominal, Estructuración y Escritura de pato&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23&quot;&gt;What you need to know about Javascript&#39;s Implicit Coercion — Promise Tochi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839&quot;&gt;JavaScript Type Coercion Explained — Alexey Samoshkin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/javascript-coercion-explained-545c895213d3&quot;&gt;Javascript Coercion Explained — Ben Garrison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript&quot;&gt;What exactly is Type Coercion in Javascript? - Stack Overflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.oreilly.com/library/view/you-dont-know/9781491905159/ch04.html&quot;&gt;You Don&#39;t Know JS: Types &amp;amp; Grammar [Book] — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://blog.brew.com.hk/not-everything-in-javascript-is-an-object/&quot;&gt;(Not) Everything in JavaScript is an Object - Daniel Li&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://thedevs.network/blog/type-coercion-in-javascript-and-why-everyone-gets-it-wrong&quot;&gt;Type Coercion in JavaScript, and why everyone gets it wrong.&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qGyqzN0bjhc&amp;amp;t&quot;&gt;== ? === ??? ...#@^% - Shirmung Bielefeld&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=b04Q_vyqEG8&quot;&gt;Coercion in Javascript - Hitesh Choudhary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=z4-8wMSPJyI&quot;&gt;JavaScript Questions: What is Coercion? - Steven Hancock&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;5. == vs === vs typeof&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a&quot;&gt;JavaScript Double Equals vs. Triple Equals — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codecademy.com/en/forum_questions/558ea4f5e39efed371000508&quot;&gt;What is the difference between =, ==, and === in JS? — Codecademy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://bytearcher.com/articles/equality-comparison-operator-javascript/&quot;&gt;Should I use === or == equality comparison operator in JavaScript? — Panu Pitkamaki&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codementor.io/javascript/tutorial/double-equals-and-coercion-in-javascript&quot;&gt;== vs === JavaScript: Double Equals and Coercion — AJ Meyghani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.impressivewebs.com/why-use-triple-equals-javascipt/&quot;&gt;Why Use the Triple-Equals Operator in JavaScript? — Louis Lazaris&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript&quot;&gt;What is the difference between == and === in JavaScript? — Craig Buckler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object&quot;&gt;Why javascript&#39;s typeof always return &quot;object&quot;? — Stack Overflow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://tobyho.com/2011/01/28/checking-types-in-javascript/&quot;&gt;Checking Types in Javascript — Toby Ho&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://webbjocke.com/javascript-check-data-types/&quot;&gt;How to better check data types in JavaScript — Webbjocke&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html&quot;&gt;Checking for the Absence of a Value in JavaScript — Tomer Aberbach&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ol_su88I3kw&quot;&gt;JavaScript - The typeof operator — Java Brains&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qPYhTPt_SbQ&quot;&gt;Javascript typeof operator — DevDelight&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;6. Alcance de la función, Ámbito de bloque y alcance léxico&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md&quot;&gt;You Don&#39;t Know JS: Scope &amp;amp; Closures [Book] — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.deadcoderising.com/2017-04-11-es6-var-let-and-const-the-battle-between-function-scope-and-block-scope/&quot;&gt;The battle between Function Scope and Block Scope — Marius Herring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html&quot;&gt;Emulating Block Scope in JavaScript — Josh Clanton&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe&quot;&gt;The Difference Between Function and Block Scope in JavaScript — Joseph Cardillo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7&quot;&gt;Function Scopes and Block Scopes in JavaScript — Samer Buna&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://ryanmorr.com/understanding-scope-and-context-in-javascript/&quot;&gt;Understanding Scope and Context in JavaScript | Ryan Morr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/javascript-scope-closures/&quot;&gt;JavaScript Scope and Closures — Zell Liew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/&quot;&gt;Understanding Scope in JavaScript — Wissam Abirached&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://speakingjs.com/es5/ch16.html&quot;&gt;Speaking JavaScript - Variables: Scopes, Environments, and Closures — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/understanding-scope-in-javascript&quot;&gt;Understanding Scope in JavaScript ― Hammad Ahmed&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=SBwoFkRjZvE&quot;&gt;What Makes Javascript Weird ... and Awesome pt. 4 — LearnCode.academy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=dhp57T3p760&quot;&gt;Variable Scope in JavaScript — Kirupa Chinnathambi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=aK_nuUAdr8E&quot;&gt;JavaScript Block Scope and Function Scope — mmtuts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=GhNA0r10MmA&quot;&gt;What the Heck is Lexical Scope? — NWCalvank&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;7. Expression vs Statement&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/promhize/javascript-in-depth-all-you-need-to-know-about-expressions-statements-and-expression-statements-5k2&quot;&gt;All you need to know about Javascript&#39;s Expressions, Statements and Expression Statements — Promise Tochi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/function-expressions-vs-declarations/&quot;&gt;Function Expressions vs Function Declarations — Paul Wilkins&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38&quot;&gt;JavaScript Function — Declaration vs Expression — Ravi Roshan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052&quot;&gt;Function Declarations vs. Function Expressions — Mandeep Singh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/&quot;&gt;Function Declarations vs. Function Expressions — Anguls Croll&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=WVyCrI1cHi8&quot;&gt;Expressions vs. Statements in JavaScript — Hexlet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=3jDpNGJkupA&quot;&gt;JavaScript - Expression vs. Statement — WebTunings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=oB5rH_9bqAI&quot;&gt;Function Statements and Function Expressions — Codeacademy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;8. IIFE, módulos y espacios de nombres&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6&quot;&gt;Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0&quot;&gt;Do ES6 Modules make the case of IIFEs obsolete?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/&quot;&gt;A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers ― Jurgen Van de Moere&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;Modules ― Exploring JS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&quot;&gt;ES modules: A cartoon deep-dive — Lin Clark&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/understanding-es6-modules/&quot;&gt;Understanding ES6 Modules — Craig Buckler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/&quot;&gt;An overview of ES6 Modules in JavaScript — Brent Graham&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/es6-modules-in-depth&quot;&gt;ES6 Modules in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b&quot;&gt;ES6 modules, Node.js and the Michael Jackson Solution — Alberto Gimeno&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&quot;&gt;JavaScript Modules: A Beginner’s Guide — Preethi Kasireddy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=3cbiZV4H22c&quot;&gt;Immediately Invoked Function Expression - Beau teaches JavaScript — freeCodeCamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=I5EntfMeIIQ&quot;&gt;Understanding JavaScript IIFE&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=_3oSWwapPKQ&quot;&gt;JavaScript Modules: ES6 Import and Export — Kyle Robinson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=aQr2bV1BPyE&quot;&gt;ES6 - Modules — Ryan Christiani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=fIP4pjAqCtQ&quot;&gt;ES6 Modules in the Real World — Sam Thorogood&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=5P04OK6KlXA&quot;&gt;ES6 Modules — TempleCoding&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;9. Message Queue y Event Loop&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/javascript-event-loop-explained-4cd26af121d4&quot;&gt;JavaScript Event Loop Explained — Anoop Raveendran&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/&quot;&gt;The JavaScript Event Loop: Explained — Erin Sweson-Healey&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.wptutor.io/web/js/javascript-event-loop&quot;&gt;What is the Event Loop in Javascript — WP Tutor.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40&quot;&gt;Understanding JS: The Event Loop — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.zeolearn.com/magazine/understanding-the-javascript-event-loop&quot;&gt;Understanding the JavaScript Event Loop — Ashish Gupta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://code.likeagirl.io/what-the-heck-is-event-loop-1e414fccef49&quot;&gt;Event Loop in Javascript — Manjula Dube&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://flaviocopes.com/javascript-event-loop/&quot;&gt;The JavaScript Event Loop — Flavio Copes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5&quot;&gt;How JavaScript works: Event loop — Alexander Zlatkov&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;What the heck is the event loop anyway? | JSConf EU — Philip Roberts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XzXIMZMN9k4&quot;&gt;JavaScript Event Loop — ComScience Simplified&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=6MXRNXXgP_0&quot;&gt;I&#39;m stuck in an Event Loop — Philip Roberts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=cCOL7MC4Pl0&quot;&gt;In The Loop - Jake Archibald | JSConf.Asia 2018&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;10. setTimeout, setInterval y requestAnimationFrame&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/settimeout-setinterval&quot;&gt;setTimeout and setInterval — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9&quot;&gt;Why not to use setInterval — Akanksha Sharma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://develoger.com/settimeout-vs-setinterval-cff85142555b&quot;&gt;setTimeout VS setInterval — Develoger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/using-requestanimationframe/&quot;&gt;Using requestAnimationFrame — Chris Coyier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.javascriptkit.com/javatutors/requestanimationframe.shtml&quot;&gt;Understanding JavaScript&#39;s requestAnimationFrame() — JavaScript Kit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/&quot;&gt;Handling time intervals in JavaScript - Amit Merchant&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=6bPKyl8WYWI&quot;&gt;Javascript: How setTimeout and setInterval works — Coding Blocks India&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=TbCgGWe8LN8&quot;&gt;setTimeout and setInterval in JavaScript — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=0VVJSvlUgtg&quot;&gt;JavaScript Timers — Steve Griffith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=BVALvvy5bZY&quot;&gt;JavaScript setTimeout, setInterval &amp;amp; clearInterval — DoingITeasyChannel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=mVKfrWCOB60&quot;&gt;JavaScript setTimeOut and setInterval Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;11. Motores de JavaScript&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.softwaremag.com/javascript-engines/&quot;&gt;JavaScript Engines — Jen Looper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964&quot;&gt;Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code — DroidHead&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775&quot;&gt;Understanding V8’s Bytecode — Franziska Hinkelmann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/&quot;&gt;How the V8 engine works? — Thibault Laurens&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/&quot;&gt;A Brief History of Google’s V8 Javascript Engine — Clair Smith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553&quot;&gt;JavaScript essentials: why you should know how the engine works - Rainer Hahnekamp&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=5nmpokoRaZI&quot;&gt;JavaScript Engines: The Good Parts™ — Mathias Bynens &amp;amp; Benedikt Meurer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;12. Bitwise Operators, Type Arrays y Array Buffers&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4&quot;&gt;Programming with JS: Bitwise Operations — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5&quot;&gt;Using JavaScript’s Bitwise Operators in Real Life — ian m&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.w3resource.com/javascript/operators/bitwise-operator.php&quot;&gt;JavaScript Bitwise Operators — w3resource&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3&quot;&gt;Bitwise Operators in Javascript — Joe Cha&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04&quot;&gt;A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript — Paul Brown&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=mesu75PTDC8&quot;&gt;JavaScript Bitwise Operators — Programming with Mosh&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;13. DOM y Layout Trees&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/introduction-to-the-dom&quot;&gt;How To Understand and Modify the DOM in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html&quot;&gt;JavaScript DOM Tutorial with Example — Guru99&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/dom/&quot;&gt;What is the DOM? — Chris Coyier&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://zellwk.com/blog/dom-traversals/&quot;&gt;Traversing the DOM with JavaScript — Zell Liew&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://eloquentjavascript.net/14_dom.html&quot;&gt;Eloquent JavaScript [Book] — The Document Object Model&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/dom-nodes&quot;&gt;DOM Tree&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction&quot;&gt;Render Tree Construction — Ilya Grigorik&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=FIORjGvT0kk&quot;&gt;JavaScript DOM — The Net Ninja&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=0ik6X4DJKCc&quot;&gt;JavaScript DOM Crash Course — Traversy Media&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;14. Factories y Classes&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript&quot;&gt;How To Use Classes in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677&quot;&gt;Javascript Classes — Under The Hood — Majid&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.javascriptjanuary.com/blog/es6-classes&quot;&gt;ES6 Classes — Nathaniel Foster&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes&quot;&gt;Better JavaScript with ES6, Pt. II: A Deep Dive into Classes ― Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd&quot;&gt;Understand the Factory Design Pattern in Plain JavaScript — Aditya Agarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e&quot;&gt;JavaScript Factory Functions vs Constructor Functions vs Classes — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/javascript-factory-functions-with-es6-4d224591a8b1&quot;&gt;JavaScript Factory Functions with ES6+ — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://atendesigngroup.com/blog/factory-functions-javascript&quot;&gt;Factory Functions in JavaScript — Josh Miller&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9&quot;&gt;The Factory Pattern in JS ES6 — SnstsDev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15&quot;&gt;Class vs Factory function: exploring the way forward — Cristi Salcescu&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=jpegXpQpb3o&quot;&gt;JavaScript Factory Functions — Programming with Mosh&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ImwrezYhw4w&quot;&gt;Factory Functions in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=R7-IwpH80UE&quot;&gt;Javascript Tutorial Function Factories — Crypto Chan&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;15. this, call, apply y bind&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp&quot;&gt;How-to: call() , apply() and bind() in JavaScript — Niladri Sekhar Dutta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/&quot;&gt;JavaScript’s Apply, Call, and Bind Methods are Essential for JavaScript Professionals — Richard Bovell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/&quot;&gt;WTF is this - Understanding the this keyword, call, apply, and bind in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb&quot;&gt;Javascript: call(), apply() and bind() — Omer Goldberg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b&quot;&gt;The difference between call / apply / bind — Ivan Sifrim&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://tech.io/playgrounds/9799/learn-solve-call-apply-and-bind-methods-in-javascript&quot;&gt;call(), apply() and bind() methods in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/&quot;&gt;Mastering &#39;this&#39; in JavaScript: Callbacks and bind(), apply(), call() — Michelle Gienow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo&quot;&gt;JavaScript’s apply, call, and bind explained by hosting a cookout — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb&quot;&gt;How AND When to use bind, call, and apply in Javascript — Eigen X&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.hacksparrow.com/javascript-bind-vs-apply-and-call.html&quot;&gt;JavaScript .bind() vs .apply() and .call() — Hack Sparrow&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&quot;&gt;call() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot;&gt;bind() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&quot;&gt;apply() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://blog.brew.com.hk/what-is-this-in-javascript/&quot;&gt;What is &#39;this&#39; in JavaScript? — Daniel Li&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja&quot;&gt;Let me explain to you what is &lt;code&gt;this&lt;/code&gt;. (Javascript) — Jason Yu&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=c0mLRpw-9rI&quot;&gt;JavaScript call, apply and bind — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=AYVYxezrMWA&quot;&gt;JavaScript Practical Applications of Call, Apply and Bind functions— techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Uy0NOXLBraE&quot;&gt;JavaScript (call, bind, apply) — curious aatma&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=AOSYY1_np_4&quot;&gt;Understanding Functions and &#39;this&#39; In The World of ES2017 — Bryan Hughes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=GhbhD1HR5vk&quot;&gt;bind and this - Object Creation in JavaScript - FunFunFunction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=AYVYxezrMWA&quot;&gt;JavaScript Practical Applications of Call, Apply and Bind functions — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=uBdH0iB1VDM&quot;&gt;JS Function Methods call(), apply(), and bind() — Steve Griffith&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;16. new, Constructor, instanceof y Instances&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e&quot;&gt;JavaScript For Beginners: the ‘new’ operator — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c&quot;&gt;Let’s demystify JavaScript’s ‘new’ keyword — Cynthia Lee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/constructor-new&quot;&gt;Constructor, operator &quot;new&quot; — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/understanding-javascript-constructors/&quot;&gt;Understanding JavaScript Constructors — Faraz Kelhini&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://openclassrooms.com/en/courses/3523231-learn-to-code-with-javascript/4379006-use-constructor-functions&quot;&gt;Use Constructor Functions — Openclassrooms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://2ality.com/2017/08/type-right.html&quot;&gt;Beyond &lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt;: simplifying dynamic type checks — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://appendto.com/2016/10/what-is-the-instanceof-operator-in-javascript/&quot;&gt;What Is the Instanceof Operator in JavaScript — appendTo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://garyrafferty.com/2012/12/07/JavaScript-instanceof-vs-typeof.html&quot;&gt;JavaScript instanceof vs typeof — Gary Rafferty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac&quot;&gt;Function and Object, instances of each other — Kiro Risk&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;17. Prototype Inheritance y Prototype Chain&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b&quot;&gt;Javascript : Prototype vs Class — Valentin PARSY&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://mathiasbynens.be/notes/prototypes&quot;&gt;JavaScript engine fundamentals: optimizing prototypes — Mathias Bynens&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-prototype-cb29d82b8809&quot;&gt;JavaScript Prototype — NC Patro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo&quot;&gt;Prototype in Javascript — Sandeep Ranjan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/prototypes-in-javascript-5bba2990e04b&quot;&gt;Prototypes in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872&quot;&gt;Prototype in JavaScript: it’s quirky, but here’s how it works — Pranav Jindal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;Inheritance and the prototype chain — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9&quot;&gt;Master the JavaScript Interview: What’s the Difference Between Class &amp;amp; Prototypal Inheritance? — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2&quot;&gt;Understanding JavaScript: Prototype and Inheritance — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/prototype-inheritance&quot;&gt;Prototypal Inheritance — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript&quot;&gt;How To Work with Prototypes and Inheritance in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e&quot;&gt;Master JavaScript Prototypes &amp;amp; Inheritance — Arnav Aggarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md&quot;&gt;You Don&#39;t Know JS [Book] Chapter 5: Prototypes — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4&quot;&gt;JavaScript’s Prototypal Inheritance Explained Using CSS — Nash Vail&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://gist.github.com/derhuerst/a585c4916b1c361cc6f0&quot;&gt;Prototypal Inheritance in JavaScript — Jannis Redmann&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.competa.com/blog/classical-prototypical-inheritance-javascript/&quot;&gt;Classical and Prototypical Inheritance in JavaScript — Danny Cornelisse&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance&quot;&gt;Demystifying ES6 Classes And Prototypal Inheritance ― Neo Ighodaro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/danny/intro-to-prototypal-inheritance---js-9di&quot;&gt;Intro To Prototypal Inheritance — Dharani Jayakanthan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://blog.brew.com.hk/classes-in-javascript-explained/&quot;&gt;Classes in JavaScript - Explained — Daniel Li&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch4.md&quot;&gt;You Don&#39;t Know JS: this &amp;amp; Object Prototypes — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=sOrtAjyk4lQ&quot;&gt;Javascript Prototype Inheritance — Avelx&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=7oNWNlMrkpc&quot;&gt;JavaScript Prototype Inheritance Explained pt. I — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=uIlj6_z_wL8&quot;&gt;JavaScript Prototype Inheritance Explained pt. II — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qMO-LTOrJaE&quot;&gt;JavaScript Prototype Inheritance Explained — Kyle Robinson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=G6l5CHl67HQ&quot;&gt;Advanced Javascript - Prototypal Inheritance In 1 Minute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=phwzuiJJPpQ&quot;&gt;An Overview Of Classical Javascript Classes and Prototypal Inheritance — Pentacode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=4jb4AYEyhRc&quot;&gt;Object Oriented JavaScript - Prototype — The Net Ninja&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=2rkEbcptR64&quot;&gt;Prototype in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=oCwCcNvaXAQ&quot;&gt;JavaScript Using Prototypes — O&#39;Reilly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XskMWBXNbp0&quot;&gt;A Beginner&#39;s Guide to Javascript&#39;s Prototype — Tyler Mcginnis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=hS_WqkyUah8&quot;&gt;Prototypes in Javascript - p5.js Tutorial — The Coding Train&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;18. Object.create y Object.assign&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;Object.create() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/object-create-in-javascript-fa8674df6ed2&quot;&gt;Object.create in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html&quot;&gt;Object.create(): the New Way to Create Objects in JavaScript — Rob Gravelle&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html&quot;&gt;Basic Inheritance with Object.create — Joshua Clanton&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.geeksforgeeks.org/object-create-javascript/&quot;&gt;Object.create() In JavaScript — GeeksforGeeks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358&quot;&gt;Understanding the difference between Object.create() and the new operator — Jonathan Voxland&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/&quot;&gt;JavaScript Object Creation: Patterns and Best Practices — Jeff Mott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alligator.io/js/dealing-with-objects/&quot;&gt;Dealing With Objects in JavaScript With Object.assign, Object.keys and hasOwnProperty&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/bar-talk/copying-objects-in-javascript&quot;&gt;Copying Objects in JavaScript ― Orinami Olatunji&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;Object.assign() — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-object-assign-bc9696dcbb6e&quot;&gt;JavaScript: Object.assign() — Thiago S. Adriano&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=aw7NfYhR5rc&quot;&gt;Object.assign() explained — Aaron Writes Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=9Ky4X6inpi4&quot;&gt;Object.assign() Method — techsith&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;19. map, reduce, filter&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d&quot;&gt;JavaScript Functional Programming — map, filter and reduce — Bojan Gvozderac&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4&quot;&gt;Learn map, filter and reduce in Javascript — João Miguel Cunha&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter&quot;&gt;JavaScript’s Map, Reduce, and Filter — Dan Martensen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209&quot;&gt;How to Use Map, Filter, &amp;amp; Reduce in JavaScript — Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4&quot;&gt;JavaScript — Learn to Chain Map, Filter, and Reduce — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/write-beautiful-javascript-with-%CE%BB-fp-es6-350cd64ab5bf&quot;&gt;Javascript data structure with map, reduce, filter and ES6 — Deepak Gupta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464&quot;&gt;Understanding map, filter and reduce in Javascript — Luuk Gruijs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f&quot;&gt;Functional Programming in JS: map, filter, reduce (Pt. 5) — Omer Goldberg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://wsvincent.com/functional-javascript-map-filter-reduce/&quot;&gt;JavaScript: Map, Filter, Reduce — William S. Vincent&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/&quot;&gt;Arrow Functions: Fat and Concise Syntax in JavaScript — Kyle Pennell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc&quot;&gt;JavaScript: Arrow Functions for Beginners — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26&quot;&gt;When (and why) you should use ES6 arrow functions — and when you shouldn’t — Cynthia Lee&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946&quot;&gt;JavaScript — Learn &amp;amp; Understand Arrow Functions — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83&quot;&gt;(JavaScript )=&amp;gt; Arrow functions — sigu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.linkedin.com/pulse/possibility-use-asyncawait-filter-find-foreach-map-reduce-geeganage/&quot;&gt;A possibility to use Async/Await for filter(), find(), forEach(), map() and reduce() methods in Array - Ruwan Geeganage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=UXiYii0Y7Nw&quot;&gt;Map, Filter and Reduce — Lydia Hallie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=vytzLlY_wmU&quot;&gt;Functional JavaScript: Map, forEach, Reduce, Filter — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=qTeeVd8hOFY&quot;&gt;JavaScript Array superpowers: Map, Filter, Reduce (part I) — Michael Rosata&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=gIm9xLYudL0&quot;&gt;JavaScript Array superpowers: Map, Filter, Reduce (part 2) — Michael Rosata&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=zYBeEPxNSbw&quot;&gt;JavaScript Higher Order Functions - Filter, Map, Sort &amp;amp; Reduce — Epicop&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=4qWlqD0yYTU&quot;&gt;[Array Methods 2/3] .filter + .map + .reduce — CodeWithNick&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=6sQDTgOqh-I&quot;&gt;Arrow functions in JavaScript - What, Why and How — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=e-5obm1G_FY&amp;amp;t=1521s&quot;&gt;Learning Functional Programming with JavaScript — Anjana Vakil - JSUnconf&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;20. Funciones puras, efectos secundarios y mutación de estado&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c&quot;&gt;Javascript and Functional Programming — Pure Functions — Omer Goldberg&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976&quot;&gt;Master the JavaScript Interview: What is a Pure Function? — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c&quot;&gt;JavaScript: What Are Pure Functions And Why Use Them? — James Jeffery&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/&quot;&gt;Pure functions in JavaScript — @nicoespeon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/functional-programming-pure-functions/&quot;&gt;Functional Programming: Pure Functions — Arne Brasseur&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://appdividend.com/2017/04/10/pure-functions-in-javascript/&quot;&gt;Pure Functions In Javascript — Krunal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alistapart.com/article/making-your-javascript-pure&quot;&gt;Making your JavaScript Pure — Jack Franklin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://slemgrim.com/mutate-or-not-to-mutate/&quot;&gt;To mutate, or not to mutate, in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa&quot;&gt;Arrays, Objects and Mutations — Federico Knüssel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310&quot;&gt;The State of Immutability — Maciej Sikora&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/&quot;&gt;How to deal with dirty side effects in your pure functional JavaScript — James Sinclair&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://davidwalsh.name/preventing-sideeffects-javascript&quot;&gt;Preventing Side Effects in JavaScript — David Walsh&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=dZ41D6LDSBg&quot;&gt;Pure Functions — Hexlet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Jh_Uzqzz_wM&quot;&gt;Pure Functions - Functional Programming in JavaScript — Paul McBride&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=frT3H-eBmPc&quot;&gt;JavaScript Pure Functions — Seth Alexander&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;21. Closures&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closures — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8&quot;&gt;I never understood JavaScript closures — Olivier De Meulder&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/closure&quot;&gt;Closure — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://javascriptissexy.com/understand-javascript-closures-with-ease/&quot;&gt;Understand JavaScript Closures With Ease — Richard Bovell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/understanding-javascript-closures-da6aab330302&quot;&gt;Understanding JavaScript Closures — Codesmith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/understand-closures-in-javascript-d07852fa51e7&quot;&gt;Understand Closures in JavaScript — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4&quot;&gt;A simple guide to help you understand closures in JavaScript — Prashant Ram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach&quot;&gt;Understanding JavaScript Closures: A Practical Approach — Paul Upendo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b&quot;&gt;Understanding JavaScript: Closures — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b&quot;&gt;How to use JavaScript closures with confidence — Léna Faure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example&quot;&gt;JavaScript closures by example — tyler&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=71AtaJpJHw0&quot;&gt;Javascript Closure — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=CQqwU2Ixu-U&quot;&gt;Closures — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=-xqJo5VRP4A&quot;&gt;Closures in JavaScript — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=yiEeiMN2Khs&quot;&gt;JavaScript Closures 101: What is a closure? — JavaScript Tutorials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=1JsJx1x35c0&quot;&gt;Closures — freeCodeCamp&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=-rLrGAXK8WE&quot;&gt;JavaScript Closures — CodeWorkr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;22. High Order Functions&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://eloquentjavascript.net/05_higher_order.html&quot;&gt;Higher-Order Functions — Eloquent JavaScript [Book]&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/higher-order-functions-javascript/&quot;&gt;Higher-Order Functions in JavaScript — M. David Green&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528&quot;&gt;Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code — Guido Schmitz&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a&quot;&gt;First-class and Higher Order Functions: Effective Functional JavaScript — Hugo Di Francesco&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.lullabot.com/articles/higher-order-functions-in-javascript&quot;&gt;Higher Order Functions in JavaScript — John Hannah&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://javascriptissexy.com/tag/higher-order-functions/&quot;&gt;Higher-order Functions — Richard Bovell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.zsoltnagy.eu/higher-order-functions-in-javascript/&quot;&gt;Higher Order Functions in JavaScript — Zsolt Nagy&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://derickbailey.com/2015/10/21/fun-with-higher-order-functions-in-javascript/&quot;&gt;Fun With Higher Order Functions In JavaScript — Derick&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/pedroapfilho/high-order-functions&quot;&gt;Just a reminder on how to use high order functions — Pedro Filho&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b&quot;&gt;How to use JavaScript closures with confidence — Léna Faure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example&quot;&gt;JavaScript closures by example — tyler&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=rRgD1yVwIvE&quot;&gt;JavaScript Higher Order Functions &amp;amp; Arrays — Traversy Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=BMUiFMZr7vk&quot;&gt;Higher Order Functions — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=dTlpYnmBW9I&quot;&gt;Higher Order Functions in Javascript — Raja Yogan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=GYRMNp1SKXA&quot;&gt;Higher Order Iterators in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=H4awPsyugS0&quot;&gt;Higher Order Functions in JavaScript — The Coding Train&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;23. Recursion&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f&quot;&gt;Recursion in JavaScript — Kevin Ennis&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03&quot;&gt;Understanding Recursion in JavaScript — Zak Frisch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea&quot;&gt;Learn and Understand Recursion in JavaScript — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/recursion-functional-javascript/&quot;&gt;Recursion in Functional JavaScript — M. David Green&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/programming-with-js-recursion-31371e2bf808&quot;&gt;Programming with JS: Recursion — Alexander Kondov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/simov/anonymous-recursion-in-javascript&quot;&gt;Anonymous Recursion in JavaScript — simo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/&quot;&gt;Recursion, iteration and tail calls in JS — loverajoel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.thecodingdelight.com/understanding-recursion-javascript/&quot;&gt;Understanding Recursion in JavaScript with Confidence — Jay&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=VtG0WAUvq2w&quot;&gt;Recursion In JavaScript — techsith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=k7-N8R0-KY4&quot;&gt;Recursion — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=vLhHyGTkjCs&quot;&gt;Recursion and Recursive Functions — Hexlet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=kGXVsd8pBLw&quot;&gt;Recursion: Recursion() — JS Monthly — Lucas da Costa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=uyjsR9eNTIw&quot;&gt;Recursive Function in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Mv9NEXX1VHc&quot;&gt;What on Earth is Recursion? — Computerphile&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;24. Collections y Generators&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hacks.mozilla.org/2015/06/es6-in-depth-collections/&quot;&gt;ES6 In Depth: Collections — Jason Orendorff&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/&quot;&gt;ES6 Collections: Using Map, Set, WeakMap, WeakSet — Kyle Pennell&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth&quot;&gt;ES6 WeakMaps, Sets, and WeakSets in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alligator.io/js/sets-introduction/&quot;&gt;Introduction to Sets in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alligator.io/js/maps-introduction/&quot;&gt;Introduction to Maps in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/map-set-weakmap-weakset&quot;&gt;Map, Set, WeakMap and WeakSet — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk&quot;&gt;Maps in ES6 - A Quick Guide — Ben Mildren&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/es6-set-vs-array-what-and-when-efc055655e1a&quot;&gt;ES6 — Set vs Array — What and when? — Maya Shavin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373&quot;&gt;ES6 — Map vs Object — What and when? — Maya Shavin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.deadcoderising.com/es6-working-with-sets-in-javascript/&quot;&gt;ES6: Working with Sets in JavaScript — Dead Code Rising&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b&quot;&gt;Array vs Set vs Map vs Object — Real-time use cases in Javascript (ES6/ES7) — Rajesh Babu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6&quot;&gt;How to create an array of unique values in JavaScript using Sets — Claire Parker-Jones&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e&quot;&gt;What You Should Know About ES6 Maps — Just Chris&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/es6-maps-in-depth&quot;&gt;ES6 Maps in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator&quot;&gt;Generator — MDN web docs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e&quot;&gt;What are JavaScript Generators and how to use them — Vladislav Stepanov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5&quot;&gt;Understanding JavaScript Generators With Examples — Arfat Salman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://davidwalsh.name/es6-generators&quot;&gt;The Basics of ES6 Generators — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ycohYSx5h9w&quot;&gt;JavaScript ES6 / ES2015 Set, Map, WeakSet and WeakMap — Traversy Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=m4abICrldQI&quot;&gt;The Differences between ES6 Maps and Sets — Steve Griffith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=QO07THdLWQo&quot;&gt;Javascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators — LearnCode.academy&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;25. Promesas&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/javascript-promises-for-dummies&quot;&gt;JavaScript Promises for Dummies ― Jecelyn Yeen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1&quot;&gt;Understanding promises in JavaScript — Gokul N K&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261&quot;&gt;Master the JavaScript Interview: What is a Promise? — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/overview-javascript-promises/&quot;&gt;An Overview of JavaScript Promises — Sandeep Panda&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de&quot;&gt;How to use Promises in JavaScript — Prashant Ram&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51&quot;&gt;Implementing Promises In JavaScript — Maciej Cieslar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138&quot;&gt;JavaScript: Promises explained with simple real life analogies — Shruti Kapoor&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://exploringjs.com/es6/ch_promises.html&quot;&gt;Promises for Asynchronous Programming — Exploring JS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/&quot;&gt;JavaScript Promises Explained By Gambling At A Casino — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918&quot;&gt;ES6 Promises: Patterns and Anti-Patterns — Bobby Brennan&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a&quot;&gt;A Simple Guide to ES6 Promises — Brandon Morelli&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/the-es6-promises-87a979ab27e4&quot;&gt;The ES6 Promises — Manoj Singh Negi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/es6-promises-in-depth&quot;&gt;ES6 Promises in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=vQ3MoXnKfuQ&quot;&gt;Let&#39;s Learn ES6 - Promises — Ryan Christiani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XJEHuBZQ5dU&quot;&gt;JavaScript ES6 / ES2015 Promises — Traversy Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=2d7s3spWAzo&quot;&gt;Promises — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=f8IgdnYIwOU&quot;&gt;Error Handling Promises in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=QO4NXhWo_NM&quot;&gt;Promises Part 1 - Topics of JavaScript/ES6 — The Coding Train&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;26. async/await&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/async-await&quot;&gt;async/await — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c&quot;&gt;Understanding async/await in Javascript — Gokul N K&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://eloquentjavascript.net/11_async.html&quot;&gt;Asynchronous Programming — Eloquent JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://alligator.io/js/async-functions/&quot;&gt;Exploring Async/Await Functions in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/tutorials/asynchronous-javascript-using-async-await&quot;&gt;Asynchronous Javascript using async/await — Joy Warugu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://flaviocopes.com/javascript-async-await/&quot;&gt;Modern Asynchronous JavaScript with async/await — Flavio Copes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial&quot;&gt;Asynchronous JavaScript: From Callback Hell to Async and Await — Demir Selmanovic&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a&quot;&gt;Javascript — ES8 Introducing async/await Functions — Ben Garrison&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c&quot;&gt;How to escape async/await hell — Aditya Agarwal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://ponyfoo.com/articles/understanding-javascript-async-await&quot;&gt;Understanding JavaScript’s async await — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://techbrij.com/javascript-async-await-parallel-sequence&quot;&gt;JavaScript Async/Await: Serial, Parallel and Complex Flow — TechBrij&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://exploringjs.com/es6/ch_async.html&quot;&gt;Asynchronous Programming — Exploring JS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.pusher.com/promises-async-await/&quot;&gt;From JavaScript Promises to Async/Await: why bother? — Chris Nwamba&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/flow-control-callbacks-promises-async-await/&quot;&gt;Flow Control in Modern JS: Callbacks to Promises to Async/Await — Craig Buckler&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://dzone.com/articles/javascript-promises-and-why-asyncawait-wins-the-ba&quot;&gt;JavaScript: Promises and Why Async/Await Wins the Battle — Nick Parsons&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=9YkUCxvaLEk&quot;&gt;Async + Await — Wes Bos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=SrNQS8J67zc&quot;&gt;Asynchrony: Under the Hood — Shelley Vohr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=568g8hxJJp4&amp;amp;index=3&amp;amp;list=PL0zVEGEvSaeHJppaRLrqjeTPnCH6&quot;&gt;async/await in JavaScript - What, Why and How — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=XO77Fib9tSI&amp;amp;index=3&amp;amp;list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx&quot;&gt;async/await Part 1 - Topics of JavaScript/ES8 — The Coding Train&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=chavThlNz3s&amp;amp;index=4&amp;amp;list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx&quot;&gt;async/await Part 2 - Topics of JavaScript/ES8 — The Coding Train&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;27. Estructuras de datos&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c&quot;&gt;Data Structures in JavaScript — Thon Ly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb&quot;&gt;Algorithms and Data Structures in JavaScript — Oleksii Trekhleb&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays&quot;&gt;Data Structures: Objects and Arrays ― Chris Nwamba&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/&quot;&gt;Data structures in JavaScript — Benoit Vallon&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d&quot;&gt;Playing with Data Structures in Javascript — Anish K.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9&quot;&gt;The Little Guide of Queue in JavaScript — Germán Cutraro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/barretlee/algorithms&quot;&gt;All algorithms writing with JavaScript in the book &#39;Algorithms Fourth Edition&#39;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/nzakas/computer-science-in-javascript&quot;&gt;Collection of classic computer science paradigms in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/jamiebuilds/itsy-bitsy-data-structures&quot;&gt;All the things you didn&#39;t know you wanted to know about data structures&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=PylQlISSH8U&amp;amp;list=PLujX4CIdBGCa-65N3uN8CDbUMrYsHBrz-&quot;&gt;Algorithms in JavaScript — Seth Koch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=H_EBPZgiAas&amp;amp;list=PLDmvslp_VR0zYUSth_8O69p4_cmvZEgLa&quot;&gt;Algorithms In Javascript | Ace Your Interview — Eduonix Learning Solutions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Gj5qBheGOEo&amp;amp;list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ&quot;&gt;Data Structures and Algorithms in JavaScript — freeCodeCamp&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;28. Expensive Operation y Big O Notation&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b&quot;&gt;Big O Notation in Javascript — César Antón Dorantes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b&quot;&gt;Time Complexity/Big O Notation — Tim Roberts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051&quot;&gt;Big O in JavaScript — Gabriela Medina&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html&quot;&gt;Big O Search Algorithms in JavaScript — Bradley Braithwaite&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.jenniferbland.com/time-complexity-analysis-in-javascript/&quot;&gt;Time Complexity Analysis in JavaScript — Jennifer Bland&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c&quot;&gt;Algorithms in plain English: time complexity and Big-O Notation — Michael Olorunnisola&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=HgA5VOFan5E&quot;&gt;JavaScript: Intro to Big O Notation and Function Runtime — Eric Traub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=KatlvCFHPRo&quot;&gt;Essential Big O for JavaScript Developers — Dave Smith&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=ALl86xJiTD8&quot;&gt;Big O Notation - Time Complexity Analysis — WebTunings&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;29. Algoritmos&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/Crizstian/data-structure-and-algorithms-with-ES6&quot;&gt;Data Structures and Algorithms using ES6&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms&quot;&gt;Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://www.thatjsdude.com/interview/js1.html&quot;&gt;JS: Interview Algorithm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038&quot;&gt;Algorithms in JavaScript — Thon Ly&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158&quot;&gt;JavaScript Objects, Square Brackets and Algorithms — Dmitri Grabov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/felipernb/algorithms.js&quot;&gt;Atwood&#39;s Law applied to CS101 - Classic algorithms and data structures implemented in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/yangshun/lago&quot;&gt;Data Structures and Algorithms library in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/idosela/algorithms-in-javascript&quot;&gt;Collection of computer science algorithms and data structures written in JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;30. Herencia, polimorfismo y reutilización de código&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://javascript.info/class-inheritance&quot;&gt;Class inheritance, super — JavaScript.Info&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance&quot;&gt;Inheritance in JavaScript — MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/inheritance-in-javascript-21d2b82ffa6f&quot;&gt;Inheritance in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/simple-inheritance-javascript/&quot;&gt;Simple Inheritance with JavaScript — David Catuhe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-inheritance-25fe61ab9f85&quot;&gt;JavaScript — Inheritance, delegation patterns and Object linking — NC Patro&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/&quot;&gt;Object Oriented JavaScript: Polymorphism with examples — Knoldus Blogs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/yld-engineering-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2&quot;&gt;Program Like Proteus — A beginner’s guide to polymorphism in Javascript — Sam Galson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/&quot;&gt;Object-oriented JavaScript: A Deep Dive into ES6 Classes — Jeff Mott&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=yXlFR81tDBM&quot;&gt;Inheritance in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=RBLIm5LMrmc&quot;&gt;JavaScript ES6 Classes and Inheritance — Traversy Media&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=zdovG9cuEBA&quot;&gt;Polymorphism in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;31. Patrones de diseño&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know&quot;&gt;4 JavaScript Design Patterns You Should Know — Devan Patel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15&quot;&gt;JavaScript Design Patterns – Beginner&#39;s Guide to Mobile Web Development — Soumyajit Pathak&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/front-end-hacking/javascript-design-patterns-ed9d4c144c81&quot;&gt;JavaScript Design Patterns — Akash Pal&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://seesparkbox.com/foundry/javascript_design_patterns&quot;&gt;Javascript Design Patterns: What They Are &amp;amp; How To Use Them — Patrick Simpson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/fbeline/Design-Patterns-JS&quot;&gt;All the 23 (GoF) design patterns implemented in Javascript — Felipe Beline&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;Learning JavaScript Design Patterns — Addy Osmani &lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.udacity.com/course/javascript-design-patterns--ud989&quot;&gt;JavaScript Design Patterns — Udacity&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=hO7mzO83N1Q&quot;&gt;JavaScript Patterns for 2017 — Scott Allen&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;32. Partial Applications, Currying, Compose y Pipe&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.codementor.io/michelre/use-function-composition-in-javascript-gkmxos5mj&quot;&gt;Use function composition in JavaScript — Rémi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400&quot;&gt;Currying in JavaScript ES6 — Adam Bene&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b&quot;&gt;Composition and Currying Elegance in JavaScript — Pragyan Das&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10&quot;&gt;Functional JavaScript: Function Composition For Every Day Use — Joel Thoms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f&quot;&gt;Functional Composition: compose() and pipe() — Anton Paras&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://busypeoples.github.io/post/functional-composing-javascript/&quot;&gt;Why The Hipsters Compose Everything: Functional Composing In JavaScript — A. Sharif&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/&quot;&gt;A Gentle Introduction to Functional JavaScript pt III: Functions for making functions — James Sinclair&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/&quot;&gt;Curry And Compose (why you should be using something like ramda in your code) — jsanchesleao&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://vanslaars.io/post/create-pipe-function/&quot;&gt;Function Composition in JavaScript with Pipe — Andy Van Slaars&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://developer.telerik.com/featured/practical-functional-javascript-ramda/&quot;&gt;Practical Functional JavaScript with Ramda — Andrew D&#39;Amelio, Yuri Takhteyev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574&quot;&gt;The beauty in Partial Application, Currying, and Function Composition — Joel Thoms&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8&quot;&gt;Curry or Partial Application? — Eric Elliott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://benalman.com/news/2012/09/partial-application-in-javascript/&quot;&gt;Partial Application in JavaScript — Ben Alman&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://hackernoon.com/partial-application-of-functions-dbe7d9b80760&quot;&gt;Partial Application of Functions — Functional Reactive Ninja&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/javascript-currying-vs-partial-application-4db5b2442be8&quot;&gt;Currying vs Partial Application — Deepak Gupta&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;http://raganwald.com/2015/04/01/partial-application.html&quot;&gt;Partial Application in ECMAScript 2015 — Ragan Wald&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://joecortopassi.com/articles/functional-composition-in-javascript/&quot;&gt;Functional Composition in Javascript — Joe Cortopassi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536&quot;&gt;So You Want to be a Functional Programmer pt. I — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a&quot;&gt;So You Want to be a Functional Programmer pt. II — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7&quot;&gt;So You Want to be a Functional Programmer pt. III — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49&quot;&gt;So You Want to be a Functional Programmer pt. IV — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a&quot;&gt;So You Want to be a Functional Programmer pt. V — Charles Scalfani&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch3.md&quot;&gt;Functional-Light JavaScript Chapter 3: Managing Function Inputs — Kyle Simpson&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Wl2ejJOqHUU&quot;&gt;Compose vs Pipe: Functional Programming in JavaScript — Chyld Studios&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=jigHxo9YR30&quot;&gt;JavaScript Functional Programing: Compose — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=mth5WpEc4Qs&quot;&gt;Function Composition - Functional JavaScript — NWCalvank&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Uam37AlzPYw&quot;&gt;JavaScript Function Composition Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=VGB9HbL1GHk&quot;&gt;Let&#39;s code with function composition — Fun Fun Function&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=DzLkRsUN2vE&quot;&gt;Partial Application vs. Currying — NWCalvank&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=jkebgHEcvac&quot;&gt;JavaScript Partial Application — Theodore Anderson&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;33. Código limpio&lt;/h2&gt; 
&lt;h3&gt;Artículos (Inglés)&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript&quot;&gt;Clean Code concepts adapted for JavaScript — Ryan McDermott&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/&quot;&gt;JavaScript Clean Coding Best Practices — András Tóth&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://medium.com/@kevin_peters/function-parameters-in-javascript-clean-code-4caac109159b&quot;&gt;Function parameters in JavaScript Clean Code — Kevin Peters&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://css-tricks.com/clean-code-javascript/&quot;&gt;Clean Code JavaScript — Sarah Drasner&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://codeburst.io/keeping-your-code-clean-d30bcffd1a10&quot;&gt;Keeping your code clean — Samuel James&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;📜 &lt;a href=&quot;https://www.sitepoint.com/modern-javascript-best-practices/&quot;&gt;Best Practices for Using Modern JavaScript Syntax — M. David Green&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Videos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;🎥 &lt;a href=&quot;https://www.youtube.com/watch?v=Mus_vwhTCq0&quot;&gt;JavaScript Pro Tips - Code This, NOT That&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/adonismendozaperez/33-js-conceptos/master/#Tabla-de-contenido&quot;&gt;⬆ volver arriba&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>30-seconds/30-seconds-of-interviews</title>
      <link>https://github.com/30-seconds/30-seconds-of-interviews</link>
      <description>&lt;p&gt;A curated collection of common interview questions to help you prepare for your next interview.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;This README is built using &lt;a href=&quot;https://github.com/30-seconds/markdown-builder&quot;&gt;markdown-builder&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Foreword&lt;/h2&gt; 
&lt;p&gt;Interviews are daunting and can make even the most seasoned expert forget things under pressure. Review and learn what questions are commonly encountered in interviews curated by the community that&#39;s answered them and go prepared for anything they&#39;ll ask. By bringing together experience and real-world examples, you can go from being nervous to being prepared for that next big opportunity.&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://30secondsofinterviews.org/&quot;&gt;View online&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;30 seconds of interviews is a community effort, so feel free to contribute in any way you can. Every contribution helps!&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Do you have an excellent idea or know some cool questions that aren&#39;t on the list? Read the &lt;a href=&quot;https://github.com/30-seconds/30-seconds-of-interviews/blob/master/CONTRIBUTING.md&quot;&gt;contribution guidelines&lt;/a&gt; and submit a pull request.&lt;/p&gt; 
&lt;p&gt;Join our &lt;a href=&quot;https://gitter.im/30-seconds-of-interviews/Lobby&quot;&gt;Gitter channel&lt;/a&gt; to help with the development of the project.&lt;/p&gt; 
&lt;h4&gt;Related projects&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://30secondsofcode.org&quot;&gt;30 Seconds of Code&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://30-seconds.github.io/30-seconds-of-css/&quot;&gt;30 Seconds of CSS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/30-seconds/30-seconds-of-react&quot;&gt;30 Seconds of React&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/30-seconds-of-knowledge/mmgplondnjekobonklacmemikcnhklla&quot;&gt;30 Seconds of Knowledge&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;h3&gt;JavaScript&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#create-a-function-batches-that-returns-the-maximum-number-of-whole-batches-that-can-be-cooked-from-a-recipe&quot;&gt;Create a function &lt;code&gt;batches&lt;/code&gt; that returns the maximum number of whole batches that can be cooked from a recipe.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-big-o-notation&quot;&gt;What is Big O Notation?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#create-a-standalone-function-bind-that-is-functionally-equivalent-to-the-method-functionprototypebind&quot;&gt;Create a standalone function &lt;code&gt;bind&lt;/code&gt; that is functionally equivalent to the method &lt;code&gt;Function.prototype.bind&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-can-you-avoid-callback-hells&quot;&gt;How can you avoid callback hells?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-purpose-of-callback-function-as-an-argument-of-setstate&quot;&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#which-is-the-preferred-option-between-callback-refs-and-finddomnode&quot;&gt;Which is the preferred option between callback refs and findDOMNode()?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-callback-can-you-show-an-example-using-one&quot;&gt;What is a callback? Can you show an example using one?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-children-prop&quot;&gt;What is the &lt;code&gt;children&lt;/code&gt; prop?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-do-you-clone-an-object-in-javascript&quot;&gt;How do you clone an object in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-closure-can-you-give-a-useful-example-of-one&quot;&gt;What is a closure? Can you give a useful example of one?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-do-you-compare-two-objects-in-javascript&quot;&gt;How do you compare two objects in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-context&quot;&gt;What is context?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-cors&quot;&gt;What is CORS?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-dom&quot;&gt;What is the DOM?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-the-equality-operators--and-&quot;&gt;What is the difference between the equality operators &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-an-element-and-a-component-in-react&quot;&gt;What is the difference between an element and a component in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-event-delegation-and-why-is-it-useful-can-you-show-an-example-of-how-to-use-it&quot;&gt;What is event delegation and why is it useful? Can you show an example of how to use it?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-event-driven-programming&quot;&gt;What is event-driven programming?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-an-expression-and-a-statement-in-javascript&quot;&gt;What is the difference between an expression and a statement in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-truthy-and-falsy-values-in-javascript&quot;&gt;What are truthy and falsy values in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#generate-an-array-containing-the-fibonacci-sequence-up-until-the-nth-term&quot;&gt;Generate an array, containing the Fibonacci sequence, up until the nth term.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-does-01--02--03-evaluate-to&quot;&gt;What does &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; evaluate to?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-the-array-methods-map-and-foreach&quot;&gt;What is the difference between the array methods &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;forEach()&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-fragments&quot;&gt;What are fragments?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-functional-programming&quot;&gt;What is functional programming?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-will-the-console-log-in-this-example&quot;&gt;What will the console log in this example?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-does-hoisting-work-in-javascript&quot;&gt;How does hoisting work in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-html-and-react-event-handling&quot;&gt;What is the difference between HTML and React event handling?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-reason-for-wrapping-the-entire-contents-of-a-javascript-source-file-in-a-function-that-is-immediately-invoked&quot;&gt;What is the reason for wrapping the entire contents of a JavaScript source file in a function that is immediately invoked?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#explain-the-differences-between-imperative-and-declarative-programming&quot;&gt;Explain the differences between imperative and declarative programming.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-inline-conditional-expressions&quot;&gt;What are inline conditional expressions?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-key-what-are-the-benefits-of-using-it-in-lists&quot;&gt;What is a key? What are the benefits of using it in lists?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-lexical-scoping-and-dynamic-scoping&quot;&gt;What is the difference between lexical scoping and dynamic scoping?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#create-a-function-that-masks-a-string-of-characters-with--except-for-the-last-four-4-characters&quot;&gt;Create a function that masks a string of characters with &lt;code&gt;#&lt;/code&gt; except for the last four (4) characters.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-memoization&quot;&gt;What is memoization?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-do-you-ensure-methods-have-the-correct-this-context-in-react-component-classes&quot;&gt;How do you ensure methods have the correct &lt;code&gt;this&lt;/code&gt; context in React component classes?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-mime-type-and-what-is-it-used-for&quot;&gt;What is a MIME type and what is it used for?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#contrast-mutable-and-immutable-values-and-mutating-vs-non-mutating-methods&quot;&gt;Contrast mutable and immutable values, and mutating vs non-mutating methods.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-only-value-not-equal-to-itself-in-javascript&quot;&gt;What is the only value not equal to itself in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#nodejs-often-uses-a-callback-pattern-where-if-an-error-is-encountered-during-execution-this-error-is-passed-as-the-first-argument-to-the-callback-what-are-the-advantages-of-this-pattern&quot;&gt;NodeJS often uses a callback pattern where if an error is encountered during execution, this error is passed as the first argument to the callback. What are the advantages of this pattern?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-event-loop-in-nodejs&quot;&gt;What is the event loop in Node.js?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-null-and-undefined&quot;&gt;What is the difference between &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#describe-the-different-ways-to-create-an-object-when-should-certain-ways-be-preferred-over-others&quot;&gt;Describe the different ways to create an object. When should certain ways be preferred over others?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-a-parameter-and-an-argument&quot;&gt;What is the difference between a parameter and an argument?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#does-javascript-pass-by-value-or-by-reference&quot;&gt;Does JavaScript pass by value or by reference?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-do-you-pass-an-argument-to-an-event-handler-or-callback&quot;&gt;How do you pass an argument to an event handler or callback?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#create-a-function-pipe-that-performs-left-to-right-function-composition-by-returning-a-function-that-accepts-one-argument&quot;&gt;Create a function &lt;code&gt;pipe&lt;/code&gt; that performs left-to-right function composition by returning a function that accepts one argument.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-portals-in-react&quot;&gt;What are portals in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-the-postfix-i-and-prefix-i-increment-operators&quot;&gt;What is the difference between the postfix &lt;code&gt;i++&lt;/code&gt; and prefix &lt;code&gt;++i&lt;/code&gt; increment operators?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#in-which-states-can-a-promise-be&quot;&gt;In which states can a Promise be?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-promises&quot;&gt;What are Promises?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-does-prototypal-inheritance-differ-from-classical-inheritance&quot;&gt;How does prototypal inheritance differ from classical inheritance?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-pure-function&quot;&gt;What is a pure function?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-recursion-and-when-is-it-useful&quot;&gt;What is recursion and when is it useful?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-output-of-the-following-code&quot;&gt;What is the output of the following code?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-refs-in-react-when-should-they-be-used&quot;&gt;What are refs in React? When should they be used?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-does-the-following-function-return&quot;&gt;What does the following function return?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#are-semicolons-required-in-javascript&quot;&gt;Are semicolons required in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-short-circuit-evaluation-in-javascript&quot;&gt;What is short-circuit evaluation in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-stateful-component-in-react&quot;&gt;What is a stateful component in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-stateless-component&quot;&gt;What is a stateless component?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#explain-the-difference-between-a-static-method-and-an-instance-method&quot;&gt;Explain the difference between a static method and an instance method.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-synchronous-and-asynchronous-code-in-javascript&quot;&gt;What is the difference between synchronous and asynchronous code in JavaScript?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-this-keyword-and-how-does-it-work&quot;&gt;What is the &lt;code&gt;this&lt;/code&gt; keyword and how does it work?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-does-the-following-code-evaluate-to&quot;&gt;What does the following code evaluate to?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-javascript-data-types&quot;&gt;What are JavaScript data types?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-purpose-of-javascript-ui-librariesframeworks-like-react-vue-angular-hyperapp-etc&quot;&gt;What is the purpose of JavaScript UI libraries/frameworks like React, Vue, Angular, Hyperapp, etc?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-does-use-strict-do-and-what-are-some-of-the-key-benefits-to-using-it&quot;&gt;What does &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; do and what are some of the key benefits to using it?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-the-differences-between-var-let-const-and-no-keyword-statements&quot;&gt;What are the differences between &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; and no keyword statements?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-virtual-dom-and-why-is-it-used-in-librariesframeworks&quot;&gt;What is a virtual DOM and why is it used in libraries/frameworks?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-cross-site-scripting-attack-xss-and-how-do-you-prevent-it&quot;&gt;What is a cross-site scripting attack (XSS) and how do you prevent it?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;React&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-purpose-of-callback-function-as-an-argument-of-setstate&quot;&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#which-is-the-preferred-option-between-callback-refs-and-finddomnode&quot;&gt;Which is the preferred option between callback refs and findDOMNode()?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-children-prop&quot;&gt;What is the &lt;code&gt;children&lt;/code&gt; prop?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#why-does-react-use-classname-instead-of-class-like-in-html&quot;&gt;Why does React use &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; like in HTML?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-context&quot;&gt;What is context?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-an-element-and-a-component-in-react&quot;&gt;What is the difference between an element and a component in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-error-boundaries-in-react&quot;&gt;What are error boundaries in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-fragments&quot;&gt;What are fragments?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-higher-order-components&quot;&gt;What are higher-order components?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-html-and-react-event-handling&quot;&gt;What is the difference between HTML and React event handling?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-inline-conditional-expressions&quot;&gt;What are inline conditional expressions?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-key-what-are-the-benefits-of-using-it-in-lists&quot;&gt;What is a key? What are the benefits of using it in lists?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-the-lifecycle-methods-in-react&quot;&gt;What are the lifecycle methods in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-the-different-phases-of-the-component-lifecycle-in-react&quot;&gt;What are the different phases of the component lifecycle in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-does-lifting-state-up-in-react-mean&quot;&gt;What does lifting state up in React mean?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-do-you-ensure-methods-have-the-correct-this-context-in-react-component-classes&quot;&gt;How do you ensure methods have the correct &lt;code&gt;this&lt;/code&gt; context in React component classes?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-do-you-pass-an-argument-to-an-event-handler-or-callback&quot;&gt;How do you pass an argument to an event handler or callback?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-portals-in-react&quot;&gt;What are portals in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-to-apply-prop-validation-in-react&quot;&gt;How to apply prop validation in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-do-you-write-comments-inside-a-jsx-tree-in-react&quot;&gt;How do you write comments inside a JSX tree in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-refs-in-react-when-should-they-be-used&quot;&gt;What are refs in React? When should they be used?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-stateful-component-in-react&quot;&gt;What is a stateful component in React?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-stateless-component&quot;&gt;What is a stateless component?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;HTML&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-purpose-of-the-alt-attribute-on-images&quot;&gt;What is the purpose of the &lt;code&gt;alt&lt;/code&gt; attribute on images?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-defer-and-async-attributes-on-a-script-tag&quot;&gt;What are &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; attributes on a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-purpose-of-cache-busting-and-how-can-you-achieve-it&quot;&gt;What is the purpose of cache busting and how can you achieve it?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-dom&quot;&gt;What is the DOM?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#can-a-web-page-contain-multiple-header-elements-what-about-footer-elements&quot;&gt;Can a web page contain multiple &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; elements? What about &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; elements?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#discuss-the-differences-between-an-html-specification-and-a-browsers-implementation-thereof&quot;&gt;Discuss the differences between an HTML specification and a browser’s implementation thereof.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-html-and-react-event-handling&quot;&gt;What is the difference between HTML and React event handling?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-some-differences-that-xhtml-has-compared-to-html&quot;&gt;What are some differences that XHTML has compared to HTML?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#briefly-describe-the-correct-usage-of-the-following-html5-semantic-elements-header-articlesection-footer&quot;&gt;Briefly describe the correct usage of the following HTML5 semantic elements: &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-html5-web-storage-explain-localstorage-and-sessionstorage&quot;&gt;What is HTML5 Web Storage? Explain &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#where-and-why-is-the-relnoopener-attribute-used&quot;&gt;Where and why is the &lt;code&gt;rel=&quot;noopener&quot;&lt;/code&gt; attribute used?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;CSS&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-css-bem&quot;&gt;What is CSS BEM?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#describe-the-layout-of-the-css-box-model-and-briefly-describe-each-component&quot;&gt;Describe the layout of the CSS Box Model and briefly describe each component.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-the-advantages-of-using-css-preprocessors&quot;&gt;What are the advantages of using CSS preprocessors?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between--and--sibling-selectors&quot;&gt;What is the difference between &#39;+&#39; and &#39;~&#39; sibling selectors?.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#can-you-describe-how-css-specificity-works&quot;&gt;Can you describe how CSS specificity works?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-difference-between-em-and-rem-units&quot;&gt;What is the difference between &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#using-flexbox-create-a-3-column-layout-where-each-column-takes-up-a-col-n--12-ratio-of-the-container&quot;&gt;Using flexbox, create a 3-column layout where each column takes up a &lt;code&gt;col-{n} / 12&lt;/code&gt; ratio of the container.&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-focus-ring-what-is-the-correct-solution-to-handle-them&quot;&gt;What is a focus ring? What is the correct solution to handle them?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#can-you-name-the-four-types-of-media-properties&quot;&gt;Can you name the four types of &lt;code&gt;@media&lt;/code&gt; properties?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-the-advantages-of-using-css-sprites-and-how-are-they-utilized&quot;&gt;What are the advantages of using CSS sprites and how are they utilized?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Accessibility&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-aria-and-when-should-you-use-it&quot;&gt;What is ARIA and when should you use it?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-accessibility-tree&quot;&gt;What is the Accessibility Tree?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-are-landmark-roles-and-how-can-they-be-useful&quot;&gt;What are landmark roles and how can they be useful?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-wcag-what-are-the-differences-between-a-aa-and-aaa-compliance&quot;&gt;What is WCAG? What are the differences between A, AA, and AAA compliance?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Node&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#how-can-you-avoid-callback-hells&quot;&gt;How can you avoid callback hells?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#nodejs-often-uses-a-callback-pattern-where-if-an-error-is-encountered-during-execution-this-error-is-passed-as-the-first-argument-to-the-callback-what-are-the-advantages-of-this-pattern&quot;&gt;NodeJS often uses a callback pattern where if an error is encountered during execution, this error is passed as the first argument to the callback. What are the advantages of this pattern?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-the-event-loop-in-nodejs&quot;&gt;What is the event loop in Node.js?&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-rest&quot;&gt;What is REST?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h3&gt;Security&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#what-is-a-cross-site-scripting-attack-xss-and-how-do-you-prevent-it&quot;&gt;What is a cross-site scripting attack (XSS) and how do you prevent it?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;hr&gt; 
&lt;h2&gt;JavaScript&lt;/h2&gt; 
&lt;h3&gt;What is a stateless component?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A stateless component is a component whose behavior does not depend on its state. Stateless components can be either functional or class components. Stateless functional components are easier to maintain and test since they are guaranteed to produce the same output given the same props. Stateless functional components should be preferred when lifecycle hooks don&#39;t need to be used.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stateless components are independent of their state.&lt;/li&gt; 
 &lt;li&gt;Stateless components can be either class or functional components.&lt;/li&gt; 
 &lt;li&gt;Stateless functional components avoid the &lt;code&gt;this&lt;/code&gt; keyword altogether.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/state-and-lifecycle.html&quot;&gt;React docs on State and Lifecycle&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between the equality operators &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Triple equals (&lt;code&gt;===&lt;/code&gt;) checks for strict equality, which means both the type and value must be the same. Double equals (&lt;code&gt;==&lt;/code&gt;) on the other hand first performs type coercion so that both operands are of the same type and then applies strict comparison.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Whenever possible, use triple equals to test equality because loose equality &lt;code&gt;==&lt;/code&gt; can have unintuitive results.&lt;/li&gt; 
 &lt;li&gt;Type coercion means the values are converted into the same type.&lt;/li&gt; 
 &lt;li&gt;Mention of falsy values and their comparison.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;MDN docs for comparison operators&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between an element and a component in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;An element is a plain JavaScript object that represents a DOM node or component. Elements are pure and never mutated, and are cheap to create.&lt;/p&gt; 
&lt;p&gt;A component is a function or class. Components can have state and take props as input and return an element tree as output (although they can represent generic containers or wrappers and don&#39;t necessarily have to emit DOM). Components can initiate side effects in lifecycle methods (e.g. AJAX requests, DOM mutations, interfacing with 3rd party libraries) and may be expensive to create.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Component = () =&amp;gt; &quot;Hello&quot;
const componentElement = &amp;lt;Component /&amp;gt;
const domNodeElement = &amp;lt;div /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Elements are immutable, plain objects that describe the DOM nodes or components you want to render.&lt;/li&gt; 
 &lt;li&gt;Components can be either classes or functions, that take props as an input and return an element tree as the output.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/rendering-elements.html&quot;&gt;React docs on Rendering Elements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/components-and-props.html&quot;&gt;React docs on Components and Props&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a stateful component in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A stateful component is a component whose behavior depends on its state. This means that two separate instances of the component if given the same props will not necessarily render the same output, unlike pure function components.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Stateful class component
class App extends Component {
  constructor(props) {
    super(props)
    this.state = { count: 0 }
  }
  render() {
    // ...
  }
}

// Stateful function component
function App() {
  const [count, setCount] = useState(0)
  return // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stateful components have internal state that they depend on.&lt;/li&gt; 
 &lt;li&gt;Stateful components are class components or function components that use stateful Hooks.&lt;/li&gt; 
 &lt;li&gt;Stateful components have their state initialized in the constructor or with &lt;code&gt;useState()&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/state-and-lifecycle.html&quot;&gt;React docs on State and Lifecycle&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;In which states can a Promise be?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A &lt;code&gt;Promise&lt;/code&gt; is in one of these states:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;pending: initial state, neither fulfilled nor rejected.&lt;/li&gt; 
 &lt;li&gt;fulfilled: meaning that the operation completed successfully.&lt;/li&gt; 
 &lt;li&gt;rejected: meaning that the operation failed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A pending promise can either be fulfilled with a value, or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise&#39;s then method are called.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Official Web Docs Promise&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between the postfix &lt;code&gt;i++&lt;/code&gt; and prefix &lt;code&gt;++i&lt;/code&gt; increment operators?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Both increment the variable value by 1. The difference is what they evaluate to.&lt;/p&gt; 
&lt;p&gt;The postfix increment operator evaluates to the value &lt;em&gt;before&lt;/em&gt; it was incremented.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let i = 0
i++ // 0
// i === 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The prefix increment operator evaluates to the value &lt;em&gt;after&lt;/em&gt; it was incremented.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let i = 0
++i // 1
// i === 1
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Create a function &lt;code&gt;batches&lt;/code&gt; that returns the maximum number of whole batches that can be cooked from a recipe.&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/**
It accepts two objects as arguments: the first object is the recipe
for the food, while the second object is the available ingredients.
Each ingredient&#39;s value is a number representing how many units there are.

`batches(recipe, available)`
*/

// 0 batches can be made
batches(
  { milk: 100, butter: 50, flour: 5 },
  { milk: 132, butter: 48, flour: 51 }
)
batches(
  { milk: 100, flour: 4, sugar: 10, butter: 5 },
  { milk: 1288, flour: 9, sugar: 95 }
)

// 1 batch can be made
batches(
  { milk: 100, butter: 50, cheese: 10 },
  { milk: 198, butter: 52, cheese: 10 }
)

// 2 batches can be made
batches(
  { milk: 2, sugar: 40, butter: 20 },
  { milk: 5, sugar: 120, butter: 500 }
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;We must have all ingredients of the recipe available, and in quantities that are more than or equal to the number of units required. If just one of the ingredients is not available or lower than needed, we cannot make a single batch.&lt;/p&gt; 
&lt;p&gt;Use &lt;code&gt;Object.keys()&lt;/code&gt; to return the ingredients of the recipe as an array, then use &lt;code&gt;Array.prototype.map()&lt;/code&gt; to map each ingredient to the ratio of available units to the amount required by the recipe. If one of the ingredients required by the recipe is not available at all, the ratio will evaluate to &lt;code&gt;NaN&lt;/code&gt;, so the logical OR operator can be used to fallback to &lt;code&gt;0&lt;/code&gt; in this case.&lt;/p&gt; 
&lt;p&gt;Use the spread &lt;code&gt;...&lt;/code&gt; operator to feed the array of all the ingredient ratios into &lt;code&gt;Math.min()&lt;/code&gt; to determine the lowest ratio. Passing this entire result into &lt;code&gt;Math.floor()&lt;/code&gt; rounds down to return the maximum number of whole batches.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const batches = (recipe, available) =&amp;gt;
  Math.floor(
    Math.min(...Object.keys(recipe).map(k =&amp;gt; available[k] / recipe[k] || 0))
  )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What does the following code evaluate to?&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;typeof typeof 0
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;It evaluates to &lt;code&gt;&quot;string&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;typeof 0&lt;/code&gt; evaluates to the string &lt;code&gt;&quot;number&quot;&lt;/code&gt; and therefore &lt;code&gt;typeof &quot;number&quot;&lt;/code&gt; evaluates to &lt;code&gt;&quot;string&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof&quot;&gt;MDN docs for typeof&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do you clone an object in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Using the object spread operator &lt;code&gt;...&lt;/code&gt;, the object&#39;s own enumerable properties can be copied into the new object. This creates a shallow clone of the object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const obj = { a: 1, b: 2 }
const shallowClone = { ...obj }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With this technique, prototypes are ignored. In addition, nested objects are not cloned, but rather their references get copied, so nested objects still refer to the same objects as the original. Deep-cloning is much more complex in order to effectively clone any type of object (Date, RegExp, Function, Set, etc) that may be nested within the object.&lt;/p&gt; 
&lt;p&gt;Other alternatives include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;JSON.parse(JSON.stringify(obj))&lt;/code&gt; can be used to deep-clone a simple object, but it is CPU-intensive and only accepts valid JSON (therefore it strips functions and does not allow circular references).&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Object.assign({}, obj)&lt;/code&gt; is another alternative.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Object.keys(obj).reduce((acc, key) =&amp;gt; (acc[key] = obj[key], acc), {})&lt;/code&gt; is another more verbose alternative that shows the concept in greater depth.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;JavaScript passes objects by reference, meaning that nested objects get their references copied, instead of their values.&lt;/li&gt; 
 &lt;li&gt;The same method can be used to merge two objects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;MDN docs for Object.assign()&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://voidcanvas.com/clone-an-object-in-vanilla-js-in-depth/&quot;&gt;Clone an object in vanilla JS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between synchronous and asynchronous code in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Synchronous means each operation must wait for the previous one to complete.&lt;/p&gt; 
&lt;p&gt;Asynchronous means an operation can occur while another operation is still being processed.&lt;/p&gt; 
&lt;p&gt;In JavaScript, all code is synchronous due to the single-threaded nature of it. However, asynchronous operations not part of the program (such as &lt;code&gt;XMLHttpRequest&lt;/code&gt; or &lt;code&gt;setTimeout&lt;/code&gt;) are processed outside of the main thread because they are controlled by native code (browser APIs), but callbacks part of the program will still be executed synchronously.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;JavaScript has a concurrency model based on an &quot;event loop&quot;.&lt;/li&gt; 
 &lt;li&gt;Functions like &lt;code&gt;alert&lt;/code&gt; block the main thread so that no user input is registered until the user closes it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do you compare two objects in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Even though two different objects can have the same properties with equal values, they are not considered equal when compared using &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;===&lt;/code&gt;. This is because they are being compared by their reference (location in memory), unlike primitive values which are compared by value.&lt;/p&gt; 
&lt;p&gt;In order to test if two objects are equal in structure, a helper function is required. It will iterate through the own properties of each object to test if they have the same values, including nested objects. Optionally, the prototypes of the objects may also be tested for equivalence by passing &lt;code&gt;true&lt;/code&gt; as the 3rd argument.&lt;/p&gt; 
&lt;p&gt;Note: this technique does not attempt to test equivalence of data structures other than plain objects, arrays, functions, dates and primitive values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function isDeepEqual(obj1, obj2, testPrototypes = false) {
  if (obj1 === obj2) {
    return true
  }

  if (typeof obj1 === &quot;function&quot; &amp;amp;&amp;amp; typeof obj2 === &quot;function&quot;) {
    return obj1.toString() === obj2.toString()
  }

  if (obj1 instanceof Date &amp;amp;&amp;amp; obj2 instanceof Date) {
    return obj1.getTime() === obj2.getTime()
  }

  if (
    Object.prototype.toString.call(obj1) !==
      Object.prototype.toString.call(obj2) ||
    typeof obj1 !== &quot;object&quot;
  ) {
    return false
  }

  const prototypesAreEqual = testPrototypes
    ? isDeepEqual(
        Object.getPrototypeOf(obj1),
        Object.getPrototypeOf(obj2),
        true
      )
    : true

  const obj1Props = Object.getOwnPropertyNames(obj1)
  const obj2Props = Object.getOwnPropertyNames(obj2)

  return (
    obj1Props.length === obj2Props.length &amp;amp;&amp;amp;
    prototypesAreEqual &amp;amp;&amp;amp;
    obj1Props.every(prop =&amp;gt; isDeepEqual(obj1[prop], obj2[prop]))
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Primitives like strings and numbers are compared by their value&lt;/li&gt; 
 &lt;li&gt;Objects on the other hand are compared by their reference (location in memory)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html&quot;&gt;Object Equality in JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://30secondsofcode.org/object#equals&quot;&gt;Deep comparison between two values&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a cross-site scripting attack (XSS) and how do you prevent it?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;XSS refers to client-side code injection where the attacker injects malicious scripts into a legitimate website or web application. This is often achieved when the application does not validate user input and freely injects dynamic HTML content.&lt;/p&gt; 
&lt;p&gt;For example, a comment system will be at risk if it does not validate or escape user input. If the comment contains unescaped HTML, the comment can inject a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag into the website that other users will execute against their knowledge.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The malicious script has access to cookies which are often used to store session tokens. If an attacker can obtain a user’s session cookie, they can impersonate the user.&lt;/li&gt; 
 &lt;li&gt;The script can arbitrarily manipulate the DOM of the page the script is executing in, allowing the attacker to insert pieces of content that appear to be a real part of the website.&lt;/li&gt; 
 &lt;li&gt;The script can use AJAX to send HTTP requests with arbitrary content to arbitrary destinations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;On the client, using &lt;code&gt;textContent&lt;/code&gt; instead of &lt;code&gt;innerHTML&lt;/code&gt; prevents the browser from running the string through the HTML parser which would execute scripts in it.&lt;/li&gt; 
 &lt;li&gt;On the server, escaping HTML tags will prevent the browser from parsing the user input as actual HTML and therefore won&#39;t execute the script.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.acunetix.com/websitesecurity/cross-site-scripting/&quot;&gt;Cross-Site Scripting Attack (XSS)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is CORS?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Cross-Origin Resource Sharing or CORS is a mechanism that uses additional HTTP headers to grant a browser permission to access resources from a server at an origin different from the website origin.&lt;/p&gt; 
&lt;p&gt;An example of a cross-origin request is a web application served from &lt;code&gt;http://mydomain.com&lt;/code&gt; that uses AJAX to make a request for &lt;code&gt;http://yourdomain.com&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For security reasons, browsers restrict cross-origin HTTP requests initiated by JavaScript. &lt;code&gt;XMLHttpRequest&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt; follow the same-origin policy, meaning a web application using those APIs can only request HTTP resources from the same origin the application was accessed, unless the response from the other origin includes the correct CORS headers.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;CORS behavior is not an error,  it’s a security mechanism to protect users.&lt;/li&gt; 
 &lt;li&gt;CORS is designed to prevent a malicious website that a user may unintentionally visit from making a request to a legitimate website to read their personal data or perform actions against their will.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;MDN docs for CORS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the DOM?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The DOM (Document Object Model) is a cross-platform API that treats HTML and XML documents as a tree structure consisting of nodes. These nodes (such as elements and text nodes) are objects that can be programmatically manipulated and any visible changes made to them are reflected live in the document. In a browser, this API is available to JavaScript where DOM nodes can be manipulated to change their styles, contents, placement in the document, or interacted with through event listeners.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The DOM was designed to be independent of any particular programming language, making the structural representation of the document available from a single, consistent API.&lt;/li&gt; 
 &lt;li&gt;The DOM is constructed progressively in the browser as a page loads, which is why scripts are often placed at the bottom of a page, in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; with a &lt;code&gt;defer&lt;/code&gt; attribute, or inside a &lt;code&gt;DOMContentLoaded&lt;/code&gt; event listener. Scripts that manipulate DOM nodes should be run after the DOM has been constructed to avoid errors.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;document.getElementById()&lt;/code&gt; and &lt;code&gt;document.querySelector()&lt;/code&gt; are common functions for selecting DOM nodes.&lt;/li&gt; 
 &lt;li&gt;Setting the &lt;code&gt;innerHTML&lt;/code&gt; property to a new value runs the string through the HTML parser, offering an easy way to append dynamic HTML content to a node.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM&quot;&gt;MDN docs for DOM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Create a standalone function &lt;code&gt;bind&lt;/code&gt; that is functionally equivalent to the method &lt;code&gt;Function.prototype.bind&lt;/code&gt;.&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function example() {
  console.log(this)
}
const boundExample = bind(example, { a: true })
boundExample.call({ b: true }) // logs { a: true }
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Return a function that accepts an arbitrary number of arguments by gathering them with the rest &lt;code&gt;...&lt;/code&gt; operator. From that function, return the result of calling the &lt;code&gt;fn&lt;/code&gt; with &lt;code&gt;Function.prototype.apply&lt;/code&gt; to apply the context and the array of arguments to the function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const bind = (fn, context) =&amp;gt; (...args) =&amp;gt; fn.apply(context, args)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are the differences between &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; and no keyword statements?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;No keyword&lt;/h5&gt; 
&lt;p&gt;When no keyword exists before a variable assignment, it is either assigning a global variable if one does not exist, or reassigns an already declared variable. In non-strict mode, if the variable has not yet been declared, it will assign the variable as a property of the global object (&lt;code&gt;window&lt;/code&gt; in browsers). In strict mode, it will throw an error to prevent unwanted global variables from being created.&lt;/p&gt; 
&lt;h5&gt;var&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;var&lt;/code&gt; was the default statement to declare a variable until ES2015. It creates a function-scoped variable that can be reassigned and redeclared. However, due to its lack of block scoping, it can cause issues if the variable is being reused in a loop that contains an asynchronous callback because the variable will continue to exist outside of the block scope.&lt;/p&gt; 
&lt;p&gt;Below, by the time the the &lt;code&gt;setTimeout&lt;/code&gt; callback executes, the loop has already finished and the &lt;code&gt;i&lt;/code&gt; variable is &lt;code&gt;10&lt;/code&gt;, so all ten callbacks reference the same variable available in the function scope.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (var i = 0; i &amp;lt; 10; i++) {
  setTimeout(() =&amp;gt; {
    // logs `10` ten times
    console.log(i)
  })
}

/* Solutions with `var` */
for (var i = 0; i &amp;lt; 10; i++) {
  // Passed as an argument will use the value as-is in
  // that point in time
  setTimeout(console.log, 0, i)
}

for (var i = 0; i &amp;lt; 10; i++) {
  // Create a new function scope that will use the value
  // as-is in that point in time
  ;(i =&amp;gt; {
    setTimeout(() =&amp;gt; {
      console.log(i)
    })
  })(i)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;let&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; was introduced in ES2015 and is the new preferred way to declare variables that will be reassigned later. Trying to redeclare a variable again will throw an error. It is block-scoped so that using it in a loop will keep it scoped to the iteration.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (let i = 0; i &amp;lt; 10; i++) {
  setTimeout(() =&amp;gt; {
    // logs 0, 1, 2, 3, ...
    console.log(i)
  })
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;const&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; was introduced in ES2015 and is the new preferred default way to declare all variables if they won&#39;t be reassigned later, even for objects that will be mutated (as long as the reference to the object does not change). It is block-scoped and cannot be reassigned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const myObject = {}
myObject.prop = &quot;hello!&quot; // No error
myObject = &quot;hello&quot; // Error
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;All declarations are hoisted to the top of their scope.&lt;/li&gt; 
 &lt;li&gt;However, with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; there is a concept called the temporal dead zone (TDZ). While the declarations are still hoisted, there is a period between entering scope and being declared where they cannot be accessed.&lt;/li&gt; 
 &lt;li&gt;Show a common issue with using &lt;code&gt;var&lt;/code&gt; and how &lt;code&gt;let&lt;/code&gt; can solve it, as well as a solution that keeps &lt;code&gt;var&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;var&lt;/code&gt; should be avoided whenever possible and prefer &lt;code&gt;const&lt;/code&gt; as the default declaration statement for all variables unless they will be reassigned later, then use &lt;code&gt;let&lt;/code&gt; if so.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://wesbos.com/let-vs-const/&quot;&gt;&lt;code&gt;let&lt;/code&gt; vs &lt;code&gt;const&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is event delegation and why is it useful? Can you show an example of how to use it?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Event delegation is a technique of delegating events to a single common ancestor. Due to event bubbling, events &quot;bubble&quot; up the DOM tree by executing any handlers progressively on each ancestor element up to the root that may be listening to it.&lt;/p&gt; 
&lt;p&gt;DOM events provide useful information about the element that initiated the event via &lt;code&gt;Event.target&lt;/code&gt;. This allows the parent element to handle behavior as though the target element was listening to the event, rather than all children of the parent or the parent itself.&lt;/p&gt; 
&lt;p&gt;This provides two main benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It increases performance and reduces memory consumption by only needing to register a single event listener to handle potentially thousands of elements.&lt;/li&gt; 
 &lt;li&gt;If elements are dynamically added to the parent, there is no need to register new event listeners for them.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Instead of:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.querySelectorAll(&quot;button&quot;).forEach(button =&amp;gt; {
  button.addEventListener(&quot;click&quot;, handleButtonClick)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Event delegation involves using a condition to ensure the child target matches our desired element:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.addEventListener(&quot;click&quot;, e =&amp;gt; {
  if (e.target.closest(&quot;button&quot;)) {
    handleButtonClick()
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The difference between event bubbling and capturing&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://davidwalsh.name/event-delegate&quot;&gt;Event Delegation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState&lt;/code&gt;?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The callback function is invoked when &lt;code&gt;setState&lt;/code&gt; has finished and the component gets rendered. Since &lt;code&gt;setState&lt;/code&gt; is asynchronous, the callback function is used for any post action.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;setState({ name: &quot;sudheer&quot; }, () =&amp;gt; {
  console.log(&quot;The name has updated and component re-rendered&quot;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The callback function is invoked after &lt;code&gt;setState&lt;/code&gt; finishes and is used for any post action.&lt;/li&gt; 
 &lt;li&gt;It is recommended to use lifecycle method rather this callback function.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/react-component.html#setstate&quot;&gt;React docs on &lt;code&gt;setState&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between an expression and a statement in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;There are two main syntactic categories in JavaScript: expressions and statements. A third one is both together, referred to as an expression statement. They are roughly summarized as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Expression&lt;/strong&gt;: produces a value&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Statement&lt;/strong&gt;: performs an action&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Expression statement&lt;/strong&gt;: produces a value and performs an action&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A general rule of thumb:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;If you can print it or assign it to a variable, it’s an expression. If you can’t, it’s a statement.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h5&gt;Statements&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let x = 0

function declaration() {}

if (true) {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Statements appear as instructions that do something but don&#39;t produce values.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Assign `x` to the absolute value of `y`.
var x
if (y &amp;gt;= 0) {
  x = y
} else {
  x = -y
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The only expression in the above code is &lt;code&gt;y &amp;gt;= 0&lt;/code&gt; which produces a value, either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. A value is not produced by other parts of the code.&lt;/p&gt; 
&lt;h5&gt;Expressions&lt;/h5&gt; 
&lt;p&gt;Expressions produce a value. They can be passed around to functions because the interpreter replaces them with the value they resolve to.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;5 + 5 // =&amp;gt; 10

lastCharacter(&quot;input&quot;) // =&amp;gt; &quot;t&quot;

true === true // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Expression statements&lt;/h5&gt; 
&lt;p&gt;There is an equivalent version of the set of statements used before as an expression using the conditional operator:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Assign `x` as the absolute value of `y`.
var x = y &amp;gt;= 0 ? y : -y
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is both an expression and a statement, because we are declaring a variable &lt;code&gt;x&lt;/code&gt; (statement) as an evaluation (expression).&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Function declarations vs function expressions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/12703214/javascript-difference-between-a-statement-and-an-expression&quot;&gt;What is the difference between a statement and an expression?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are truthy and falsy values in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A value is either truthy or falsy depending on how it is evaluated in a Boolean context. Falsy means false-like and truthy means true-like. Essentially, they are values that are coerced to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; when performing certain operations.&lt;/p&gt; 
&lt;p&gt;There are 6 falsy values in JavaScript. They are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&quot;&quot;&lt;/code&gt; (empty string)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;0&lt;/code&gt; (both &lt;code&gt;+0&lt;/code&gt; and &lt;code&gt;-0&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Every other value is considered truthy.&lt;/p&gt; 
&lt;p&gt;A value&#39;s truthiness can be examined by passing it into the &lt;code&gt;Boolean&lt;/code&gt; function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Boolean(&quot;&quot;) // false
Boolean([]) // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is a shortcut for this using the logical NOT &lt;code&gt;!&lt;/code&gt; operator. Using &lt;code&gt;!&lt;/code&gt; once will convert a value to its inverse boolean equivalent (i.e. not false is true), and &lt;code&gt;!&lt;/code&gt; once more will convert back, thus effectively converting the value to a boolean.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;!!&quot;&quot; // false
!![] // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Glossary/Truthy&quot;&gt;Truthy on MDN&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;Falsy on MDN&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Generate an array, containing the Fibonacci sequence, up until the nth term.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Initialize an empty array of length &lt;code&gt;n&lt;/code&gt;. Use &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; to add values into the array, using the sum of the last two values, except for the first two.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fibonacci = n =&amp;gt;
  [...Array(n)].reduce(
    (acc, val, i) =&amp;gt; acc.concat(i &amp;gt; 1 ? acc[i - 1] + acc[i - 2] : i),
    []
  )
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Chalarangelo/30-seconds-of-code/blob/master/snippets_archive/fibonacciUntilNum.md&quot;&gt;Similar problem&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What does &lt;code&gt;0.1 + 0.2 === 0.3&lt;/code&gt; evaluate to?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;It evaluates to &lt;code&gt;false&lt;/code&gt; because JavaScript uses the IEEE 754 standard for Math and it makes use of 64-bit floating numbers. This causes precision errors when doing decimal calculations, in short, due to computers working in Base 2 while decimal is Base 10.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;0.1 + 0.2 // 0.30000000000000004
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A solution to this problem would be to use a function that determines if two numbers are approximately equal by defining an error margin (epsilon) value that the difference between two values should be less than.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const approxEqual = (n1, n2, epsilon = 0.0001) =&amp;gt; Math.abs(n1 - n2) &amp;lt; epsilon
approxEqual(0.1 + 0.2, 0.3) // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;A simple solution to this problem&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Chalarangelo/30-seconds-of-code#approximatelyequal&quot;&gt;A simple helper function to check equality&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://blog.blakesimpson.co.uk/read/61-fix-0-1-0-2-0-300000004-in-javascript&quot;&gt;Fix &quot;0.1 + 0.2 = 0.300000004&quot; in JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between the array methods &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;forEach()&lt;/code&gt;?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Both methods iterate through the elements of an array. &lt;code&gt;map()&lt;/code&gt; maps each element to a new element by invoking the callback function on each element and returning a new array. On the other hand, &lt;code&gt;forEach()&lt;/code&gt; invokes the callback function for each element but does not return a new array. &lt;code&gt;forEach()&lt;/code&gt; is generally used when causing a side effect on each iteration, whereas &lt;code&gt;map()&lt;/code&gt; is a common functional programming technique.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;code&gt;forEach()&lt;/code&gt; if you need to iterate over an array and cause mutations to the elements without needing to return values to generate a new array.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;map()&lt;/code&gt; is the right choice to keep data immutable where each value of the original array is mapped to a new array.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;MDN docs for forEach&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;MDN docs for map&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codeburst.io/javascript-map-vs-foreach-f38111822c0f&quot;&gt;JavaScript — Map vs. ForEach&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is short-circuit evaluation in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Short-circuit evaluation involves logical operations evaluating from left-to-right and stopping early.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;true || false
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the above sample using logical OR, JavaScript won&#39;t look at the second operand &lt;code&gt;false&lt;/code&gt;, because the expression evaluates to &lt;code&gt;true&lt;/code&gt; regardless. This is known as short-circuit evaluation.&lt;/p&gt; 
&lt;p&gt;This also works for logical AND.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;false &amp;amp;&amp;amp; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This means you can have an expression that throws an error if evaluated, and it won&#39;t cause issues.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;true || nonexistentFunction()
false &amp;amp;&amp;amp; nonexistentFunction()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This remains true for multiple operations because of left-to-right evaluation.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;true || nonexistentFunction() || window.nothing.wouldThrowError
true || window.nothing.wouldThrowError
true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A common use case for this behavior is setting default values. If the first operand is falsy the second operand will be evaluated.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const options = {}
const setting = options.setting || &quot;default&quot;
setting // &quot;default&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Another common use case is only evaluating an expression if the first operand is truthy.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Instead of:
addEventListener(&quot;click&quot;, e =&amp;gt; {
  if (e.target.closest(&quot;button&quot;)) {
    handleButtonClick(e)
  }
})

// You can take advantage of short-circuit evaluation:
addEventListener(
  &quot;click&quot;,
  e =&amp;gt; e.target.closest(&quot;button&quot;) &amp;amp;&amp;amp; handleButtonClick(e)
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the above case, if &lt;code&gt;e.target&lt;/code&gt; is not or does not contain an element matching the &lt;code&gt;&quot;button&quot;&lt;/code&gt; selector, the function will not be called. This is because the first operand will be falsy, causing the second operand to not be evaluated.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Logical operations do not produce a boolean unless the operand(s) evaluate to a boolean.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c&quot;&gt;JavaScript: What is short-circuit evaluation?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Are semicolons required in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Sometimes. Due to JavaScript&#39;s automatic semicolon insertion, the interpreter places semicolons after most statements. This means semicolons can be omitted in most cases.&lt;/p&gt; 
&lt;p&gt;However, there are some cases where they are required. They are not required at the beginning of a block, but are if they follow a line and:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The line starts with &lt;code&gt;[&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const previousLine = 3
;[1, 2, previousLine].map(n =&amp;gt; n * 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ol start=&quot;2&quot;&gt; 
 &lt;li&gt;The line starts with &lt;code&gt;(&lt;/code&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const previousLine = 3
;(function() {
  // ...
})()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the above cases, the interpreter does not insert a semicolon after &lt;code&gt;3&lt;/code&gt;, and therefore it will see the &lt;code&gt;3&lt;/code&gt; as attempting object property access or being invoked as a function, which will throw errors.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Semicolons are usually optional in JavaScript but have edge cases where they are required.&lt;/li&gt; 
 &lt;li&gt;If you don&#39;t use semicolons, tools like Prettier will insert semicolons for you in the places where they are required on save in a text editor to prevent errors.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What will the console log in this example?&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var foo = 1
var foobar = function() {
  console.log(foo)
  var foo = 2
}
foobar()
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Due to hoisting, the local variable &lt;code&gt;foo&lt;/code&gt; is declared before the &lt;code&gt;console.log&lt;/code&gt; method is called. This means the local variable &lt;code&gt;foo&lt;/code&gt; is passed as an argument to &lt;code&gt;console.log()&lt;/code&gt; instead of the global one declared outside of the function. However, since the value is not hoisted with the variable declaration, the output will be &lt;code&gt;undefined&lt;/code&gt;, not &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hoisting is JavaScript’s default behavior of moving declarations to the top&lt;/li&gt; 
 &lt;li&gt;Mention of &lt;code&gt;strict&lt;/code&gt; mode&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;MDN docs for hoisting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How does hoisting work in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Hoisting is a JavaScript mechanism where variable and function declarations are put into memory during the compile phase. This means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local.&lt;/p&gt; 
&lt;p&gt;However, the value is not hoisted with the declaration.&lt;/p&gt; 
&lt;p&gt;The following snippet:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(hoist)
var hoist = &quot;value&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;is equivalent to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var hoist
console.log(hoist)
hoist = &quot;value&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Therefore logging &lt;code&gt;hoist&lt;/code&gt; outputs &lt;code&gt;undefined&lt;/code&gt; to the console, not &lt;code&gt;&quot;value&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Hoisting also allows you to invoke a function declaration before it appears to be declared in a program.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;myFunction() // No error; logs &quot;hello&quot;
function myFunction() {
  console.log(&quot;hello&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But be wary of function expressions that are assigned to a variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;myFunction() // Error: `myFunction` is not a function
var myFunction = function() {
  console.log(&quot;hello&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Hoisting is JavaScript’s default behavior of moving declarations to the top&lt;/li&gt; 
 &lt;li&gt;Functions declarations are hoisted before variable declarations&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;MDN docs for hoisting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/understanding-hoisting-in-javascript&quot;&gt;Understanding Hoisting in JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In HTML, the attribute name is in all lowercase and is given a string invoking a function defined somewhere:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onclick=&quot;handleClick()&quot;&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In React, the attribute name is camelCase and are passed the function reference inside curly braces:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;button onClick={handleClick} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In HTML, &lt;code&gt;false&lt;/code&gt; can be returned to prevent default behavior, whereas in React &lt;code&gt;preventDefault&lt;/code&gt; has to be called explicitly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;console.log(&#39;The link was clicked.&#39;); return false&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function handleClick(e) {
  e.preventDefault()
  console.log(&quot;The link was clicked.&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;HTML uses lowercase, React uses camelCase.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/handling-events.html&quot;&gt;React docs on Handling Events&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the reason for wrapping the entire contents of a JavaScript source file in a function that is immediately invoked?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This technique is very common in JavaScript libraries. It creates a closure around the entire contents of the file which creates a private namespace and thereby helps avoid potential name clashes between different JavaScript modules and libraries. The function is immediately invoked so that the namespace (library name) is assigned the return value of the function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const myLibrary = (function() {
  var privateVariable = 2
  return {
    publicMethod: () =&amp;gt; privateVariable
  }
})()
privateVariable // ReferenceError
myLibrary.publicMethod() // 2
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Used among many popular JavaScript libraries&lt;/li&gt; 
 &lt;li&gt;Creates a private namespace&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;MDN docs for closures&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What does the following function return?&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function greet() {
  return
  {
    message: &quot;hello&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Because of JavaScript&#39;s automatic semicolon insertion (ASI), the compiler places a semicolon after &lt;code&gt;return&lt;/code&gt; keyword and therefore it returns &lt;code&gt;undefined&lt;/code&gt; without an error being thrown.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Automatic semicolon placement can lead to time-consuming bugs&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://2ality.com/2011/05/semicolon-insertion.html&quot;&gt;Automatic semicolon insertion in JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are inline conditional expressions?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Since a JSX element tree is one large expression, you cannot embed statements inside. Conditional expressions act as a replacement for statements to use inside the tree.&lt;/p&gt; 
&lt;p&gt;For example, this won&#39;t work:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function App({ messages, isVisible }) {
  return (
    &amp;lt;div&amp;gt;
      if (messages.length &amp;gt; 0) {
        &amp;lt;h2&amp;gt;You have {messages.length} unread messages.&amp;lt;/h2&amp;gt;
      } else {
        &amp;lt;h2&amp;gt;You have no unread messages.&amp;lt;/h2&amp;gt;
      }
      if (isVisible) {
        &amp;lt;p&amp;gt;I am visible.&amp;lt;/p&amp;gt;
      }
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Logical AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and the ternary &lt;code&gt;? :&lt;/code&gt; operator replace the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; statements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function App({ messages, isVisible }) {
  return (
    &amp;lt;div&amp;gt;
      {messages.length &amp;gt; 0 ? (
        &amp;lt;h2&amp;gt;You have {messages.length} unread messages.&amp;lt;/h2&amp;gt;
      ) : (
        &amp;lt;h2&amp;gt;You have no unread messages.&amp;lt;/h2&amp;gt;
      )}
      {isVisible &amp;amp;&amp;amp; &amp;lt;p&amp;gt;I am visible.&amp;lt;/p&amp;gt;}
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/conditional-rendering.html&quot;&gt;React docs on Conditional Rendering&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a key? What are the benefits of using it in lists?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Keys are a special string attribute that helps React identify which items have been changed, added or removed. They are used when rendering array elements to give them a stable identity. Each element&#39;s key must be unique (e.g. IDs from the data or indexes as a last resort).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const todoItems = todos.map(todo =&amp;gt; &amp;lt;li key={todo.id}&amp;gt;{todo.text}&amp;lt;/li&amp;gt;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Using indexes as keys is not recommended if the order of items may change, as it might negatively impact performance and may cause issues with component state.&lt;/li&gt; 
 &lt;li&gt;If you extract list items as a separate component then apply keys on the list component instead of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Keys give elements in a collection a stable identity and help React identify changes.&lt;/li&gt; 
 &lt;li&gt;You should avoid using indexes as keys if the order of items may change.&lt;/li&gt; 
 &lt;li&gt;You should lift the key up to the component, instead of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element, if you extract list items as components.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/lists-and-keys.html&quot;&gt;React docs on Lists and Keys&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between lexical scoping and dynamic scoping?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Lexical scoping refers to when the location of a function&#39;s definition determines which variables you have access to. On the other hand, dynamic scoping uses the location of the function&#39;s invocation to determine which variables are available.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lexical scoping is also known as static scoping.&lt;/li&gt; 
 &lt;li&gt;Lexical scoping in JavaScript allows for the concept of closures.&lt;/li&gt; 
 &lt;li&gt;Most languages use lexical scoping because it tends to promote source code that is more easily understood.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Mozilla Docs Closures &amp;amp; Lexical Scoping&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Create a function that masks a string of characters with &lt;code&gt;#&lt;/code&gt; except for the last four (4) characters.&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;mask(&quot;123456789&quot;) // &quot;#####6789&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;There are many ways to solve this problem, this is just one one of them.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Using &lt;code&gt;String.prototype.slice()&lt;/code&gt; we can grab the last 4 characters of the string by passing &lt;code&gt;-4&lt;/code&gt; as an argument. Then, using &lt;code&gt;String.prototype.padStart()&lt;/code&gt;, we can pad the string to the original length with the repeated mask character.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mask = (str, maskChar = &quot;#&quot;) =&amp;gt;
  str.slice(-4).padStart(str.length, maskChar)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Short, one-line functional solutions to problems should be preferred provided they are efficient&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the output of the following code?&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const a = [1, 2, 3]
const b = [1, 2, 3]
const c = &quot;1,2,3&quot;

console.log(a == c)
console.log(a == b)
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The first &lt;code&gt;console.log&lt;/code&gt; outputs &lt;code&gt;true&lt;/code&gt; because JavaScript&#39;s compiler performs type conversion and therefore it compares to strings by their value. On the other hand, the second &lt;code&gt;console.log&lt;/code&gt; outputs &lt;code&gt;false&lt;/code&gt; because Arrays are Objects and Objects are compared by reference.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;JavaScript performs automatic type conversion&lt;/li&gt; 
 &lt;li&gt;Objects are compared by reference&lt;/li&gt; 
 &lt;li&gt;Primitives are compared by value&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18&quot;&gt;JavaScript Value vs Reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How does prototypal inheritance differ from classical inheritance?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In the classical inheritance paradigm, object instances inherit their properties and functions from a class, which acts as a blueprint for the object. Object instances are typically created using a constructor and the &lt;code&gt;new&lt;/code&gt; keyword.&lt;/p&gt; 
&lt;p&gt;In the prototypal inheritance paradigm, object instances inherit directly from other objects and are typically created using factory functions or &lt;code&gt;Object.create()&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&quot;&gt;MDN docs for inheritance and the prototype chain&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a MIME type and what is it used for?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;code&gt;MIME&lt;/code&gt; is an acronym for &lt;code&gt;Multi-purpose Internet Mail Extensions&lt;/code&gt;. It is used as a standard way of classifying file types over the Internet.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;A &lt;code&gt;MIME type&lt;/code&gt; actually has two parts: a type and a subtype that are separated by a slash (/). For example, the &lt;code&gt;MIME type&lt;/code&gt; for Microsoft Word files is &lt;code&gt;application/msword&lt;/code&gt; (i.e., type is application and the subtype is msword).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&quot;&gt;MIME Type MDN&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are Promises?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The &lt;code&gt;Promise&lt;/code&gt; object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value. An example can be the following snippet, which after 100ms prints out the result string to the standard output. Also, note the catch, which can be used for error handling. &lt;code&gt;Promise&lt;/code&gt;s are chainable.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;new Promise((resolve, reject) =&amp;gt; {
  setTimeout(() =&amp;gt; {
    resolve(&quot;result&quot;)
  }, 100)
})
  .then(console.log)
  .catch(console.error)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Take a look into the other questions regarding &lt;code&gt;Promise&lt;/code&gt;s!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e772618&quot;&gt;Master the JavaScript Interview: What is a Promise?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are JavaScript data types?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The latest ECMAScript standard defines seven data types, six of them being primitive: &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Null&lt;/code&gt;, &lt;code&gt;Undefined&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt; and one non-primitive data type: &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mention of newly added &lt;code&gt;Symbol&lt;/code&gt; data type&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; are all of type &lt;code&gt;object&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Functions in JavaScript are objects with the capability of being callable&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures&quot;&gt;MDN docs for data types and data structures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-data-types-in-javascript&quot;&gt;Understanding Data Types in JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;NodeJS often uses a callback pattern where if an error is encountered during execution, this error is passed as the first argument to the callback. What are the advantages of this pattern?&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;fs.readFile(filePath, function(err, data) {
  if (err) {
    // handle the error, the return is important here
    // so execution stops here
    return console.log(err)
  }
  // use the data object
  console.log(data)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Advantages include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not needing to process data if there is no need to even reference it&lt;/li&gt; 
 &lt;li&gt;Having a consistent API leads to more adoption&lt;/li&gt; 
 &lt;li&gt;Ability to easily adapt a callback pattern that will lead to more maintainable code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As you can see from below example, the callback is called with null as its first argument if there is no error. However, if there is an error, you create an Error object, which then becomes the callback&#39;s only parameter. The callback function allows a user to easily know whether or not an error occurred.&lt;/p&gt; 
&lt;p&gt;This practice is also called the &lt;em&gt;Node.js error convention&lt;/em&gt;, and this kind of callback implementations are called &lt;em&gt;error-first callbacks&lt;/em&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var isTrue = function(value, callback) {
  if (value === true) {
    callback(null, &quot;Value was true.&quot;)
  } else {
    callback(new Error(&quot;Value is not true!&quot;))
  }
}

var callback = function(error, retval) {
  if (error) {
    console.log(error)
    return
  }
  console.log(retval)
}

isTrue(false, callback)
isTrue(true, callback)

/*
  { stack: [Getter/Setter],
    arguments: undefined,
    type: undefined,
    message: &#39;Value is not true!&#39; }
  Value was true.
*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;This is just a convention. However, you should stick to it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/&quot;&gt;The Node.js Way Understanding Error-First Callbacks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nodejitsu.com/articles/errors/what-are-the-error-conventions&quot;&gt;What are the error conventions?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a callback? Can you show an example using one?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Callbacks are functions passed as an argument to another function to be executed once an event has occurred or a certain task is complete, often used in asynchronous code. Callback functions are invoked later by a piece of code but can be declared on initialization without being invoked.&lt;/p&gt; 
&lt;p&gt;As an example, event listeners are asynchronous callbacks that are only executed when a specific event occurs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function onClick() {
  console.log(&quot;The user clicked on the page.&quot;)
}
document.addEventListener(&quot;click&quot;, onClick)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, callbacks can also be synchronous. The following &lt;code&gt;map&lt;/code&gt; function takes a callback function that is invoked synchronously for each iteration of the loop (array element).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const map = (arr, callback) =&amp;gt; {
  const result = []
  for (let i = 0; i &amp;lt; arr.length; i++) {
    result.push(callback(arr[i], i))
  }
  return result
}
map([1, 2, 3, 4, 5], n =&amp;gt; n * 2) // [2, 4, 6, 8, 10]
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Functions are first-class objects in JavaScript&lt;/li&gt; 
 &lt;li&gt;Callbacks vs Promises&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Callback_function&quot;&gt;MDN docs for callbacks&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In JavaScript, two values discretely represent nothing - &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;. The concrete difference between them is that &lt;code&gt;null&lt;/code&gt; is explicit, while &lt;code&gt;undefined&lt;/code&gt; is implicit. When a property does not exist or a variable has not been given a value, the value is &lt;code&gt;undefined&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; is set as the value to explicitly indicate “no value”. In essence, &lt;code&gt;undefined&lt;/code&gt; is used when the nothing is not known, and &lt;code&gt;null&lt;/code&gt; is used when the nothing is known.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;typeof undefined&lt;/code&gt; evaluates to &lt;code&gt;&quot;undefined&quot;&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;typeof null&lt;/code&gt; evaluates &lt;code&gt;&quot;object&quot;&lt;/code&gt;. However, it is still a primitive value and this is considered an implementation bug in JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;undefined == null&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null&quot;&gt;MDN docs for null&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined&quot;&gt;MDN docs for undefined&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Describe the different ways to create an object. When should certain ways be preferred over others?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h5&gt;Object literal&lt;/h5&gt; 
&lt;p&gt;Often used to store one occurrence of data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const person = {
  name: &quot;John&quot;,
  age: 50,
  birthday() {
    this.age++
  }
}
person.birthday() // person.age === 51
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Constructor&lt;/h5&gt; 
&lt;p&gt;Often used when you need to create multiple instances of an object, each with their own data that other instances of the class cannot affect. The &lt;code&gt;new&lt;/code&gt; operator must be used before invoking the constructor or the global object will be mutated.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Person(name, age) {
  this.name = name
  this.age = age
}
Person.prototype.birthday = function() {
  this.age++
}
const person1 = new Person(&quot;John&quot;, 50)
const person2 = new Person(&quot;Sally&quot;, 20)
person1.birthday() // person1.age === 51
person2.birthday() // person2.age === 21
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Factory function&lt;/h5&gt; 
&lt;p&gt;Creates a new object similar to a constructor, but can store private data using a closure. There is also no need to use &lt;code&gt;new&lt;/code&gt; before invoking the function or the &lt;code&gt;this&lt;/code&gt; keyword. Factory functions usually discard the idea of prototypes and keep all properties and methods as own properties of the object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createPerson = (name, age) =&amp;gt; {
  const birthday = () =&amp;gt; person.age++
  const person = { name, age, birthday }
  return person
}
const person = createPerson(&quot;John&quot;, 50)
person.birthday() // person.age === 51
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;Sets the prototype of the newly created object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const personProto = {
  birthday() {
    this.age++
  }
}
const person = Object.create(personProto)
person.age = 50
person.birthday() // person.age === 51
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A second argument can also be supplied to &lt;code&gt;Object.create()&lt;/code&gt; which acts as a descriptor for the new properties to be defined.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Object.create(personProto, {
  age: {
    value: 50,
    writable: true,
    enumerable: true
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Prototypes are objects that other objects inherit properties and methods from.&lt;/li&gt; 
 &lt;li&gt;Factory functions offer private properties and methods through a closure but increase memory usage as a tradeoff, while classes do not have private properties or methods but reduce memory impact by reusing a single prototype object.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between a parameter and an argument?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Parameters are the variable names of the function definition, while arguments are the values given to a function when it is invoked.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function myFunction(parameter1, parameter2) {
  console.log(arguments[0]) // &quot;argument1&quot;
}
myFunction(&quot;argument1&quot;, &quot;argument2&quot;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;arguments&lt;/code&gt; is an array-like object containing information about the arguments supplied to an invoked function.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;myFunction.length&lt;/code&gt; describes the arity of a function (how many parameters it has, regardless of how many arguments it is supplied).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Does JavaScript pass by value or by reference?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;JavaScript always passes by value. However, with objects, the value is a reference to the object.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Difference between pass-by-value and pass-by-reference&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18&quot;&gt;JavaScript Value vs Reference&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do you pass an argument to an event handler or callback?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;You can use an arrow function to wrap around an event handler and pass arguments, which is equivalent to calling &lt;code&gt;bind&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;button onClick={() =&amp;gt; this.handleClick(id)} /&amp;gt;
&amp;lt;button onClick={this.handleClick.bind(this, id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/handling-events.html&quot;&gt;React docs on Handling Events&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are fragments?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Fragments allow a React component to return multiple elements without a wrapper, by grouping the children without adding extra elements to the DOM. Fragments offer better performance, lower memory usage, a cleaner DOM and can help in dealing with certain CSS mechanisms (e.g. tables, Flexbox and Grid).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;render() {
  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  );
}

// Short syntax supported by Babel 7
render() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fragments group multiple elements returned from a component, without adding a DOM element around them.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/fragments.html&quot;&gt;React docs on Fragments&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Create a function &lt;code&gt;pipe&lt;/code&gt; that performs left-to-right function composition by returning a function that accepts one argument.&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const square = v =&amp;gt; v * v
const double = v =&amp;gt; v * 2
const addOne = v =&amp;gt; v + 1
const res = pipe(square, double, addOne)
res(3) // 19; addOne(double(square(3)))
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Gather all supplied arguments using the rest operator &lt;code&gt;...&lt;/code&gt; and return a unary function that uses &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; to run the value through the series of functions before returning the final value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const pipe = (...fns) =&amp;gt; x =&amp;gt; fns.reduce((v, fn) =&amp;gt; fn(v), x)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Function composition is the process of combining two or more functions to produce a new function.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-function-composition-20dfb109a1a0&quot;&gt;What is function composition?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the event loop in Node.js?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The event loop handles all async callbacks. Callbacks are queued in a loop, while other code runs, and will run one by one when the response for each one has been received.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The event loop allows Node.js to perform non-blocking I/O operations, despite the fact that JavaScript is single-threaded&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;Node.js docs on event loop, timers and process.nextTick()&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the only value not equal to itself in JavaScript?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; (Not-a-Number) is the only value not equal to itself when comparing with any of the comparison operators. &lt;code&gt;NaN&lt;/code&gt; is often the result of meaningless math computations, so two &lt;code&gt;NaN&lt;/code&gt; values make no sense to be considered equal.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The difference between &lt;code&gt;isNaN()&lt;/code&gt; and &lt;code&gt;Number.isNaN()&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;const isNaN = x =&amp;gt; x !== x&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN&quot;&gt;MDN docs for &lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contrast mutable and immutable values, and mutating vs non-mutating methods.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The two terms can be contrasted as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Mutable: subject to change&lt;/li&gt; 
 &lt;li&gt;Immutable: cannot change&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In JavaScript, objects are mutable while primitive values are immutable. This means operations performed on objects can change the original reference in some way, while operations performed on a primitive value cannot change the original value.&lt;/p&gt; 
&lt;p&gt;All &lt;code&gt;String.prototype&lt;/code&gt; methods do not have an effect on the original string and return a new string. On the other hand, while some methods of &lt;code&gt;Array.prototype&lt;/code&gt; do not mutate the original array reference and produce a fresh array, some cause mutations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const myString = &quot;hello!&quot;
myString.replace(&quot;!&quot;, &quot;&quot;) // returns a new string, cannot mutate the original value

const originalArray = [1, 2, 3]
originalArray.push(4) // mutates originalArray, now [1, 2, 3, 4]
originalArray.concat(4) // returns a new array, does not mutate the original
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;List of mutating and non-mutating array methods&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://lorenstewart.me/2017/01/22/javascript-array-methods-mutating-vs-non-mutating/&quot;&gt;Mutating vs non-mutating array methods&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is Big O Notation?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Big O notation is used in Computer Science to describe the time complexity of an algorithm. The best algorithms will execute the fastest and have the simplest complexity.&lt;/p&gt; 
&lt;p&gt;Algorithms don&#39;t always perform the same and may vary based on the data they are supplied. While in some cases they will execute quickly, in other cases they will execute slowly, even with the same number of elements to deal with.&lt;/p&gt; 
&lt;p&gt;In these examples, the base time is 1 element = &lt;code&gt;1ms&lt;/code&gt;.&lt;/p&gt; 
&lt;h5&gt;O(1)&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;arr[arr.length - 1]
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1000 elements = &lt;code&gt;1ms&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Constant time complexity. No matter how many elements the array has, it will theoretically take (excluding real-world variation) the same amount of time to execute.&lt;/p&gt; 
&lt;h5&gt;O(N)&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;arr.filter(fn)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1000 elements = &lt;code&gt;1000ms&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Linear time complexity. The execution time will increase linearly with the number of elements the array has. If the array has 1000 elements and the function takes 1ms to execute, 7000 elements will take 7ms to execute. This is because the function must iterate through all elements of the array before returning a result.&lt;/p&gt; 
&lt;h5&gt;O([1, N])&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;arr.some(fn)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1000 elements = &lt;code&gt;1ms &amp;lt;= x &amp;lt;= 1000ms&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The execution time varies depending on the data supplied to the function, it may return very early or very late. The best case here is O(1) and the worst case is O(N).&lt;/p&gt; 
&lt;h5&gt;O(NlogN)&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;arr.sort(fn)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1000 elements ~= &lt;code&gt;10000ms&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Browsers usually implement the quicksort algorithm for the &lt;code&gt;sort()&lt;/code&gt; method and the average time complexity of quicksort is O(NlgN). This is very efficient for large collections.&lt;/p&gt; 
&lt;h5&gt;O(N^2)&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (let i = 0; i &amp;lt; arr.length; i++) {
  for (let j = 0; j &amp;lt; arr.length; j++) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1000 elements = &lt;code&gt;1000000ms&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The execution time rises quadratically with the number of elements. Usually the result of nesting loops.&lt;/p&gt; 
&lt;h5&gt;O(N!)&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const permutations = arr =&amp;gt; {
  if (arr.length &amp;lt;= 2) return arr.length === 2 ? [arr, [arr[1], arr[0]]] : arr
  return arr.reduce(
    (acc, item, i) =&amp;gt;
      acc.concat(
        permutations([...arr.slice(0, i), ...arr.slice(i + 1)]).map(val =&amp;gt; [
          item,
          ...val
        ])
      ),
    []
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;1000 elements = &lt;code&gt;Infinity&lt;/code&gt; (practically) ms&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The execution time rises extremely fast with even just 1 addition to the array.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Be wary of nesting loops as execution time increases exponentially.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b&quot;&gt;Big O Notation in JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a pure function?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A pure function is a function that satisfies these two conditions:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Given the same input, the function returns the same output.&lt;/li&gt; 
 &lt;li&gt;The function doesn&#39;t cause side effects outside of the function&#39;s scope (i.e. mutate data outside the function or data supplied to the function).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Pure functions can mutate local data within the function as long as it satisfies the two conditions above.&lt;/p&gt; 
&lt;h5&gt;Pure&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const a = (x, y) =&amp;gt; x + y
const b = (arr, value) =&amp;gt; arr.concat(value)
const c = arr =&amp;gt; [...arr].sort((a, b) =&amp;gt; a - b)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Impure&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const a = (x, y) =&amp;gt; x + y + Math.random()
const b = (arr, value) =&amp;gt; (arr.push(value), arr)
const c = arr =&amp;gt; arr.sort((a, b) =&amp;gt; a - b)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pure functions are easier to reason about due to their reliability.&lt;/li&gt; 
 &lt;li&gt;All functions should be pure unless explicitly causing a side effect (i.e. &lt;code&gt;setInnerHTML&lt;/code&gt;).&lt;/li&gt; 
 &lt;li&gt;If a function does not return a value, it is an indication that it is causing side effects.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/&quot;&gt;Pure functions in JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is recursion and when is it useful?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Recursion is the repeated application of a process. In JavaScript, recursion involves functions that call themselves repeatedly until they reach a base condition. The base condition breaks out of the recursion loop because otherwise the function would call itself indefinitely. Recursion is very useful when working with data structures that contain nesting where the number of levels deep is unknown.&lt;/p&gt; 
&lt;p&gt;For example, you may have a thread of comments returned from a database that exist in a flat array but need to be nested for display in the UI. Each comment is either a top-level comment (no parent) or is a reply to a parent comment. Comments can be a reply of a reply of a reply... we have no knowledge beforehand the number of levels deep a comment may be. This is where recursion can help.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const nest = (items, id = null, link = &quot;parent_id&quot;) =&amp;gt;
  items
    .filter(item =&amp;gt; item[link] === id)
    .map(item =&amp;gt; ({ ...item, children: nest(items, item.id) }))

const comments = [
  { id: 1, parent_id: null, text: &quot;First reply to post.&quot; },
  { id: 2, parent_id: 1, text: &quot;First reply to comment #1.&quot; },
  { id: 3, parent_id: 1, text: &quot;Second reply to comment #1.&quot; },
  { id: 4, parent_id: 3, text: &quot;First reply to comment #3.&quot; },
  { id: 5, parent_id: 4, text: &quot;First reply to comment #4.&quot; },
  { id: 6, parent_id: null, text: &quot;Second reply to post.&quot; }
]

nest(comments)
/*
[
  { id: 1, parent_id: null, text: &quot;First reply to post.&quot;, children: [...] },
  { id: 6, parent_id: null, text: &quot;Second reply to post.&quot;, children: [] }
]
*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the above example, the base condition is met if &lt;code&gt;filter()&lt;/code&gt; returns an empty array. The chained &lt;code&gt;map()&lt;/code&gt; won&#39;t invoke the callback function which contains the recursive call, thereby breaking the loop.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Recursion is useful when working with data structures containing an unknown number of nested structures.&lt;/li&gt; 
 &lt;li&gt;Recursion must have a base condition to be met that breaks out of the loop or it will call itself indefinitely.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/25052/in-plain-english-what-is-recursion&quot;&gt;In plain English, what is recursion?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is memoization?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Memoization is the process of caching the output of function calls so that subsequent calls are faster. Calling the function again with the same input will return the cached output without needing to do the calculation again.&lt;/p&gt; 
&lt;p&gt;A basic implementation in JavaScript looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const memoize = fn =&amp;gt; {
  const cache = new Map()
  return value =&amp;gt; {
    const cachedResult = cache.get(value)
    if (cachedResult !== undefined) return cachedResult
    const result = fn(value)
    cache.set(value, result)
    return result
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The above technique returns a unary function even if the function can take multiple arguments.&lt;/li&gt; 
 &lt;li&gt;The first function call will be slower than usual because of the overhead created by checking if a cached result exists and setting a result before returning the value.&lt;/li&gt; 
 &lt;li&gt;Memoization increases performance on subsequent function calls but still needs to do work on the first call.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/implementing-memoization-in-javascript/&quot;&gt;Implementing memoization in JavaScript&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are refs in React? When should they be used?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Refs provide a way to access DOM nodes or React elements created in the render method. Refs should be used sparringly, but there are some good use cases for refs, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Managing focus, text selection, or media playback.&lt;/li&gt; 
 &lt;li&gt;Triggering imperative animations.&lt;/li&gt; 
 &lt;li&gt;Integrating with third-party DOM libraries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Refs are created using &lt;code&gt;React.createRef()&lt;/code&gt; method and attached to React elements via the &lt;code&gt;ref&lt;/code&gt; attribute. In order to use refs throughout the component, assign the &lt;code&gt;ref&lt;/code&gt; to the instance property within the constructor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.myRef = React.createRef()
  }

  render() {
    return &amp;lt;div ref={this.myRef} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refs can also be used in functional components with the help of closures.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Refs are used to return a reference to an element.&lt;/li&gt; 
 &lt;li&gt;Refs shouldn&#39;t be overused.&lt;/li&gt; 
 &lt;li&gt;You can create a ref using &lt;code&gt;React.createRef()&lt;/code&gt; and attach to elements via the &lt;code&gt;ref&lt;/code&gt; attribute.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/refs-and-the-dom.html&quot;&gt;React docs on Refs and the DOM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Explain the differences between imperative and declarative programming.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;These two types of programming can roughly be summarized as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Imperative: &lt;strong&gt;how&lt;/strong&gt; to achieve something&lt;/li&gt; 
 &lt;li&gt;Declarative: &lt;strong&gt;what&lt;/strong&gt; should be achieved&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A common example of declarative programming is CSS. The developer specifies CSS properties that describe what something should look like rather than how to achieve it. The &quot;how&quot; is abstracted away by the browser.&lt;/p&gt; 
&lt;p&gt;On the other hand, imperative programming involves the steps required to achieve something. In JavaScript, the differences can be contrasted like so:&lt;/p&gt; 
&lt;h5&gt;Imperative&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [1, 2, 3, 4, 5]
const numbersDoubled = []
for (let i = 0; i &amp;lt; numbers.length; i++) {
  numbersDoubled[i] = numbers[i] * 2
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We manually loop over the numbers of the array and assign the new index as the number doubled.&lt;/p&gt; 
&lt;h5&gt;Declarative&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [1, 2, 3, 4, 5]
const numbersDoubled = numbers.map(n =&amp;gt; n * 2)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;We declare that the new array is mapped to a new one where each value is doubled.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Declarative programming often works with functions and expressions. Imperative programming frequently uses statements and relies on low-level features that cause mutations, while declarative programming has a strong focus on abstraction and purity.&lt;/li&gt; 
 &lt;li&gt;Declarative programming is more terse and easier to process at a glance.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2&quot;&gt;Declarative vs Imperative Programming&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is functional programming?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Functional programming is a paradigm in which programs are built in a declarative manner using pure functions that avoid shared state and mutable data. Functions that always return the same value for the same input and don&#39;t produce side effects are the pillar of functional programming. Many programmers consider this to be the best approach to software development as it reduces bugs and cognitive load.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cleaner, more concise development experience&lt;/li&gt; 
 &lt;li&gt;Simple function composition&lt;/li&gt; 
 &lt;li&gt;Features of JavaScript that enable functional programming (&lt;code&gt;.map&lt;/code&gt;, &lt;code&gt;.reduce&lt;/code&gt; etc.)&lt;/li&gt; 
 &lt;li&gt;JavaScript is multi-paradigm programming language (Object-Oriented Programming and Functional Programming live in harmony)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hackernoon.com/javascript-and-functional-programming-an-introduction-286aa625e26d&quot;&gt;Javascript and Functional Programming: An Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0&quot;&gt;Master the JavaScript Interview: What is Functional Programming?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are portals in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Portal are the recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;ReactDOM.createPortal(child, container)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The first argument (&lt;code&gt;child&lt;/code&gt;) is any renderable React child, such as an element, string, or fragment. The second argument (&lt;code&gt;container&lt;/code&gt;) is a DOM element.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/portals.html&quot;&gt;React docs on Portals&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is event-driven programming?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Event-driven programming is a paradigm that involves building applications that send and receive events. When the program emits events, the program responds by running any callback functions that are registered to that event and context, passing in associated data to the function. With this pattern, events can be emitted into the wild without throwing errors even if no functions are subscribed to it.&lt;/p&gt; 
&lt;p&gt;A common example of this is the pattern of elements listening to DOM events such as &lt;code&gt;click&lt;/code&gt; and &lt;code&gt;mouseenter&lt;/code&gt;, where a callback function is run when the event occurs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.addEventListener(&quot;click&quot;, function(event) {
  // This callback function is run when the user
  // clicks on the document.
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Without the context of the DOM, the pattern may look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const hub = createEventHub()
hub.on(&quot;message&quot;, function(data) {
  console.log(`${data.username} said ${data.text}`)
})
hub.emit(&quot;message&quot;, {
  username: &quot;John&quot;,
  text: &quot;Hello?&quot;
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With this implementation, &lt;code&gt;on&lt;/code&gt; is the way to &lt;em&gt;subscribe&lt;/em&gt; to an event, while &lt;code&gt;emit&lt;/code&gt; is the way to &lt;em&gt;publish&lt;/em&gt; the event.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Follows a publish-subscribe pattern.&lt;/li&gt; 
 &lt;li&gt;Responds to events that occur by running any callback functions subscribed to the event.&lt;/li&gt; 
 &lt;li&gt;Show how to create a simple pub-sub implementation with JavaScript.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Overview_of_Events_and_Handlers&quot;&gt;MDN docs on Events and Handlers&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/understanding-node-js-event-driven-architecture-223292fcbc2d&quot;&gt;Understanding Node.js event-driven architecture&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is context?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Context provides a way to pass data through the component tree without having to pass props down manually at every level. For example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { Provider, Consumer } = React.createContext(defaultValue)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Context provides a way to pass data through a tree of React components, without having to manually pass props.&lt;/li&gt; 
 &lt;li&gt;Context is designed to share data that is considered &lt;em&gt;global&lt;/em&gt; for a tree of React components.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;React docs on Context&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Explain the difference between a static method and an instance method.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Static methods belong to a class and don&#39;t act on instances, while instance methods belong to the class prototype which is inherited by all instances of the class and acts on them.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Array.isArray // static method of Array
Array.prototype.push // instance method of Array
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case, the &lt;code&gt;Array.isArray&lt;/code&gt; method does not make sense as an instance method of arrays because we already know the value is an array when working with it.&lt;/p&gt; 
&lt;p&gt;Instance methods could technically work as static methods, but provide terser syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const arr = [1, 2, 3]
arr.push(4)
Array.push(arr, 4)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;How to create static and instance methods with ES2015 class syntax&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;Classes on MDN&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a closure? Can you give a useful example of one?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A closure is a function defined inside another function and has access to its lexical scope even when it is executing outside its lexical scope. The closure has access to variables in three scopes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Variables declared in its own scope&lt;/li&gt; 
 &lt;li&gt;Variables declared in the scope of the parent function&lt;/li&gt; 
 &lt;li&gt;Variables declared in the global scope&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In JavaScript, all functions are closures because they have access to the outer scope, but most functions don&#39;t utilise the usefulness of closures: the persistence of state. Closures are also sometimes called stateful functions because of this.&lt;/p&gt; 
&lt;p&gt;In addition, closures are the only way to store private data that can&#39;t be accessed from the outside in JavaScript. They are the key to the UMD (Universal Module Definition) pattern, which is frequently used in libraries that only expose a public API but keep the implementation details private, preventing name collisions with other libraries or the user&#39;s own code.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Closures are useful because they let you associate data with a function that operates on that data.&lt;/li&gt; 
 &lt;li&gt;A closure can substitute an object with only a single method.&lt;/li&gt; 
 &lt;li&gt;Closures can be used to emulate private properties and methods.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;MDN docs for closures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36&quot;&gt;What is a closure&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8&quot;&gt;I never understood JavaScript closures&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the &lt;code&gt;this&lt;/code&gt; keyword and how does it work?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword is an object that represents the context of an executing function. Regular functions can have their &lt;code&gt;this&lt;/code&gt; value changed with the methods &lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;bind()&lt;/code&gt;. Arrow functions implicitly bind &lt;code&gt;this&lt;/code&gt; so that it refers to the context of its lexical environment, regardless of whether or not its context is set explicitly with &lt;code&gt;call()&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Here are some common examples of how &lt;code&gt;this&lt;/code&gt; works:&lt;/p&gt; 
&lt;h5&gt;Object literals&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; refers to the object itself inside regular functions if the object precedes the invocation of the function.&lt;/p&gt; 
&lt;p&gt;Properties set as &lt;code&gt;this&lt;/code&gt; do not refer to the object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var myObject = {
  property: this,
  regularFunction: function() {
    return this
  },
  arrowFunction: () =&amp;gt; {
    return this
  },
  iife: (function() {
    return this
  })()
}
myObject.regularFunction() // myObject
myObject[&quot;regularFunction&quot;]() // my Object

myObject.property // NOT myObject; lexical `this`
myObject.arrowFunction() // NOT myObject; lexical `this`
myObject.iife // NOT myObject; lexical `this`
const regularFunction = myObject.regularFunction
regularFunction() // NOT myObject; lexical `this`
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Event listeners&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; refers to the element listening to the event.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.body.addEventListener(&quot;click&quot;, function() {
  console.log(this) // document.body
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Constructors&lt;/h5&gt; 
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; refers to the newly created object.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class Example {
  constructor() {
    console.log(this) // myExample
  }
}
const myExample = new Example()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Manual&lt;/h5&gt; 
&lt;p&gt;With &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;apply()&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; refers to the object passed as the first argument.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var myFunction = function() {
  return this
}
myFunction.call({ customThis: true }) // { customThis: true }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Unwanted &lt;code&gt;this&lt;/code&gt;&lt;/h5&gt; 
&lt;p&gt;Because &lt;code&gt;this&lt;/code&gt; can change depending on the scope, it can have unexpected values when using regular functions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var obj = {
  arr: [1, 2, 3],
  doubleArr() {
    return this.arr.map(function(value) {
      // this is now this.arr
      return this.double(value)
    })
  },
  double() {
    return value * 2
  }
}
obj.doubleArr() // Uncaught TypeError: this.double is not a function
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;In non-strict mode, global &lt;code&gt;this&lt;/code&gt; is the global object (&lt;code&gt;window&lt;/code&gt; in browsers), while in strict mode global &lt;code&gt;this&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Function.prototype.call&lt;/code&gt; and &lt;code&gt;Function.prototype.apply&lt;/code&gt; set the &lt;code&gt;this&lt;/code&gt; context of an executing function as the first argument, with &lt;code&gt;call&lt;/code&gt; accepting a variadic number of arguments thereafter, and &lt;code&gt;apply&lt;/code&gt; accepting an array as the second argument which are fed to the function in a variadic manner.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt; returns a new function that enforces the &lt;code&gt;this&lt;/code&gt; context as the first argument which cannot be changed by other functions.&lt;/li&gt; 
 &lt;li&gt;If a function requires its &lt;code&gt;this&lt;/code&gt; context to be changed based on how it is called, you must use the &lt;code&gt;function&lt;/code&gt; keyword. Use arrow functions when you want &lt;code&gt;this&lt;/code&gt; to be the surrounding (lexical) context.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt; on MDN&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the &lt;code&gt;children&lt;/code&gt; prop?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;code&gt;children&lt;/code&gt; is part of the props object passed to components that allows components to be passed as data to other components, providing the ability to compose components cleanly. There are a number of methods available in the React API to work with this prop, such as &lt;code&gt;React.Children.map&lt;/code&gt;, &lt;code&gt;React.Children.forEach&lt;/code&gt;, &lt;code&gt;React.Children.count&lt;/code&gt;, &lt;code&gt;React.Children.only&lt;/code&gt; and &lt;code&gt;React.Children.toArray&lt;/code&gt;. A simple usage example of the children prop is as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function GenericBox({ children }) {
  return &amp;lt;div className=&quot;container&quot;&amp;gt;{children}&amp;lt;/div&amp;gt;
}

function App() {
  return (
    &amp;lt;GenericBox&amp;gt;
      &amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;World&amp;lt;/span&amp;gt;
    &amp;lt;/GenericBox&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Children is a prop that allows components to be passed as data to other components.&lt;/li&gt; 
 &lt;li&gt;The React API provides methods to work with this prop.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/jsx-in-depth.html#children-in-jsx&quot;&gt;React docs on Children&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Which is the preferred option between callback refs and findDOMNode()?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Callback refs are preferred over the &lt;code&gt;findDOMNode()&lt;/code&gt; API, due to the fact that &lt;code&gt;findDOMNode()&lt;/code&gt; prevents certain improvements in React in the future.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Legacy approach using findDOMNode()
class MyComponent extends Component {
  componentDidMount() {
    findDOMNode(this).scrollIntoView()
  }

  render() {
    return &amp;lt;div /&amp;gt;
  }
}

// Recommended approach using callback refs
class MyComponent extends Component {
  componentDidMount() {
    this.node.scrollIntoView()
  }

  render() {
    return &amp;lt;div ref={node =&amp;gt; (this.node = node)} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Callback refs are preferred over &lt;code&gt;findDOMNode()&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/refs-and-the-dom.html#exposing-dom-refs-to-parent-components&quot;&gt;React docs on Refs and the DOM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the purpose of JavaScript UI libraries/frameworks like React, Vue, Angular, Hyperapp, etc?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The main purpose is to avoid manipulating the DOM directly and keep the state of an application in sync with the UI easily. Additionally, they provide the ability to create components that can be reused when they have similar functionality with minor differences, avoiding duplication which would require multiple changes whenever the structure of a component which is reused in multiple places needs to be updated.&lt;/p&gt; 
&lt;p&gt;When working with DOM manipulation libraries like jQuery, the data of an application is generally kept in the DOM itself, often as class names or &lt;code&gt;data&lt;/code&gt; attributes. Manipulating the DOM to update the UI involves many extra steps and can introduce subtle bugs over time. Keeping the state separate and letting a framework handle the UI updates when the state changes reduces cognitive load. Saying you want the UI to look a certain way when the state is a certain value is the declarative way of creating an application, instead of the imperative way of manually updating the UI to reflect the new state.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The virtual DOM is a representation of the real DOM tree in the form of plain objects, which allows a library to write code as if the entire document is thrown away and rebuilt on each change, while the real DOM only updates what needs to be changed. Comparing the new virtual DOM against the previous one leads to high efficiency as changing real DOM nodes is costly compared to recalculating the virtual DOM.&lt;/li&gt; 
 &lt;li&gt;JSX is an extension to JavaScript that provides XML-like syntax to create virtual DOM objects which is transformed to function calls by a transpiler. It simplifies control flow (if statements/ternary expressions) compared to tagged template literals.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hyperapp/hyperapp#view&quot;&gt;Virtual DOM in Hyperapp&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What does &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; do and what are some of the key benefits to using it?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Including &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; at the beginning of your JavaScript source file enables strict mode, which enforces more strict parsing and error handling of JavaScript code. It is considered a good practice and offers a lot of benefits, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Easier debugging due to eliminating silent errors.&lt;/li&gt; 
 &lt;li&gt;Disallows variable redefinition.&lt;/li&gt; 
 &lt;li&gt;Prevents accidental global variables.&lt;/li&gt; 
 &lt;li&gt;Oftentimes provides increased performance over identical code that is not running in strict mode.&lt;/li&gt; 
 &lt;li&gt;Simplifies &lt;code&gt;eval()&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Helps make JavaScript more secure.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Eliminates &lt;code&gt;this&lt;/code&gt; coercion, throwing an error when &lt;code&gt;this&lt;/code&gt; references a value of &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Throws an error on invalid usage of &lt;code&gt;delete&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Prohibits some syntax likely to be defined in future versions of ECMAScript&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;MDN docs for strict mode&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How can you avoid callback hells?&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;getData(function(a) {
  getMoreData(a, function(b) {
    getMoreData(b, function(c) {
      getMoreData(c, function(d) {
        getMoreData(d, function(e) {
          // ...
        })
      })
    })
  })
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Refactoring the functions to return promises and using &lt;code&gt;async/await&lt;/code&gt; is usually the best option. Instead of supplying the functions with callbacks that cause deep nesting, they return a promise that can be &lt;code&gt;await&lt;/code&gt;ed and will be resolved once the data has arrived, allowing the next line of code to be evaluated in a sync-like fashion.&lt;/p&gt; 
&lt;p&gt;The above code can be restructured like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function asyncAwaitVersion() {
  const a = await getData()
  const b = await getMoreData(a)
  const c = await getMoreData(b)
  const d = await getMoreData(c)
  const e = await getMoreData(d)
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are lots of ways to solve the issue of callback hells:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modularization: break callbacks into independent functions&lt;/li&gt; 
 &lt;li&gt;Use a control flow library, like async&lt;/li&gt; 
 &lt;li&gt;Use generators with Promises&lt;/li&gt; 
 &lt;li&gt;Use async/await (from v7 on)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;As an efficient JavaScript developer, you have to avoid the constantly growing indentation level, produce clean and readable code and be able to handle complex flows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://stackabuse.com/avoiding-callback-hell-in-node-js/&quot;&gt;Avoiding Callback Hell in Node.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.hellojs.org/asynchronous-javascript-from-callback-hell-to-async-and-await-9b9ceb63c8e8&quot;&gt;Asynchronous JavaScript: From Callback Hell to Async and Await&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a virtual DOM and why is it used in libraries/frameworks?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The virtual DOM (VDOM) is a representation of the real DOM in the form of plain JavaScript objects. These objects have properties to describe the real DOM nodes they represent: the node name, its attributes, and child nodes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;counter&quot;&amp;gt;
  &amp;lt;h1&amp;gt;0&amp;lt;/h1&amp;gt;
  &amp;lt;button&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;+&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above markup&#39;s virtual DOM representation might look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  nodeName: &quot;div&quot;,
  attributes: { class: &quot;counter&quot; },
  children: [
    {
      nodeName: &quot;h1&quot;,
      attributes: {},
      children: [0]
    },
    {
      nodeName: &quot;button&quot;,
      attributes: {},
      children: [&quot;-&quot;]
    },
    {
      nodeName: &quot;button&quot;,
      attributes: {},
      children: [&quot;+&quot;]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The library/framework uses the virtual DOM as a means to improve performance. When the state of an application changes, the real DOM needs to be updated to reflect it. However, changing real DOM nodes is costly compared to recalculating the virtual DOM. The previous virtual DOM can be compared to the new virtual DOM very quickly in comparison.&lt;/p&gt; 
&lt;p&gt;Once the changes between the old VDOM and new VDOM have been calculated by the diffing engine of the framework, the real DOM can be patched efficiently in the least time possible to match the new state of the application.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Why accessing the DOM can be so costly.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/&quot;&gt;The difference between Virtual DOM and DOM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do you ensure methods have the correct &lt;code&gt;this&lt;/code&gt; context in React component classes?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In JavaScript classes, the methods are not bound by default. This means that their &lt;code&gt;this&lt;/code&gt; context can be changed (in the case of an event handler, to the element that is listening to the event) and will not refer to the component instance. To solve this, &lt;code&gt;Function.prototype.bind()&lt;/code&gt; can be used to enforce the &lt;code&gt;this&lt;/code&gt; context as the component instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;constructor(props) {
  super(props);
  this.handleClick = this.handleClick.bind(this);
}

handleClick() {
  // Perform some logic
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;bind&lt;/code&gt; approach can be verbose and requires defining a &lt;code&gt;constructor&lt;/code&gt;, so the new public class fields syntax is generally preferred:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;handleClick = () =&amp;gt; {
  console.log(&#39;this is:&#39;, this);
}

render() {
  return (
    &amp;lt;button onClick={this.handleClick}&amp;gt;
      Click me
    &amp;lt;/button&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can also use an inline arrow function, because lexical &lt;code&gt;this&lt;/code&gt; (referring to the component instance) is preserved:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;button onClick={e =&amp;gt; this.handleClick(e)}&amp;gt;Click me&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that extra re-rendering can occur using this technique because a new function reference is created on render, which gets passed down to child components and breaks &lt;code&gt;shouldComponentUpdate&lt;/code&gt; / &lt;code&gt;PureComponent&lt;/code&gt; shallow equality checks to prevent unnecessary re-renders. In cases where performance is important, it is preferred to go with &lt;code&gt;bind&lt;/code&gt; in the constructor, or the public class fields syntax approach, because the function reference remains constant.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can either bind methods to the component instance context in the constructor, use public class fields syntax, or use inline arrow functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/handling-events.html&quot;&gt;React docs on Handling Events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/faq-functions.html#how-do-i-bind-a-function-to-a-component-instance&quot;&gt;React docs on Passing Functions to Components&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;React&lt;/h2&gt; 
&lt;h3&gt;What is a stateless component?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A stateless component is a component whose behavior does not depend on its state. Stateless components can be either functional or class components. Stateless functional components are easier to maintain and test since they are guaranteed to produce the same output given the same props. Stateless functional components should be preferred when lifecycle hooks don&#39;t need to be used.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stateless components are independent of their state.&lt;/li&gt; 
 &lt;li&gt;Stateless components can be either class or functional components.&lt;/li&gt; 
 &lt;li&gt;Stateless functional components avoid the &lt;code&gt;this&lt;/code&gt; keyword altogether.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/state-and-lifecycle.html&quot;&gt;React docs on State and Lifecycle&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a stateful component in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A stateful component is a component whose behavior depends on its state. This means that two separate instances of the component if given the same props will not necessarily render the same output, unlike pure function components.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Stateful class component
class App extends Component {
  constructor(props) {
    super(props)
    this.state = { count: 0 }
  }
  render() {
    // ...
  }
}

// Stateful function component
function App() {
  const [count, setCount] = useState(0)
  return // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Stateful components have internal state that they depend on.&lt;/li&gt; 
 &lt;li&gt;Stateful components are class components or function components that use stateful Hooks.&lt;/li&gt; 
 &lt;li&gt;Stateful components have their state initialized in the constructor or with &lt;code&gt;useState()&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/state-and-lifecycle.html&quot;&gt;React docs on State and Lifecycle&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do you write comments inside a JSX tree in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Comments must be wrapped inside curly braces &lt;code&gt;{}&lt;/code&gt; and use the &lt;code&gt;/* */&lt;/code&gt; syntax.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const tree = (
  &amp;lt;div&amp;gt;
    {/* Comment */}
    &amp;lt;p&amp;gt;Text&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between an element and a component in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;An element is a plain JavaScript object that represents a DOM node or component. Elements are pure and never mutated, and are cheap to create.&lt;/p&gt; 
&lt;p&gt;A component is a function or class. Components can have state and take props as input and return an element tree as output (although they can represent generic containers or wrappers and don&#39;t necessarily have to emit DOM). Components can initiate side effects in lifecycle methods (e.g. AJAX requests, DOM mutations, interfacing with 3rd party libraries) and may be expensive to create.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Component = () =&amp;gt; &quot;Hello&quot;
const componentElement = &amp;lt;Component /&amp;gt;
const domNodeElement = &amp;lt;div /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Elements are immutable, plain objects that describe the DOM nodes or components you want to render.&lt;/li&gt; 
 &lt;li&gt;Components can be either classes or functions, that take props as an input and return an element tree as the output.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/rendering-elements.html&quot;&gt;React docs on Rendering Elements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/components-and-props.html&quot;&gt;React docs on Components and Props&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What does lifting state up in React mean?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;When several components need to share the same data, then it is recommended to lift the shared state up to their closest common ancestor. For example, if two child components share the same data, it is recommended to move the shared state to parent instead of maintaining the local state in both child components.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Why does React use &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; like in HTML?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;React&#39;s philosophy in the beginning was to align with the browser DOM API rather than HTML, since that more closely represents how elements are created. Setting a &lt;code&gt;class&lt;/code&gt; on an element meant using the &lt;code&gt;className&lt;/code&gt; API:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const element = document.createElement(&quot;div&quot;)
element.className = &quot;hello&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additionally, before ES5, reserved words could not be used in objects:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const element = {
  attributes: {
    class: &quot;hello&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In IE8, this will throw an error.&lt;/p&gt; 
&lt;p&gt;In modern environments, destructuring will throw an error if trying to assign to a variable:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { class } = this.props // Error
const { className } = this.props // All good
const { class: className } = this.props // All good, but cumbersome!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, &lt;code&gt;class&lt;/code&gt; &lt;em&gt;can&lt;/em&gt; be used as a prop without problems, as seen in other libraries like Preact. React currently allows you to use &lt;code&gt;class&lt;/code&gt;, but will throw a warning and convert it to &lt;code&gt;className&lt;/code&gt; under the hood. There is currently an open thread (as of January 2019) discussing changing &lt;code&gt;className&lt;/code&gt; to &lt;code&gt;class&lt;/code&gt; to reduce confusion.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do you pass an argument to an event handler or callback?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;You can use an arrow function to wrap around an event handler and pass arguments, which is equivalent to calling &lt;code&gt;bind&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;button onClick={() =&amp;gt; this.handleClick(id)} /&amp;gt;
&amp;lt;button onClick={this.handleClick.bind(this, id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/handling-events.html&quot;&gt;React docs on Handling Events&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState&lt;/code&gt;?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The callback function is invoked when &lt;code&gt;setState&lt;/code&gt; has finished and the component gets rendered. Since &lt;code&gt;setState&lt;/code&gt; is asynchronous, the callback function is used for any post action.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;setState({ name: &quot;sudheer&quot; }, () =&amp;gt; {
  console.log(&quot;The name has updated and component re-rendered&quot;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The callback function is invoked after &lt;code&gt;setState&lt;/code&gt; finishes and is used for any post action.&lt;/li&gt; 
 &lt;li&gt;It is recommended to use lifecycle method rather this callback function.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/react-component.html#setstate&quot;&gt;React docs on &lt;code&gt;setState&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are the different phases of the component lifecycle in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;There are four different phases of component’s lifecycle:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: In this phase, the component prepares setting up the initial state and default props.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Mounting&lt;/strong&gt;: The react component is ready to mount to the DOM. This phase covers the &lt;code&gt;getDerivedStateFromProps&lt;/code&gt; and &lt;code&gt;componentDidMount&lt;/code&gt; lifecycle methods.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Updating&lt;/strong&gt;: In this phase, the component gets updated in two ways, sending the new props and updating the state. This phase covers the &lt;code&gt;getDerivedStateFromProps&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate&lt;/code&gt;, &lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt; lifecycle methods.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Unmounting&lt;/strong&gt;: In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes the &lt;code&gt;componentWillUnmount&lt;/code&gt; lifecycle method.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: In this phase, the component is called whenever there&#39;s an error during rendering, in a lifecycle method, or in the constructor for any child component. This phase includes the &lt;code&gt;componentDidCatch&lt;/code&gt; lifecycle method.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In HTML, the attribute name is in all lowercase and is given a string invoking a function defined somewhere:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onclick=&quot;handleClick()&quot;&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In React, the attribute name is camelCase and are passed the function reference inside curly braces:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;button onClick={handleClick} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In HTML, &lt;code&gt;false&lt;/code&gt; can be returned to prevent default behavior, whereas in React &lt;code&gt;preventDefault&lt;/code&gt; has to be called explicitly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;console.log(&#39;The link was clicked.&#39;); return false&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function handleClick(e) {
  e.preventDefault()
  console.log(&quot;The link was clicked.&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;HTML uses lowercase, React uses camelCase.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/handling-events.html&quot;&gt;React docs on Handling Events&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are inline conditional expressions?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Since a JSX element tree is one large expression, you cannot embed statements inside. Conditional expressions act as a replacement for statements to use inside the tree.&lt;/p&gt; 
&lt;p&gt;For example, this won&#39;t work:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function App({ messages, isVisible }) {
  return (
    &amp;lt;div&amp;gt;
      if (messages.length &amp;gt; 0) {
        &amp;lt;h2&amp;gt;You have {messages.length} unread messages.&amp;lt;/h2&amp;gt;
      } else {
        &amp;lt;h2&amp;gt;You have no unread messages.&amp;lt;/h2&amp;gt;
      }
      if (isVisible) {
        &amp;lt;p&amp;gt;I am visible.&amp;lt;/p&amp;gt;
      }
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Logical AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and the ternary &lt;code&gt;? :&lt;/code&gt; operator replace the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; statements.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function App({ messages, isVisible }) {
  return (
    &amp;lt;div&amp;gt;
      {messages.length &amp;gt; 0 ? (
        &amp;lt;h2&amp;gt;You have {messages.length} unread messages.&amp;lt;/h2&amp;gt;
      ) : (
        &amp;lt;h2&amp;gt;You have no unread messages.&amp;lt;/h2&amp;gt;
      )}
      {isVisible &amp;amp;&amp;amp; &amp;lt;p&amp;gt;I am visible.&amp;lt;/p&amp;gt;}
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/conditional-rendering.html&quot;&gt;React docs on Conditional Rendering&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are the lifecycle methods in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;code&gt;getDerivedStateFromProps&lt;/code&gt;: Executed before rendering on the initial mount and all component updates. Used to update the state based on changes in props over time. Has rare use cases, like tracking component animations during the lifecycle. There are only few cases where this makes sense to use over other lifecycle methods. It expects to return an object that will be the the new state, or null to update nothing. This method does not have access to the component instance either.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;componentDidMount&lt;/code&gt;: Executed after first rendering and here all AJAX requests, DOM or state updates, and set up eventListeners should occur.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;shouldComponentUpdate&lt;/code&gt;: Determines if the component will be updated or not. By default, it returns true. If you are sure that the component doesn&#39;t need to render after state or props are updated, you can return a false value. It is a great place to improve performance as it allows you to prevent a rerender if component receives new prop.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;getSnapshotBeforeUpdate&lt;/code&gt;: Invoked right after a component render happens because of an update, before &lt;code&gt;componentDidUpdate&lt;/code&gt;. Any value returned from this method will be passed to &lt;code&gt;componentDidUpdate&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;componentDidUpdate&lt;/code&gt;: Mostly it is used to update the DOM in response to prop or state changes.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;componentWillUnmount&lt;/code&gt;: It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;componentDidCatch&lt;/code&gt;: Used in error boundaries, which are components that implement this method. It allows the component to catch JavaScript errors anywhere in the &lt;em&gt;child&lt;/em&gt; component tree (below this component), log errors, and display a UI with error information.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a key? What are the benefits of using it in lists?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Keys are a special string attribute that helps React identify which items have been changed, added or removed. They are used when rendering array elements to give them a stable identity. Each element&#39;s key must be unique (e.g. IDs from the data or indexes as a last resort).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const todoItems = todos.map(todo =&amp;gt; &amp;lt;li key={todo.id}&amp;gt;{todo.text}&amp;lt;/li&amp;gt;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Using indexes as keys is not recommended if the order of items may change, as it might negatively impact performance and may cause issues with component state.&lt;/li&gt; 
 &lt;li&gt;If you extract list items as a separate component then apply keys on the list component instead of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Keys give elements in a collection a stable identity and help React identify changes.&lt;/li&gt; 
 &lt;li&gt;You should avoid using indexes as keys if the order of items may change.&lt;/li&gt; 
 &lt;li&gt;You should lift the key up to the component, instead of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element, if you extract list items as components.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/lists-and-keys.html&quot;&gt;React docs on Lists and Keys&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Which is the preferred option between callback refs and findDOMNode()?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Callback refs are preferred over the &lt;code&gt;findDOMNode()&lt;/code&gt; API, due to the fact that &lt;code&gt;findDOMNode()&lt;/code&gt; prevents certain improvements in React in the future.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Legacy approach using findDOMNode()
class MyComponent extends Component {
  componentDidMount() {
    findDOMNode(this).scrollIntoView()
  }

  render() {
    return &amp;lt;div /&amp;gt;
  }
}

// Recommended approach using callback refs
class MyComponent extends Component {
  componentDidMount() {
    this.node.scrollIntoView()
  }

  render() {
    return &amp;lt;div ref={node =&amp;gt; (this.node = node)} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Callback refs are preferred over &lt;code&gt;findDOMNode()&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/refs-and-the-dom.html#exposing-dom-refs-to-parent-components&quot;&gt;React docs on Refs and the DOM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are fragments?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Fragments allow a React component to return multiple elements without a wrapper, by grouping the children without adding extra elements to the DOM. Fragments offer better performance, lower memory usage, a cleaner DOM and can help in dealing with certain CSS mechanisms (e.g. tables, Flexbox and Grid).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;render() {
  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  );
}

// Short syntax supported by Babel 7
render() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fragments group multiple elements returned from a component, without adding a DOM element around them.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/fragments.html&quot;&gt;React docs on Fragments&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How do you ensure methods have the correct &lt;code&gt;this&lt;/code&gt; context in React component classes?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In JavaScript classes, the methods are not bound by default. This means that their &lt;code&gt;this&lt;/code&gt; context can be changed (in the case of an event handler, to the element that is listening to the event) and will not refer to the component instance. To solve this, &lt;code&gt;Function.prototype.bind()&lt;/code&gt; can be used to enforce the &lt;code&gt;this&lt;/code&gt; context as the component instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;constructor(props) {
  super(props);
  this.handleClick = this.handleClick.bind(this);
}

handleClick() {
  // Perform some logic
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;The &lt;code&gt;bind&lt;/code&gt; approach can be verbose and requires defining a &lt;code&gt;constructor&lt;/code&gt;, so the new public class fields syntax is generally preferred:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;handleClick = () =&amp;gt; {
  console.log(&#39;this is:&#39;, this);
}

render() {
  return (
    &amp;lt;button onClick={this.handleClick}&amp;gt;
      Click me
    &amp;lt;/button&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can also use an inline arrow function, because lexical &lt;code&gt;this&lt;/code&gt; (referring to the component instance) is preserved:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;button onClick={e =&amp;gt; this.handleClick(e)}&amp;gt;Click me&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that extra re-rendering can occur using this technique because a new function reference is created on render, which gets passed down to child components and breaks &lt;code&gt;shouldComponentUpdate&lt;/code&gt; / &lt;code&gt;PureComponent&lt;/code&gt; shallow equality checks to prevent unnecessary re-renders. In cases where performance is important, it is preferred to go with &lt;code&gt;bind&lt;/code&gt; in the constructor, or the public class fields syntax approach, because the function reference remains constant.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can either bind methods to the component instance context in the constructor, use public class fields syntax, or use inline arrow functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/handling-events.html&quot;&gt;React docs on Handling Events&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/faq-functions.html#how-do-i-bind-a-function-to-a-component-instance&quot;&gt;React docs on Passing Functions to Components&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are error boundaries in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.&lt;/p&gt; 
&lt;p&gt;Class components become error boundaries if they define either (or both) of the lifecycle methods &lt;code&gt;static getDerivedStateFromError()&lt;/code&gt; or &lt;code&gt;componentDidCatch().&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props)
    this.state = { hasError: false }
  }

  // Use componentDidCatch to log the error
  componentDidCatch(error, info) {
    // You can also log the error to an error reporting service
    logErrorToMyService(error, info)
  }
  
  // use getDerivedStateFromError to update state
  static getDerivedStateFromError(error) {
    // Display fallback UI
     return { hasError: true };
  }


  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;Something went wrong.&amp;lt;/h1&amp;gt;
    }
    return this.props.children
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Error boundaries only catch errors in the components below them in the tree. An error boundary can’t catch an error within itself.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://reactjs.org/docs/error-boundaries.html&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are higher-order components?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A higher-order component (HOC) is a function that takes a component as an argument and returns a new component. It is a pattern that is derived from React’s compositional nature. Higher-order components are like &lt;strong&gt;pure components&lt;/strong&gt; because they accept any dynamically provided child component, but they won’t modify or copy any behavior from their input components.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const EnhancedComponent = higherOrderComponent(WrappedComponent)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;They can be used for state abstraction and manipulation, props manipulation, render high jacking, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How to apply prop validation in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;When the application is running in development mode, React will automatically check for all props that we set on components to make sure they are the correct data type. For incorrect data types, it will generate warning messages in the console for development mode. They are stripped in production mode due to their performance impact. Required props are defined with &lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;For example, we define &lt;code&gt;propTypes&lt;/code&gt; for component as below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import PropTypes from &quot;prop-types&quot;

class User extends React.Component {
  static propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }

  render() {
    return (
      &amp;lt;h1&amp;gt;Welcome, {this.props.name}&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;Age, {this.props.age}
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;We can define custom &lt;code&gt;propTypes&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Using &lt;code&gt;propTypes&lt;/code&gt; is not mandatory. However, it is a good practice and can reduce bugs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is context?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Context provides a way to pass data through the component tree without having to pass props down manually at every level. For example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { Provider, Consumer } = React.createContext(defaultValue)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Context provides a way to pass data through a tree of React components, without having to manually pass props.&lt;/li&gt; 
 &lt;li&gt;Context is designed to share data that is considered &lt;em&gt;global&lt;/em&gt; for a tree of React components.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;React docs on Context&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are refs in React? When should they be used?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Refs provide a way to access DOM nodes or React elements created in the render method. Refs should be used sparringly, but there are some good use cases for refs, such as:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Managing focus, text selection, or media playback.&lt;/li&gt; 
 &lt;li&gt;Triggering imperative animations.&lt;/li&gt; 
 &lt;li&gt;Integrating with third-party DOM libraries.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Refs are created using &lt;code&gt;React.createRef()&lt;/code&gt; method and attached to React elements via the &lt;code&gt;ref&lt;/code&gt; attribute. In order to use refs throughout the component, assign the &lt;code&gt;ref&lt;/code&gt; to the instance property within the constructor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.myRef = React.createRef()
  }

  render() {
    return &amp;lt;div ref={this.myRef} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Refs can also be used in functional components with the help of closures.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Refs are used to return a reference to an element.&lt;/li&gt; 
 &lt;li&gt;Refs shouldn&#39;t be overused.&lt;/li&gt; 
 &lt;li&gt;You can create a ref using &lt;code&gt;React.createRef()&lt;/code&gt; and attach to elements via the &lt;code&gt;ref&lt;/code&gt; attribute.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/refs-and-the-dom.html&quot;&gt;React docs on Refs and the DOM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the &lt;code&gt;children&lt;/code&gt; prop?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;code&gt;children&lt;/code&gt; is part of the props object passed to components that allows components to be passed as data to other components, providing the ability to compose components cleanly. There are a number of methods available in the React API to work with this prop, such as &lt;code&gt;React.Children.map&lt;/code&gt;, &lt;code&gt;React.Children.forEach&lt;/code&gt;, &lt;code&gt;React.Children.count&lt;/code&gt;, &lt;code&gt;React.Children.only&lt;/code&gt; and &lt;code&gt;React.Children.toArray&lt;/code&gt;. A simple usage example of the children prop is as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function GenericBox({ children }) {
  return &amp;lt;div className=&quot;container&quot;&amp;gt;{children}&amp;lt;/div&amp;gt;
}

function App() {
  return (
    &amp;lt;GenericBox&amp;gt;
      &amp;lt;span&amp;gt;Hello&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;World&amp;lt;/span&amp;gt;
    &amp;lt;/GenericBox&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Children is a prop that allows components to be passed as data to other components.&lt;/li&gt; 
 &lt;li&gt;The React API provides methods to work with this prop.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/jsx-in-depth.html#children-in-jsx&quot;&gt;React docs on Children&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are portals in React?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Portal are the recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;ReactDOM.createPortal(child, container)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The first argument (&lt;code&gt;child&lt;/code&gt;) is any renderable React child, such as an element, string, or fragment. The second argument (&lt;code&gt;container&lt;/code&gt;) is a DOM element.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/portals.html&quot;&gt;React docs on Portals&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;HTML&lt;/h2&gt; 
&lt;h3&gt;What is the purpose of the &lt;code&gt;alt&lt;/code&gt; attribute on images?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The &lt;code&gt;alt&lt;/code&gt; attribute provides alternative information for an image if a user cannot view it. The &lt;code&gt;alt&lt;/code&gt; attribute should be used to describe any images except those which only serve a decorative purpose, in which case it should be left empty.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Decorative images should have an empty &lt;code&gt;alt&lt;/code&gt; attribute.&lt;/li&gt; 
 &lt;li&gt;Web crawlers use &lt;code&gt;alt&lt;/code&gt; tags to understand image content, so they are considered important for Search Engine Optimization (SEO).&lt;/li&gt; 
 &lt;li&gt;Put the &lt;code&gt;.&lt;/code&gt; at the end of &lt;code&gt;alt&lt;/code&gt; tag to improve accessibility.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML&quot;&gt;A good basis for accessibility&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the purpose of cache busting and how can you achieve it?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Browsers have a cache to temporarily store files on websites so they don&#39;t need to be re-downloaded again when switching between pages or reloading the same page. The server is set up to send headers that tell the browser to store the file for a given amount of time. This greatly increases website speed and preserves bandwidth.&lt;/p&gt; 
&lt;p&gt;However, it can cause problems when the website has been changed by developers because the user&#39;s cache still references old files. This can either leave them with old functionality or break a website if the cached CSS and JavaScript files are referencing elements that no longer exist, have moved or have been renamed.&lt;/p&gt; 
&lt;p&gt;Cache busting is the process of forcing the browser to download the new files. This is done by naming the file something different to the old file.&lt;/p&gt; 
&lt;p&gt;A common technique to force the browser to re-download the file is to append a query string to the end of the file.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;src=&quot;js/script.js&quot;&lt;/code&gt; =&amp;gt; &lt;code&gt;src=&quot;js/script.js?v=2&quot;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The browser considers it a different file but prevents the need to change the file name.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/strategies-for-cache-busting-css/&quot;&gt;Strategies for cache-busting CSS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Can a web page contain multiple &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; elements? What about &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; elements?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Yes to both. The W3 documents state that the tags represent the header(&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;) and footer(&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;) areas of their nearest ancestor &quot;section&quot;. So not only can the page &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; contain a header and a footer, but so can every &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;W3 recommends having as many as you want, but only 1 of each for each &quot;section&quot; of your page, i.e. body, section etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4837269/html5-using-header-or-footer-tag-twice?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot;&gt;StackOverflow Using header or footer tag twice&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Briefly describe the correct usage of the following HTML5 semantic elements: &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; is used to contain introductory and navigational information about a section of the page. This can include the section heading, the author’s name, time and date of publication, table of contents, or other navigational information.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; is meant to house a self-contained composition that can logically be independently recreated outside of the page without losing its meaning. Individual blog posts or news stories are good examples.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; is a flexible container for holding content that shares a common informational theme or purpose.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; is used to hold information that should appear at the end of a section of content and contain additional information about the section. Author’s name, copyright information, and related links are typical examples of such content.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Other semantic elements are &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/html/html5_semantic_elements.asp&quot;&gt;HTML 5 Semantic Elements&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Where and why is the &lt;code&gt;rel=&quot;noopener&quot;&lt;/code&gt; attribute used?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The &lt;code&gt;rel=&quot;noopener&quot;&lt;/code&gt; is an attribute used in &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements (hyperlinks). It prevents pages from having a &lt;code&gt;window.opener&lt;/code&gt; property, which would otherwise point to the page from where the link was opened and would allow the page opened from the hyperlink to manipulate the page where the hyperlink is.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;rel=&quot;noopener&quot;&lt;/code&gt; is applied to hyperlinks.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rel=&quot;noopener&quot;&lt;/code&gt; prevents opened links from manipulating the source page.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/noopener&quot;&gt;Open external anchors using rel=&quot;noopener&quot;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mathiasbynens.github.io/rel-noopener/&quot;&gt;About rel=&quot;noopener&quot;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; attributes on a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;If neither attribute is present, the script is downloaded and executed synchronously, and will halt parsing of the document until it has finished executing (default behavior). Scripts are downloaded and executed in the order they are encountered.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;defer&lt;/code&gt; attribute downloads the script while the document is still parsing but waits until the document has finished parsing before executing it, equivalent to executing inside a &lt;code&gt;DOMContentLoaded&lt;/code&gt; event listener. &lt;code&gt;defer&lt;/code&gt; scripts will execute in order.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; attribute downloads the script during parsing the document but will pause the parser to execute the script before it has fully finished parsing. &lt;code&gt;async&lt;/code&gt; scripts will not necessarily execute in order.&lt;/p&gt; 
&lt;p&gt;Note: both attributes must only be used if the script has a &lt;code&gt;src&lt;/code&gt; attribute (i.e. not an inline script).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;myscript.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;myscript.js&quot; defer&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;myscript.js&quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Placing a &lt;code&gt;defer&lt;/code&gt; script in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; allows the browser to download the script while the page is still parsing, and is therefore a better option than placing the script before the end of the body.&lt;/li&gt; 
 &lt;li&gt;If the scripts rely on each other, use &lt;code&gt;defer&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;If the script is independent, use &lt;code&gt;async&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Use &lt;code&gt;defer&lt;/code&gt; if the DOM must be ready and the contents are not placed within a &lt;code&gt;DOMContentLoaded&lt;/code&gt; listener.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html&quot;&gt;async vs defer attributes&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;In HTML, the attribute name is in all lowercase and is given a string invoking a function defined somewhere:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onclick=&quot;handleClick()&quot;&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In React, the attribute name is camelCase and are passed the function reference inside curly braces:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;button onClick={handleClick} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In HTML, &lt;code&gt;false&lt;/code&gt; can be returned to prevent default behavior, whereas in React &lt;code&gt;preventDefault&lt;/code&gt; has to be called explicitly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;#&quot; onclick=&quot;console.log(&#39;The link was clicked.&#39;); return false&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function handleClick(e) {
  e.preventDefault()
  console.log(&quot;The link was clicked.&quot;)
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;HTML uses lowercase, React uses camelCase.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/handling-events.html&quot;&gt;React docs on Handling Events&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are some differences that XHTML has compared to HTML?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Some of the key differences are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;An XHTML element must have an XHTML &lt;code&gt;&amp;lt;DOCTYPE&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Attributes values must be enclosed in quotes&lt;/li&gt; 
 &lt;li&gt;Attribute minimization is forbidden (e.g. one has to use &lt;code&gt;checked=&quot;checked&quot;&lt;/code&gt; instead of &lt;code&gt;checked&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;Elements must always be properly nested&lt;/li&gt; 
 &lt;li&gt;Elements must always be closed&lt;/li&gt; 
 &lt;li&gt;Special characters must be escaped&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Any element can be self-closed&lt;/li&gt; 
 &lt;li&gt;Tags ands attributes are case-sensitive, usually lowercase&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/html/html_xhtml.asp&quot;&gt;W3Schools docs for HTML and XHTML&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the DOM?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The DOM (Document Object Model) is a cross-platform API that treats HTML and XML documents as a tree structure consisting of nodes. These nodes (such as elements and text nodes) are objects that can be programmatically manipulated and any visible changes made to them are reflected live in the document. In a browser, this API is available to JavaScript where DOM nodes can be manipulated to change their styles, contents, placement in the document, or interacted with through event listeners.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The DOM was designed to be independent of any particular programming language, making the structural representation of the document available from a single, consistent API.&lt;/li&gt; 
 &lt;li&gt;The DOM is constructed progressively in the browser as a page loads, which is why scripts are often placed at the bottom of a page, in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; with a &lt;code&gt;defer&lt;/code&gt; attribute, or inside a &lt;code&gt;DOMContentLoaded&lt;/code&gt; event listener. Scripts that manipulate DOM nodes should be run after the DOM has been constructed to avoid errors.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;document.getElementById()&lt;/code&gt; and &lt;code&gt;document.querySelector()&lt;/code&gt; are common functions for selecting DOM nodes.&lt;/li&gt; 
 &lt;li&gt;Setting the &lt;code&gt;innerHTML&lt;/code&gt; property to a new value runs the string through the HTML parser, offering an easy way to append dynamic HTML content to a node.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM&quot;&gt;MDN docs for DOM&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Discuss the differences between an HTML specification and a browser’s implementation thereof.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;HTML specifications such as &lt;code&gt;HTML5&lt;/code&gt; define a set of rules that a document must adhere to in order to be “valid” according to that specification. In addition, a specification provides instructions on how a browser must interpret and render such a document.&lt;/p&gt; 
&lt;p&gt;A browser is said to “support” a specification if it handles valid documents according to the rules of the specification. As of yet, no browser supports all aspects of the &lt;code&gt;HTML5&lt;/code&gt; specification (although all of the major browser support most of it), and as a result, it is necessary for the developer to confirm whether the aspect they are making use of will be supported by all of the browsers on which they hope to display their content. This is why cross-browser support continues to be a headache for developers, despite the improved specificiations.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;HTML5&lt;/code&gt; defines some rules to follow for an invalid &lt;code&gt;HTML5&lt;/code&gt; document (i.e., one that contains syntactical errors)&lt;/li&gt; 
 &lt;li&gt;However, invalid documents may contain anything, so it&#39;s impossible for the specification to handle all possibilities comprehensively.&lt;/li&gt; 
 &lt;li&gt;Thus, many decisions about how to handle malformed documents are left up to the browser.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2 WWW Specifications&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is HTML5 Web Storage? Explain &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;With HTML5, web pages can store data locally within the user’s browser. The data is stored in name/value pairs, and a web page can only access data stored by itself.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Differences between &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; regarding lifetime:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Data stored through &lt;code&gt;localStorage&lt;/code&gt; is permanent: it does not expire and remains stored on the user’s computer until a web app deletes it or the user asks the browser to delete it.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;sessionStorage&lt;/code&gt; has the same lifetime as the top-level window or browser tab in which the data got stored. When the tab is permanently closed, any data stored through &lt;code&gt;sessionStorage&lt;/code&gt; is deleted.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Differences between &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; regarding storage scope:&lt;/strong&gt; Both forms of storage are scoped to the document origin so that documents with different origins will never share the stored objects.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;sessionStorage&lt;/code&gt; is also scoped on a per-window basis. Two browser tabs with documents from the same origin have separate &lt;code&gt;sessionStorage&lt;/code&gt; data.&lt;/li&gt; 
 &lt;li&gt;Unlike in &lt;code&gt;localStorage&lt;/code&gt;, the same scripts from the same origin can&#39;t access each other&#39;s &lt;code&gt;sessionStorage&lt;/code&gt; when opened in different tabs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Earlier, this was done with cookies.&lt;/li&gt; 
 &lt;li&gt;The storage limit is far larger (at least 5MB) than with cookies and its faster.&lt;/li&gt; 
 &lt;li&gt;The data is never transferred to the server and can only be used if the client specifically asks for it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/html/html5_webstorage.asp&quot;&gt;W3Schools HTML5 Webstorage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;CSS&lt;/h2&gt; 
&lt;h3&gt;What is CSS BEM?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The BEM methodology is a naming convention for CSS classes in order to keep CSS more maintainable by defining namespaces to solve scoping issues. BEM stands for Block Element Modifier which is an explanation for its structure. A Block is a standalone component that is reusable across projects and acts as a &quot;namespace&quot; for sub components (Elements). Modifiers are used as flags when a Block or Element is in a certain state or is different in structure or style.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* block component */
.block {
}

/* element */
.block__element {
}

/* modifier */
.block__element--modifier {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here is an example with the class names on markup:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav class=&quot;navbar&quot;&amp;gt;
  &amp;lt;a href=&quot;/&quot; class=&quot;navbar__link navbar__link--active&quot;&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;a href=&quot;/&quot; class=&quot;navbar__link&quot;&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;a href=&quot;/&quot; class=&quot;navbar__link&quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case, &lt;code&gt;navbar&lt;/code&gt; is the Block, &lt;code&gt;navbar__link&lt;/code&gt; is an Element that makes no sense outside of the &lt;code&gt;navbar&lt;/code&gt; component, and &lt;code&gt;navbar__link--active&lt;/code&gt; is a Modifier that indicates a different state for the &lt;code&gt;navbar__link&lt;/code&gt; Element.&lt;/p&gt; 
&lt;p&gt;Since Modifiers are verbose, many opt to use &lt;code&gt;is-*&lt;/code&gt; flags instead as modifiers.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&quot;/&quot; class=&quot;navbar__link is-active&quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These must be chained to the Element and never alone however, or there will be scope issues.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.navbar__link.is-active {
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Alternative solutions to scope issues like CSS-in-JS&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hackernoon.com/writing-clean-and-maintainable-css-using-bem-methodology-1dcbf810a664&quot;&gt;Writing clean and maintainable CSS&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are the advantages of using CSS preprocessors?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;CSS preprocessors add useful functionality that native CSS does not have, and generally make CSS neater and more maintainable by enabling DRY (Don&#39;t Repeat Yourself) principles. Their terse syntax for nested selectors cuts down on repeated code. They provide variables for consistent theming (however, CSS variables have largely replaced this functionality) and additional tools like color functions (&lt;code&gt;lighten&lt;/code&gt;, &lt;code&gt;darken&lt;/code&gt;, &lt;code&gt;transparentize&lt;/code&gt;, etc), mixins, and loops that make CSS more like a real programming language and gives the developer more power to generate complex CSS.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;They allow us to write more maintainable and scalable CSS&lt;/li&gt; 
 &lt;li&gt;Some disadvantages of using CSS preprocessors (setup, re-compilation time can be slow etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/@garyfagan/css-preprocessors-6f226fa16f27&quot;&gt;CSS Preprocessors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Using flexbox, create a 3-column layout where each column takes up a &lt;code&gt;col-{n} / 12&lt;/code&gt; ratio of the container.&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;row&quot;&amp;gt;
  &amp;lt;div class=&quot;col-2&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;col-7&quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;col-3&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Set the &lt;code&gt;.row&lt;/code&gt; parent to &lt;code&gt;display: flex;&lt;/code&gt; and use the &lt;code&gt;flex&lt;/code&gt; shorthand property to give the column classes a &lt;code&gt;flex-grow&lt;/code&gt; value that corresponds to its ratio value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.row {
  display: flex;
}

.col-2 {
  flex: 2;
}

.col-7 {
  flex: 7;
}

.col-3 {
  flex: 3;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox&quot;&gt;MDN docs for basic concepts of flexbox&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;A complete guide to Flexbox&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Can you name the four types of &lt;code&gt;@media&lt;/code&gt; properties?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;all&lt;/code&gt;, which applies to all media type devices&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;print&lt;/code&gt;, which only applies to printers&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;screen&lt;/code&gt;, which only applies to screens (desktops, tablets, mobile etc.)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;speech&lt;/code&gt;, which only applies to screenreaders&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media&quot;&gt;MDN docs for &lt;code&gt;@media&lt;/code&gt; rule&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries&quot;&gt;MDN docs for using media queries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Describe the layout of the CSS Box Model and briefly describe each component.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;code&gt;Content&lt;/code&gt;: The inner-most part of the box filled with content, such as text, an image, or video player. It has the dimensions &lt;code&gt;content-box width&lt;/code&gt; and &lt;code&gt;content-box height&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Padding&lt;/code&gt;: The transparent area surrounding the content. It has dimensions &lt;code&gt;padding-box width&lt;/code&gt; and &lt;code&gt;padding-box height&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Border&lt;/code&gt;: The area surrounding the padding (if any) and content. It has dimensions &lt;code&gt;border-box width&lt;/code&gt; and &lt;code&gt;border-box height&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Margin&lt;/em&gt;: The transparent outer-most layer that surrounds the border. It separates the element from other elements in the DOM. It has dimensions &lt;code&gt;margin-box width&lt;/code&gt; and &lt;code&gt;margin-box height&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://www.washington.edu/accesscomputing/webd2/student/unit3/images/boxmodel.gif&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;This is a very common question asked during front-end interviews and while it may seem easy, it is critical you know it well!&lt;/li&gt; 
 &lt;li&gt;Shows a solid understanding of spacing and the DOM&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/Css/css_boxmodel.asp&quot;&gt;W3School&#39;s CSS Box Model Page&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model&quot;&gt;Mozilla&#39;s Intro to the CSS Box Model&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Both &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units are based on the &lt;code&gt;font-size&lt;/code&gt; CSS property. The only difference is where they inherit their values from.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;em&lt;/code&gt; units inherit their value from the &lt;code&gt;font-size&lt;/code&gt; of the parent element&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rem&lt;/code&gt; units inherit their value from the &lt;code&gt;font-size&lt;/code&gt; of the root element (&lt;code&gt;html&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In most browsers, the &lt;code&gt;font-size&lt;/code&gt; of the root element is set to &lt;code&gt;16px&lt;/code&gt; by default.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Benefits of using &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://medium.com/code-better/css-units-for-font-size-px-em-rem-79f7e592bb97&quot;&gt;CSS units for font-size: px | em | rem&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are the advantages of using CSS sprites and how are they utilized?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;CSS sprites combine multiple images into one image, limiting the number of HTTP requests a browser has to make, thus improving load times. Even under the new HTTP/2 protocol, this remains true.&lt;/p&gt; 
&lt;p&gt;Under HTTP/1.1, at most one request is allowed per TCP connection. With HTTP/1.1, modern browsers open multiple parallel connections (between 2 to 8) but it is limited. With HTTP/2, all requests between the browser and the server are multiplexed on a single TCP connection. This means the cost of opening and closing multiple connections is mitigated, resulting in a better usage of the TCP connection and limits the impact of latency between the client and server. It could then become possible to load tens of images in parallel on the same TCP connection.&lt;/p&gt; 
&lt;p&gt;However, according to &lt;a href=&quot;https://blog.octo.com/en/http2-arrives-but-sprite-sets-aint-no-dead/&quot;&gt;benchmark results&lt;/a&gt;, although HTTP/2 offers 50% improvement over HTTP/1.1, in most cases the sprite set is still faster to load than individual images.&lt;/p&gt; 
&lt;p&gt;To utilize a spritesheet in CSS, one would use certain properties, such as &lt;code&gt;background-image&lt;/code&gt;, &lt;code&gt;background-position&lt;/code&gt; and &lt;code&gt;background-size&lt;/code&gt; to ultimately alter the &lt;code&gt;background&lt;/code&gt; of an element.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;background-image&lt;/code&gt;, &lt;code&gt;background-position&lt;/code&gt; and &lt;code&gt;background-size&lt;/code&gt; can be used to utilize a spritesheet.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/css-sprites/&quot;&gt;CSS Sprites explained by CSS Tricks&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the difference between &#39;+&#39; and &#39;~&#39; sibling selectors?.&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The General Sibling Selector &lt;code&gt;~&lt;/code&gt; selects all elements that are siblings of a specified element.&lt;/p&gt; 
&lt;p&gt;The following example selects all &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements that are siblings of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;div ~ p {
  background-color: blue;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The Adjacent Sibling Selector &lt;code&gt;+&lt;/code&gt; selects all elements that are the adjacent siblings of a specified element.&lt;/p&gt; 
&lt;p&gt;The following example will select all &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements that are placed immediately after &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;div + p {
  background-color: red;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/css_combinators.asp&quot;&gt;W3School&#39;s CSS Combinators Page&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Combinators_and_multiple_selectors&quot;&gt;Mozilla&#39;s Combinators and groups of selectors page&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Can you describe how CSS specificity works?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Assuming the browser has already determined the set of rules for an element, each rule is assigned a matrix of values, which correspond to the following from highest to lowest specificity:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Inline rules (binary - 1 or 0)&lt;/li&gt; 
 &lt;li&gt;Number of id selectors&lt;/li&gt; 
 &lt;li&gt;Number of class, pseudo-class and attribute selectors&lt;/li&gt; 
 &lt;li&gt;Number of tags and pseudo-element selectors&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;When two selectors are compared, the comparison is made on a per-column basis (e.g. an id selector will always be higher than any amount of class selectors, as ids have higher specificity than classes). In cases of equal specificity between multiple rules, the rules that comes last in the page&#39;s style sheet is deemed more specific and therefore applied to the element.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Specificity matrix: [inline, id, class/pseudo-class/attribute, tag/pseudo-element]&lt;/li&gt; 
 &lt;li&gt;In cases of equal specificity, last rule is applied&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/&quot;&gt;CSS Specificity&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is a focus ring? What is the correct solution to handle them?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;A focus ring is a visible outline given to focusable elements such as buttons and anchor tags. It varies depending on the vendor, but generally it appears as a blue outline around the element to indicate it is currently focused.&lt;/p&gt; 
&lt;p&gt;In the past, many people specified &lt;code&gt;outline: 0;&lt;/code&gt; on the element to remove the focus ring. However, this causes accessibility issues for keyboard users because the focus state may not be clear. When not specified though, it causes an unappealing blue ring to appear around an element.&lt;/p&gt; 
&lt;p&gt;In recent times, frameworks like Bootstrap have opted to use a more appealing &lt;code&gt;box-shadow&lt;/code&gt; outline to replace the default focus ring. However, this is still not ideal for mouse users.&lt;/p&gt; 
&lt;p&gt;The best solution is an upcoming pseudo-selector &lt;code&gt;:focus-visible&lt;/code&gt; which can be polyfilled today with JavaScript. It will only show a focus ring if the user is using a keyboard and leave it hidden for mouse users. This keeps both aesthetics for mouse use and accessibility for keyboard use.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://css-tricks.com/focus-visible-and-backwards-compatibility/&quot;&gt;:focus-visible&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Accessibility&lt;/h2&gt; 
&lt;h3&gt;What is WCAG? What are the differences between A, AA, and AAA compliance?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;WCAG stands for &quot;Web Content Accessibility Guidelines&quot;. It is a standard describing how to make web content more accessible to people with disabilities They have 12-13 guidelines and for each one, there are testable success criteria, which are at three levels: A, AA, and AAA. The higher the level, the higher the impact on the design of the web content. The higher the level, the web content is essentially more accessible by more users. Depending on where you live/work, there may be regulations requiring websites to meet certain levels of compliance. For instance, in Ontario, Canada, beginning January 1, 2021 all public websites and web content posted after January 1, 2012 must meet AA compliance.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;A guideline for making web content more accessible&lt;/li&gt; 
 &lt;li&gt;3 different levels (A, AA, and AAA) of compliance for each guideline&lt;/li&gt; 
 &lt;li&gt;Governments are starting to require web content to meet a certain level of compliance by law&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/standards-guidelines/wcag/&quot;&gt;Web Content Accessibility Guidelines (WCAG) Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/quickref/&quot;&gt;How to Meet WCAG&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is ARIA and when should you use it?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;ARIA stands for &quot;Accessible Rich Internet Applications&quot;, and is a technical specification created by the World Wide Web Consortium (W3C). Better known as WAI-ARIA, it provides additional HTML attributes in the development of web applications to offer people who use assistive technologies (AT) a more robust and interoperable experience with dynamic components. By providing the component&#39;s role, name, and state, AT users can better understand how to interact with the component. WAI-ARIA should only be used when an HTML element equivalent is not available or lacks full browser or AT support. WAI-ARIA&#39;s semantic markup coupled with JavaScript works to provide an understandable and interactive experience for people who use AT.&lt;/p&gt; 
&lt;p&gt;An example using ARIA:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;div 
  role=&quot;combobox&quot;
  aria-expanded=&quot;false&quot;
  aria-owns=&quot;ex1-grid&quot;
  aria-haspopup=&quot;grid&quot;
  id=&quot;ex1-combobox&quot;&amp;gt;
  ...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Credit: W3C&#39;s &lt;a href=&quot;https://w3c.github.io/aria-practices/examples/combobox/aria1.1pattern/grid-combo.html&quot;&gt;ARIA 1.1 Combobox with Grid Popup Example&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Accessible Rich Internet Applications&lt;/li&gt; 
 &lt;li&gt;Benefits people who use assistive technologies (AT)&lt;/li&gt; 
 &lt;li&gt;Provides role, name, and state&lt;/li&gt; 
 &lt;li&gt;Semantic HTML coupled with JavaScript&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/standards-guidelines/aria/&quot;&gt;WAI-ARIA Overview&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria/&quot;&gt;WAI-ARIA Spec&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtu.be/4bH57rWPnYo&quot;&gt;ARIA Serious? Eric Eggert presentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the Accessibility Tree?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The Accessibility Tree is a structure produced by the browser&#39;s Accessibility APIs which provides accessibility information to assistive technologies such as screen readers. It runs parallel to the DOM and is similar to the DOM API, but with much fewer nodes, because a lot of that information is only useful for visual presentation. By writing semantic HTML we can take advantage of this process in creating an accessible experience for our users.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tree structure exposing information to assistive technologies&lt;/li&gt; 
 &lt;li&gt;Runs parallel to the DOM&lt;/li&gt; 
 &lt;li&gt;Semantic HTML is essential in creating accessible experiences&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2015/03/web-accessibility-with-accessibility-api/&quot;&gt;Accessibility APIs&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What are landmark roles and how can they be useful?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Landmark roles is a way to identify different sections of a page like the main content or a navigation region. The Landmarks helps assistive technology users to navigate a page, allowing them skip over areas of it.&lt;/p&gt; 
&lt;p&gt;For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div id=&quot;header&quot; role=&quot;banner&quot;&amp;gt;Header of the Page&amp;lt;/div&amp;gt;
&amp;lt;div id=&quot;content&quot; role=&quot;main&quot;&amp;gt;Main Content Goes Here&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify sections of a page&lt;/li&gt; 
 &lt;li&gt;Assist users in navigating a page&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.washington.edu/accessibility/web/landmarks/&quot;&gt;ARIA Landmark Roles&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.w3.org/WAI/GL/wiki/Using_ARIA_landmarks_to_identify_regions_of_a_page&quot;&gt;Using ARIA landmarks to identify regions of a page&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Node&lt;/h2&gt; 
&lt;h3&gt;NodeJS often uses a callback pattern where if an error is encountered during execution, this error is passed as the first argument to the callback. What are the advantages of this pattern?&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;fs.readFile(filePath, function(err, data) {
  if (err) {
    // handle the error, the return is important here
    // so execution stops here
    return console.log(err)
  }
  // use the data object
  console.log(data)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Advantages include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Not needing to process data if there is no need to even reference it&lt;/li&gt; 
 &lt;li&gt;Having a consistent API leads to more adoption&lt;/li&gt; 
 &lt;li&gt;Ability to easily adapt a callback pattern that will lead to more maintainable code&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;As you can see from below example, the callback is called with null as its first argument if there is no error. However, if there is an error, you create an Error object, which then becomes the callback&#39;s only parameter. The callback function allows a user to easily know whether or not an error occurred.&lt;/p&gt; 
&lt;p&gt;This practice is also called the &lt;em&gt;Node.js error convention&lt;/em&gt;, and this kind of callback implementations are called &lt;em&gt;error-first callbacks&lt;/em&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var isTrue = function(value, callback) {
  if (value === true) {
    callback(null, &quot;Value was true.&quot;)
  } else {
    callback(new Error(&quot;Value is not true!&quot;))
  }
}

var callback = function(error, retval) {
  if (error) {
    console.log(error)
    return
  }
  console.log(retval)
}

isTrue(false, callback)
isTrue(true, callback)

/*
  { stack: [Getter/Setter],
    arguments: undefined,
    type: undefined,
    message: &#39;Value is not true!&#39; }
  Value was true.
*/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;This is just a convention. However, you should stick to it.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/&quot;&gt;The Node.js Way Understanding Error-First Callbacks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.nodejitsu.com/articles/errors/what-are-the-error-conventions&quot;&gt;What are the error conventions?&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is REST?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;REST (REpresentational State Transfer) is a software design pattern for network architecture. A RESTful web application exposes data in the form of information about its resources.&lt;/p&gt; 
&lt;p&gt;Generally, this concept is used in web applications to manage state. With most applications, there is a common theme of reading, creating, updating, and destroying data. Data is modularized into separate tables like &lt;code&gt;posts&lt;/code&gt;, &lt;code&gt;users&lt;/code&gt;, &lt;code&gt;comments&lt;/code&gt;, and a RESTful API exposes access to this data with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;An identifier for the resource. This is known as the endpoint or URL for the resource.&lt;/li&gt; 
 &lt;li&gt;The operation the server should perform on that resource in the form of an HTTP method or verb. The common HTTP methods are GET, POST, PUT, and DELETE.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is an example of the URL and HTTP method with a &lt;code&gt;posts&lt;/code&gt; resource:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Reading: &lt;code&gt;/posts/&lt;/code&gt; =&amp;gt; GET&lt;/li&gt; 
 &lt;li&gt;Creating: &lt;code&gt;/posts/new&lt;/code&gt; =&amp;gt; POST&lt;/li&gt; 
 &lt;li&gt;Updating: &lt;code&gt;/posts/:id&lt;/code&gt; =&amp;gt; PUT&lt;/li&gt; 
 &lt;li&gt;Destroying: &lt;code&gt;/posts/:id&lt;/code&gt; =&amp;gt; DELETE&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Alternatives to this pattern like GraphQL&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;](https://medium.com/extend/what-is-rest-a-simple-explanation-for-beginners-part-1-introduction-b4a072f8740f)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;How can you avoid callback hells?&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;getData(function(a) {
  getMoreData(a, function(b) {
    getMoreData(b, function(c) {
      getMoreData(c, function(d) {
        getMoreData(d, function(e) {
          // ...
        })
      })
    })
  })
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Refactoring the functions to return promises and using &lt;code&gt;async/await&lt;/code&gt; is usually the best option. Instead of supplying the functions with callbacks that cause deep nesting, they return a promise that can be &lt;code&gt;await&lt;/code&gt;ed and will be resolved once the data has arrived, allowing the next line of code to be evaluated in a sync-like fashion.&lt;/p&gt; 
&lt;p&gt;The above code can be restructured like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function asyncAwaitVersion() {
  const a = await getData()
  const b = await getMoreData(a)
  const c = await getMoreData(b)
  const d = await getMoreData(c)
  const e = await getMoreData(d)
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are lots of ways to solve the issue of callback hells:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modularization: break callbacks into independent functions&lt;/li&gt; 
 &lt;li&gt;Use a control flow library, like async&lt;/li&gt; 
 &lt;li&gt;Use generators with Promises&lt;/li&gt; 
 &lt;li&gt;Use async/await (from v7 on)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;As an efficient JavaScript developer, you have to avoid the constantly growing indentation level, produce clean and readable code and be able to handle complex flows.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://stackabuse.com/avoiding-callback-hell-in-node-js/&quot;&gt;Avoiding Callback Hell in Node.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.hellojs.org/asynchronous-javascript-from-callback-hell-to-async-and-await-9b9ceb63c8e8&quot;&gt;Asynchronous JavaScript: From Callback Hell to Async and Await&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;What is the event loop in Node.js?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;The event loop handles all async callbacks. Callbacks are queued in a loop, while other code runs, and will run one by one when the response for each one has been received.&lt;/p&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;The event loop allows Node.js to perform non-blocking I/O operations, despite the fact that JavaScript is single-threaded&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;Node.js docs on event loop, timers and process.nextTick()&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;h3&gt;What is a cross-site scripting attack (XSS) and how do you prevent it?&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;XSS refers to client-side code injection where the attacker injects malicious scripts into a legitimate website or web application. This is often achieved when the application does not validate user input and freely injects dynamic HTML content.&lt;/p&gt; 
&lt;p&gt;For example, a comment system will be at risk if it does not validate or escape user input. If the comment contains unescaped HTML, the comment can inject a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag into the website that other users will execute against their knowledge.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The malicious script has access to cookies which are often used to store session tokens. If an attacker can obtain a user’s session cookie, they can impersonate the user.&lt;/li&gt; 
 &lt;li&gt;The script can arbitrarily manipulate the DOM of the page the script is executing in, allowing the attacker to insert pieces of content that appear to be a real part of the website.&lt;/li&gt; 
 &lt;li&gt;The script can use AJAX to send HTTP requests with arbitrary content to arbitrary destinations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Good to hear&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;On the client, using &lt;code&gt;textContent&lt;/code&gt; instead of &lt;code&gt;innerHTML&lt;/code&gt; prevents the browser from running the string through the HTML parser which would execute scripts in it.&lt;/li&gt; 
 &lt;li&gt;On the server, escaping HTML tags will prevent the browser from parsing the user input as actual HTML and therefore won&#39;t execute the script.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;Additional Links&lt;/h5&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.acunetix.com/websitesecurity/cross-site-scripting/&quot;&gt;Cross-Site Scripting Attack (XSS)&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/#table-of-contents&quot;&gt;⬆ Back to top&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/30-seconds/30-seconds-of-interviews/master/LICENSE&quot;&gt;MIT&lt;/a&gt;. Copyright (c) &lt;a href=&quot;https://stefanfejes.com/&quot;&gt;Stefan Feješ&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ipfs-shipyard/ipfs-desktop</title>
      <link>https://github.com/ipfs-shipyard/ipfs-desktop</link>
      <description>&lt;p&gt;An unobtrusive and user-friendly desktop application for IPFS on Windows, Mac and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPFS Desktop&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://protocol.ai/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://ipfs.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://webchat.freenode.net/?channels=%23ipfs&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/ipfs-shipyard/ipfs-desktop&quot;&gt;&lt;img src=&quot;https://david-dm.org/ipfs-shipyard/ipfs-desktop.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/total.svg?style=flat-square&amp;amp;label=all%20downloads&quot; alt=&quot;total download count&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/tag/v0.13.2&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/v0.13.2/total.svg?style=flat-square&quot; alt=&quot;latest release download count&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IPFS Desktop gives you all the power of &lt;a href=&quot;https://ipfs.io&quot;&gt;IPFS&lt;/a&gt; in a convenient desktop app: a complete IPFS node, plus handy OS menubar/taskbar shortcuts and an all-in-one file manager, peer map, and content explorer.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Use IPFS Desktop to get acquainted with IPFS without needing to touch the terminal — or, if you&#39;re already experienced, use the powerful menubar/taskbar shortcuts alongside the command line to make your IPFS workflow faster.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://gateway.ipfs.io/ipfs/QmYHuXitXMf5xTjiQXmXdqszvMTADvrM5zA7EqoDj3d3RH&quot; alt=&quot;Status screen of IPFS Desktop&quot;&gt;&lt;/p&gt; 
&lt;p&gt;| Files screen | Explore screen | Peers screen | Settings screen | Menubar/taskbar | |-------|---------|-------|----------|------| | &lt;img src=&quot;https://gateway.ipfs.io/ipfs/QmRN82RPWHKuSuBadijTQuaCjFKAGaymt3aFBoG6Du9Vi3&quot; alt=&quot;Screenshot of the Files screen&quot;&gt; | &lt;img src=&quot;https://gateway.ipfs.io/ipfs/Qmaerxh9UKf9F3YPKnV2cBEnPQoJdVmkswFdz7kNQGncKt&quot; alt=&quot;Screenshot of the Explore screen&quot;&gt; | &lt;img src=&quot;https://gateway.ipfs.io/ipfs/QmaVbBYsEBb34HMP1YWeErrS7X3TB6Y9t1iQ4sBRnTvSwa&quot; alt=&quot;Screenshot of the Peers screen&quot;&gt; | &lt;img src=&quot;https://gateway.ipfs.io/ipfs/Qmby5RuN7K9s5W9RVLdrQSE8gRKQ66EX8c39iC31DLAxN6&quot; alt=&quot;Screenshot of the Settings screen&quot;&gt; | &lt;img src=&quot;https://gateway.ipfs.io/ipfs/QmbT2YtuNo17Qaq31FJWRZgRMY4E6N9cdfBwzZTFSHUoBP&quot; alt=&quot;Screenshot of Mac/Windows menus&quot;&gt; |&lt;/p&gt; 
&lt;h3&gt;Quick-install shortcuts&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mac:&lt;/strong&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/IPFS-Desktop-0.13.2.dmg&quot;&gt;IPFS-Desktop-0.13.2.dmg&lt;/a&gt; or &lt;code&gt;brew install --cask ipfs&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/IPFS-Desktop-Setup-0.13.2.exe&quot;&gt;IPFS-Desktop-Setup-0.13.2.exe&lt;/a&gt; or &lt;code&gt;choco install ipfs-desktop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux:&lt;/strong&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/#install&quot;&gt;installation options&lt;/a&gt; below&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/#features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/#install&quot;&gt;Install&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/#contribute&quot;&gt;Contribute&lt;/a&gt; or &lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/#translations&quot;&gt;Translate&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/#faq--troubleshooting&quot;&gt;FAQ &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;IPFS Desktop combines a complete IPFS node (running &lt;a href=&quot;https://github.com/ipfs/go-ipfs&quot;&gt;go-ipfs&lt;/a&gt;) and the &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-webui&quot;&gt;IPFS Web UI&lt;/a&gt; into a single, convenient desktop app — plus adds a menu to your OS menubar/system tray for easy access to a variety of common IPFS tasks.&lt;/p&gt; 
&lt;p&gt;If you already have an IPFS node on your computer, IPFS Desktop will act as a control panel and file browser for that node. If you don&#39;t have a node, it&#39;ll install one for you. And either way, IPFS Desktop will automatically check for updates.&lt;/p&gt; 
&lt;h3&gt;Start your node at system startup and control it from your OS&lt;/h3&gt; 
&lt;p&gt;IPFS Desktop enables you to stop or restart your node straight from the IPFS logo menu in your OS menubar/system tray. For Mac and Windows users, IPFS Desktop can be also be set to launch at system startup, ensuring that your node is running whenever your computer is on.&lt;/p&gt; 
&lt;h3&gt;Quickly import files, folders, and screenshots to IPFS&lt;/h3&gt; 
&lt;p&gt;Import files and folders to your IPFS node in a variety of convenient ways:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Drag and drop items onto IPFS Desktop&#39;s &lt;code&gt;Files&lt;/code&gt; screen&lt;/li&gt; 
 &lt;li&gt;Click the &lt;code&gt;Import&lt;/code&gt; button on the &lt;code&gt;Files&lt;/code&gt; screen to add items from your computer or an IPFS &lt;a href=&quot;https://docs.ipfs.io/concepts/content-addressing/#identifier-formats&quot;&gt;content ID (CID)&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;(Windows) Right-click a file/folder&#39;s icon to add it to IPFS from the pop-up menu&lt;/li&gt; 
 &lt;li&gt;(Mac) Drag and drop a file/folder onto the IPFS logo in your menubar&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Plus, you can use the &lt;code&gt;Take Screenshot&lt;/code&gt; command under the IPFS logo menu to take a screenshot, import it to your node, and copy a shareable link to your clipboard with one click.&lt;/p&gt; 
&lt;h3&gt;Easily manage the contents of your node&lt;/h3&gt; 
&lt;p&gt;IPFS Desktop&#39;s &lt;code&gt;Files&lt;/code&gt; screen gives you an easy, familiar interface for working with the contents of your node:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Easily rename, move, or remove files and folders&lt;/li&gt; 
 &lt;li&gt;Preview many common file formats directly in IPFS Desktop&lt;/li&gt; 
 &lt;li&gt;Copy a file/folder&#39;s IPFS &lt;a href=&quot;https://docs.ipfs.io/concepts/content-addressing/#identifier-formats&quot;&gt;content ID (CID)&lt;/a&gt; or a shareable link to your clipboard&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.ipfs.io/concepts/persistence/&quot;&gt;&quot;Pin&quot;&lt;/a&gt; files to your IPFS node or (coming soon!) to a third-party pinning service&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Quick download for CIDs, IPFS paths, and IPNS paths&lt;/h3&gt; 
&lt;p&gt;Just want to download an IPFS content ID or IPFS/IPNS content path? Choose &lt;code&gt;Download...&lt;/code&gt; from the IPFS logo menu, paste it in, and you&#39;re good to go.&lt;/p&gt; 
&lt;h3&gt;Visualize your IPFS peers worldwide&lt;/h3&gt; 
&lt;p&gt;Visit the &lt;code&gt;Peers&lt;/code&gt; screen to see what nodes you&#39;re connected to, where they are, the connections they&#39;re using, and more.&lt;/p&gt; 
&lt;h3&gt;Explore the &quot;Merkle Forest&quot; of IPFS files&lt;/h3&gt; 
&lt;p&gt;Use the &lt;code&gt;Explore&lt;/code&gt; screen to explore some example datasets — or your own files — and see firsthand how items stored on IPFS are broken down into content-addressed pieces.&lt;/p&gt; 
&lt;h3&gt;Enjoy OS-wide support for IPFS files and links&lt;/h3&gt; 
&lt;p&gt;IPFS Desktop enables most operating systems (Mac, Windows and some Linux flavors) to support protocols including &lt;code&gt;ipfs://&lt;/code&gt;, &lt;code&gt;ipns://&lt;/code&gt; and &lt;code&gt;dweb:&lt;/code&gt;. This means that if an app on your computer tries to open a link starting with one of those protocol identifiers (for example, if your web browser encounters a link to &lt;code&gt;ipns://en.wikipedia-on-ipfs.org&lt;/code&gt;), it&#39;ll automatically open in IPFS Desktop.&lt;/p&gt; 
&lt;p&gt;For an even better experience with &lt;code&gt;ipfs://&lt;/code&gt;, &lt;code&gt;ipns://&lt;/code&gt; and &lt;code&gt;dweb:&lt;/code&gt; addresses, we also recommend installing &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-companion&quot;&gt;IPFS Companion&lt;/a&gt; to add support in your favorite browser!&lt;/p&gt; 
&lt;h3&gt;Learn IPFS commands as you go&lt;/h3&gt; 
&lt;p&gt;If you&#39;re interested in learning how to use IPFS from the command line, IPFS Desktop&#39;s CLI Tutor Mode can show you common IPFS commands as you go. Just check the &lt;code&gt;CLI Tutor Mode&lt;/code&gt; box on the &lt;code&gt;Settings&lt;/code&gt; screen to switch on this feature.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;Release notes and older versions of IPFS Desktop can be found on the &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases&quot;&gt;releases page&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Don&#39;t see your favorite package manager? Visit our &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/issues/691&quot;&gt;package managers page&lt;/a&gt; and help us add support for it!&lt;/p&gt; 
&lt;h3&gt;Mac&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Installer:&lt;/strong&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/IPFS-Desktop-0.13.2.dmg&quot;&gt;IPFS-Desktop-0.13.2.dmg&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/IPFS-Desktop-0.13.2.dmg&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/v0.13.2/IPFS-Desktop-0.13.2.dmg.svg?style=flat-square&amp;amp;label=downloads&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Homebrew&lt;/strong&gt; (community-maintained): &lt;code&gt;brew install --cask ipfs&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Windows&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Installer:&lt;/strong&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/IPFS-Desktop-Setup-0.13.2.exe&quot;&gt;IPFS-Desktop-Setup-0.13.2.exe&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/IPFS-Desktop-Setup-0.13.2.exe&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/v0.13.2/IPFS-Desktop-Setup-0.13.2.exe.svg?style=flat-square&amp;amp;label=downloads&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Chocolatey&lt;/strong&gt; (community-maintained): &lt;code&gt;choco install ipfs-desktop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Scoop&lt;/strong&gt; (community-maintained): &lt;code&gt;scoop install ipfs-desktop&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Linux/FreeBSD&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Tarball&lt;/strong&gt; (experimental): &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-x64.tar.xz&quot;&gt;ipfs-desktop-0.13.2-linux-x64.tar.xz&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-x64.tar.xz&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/v0.13.2/ipfs-desktop-0.13.2-linux-x64.tar.xz.svg?style=flat-square&amp;amp;label=downloads&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Debian&lt;/strong&gt; (experimental): &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-amd64.deb&quot;&gt;ipfs-desktop-0.13.2-linux-amd64.deb&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-amd64.deb&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/v0.13.2/ipfs-desktop-0.13.2-linux-amd64.deb.svg?style=flat-square&amp;amp;label=downloads&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Red Hat&lt;/strong&gt; (experimental): &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-x86_64.rpm&quot;&gt;ipfs-desktop-0.13.2-linux-x86_64.rpm&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-x86_64.rpm&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/v0.13.2/ipfs-desktop-0.13.2-linux-x86_64.rpm.svg?style=flat-square&amp;amp;label=downloads&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AppImage&lt;/strong&gt; (experimental): &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-x86_64.AppImage&quot;&gt;ipfs-desktop-0.13.2-linux-x86_64.AppImage&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-x86_64.AppImage&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/v0.13.2/ipfs-desktop-0.13.2-linux-x86_64.AppImage.svg?style=flat-square&amp;amp;label=downloads&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt; (experimental): &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-x64.freebsd&quot;&gt;ipfs-desktop-0.13.2-linux-x64.freebsd&lt;/a&gt;&lt;br&gt; &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/releases/download/v0.13.2/ipfs-desktop-0.13.2-linux-x64.freebsd&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/ipfs-shipyard/ipfs-desktop/v0.13.2/ipfs-desktop-0.13.2-linux-x64.freebsd.svg?style=flat-square&amp;amp;label=downloads&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Snapcraft&lt;/strong&gt; (community-maintained): &lt;code&gt;snap install ipfs-desktop&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;AUR&lt;/strong&gt; (maintained by &lt;a href=&quot;https://github.com/alexhenrie&quot;&gt;@alexhenrie&lt;/a&gt;): Use the &lt;a href=&quot;https://aur.archlinux.org/packages/ipfs-desktop/&quot;&gt;&lt;code&gt;ipfs-desktop&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install from source&lt;/h3&gt; 
&lt;p&gt;To install and run IPFS Desktop from source, you&#39;ll also need:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; &lt;code&gt;&amp;gt;=12&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/npmjs.org&quot;&gt;npm&lt;/a&gt; &lt;code&gt;&amp;gt;=6.1.0&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Any &lt;a href=&quot;https://github.com/nodejs/node-gyp#installation&quot;&gt;platform-specific dependencies&lt;/a&gt; required by &lt;a href=&quot;https://github.com/nodejs/node-gyp&quot;&gt;&lt;code&gt;node-gyp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Then, follow the steps below to clone the source code, install dependencies, and run the app.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone https://github.com/ipfs-shipyard/ipfs-desktop.git
cd ipfs-desktop
npm ci
npm run build
npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;We welcome all contributions to IPFS Desktop! The best way to get started is to check the current &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/issues&quot;&gt;open issues&lt;/a&gt; (or drill down specifically for &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&quot;&gt;issues labeled &quot;help wanted&quot;&lt;/a&gt;) and find something interesting. All issues are categorized by the &lt;a href=&quot;https://github.com/ipfs/community/blob/master/ISSUE_LABELS.md&quot;&gt;standard label taxonomy&lt;/a&gt; used across the IPFS project, so you can also drill by topic (for example, &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/issues?q=is%3Aissue+is%3Aopen+label%3Atopic%2Fdesign-ux&quot;&gt;UX-related issues&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;You may also enjoy taking part in the IPFS GUI &amp;amp; Web Browsers Working Group&#39;s biweekly meeting to catch up on the latest plans. This meeting does shift around, so please check the &lt;a href=&quot;https://calendar.google.com/calendar/embed?src=ipfs.io_eal36ugu5e75s207gfjcu0ae84@group.calendar.google.com&amp;amp;ctz=UTC&quot;&gt;IPFS Community Calendar&lt;/a&gt; for the latest day/time.&lt;/p&gt; 
&lt;p&gt;No matter how you contribute, please be sure you read and follow the &lt;a href=&quot;https://github.com/ipfs/community/blob/master/CONTRIBUTING.md&quot;&gt;IPFS Contributing Guidelines&lt;/a&gt; and the &lt;a href=&quot;https://github.com/ipfs/community/blob/master/code-of-conduct.md&quot;&gt;IPFS Community Code of Conduct&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;p&gt;Contributing translations in your language is particularly valuable! We use Transifex to manage internationalization, which means you don&#39;t need to change a single line of code to add your translations — just sign up for a Transifex account.&lt;/p&gt; 
&lt;p&gt;Because IPFS Desktop app includes text from &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-webui&quot;&gt;IPFS Web UI&lt;/a&gt; and &lt;a href=&quot;https://github.com/ipfs-shipyard/ipld-explorer&quot;&gt;IPLD Explorer&lt;/a&gt;, you&#39;ll want to join all three Transifex projects in order to see all the text:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;https://www.transifex.com/ipfs/ipfs-desktop/&lt;/li&gt; 
 &lt;li&gt;https://www.transifex.com/ipfs/ipfs-webui/&lt;/li&gt; 
 &lt;li&gt;https://www.transifex.com/ipfs/ipld-explorer/&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Note for developers: We use English as our source of truth. This means that if you add any new text, make those additions in &lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/assets/locales/en.json&quot;&gt;&lt;code&gt;./assets/locales/en.json&lt;/code&gt;&lt;/a&gt; and they will automatically propagate in Transifex for other languages.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Developer notes&lt;/h3&gt; 
&lt;p&gt;For more detailed information about hacking on IPFS Desktop, including a release checklist, please see the full &lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/DEVELOPER-NOTES.md&quot;&gt;developer notes&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;FAQ &amp;amp; Troubleshooting&lt;/h2&gt; 
&lt;h3&gt;Why am I missing the system tray menu on Linux?&lt;/h3&gt; 
&lt;p&gt;IPFS Desktop is built using Electron, and unfortunately, poor system tray support has been a &lt;a href=&quot;https://github.com/electron/electron/issues/21445&quot;&gt;longstanding problem with Electron apps&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;You may wish to try troubleshooting according to the &lt;a href=&quot;https://github.com/electron/electron/blob/v9.3.0/docs/api/tray.md#class-tray&quot;&gt;Electron v9.3.0 docs&lt;/a&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;On Linux, the app indicator will be used if it is supported; otherwise &lt;code&gt;GtkStatusIcon&lt;/code&gt; will be used&lt;/li&gt; 
 &lt;li&gt;On Linux distributions that only have app indicator support, you must install &lt;code&gt;libappindicator1&lt;/code&gt; to make the tray icon work&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;ve noticed that the old system tray is back in IPFS Desktop v0.13, this is because the Electron team &lt;a href=&quot;https://github.com/electron/electron/issues/21445#issuecomment-634163402&quot;&gt;removed support for &lt;code&gt;StatusNotifier&lt;/code&gt; and restored the old tray interface on Linux called &lt;code&gt;XEmbed&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Why can&#39;t I start IPFS Desktop under Debian 10?&lt;/h3&gt; 
&lt;p&gt;Some Linux users may see one of the following errors when trying to launch IPFS Desktop:&lt;/p&gt; 
&lt;p&gt;When launching by double-clicking the app icon:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I&#39;m aborting now. You need to make sure that chrome-sandbox is owned by root and has mode 4755.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;When launching from the terminal:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ ipfs-desktop
$Trace/breakpoint trap
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a known issue with Electron/Chrome and some hardened kernels. More details can be found &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/issues/1362#issuecomment-596857282&quot;&gt;here&lt;/a&gt;, but a fix is to start IPFS Desktop from the terminal with the following additional parameter:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ ipfs-desktop --no-sandbox
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Where are my IPFS configuration and log files?&lt;/h3&gt; 
&lt;p&gt;You can open these files from the IPFS logo menu by selecting &lt;code&gt;Open Logs Directory&lt;/code&gt; or &lt;code&gt;Open Configuration File&lt;/code&gt; from the &lt;code&gt;Advanced&lt;/code&gt; submenu. Or, find them in your OS as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Mac:&lt;/strong&gt; &lt;code&gt;~/Library/Application Support/IPFS Desktop/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; &lt;code&gt;%appdata%/IPFS Desktop/&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linux:&lt;/strong&gt; &lt;code&gt;~/.config/IPFS Desktop/&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;How does IPFS Desktop select the IPFS repo location?&lt;/h3&gt; 
&lt;p&gt;IPFS Desktop uses &lt;a href=&quot;https://github.com/ipfs/js-ipfsd-ctl&quot;&gt;ipfsd-ctl&lt;/a&gt;, which, by default, checks the &lt;code&gt;IPFS_PATH&lt;/code&gt; environment variable. If that isn&#39;t set, it falls back to &lt;code&gt;$HOME/.ipfs&lt;/code&gt;. As soon as the first run has succeded, repository location info is saved in the configuration file, which becomes the source of truth.&lt;/p&gt; 
&lt;p&gt;To open your repo directory from the IPFS logo menu, select &lt;code&gt;Open Repository Directory&lt;/code&gt; from the &lt;code&gt;Advanced&lt;/code&gt; submenu.&lt;/p&gt; 
&lt;h3&gt;Which version of IPFS does IPFS Desktop use?&lt;/h3&gt; 
&lt;p&gt;IPFS Desktop includes its own embedded binary (with version defined in &lt;code&gt;package.json&lt;/code&gt;); this is the latest version of &lt;a href=&quot;https://github.com/ipfs/go-ipfs&quot;&gt;go-ipfs&lt;/a&gt; that has passed QA for IPFS Desktop use.&lt;/p&gt; 
&lt;p&gt;You can check which version of IPFS you&#39;re running from the IPFS logo menu by looking in the &lt;code&gt;About&lt;/code&gt; submenu.&lt;/p&gt; 
&lt;h3&gt;Which flags does IPFS Desktop boot with?&lt;/h3&gt; 
&lt;p&gt;By default, IPFS Desktop starts the IPFS daemon with the flags &lt;code&gt;--migrate=true --routing=dhtclient ----enable-gc=true&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;You can change this in the IPFS Desktop config file by selecting &lt;code&gt;Open Configuration File&lt;/code&gt; from the &lt;code&gt;Advanced&lt;/code&gt; submenu.&lt;/p&gt; 
&lt;h3&gt;I need more help!&lt;/h3&gt; 
&lt;p&gt;If you need help with using IPFS Desktop, the quickest way to get answers is to post them in the &lt;a href=&quot;https://discuss.ipfs.io&quot;&gt;official IPFS forums&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you think you&#39;ve found a bug or other issue with IPFS Desktop itself, please &lt;a href=&quot;https://github.com/ipfs-shipyard/ipfs-desktop/issues/new/choose&quot;&gt;open an issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ipfs-shipyard/ipfs-desktop/master/LICENSE&quot;&gt;MIT — Protocol Labs, Inc.&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gatsbyjs/gatsby</title>
      <link>https://github.com/gatsbyjs/gatsby</link>
      <description>&lt;p&gt;Build blazing fast, modern apps and websites with React&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Gatsby is a modern web framework for blazing fast websites.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Go Beyond Static Websites.&lt;/strong&gt; Get all the benefits of static websites with none of the limitations. Gatsby sites are fully functional React apps so you can create high-quality, dynamic web apps, from blogs to e-commerce sites to user dashboards.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use a Modern Stack for Every Site.&lt;/strong&gt; No matter where the data comes from, Gatsby sites are built using React and GraphQL. Build a uniform workflow for you and your team, regardless of whether the data is coming from the same backend.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Load Data From Anywhere.&lt;/strong&gt; Gatsby pulls in data from any data source, whether it’s Markdown files, a headless CMS like Contentful or WordPress, or a REST or GraphQL API. Use source plugins to load your data, then develop using Gatsby’s uniform GraphQL interface.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance Is Baked In.&lt;/strong&gt; Ace your performance audits by default. Gatsby automates code splitting, image optimization, inlining critical styles, lazy-loading, prefetching resources, and more to ensure your site is fast — no manual tuning required.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Host at Scale for Pennies.&lt;/strong&gt; Gatsby sites don’t require servers so you can host your entire site on a CDN for a fraction of the cost of a server-rendered site. Many Gatsby sites can be hosted entirely free on services like GitHub Pages and Netlify.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;&lt;strong&gt;Learn how to use Gatsby for your next project.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;What’s In This Document&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-get-up-and-running-in-5-minutes&quot;&gt;Get Up and Running in 5 Minutes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-learning-gatsby&quot;&gt;Learning Gatsby&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-migration-guides&quot;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-how-to-contribute&quot;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#memo-license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-thanks&quot;&gt;Thanks to Our Contributors and Sponsors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🚀 Get Up and Running in 5 Minutes&lt;/h2&gt; 
&lt;p&gt;You can get a new Gatsby site up and running on your local dev environment in 5 minutes with these four steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the Gatsby CLI.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install -g gatsby-cli

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Gatsby site from a Gatsby starter.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Get your Gatsby blog set up in a single command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# create a new Gatsby site using the default starter
gatsby new my-blazing-fast-site
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start the site in &lt;code&gt;develop&lt;/code&gt; mode.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Next, move into your new site’s directory and start it up:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd my-blazing-fast-site/
gatsby develop
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open the source code and start editing!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Your site is now running at &lt;code&gt;http://localhost:8000&lt;/code&gt;. Open the &lt;code&gt;my-blazing-fast-site&lt;/code&gt; directory in your code editor of choice and edit &lt;code&gt;src/pages/index.js&lt;/code&gt;. Save your changes, and the browser will update in real time!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;At this point, you’ve got a fully functional Gatsby website. For additional information on how you can customize your Gatsby site, see our &lt;a href=&quot;https://gatsbyjs.com/plugins/&quot;&gt;plugins&lt;/a&gt; and &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;the official tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;🎓 Learning Gatsby&lt;/h2&gt; 
&lt;p&gt;Full documentation for Gatsby lives &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;For most developers, we recommend starting with our &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;in-depth tutorial for creating a site with Gatsby&lt;/a&gt;.&lt;/strong&gt; It starts with zero assumptions about your level of ability and walks through every step of the process.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;To dive straight into code samples head &lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;to our documentation&lt;/a&gt;.&lt;/strong&gt; In particular, check out the “
   &lt;!-- raw HTML omitted --&gt;Guides
   &lt;!-- raw HTML omitted --&gt;”, “
   &lt;!-- raw HTML omitted --&gt;API Reference
   &lt;!-- raw HTML omitted --&gt;”, and “
   &lt;!-- raw HTML omitted --&gt;Advanced Tutorials
   &lt;!-- raw HTML omitted --&gt;” sections in the sidebar.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We welcome suggestions for improving our docs. See the &lt;a href=&quot;https://www.gatsbyjs.com/contributing/how-to-contribute/&quot;&gt;“how to contribute”&lt;/a&gt; documentation for more details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Start Learning Gatsby: &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;Follow the Tutorial&lt;/a&gt; · &lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;Read the Docs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;💼 Migration Guides&lt;/h2&gt; 
&lt;p&gt;Already have a Gatsby site? These handy guides will help you add the improvements of Gatsby v2 to your site without starting from scratch!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/migrating-from-v1-to-v2/&quot;&gt;Migrate a Gatsby site from v1 to v2&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Still on v0? Start here: &lt;a href=&quot;https://www.gatsbyjs.com/docs/migrating-from-v0-to-v1/&quot;&gt;Migrate a Gatsby site from v0 to v1&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;❗ Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Gatsby is dedicated to building a welcoming, diverse, safe community. We expect everyone participating in the Gatsby community to abide by our &lt;a href=&quot;https://www.gatsbyjs.com/contributing/code-of-conduct/&quot;&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;. Please read it. Please follow it. In the Gatsby community, we work hard to build each other up and create amazing things together. 💪💜&lt;/p&gt; 
&lt;h2&gt;🤝 How to Contribute&lt;/h2&gt; 
&lt;p&gt;Whether you&#39;re helping us fix bugs, improve the docs, or spread the word, we&#39;d love to have you as part of the Gatsby community! :muscle::purple_heart:&lt;/p&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://www.gatsbyjs.com/contributing/how-to-contribute/&quot;&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/a&gt; for ideas on contributing and setup steps for getting our repositories up and running on your local machine.&lt;/p&gt; 
&lt;h3&gt;A note on how this repository is organized&lt;/h3&gt; 
&lt;p&gt;This repository is a &lt;a href=&quot;https://trunkbaseddevelopment.com/monorepos/&quot;&gt;monorepo&lt;/a&gt; managed using &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt;Lerna&lt;/a&gt;. This means there are &lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/packages&quot;&gt;multiple packages&lt;/a&gt; managed in this codebase, even though we publish them to NPM as separate packages.&lt;/p&gt; 
&lt;h3&gt;Contributing to Gatsby v1&lt;/h3&gt; 
&lt;p&gt;We are currently only accepting bug fixes for Gatsby v1. No new features will be accepted.&lt;/p&gt; 
&lt;h2&gt;:memo: License&lt;/h2&gt; 
&lt;p&gt;Licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;💜 Thanks&lt;/h2&gt; 
&lt;p&gt;Thanks to our many contributors and to &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; for hosting &lt;a href=&quot;https://www.gatsbyjs.com&quot;&gt;Gatsby&lt;/a&gt; and our example sites.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OptimalBits/bull</title>
      <link>https://github.com/OptimalBits/bull</link>
      <description>&lt;p&gt;Premium Queue package for handling distributed jobs and messages in NodeJS.&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; 
&lt;h3&gt;BullMQ&lt;/h3&gt; 
&lt;p&gt;If you want to start using the next major version of Bull written entirely in Typescript you are welcome to the new repo &lt;a href=&quot;https://github.com/taskforcesh/bullmq&quot;&gt;here&lt;/a&gt;. Otherwise you are very welcome to still use Bull, which is a safe, battle tested codebase.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Official FrontEnd&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://taskforce.sh&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Super charge your queues with a profesional front end and optional Redis hosting:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Get a complete overview of all your queues.&lt;/li&gt; 
 &lt;li&gt;Inspect jobs, search, retry, or promote delayed jobs.&lt;/li&gt; 
 &lt;li&gt;Metrics and statistics.&lt;/li&gt; 
 &lt;li&gt;and many more features.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Sign up at &lt;a href=&quot;https://taskforce.sh&quot;&gt;Taskforce.sh&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Bull Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;[x] Minimal CPU usage due to a polling-free design.&lt;/li&gt; 
 &lt;li&gt;[x] Robust design based on Redis.&lt;/li&gt; 
 &lt;li&gt;[x] Delayed jobs.&lt;/li&gt; 
 &lt;li&gt;[x] Schedule and repeat jobs according to a cron specification.&lt;/li&gt; 
 &lt;li&gt;[x] Rate limiter for jobs.&lt;/li&gt; 
 &lt;li&gt;[x] Retries.&lt;/li&gt; 
 &lt;li&gt;[x] Priority.&lt;/li&gt; 
 &lt;li&gt;[x] Concurrency.&lt;/li&gt; 
 &lt;li&gt;[x] Pause/resume—globally or locally.&lt;/li&gt; 
 &lt;li&gt;[x] Multiple job types per queue.&lt;/li&gt; 
 &lt;li&gt;[x] Threaded (sandboxed) processing functions.&lt;/li&gt; 
 &lt;li&gt;[x] Automatic recovery from process crashes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;And coming up on the roadmap...&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;[ ] Job completion acknowledgement.&lt;/li&gt; 
 &lt;li&gt;[ ] Parent-child jobs relationships.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;UIs&lt;/h3&gt; 
&lt;p&gt;There are a few third-party UIs that you can use for monitoring:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bull v3&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://taskforce.sh&quot;&gt;Taskforce&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vcapretz/bull-board&quot;&gt;bull-board&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/darky/bull-repl&quot;&gt;bull-repl&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bull &amp;lt;= v2&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ShaneK/Matador&quot;&gt;Matador&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kfatehi/react-bull&quot;&gt;react-bull&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Epharmix/Toureiro&quot;&gt;Toureiro&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;Monitoring &amp;amp; Alerting&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;With Prometheus &lt;a href=&quot;https://github.com/UpHabit/bull_exporter&quot;&gt;Bull Queue Exporter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h3&gt;Feature Comparison&lt;/h3&gt; 
&lt;p&gt;Since there are a few job queue solutions, here is a table comparing them:&lt;/p&gt; 
&lt;p&gt;| Feature | Bull | Kue | Bee | Agenda | | :------------- |:-------------:|:-----:|:---:|:------:| | Backend | redis | redis |redis| mongo | | Priorities | ✓ | ✓ | | ✓ | | Concurrency | ✓ | ✓ | ✓ | ✓ | | Delayed jobs | ✓ | ✓ | | ✓ | | Global events | ✓ | ✓ | | | | Rate Limiter | ✓ | | | | | Pause/Resume | ✓ | ✓ | | | | Sandboxed worker| ✓ | | | | | Repeatable jobs | ✓ | | | ✓ | | Atomic ops | ✓ | | ✓ | | | Persistence | ✓ | ✓ | ✓ | ✓ | | UI | ✓ | ✓ | | ✓ | | Optimized for | Jobs / Messages | Jobs | Messages | Jobs |&lt;/p&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install bull --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add bull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Bull requires a Redis version greater than or equal to &lt;code&gt;2.8.18&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;Typescript Definitions&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install @types/bull --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add --dev @types/bull
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Definitions are currently maintained in the &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/bull&quot;&gt;DefinitelyTyped&lt;/a&gt; repo.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;We welcome all types of contributions, either code fixes, new features or doc improvements. Code formatting is enforced by &lt;a href=&quot;https://prettier.io/&quot;&gt;prettier&lt;/a&gt; For commits please follow conventional &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0-beta.2/&quot;&gt;commits convention&lt;/a&gt; All code must pass lint rules and test suites before it can be merged into develop.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Quick Guide&lt;/h3&gt; 
&lt;h4&gt;Basic Usage&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var Queue = require(&#39;bull&#39;);

var videoQueue = new Queue(&#39;video transcoding&#39;, &#39;redis://127.0.0.1:6379&#39;);
var audioQueue = new Queue(&#39;audio transcoding&#39;, {redis: {port: 6379, host: &#39;127.0.0.1&#39;, password: &#39;foobared&#39;}}); // Specify Redis connection using object
var imageQueue = new Queue(&#39;image transcoding&#39;);
var pdfQueue = new Queue(&#39;pdf transcoding&#39;);

videoQueue.process(function(job, done){

  // job.data contains the custom data passed when the job was created
  // job.id contains id of this job.

  // transcode video asynchronously and report progress
  job.progress(42);

  // call done when finished
  done();

  // or give a error if error
  done(new Error(&#39;error transcoding&#39;));

  // or pass it a result
  done(null, { framerate: 29.5 /* etc... */ });

  // If the job throws an unhandled exception it is also handled correctly
  throw new Error(&#39;some unexpected error&#39;);
});

audioQueue.process(function(job, done){
  // transcode audio asynchronously and report progress
  job.progress(42);

  // call done when finished
  done();

  // or give a error if error
  done(new Error(&#39;error transcoding&#39;));

  // or pass it a result
  done(null, { samplerate: 48000 /* etc... */ });

  // If the job throws an unhandled exception it is also handled correctly
  throw new Error(&#39;some unexpected error&#39;);
});

imageQueue.process(function(job, done){
  // transcode image asynchronously and report progress
  job.progress(42);

  // call done when finished
  done();

  // or give a error if error
  done(new Error(&#39;error transcoding&#39;));

  // or pass it a result
  done(null, { width: 1280, height: 720 /* etc... */ });

  // If the job throws an unhandled exception it is also handled correctly
  throw new Error(&#39;some unexpected error&#39;);
});

pdfQueue.process(function(job){
  // Processors can also return promises instead of using the done callback
  return pdfAsyncProcessor();
});

videoQueue.add({video: &#39;http://example.com/video1.mov&#39;});
audioQueue.add({audio: &#39;http://example.com/audio1.mp3&#39;});
imageQueue.add({image: &#39;http://example.com/image1.tiff&#39;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using promises&lt;/h4&gt; 
&lt;p&gt;Alternatively, you can use return promises instead of using the &lt;code&gt;done&lt;/code&gt; callback:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;videoQueue.process(function(job){ // don&#39;t forget to remove the done callback!
  // Simply return a promise
  return fetchVideo(job.data.url).then(transcodeVideo);

  // Handles promise rejection
  return Promise.reject(new Error(&#39;error transcoding&#39;));

  // Passes the value the promise is resolved with to the &quot;completed&quot; event
  return Promise.resolve({ framerate: 29.5 /* etc... */ });

  // If the job throws an unhandled exception it is also handled correctly
  throw new Error(&#39;some unexpected error&#39;);
  // same as
  return Promise.reject(new Error(&#39;some unexpected error&#39;));
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Separate processes&lt;/h4&gt; 
&lt;p&gt;The process function can also be run in a separate process. This has several advantages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The process is sandboxed so if it crashes it does not affect the worker.&lt;/li&gt; 
 &lt;li&gt;You can run blocking code without affecting the queue (jobs will not stall).&lt;/li&gt; 
 &lt;li&gt;Much better utilization of multi-core CPUs.&lt;/li&gt; 
 &lt;li&gt;Less connections to redis.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In order to use this feature just create a separate file with the processor:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// processor.js
module.exports = function(job){
  // Do some heavy work

  return Promise.resolve(result);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;And define the processor like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Single process:
queue.process(&#39;/path/to/my/processor.js&#39;);

// You can use concurrency as well:
queue.process(5, &#39;/path/to/my/processor.js&#39;);

// and named processors:
queue.process(&#39;my processor&#39;, 5, &#39;/path/to/my/processor.js&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Repeated jobs&lt;/h4&gt; 
&lt;p&gt;A job can be added to a queue and processed repeatedly according to a cron specification:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;  paymentsQueue.process(function(job){
    // Check payments
  });

  // Repeat payment job once every day at 3:15 (am)
  paymentsQueue.add(paymentsData, {repeat: {cron: &#39;15 3 * * *&#39;}});

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;As a tip, check your expressions here to verify they are correct: &lt;a href=&quot;https://crontab.cronhub.io&quot;&gt;cron expression generator&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Pause / Resume&lt;/h4&gt; 
&lt;p&gt;A queue can be paused and resumed globally (pass &lt;code&gt;true&lt;/code&gt; to pause processing for just this worker):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;queue.pause().then(function(){
  // queue is paused now
});

queue.resume().then(function(){
  // queue is resumed now
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Events&lt;/h4&gt; 
&lt;p&gt;A queue emits some useful events, for example...&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;.on(&#39;completed&#39;, function(job, result){
  // Job completed with output result!
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more information on events, including the full list of events that are fired, check out the &lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/REFERENCE.md#events&quot;&gt;Events reference&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Queues performance&lt;/h4&gt; 
&lt;p&gt;Queues are cheap, so if you need many of them just create new ones with different names:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var userJohn = new Queue(&#39;john&#39;);
var userLisa = new Queue(&#39;lisa&#39;);
.
.
.
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However every queue instance will require new redis connections, check how to &lt;a href=&quot;https://github.com/OptimalBits/bull/blob/master/PATTERNS.md#reusing-redis-connections&quot;&gt;reuse connections&lt;/a&gt; or you can also use &lt;a href=&quot;https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queueprocess&quot;&gt;named processors&lt;/a&gt; to achieve a similar result.&lt;/p&gt; 
&lt;h4&gt;Cluster support&lt;/h4&gt; 
&lt;p&gt;NOTE: From version 3.2.0 and above it is recommended to use threaded processors instead.&lt;/p&gt; 
&lt;p&gt;Queues are robust and can be run in parallel in several threads or processes without any risk of hazards or queue corruption. Check this simple example using cluster to parallelize jobs across processes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var
  Queue = require(&#39;bull&#39;),
  cluster = require(&#39;cluster&#39;);

var numWorkers = 8;
var queue = new Queue(&quot;test concurrent queue&quot;);

if(cluster.isMaster){
  for (var i = 0; i &amp;lt; numWorkers; i++) {
    cluster.fork();
  }

  cluster.on(&#39;online&#39;, function(worker) {
    // Lets create a few jobs for the queue workers
    for(var i=0; i&amp;lt;500; i++){
      queue.add({foo: &#39;bar&#39;});
    };
  });

  cluster.on(&#39;exit&#39;, function(worker, code, signal) {
    console.log(&#39;worker &#39; + worker.process.pid + &#39; died&#39;);
  });
}else{
  queue.process(function(job, jobDone){
    console.log(&quot;Job done by worker&quot;, cluster.worker.id, job.id);
    jobDone();
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For the full documentation, check out the reference and common patterns:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://optimalbits.github.io/bull/&quot;&gt;Guide&lt;/a&gt; — Your starting point for developing with Bull.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/REFERENCE.md&quot;&gt;Reference&lt;/a&gt; — Reference document with all objects and methods available.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/PATTERNS.md&quot;&gt;Patterns&lt;/a&gt; — a set of examples for common patterns.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/OptimalBits/bull/develop/LICENSE.md&quot;&gt;License&lt;/a&gt; — the Bull license—it&#39;s MIT.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you see anything that could use more docs, please submit a pull request!&lt;/p&gt; 
&lt;hr&gt; 
&lt;h3&gt;Important Notes&lt;/h3&gt; 
&lt;p&gt;The queue aims for an &quot;at least once&quot; working strategy. This means that in some situations, a job could be processed more than once. This mostly happens when a worker fails to keep a lock for a given job during the total duration of the processing.&lt;/p&gt; 
&lt;p&gt;When a worker is processing a job it will keep the job &quot;locked&quot; so other workers can&#39;t process it.&lt;/p&gt; 
&lt;p&gt;It&#39;s important to understand how locking works to prevent your jobs from losing their lock - becoming &lt;em&gt;stalled&lt;/em&gt; - and being restarted as a result. Locking is implemented internally by creating a lock for &lt;code&gt;lockDuration&lt;/code&gt; on interval &lt;code&gt;lockRenewTime&lt;/code&gt; (which is usually half &lt;code&gt;lockDuration&lt;/code&gt;). If &lt;code&gt;lockDuration&lt;/code&gt; elapses before the lock can be renewed, the job will be considered stalled and is automatically restarted; it will be &lt;strong&gt;double processed&lt;/strong&gt;. This can happen when:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The Node process running your job processor unexpectedly terminates.&lt;/li&gt; 
 &lt;li&gt;Your job processor was too CPU-intensive and stalled the Node event loop, and as a result, Bull couldn&#39;t renew the job lock (see &lt;a href=&quot;https://github.com/OptimalBits/bull/issues/488&quot;&gt;#488&lt;/a&gt; for how we might better detect this). You can fix this by breaking your job processor into smaller parts so that no single part can block the Node event loop. Alternatively, you can pass a larger value for the &lt;code&gt;lockDuration&lt;/code&gt; setting (with the tradeoff being that it will take longer to recognize a real stalled job).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;As such, you should always listen for the &lt;code&gt;stalled&lt;/code&gt; event and log this to your error monitoring system, as this means your jobs are likely getting double-processed.&lt;/p&gt; 
&lt;p&gt;As a safeguard so problematic jobs won&#39;t get restarted indefinitely (e.g. if the job processor always crashes its Node process), jobs will be recovered from a stalled state a maximum of &lt;code&gt;maxStalledCount&lt;/code&gt; times (default: &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
