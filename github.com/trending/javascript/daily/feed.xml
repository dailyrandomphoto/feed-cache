<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Fri, 21 Jan 2022 01:51:01 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>marktext/marktext</title>
      <link>https://github.com/marktext/marktext</link>
      <description>&lt;p&gt;üìùA simple and elegant markdown editor, available for Linux, macOS and Windows.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/static/logo-small.png&quot; alt=&quot;MarkText&quot; width=&quot;100&quot; height=&quot;100&quot;&gt;&lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt;MarkText&lt;/h1&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://twitter.com/intent/tweet?via=marktextme&amp;amp;url=https://github.com/marktext/marktext/&amp;amp;text=What%20do%20you%20want%20to%20say%20to%20app?&amp;amp;hashtags=happyMarkText&quot;&gt; &lt;img src=&quot;https://img.shields.io/twitter/url/https/github.com/marktext/marktext.svg?style=for-the-badge&quot; alt=&quot;twitter&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;strong&gt;&lt;span&gt;üîÜ&lt;/span&gt; Next generation markdown editor &lt;span&gt;üåô&lt;/span&gt;&lt;/strong&gt;
 &lt;br&gt; A simple and elegant open-source markdown editor that focused on speed and usability.
 &lt;br&gt; 
 &lt;sub&gt;Available for Linux, macOS and Windows.&lt;/sub&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;!-- Version --&gt; 
 &lt;a href=&quot;https://marktext.github.io/website&quot;&gt; &lt;img src=&quot;https://badge.fury.io/gh/jocs%2Fmarktext.svg?sanitize=true&quot; alt=&quot;website&quot;&gt; &lt;/a&gt; 
 &lt;!-- License --&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/license/marktext/marktext.svg?sanitize=true&quot; alt=&quot;LICENSE&quot;&gt; &lt;/a&gt; 
 &lt;!-- Build Status --&gt; 
 &lt;a href=&quot;https://travis-ci.org/marktext/marktext/&quot;&gt; &lt;img src=&quot;https://travis-ci.org/marktext/marktext.svg?branch=master&quot; alt=&quot;build&quot;&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://ci.appveyor.com/project/marktext/marktext/branch/master&quot;&gt; &lt;img src=&quot;https://ci.appveyor.com/api/projects/status/l4gxgydj0i95hmxg/branch/master?svg=true&quot; alt=&quot;build&quot;&gt; &lt;/a&gt; 
 &lt;!-- Downloads total --&gt; 
 &lt;a href=&quot;https://github.com/marktext/marktext/releases&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/marktext/marktext/total.svg?sanitize=true&quot; alt=&quot;total download&quot;&gt; &lt;/a&gt; 
 &lt;!-- Downloads latest release --&gt; 
 &lt;a href=&quot;https://github.com/marktext/marktext/releases/latest&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/downloads/marktext/marktext/v0.16.3/total.svg?sanitize=true&quot; alt=&quot;latest download&quot;&gt; &lt;/a&gt; 
 &lt;!-- sponsors --&gt; 
 &lt;a href=&quot;https://opencollective.com/marktext&quot;&gt; &lt;img src=&quot;https://opencollective.com/marktext/tiers/silver-sponsors/badge.svg?label=SilverSponsors&amp;amp;color=brightgreen&quot; alt=&quot;sponsors&quot;&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;h3&gt; &lt;a href=&quot;https://marktext.app&quot;&gt; Website &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://github.com/marktext/marktext#features&quot;&gt; Features &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://github.com/marktext/marktext#download-and-installation&quot;&gt; Downloads &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://github.com/marktext/marktext#development&quot;&gt; Development &lt;/a&gt; &lt;span&gt; | &lt;/span&gt; &lt;a href=&quot;https://github.com/marktext/marktext#contribution&quot;&gt; Contribution &lt;/a&gt; &lt;/h3&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;sub&gt;Translations:&lt;/sub&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/zh_cn.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üá®üá≥&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/zh_tw.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üáπüáº&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/pl.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üáµüá±&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/ja.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üáØüáµ&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/french.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üá´üá∑&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/tr.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üáπüá∑&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/spanish.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üá™üá∏&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/pt.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üáµüáπ&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
 &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/i18n/ko.md#readme&quot;&gt; &lt;span&gt;&lt;span&gt;üá∞üá∑&lt;/span&gt;&lt;/span&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;sub&gt;This Markdown editor that could. Built with ‚ù§Ô∏é by &lt;a href=&quot;https://github.com/Jocs&quot;&gt;Jocs&lt;/a&gt; and &lt;a href=&quot;https://github.com/marktext/marktext/graphs/contributors&quot;&gt; contributors &lt;/a&gt; &lt;/sub&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;h2 align=&quot;center&quot;&gt;Supporting MarkText&lt;/h2&gt; 
&lt;p&gt;MarkText is an MIT licensed open source project, and the latest version will always be downloadable for free from the GitHub release page. MarkText is still in development, and its development is inseparable from all sponsors. I hope you join them:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.patreon.com/ranluo&quot;&gt;Become a backer or sponsor on Patreon&lt;/a&gt; or &lt;a href=&quot;https://github.com/Jocs/sponsor.me&quot;&gt;One time donation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://opencollective.com/marktext&quot;&gt;Become a backer or sponsor on Open Collective&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h5&gt;What&#39;s the difference between Patreon and Open Collective?&lt;/h5&gt; 
&lt;p&gt;Patreon: Funds will be directly sponsored to Luo Ran (@jocs) who created MarkText and continues to maintain it. Open Collective: All expenses are transparent. The funds will be used for the development and maintenance of MarkText, funding online and offline activities, and acquiring other necessary resources. Names and company logos of all sponsors (from both Patreon and Open Collective) will appear on the official website for MarkText and in its README.md file.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Special Sponsors&lt;/strong&gt;&lt;/p&gt; 
&lt;a href=&quot;https://www.dogedoge.com/&quot;&gt; &lt;img src=&quot;https://www.dogedoge.com/assets/new_logo.min.png&quot; width=&quot;100&quot; height=&quot;100&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;strong&gt;Platinum Sponsors&lt;/strong&gt;&lt;/p&gt; 
&lt;a href=&quot;https://opencollective.com/marktext#platinum-sponsors&quot;&gt; &lt;img src=&quot;https://opencollective.com/marktext/tiers/platinum-sponsors.svg?avatarHeight=36&amp;amp;width=600&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;strong&gt;Gold Sponsors&lt;/strong&gt;&lt;/p&gt; 
&lt;a href=&quot;https://opencollective.com/marktext#platinum-sponsors&quot;&gt; &lt;img src=&quot;https://opencollective.com/marktext/tiers/gold-sponsors.svg?avatarHeight=36&amp;amp;width=600&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;strong&gt;Silver Sponsors&lt;/strong&gt;&lt;/p&gt; 
&lt;a href=&quot;https://opencollective.com/marktext#platinum-sponsors&quot;&gt; &lt;img src=&quot;https://opencollective.com/marktext/tiers/silver-sponsors.svg?avatarHeight=36&amp;amp;width=600&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;strong&gt;Bronze Sponsors&lt;/strong&gt;&lt;/p&gt; 
&lt;a href=&quot;https://opencollective.com/marktext#platinum-sponsors&quot;&gt; &lt;img src=&quot;https://opencollective.com/marktext/tiers/bronze-sponsors.svg?avatarHeight=36&amp;amp;width=600&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;strong&gt;Backers&lt;/strong&gt;&lt;/p&gt; 
&lt;a href=&quot;https://opencollective.com/marktext#backers&quot;&gt; &lt;img src=&quot;https://opencollective.com/marktext/tiers/backer.svg?avatarHeight=36&amp;amp;width=600&quot;&gt; &lt;/a&gt; 
&lt;h2&gt;Screenshot&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/marktext.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Realtime preview (WYSIWYG) and a clean and simple interface to get a distraction-free writing experience.&lt;/li&gt; 
 &lt;li&gt;Support &lt;a href=&quot;https://spec.commonmark.org/0.29/&quot;&gt;CommonMark Spec&lt;/a&gt;, &lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;GitHub Flavored Markdown Spec&lt;/a&gt; and selective support &lt;a href=&quot;https://pandoc.org/MANUAL.html#pandocs-markdown&quot;&gt;Pandoc markdown&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Markdown extensions such as math expressions (KaTeX), front matter and emojis.&lt;/li&gt; 
 &lt;li&gt;Support paragraphs and inline style shortcuts to improve your writing efficiency.&lt;/li&gt; 
 &lt;li&gt;Output &lt;strong&gt;HTML&lt;/strong&gt; and &lt;strong&gt;PDF&lt;/strong&gt; files.&lt;/li&gt; 
 &lt;li&gt;Various themes: &lt;strong&gt;Cadmium Light&lt;/strong&gt;, &lt;strong&gt;Material Dark&lt;/strong&gt; etc.&lt;/li&gt; 
 &lt;li&gt;Various editing modes: &lt;strong&gt;Source Code mode&lt;/strong&gt;, &lt;strong&gt;Typewriter mode&lt;/strong&gt;, &lt;strong&gt;Focus mode&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;Paste images directly from clipboard&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4 align=&quot;center&quot;&gt;&lt;span&gt;üåô&lt;/span&gt;themes&lt;span&gt;üîÜ&lt;/span&gt;&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Cadmium Light&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Dark&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/themeImages/cadmium-light.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/themeImages/dark.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;Graphite Light&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Material Dark&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/themeImages/graphite-light.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/themeImages/materal-dark.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;Ulysses Light&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;One Dark&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/themeImages/ulysses-light.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/themeImages/one-dark.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h4 align=&quot;center&quot;&gt;&lt;span&gt;üò∏&lt;/span&gt;Edit modes&lt;span&gt;üê∂&lt;/span&gt;&lt;/h4&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;Source Code&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Typewriter&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Focus&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/source.gif&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/typewriter.gif&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/focus.gif&quot; alt=&quot;&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Why make another editor?&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;I love writing. I have used a lot of markdown editors, yet there is still not an editor that can fully meet my needs. I don&#39;t like to be disturbed when I write by some unbearable bug. &lt;strong&gt;MarkText&lt;/strong&gt; uses virtual DOM to render pages which has the added benefits of being highly efficient and being open source. That way anyone who loves markdown and writing can use MarkText.&lt;/li&gt; 
 &lt;li&gt;As mentioned above, &lt;strong&gt;MarkText&lt;/strong&gt; is completely free and open source and will be open source forever. We hope that all markdown lovers will contribute their own code and help develop &lt;strong&gt;MarkText&lt;/strong&gt; into a popular markdown editor.&lt;/li&gt; 
 &lt;li&gt;There are many markdown editors and all have their own merits, some have features which others don&#39;t. It&#39;s difficult to satisfy each markdown users&#39; needs but we hope &lt;strong&gt;MarkText&lt;/strong&gt; will be able to satisfy each markdown user as much as possible. Although the latest &lt;strong&gt;MarkText&lt;/strong&gt; is still not perfect, we will try to make it as best as we possibly can.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Download and Installation&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/static/v1.svg?label=Platform&amp;amp;message=Linux-64%20%7C%20macOS-64%20%7C%20Win-32%20%7C%20Win-64&amp;amp;style=for-the-badge&quot; alt=&quot;platform&quot;&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/ryanoasis/nerd-fonts/screenshots/v1.0.x/mac-pass-sm.png&quot; alt=&quot;&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/ryanoasis/nerd-fonts/screenshots/v1.0.x/windows-pass-sm.png&quot; alt=&quot;&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wiki/ryanoasis/nerd-fonts/screenshots/v1.0.x/linux-pass-sm.png&quot; alt=&quot;&quot;&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/marktext/marktext/releases/download/v0.16.3/marktext.dmg&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/marktext/marktext/latest/marktext.dmg.svg?sanitize=true&quot; alt=&quot;latest version&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/marktext/marktext/releases/download/v0.16.3/marktext-setup.exe&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/marktext/marktext/latest/marktext-setup.exe.svg?sanitize=true&quot; alt=&quot;latest version&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/marktext/marktext/releases/download/v0.16.3/marktext-x86_64.AppImage&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/marktext/marktext/latest/marktext-x86_64.AppImage.svg?sanitize=true&quot; alt=&quot;latest version&quot;&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Want to see new features of the latest version? Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/.github/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;macOS&lt;/h4&gt; 
&lt;p&gt;You can either download the latest &lt;code&gt;marktext-%version%.dmg&lt;/code&gt; from the &lt;a href=&quot;https://github.com/marktext/marktext/releases/latest&quot;&gt;release page&lt;/a&gt; or install &lt;strong&gt;MarkText&lt;/strong&gt; using &lt;a href=&quot;https://github.com/caskroom/homebrew-cask&quot;&gt;&lt;strong&gt;homebrew cask&lt;/strong&gt;&lt;/a&gt;. To use Homebrew-Cask you just need to have &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; installed.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install --cask mark-text
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Windows&lt;/h4&gt; 
&lt;p&gt;Simply download and install &lt;strong&gt;MarkText&lt;/strong&gt; via setup wizard (&lt;code&gt;marktext-setup-%version%.exe&lt;/code&gt;) and choose whether to install per-user or machine wide.&lt;/p&gt; 
&lt;p&gt;Alternatively, install MarkText using a package manager such as &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt; or &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/package-manager/winget/&quot;&gt;Winget&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;To use Chocolatey you need to have &lt;a href=&quot;https://chocolatey.org/install&quot;&gt;Chocolatey&lt;/a&gt; installed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;choco install marktext
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;To use Winget you need to have &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/package-manager/winget/#install-winget&quot;&gt;Winget&lt;/a&gt; installed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;winget install marktext
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Linux&lt;/h4&gt; 
&lt;p&gt;Please follow the &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/LINUX.md&quot;&gt;Linux installation instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Other&lt;/h4&gt; 
&lt;p&gt;All binaries for Linux, macOS and Windows can be downloaded from the &lt;a href=&quot;https://github.com/marktext/marktext/releases/latest&quot;&gt;release page&lt;/a&gt;. If a version is unavailable for your system, then please open an &lt;a href=&quot;https://github.com/marktext/marktext/issues&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;If you wish to build &lt;strong&gt;MarkText&lt;/strong&gt; yourself, please check out our &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/dev/BUILD.md&quot;&gt;build instructions&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/README.md&quot;&gt;User documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/docs/dev/README.md&quot;&gt;Developer documentation&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you have any questions regarding &lt;strong&gt;MarkText&lt;/strong&gt;, you are welcome to write an issue. When doing so please use the default format found when opening an issue. Of course, if you submit a PR directly, it will be greatly appreciated.&lt;/p&gt; 
&lt;h2&gt;Integrations&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.packal.org/workflow/mark-text&quot;&gt;Alfred Workflow&lt;/a&gt;: A Workflow for the macOS app Alfred: Use &quot;mt&quot; to open files/folder with MarkText.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contribution&lt;/h2&gt; 
&lt;p&gt;MarkText is in development, please make sure to read the &lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; before making a pull request. Want to add some features to MarkText? Refer to our &lt;a href=&quot;https://github.com/marktext/marktext/projects&quot;&gt;roadmap&lt;/a&gt; and open issues.&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;Thank you to all the people who have already contributed to MarkText[&lt;a href=&quot;https://github.com/marktext/marktext/graphs/contributors&quot;&gt;contributors&lt;/a&gt;]&lt;/p&gt; 
&lt;p&gt;Special thanks to @&lt;a href=&quot;https://github.com/Yasujizr&quot;&gt;Yasujizr&lt;/a&gt; who designed the MarkText logo.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/marktext/marktext/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/marktext/contributors.svg?width=890&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/marktext/marktext/develop/LICENSE&quot;&gt;&lt;strong&gt;MIT&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bgithub.com%2Fmarktext%2Fmarktext?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fmarktext%2Fmarktext.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gchq/CyberChef</title>
      <link>https://github.com/gchq/CyberChef</link>
      <description>&lt;p&gt;The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CyberChef&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/gchq/CyberChef/actions?query=workflow%3A%22Master+Build%2C+Test+%26+Deploy%22&quot;&gt;&lt;img src=&quot;https://github.com/gchq/CyberChef/workflows/Master%20Build,%20Test%20&amp;amp;%20Deploy/badge.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/gchq/CyberChef/context:javascript&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/grade/javascript/g/gchq/CyberChef.svg?logo=lgtm&amp;amp;logoWidth=18&quot; alt=&quot;Language grade: JavaScript&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/gchq/CyberChef&quot;&gt;&lt;img src=&quot;https://david-dm.org/gchq/CyberChef/status.svg?sanitize=true&quot; alt=&quot;dependencies Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/cyberchef&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/cyberchef.svg?sanitize=true&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/gchq/CyberChef/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/gchq/CyberChef?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/gchq/CyberChef.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;em&gt;The Cyber Swiss Army Knife&lt;/em&gt;&lt;/h4&gt; 
&lt;p&gt;CyberChef is a simple, intuitive web app for carrying out all manner of &quot;cyber&quot; operations within a web browser. These operations include simple encoding like XOR or Base64, more complex encryption like AES, DES and Blowfish, creating binary and hexdumps, compression and decompression of data, calculating hashes and checksums, IPv6 and X.509 parsing, changing character encodings, and much more.&lt;/p&gt; 
&lt;p&gt;The tool is designed to enable both technical and non-technical analysts to manipulate data in complex ways without having to deal with complex tools or algorithms. It was conceived, designed, built and incrementally improved by an analyst in their 10% innovation time over several years.&lt;/p&gt; 
&lt;h2&gt;Live demo&lt;/h2&gt; 
&lt;p&gt;CyberChef is still under active development. As a result, it shouldn&#39;t be considered a finished product. There is still testing and bug fixing to do, new features to be added and additional documentation to write. Please contribute!&lt;/p&gt; 
&lt;p&gt;Cryptographic operations in CyberChef should not be relied upon to provide security in any situation. No guarantee is offered for their correctness.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef&quot;&gt;A live demo can be found here&lt;/a&gt; - have fun!&lt;/p&gt; 
&lt;h2&gt;How it works&lt;/h2&gt; 
&lt;p&gt;There are four main areas in CyberChef:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The &lt;strong&gt;input&lt;/strong&gt; box in the top right, where you can paste, type or drag the text or file you want to operate on.&lt;/li&gt; 
 &lt;li&gt;The &lt;strong&gt;output&lt;/strong&gt; box in the bottom right, where the outcome of your processing will be displayed.&lt;/li&gt; 
 &lt;li&gt;The &lt;strong&gt;operations&lt;/strong&gt; list on the far left, where you can find all the operations that CyberChef is capable of in categorised lists, or by searching.&lt;/li&gt; 
 &lt;li&gt;The &lt;strong&gt;recipe&lt;/strong&gt; area in the middle, where you can drag the operations that you want to use and specify arguments and options.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can use as many operations as you like in simple or complex ways. Some examples are as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Base64(&#39;A-Za-z0-9%2B/%3D&#39;,true)&amp;amp;input=VTI4Z2JHOXVaeUJoYm1RZ2RHaGhibXR6SUdadmNpQmhiR3dnZEdobElHWnBjMmd1&quot;&gt;Decode a Base64-encoded string&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Translate_DateTime_Format(&#39;Standard%20date%20and%20time&#39;,&#39;DD/MM/YYYY%20HH:mm:ss&#39;,&#39;UTC&#39;,&#39;dddd%20Do%20MMMM%20YYYY%20HH:mm:ss%20Z%20z&#39;,&#39;Australia/Queensland&#39;)&amp;amp;input=MTUvMDYvMjAxNSAyMDo0NTowMA&quot;&gt;Convert a date and time to a different time zone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Parse_IPv6_address()&amp;amp;input=MjAwMTowMDAwOjQxMzY6ZTM3ODo4MDAwOjYzYmY6M2ZmZjpmZGQy&quot;&gt;Parse a Teredo IPv6 address&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Hexdump()Gunzip()&amp;amp;input=MDAwMDAwMDAgIDFmIDhiIDA4IDAwIDEyIGJjIGYzIDU3IDAwIGZmIDBkIGM3IGMxIDA5IDAwIDIwICB8Li4uLi6881cu/y7HwS4uIHwKMDAwMDAwMTAgIDA4IDA1IGQwIDU1IGZlIDA0IDJkIGQzIDA0IDFmIGNhIDhjIDQ0IDIxIDViIGZmICB8Li7QVf4uLdMuLsouRCFb/3wKMDAwMDAwMjAgIDYwIGM3IGQ3IDAzIDE2IGJlIDQwIDFmIDc4IDRhIDNmIDA5IDg5IDBiIDlhIDdkICB8YMfXLi6%2BQC54Sj8uLi4ufXwKMDAwMDAwMzAgIDRlIGM4IDRlIDZkIDA1IDFlIDAxIDhiIDRjIDI0IDAwIDAwIDAwICAgICAgICAgICB8TshObS4uLi5MJC4uLnw&quot;&gt;Convert data from a hexdump, then decompress&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=RC4(%7B&#39;option&#39;:&#39;UTF8&#39;,&#39;string&#39;:&#39;secret&#39;%7D,&#39;Hex&#39;,&#39;Hex&#39;)Disassemble_x86(&#39;64&#39;,&#39;Full%20x86%20architecture&#39;,16,0,true,true)&amp;amp;input=MjFkZGQyNTQwMTYwZWU2NWZlMDc3NzEwM2YyYTM5ZmJlNWJjYjZhYTBhYWJkNDE0ZjkwYzZjYWY1MzEyNzU0YWY3NzRiNzZiM2JiY2QxOTNjYjNkZGZkYmM1YTI2NTMzYTY4NmI1OWI4ZmVkNGQzODBkNDc0NDIwMWFlYzIwNDA1MDcxMzhlMmZlMmIzOTUwNDQ2ZGIzMWQyYmM2MjliZTRkM2YyZWIwMDQzYzI5M2Q3YTVkMjk2MmMwMGZlNmRhMzAwNzJkOGM1YTZiNGZlN2Q4NTlhMDQwZWVhZjI5OTczMzYzMDJmNWEwZWMxOQ&quot;&gt;Decrypt and disassemble shellcode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Fork(&#39;%5C%5Cn&#39;,&#39;%5C%5Cn&#39;,false)From_UNIX_Timestamp(&#39;Seconds%20(s)&#39;)&amp;amp;input=OTc4MzQ2ODAwCjEwMTI2NTEyMDAKMTA0NjY5NjQwMAoxMDgxMDg3MjAwCjExMTUzMDUyMDAKMTE0OTYwOTYwMA&quot;&gt;Display multiple timestamps as full dates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Fork(&#39;%5C%5Cn&#39;,&#39;%5C%5Cn&#39;,false)Conditional_Jump(&#39;1&#39;,false,&#39;base64&#39;,10)To_Hex(&#39;Space&#39;)Return()Label(&#39;base64&#39;)To_Base64(&#39;A-Za-z0-9%2B/%3D&#39;)&amp;amp;input=U29tZSBkYXRhIHdpdGggYSAxIGluIGl0ClNvbWUgZGF0YSB3aXRoIGEgMiBpbiBpdA&quot;&gt;Carry out different operations on data of different types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Register(&#39;key%3D(%5B%5C%5Cda-f%5D*)&#39;,true,false)Find_/_Replace(%7B&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;.*data%3D(.*)&#39;%7D,&#39;$1&#39;,true,false,true)RC4(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;$R0&#39;%7D,&#39;Hex&#39;,&#39;Latin1&#39;)&amp;amp;input=aHR0cDovL21hbHdhcmV6LmJpei9iZWFjb24ucGhwP2tleT0wZTkzMmE1YyZkYXRhPThkYjdkNWViZTM4NjYzYTU0ZWNiYjMzNGUzZGIxMQ&quot;&gt;Use parts of the input as arguments to operations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Register(&#39;(.%7B32%7D)&#39;,true,false)Drop_bytes(0,32,false)AES_Decrypt(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;1748e7179bd56570d51fa4ba287cc3e5&#39;%7D,%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;$R0&#39;%7D,&#39;CTR&#39;,&#39;Hex&#39;,&#39;Raw&#39;,%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;&#39;%7D)&amp;amp;input=NTFlMjAxZDQ2MzY5OGVmNWY3MTdmNzFmNWI0NzEyYWYyMGJlNjc0YjNiZmY1M2QzODU0NjM5NmVlNjFkYWFjNDkwOGUzMTljYTNmY2Y3MDg5YmZiNmIzOGVhOTllNzgxZDI2ZTU3N2JhOWRkNmYzMTFhMzk0MjBiODk3OGU5MzAxNGIwNDJkNDQ3MjZjYWVkZjU0MzZlYWY2NTI0MjljMGRmOTRiNTIxNjc2YzdjMmNlODEyMDk3YzI3NzI3M2M3YzcyY2Q4OWFlYzhkOWZiNGEyNzU4NmNjZjZhYTBhZWUyMjRjMzRiYTNiZmRmN2FlYjFkZGQ0Nzc2MjJiOTFlNzJjOWU3MDlhYjYwZjhkYWY3MzFlYzBjYzg1Y2UwZjc0NmZmMTU1NGE1YTNlYzI5MWNhNDBmOWU2MjlhODcyNTkyZDk4OGZkZDgzNDUzNGFiYTc5YzFhZDE2NzY3NjlhN2MwMTBiZjA0NzM5ZWNkYjY1ZDk1MzAyMzcxZDYyOWQ5ZTM3ZTdiNGEzNjFkYTQ2OGYxZWQ1MzU4OTIyZDJlYTc1MmRkMTFjMzY2ZjMwMTdiMTRhYTAxMWQyYWYwM2M0NGY5NTU3OTA5OGExNWUzY2Y5YjQ0ODZmOGZmZTljMjM5ZjM0ZGU3MTUxZjZjYTY1MDBmZTRiODUwYzNmMWMwMmU4MDFjYWYzYTI0NDY0NjE0ZTQyODAxNjE1YjhmZmFhMDdhYzgyNTE0OTNmZmRhN2RlNWRkZjMzNjg4ODBjMmI5NWIwMzBmNDFmOGYxNTA2NmFkZDA3MWE2NmNmNjBlNWY0NmYzYTIzMGQzOTdiNjUyOTYzYTIxYTUzZg&quot;&gt;Perform AES decryption, extracting the IV from the beginning of the cipher stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Magic(3,false,false)&amp;amp;input=V1VhZ3dzaWFlNm1QOGdOdENDTFVGcENwQ0IyNlJtQkRvREQ4UGFjZEFtekF6QlZqa0syUXN0RlhhS2hwQzZpVVM3UkhxWHJKdEZpc29SU2dvSjR3aGptMWFybTg2NHFhTnE0UmNmVW1MSHJjc0FhWmM1VFhDWWlmTmRnUzgzZ0RlZWpHWDQ2Z2FpTXl1QlY2RXNrSHQxc2NnSjg4eDJ0TlNvdFFEd2JHWTFtbUNvYjJBUkdGdkNLWU5xaU45aXBNcTFaVTFtZ2tkYk51R2NiNzZhUnRZV2hDR1VjOGc5M1VKdWRoYjhodHNoZVpud1RwZ3FoeDgzU1ZKU1pYTVhVakpUMnptcEM3dVhXdHVtcW9rYmRTaTg4WXRrV0RBYzFUb291aDJvSDRENGRkbU5LSldVRHBNd21uZ1VtSzE0eHdtb21jY1BRRTloTTE3MkFQblNxd3hkS1ExNzJSa2NBc3lzbm1qNWdHdFJtVk5OaDJzMzU5d3I2bVMyUVJQ&quot;&gt;Automagically detect several layers of nested encoding&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Drag and drop 
  &lt;ul&gt; 
   &lt;li&gt;Operations can be dragged in and out of the recipe list, or reorganised.&lt;/li&gt; 
   &lt;li&gt;Files up to 2GB can be dragged over the input box to load them directly into the browser.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Auto Bake 
  &lt;ul&gt; 
   &lt;li&gt;Whenever you modify the input or the recipe, CyberChef will automatically &quot;bake&quot; for you and produce the output immediately.&lt;/li&gt; 
   &lt;li&gt;This can be turned off and operated manually if it is affecting performance (if the input is very large, for instance).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Automated encoding detection 
  &lt;ul&gt; 
   &lt;li&gt;CyberChef uses &lt;a href=&quot;https://github.com/gchq/CyberChef/wiki/Automatic-detection-of-encoded-data-using-CyberChef-Magic&quot;&gt;a number of techniques&lt;/a&gt; to attempt to automatically detect which encodings your data is under. If it finds a suitable operation which can make sense of your data, it displays the &#39;magic&#39; icon in the Output field which you can click to decode your data.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Breakpoints 
  &lt;ul&gt; 
   &lt;li&gt;You can set breakpoints on any operation in your recipe to pause execution before running it.&lt;/li&gt; 
   &lt;li&gt;You can also step through the recipe one operation at a time to see what the data looks like at each stage.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Save and load recipes 
  &lt;ul&gt; 
   &lt;li&gt;If you come up with an awesome recipe that you know you‚Äôll want to use again, just click &quot;Save recipe&quot; and add it to your local storage. It&#39;ll be waiting for you next time you visit CyberChef.&lt;/li&gt; 
   &lt;li&gt;You can also copy the URL, which includes your recipe and input, to easily share it with others.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Search 
  &lt;ul&gt; 
   &lt;li&gt;If you know the name of the operation you want or a word associated with it, start typing it into the search field and any matching operations will immediately be shown.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Highlighting 
  &lt;ul&gt; 
   &lt;li&gt;When you highlight text in the input or output, the offset and length values will be displayed and, if possible, the corresponding data will be highlighted in the output or input respectively (example: &lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=XOR(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;3a&#39;%7D,&#39;Standard&#39;,false)To_Hexdump(16,false,false)&amp;amp;input=VGhlIGFuc3dlciB0byB0aGUgdWx0aW1hdGUgcXVlc3Rpb24gb2YgbGlmZSwgdGhlIFVuaXZlcnNlLCBhbmQgZXZlcnl0aGluZyBpcyA0Mi4&quot;&gt;highlight the word &#39;question&#39; in the input to see where it appears in the output&lt;/a&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Save to file and load from file 
  &lt;ul&gt; 
   &lt;li&gt;You can save the output to a file at any time or load a file by dragging and dropping it into the input field. Files up to around 2GB are supported (depending on your browser), however some operations may take a very long time to run over this much data.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CyberChef is entirely client-side 
  &lt;ul&gt; 
   &lt;li&gt;It should be noted that none of your recipe configuration or input (either text or files) is ever sent to the CyberChef web server - all processing is carried out within your browser, on your own computer.&lt;/li&gt; 
   &lt;li&gt;Due to this feature, CyberChef can be downloaded and run locally. You can use the link in the top left corner of the app to download a full copy of CyberChef and drop it into a virtual machine, share it with other people, or host it in a closed network.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Deep linking&lt;/h2&gt; 
&lt;p&gt;By manipulation of CyberChef&#39;s URL hash, you can change the initial settings with which the page opens. The format is &lt;code&gt;https://gchq.github.io/CyberChef/#recipe=Operation()&amp;amp;input=...&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Supported arguments are &lt;code&gt;recipe&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt; (encoded in Base64), and &lt;code&gt;theme&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Browser support&lt;/h2&gt; 
&lt;p&gt;CyberChef is built to support&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Google Chrome 50+&lt;/li&gt; 
 &lt;li&gt;Mozilla Firefox 38+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Node.js support&lt;/h2&gt; 
&lt;p&gt;CyberChef is built to fully support Node.js &lt;code&gt;v10&lt;/code&gt; and partially supports &lt;code&gt;v12&lt;/code&gt;. Named imports using a deep import specifier does not work in &lt;code&gt;v12&lt;/code&gt;. For more information, see the Node API page in the project &lt;a href=&quot;https://github.com/gchq/CyberChef/wiki&quot;&gt;wiki pages&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributing a new operation to CyberChef is super easy! There is a quickstart script which will walk you through the process. If you can write basic JavaScript, you can write a CyberChef operation.&lt;/p&gt; 
&lt;p&gt;An installation walkthrough, how-to guides for adding new operations and themes, descriptions of the repository structure, available data types and coding conventions can all be found in the project &lt;a href=&quot;https://github.com/gchq/CyberChef/wiki&quot;&gt;wiki pages&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Push your changes to your fork.&lt;/li&gt; 
 &lt;li&gt;Submit a pull request. If you are doing this for the first time, you will be prompted to sign the &lt;a href=&quot;https://cla-assistant.io/gchq/CyberChef&quot;&gt;GCHQ Contributor Licence Agreement&lt;/a&gt; via the CLA assistant on the pull request. This will also ask whether you are happy for GCHQ to contact you about a token of thanks for your contribution, or about job opportunities at GCHQ.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Licencing&lt;/h2&gt; 
&lt;p&gt;CyberChef is released under the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache 2.0 Licence&lt;/a&gt; and is covered by &lt;a href=&quot;https://www.nationalarchives.gov.uk/information-management/re-using-public-sector-information/copyright-and-re-use/crown-copyright/&quot;&gt;Crown Copyright&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>facebook/react</title>
      <link>https://github.com/facebook/react</link>
      <description>&lt;p&gt;A declarative, efficient, and flexible JavaScript library for building user interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; ¬∑ &lt;a href=&quot;https://github.com/facebook/react/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;GitHub license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/react.svg?style=flat&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/facebook/react&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/facebook/react.svg?style=shield&amp;amp;circle-token=:circle-token&quot; alt=&quot;CircleCI Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&quot; alt=&quot;PRs Welcome&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;p&gt;React is a JavaScript library for building user interfaces.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Declarative:&lt;/strong&gt; React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Component-Based:&lt;/strong&gt; Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Learn Once, Write Anywhere:&lt;/strong&gt; We don&#39;t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using &lt;a href=&quot;https://reactnative.dev/&quot;&gt;React Native&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;Learn how to use React in your own project&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;React has been designed for gradual adoption from the start, and &lt;strong&gt;you can use as little or as much React as you need&lt;/strong&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use &lt;a href=&quot;https://reactjs.org/docs/getting-started.html#online-playgrounds&quot;&gt;Online Playgrounds&lt;/a&gt; to get a taste of React.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/add-react-to-a-website.html&quot;&gt;Add React to a Website&lt;/a&gt; as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in one minute.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/create-a-new-react-app.html&quot;&gt;Create a New React App&lt;/a&gt; if you&#39;re looking for a powerful JavaScript toolchain.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can use React as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag from a &lt;a href=&quot;https://reactjs.org/docs/cdn-links.html&quot;&gt;CDN&lt;/a&gt;, or as a &lt;code&gt;react&lt;/code&gt; package on &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;You can find the React documentation &lt;a href=&quot;https://reactjs.org/&quot;&gt;on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Check out the &lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;Getting Started&lt;/a&gt; page for a quick overview.&lt;/p&gt; 
&lt;p&gt;The documentation is divided into several sections:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/tutorial/tutorial.html&quot;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hello-world.html&quot;&gt;Main Concepts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/jsx-in-depth.html&quot;&gt;Advanced Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/react-api.html&quot;&gt;API Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/community/support.html&quot;&gt;Where to Get Support&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/how-to-contribute.html&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can improve it by sending pull requests to &lt;a href=&quot;https://github.com/reactjs/reactjs.org&quot;&gt;this repository&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;p&gt;We have several examples &lt;a href=&quot;https://reactjs.org/&quot;&gt;on the website&lt;/a&gt;. Here is the first one to get you started:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function HelloMessage({ name }) {
  return &amp;lt;div&amp;gt;Hello {name}&amp;lt;/div&amp;gt;;
}

ReactDOM.render(
  &amp;lt;HelloMessage name=&quot;Taylor&quot; /&amp;gt;,
  document.getElementById(&#39;container&#39;)
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This example will render &quot;Hello Taylor&quot; into a container on the page.&lt;/p&gt; 
&lt;p&gt;You&#39;ll notice that we used an HTML-like syntax; &lt;a href=&quot;https://reactjs.org/docs/introducing-jsx.html&quot;&gt;we call it JSX&lt;/a&gt;. JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. If you&#39;re using React as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, read &lt;a href=&quot;https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx&quot;&gt;this section&lt;/a&gt; on integrating JSX; otherwise, the &lt;a href=&quot;https://reactjs.org/docs/create-a-new-react-app.html&quot;&gt;recommended JavaScript toolchains&lt;/a&gt; handle it automatically.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://code.fb.com/codeofconduct&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read &lt;a href=&quot;https://code.fb.com/codeofconduct&quot;&gt;the full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://reactjs.org/contributing/how-to-contribute.html&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://reactjs.org/contributing/how-to-contribute.html&quot;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.&lt;/p&gt; 
&lt;h3&gt;Good First Issues&lt;/h3&gt; 
&lt;p&gt;To help you get your feet wet and get you familiar with our contribution process, we have a list of &lt;a href=&quot;https://github.com/facebook/react/labels/good%20first%20issue&quot;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;React is &lt;a href=&quot;https://raw.githubusercontent.com/facebook/react/main/LICENSE&quot;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mengshukeji/Luckysheet</title>
      <link>https://github.com/mengshukeji/Luckysheet</link>
      <description>&lt;p&gt;Luckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/docs/.vuepress/public/img/logo_text.png&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;a href=&quot;https://gitter.im/mengshukeji/Luckysheet?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/mengshukeji/Luckysheet.svg?sanitize=true&quot; alt=&quot;Join the chat at https://gitter.im/mengshukeji/Luckysheet&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=luckysheet&quot;&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/luckysheet?style=social&amp;amp;logo=twitter&quot; alt=&quot;follow on Twitter&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;Luckysheet 3.x is currently being rewritten in Typescript&lt;/h1&gt; 
&lt;p&gt;English| &lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/README-zh.md&quot;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;üöÄLuckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Source Code&lt;/th&gt; 
   &lt;th&gt;Documentation&lt;/th&gt; 
   &lt;th&gt;Demo&lt;/th&gt; 
   &lt;th&gt;Plugins Demo&lt;/th&gt; 
   &lt;th&gt;Forum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mengshukeji/Luckysheet&quot;&gt;Github&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/&quot;&gt;Online Documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDemo&quot;&gt;Online Demo&lt;/a&gt; / &lt;a href=&quot;http://luckysheet.lashuju.com/demo/&quot;&gt;Cooperative editing demo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://mengshukeji.github.io/LuckyexcelDemo/&quot;&gt;Import Excel Demo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://support.qq.com/product/288322&quot;&gt;Chinese Forum&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://gitee.com/mengshukeji/Luckysheet&quot;&gt;Gitee Mirror&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://mengshukeji.gitee.io/LuckysheetDocs/&quot;&gt;Gitee Online Documentation&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://mengshukeji.gitee.io/luckysheetdemo/&quot;&gt;Gitee Online Demo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://mengshukeji.gitee.io/luckyexceldemo/&quot;&gt;Gitee Import Excel Demo&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://groups.google.com/g/luckysheet&quot;&gt;Google Group&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/docs/.vuepress/public/img/LuckysheetDemo.gif&quot; alt=&quot;Demo&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Plugins&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/Luckyexcel&quot;&gt;Luckyexcel&lt;/a&gt;: Excel import and export library&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/chartMix&quot;&gt;chartMix&lt;/a&gt;: Chart plugin&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Ecosystem&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Project&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mengshukeji/luckysheet-vue&quot;&gt;Luckysheet Vue&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Luckysheet and Luckyexcel in a vue cli3 project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mengshukeji/luckysheet-react&quot;&gt;Luckysheet React&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Luckysheet in a React project&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mengshukeji/Luckyexcel-node&quot;&gt;Luckyexcel Node&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use Luckyexcel in koa2&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mengshukeji/LuckysheetServer&quot;&gt;Luckysheet Server&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Java backend Luckysheet Server&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mengshukeji/LuckysheetServerStarter&quot;&gt;Luckysheet Server Starter&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;LuckysheetServer docker deployment startup template&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Formatting&lt;/strong&gt;: style, conditional formatting, text alignment and rotation, text truncation, overflow, automatic line wrapping, multiple data types, cell segmentation style&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cells&lt;/strong&gt;: drag and drop, fill handle, multiple selection, find and replace, location, merge cells, data verification&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Row &amp;amp; column&lt;/strong&gt;: hide, insert, delete rows or columns, freeze, and split text&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Operation&lt;/strong&gt;: undo, redo, copy, paste, cut, hot key, format painter, drag and drop selection&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Formulas &amp;amp; Functions&lt;/strong&gt;: Built-in, remote and custom formulas&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Tables&lt;/strong&gt;: filter, sort&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Enhanced functions&lt;/strong&gt;: Pivot tables, charts, comments, cooperative editing, insert picture, matrix calculations, screenshots, copying to other formats, EXCEL import and export, etc.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For a more detailed feature list, please refer to: &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/#features&quot;&gt;Features&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;üìñ Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Priority reading for new users: &lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/wiki/User-Guide&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;For the tutorials, learning materials and supporting solutions provided by the community, please refer to: &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/resource.html&quot;&gt;Tutorials and Resources&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üìú Changelog&lt;/h2&gt; 
&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/CHANGELOG.md&quot;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;‚ùóÔ∏è Issues&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/contribute.html#how-to-submit-issues&quot;&gt;Issue Reporting Checklist&lt;/a&gt; before opening an issue. Issues not conforming to the guidelines may be closed immediately.&lt;/p&gt; 
&lt;h2&gt;‚úÖ TODO&lt;/h2&gt; 
&lt;p&gt;Managed with &lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/projects/1&quot;&gt;GitHub Projects&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;üí™Contribution&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the&lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/guide/contribute.html&quot;&gt; Contributing Guide&lt;/a&gt; before making a pull request.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;First step&lt;/h3&gt; 
&lt;p&gt;Introduce dependencies through CDN&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/css/pluginsCss.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/plugins.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/css/luckysheet.css&#39; /&amp;gt;
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/assets/iconfont/iconfont.css&#39; /&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/js/plugin.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/luckysheet.umd.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Second step&lt;/h3&gt; 
&lt;p&gt;Specify a table container&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;luckysheet&quot; style=&quot;margin:0px;padding:0px;position:absolute;width:100%;height:100%;left: 0px;top: 0px;&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Third step&lt;/h3&gt; 
&lt;p&gt;Create a table&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    $(function () {
        //Configuration item
        var options = {
            container: &#39;luckysheet&#39; //luckysheet is the container id
        }
        luckysheet.create(options)
    })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; Version &amp;gt;= 6&lt;/p&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm install
npm install gulp -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Development&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Package&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Partner project&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ly525/luban-h5&quot;&gt;luban-h5&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MrXujiang/h5-Dooring&quot;&gt;h5-Dooring&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitee.com/monksoul/Furion&quot;&gt;Furion&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Communication&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mengshukeji/Luckysheet/discussions&quot;&gt;Github Discussions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gitter.im/mengshukeji/Luckysheet&quot;&gt;Gitter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mengshukeji/Luckysheet/master/README-zh.md&quot;&gt;Chinese community&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Sponsor&lt;/h2&gt; 
&lt;p&gt;Luckysheet is an MIT-licensed open source project with its ongoing development made possible entirely by the support of these awesome &lt;a href=&quot;https://mengshukeji.github.io/LuckysheetDocs/about/sponsor.html#sponsors-list&quot;&gt;backers&lt;/a&gt;. If you&#39;d like to join them, please consider:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.patreon.com/mengshukeji&quot;&gt;Become a backer or sponsor on Patreon&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://opencollective.com/luckysheet&quot;&gt;Become a backer or sponsor on Open Collective&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;One-time donation via PayPal, WeChat or Alipay&lt;/li&gt; 
&lt;/ul&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;PayPal&lt;/th&gt; 
   &lt;th&gt;WeChat&lt;/th&gt; 
   &lt;th&gt;Alipay&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.paypal.me/wbfsa&quot;&gt;Paypal Me&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://minio.cnbabylon.com/public/luckysheet/wechat.jpg&quot; width=&quot;140&quot;&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;img src=&quot;https://minio.cnbabylon.com/public/luckysheet/alipay.jpg&quot; width=&quot;130&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;What&#39;s the difference between Patreon and OpenCollective?&lt;/h3&gt; 
&lt;p&gt;Funds donated via Patreon go directly to support mengshukeji&#39;s work on Luckysheet. Funds donated via OpenCollective are managed with transparent expenses and will be used for compensating work and expenses for core team members or sponsoring community events. Your name/logo will receive proper recognition and exposure by donating on either platform.&lt;/p&gt; 
&lt;h2&gt;Sponsors List&lt;/h2&gt; 
&lt;p&gt;(Sort by time)&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;*Âãá ¬• 30&lt;/li&gt; 
 &lt;li&gt;ËôöÊàë ¬• 200&lt;/li&gt; 
 &lt;li&gt;ÁîúÂÖö ¬• 50&lt;/li&gt; 
 &lt;li&gt;Alphabet(Google)-gcf ¬• 1&lt;/li&gt; 
 &lt;li&gt;**Âπ≥ ¬• 100&lt;/li&gt; 
 &lt;li&gt;**‰∏ú ¬• 10&lt;/li&gt; 
 &lt;li&gt;debugger ¬• 20&lt;/li&gt; 
 &lt;li&gt;ÁÉ¶‰∫ÜÁÉ¶ ¬• 10&lt;/li&gt; 
 &lt;li&gt;ÊñáÈ°∂È°∂ ¬• 200&lt;/li&gt; 
 &lt;li&gt;yangxshn ¬• 10&lt;/li&gt; 
 &lt;li&gt;Áà±‰πê ¬• 100&lt;/li&gt; 
 &lt;li&gt;Â∞èÊùéÈ£ûÂàÄÂàÄ ¬• 66&lt;/li&gt; 
 &lt;li&gt;Âº†Èì≠ ¬• 200&lt;/li&gt; 
 &lt;li&gt;ÊõπÊ≤ªÂÜõ ¬• 1&lt;/li&gt; 
 &lt;li&gt;*Áâπ ¬• 10&lt;/li&gt; 
 &lt;li&gt;**ÊùÉ ¬• 9.9&lt;/li&gt; 
 &lt;li&gt;**sdmq ¬• 20&lt;/li&gt; 
 &lt;li&gt;*Êó≠ ¬• 10&lt;/li&gt; 
 &lt;li&gt;Quentin ¬• 20&lt;/li&gt; 
 &lt;li&gt;Âë®ÂÆáÂá° ¬• 100&lt;/li&gt; 
 &lt;li&gt;*Ë∂Ö ¬• 10&lt;/li&gt; 
 &lt;li&gt;Áª¥ÂÆÅ ¬• 100&lt;/li&gt; 
 &lt;li&gt;hyy ¬• 20&lt;/li&gt; 
 &lt;li&gt;Èõ®‰∫≠ÂØíÊ±üÊúà ¬• 50&lt;/li&gt; 
 &lt;li&gt;**Âäü ¬• 10&lt;/li&gt; 
 &lt;li&gt;**ÂÖâ ¬• 20&lt;/li&gt; 
 &lt;li&gt;terrywan ¬• 100&lt;/li&gt; 
 &lt;li&gt;ÁéãÊôìÊ¥™ ¬• 10&lt;/li&gt; 
 &lt;li&gt;Sun ¬• 10&lt;/li&gt; 
 &lt;li&gt;ÂøßÁª£ ¬• 100&lt;/li&gt; 
 &lt;li&gt;Jasonx ¬• 10&lt;/li&gt; 
 &lt;li&gt;ÂõΩÂãá ¬• 66.6&lt;/li&gt; 
 &lt;li&gt;ÈÉéÂøó ¬• 100&lt;/li&gt; 
 &lt;li&gt;ÂåøÂêç ¬• 1&lt;/li&gt; 
 &lt;li&gt;ni ¬• 100&lt;/li&gt; 
 &lt;li&gt;Ëãè ¬• 50&lt;/li&gt; 
 &lt;li&gt;Mads_chan ¬• 1&lt;/li&gt; 
 &lt;li&gt;LK ¬• 100&lt;/li&gt; 
 &lt;li&gt;Êô∫ËøûÊñπËàü ÊùéÊ±™Áü≥ ¬• 168&lt;/li&gt; 
 &lt;li&gt;**Âèë ¬• 260&lt;/li&gt; 
 &lt;li&gt;*Ë∂Ö ¬• 10&lt;/li&gt; 
 &lt;li&gt;*Âãá ¬• 10&lt;/li&gt; 
 &lt;li&gt;*ËÖæ ¬• 15&lt;/li&gt; 
 &lt;li&gt;ÂêçÂ≠óÂ•ΩÈöæËµ∑ ¬• 20&lt;/li&gt; 
 &lt;li&gt;Â§ßÂ±± ¬• 1&lt;/li&gt; 
 &lt;li&gt;waiting ¬• 1000&lt;/li&gt; 
 &lt;li&gt;**ÂÆá ¬• 10.00&lt;/li&gt; 
 &lt;li&gt;ÂàòÂ∞èÂ∏ÖÁöÑÂì•Âì• ¬• 20.00&lt;/li&gt; 
 &lt;li&gt;ÂÆÅÈùôËá¥Ëøú ¬• 10.00&lt;/li&gt; 
 &lt;li&gt;Eleven ¬• 1.00&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Authors and acknowledgment&lt;/h2&gt; 
&lt;h3&gt;Active Core Team Members&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wbfsa&quot;&gt;@wbfsa&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eiji-th&quot;&gt;@eiji-th&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fly-95&quot;&gt;@fly-95&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tonytonychopper123&quot;&gt;@tonytonychopper123&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Dushusir&quot;&gt;@Dushusir&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/iamxuchen800117&quot;&gt;@iamxuchen800117&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wpxp123456&quot;&gt;@wpxp123456&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://weibo.com/u/3884623955&quot;&gt;@c19c19i&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zhangchen915&quot;&gt;@zhangchen915&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jerry-f&quot;&gt;@jerry-f&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/flowerField&quot;&gt;@flowerField&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Community Partners&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yiwasheng&quot;&gt;@yiwasheng&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/danielcai1987&quot;&gt;@danielcai1987&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/qq6690876&quot;&gt;@qq6690876&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/javahuang&quot;&gt;@javahuang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TimerGang&quot;&gt;@TimerGang&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gsw945&quot;&gt;@gsw945&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/swen-xiong&quot;&gt;@swen-xiong&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lzmch&quot;&gt;@lzmch&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kdevilpf&quot;&gt;@kdevilpf&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/WJWM0316&quot;&gt;@WJWM0316&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Copyright (c) 2020-present, mengshukeji&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ChendoChap/pOOBs4</title>
      <link>https://github.com/ChendoChap/pOOBs4</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PS4 9.00 Kernel Exploit&lt;/h1&gt; 
&lt;hr&gt; 
&lt;h2&gt;Summary&lt;/h2&gt; 
&lt;p&gt;In this project you will find an implementation that tries to make use of a filesystem bug for the Playstation 4 on firmware 9.00. The bug was found while diffing the 9.00 and 9.03 kernels. It will require a drive with a modified exfat filesystem. Successfully triggering it will allow you to run arbitrary code as kernel, to allow jailbreaking and kernel-level modifications to the system. will launch the usual payload launcher (on port 9020).&lt;/p&gt; 
&lt;h2&gt;Patches Included&lt;/h2&gt; 
&lt;p&gt;The following patches are applied to the kernel:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Allow RWX (read-write-execute) memory mapping (mmap / mprotect)&lt;/li&gt; 
 &lt;li&gt;Syscall instruction allowed anywhere&lt;/li&gt; 
 &lt;li&gt;Dynamic Resolving (&lt;code&gt;sys_dynlib_dlsym&lt;/code&gt;) allowed from any process&lt;/li&gt; 
 &lt;li&gt;Custom system call #11 (&lt;code&gt;kexec()&lt;/code&gt;) to execute arbitrary code in kernel mode&lt;/li&gt; 
 &lt;li&gt;Allow unprivileged users to call &lt;code&gt;setuid(0)&lt;/code&gt; successfully. Works as a status check, doubles as a privilege escalation.&lt;/li&gt; 
 &lt;li&gt;(&lt;code&gt;sys_dynlib_load_prx&lt;/code&gt;) patch&lt;/li&gt; 
 &lt;li&gt;Disables sysVeri&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Short how-to&lt;/h2&gt; 
&lt;p&gt;This exploit is unlike previous ones where they were based purely in software. Triggering the vulnerability requires plugging in a specially formatted USB device at just the right time. In the repository you&#39;ll find a .img file. You can write this .img to a USB using something like Win32DiskImager.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note: This will wipe the USB drive, ensure you select the correct drive and that you&#39;re OK with that before doing this&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qpiVQGo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt; 
&lt;p&gt;When running the exploit on the PS4, wait until it reaches an alert with &quot;Insert USB now. do not close the dialog until notification pops, remove usb after closing it.&quot;. As the dialog states, insert the USB, and wait until the &quot;disk format not supported&quot; notification appears, then close out of the alert with &quot;OK&quot;.&lt;/p&gt; 
&lt;p&gt;It may take a minute for the exploit to run, and the spinning animation on the page might freeze - this is fine, let it continue until an error shows or it succeeds and displays &quot;Awaiting payload&quot;.&lt;/p&gt; 
&lt;h2&gt;Extra Notes&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unplug the USB before a (re)boot cycle or you&#39;ll risk corrupting the kernel heap at boot.&lt;/li&gt; 
 &lt;li&gt;The browser might tempt you into closing the page prematurely, don&#39;t.&lt;/li&gt; 
 &lt;li&gt;The loading circle might freeze while the webkit exploit is triggering, this doesn&#39;t yet mean that the exploit failed.&lt;/li&gt; 
 &lt;li&gt;The bug predates firmware 1.00, so 1.00-9.00 should be exploitable using the same strategy (you will need a different userland exploit &amp;amp; gadgets).&lt;/li&gt; 
 &lt;li&gt;You can replace the loader with a specific payload to load stuff directly instead of doing it through sockets.&lt;/li&gt; 
 &lt;li&gt;This bug works on certain PS5 firmwares, however there&#39;s no known strategy for exploiting it at the moment. Using this bug against the PS5 blind wouldn&#39;t be advised.&lt;/li&gt; 
 &lt;li&gt;Please don&#39;t open issues to tell me that there are none... nor make attempts at making me do your homework for you.&lt;/li&gt; 
 &lt;li&gt;This repository does not provide anything beyond the initial kernel patches that allow you to execute payloads. If you encounter issues with certain payloads you should report your issues to the developers of those payloads through whatever means they make available to you.&lt;/li&gt; 
 &lt;li&gt;The name of the repository is a fusion of the words &#39;ps4&#39; and &#39;&lt;a href=&quot;https://cwe.mitre.org/data/definitions/787.html&quot;&gt;OOB&lt;/a&gt;&#39;, the latter being the kind of vulnerability this implementation attempts to exploit, any other interpretation is purely coincidental &amp;amp; unintended.&lt;/li&gt; 
 &lt;li&gt;As stated before, this bug was found by diffing the 9.00 and 9.03 kernels, this does imply that the bug was fixed on 9.03.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;laureeeeeee&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/SpecterDev&quot;&gt;Specter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/Znullptr&quot;&gt;Znullptr&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Special Thanks&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/theflow0&quot;&gt;Andy Nguyen&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/sleirsgoevy&quot;&gt;sleirsgoevy&lt;/a&gt; - &lt;a href=&quot;https://github.com/sleirsgoevy/bad_hoist/tree/9.00&quot;&gt;9.00 Webkit exploit&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>trekhleb/javascript-algorithms</title>
      <link>https://github.com/trekhleb/javascript-algorithms</link>
      <description>&lt;p&gt;üìù Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Algorithms and Data Structures&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster&quot;&gt;&lt;img src=&quot;https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/trekhleb/javascript-algorithms&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;codecov&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p&gt; 
&lt;p&gt;Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md&quot;&gt;&lt;em&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md&quot;&gt;&lt;em&gt;ÁπÅÈ´î‰∏≠Êñá&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md&quot;&gt;&lt;em&gt;ÌïúÍµ≠Ïñ¥&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md&quot;&gt;&lt;em&gt;Êó•Êú¨Ë™û&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md&quot;&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md&quot;&gt;&lt;em&gt;Fran√ßais&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md&quot;&gt;&lt;em&gt;Espa√±ol&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md&quot;&gt;&lt;em&gt;Portugu√™s&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md&quot;&gt;&lt;em&gt;–†—É—Å—Å–∫–∏–π&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md&quot;&gt;&lt;em&gt;T√ºrk&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md&quot;&gt;&lt;em&gt;Italiana&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.id-ID.md&quot;&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uk-UA.md&quot;&gt;&lt;em&gt;–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ar-AR.md&quot;&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.de-DE.md&quot;&gt;&lt;em&gt;Deutsch&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;‚òù Note that this project is meant to be used for learning and researching purposes only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Data Structures&lt;/h2&gt; 
&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/linked-list&quot;&gt;Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/doubly-linked-list&quot;&gt;Doubly Linked List&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/queue&quot;&gt;Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/stack&quot;&gt;Stack&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/hash-table&quot;&gt;Hash Table&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/heap&quot;&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/priority-queue&quot;&gt;Priority Queue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/trie&quot;&gt;Trie&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree&quot;&gt;Tree&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/binary-search-tree&quot;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/avl-tree&quot;&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/red-black-tree&quot;&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/segment-tree&quot;&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/fenwick-tree&quot;&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/graph&quot;&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/disjoint-set&quot;&gt;Disjoint Set&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/bloom-filter&quot;&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Algorithms&lt;/h2&gt; 
&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; 
&lt;h3&gt;Algorithms by Topic&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Math&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/bits&quot;&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/binary-floating-point&quot;&gt;Binary Floating Point&lt;/a&gt; - binary representation of the floating-point numbers.&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/factorial&quot;&gt;Factorial&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&quot;&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/prime-factors&quot;&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan&#39;s theorem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/primality-test&quot;&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&quot;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/least-common-multiple&quot;&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/sieve-of-eratosthenes&quot;&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/is-power-of-two&quot;&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&quot;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/complex-number&quot;&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/radian&quot;&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&quot;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/horner-method&quot;&gt;Horner&#39;s method&lt;/a&gt; - polynomial evaluation&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&quot;&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-distance&quot;&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&quot;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/square-root&quot;&gt;Square Root&lt;/a&gt; - Newton&#39;s method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/liu-hui&quot;&gt;Liu Hui œÄ Algorithm&lt;/a&gt; - approximate œÄ calculations based on N-gons&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&quot;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/cartesian-product&quot;&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/fisher-yates&quot;&gt;Fisher‚ÄìYates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&quot;&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise and backtracking solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&quot;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&quot;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&quot;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&quot;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&quot;&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;Knapsack Problem&lt;/a&gt; - &quot;0/1&quot; and &quot;Unbound&quot; ones&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt; - &quot;Brute Force&quot; and &quot;Dynamic Programming&quot; (Kadane&#39;s) versions&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&quot;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/hamming-distance&quot;&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&quot;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/knuth-morris-pratt&quot;&gt;Knuth‚ÄìMorris‚ÄìPratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/z-algorithm&quot;&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/rabin-karp&quot;&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&quot;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&quot;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Searches&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&quot;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/jump-search&quot;&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&quot;&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/interpolation-search&quot;&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bubble-sort&quot;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/selection-sort&quot;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/insertion-sort&quot;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/heap-sort&quot;&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&quot;&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/shell-sort&quot;&gt;Shellsort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/counting-sort&quot;&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/radix-sort&quot;&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/traversal&quot;&gt;Straight Traversal&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/reverse-traversal&quot;&gt;Reverse Traversal&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Trees&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&quot;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/breadth-first-search&quot;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Graphs&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&quot;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/breadth-first-search&quot;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&quot;&gt;Kruskal‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&quot;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&quot;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&quot;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/detect-cycle&quot;&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&quot;&gt;Prim‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/topological-sorting&quot;&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/articulation-points&quot;&gt;Articulation Points&lt;/a&gt; - Tarjan&#39;s algorithm (DFS based)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bridges&quot;&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/eulerian-path&quot;&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury&#39;s algorithm - Visit every edge exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&quot;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/strongly-connected-components&quot;&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju&#39;s algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&quot;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/polynomial-hash&quot;&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/rail-fence-cipher&quot;&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/caesar-cipher&quot;&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/hill-cipher&quot;&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://github.com/trekhleb/nano-neuron&quot;&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/knn&quot;&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/k-means&quot;&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Image Processing&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&quot;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Statistics&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/statistics/weighted-random&quot;&gt;Weighted Random&lt;/a&gt; - select the random item from the list based on items&#39; weights&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Evolutionary algorithms&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://github.com/trekhleb/self-parking-car-evolution&quot;&gt;Genetic algorithm&lt;/a&gt; - example of how the genetic algorithm may be applied for training the self-parking cars&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Uncategorized&lt;/strong&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&quot;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/square-matrix-rotation&quot;&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal&#39;s Triangle based examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&quot;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&quot;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&quot;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Algorithms by Paradigm&lt;/h3&gt; 
&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&quot;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&quot;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&quot;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;Unbound Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&quot;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&quot;&gt;Prim‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&quot;&gt;Kruskal‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&quot;&gt;Binary Search&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&quot;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&quot;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&quot;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&quot;&gt;Quicksort&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&quot;&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&quot;&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&quot;&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&quot;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&quot;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&quot;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&quot;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&quot;&gt;Fibonacci Number&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&quot;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&quot;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&quot;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&quot;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&quot;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&quot;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&quot;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&quot;&gt;Shortest Common Supersequence&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&quot;&gt;0/1 Knapsack Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&quot;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&quot;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&quot;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&quot;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&quot;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a different path of finding a solution. Normally the DFS traversal of state-space is being used. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&quot;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&quot;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&quot;&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&quot;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&quot;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&quot;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&quot;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem, in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space tree is being used.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;How to use this repository&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may want to run it to check code quality.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- &#39;LinkedList&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In case if linting or testing is failing try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;rm -rf ./node_modules
npm i
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Then just simply run the following command to test if your playground code works as expected:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm test -- &#39;playground&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Useful Information&lt;/h2&gt; 
&lt;h3&gt;References&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&quot;&gt;‚ñ∂ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Big O Notation&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below you may find most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/assets/big-o-graph.png&quot; alt=&quot;Big O graphs&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Source: &lt;a href=&quot;http://bigocheatsheet.com/&quot;&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Big O Notation&lt;/th&gt; 
   &lt;th&gt;Computations for 10 elements&lt;/th&gt; 
   &lt;th&gt;Computations for 100 elements&lt;/th&gt; 
   &lt;th&gt;Computations for 1000 elements&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;1&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(log N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;9&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;1000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N log N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;600&lt;/td&gt; 
   &lt;td&gt;9000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N^2)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;10000&lt;/td&gt; 
   &lt;td&gt;1000000&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(2^N)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;1024&lt;/td&gt; 
   &lt;td&gt;1.26e+29&lt;/td&gt; 
   &lt;td&gt;1.07e+301&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;O(N!)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;3628800&lt;/td&gt; 
   &lt;td&gt;9.3e+157&lt;/td&gt; 
   &lt;td&gt;4.02e+2567&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Data Structure Operations Complexity&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Data Structure&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Access&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Search&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Insertion&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Deletion&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Comments&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;In case of perfect hash function costs would be O(1)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;In case of balanced tree costs would be O(log(n))&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Red-Black Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Bloom Filter&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;-&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;False positives are possible while searching&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Array Sorting Algorithms Complexity&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Best&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Average&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Worst&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Memory&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Stable&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Comments&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Bubble sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Insertion sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Selection sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;No&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Heap sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;No&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Merge sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Quick sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;No&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Quicksort is usually done in-place with O(log(n)) stack space&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Shell sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;log(n)&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;depends on gap sequence&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n&amp;nbsp;(log(n))&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;No&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Counting sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n + r&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n + r&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n + r&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n + r&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;r - biggest number in array&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;Radix sort&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n * k&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n * k&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n * k&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;n + k&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;Yes&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;k - length of longest key&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Project Backers&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;You may support this project via ‚ù§Ô∏èÔ∏è &lt;a href=&quot;https://github.com/sponsors/trekhleb&quot;&gt;GitHub&lt;/a&gt; or ‚ù§Ô∏èÔ∏è &lt;a href=&quot;https://www.patreon.com/trekhleb&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/trekhleb/javascript-algorithms/raw/master/BACKERS.md&quot;&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;‚àë = 0&lt;/code&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;‚ÑπÔ∏è A few more &lt;a href=&quot;https://trekhleb.dev/projects/&quot;&gt;projects&lt;/a&gt; and &lt;a href=&quot;https://trekhleb.dev/blog/&quot;&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href=&quot;https://trekhleb.dev&quot;&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>appium/appium</title>
      <link>https://github.com/appium/appium</link>
      <description>&lt;p&gt;üì± Automation for iOS, Android, and Windows Apps.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Appium&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/appium&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/appium.svg?sanitize=true&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/appium/appium/actions/workflows/node.js.yml&quot;&gt;&lt;img src=&quot;https://github.com/appium/appium/actions/workflows/node.js.yml/badge.svg?sanitize=true&quot; alt=&quot;Node.js CI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/appium&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/appium.svg?sanitize=true&quot; alt=&quot;Monthly Downloads&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=shield&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Appium is an open-source, cross-platform test automation tool for native, hybrid, and mobile web and desktop apps. We support simulators (iOS), emulators (Android), and real devices (iOS, Android, Windows, Mac).&lt;/p&gt; 
&lt;p&gt;Want to skip straight to the action? Check out our &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/getting-started.md&quot;&gt;getting started&lt;/a&gt; doc.&lt;/p&gt; 
&lt;h3&gt;Supported Platforms&lt;/h3&gt; 
&lt;p&gt;Appium supports app automation across a variety of platforms, like iOS, Android, and Windows. Each platform is supported by one or more &quot;drivers&quot;, which know how to automate that particular platform.&lt;/p&gt; 
&lt;p&gt;Please refer to &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/platform-support.md&quot;&gt;Appium Platform Support&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h3&gt;Why Appium?&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;You don&#39;t have to recompile your app or modify it in any way, due to the use of standard automation APIs on all platforms.&lt;/li&gt; 
 &lt;li&gt;You can write tests with your favorite dev tools using any &lt;a href=&quot;https://w3c.github.io/webdriver/webdriver-spec.html&quot;&gt;WebDriver&lt;/a&gt;-compatible language such as Java, Objective-C, JavaScript (Node), PHP, Python, Ruby, C#, Clojure, or Perl with the Selenium WebDriver API and &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/appium-clients.md&quot;&gt;language-specific client libraries&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;You can use any testing framework.&lt;/li&gt; 
 &lt;li&gt;Appium has built-in mobile web and hybrid app support. Within the same script, you can switch seamlessly between native app automation and webview automation, all using the WebDriver model that&#39;s already the standard for web automation.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Investing in the &lt;a href=&quot;https://w3c.github.io/webdriver/webdriver-spec.html&quot;&gt;WebDriver&lt;/a&gt; protocol means you are betting on a single, free, and open protocol for testing that has become a web standard. Don&#39;t lock yourself into a proprietary stack.&lt;/p&gt; 
&lt;p&gt;For example, if you use Apple&#39;s XCUITest library without Appium you can only write tests using Obj-C/Swift, and you can only run tests through Xcode. Similarly, with Google&#39;s UiAutomator or Espresso, you can only write tests in Java/Kotlin. Appium opens up the possibility of true cross-platform native app automation, for mobile and beyond. Finally!&lt;/p&gt; 
&lt;p&gt;If you&#39;re new to Appium or want a more comprehensive description of what this is all about, please read our &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/intro.md&quot;&gt;Introduction to Appium Concepts&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Requirements&lt;/h3&gt; 
&lt;p&gt;Your environment needs to be set up for the particular platforms that you want to run tests on. Each of the drivers above documents the requirements for their particular brand of automation. At a minimum, you will need to be able to run Node.js 12+.&lt;/p&gt; 
&lt;h3&gt;Get Started&lt;/h3&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/about-appium/getting-started.md&quot;&gt;Getting Started&lt;/a&gt; guide to get going with Appium.&lt;/p&gt; 
&lt;p&gt;There is also a sample code that contains &lt;a href=&quot;https://github.com/appium/appium/tree/master/sample-code&quot;&gt;many examples of tests in a variety of different languages&lt;/a&gt;!&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;For prettily-rendered docs, please visit &lt;a href=&quot;http://appium.io&quot;&gt;appium.io&lt;/a&gt;. You can always find the full list of Appium doc pages at &lt;a href=&quot;https://github.com/appium/appium/tree/master/docs/en/&quot;&gt;Appium&#39;s GitHub Repo&lt;/a&gt; as well.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/appium/appium/raw/master/ci-jobs/update-appium-io.yml&quot;&gt;update-appium-io.yml&lt;/a&gt; creates a PR by &lt;a href=&quot;https://dev.azure.com/AppiumCI/Appium%20CI/_build?definitionId=37&quot;&gt;CI job&lt;/a&gt;. in the appium.io repository with the documentation update.&lt;/p&gt; 
&lt;p&gt;Once the PR has been merged, the latest documentation will be in &lt;a href=&quot;http://appium.io&quot;&gt;appium.io&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;Please take a look at our &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/CONTRIBUTING.md&quot;&gt;contribution documentation&lt;/a&gt; for instructions on how to build, test, and run Appium from the source.&lt;/p&gt; 
&lt;h3&gt;Roadmap&lt;/h3&gt; 
&lt;p&gt;Interested in where Appium is heading in the future? Check out the &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/ROADMAP.md&quot;&gt;Roadmap&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Project History, Credits &amp;amp; Inspiration&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://appium.io/history&quot;&gt;History&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/contributing-to-appium/credits.md&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;User Forums&lt;/h3&gt; 
&lt;p&gt;Announcements and debates often take place on the &lt;a href=&quot;https://discuss.appium.io&quot;&gt;Discussion Group&lt;/a&gt;, be sure to sign up!&lt;/p&gt; 
&lt;h3&gt;Troubleshooting&lt;/h3&gt; 
&lt;p&gt;We put together a &lt;a href=&quot;https://raw.githubusercontent.com/appium/appium/master/docs/en/writing-running-appium/other/troubleshooting.md&quot;&gt;troubleshooting guide&lt;/a&gt;. Please have a look here first if you run into any problems. It contains instructions for checking a lot of common errors and how to get in touch with the community if you&#39;re stumped.&lt;/p&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_large&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=large&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>qianjiachun/douyuEx</title>
      <link>https://github.com/qianjiachun/douyuEx</link>
      <description>&lt;p&gt;ÊñóÈ±ºÁõ¥Êí≠Èó¥Â¢ûÂº∫Êèí‰ª∂ÔºàTampermonkeyÔºâ&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/qianjiachun/douyuEx&quot;&gt; &lt;img src=&quot;https://s4.ax1x.com/2021/12/23/TGMxk8.png&quot; width=&quot;150&quot; height=&quot;150&quot;&gt; &lt;/a&gt; &lt;/p&gt;
&lt;h3 align=&quot;center&quot;&gt;DouyuEx&lt;/h3&gt; 
&lt;br&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/qianjiachun/douyuEx&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/languages/code-size/qianjiachun/douyuEx?color=blueviolet&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/qianjiachun/douyuEx&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/qianjiachun/douyuEx?color=green&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/qianjiachun/douyuEx&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/commit-activity/m/qianjiachun/douyuEx?color=9cf&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/qianjiachun/douyuEx&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; Powerful Plugin For DouyuWeb&lt;br&gt; &lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;code&gt;DouyuEx&lt;/code&gt; ÊòØÂü∫‰∫é &lt;code&gt;ÂéüÁîüJavaScript&lt;/code&gt; ÂºÄÂèëÁöÑ &lt;code&gt;TamperMonkey&lt;/code&gt; Êèí‰ª∂ÔºåÁî®‰∫éÂ¢ûÂº∫ÊñóÈ±ºWebÁ´Ø‰ΩìÈ™å„ÄÇ&lt;code&gt;DouyuEx&lt;/code&gt; ÈõÜÂêàÊñóÈ±ºÂÖ®Á´ØÁöÑÁâπËâ≤ÂäüËÉΩÔºåÂ¢ûÂº∫ÂéüÁîüÁΩëÈ°µÔºåÂ§çÊùÇÁöÑÊìç‰Ωú‰∏ÄÈîÆÂÆåÊàêÔºåÁªôÁî®Êà∑Ê≤âÊµ∏ÂºèÁöÑÁõ¥Êí≠‰ΩìÈ™å„ÄÇ‰ª£Á†Å&lt;strong&gt;ÂºÄÊ∫ê&lt;/strong&gt;ÔºåÂäüËÉΩ&lt;strong&gt;ÂÆûÁî®&lt;/strong&gt;Ôºå‰∫§‰∫í&lt;strong&gt;ÂèãÂ•Ω&lt;/strong&gt;Ôºå‰∏çËøáÂ∫¶ÊîπÂèòÁΩëÈ°µÊú¨Êù•ÁöÑÁªìÊûÑÔºåÊâÄÊúâÂäüËÉΩÈÉΩÂú®Áî®Êà∑ÂèØÊéßËåÉÂõ¥‰πãÂÜÖ„ÄÇ&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;DouyuEx-ÊñóÈ±ºÁõ¥Êí≠Èó¥Â¢ûÂº∫Êèí‰ª∂&lt;/h2&gt; 
&lt;h2&gt;üåê ÂÆòÊñπÁΩëÁ´ô&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.douyuex.com/&quot;&gt;https://www.douyuex.com/&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;üéØ ÁõÆÊ†á&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Êó®Âú®Êâ©Â±ïÂ¢ûÂº∫ÂéüÁâàÂäüËÉΩÔºå‰ºòÂåñÁî®Êà∑‰ΩìÈ™å&lt;/li&gt; 
 &lt;li&gt;ÂÆâÂÖ®Ôºå‰∏çÂÅöÁî®Êà∑ÂèØÊéßËåÉÂõ¥Â§ñÁöÑÂäüËÉΩ&lt;/li&gt; 
 &lt;li&gt;Á∫ØÁ≤πÔºå‰∏çËøáÂàÜÂΩ±ÂìçÊú¨Êù•ÁöÑÁΩëÈ°µÂäüËÉΩ&lt;/li&gt; 
 &lt;li&gt;‰∏çÊ±°ÊüìÈ°µÈù¢ÁöÑÁªìÊûÑ&lt;/li&gt; 
 &lt;li&gt;‰ΩøÁî®ÁÆÄÂçïÔºåÊû∂ÊûÑËΩªÈáèÔºåÂäüËÉΩÂÆûÁî®Ôºå‰∫§‰∫íÂèãÂ•Ω&lt;/li&gt; 
 &lt;li&gt;ÈõÜÂêàÁßªÂä®Á´Ø„ÄÅÂÆ¢Êà∑Á´Ø„ÄÅwebÁ´ØÁâπËâ≤ÂäüËÉΩ&lt;/li&gt; 
 &lt;li&gt;ÂéüÁîü‰ª£Á†ÅÔºåÂºÄÂèëÊû∂ÊûÑÊòìÊâ©Â±ïÔºåÊòìÁª¥Êä§&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;üì¶ ÂÆâË£Ö&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.crx4chrome.com/crx/1429/&quot;&gt;ÂÆâË£ÖÊ≤πÁå¥ËÑöÊú¨&lt;/a&gt;ÔºåÈÄâÊã©„ÄêDownload crx file from crx4chrome„ÄëÔºåÂ∞Ü‰∏ãËΩΩÂêéÁöÑÊñá‰ª∂ÊãñÂÖ•ÊµèËßàÂô®ËøõË°åÂÆâË£ÖÔºåÊ≠§Ê≠•ÊúâÈóÆÈ¢òÁöÑÂèØ‰ª•ÁôæÂ∫¶&lt;/li&gt; 
 &lt;li&gt;ÁÇπÂáª‰∏äÊñπÁöÑÂÆâË£ÖËÑöÊú¨ÔºåÂÆâË£ÖÊú¨Êèí‰ª∂ÔºåËã•Âá∫Áé∞Áº∫Â∞ë&quot;;&quot;ÁöÑÊèêÁ§∫Ê°ÜÔºåÊó†ËßÜÂç≥ÂèØ&lt;/li&gt; 
 &lt;li&gt;ÂÆâË£ÖÂêéÔºåÂú®Á§ºÁâ©Ê†è‰∏ãÊñπ/È±º‰∏∏È±ºÁøÖÂ∑¶Êñπ‰ºöÂá∫Áé∞‰∏Ä‰∏™Á≤æÁÅµÁêÉÂõæÊ†áÔºåÁÇπÂáªÊòæÁ§∫ÂäüËÉΩÊù°&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;Êèí‰ª∂Âü∫‰∫éTamperMonkey V4.10ÂºÄÂèëÔºåËã•Êèí‰ª∂ÊúâÊó†Ê≥ï‰ΩøÁî®ÁöÑÊÉÖÂÜµÔºåËØ∑Â∞ùËØï&lt;a href=&quot;https://www.crx4chrome.com/crx/1429/&quot;&gt;ÂçáÁ∫ßÊ≤πÁå¥ÁâàÊú¨&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Ëã•Âá∫Áé∞ÊèêÁ§∫ÊòØÂê¶ÂÖÅËÆ∏Ë∑®ÂüüËÆøÈóÆÁöÑÈ°µÈù¢Ôºå‰∏ÄÂæãÈÄâÊã©&lt;strong&gt;ÂßãÁªàÂÖÅËÆ∏&lt;/strong&gt;Âç≥ÂèØ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üöÄ Â£∞Êòé&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Êú¨Êèí‰ª∂ÊòØÊú¨‰∫∫ËØæ‰ΩôÂÖ¥Ë∂£ÂºÄÂèëÔºå‰ª£Á†ÅË¥®ÈáèËØ∑ÂãøÂêêÊßΩ&lt;/li&gt; 
 &lt;li&gt;‰ª£Á†ÅÂèØ‰æõ‰∫íËÅîÁΩëÁöÑÂêåÂ•Ω‰ª¨ÂèÇËÄÉÁ†îÁ©∂Ôºå&lt;strong&gt;ÂºïÁî®ËØ∑Ê≥®ÊòéÂá∫Â§Ñ&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;ÂñúÊ¨¢Êú¨Êèí‰ª∂ÁöÑÁî®Êà∑‰∏çÂ¶®ÁÇπ‰∏Ä‰∏ãÊî∂ËóèÊàñÊé®ËçêÁªôÊúãÂèãÔºåÊúâÂª∫ËÆÆÊàñBUGËØ∑Êèê‰∫§Âú®greasyforkÊàñgithub&lt;/li&gt; 
 &lt;li&gt;Êú¨Êèí‰ª∂‰ªÖ‰∏∫ÊèêÈ´òÊó•Â∏∏ËßÇÁúã‰ΩìÈ™åÔºå‰∏çÂÅöËñÖÁæäÊØõ/ÊÅ∂ÊÄßÁ´û‰∫âÁ≠âÂäüËÉΩ&lt;/li&gt; 
 &lt;li&gt;Êú¨Êèí‰ª∂ÂΩíÂ±ûÔºö&lt;a href=&quot;https://www.douyu.com/5189167&quot;&gt;ÊñóÈ±ºÁõ¥Êí≠Èó¥5189167&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;‰ΩúËÄÖÔºöÂ∞èÊ∑≥ / QQÔºö189964430&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;üíéÂäüËÉΩ&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://xiaochunchun.gitee.io/douyuex/introduction/&quot;&gt;ÂäüËÉΩ‰ªãÁªç&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;üìïÊõ¥Êñ∞ÂÜÖÂÆπ&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://xiaochunchun.gitee.io/douyuex/update/&quot;&gt;Êõ¥Êñ∞ÂÜÖÂÆπ&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;‚öôÂ¶Ç‰ΩïÁª¥Êä§‰∏éÁºñËØë&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/qianjiachun/douyuEx&quot;&gt;È°πÁõÆÂú∞ÂùÄ&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://qianjiachun.github.io/DouyuEx/compile&quot;&gt;Â¶Ç‰ΩïÁºñËØë‰∏éÁª¥Êä§&lt;/a&gt;&lt;/p&gt; 
&lt;hr&gt;</description>
    </item>
    
    <item>
      <title>jhu-ep-coursera/fullstack-course4</title>
      <link>https://github.com/jhu-ep-coursera/fullstack-course4</link>
      <description>&lt;p&gt;Example code for HTML, CSS, and Javascript for Web Developers Coursera Course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Coursera: HTML, CSS and Javascript for Web Developers&lt;/h1&gt; 
&lt;h2&gt;Example Source Code&lt;/h2&gt; 
&lt;p&gt;This repository contains all of the example source code used in the Coursera.org course called &lt;a href=&quot;https://www.coursera.org/learn/html-css-javascript-for-web-developers&quot;&gt;HTML, CSS and Javascript for Web Developers&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/html-css-javascript-for-web-developers&quot;&gt;Enroll now! It&#39;s free!&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; 
&lt;p&gt;Please check our FAQ to see if a question you want to ask on the forums has been answered already. Here is the link to the FAQ:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/jhu-ep-coursera/fullstack-course4/master/FAQ.md&quot;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Customer Website Launched&lt;/h2&gt; 
&lt;p&gt;As part of this course we developed a &lt;em&gt;real&lt;/em&gt; website for a &lt;em&gt;real&lt;/em&gt; client. Below is a link to the final product. (&lt;em&gt;Note&lt;/em&gt;, the site is left without speed optimization to keep it exactly as it was in the course. Site optimization wasn&#39;t part of the course).&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.davidchuschinabistro.com/&quot;&gt;David Chu&#39;s China Bistro Restaurant in Baltimore, MD&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cypress-io/cypress-example-recipes</title>
      <link>https://github.com/cypress-io/cypress-example-recipes</link>
      <description>&lt;p&gt;Various recipes for testing common scenarios with Cypress&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Recipes&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress-example-recipes/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress-example-recipes/tree/master.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/cypress-io/cypress-example-recipes/branch/master&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/7p4qkwavheciwbxc/branch/master?svg=true&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://renovateapp.com/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/renovate-app-blue.svg?sanitize=true&quot; alt=&quot;renovate-app badge&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://dashboard.cypress.io/projects/6p53jw/runs&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://dashboard.cypress.io/badge/simple/6p53jw/master&amp;amp;style=flat&amp;amp;logo=cypress&quot; alt=&quot;Cypress Dashboard&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;This repo contains various recipes for testing common scenarios using Cypress: &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#fundamentals&quot;&gt;Fundamentals&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#testing-the-dom&quot;&gt;Testing the DOM&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#logging-in-recipes&quot;&gt;Logging in&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#preprocessors&quot;&gt;Preprocessors&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#blogs&quot;&gt;Blogs&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#stubbing-and-spying&quot;&gt;Stubbing and spying&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#unit-testing&quot;&gt;Unit Testing&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#server-communication&quot;&gt;Server Communication&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#other-cypress-recipes&quot;&gt;Other Cypress Recipes&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/#community-recipes&quot;&gt;Community Recipes&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Fundamentals&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__node-modules&quot;&gt;Node Modules&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Import your own node modules&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__env-variables&quot;&gt;Environment variables&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Passing environment variables to tests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__errors&quot;&gt;Handling errors&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Handling thrown errors and unhandled promise rejections&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__dynamic-tests&quot;&gt;Dynamic tests&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create tests dynamically from JSON data&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__dynamic-tests-from-csv&quot;&gt;Dynamic tests from CSV&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create tests dynamically from CSV file&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__dynamic-tests-from-api&quot;&gt;Dynamic tests from API&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create tests dynamically by calling an external API&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__fixtures&quot;&gt;Fixtures&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Loading single or multiple fixtures&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__add-custom-command&quot;&gt;Adding Custom Commands&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write your own custom commands using JavaScript with correct types for IntelliSense to work&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__add-custom-command-ts&quot;&gt;Adding Custom Commands (TS)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write your own custom commands using TypeScript&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/extending-cypress__chai-assertions&quot;&gt;Adding Chai Assertions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add new or custom chai assertions with correct types&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__module-api&quot;&gt;Cypress module API&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run Cypress via its module API&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__module-api-wrap&quot;&gt;Wrapping Cypress module API&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Writing a wrapper around &quot;cypress run&quot; command line parsing&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__custom-browsers&quot;&gt;Custom browsers&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Control which browsers the project can use, or even add a custom browser into the list&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__chrome-remote-debugging&quot;&gt;Use Chrome Remote Interface&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use Chrome debugger protocol to trigger hover state and print media style&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__typescript&quot;&gt;Out-of-the-box TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Write tests in TypeScript without setting up preprocessors&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__timeout&quot;&gt;Per-test timeout&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Fail a test if it runs longer than the specified time limit&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__cy-events&quot;&gt;Cypress events&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Using &lt;code&gt;Cypress.on&lt;/code&gt; and &lt;code&gt;cy.on&lt;/code&gt; to listen to &lt;a href=&quot;https://on.cypress.io/catalog-of-events&quot;&gt;Cypress events&lt;/a&gt; like &lt;code&gt;before&lt;span&gt;ü™ü&lt;/span&gt;load&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/fundamentals__window-size&quot;&gt;Video resolution&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Increase the browser window size to record high quality videos and capture detailed screenshots&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Testing the DOM&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__tab-handling-links&quot;&gt;Tab Handling and Links&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Links that open in a new tab&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__hover-hidden-elements&quot;&gt;Hover and Hidden Elements&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Test hidden elements requiring hover&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__form-interactions&quot;&gt;Form Interactions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Test form elements like input type &lt;code&gt;range&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__drag-drop&quot;&gt;Drag and Drop&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use &lt;code&gt;.trigger()&lt;/code&gt; to test drag and drop&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__shadow-dom&quot;&gt;Shadow DOM&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;You need to use any of available custom commands&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__wait-for-resource&quot;&gt;Waiting for static resource&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Shows how to wait for CSS, image, or any other static resource to load&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__csv-table&quot;&gt;CSV load and table test&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Loads CSV file and quickly compares objects against cells in a table&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__performance-metrics&quot;&gt;Evaluate performance metrics&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utilize Cypress to monitor a website&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__root-style&quot;&gt;Root style&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Trigger input color change that modifies CSS variable&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__select2&quot;&gt;Select widgets&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Working with &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; elements and &lt;a href=&quot;https://select2.org/&quot;&gt;Select2&lt;/a&gt; widgets&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__lit-element&quot;&gt;Lit Elements&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Testing Lit Elements with Shadow DOM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__download&quot;&gt;File download&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Download and validate CSV, Excel, text, Zip, and image files&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__page-reloads&quot;&gt;Page reloads&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Avoiding &lt;code&gt;while&lt;/code&gt; loop when dealing with randomness&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__pagination&quot;&gt;Pagination&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Clicking the &quot;Next&quot; link until we reach the last page&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__clipboard&quot;&gt;Clipboard&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Copy and paste text into the clipboard from the test&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__page-source&quot;&gt;Page source&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Get the source of the page under test&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/testing-dom__responsive-image&quot;&gt;Responsive image&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Uses &lt;code&gt;cy.intercept&lt;/code&gt; to confirm the image loaded by the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Logging in recipes&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/logging-in__basic-auth&quot;&gt;Basic Auth&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Log in using Basic Authentication&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/logging-in__single-sign-on&quot;&gt;Single Sign On&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Log in across multiple servers or providers&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/logging-in__html-web-forms&quot;&gt;HTML Web Forms&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Log in with a basic HTML form&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/logging-in__xhr-web-forms&quot;&gt;XHR Web Forms&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Log in using an XHR&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/logging-in__csrf-tokens&quot;&gt;CSRF Tokens&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Log in with a required CSRF token&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/logging-in__jwt&quot;&gt;Json Web Tokens (JWT)&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Log in using JWT&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/logging-in__using-app-code&quot;&gt;Using application code&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Log in by calling the application code&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Also see &lt;a href=&quot;https://on.cypress.io/plugins#authentication&quot;&gt;Authentication plugins&lt;/a&gt; and watch video &lt;a href=&quot;https://www.youtube.com/watch?v=5XQOK0v_YRE&quot;&gt;&quot;Organizing Tests, Logging In, Controlling State&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Preprocessors&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/preprocessors__grep&quot;&gt;grep&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Filter tests by name using Mocha-like &lt;code&gt;grep&lt;/code&gt; syntax&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/preprocessors__typescript-browserify&quot;&gt;Typescript with Browserify&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add typescript support with browserify&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/preprocessors__typescript-webpack&quot;&gt;Typescript with Webpack&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add typescript support with webpack&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/preprocessors__flow-browserify&quot;&gt;Flow with Browserify&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Add flow support with browserify&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Blogs&lt;/h2&gt; 
&lt;p&gt;Demo recipes from the blog posts at &lt;a href=&quot;https://www.cypress.io/blog&quot;&gt;www.cypress.io/blog&lt;/a&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__application-actions&quot;&gt;Application Actions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Application actions are a replacement for Page Objects&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__direct-control-angular&quot;&gt;Direct Control of AngularJS&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Bypass the DOM and control AngularJS&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__e2e-api-testing&quot;&gt;E2E API Testing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run your API Tests with a GUI&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__e2e-snapshots&quot;&gt;E2E Snapshots&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;End-to-End Snapshot Testing&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__element-coverage&quot;&gt;Element Coverage&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Track elements covered by tests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__codepen-demo&quot;&gt;Codepen.io Testing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Test a HyperApp Codepen demo&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__testing-redux-store&quot;&gt;Testing Redux Store&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Test an application that uses Redux data store&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__vue-vuex-rest&quot;&gt;Vue + Vuex + REST Testing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Test an application that uses central data store&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__a11y&quot;&gt;A11y Testing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Accessibility testing with &lt;a href=&quot;https://github.com/avanslaars/cypress-axe#readme&quot;&gt;cypress-axe&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.cypress.io/blog/2019/08/02/guest-post-angular-adding-cypress-ui-tests-to-your-devops-pipeline/&quot;&gt;Automate Angular Testing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run Angular tests in a build environment&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__use-react-devtools&quot;&gt;React DevTools&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Loads React DevTools Chrome extension automatically&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__assertion-counting&quot;&gt;Expect N assertions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;How to expect a certain number of assertions in a test&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__notification&quot;&gt;Browser notifications&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;How to test application that uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/notification&quot;&gt;&lt;code&gt;Notification&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__iframes&quot;&gt;Testing iframes&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Accessing elements in 3rd party iframe, spy and stub network calls from iframe&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__class-decorator&quot;&gt;Class decorators&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Using JavaScript class decorator to expose objects created by the application so they are reachable from tests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__form-submit&quot;&gt;Form Submit&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Removing flake from the test where a page is reloaded after form submission&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/blogs__dayjs&quot;&gt;Using Day.js instead of Moment.js&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Using &lt;a href=&quot;https://day.js.org/&quot;&gt;day.js&lt;/a&gt; library instead of the deprecated &lt;code&gt;Cypress.moment&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Network stubbing and spying&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing-spying__intercept&quot;&gt;Stubbing using &lt;code&gt;cy.intercept&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Control network using &lt;code&gt;cy.intercept&lt;/code&gt; API&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;JS-level stubbing and spying&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing-spying__functions&quot;&gt;Stubbing Functions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use &lt;code&gt;cy.spy()&lt;/code&gt; and &lt;code&gt;cy.stub()&lt;/code&gt; to test function calls&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing-spying__window-fetch&quot;&gt;Stubbing &lt;code&gt;window.fetch&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Work around the &lt;code&gt;window.fetch&lt;/code&gt; limitation&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing-spying__window&quot;&gt;Stubbing &lt;code&gt;window.open&lt;/code&gt; and &lt;code&gt;console.log&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use &lt;code&gt;cy.stub()&lt;/code&gt; and &lt;code&gt;cy.spy()&lt;/code&gt; to test application behavior&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing-spying__window-print&quot;&gt;Stubbing &lt;code&gt;window.print&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use &lt;code&gt;cy.stub()&lt;/code&gt; to test &lt;code&gt;window.print&lt;/code&gt; call made from the application&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing-spying__google-analytics&quot;&gt;Stubbing Google Analytics&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use &lt;code&gt;cy.stub()&lt;/code&gt; or &lt;code&gt;cy.intercept()&lt;/code&gt; to test Google Analytics calls&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing-spying__console&quot;&gt;Spying and stubbing methods on &lt;code&gt;console&lt;/code&gt; object&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use &lt;code&gt;cy.spy()&lt;/code&gt; and &lt;code&gt;cy.stub()&lt;/code&gt; on &lt;code&gt;console.log&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing__resources&quot;&gt;Stub resource loading&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use &lt;code&gt;MutationObserver&lt;/code&gt; to stub resource loading like &lt;code&gt;img&lt;/code&gt; tags&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/stubbing-spying__navigator&quot;&gt;Stub &lt;code&gt;navigator.cookieEnabled&lt;/code&gt; property&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Use &lt;code&gt;cy.stub()&lt;/code&gt; to mock the &lt;code&gt;navigator.cookieEnabled&lt;/code&gt; property&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Unit Testing&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/unit-testing__application-code&quot;&gt;Application Code&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Import and test your own application code&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; looking for the React/Vue component testing recipes? Read the &lt;a href=&quot;https://www.cypress.io/blog/2021/04/06/introducing-the-cypress-component-test-runner/&quot;&gt;Introducing the Cypress Component Test Runner‚Äì new in 7.0.0&lt;/a&gt; blog post.&lt;/p&gt; 
&lt;h2&gt;Server Communication&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__bootstrapping-your-app&quot;&gt;Bootstrapping your App&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Seed your application with test data&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__seeding-database-in-node&quot;&gt;Seeding your Database in Node&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Seed your database with test data&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__xhr-assertions&quot;&gt;XHR assertions&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Spy and assert on application&#39;s network calls&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__visit-2nd-domain&quot;&gt;Visiting 2nd domain&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Visiting two different domains from two different tests and passing value from one test to another&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__pass-value-between-specs&quot;&gt;Pass value between specs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Pass a value from spec to spec via the plugin file using &lt;a href=&quot;https://on.cypress.io/task&quot;&gt;cy.task&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__stream-tests&quot;&gt;Stream test results&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Streams each test result from the browser to the plugins to an external process via IPC&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__offline&quot;&gt;Offline&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Test web application when the network is offline&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__server-timing&quot;&gt;Server timing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Report server timing results from Cypress test&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__wait-for-api&quot;&gt;Wait for API&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Call the backend using &lt;code&gt;cy.request&lt;/code&gt; until it responds&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples/server-communication__request&quot;&gt;Making HTTP requests&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;How to use &lt;code&gt;cy.request&lt;/code&gt;, &lt;code&gt;window.fetch&lt;/code&gt;, and &lt;code&gt;cy.task&lt;/code&gt; commands to make HTTP requests to the server with and without cookies&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Other Cypress Recipes&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://on.cypress.io/visual-testing&quot;&gt;Visual Testing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Official Cypress guide to visual testing&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://on.cypress.io/code-coverage&quot;&gt;Code Coverage&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Official Cypress guide to code coverage&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/detect-page-reload/&quot;&gt;detect-page-reload&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;How to detect from Cypress test when a page reloads using object property assertions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/&quot;&gt;run in Docker&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run Cypress with a single Docker command&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/ssr-e2e/&quot;&gt;SSR E2E&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;End-to-end Testing for Server-Side Rendered Pages&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/using-ts-aliases-in-cypress-tests/&quot;&gt;Using TS aliases&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Using TypeScript aliases in Cypress tests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/stub-navigator-api/&quot;&gt;stub-navigator-api&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Stub navigator API in end-to-end tests&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/readable-tests/&quot;&gt;Readable Cypress.io tests&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;How to write readable tests using custom commands and custom Chai assertions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/parallel-or-not/&quot;&gt;Parallel or not&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Run Cypress in parallel mode on CircleCI depending on environment variables&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/use-typescript-with-cypress/&quot;&gt;Use TypeScript With Cypress&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Step by step tutorial on how to set up TypeScript support in Cypress using WebPack bundler&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/cypress-should-callback/&quot;&gt;Cypress should callback&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Examples of &lt;code&gt;.should(cb)&lt;/code&gt; assertions&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/cypress-jump/&quot;&gt;Cypress jump&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Create a React component using JSX and inject it into live application from a Cypress test&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://dev.to/bahmutov/unit-testing-vuex-data-store-using-cypress-io-test-runner-3g4n&quot;&gt;Unit testing Vuex data store using Cypress.io Test Runner&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Complete walkthrough for anyone trying to unit test a data store&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/triple-tested/&quot;&gt;Triple Tested Static Site&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;How to test static sites three times before and after deployment to GitHub pages&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Community Recipes&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Recipe&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/mjhea0/cypress-visual-regression&quot;&gt;Visual Regression Testing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Adding visual regression testing to Cypress&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/paulfalgout/cypress-coverage-example&quot;&gt;Code coverage&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Cypress with Coverage reports&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TheBrainFamily/cypress-cucumber-example&quot;&gt;Cucumber&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Example usage of Cypress with Cucumber&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/TheBrainFamily/jest-runner-cypress-example&quot;&gt;Jest&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Example for the jest-runner-cypress&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/muratkeremozcan/cypressExamples/tree/master/cypress-mailosaur&quot;&gt;Mailosaur&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Utilizes &lt;code&gt;cy.request()&lt;/code&gt; or &lt;code&gt;cy.task()&lt;/code&gt; with &lt;a href=&quot;https://www.npmjs.com/package/mailosaur&quot;&gt;&lt;code&gt;mailosaur&lt;/code&gt;&lt;/a&gt; to test emails sent with &lt;a href=&quot;https://www.npmjs.com/package/sendmail&quot;&gt;&lt;code&gt;sendmail&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://glebbahmutov.com/blog/test-socketio-chat-using-cypress/&quot;&gt;Chat App&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Test a Socket.io Chat App using Cypress&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://www.cypress.io/blog/2021/05/24/full-testing-of-html-emails-using-ethereal-accounts/&quot;&gt;Email Testing&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;Full Testing of HTML Emails using SendGrid and Ethereal Accounts&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;This repo is structured similar to how other &quot;Monorepos&quot; work.&lt;/li&gt; 
 &lt;li&gt;Each &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples&quot;&gt;&lt;code&gt;example project&lt;/code&gt;&lt;/a&gt; has its own Cypress configuration, tests, backend and frontend assets.&lt;/li&gt; 
 &lt;li&gt;Each of these &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/examples&quot;&gt;&lt;code&gt;example projects&lt;/code&gt;&lt;/a&gt; share a single &quot;root&quot; Cypress that is installed in the root &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/li&gt; 
 &lt;li&gt;This structure looks different from normal projects, but its the easiest way to manage multiple projects without installing Cypress independently for each one.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;## install all dependencies from the root directory
npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Opening Cypress GUI&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ./examples/testing-dom__drag-drop
# start local server
npm start &amp;amp;
# and open Cypress GUI
npm run cypress:open
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Running from the CLI&lt;/h2&gt; 
&lt;p&gt;Same as running Cypress GUI but with &lt;code&gt;cypress run&lt;/code&gt; command (and any CLI arguments)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd ./examples/testing-dom__drag-drop
# start local server
npm start &amp;amp;
# run Cypress tests headlessly
npm run cypress:run

### runs all example projects in specific browser
### similar to cypress run --browser &amp;lt;name&amp;gt;
npm run cypress:run -- --browser chrome

### sends test results, videos, screenshots
### to Cypress dashboard
npm run cypress:run -- --record
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can find the recording at the Cypress Dashboard linked below&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://dashboard.cypress.io/projects/6p53jw/runs&quot;&gt;&lt;img src=&quot;https://img.shields.io/endpoint?url=https://dashboard.cypress.io/badge/simple/6p53jw/master&amp;amp;style=flat&amp;amp;logo=cypress&quot; alt=&quot;Cypress Dashboard&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Development&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress-example-recipes/master/Development.md&quot;&gt;Development.md&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bigbluebutton/bigbluebutton</title>
      <link>https://github.com/bigbluebutton/bigbluebutton</link>
      <description>&lt;p&gt;Complete open source web conferencing system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BigBlueButton&lt;/h1&gt; 
&lt;p&gt;BigBlueButton is an open source web conferencing system.&lt;/p&gt; 
&lt;p&gt;BigBlueButton supports real-time sharing of audio, video, slides (with whiteboard controls), chat, and the screen. Instructors can engage remote students with polling, emojis, multi-user whiteboard, and breakout rooms.&lt;/p&gt; 
&lt;p&gt;Presenters can record and playback content for later sharing with others.&lt;/p&gt; 
&lt;p&gt;We designed BigBlueButton for online learning, (though it can be used for many &lt;a href=&quot;https://www.c4isrnet.com/it-networks/2015/02/11/disa-to-replace-dco-with-new-collaboration-services-tool/&quot;&gt;other applications&lt;/a&gt; as well). The educational use cases for BigBlueButton are&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Online tutoring (one-to-one)&lt;/li&gt; 
 &lt;li&gt;Flipped classrooms (recording content ahead of your session)&lt;/li&gt; 
 &lt;li&gt;Group collaboration (many-to-many)&lt;/li&gt; 
 &lt;li&gt;Online classes (one-to-many)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can install on a Ubuntu 18.04 64-bit server. We provide &lt;a href=&quot;https://github.com/bigbluebutton/bbb-install&quot;&gt;bbb-install.sh&lt;/a&gt; to let you have a server up and running within 30 minutes (or your money back üòâ).&lt;/p&gt; 
&lt;p&gt;For full technical documentation BigBlueButton -- including architecture, features, API, and GreenLight (the default front-end) -- see &lt;a href=&quot;https://docs.bigbluebutton.org/&quot;&gt;https://docs.bigbluebutton.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;BigBlueButton and the BigBlueButton Logo are trademarks of &lt;a href=&quot;https://bigbluebutton.org&quot;&gt;BigBlueButton Inc&lt;/a&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vercel/next.js</title>
      <link>https://github.com/vercel/next.js</link>
      <description>&lt;p&gt;The React Framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://nextjs.org&quot;&gt; &lt;img src=&quot;https://assets.vercel.com/image/upload/v1607554385/repositories/next-js/next-logo.png&quot; height=&quot;128&quot;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;&lt;a href=&quot;https://nextjs.org&quot;&gt;Next.js&lt;/a&gt;&lt;/h1&gt;
&lt;a href=&quot;https://nextjs.org&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a aria-label=&quot;Vercel logo&quot; href=&quot;https://vercel.com&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&amp;amp;logo=Vercel&amp;amp;labelColor=000&quot;&gt; &lt;/a&gt; &lt;a aria-label=&quot;NPM version&quot; href=&quot;https://www.npmjs.com/package/next&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/npm/v/next.svg?style=for-the-badge&amp;amp;labelColor=000000&quot;&gt; &lt;/a&gt; &lt;a aria-label=&quot;License&quot; href=&quot;https://github.com/vercel/next.js/raw/canary/license.md&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/npm/l/next.svg?style=for-the-badge&amp;amp;labelColor=000000&quot;&gt; &lt;/a&gt; &lt;a aria-label=&quot;Join the community on GitHub&quot; href=&quot;https://github.com/vercel/next.js/discussions&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&amp;amp;logo=Next.js&amp;amp;labelColor=000000&amp;amp;logoWidth=20&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a aria-label=&quot;next.js learn&quot; href=&quot;https://nextjs.org/learn&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://nextjs.org/learn&quot;&gt;https://nextjs.org/learn&lt;/a&gt; to get started with Next.js.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://nextjs.org/docs&quot;&gt;https://nextjs.org/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; 
&lt;h2&gt;Who is using Next.js?&lt;/h2&gt; 
&lt;p&gt;Next.js is used by the world&#39;s leading companies. Check out the &lt;a href=&quot;https://nextjs.org/showcase&quot;&gt;Next.js Showcase&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The Next.js community can be found on &lt;a href=&quot;https://github.com/vercel/next.js/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; 
&lt;p&gt;To chat with other community members you can join the &lt;a href=&quot;https://nextjs.org/discord&quot;&gt;Next.js Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/vercel/next.js/raw/canary/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; applies to all Next.js community channels.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/vercel/next.js/canary/contributing.md&quot;&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Good First Issues&lt;/h3&gt; 
&lt;p&gt;We have a list of &lt;a href=&quot;https://github.com/vercel/next.js/labels/good%20first%20issue&quot;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tim Neutkens (&lt;a href=&quot;https://twitter.com/timneutkens&quot;&gt;@timneutkens&lt;/a&gt;) ‚Äì &lt;a href=&quot;https://vercel.com/about/timneutkens&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Naoyuki Kanezawa (&lt;a href=&quot;https://twitter.com/nkzawa&quot;&gt;@nkzawa&lt;/a&gt;) ‚Äì &lt;a href=&quot;https://vercel.com/about/nkzawa&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Guillermo Rauch (&lt;a href=&quot;https://twitter.com/rauchg&quot;&gt;@rauchg&lt;/a&gt;) ‚Äì &lt;a href=&quot;https://vercel.com/about/rauchg&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Arunoda Susiripala (&lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;@arunoda&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Tony Kovanen (&lt;a href=&quot;https://twitter.com/tonykovanen&quot;&gt;@tonykovanen&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Dan Zajdband (&lt;a href=&quot;https://twitter.com/impronunciable&quot;&gt;@impronunciable&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ryanmcdermott/clean-code-javascript</title>
      <link>https://github.com/ryanmcdermott/clean-code-javascript</link>
      <description>&lt;p&gt;üõÅ Clean Code concepts adapted for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clean-code-javascript&lt;/h1&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#variables&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#functions&quot;&gt;Functions&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#objects-and-data-structures&quot;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#classes&quot;&gt;Classes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#solid&quot;&gt;SOLID&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#concurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#error-handling&quot;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#formatting&quot;&gt;Formatting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#translation&quot;&gt;Translation&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://www.osnews.com/images/comics/wtfm.jpg&quot; alt=&quot;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for JavaScript. This is not a style guide. It&#39;s a guide to producing &lt;a href=&quot;https://github.com/ryanmcdermott/3rs-of-software-architecture&quot;&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt; 
&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the JavaScript code that you and your team produce.&lt;/p&gt; 
&lt;p&gt;One more thing: knowing these won&#39;t immediately make you a better software developer, and working with them for many years doesn&#39;t mean you won&#39;t make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don&#39;t beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const yyyymmdstr = moment().format(&quot;YYYY/MM/DD&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const currentDate = moment().format(&quot;YYYY/MM/DD&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getUserInfo();
getClientData();
getCustomerRecord();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getUser();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use searchable names&lt;/h3&gt; 
&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like &lt;a href=&quot;https://github.com/danielstjules/buddy.js&quot;&gt;buddy.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/eslint/eslint/raw/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md&quot;&gt;ESLint&lt;/a&gt; can help identify unnamed constants.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// What the heck is 86400000 for?
setTimeout(blastOff, 86400000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Declare them as capitalized named constants.
const MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;

setTimeout(blastOff, MILLISECONDS_PER_DAY);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use explanatory variables&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const address = &quot;One Infinite Loop, Cupertino 95014&quot;;
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
saveCityZipCode(
  address.match(cityZipCodeRegex)[1],
  address.match(cityZipCodeRegex)[2]
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const address = &quot;One Infinite Loop, Cupertino 95014&quot;;
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
const [_, city, zipCode] = address.match(cityZipCodeRegex) || [];
saveCityZipCode(city, zipCode);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; 
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const locations = [&quot;Austin&quot;, &quot;New York&quot;, &quot;San Francisco&quot;];
locations.forEach(l =&amp;gt; {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  // Wait, what is `l` for again?
  dispatch(l);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const locations = [&quot;Austin&quot;, &quot;New York&quot;, &quot;San Francisco&quot;];
locations.forEach(location =&amp;gt; {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  dispatch(location);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; 
&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Car = {
  carMake: &quot;Honda&quot;,
  carModel: &quot;Accord&quot;,
  carColor: &quot;Blue&quot;
};

function paintCar(car, color) {
  car.carColor = color;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Car = {
  make: &quot;Honda&quot;,
  model: &quot;Accord&quot;,
  color: &quot;Blue&quot;
};

function paintCar(car, color) {
  car.color = color;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; 
&lt;p&gt;Default arguments are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for &lt;code&gt;undefined&lt;/code&gt; arguments. Other &quot;falsy&quot; values such as &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, will not be replaced by a default value.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMicrobrewery(name) {
  const breweryName = name || &quot;Hipster Brew Co.&quot;;
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMicrobrewery(name = &quot;Hipster Brew Co.&quot;) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; 
&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; 
&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; 
&lt;p&gt;Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.&lt;/p&gt; 
&lt;p&gt;To make it obvious what properties the function expects, you can use the ES2015/ES6 destructuring syntax. This has a few advantages:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;When someone looks at the function signature, it&#39;s immediately clear what properties are being used.&lt;/li&gt; 
 &lt;li&gt;It can be used to simulate named parameters.&lt;/li&gt; 
 &lt;li&gt;Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.&lt;/li&gt; 
 &lt;li&gt;Linters can warn you about unused properties, which would be impossible without destructuring.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMenu(title, body, buttonText, cancellable) {
  // ...
}

createMenu(&quot;Foo&quot;, &quot;Bar&quot;, &quot;Baz&quot;, true);

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createMenu({ title, body, buttonText, cancellable }) {
  // ...
}

createMenu({
  title: &quot;Foo&quot;,
  body: &quot;Bar&quot;,
  buttonText: &quot;Baz&quot;,
  cancellable: true
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Functions should do one thing&lt;/h3&gt; 
&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you&#39;ll be ahead of many developers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function emailClients(clients) {
  clients.forEach(client =&amp;gt; {
    const clientRecord = database.lookup(client);
    if (clientRecord.isActive()) {
      email(client);
    }
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function emailActiveClients(clients) {
  clients.filter(isActiveClient).forEach(email);
}

function isActiveClient(client) {
  const clientRecord = database.lookup(client);
  return clientRecord.isActive();
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Function names should say what they do&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addToDate(date, month) {
  // ...
}

const date = new Date();

// It&#39;s hard to tell from the function name what is added
addToDate(date, 1);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addMonthToDate(month, date) {
  // ...
}

const date = new Date();
addMonthToDate(1, date);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; 
&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function parseBetterJSAlternative(code) {
  const REGEXES = [
    // ...
  ];

  const statements = code.split(&quot; &quot;);
  const tokens = [];
  REGEXES.forEach(REGEX =&amp;gt; {
    statements.forEach(statement =&amp;gt; {
      // ...
    });
  });

  const ast = [];
  tokens.forEach(token =&amp;gt; {
    // lex...
  });

  ast.forEach(node =&amp;gt; {
    // parse...
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function parseBetterJSAlternative(code) {
  const tokens = tokenize(code);
  const syntaxTree = parse(tokens);
  syntaxTree.forEach(node =&amp;gt; {
    // parse...
  });
}

function tokenize(code) {
  const REGEXES = [
    // ...
  ];

  const statements = code.split(&quot; &quot;);
  const tokens = [];
  REGEXES.forEach(REGEX =&amp;gt; {
    statements.forEach(statement =&amp;gt; {
      tokens.push(/* ... */);
    });
  });

  return tokens;
}

function parse(tokens) {
  const syntaxTree = [];
  tokens.forEach(token =&amp;gt; {
    syntaxTree.push(/* ... */);
  });

  return syntaxTree;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Remove duplicate code&lt;/h3&gt; 
&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; 
&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; 
&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; 
&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;em&gt;Classes&lt;/em&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showDeveloperList(developers) {
  developers.forEach(developer =&amp;gt; {
    const expectedSalary = developer.calculateExpectedSalary();
    const experience = developer.getExperience();
    const githubLink = developer.getGithubLink();
    const data = {
      expectedSalary,
      experience,
      githubLink
    };

    render(data);
  });
}

function showManagerList(managers) {
  managers.forEach(manager =&amp;gt; {
    const expectedSalary = manager.calculateExpectedSalary();
    const experience = manager.getExperience();
    const portfolio = manager.getMBAProjects();
    const data = {
      expectedSalary,
      experience,
      portfolio
    };

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showEmployeeList(employees) {
  employees.forEach(employee =&amp;gt; {
    const expectedSalary = employee.calculateExpectedSalary();
    const experience = employee.getExperience();

    const data = {
      expectedSalary,
      experience
    };

    switch (employee.type) {
      case &quot;manager&quot;:
        data.portfolio = employee.getMBAProjects();
        break;
      case &quot;developer&quot;:
        data.githubLink = employee.getGithubLink();
        break;
    }

    render(data);
  });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Set default objects with Object.assign&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const menuConfig = {
  title: null,
  body: &quot;Bar&quot;,
  buttonText: null,
  cancellable: true
};

function createMenu(config) {
  config.title = config.title || &quot;Foo&quot;;
  config.body = config.body || &quot;Bar&quot;;
  config.buttonText = config.buttonText || &quot;Baz&quot;;
  config.cancellable =
    config.cancellable !== undefined ? config.cancellable : true;
}

createMenu(menuConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const menuConfig = {
  title: &quot;Order&quot;,
  // User did not include &#39;body&#39; key
  buttonText: &quot;Send&quot;,
  cancellable: true
};

function createMenu(config) {
  let finalConfig = Object.assign(
    {
      title: &quot;Foo&quot;,
      body: &quot;Bar&quot;,
      buttonText: &quot;Baz&quot;,
      cancellable: true
    },
    config
  );
  return finalConfig
  // config now equals: {title: &quot;Order&quot;, body: &quot;Bar&quot;, buttonText: &quot;Send&quot;, cancellable: true}
  // ...
}

createMenu(menuConfig);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; 
&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createFile(name, temp) {
  if (temp) {
    fs.create(`./temp/${name}`);
  } else {
    fs.create(name);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function createFile(name) {
  fs.create(name);
}

function createTempFile(name) {
  createFile(`./temp/${name}`);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; 
&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; 
&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; 
&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Global variable referenced by following function.
// If we had another function that used this name, now it&#39;d be an array and it could break it.
let name = &quot;Ryan McDermott&quot;;

function splitIntoFirstAndLastName() {
  name = name.split(&quot; &quot;);
}

splitIntoFirstAndLastName();

console.log(name); // [&#39;Ryan&#39;, &#39;McDermott&#39;];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function splitIntoFirstAndLastName(name) {
  return name.split(&quot; &quot;);
}

const name = &quot;Ryan McDermott&quot;;
const newName = splitIntoFirstAndLastName(name);

console.log(name); // &#39;Ryan McDermott&#39;;
console.log(newName); // [&#39;Ryan&#39;, &#39;McDermott&#39;];
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; 
&lt;p&gt;In JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it&#39;s important to handle them carefully when they&#39;re passed as parameters to a function. A JavaScript function can change an object&#39;s properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; 
&lt;p&gt;Suppose there&#39;s a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let&#39;s imagine a bad situation:&lt;/p&gt; 
&lt;p&gt;The user clicks the &quot;Purchase&quot; button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an &quot;Add to Cart&quot; button on an item they don&#39;t actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; 
&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn&#39;t be affected by the changes.&lt;/p&gt; 
&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects!&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn&#39;t a big issue in practice because there are &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addItemToCart = (cart, item) =&amp;gt; {
  cart.push({ item, date: Date.now() });
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addItemToCart = (cart, item) =&amp;gt; {
  return [...cart, { item, date: Date.now() }];
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; 
&lt;p&gt;Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to extend JavaScript&#39;s native Array method to have a &lt;code&gt;diff&lt;/code&gt; method that could show the difference between two arrays? You could write your new function to the &lt;code&gt;Array.prototype&lt;/code&gt;, but it could clash with another library that tried to do the same thing. What if that other library was just using &lt;code&gt;diff&lt;/code&gt; to find the difference between the first and last elements of an array? This is why it would be much better to just use ES2015/ES6 classes and simply extend the &lt;code&gt;Array&lt;/code&gt; global.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.prototype.diff = function diff(comparisonArray) {
  const hash = new Set(comparisonArray);
  return this.filter(elem =&amp;gt; !hash.has(elem));
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class SuperArray extends Array {
  diff(comparisonArray) {
    const hash = new Set(comparisonArray);
    return this.filter(elem =&amp;gt; !hash.has(elem));
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; 
&lt;p&gt;JavaScript isn&#39;t a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const programmerOutput = [
  {
    name: &quot;Uncle Bobby&quot;,
    linesOfCode: 500
  },
  {
    name: &quot;Suzie Q&quot;,
    linesOfCode: 1500
  },
  {
    name: &quot;Jimmy Gosling&quot;,
    linesOfCode: 150
  },
  {
    name: &quot;Gracie Hopper&quot;,
    linesOfCode: 1000
  }
];

let totalOutput = 0;

for (let i = 0; i &amp;lt; programmerOutput.length; i++) {
  totalOutput += programmerOutput[i].linesOfCode;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const programmerOutput = [
  {
    name: &quot;Uncle Bobby&quot;,
    linesOfCode: 500
  },
  {
    name: &quot;Suzie Q&quot;,
    linesOfCode: 1500
  },
  {
    name: &quot;Jimmy Gosling&quot;,
    linesOfCode: 150
  },
  {
    name: &quot;Gracie Hopper&quot;,
    linesOfCode: 1000
  }
];

const totalOutput = programmerOutput.reduce(
  (totalLines, output) =&amp;gt; totalLines + output.linesOfCode,
  0
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (fsm.state === &quot;fetching&quot; &amp;amp;&amp;amp; isEmpty(listNode)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function shouldShowSpinner(fsm, listNode) {
  return fsm.state === &quot;fetching&quot; &amp;amp;&amp;amp; isEmpty(listNode);
}

if (shouldShowSpinner(fsmInstance, listNodeInstance)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isDOMNodeNotPresent(node) {
  // ...
}

if (!isDOMNodeNotPresent(node)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function isDOMNodePresent(node) {
  // ...
}

if (isDOMNodePresent(node)) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid conditionals&lt;/h3&gt; 
&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &quot;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&quot; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &quot;well that&#39;s great but why would I want to do that?&quot; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Airplane {
  // ...
  getCruisingAltitude() {
    switch (this.type) {
      case &quot;777&quot;:
        return this.getMaxAltitude() - this.getPassengerCount();
      case &quot;Air Force One&quot;:
        return this.getMaxAltitude();
      case &quot;Cessna&quot;:
        return this.getMaxAltitude() - this.getFuelExpenditure();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Airplane {
  // ...
}

class Boeing777 extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude() - this.getPassengerCount();
  }
}

class AirForceOne extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude();
  }
}

class Cessna extends Airplane {
  // ...
  getCruisingAltitude() {
    return this.getMaxAltitude() - this.getFuelExpenditure();
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; 
&lt;p&gt;JavaScript is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function travelToTexas(vehicle) {
  if (vehicle instanceof Bicycle) {
    vehicle.pedal(this.currentLocation, new Location(&quot;texas&quot;));
  } else if (vehicle instanceof Car) {
    vehicle.drive(this.currentLocation, new Location(&quot;texas&quot;));
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function travelToTexas(vehicle) {
  vehicle.move(this.currentLocation, new Location(&quot;texas&quot;));
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; 
&lt;p&gt;If you are working with basic primitive values like strings and integers, and you can&#39;t use polymorphism but you still feel the need to type-check, you should consider using TypeScript. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux &quot;type-safety&quot; you get doesn&#39;t make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(val1, val2) {
  if (
    (typeof val1 === &quot;number&quot; &amp;amp;&amp;amp; typeof val2 === &quot;number&quot;) ||
    (typeof val1 === &quot;string&quot; &amp;amp;&amp;amp; typeof val2 === &quot;string&quot;)
  ) {
    return val1 + val2;
  }

  throw new Error(&quot;Must be of type String or Number&quot;);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(val1, val2) {
  return val1 + val2;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t over-optimize&lt;/h3&gt; 
&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. &lt;a href=&quot;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&quot;&gt;There are good resources&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// On old browsers, each iteration with uncached `list.length` would be costly
// because of `list.length` recomputation. In modern browsers, this is optimized.
for (let i = 0, len = list.length; i &amp;lt; len; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (let i = 0; i &amp;lt; list.length; i++) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Remove dead code&lt;/h3&gt; 
&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function oldRequestModule(url) {
  // ...
}

function newRequestModule(url) {
  // ...
}

const req = newRequestModule;
inventoryTracker(&quot;apples&quot;, req, &quot;www.inventory-awesome.io&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function newRequestModule(url) {
  // ...
}

const req = newRequestModule;
inventoryTracker(&quot;apples&quot;, req, &quot;www.inventory-awesome.io&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Objects and Data Structures&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use getters and setters&lt;/h3&gt; 
&lt;p&gt;Using getters and setters to access data on objects could be better than simply looking for a property on an object. &quot;Why?&quot; you might ask. Well, here&#39;s an unorganized list of reasons why:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; 
 &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; 
 &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; 
 &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeBankAccount() {
  // ...

  return {
    balance: 0
    // ...
  };
}

const account = makeBankAccount();
account.balance = 100;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeBankAccount() {
  // this one is private
  let balance = 0;

  // a &quot;getter&quot;, made public via the returned object below
  function getBalance() {
    return balance;
  }

  // a &quot;setter&quot;, made public via the returned object below
  function setBalance(amount) {
    // ... validate before updating the balance
    balance = amount;
  }

  return {
    // ...
    getBalance,
    setBalance
  };
}

const account = makeBankAccount();
account.setBalance(100);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Make objects have private members&lt;/h3&gt; 
&lt;p&gt;This can be accomplished through closures (for ES5 and below).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Employee = function(name) {
  this.name = name;
};

Employee.prototype.getName = function getName() {
  return this.name;
};

const employee = new Employee(&quot;John Doe&quot;);
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
delete employee.name;
console.log(`Employee name: ${employee.getName()}`); // Employee name: undefined
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function makeEmployee(name) {
  return {
    getName() {
      return name;
    }
  };
}

const employee = makeEmployee(&quot;John Doe&quot;);
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
delete employee.name;
console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Prefer ES2015/ES6 classes over ES5 plain functions&lt;/h3&gt; 
&lt;p&gt;It&#39;s very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes. However, prefer small functions over classes until you find yourself needing larger and more complex objects.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Animal = function(age) {
  if (!(this instanceof Animal)) {
    throw new Error(&quot;Instantiate Animal with `new`&quot;);
  }

  this.age = age;
};

Animal.prototype.move = function move() {};

const Mammal = function(age, furColor) {
  if (!(this instanceof Mammal)) {
    throw new Error(&quot;Instantiate Mammal with `new`&quot;);
  }

  Animal.call(this, age);
  this.furColor = furColor;
};

Mammal.prototype = Object.create(Animal.prototype);
Mammal.prototype.constructor = Mammal;
Mammal.prototype.liveBirth = function liveBirth() {};

const Human = function(age, furColor, languageSpoken) {
  if (!(this instanceof Human)) {
    throw new Error(&quot;Instantiate Human with `new`&quot;);
  }

  Mammal.call(this, age, furColor);
  this.languageSpoken = languageSpoken;
};

Human.prototype = Object.create(Mammal.prototype);
Human.prototype.constructor = Human;
Human.prototype.speak = function speak() {};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Animal {
  constructor(age) {
    this.age = age;
  }

  move() {
    /* ... */
  }
}

class Mammal extends Animal {
  constructor(age, furColor) {
    super(age);
    this.furColor = furColor;
  }

  liveBirth() {
    /* ... */
  }
}

class Human extends Mammal {
  constructor(age, furColor, languageSpoken) {
    super(age, furColor);
    this.languageSpoken = languageSpoken;
  }

  speak() {
    /* ... */
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Use method chaining&lt;/h3&gt; 
&lt;p&gt;This pattern is very useful in JavaScript and you see it in many libraries such as jQuery and Lodash. It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be. In your class functions, simply return &lt;code&gt;this&lt;/code&gt; at the end of every function, and you can chain further class methods onto it.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Car {
  constructor(make, model, color) {
    this.make = make;
    this.model = model;
    this.color = color;
  }

  setMake(make) {
    this.make = make;
  }

  setModel(model) {
    this.model = model;
  }

  setColor(color) {
    this.color = color;
  }

  save() {
    console.log(this.make, this.model, this.color);
  }
}

const car = new Car(&quot;Ford&quot;, &quot;F-150&quot;, &quot;red&quot;);
car.setColor(&quot;pink&quot;);
car.save();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Car {
  constructor(make, model, color) {
    this.make = make;
    this.model = model;
    this.color = color;
  }

  setMake(make) {
    this.make = make;
    // NOTE: Returning this for chaining
    return this;
  }

  setModel(model) {
    this.model = model;
    // NOTE: Returning this for chaining
    return this;
  }

  setColor(color) {
    this.color = color;
    // NOTE: Returning this for chaining
    return this;
  }

  save() {
    console.log(this.make, this.model, this.color);
    // NOTE: Returning this for chaining
    return this;
  }
}

const car = new Car(&quot;Ford&quot;, &quot;F-150&quot;, &quot;red&quot;).setColor(&quot;pink&quot;).save();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; 
&lt;p&gt;As stated famously in &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; 
&lt;p&gt;You might be wondering then, &quot;when should I use inheritance?&quot; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Your inheritance represents an &quot;is-a&quot; relationship and not a &quot;has-a&quot; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; 
 &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; 
 &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Employee {
  constructor(name, email) {
    this.name = name;
    this.email = email;
  }

  // ...
}

// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee
class EmployeeTaxData extends Employee {
  constructor(ssn, salary) {
    super();
    this.ssn = ssn;
    this.salary = salary;
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class EmployeeTaxData {
  constructor(ssn, salary) {
    this.ssn = ssn;
    this.salary = salary;
  }

  // ...
}

class Employee {
  constructor(name, email) {
    this.name = name;
    this.email = email;
  }

  setTaxData(ssn, salary) {
    this.taxData = new EmployeeTaxData(ssn, salary);
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;SOLID&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; 
&lt;p&gt;As stated in Clean Code, &quot;There should never be more than one reason for a class to change&quot;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class UserSettings {
  constructor(user) {
    this.user = user;
  }

  changeSettings(settings) {
    if (this.verifyCredentials()) {
      // ...
    }
  }

  verifyCredentials() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class UserAuth {
  constructor(user) {
    this.user = user;
  }

  verifyCredentials() {
    // ...
  }
}

class UserSettings {
  constructor(user) {
    this.user = user;
    this.auth = new UserAuth(user);
  }

  changeSettings(settings) {
    if (this.auth.verifyCredentials()) {
      // ...
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; 
&lt;p&gt;As stated by Bertrand Meyer, &quot;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&quot; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AjaxAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;ajaxAdapter&quot;;
  }
}

class NodeAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;nodeAdapter&quot;;
  }
}

class HttpRequester {
  constructor(adapter) {
    this.adapter = adapter;
  }

  fetch(url) {
    if (this.adapter.name === &quot;ajaxAdapter&quot;) {
      return makeAjaxCall(url).then(response =&amp;gt; {
        // transform response and return
      });
    } else if (this.adapter.name === &quot;nodeAdapter&quot;) {
      return makeHttpCall(url).then(response =&amp;gt; {
        // transform response and return
      });
    }
  }
}

function makeAjaxCall(url) {
  // request and return promise
}

function makeHttpCall(url) {
  // request and return promise
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AjaxAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;ajaxAdapter&quot;;
  }

  request(url) {
    // request and return promise
  }
}

class NodeAdapter extends Adapter {
  constructor() {
    super();
    this.name = &quot;nodeAdapter&quot;;
  }

  request(url) {
    // request and return promise
  }
}

class HttpRequester {
  constructor(adapter) {
    this.adapter = adapter;
  }

  fetch(url) {
    return this.adapter.request(url).then(response =&amp;gt; {
      // transform response and return
    });
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; 
&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &quot;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&quot; That&#39;s an even scarier definition.&lt;/p&gt; 
&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &quot;is-a&quot; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Rectangle {
  constructor() {
    this.width = 0;
    this.height = 0;
  }

  setColor(color) {
    // ...
  }

  render(area) {
    // ...
  }

  setWidth(width) {
    this.width = width;
  }

  setHeight(height) {
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }
}

class Square extends Rectangle {
  setWidth(width) {
    this.width = width;
    this.height = width;
  }

  setHeight(height) {
    this.width = height;
    this.height = height;
  }
}

function renderLargeRectangles(rectangles) {
  rectangles.forEach(rectangle =&amp;gt; {
    rectangle.setWidth(4);
    rectangle.setHeight(5);
    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.
    rectangle.render(area);
  });
}

const rectangles = [new Rectangle(), new Rectangle(), new Square()];
renderLargeRectangles(rectangles);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Shape {
  setColor(color) {
    // ...
  }

  render(area) {
    // ...
  }
}

class Rectangle extends Shape {
  constructor(width, height) {
    super();
    this.width = width;
    this.height = height;
  }

  getArea() {
    return this.width * this.height;
  }
}

class Square extends Shape {
  constructor(length) {
    super();
    this.length = length;
  }

  getArea() {
    return this.length * this.length;
  }
}

function renderLargeShapes(shapes) {
  shapes.forEach(shape =&amp;gt; {
    const area = shape.getArea();
    shape.render(area);
  });
}

const shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];
renderLargeShapes(shapes);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; 
&lt;p&gt;JavaScript doesn&#39;t have interfaces so this principle doesn&#39;t apply as strictly as others. However, it&#39;s important and relevant even with JavaScript&#39;s lack of type system.&lt;/p&gt; 
&lt;p&gt;ISP states that &quot;Clients should not be forced to depend upon interfaces that they do not use.&quot; Interfaces are implicit contracts in JavaScript because of duck typing.&lt;/p&gt; 
&lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &quot;fat interface&quot;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class DOMTraverser {
  constructor(settings) {
    this.settings = settings;
    this.setup();
  }

  setup() {
    this.rootNode = this.settings.rootNode;
    this.settings.animationModule.setup();
  }

  traverse() {
    // ...
  }
}

const $ = new DOMTraverser({
  rootNode: document.getElementsByTagName(&quot;body&quot;),
  animationModule() {} // Most of the time, we won&#39;t need to animate when traversing.
  // ...
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class DOMTraverser {
  constructor(settings) {
    this.settings = settings;
    this.options = settings.options;
    this.setup();
  }

  setup() {
    this.rootNode = this.settings.rootNode;
    this.setupOptions();
  }

  setupOptions() {
    if (this.options.animationModule) {
      // ...
    }
  }

  traverse() {
    // ...
  }
}

const $ = new DOMTraverser({
  rootNode: document.getElementsByTagName(&quot;body&quot;),
  options: {
    animationModule() {}
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; 
&lt;p&gt;This principle states two essential things:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; 
 &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with AngularJS, you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; 
&lt;p&gt;As stated previously, JavaScript doesn&#39;t have interfaces so the abstractions that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code&gt;InventoryTracker&lt;/code&gt; will have a &lt;code&gt;requestItems&lt;/code&gt; method.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class InventoryRequester {
  constructor() {
    this.REQ_METHODS = [&quot;HTTP&quot;];
  }

  requestItem(item) {
    // ...
  }
}

class InventoryTracker {
  constructor(items) {
    this.items = items;

    // BAD: We have created a dependency on a specific request implementation.
    // We should just have requestItems depend on a request method: `request`
    this.requester = new InventoryRequester();
  }

  requestItems() {
    this.items.forEach(item =&amp;gt; {
      this.requester.requestItem(item);
    });
  }
}

const inventoryTracker = new InventoryTracker([&quot;apples&quot;, &quot;bananas&quot;]);
inventoryTracker.requestItems();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class InventoryTracker {
  constructor(items, requester) {
    this.items = items;
    this.requester = requester;
  }

  requestItems() {
    this.items.forEach(item =&amp;gt; {
      this.requester.requestItem(item);
    });
  }
}

class InventoryRequesterV1 {
  constructor() {
    this.REQ_METHODS = [&quot;HTTP&quot;];
  }

  requestItem(item) {
    // ...
  }
}

class InventoryRequesterV2 {
  constructor() {
    this.REQ_METHODS = [&quot;WS&quot;];
  }

  requestItem(item) {
    // ...
  }
}

// By constructing our dependencies externally and injecting them, we can easily
// substitute our request module for a fancy new one that uses WebSockets.
const inventoryTracker = new InventoryTracker(
  [&quot;apples&quot;, &quot;bananas&quot;],
  new InventoryRequesterV2()
);
inventoryTracker.requestItems();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won&#39;t be sure that you didn&#39;t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a &lt;a href=&quot;https://gotwarlost.github.io/istanbul/&quot;&gt;good coverage tool&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;There&#39;s no excuse to not write tests. There are &lt;a href=&quot;https://jstherightway.org/#testing-tools&quot;&gt;plenty of good JS test frameworks&lt;/a&gt;, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; 
&lt;h3&gt;Single concept per test&lt;/h3&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import assert from &quot;assert&quot;;

describe(&quot;MomentJS&quot;, () =&amp;gt; {
  it(&quot;handles date boundaries&quot;, () =&amp;gt; {
    let date;

    date = new MomentJS(&quot;1/1/2015&quot;);
    date.addDays(30);
    assert.equal(&quot;1/31/2015&quot;, date);

    date = new MomentJS(&quot;2/1/2016&quot;);
    date.addDays(28);
    assert.equal(&quot;02/29/2016&quot;, date);

    date = new MomentJS(&quot;2/1/2015&quot;);
    date.addDays(28);
    assert.equal(&quot;03/01/2015&quot;, date);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import assert from &quot;assert&quot;;

describe(&quot;MomentJS&quot;, () =&amp;gt; {
  it(&quot;handles 30-day months&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;1/1/2015&quot;);
    date.addDays(30);
    assert.equal(&quot;1/31/2015&quot;, date);
  });

  it(&quot;handles leap year&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;2/1/2016&quot;);
    date.addDays(28);
    assert.equal(&quot;02/29/2016&quot;, date);
  });

  it(&quot;handles non-leap year&quot;, () =&amp;gt; {
    const date = new MomentJS(&quot;2/1/2015&quot;);
    date.addDays(28);
    assert.equal(&quot;03/01/2015&quot;, date);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Use Promises, not callbacks&lt;/h3&gt; 
&lt;p&gt;Callbacks aren&#39;t clean, and they cause excessive amounts of nesting. With ES2015/ES6, Promises are a built-in global type. Use them!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request&quot;;
import { writeFile } from &quot;fs&quot;;

get(
  &quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;,
  (requestErr, response, body) =&amp;gt; {
    if (requestErr) {
      console.error(requestErr);
    } else {
      writeFile(&quot;article.html&quot;, body, writeErr =&amp;gt; {
        if (writeErr) {
          console.error(writeErr);
        } else {
          console.log(&quot;File written&quot;);
        }
      });
    }
  }
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

get(&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;)
  .then(body =&amp;gt; {
    return writeFile(&quot;article.html&quot;, body);
  })
  .then(() =&amp;gt; {
    console.log(&quot;File written&quot;);
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Async/Await are even cleaner than Promises&lt;/h3&gt; 
&lt;p&gt;Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution. All you need is a function that is prefixed in an &lt;code&gt;async&lt;/code&gt; keyword, and then you can write your logic imperatively without a &lt;code&gt;then&lt;/code&gt; chain of functions. Use this if you can take advantage of ES2017/ES8 features today!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

get(&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;)
  .then(body =&amp;gt; {
    return writeFile(&quot;article.html&quot;, body);
  })
  .then(() =&amp;gt; {
    console.log(&quot;File written&quot;);
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { get } from &quot;request-promise&quot;;
import { writeFile } from &quot;fs-extra&quot;;

async function getCleanCodeArticle() {
  try {
    const body = await get(
      &quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;
    );
    await writeFile(&quot;article.html&quot;, body);
    console.log(&quot;File written&quot;);
  } catch (err) {
    console.error(err);
  }
}

getCleanCodeArticle()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it&#39;s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.&lt;/p&gt; 
&lt;h3&gt;Don&#39;t ignore caught errors&lt;/h3&gt; 
&lt;p&gt;Doing nothing with a caught error doesn&#39;t give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;console.log&lt;/code&gt;) isn&#39;t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  functionThatMightThrow();
} catch (error) {
  console.log(error);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  functionThatMightThrow();
} catch (error) {
  // One option (more noisy than console.log):
  console.error(error);
  // Another option:
  notifyUserOfError(error);
  // Another option:
  reportErrorToService(error);
  // OR do all three!
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Don&#39;t ignore rejected promises&lt;/h3&gt; 
&lt;p&gt;For the same reason you shouldn&#39;t ignore caught errors from &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getdata()
  .then(data =&amp;gt; {
    functionThatMightThrow(data);
  })
  .catch(error =&amp;gt; {
    console.log(error);
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getdata()
  .then(data =&amp;gt; {
    functionThatMightThrow(data);
  })
  .catch(error =&amp;gt; {
    // One option (more noisy than console.log):
    console.error(error);
    // Another option:
    notifyUserOfError(error);
    // Another option:
    reportErrorToService(error);
    // OR do all three!
  });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. There are &lt;a href=&quot;https://standardjs.com/rules.html&quot;&gt;tons of tools&lt;/a&gt; to automate this. Use one! It&#39;s a waste of time and money for engineers to argue over formatting.&lt;/p&gt; 
&lt;p&gt;For things that don&#39;t fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.&lt;/p&gt; 
&lt;h3&gt;Use consistent capitalization&lt;/h3&gt; 
&lt;p&gt;JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const DAYS_IN_WEEK = 7;
const daysInMonth = 30;

const songs = [&quot;Back In Black&quot;, &quot;Stairway to Heaven&quot;, &quot;Hey Jude&quot;];
const Artists = [&quot;ACDC&quot;, &quot;Led Zeppelin&quot;, &quot;The Beatles&quot;];

function eraseDatabase() {}
function restore_database() {}

class animal {}
class Alpaca {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const DAYS_IN_WEEK = 7;
const DAYS_IN_MONTH = 30;

const SONGS = [&quot;Back In Black&quot;, &quot;Stairway to Heaven&quot;, &quot;Hey Jude&quot;];
const ARTISTS = [&quot;ACDC&quot;, &quot;Led Zeppelin&quot;, &quot;The Beatles&quot;];

function eraseDatabase() {}
function restoreDatabase() {}

class Animal {}
class Alpaca {}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; 
&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class PerformanceReview {
  constructor(employee) {
    this.employee = employee;
  }

  lookupPeers() {
    return db.lookup(this.employee, &quot;peers&quot;);
  }

  lookupManager() {
    return db.lookup(this.employee, &quot;manager&quot;);
  }

  getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  perfReview() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();
  }

  getManagerReview() {
    const manager = this.lookupManager();
  }

  getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.perfReview();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class PerformanceReview {
  constructor(employee) {
    this.employee = employee;
  }

  perfReview() {
    this.getPeerReviews();
    this.getManagerReview();
    this.getSelfReview();
  }

  getPeerReviews() {
    const peers = this.lookupPeers();
    // ...
  }

  lookupPeers() {
    return db.lookup(this.employee, &quot;peers&quot;);
  }

  getManagerReview() {
    const manager = this.lookupManager();
  }

  lookupManager() {
    return db.lookup(this.employee, &quot;manager&quot;);
  }

  getSelfReview() {
    // ...
  }
}

const review = new PerformanceReview(employee);
review.perfReview();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/h2&gt; 
&lt;h3&gt;Only comment things that have business logic complexity.&lt;/h3&gt; 
&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hashIt(data) {
  // The hash
  let hash = 0;

  // Length of string
  const length = data.length;

  // Loop through every character in data
  for (let i = 0; i &amp;lt; length; i++) {
    // Get character code.
    const char = data.charCodeAt(i);
    // Make the hash
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;
    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function hashIt(data) {
  let hash = 0;
  const length = data.length;

  for (let i = 0; i &amp;lt; length; i++) {
    const char = data.charCodeAt(i);
    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;

    // Convert to 32-bit integer
    hash &amp;amp;= hash;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t leave commented out code in your codebase&lt;/h3&gt; 
&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doStuff();
// doOtherStuff();
// doSomeMoreStuff();
// doSoMuchStuff();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;doStuff();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Don&#39;t have journal comments&lt;/h3&gt; 
&lt;p&gt;Remember, use version control! There&#39;s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;/**
 * 2016-12-20: Removed monads, didn&#39;t understand them (RM)
 * 2016-10-01: Improved using special monads (JP)
 * 2016-02-03: Removed type-checking (LI)
 * 2015-03-14: Added combine with type-checking (JR)
 */
function combine(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function combine(a, b) {
  return a + b;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;Avoid positional markers&lt;/h3&gt; 
&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;////////////////////////////////////////////////////////////////////////////////
// Scope Model Instantiation
////////////////////////////////////////////////////////////////////////////////
$scope.model = {
  menu: &quot;foo&quot;,
  nav: &quot;bar&quot;
};

////////////////////////////////////////////////////////////////////////////////
// Action setup
////////////////////////////////////////////////////////////////////////////////
const actions = function() {
  // ...
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$scope.model = {
  menu: &quot;foo&quot;,
  nav: &quot;bar&quot;
};

const actions = function() {
  // ...
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;Translation&lt;/h2&gt; 
&lt;p&gt;This is also available in other languages:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Armenia.png&quot; alt=&quot;am&quot;&gt; &lt;strong&gt;Armenian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hanumanum/clean-code-javascript&quot;&gt;hanumanum/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bangladesh.png&quot; alt=&quot;bd&quot;&gt; &lt;strong&gt;Bangla(‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)&lt;/strong&gt;: &lt;a href=&quot;https://github.com/InsomniacSabbir/clean-code-javascript/&quot;&gt;InsomniacSabbir/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&quot; alt=&quot;br&quot;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/fesnt/clean-code-javascript&quot;&gt;fesnt/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&quot; alt=&quot;cn&quot;&gt; &lt;strong&gt;Simplified Chinese&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/alivebao/clean-code-js&quot;&gt;alivebao/clean-code-js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/beginor/clean-code-javascript&quot;&gt;beginor/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png&quot; alt=&quot;tw&quot;&gt; &lt;strong&gt;Traditional Chinese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/AllJointTW/clean-code-javascript&quot;&gt;AllJointTW/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png&quot; alt=&quot;fr&quot;&gt; &lt;strong&gt;French&lt;/strong&gt;: &lt;a href=&quot;https://github.com/GavBaros/clean-code-javascript-fr&quot;&gt;GavBaros/clean-code-javascript-fr&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png&quot; alt=&quot;de&quot;&gt; &lt;strong&gt;German&lt;/strong&gt;: &lt;a href=&quot;https://github.com/marcbruederlin/clean-code-javascript&quot;&gt;marcbruederlin/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Indonesia.png&quot; alt=&quot;id&quot;&gt; &lt;strong&gt;Indonesia&lt;/strong&gt;: &lt;a href=&quot;https://github.com/andirkh/clean-code-javascript/&quot;&gt;andirkh/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png&quot; alt=&quot;it&quot;&gt; &lt;strong&gt;Italian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/frappacchio/clean-code-javascript/&quot;&gt;frappacchio/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&quot; alt=&quot;ja&quot;&gt; &lt;strong&gt;Japanese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mitsuruog/clean-code-javascript/&quot;&gt;mitsuruog/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&quot; alt=&quot;kr&quot;&gt; &lt;strong&gt;Korean&lt;/strong&gt;: &lt;a href=&quot;https://github.com/qkraudghgh/clean-code-javascript-ko&quot;&gt;qkraudghgh/clean-code-javascript-ko&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png&quot; alt=&quot;pl&quot;&gt; &lt;strong&gt;Polish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/greg-dev/clean-code-javascript-pl&quot;&gt;greg-dev/clean-code-javascript-pl&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&quot; alt=&quot;ru&quot;&gt; &lt;strong&gt;Russian&lt;/strong&gt;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/BoryaMogila/clean-code-javascript-ru/&quot;&gt;BoryaMogila/clean-code-javascript-ru/&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://github.com/maksugr/clean-code-javascript&quot;&gt;maksugr/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png&quot; alt=&quot;es&quot;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/tureey/clean-code-javascript&quot;&gt;tureey/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Uruguay.png&quot; alt=&quot;es&quot;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/andersontr15/clean-code-javascript-es&quot;&gt;andersontr15/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Serbia.png&quot; alt=&quot;rs&quot;&gt; &lt;strong&gt;Serbian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/doskovicmilos/clean-code-javascript&quot;&gt;doskovicmilos/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png&quot; alt=&quot;tr&quot;&gt; &lt;strong&gt;Turkish&lt;/strong&gt;: &lt;a href=&quot;https://github.com/bsonmez/clean-code-javascript/tree/turkish-translation&quot;&gt;bsonmez/clean-code-javascript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png&quot; alt=&quot;ua&quot;&gt; &lt;strong&gt;Ukrainian&lt;/strong&gt;: &lt;a href=&quot;https://github.com/mindfr1k/clean-code-javascript-ua&quot;&gt;mindfr1k/clean-code-javascript-ua&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png&quot; alt=&quot;vi&quot;&gt; &lt;strong&gt;Vietnamese&lt;/strong&gt;: &lt;a href=&quot;https://github.com/hienvd/clean-code-javascript/&quot;&gt;hienvd/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&quot;&gt;‚¨Ü back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yjs/yjs</title>
      <link>https://github.com/yjs/yjs</link>
      <description>&lt;p&gt;Shared data types for building collaborative software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://yjs.dev/images/logo/yjs-120x120.png&quot; alt=&quot;Yjs&quot;&gt;&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A CRDT framework with a powerful abstraction of shared data&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Yjs is a &lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Yjs-CRDT-Algorithm&quot;&gt;CRDT implementation&lt;/a&gt; that exposes its internal data structure as &lt;em&gt;shared types&lt;/em&gt;. Shared types are common data types like &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; with superpowers: changes are automatically distributed to other peers and merged without merge conflicts.&lt;/p&gt; 
&lt;p&gt;Yjs is &lt;strong&gt;network agnostic&lt;/strong&gt; (p2p!), supports many existing &lt;strong&gt;rich text editors&lt;/strong&gt;, &lt;strong&gt;offline editing&lt;/strong&gt;, &lt;strong&gt;version snapshots&lt;/strong&gt;, &lt;strong&gt;undo/redo&lt;/strong&gt; and &lt;strong&gt;shared cursors&lt;/strong&gt;. It scales well with an unlimited number of users and is well suited for even large documents.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Demos: &lt;a href=&quot;https://github.com/yjs/yjs-demos&quot;&gt;https://github.com/yjs/yjs-demos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Discuss: &lt;a href=&quot;https://discuss.yjs.dev&quot;&gt;https://discuss.yjs.dev&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Benchmark Yjs vs. Automerge: &lt;a href=&quot;https://github.com/dmonad/crdt-benchmarks&quot;&gt;https://github.com/dmonad/crdt-benchmarks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Podcast &lt;a href=&quot;https://www.tag1consulting.com/blog/deep-dive-real-time-collaborative-editing-solutions-tagteamtalk-001-0&quot;&gt;&lt;strong&gt;&quot;Yjs Deep Dive into real time collaborative editing solutions&quot;:&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Podcast &lt;a href=&quot;https://publishpress.com/blog/yjs/&quot;&gt;&lt;strong&gt;&quot;Google Docs-style editing in Gutenberg with the YJS framework&quot;:&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span&gt;üë∑‚ôÄ&lt;/span&gt; If you are looking for professional (paid) support to build collaborative or distributed applications ping us at &lt;a href=&quot;mailto:yjs@tag1consulting.com&quot;&gt;yjs@tag1consulting.com&lt;/a&gt;. Otherwise you can find help on our &lt;a href=&quot;https://discuss.yjs.dev&quot;&gt;discussion board&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Sponsors&lt;/h2&gt; 
&lt;p&gt;I&#39;m currently looking for sponsors that allow me to be less dependent on contracting work. These awesome backers already fund further development of Yjs:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/davidhq&quot;&gt;&lt;img src=&quot;https://github.com/davidhq.png?size=60&quot; alt=&quot;davidhq&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/ifiokjr&quot;&gt;&lt;img src=&quot;https://github.com/ifiokjr.png?size=60&quot; alt=&quot;Ifiok Jr.&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/burke&quot;&gt;&lt;img src=&quot;https://github.com/burke.png?size=60&quot; alt=&quot;Burke Libbey&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/cben&quot;&gt;&lt;img src=&quot;https://github.com/cben.png?size=60&quot; alt=&quot;Beni Cherniavsky-Paskin&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/tommoor&quot;&gt;&lt;img src=&quot;https://github.com/tommoor.png?size=60&quot; alt=&quot;Tom Moor&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/michaelemeyers&quot;&gt;&lt;img src=&quot;https://github.com/michaelemeyers.png?size=60&quot; alt=&quot;Michael Meyers&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/csbenjamin&quot;&gt;&lt;img src=&quot;https://github.com/csbenjamin.png?size=60&quot; alt=&quot;Cristiano Benjamin&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/AdventureBeard&quot;&gt;&lt;img src=&quot;https://github.com/AdventureBeard.png?size=60&quot; alt=&quot;Braden&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/nimbuswebinc&quot;&gt;&lt;img src=&quot;https://nimbusweb.me/new-style-img/note-icon.svg?sanitize=true&quot; alt=&quot;nimbuswebinc&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/journeyapps&quot;&gt;&lt;img src=&quot;https://github.com/journeyapps.png?size=60&quot; alt=&quot;JourneyApps&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/adabru&quot;&gt;&lt;img src=&quot;https://github.com/adabru.png?size=60&quot; alt=&quot;Adam Brunnmeier&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/NathanaelA&quot;&gt;&lt;img src=&quot;https://github.com/NathanaelA.png?size=60&quot; alt=&quot;Nathanael Anderson&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://room.sh/&quot;&gt;&lt;img src=&quot;https://room.sh/img/icons/android-chrome-192x192.png&quot; height=&quot;60px&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Sponsorship also comes with special perks! &lt;a href=&quot;https://github.com/sponsors/dmonad&quot;&gt;&lt;img src=&quot;https://img.shields.io/static/v1?label=Become%20a%20Sponsor&amp;amp;message=%E2%9D%A4&amp;amp;logo=GitHub&amp;amp;style=flat&amp;amp;color=d42f2d&quot; alt=&quot;Become a Sponsor&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Who is using Yjs&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.serenity.re/en/notes&quot;&gt;Serenity Notes&lt;/a&gt; End-to-end encrypted collaborative notes app.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.relm.us/&quot;&gt;Relm&lt;/a&gt; A collaborative gameworld for teamwork and community. &lt;span&gt;üåü&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://input.com/&quot;&gt;Input&lt;/a&gt; A collaborative note taking app. &lt;span&gt;üåü&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://room.sh/&quot;&gt;Room.sh&lt;/a&gt; A meeting application with integrated collaborative drawing, editing, and coding tools. &lt;span&gt;‚≠ê&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://coronavirustechhandbook.com/&quot;&gt;https://coronavirustechhandbook.com/&lt;/a&gt; A collaborative wiki that is edited by thousands of different people to work on a rapid and sophisticated response to the coronavirus outbreak and subsequent impacts. &lt;span&gt;‚≠ê&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nimbusweb.me/note.php&quot;&gt;Nimbus Note&lt;/a&gt; A note-taking app designed by Nimbus Web.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://joedocs.com/&quot;&gt;JoeDocs&lt;/a&gt; An open collaborative wiki.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://pluxbox.com/&quot;&gt;Pluxbox RadioManager&lt;/a&gt; A web-based app to collaboratively organize radio broadcasts.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://alldone.app/&quot;&gt;Alldone&lt;/a&gt; A next-gen project management and collaboration platform.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Overview&quot;&gt;Overview&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Bindings&quot;&gt;Bindings&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Providers&quot;&gt;Providers&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Getting-Started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#API&quot;&gt;API&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Shared-Types&quot;&gt;Shared Types&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#YDoc&quot;&gt;Y.Doc&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Document-Updates&quot;&gt;Document Updates&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Relative-Positions&quot;&gt;Relative Positions&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#YUndoManager&quot;&gt;Y.UndoManager&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#Yjs-CRDT-Algorithm&quot;&gt;Yjs CRDT Algorithm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#License-and-Author&quot;&gt;License and Author&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This repository contains a collection of shared types that can be observed for changes and manipulated concurrently. Network functionality and two-way-bindings are implemented in separate modules.&lt;/p&gt; 
&lt;h3&gt;Bindings&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Name&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;Cursors&lt;/th&gt; 
   &lt;th&gt;Binding&lt;/th&gt; 
   &lt;th&gt;Demo&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://prosemirror.net/&quot;&gt;ProseMirror&lt;/a&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚úî&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yjs/y-prosemirror&quot;&gt;y-prosemirror&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://demos.yjs.dev/prosemirror/prosemirror.html&quot;&gt;demo&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://quilljs.com/&quot;&gt;Quill&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚úî&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yjs/y-quill&quot;&gt;y-quill&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://demos.yjs.dev/quill/quill.html&quot;&gt;demo&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://codemirror.net/&quot;&gt;CodeMirror&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚úî&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yjs/y-codemirror&quot;&gt;y-codemirror&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://demos.yjs.dev/codemirror/codemirror.html&quot;&gt;demo&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://microsoft.github.io/monaco-editor/&quot;&gt;Monaco&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚úî&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/yjs/y-monaco&quot;&gt;y-monaco&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://demos.yjs.dev/monaco/monaco.html&quot;&gt;demo&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/ianstormtaylor/slate&quot;&gt;Slate&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;‚úî&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/bitphinix/slate-yjs&quot;&gt;slate-yjs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://bitphinix.github.io/slate-yjs-example&quot;&gt;demo&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/pmndrs/valtio&quot;&gt;valtio&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://github.com/dai-shi/valtio-yjs&quot;&gt;valtio-yjs&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://codesandbox.io/s/valtio-yjs-demo-ox3iy&quot;&gt;demo&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;React / Vue / MobX&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://syncedstore.org&quot;&gt;SyncedStore&lt;/a&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://syncedstore.org/docs/react&quot;&gt;demo&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Providers&lt;/h3&gt; 
&lt;p&gt;Setting up the communication between clients, managing awareness information, and storing shared data for offline usage is quite a hassle. &lt;strong&gt;Providers&lt;/strong&gt; manage all that for you and are the perfect starting point for your collaborative app.&lt;/p&gt; 
&lt;dl&gt; 
 &lt;dt&gt;
  &lt;a href=&quot;https://github.com/yjs/y-webrtc&quot;&gt;y-webrtc&lt;/a&gt;
 &lt;/dt&gt; 
 &lt;dd&gt;
   Propagates document updates peer-to-peer using WebRTC. The peers exchange signaling data over signaling servers. Publically available signaling servers are available. Communication over the signaling servers can be encrypted by providing a shared secret, keeping the connection information and the shared document private. 
 &lt;/dd&gt; 
 &lt;dt&gt;
  &lt;a href=&quot;https://github.com/yjs/y-websocket&quot;&gt;y-websocket&lt;/a&gt;
 &lt;/dt&gt; 
 &lt;dd&gt;
   A module that contains a simple websocket backend and a websocket client that connects to that backend. The backend can be extended to persist updates in a leveldb database. 
 &lt;/dd&gt; 
 &lt;dt&gt;
  &lt;a href=&quot;https://github.com/yjs/y-indexeddb&quot;&gt;y-indexeddb&lt;/a&gt;
 &lt;/dt&gt; 
 &lt;dd&gt;
   Efficiently persists document updates to the browsers indexeddb database. The document is immediately available and only diffs need to be synced through the network provider. 
 &lt;/dd&gt; 
 &lt;dt&gt;
  &lt;a href=&quot;https://github.com/marcopolo/y-libp2p&quot;&gt;y-libp2p&lt;/a&gt;
 &lt;/dt&gt; 
 &lt;dd&gt;
   Uses 
  &lt;a href=&quot;https://libp2p.io/&quot;&gt;libp2p&lt;/a&gt; to propagate updates via 
  &lt;a href=&quot;https://github.com/libp2p/specs/tree/master/pubsub/gossipsub&quot;&gt;GossipSub&lt;/a&gt;. Also includes a peer-sync mechanism to catch up on missed updates. 
 &lt;/dd&gt; 
 &lt;dt&gt;
  &lt;a href=&quot;https://github.com/yjs/y-dat&quot;&gt;y-dat&lt;/a&gt;
 &lt;/dt&gt; 
 &lt;dd&gt;
   [WIP] Write document updates efficiently to the dat network using 
  &lt;a href=&quot;https://github.com/kappa-db/multifeed&quot;&gt;multifeed&lt;/a&gt;. Each client has an append-only log of CRDT local updates (hypercore). Multifeed manages and sync hypercores and y-dat listens to changes and applies them to the Yjs document. 
 &lt;/dd&gt; 
 &lt;dt&gt;
  &lt;a href=&quot;https://github.com/yousefED/matrix-crdt&quot;&gt;Matrix-CRDT&lt;/a&gt;
 &lt;/dt&gt; 
 &lt;dd&gt;
   Use 
  &lt;a href=&quot;https://www.matrix.org&quot;&gt;Matrix&lt;/a&gt; as an off-the-shelf backend for Yjs by using the 
  &lt;a href=&quot;https://github.com/yousefED/matrix-crdt&quot;&gt;MatrixProvider&lt;/a&gt;. Use Matrix as transport and storage of Yjs updates, so you can focus building your client app and Matrix can provide powerful features like Authentication, Authorization, Federation, hosting (self-hosting or SaaS) and even End-to-End Encryption (E2EE). 
 &lt;/dd&gt; 
&lt;/dl&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Install Yjs and a provider with your favorite package manager:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm i yjs y-websocket
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Start the y-websocket server:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;PORT=1234 node ./node_modules/y-websocket/bin/server.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example: Observe types&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const yarray = doc.getArray(&#39;my-array&#39;)
yarray.observe(event =&amp;gt; {
  console.log(&#39;yarray was modified&#39;)
})
// every time a local or remote client modifies yarray, the observer is called
yarray.insert(0, [&#39;val&#39;]) // =&amp;gt; &quot;yarray was modified&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Example: Nest types&lt;/h3&gt; 
&lt;p&gt;Remember, shared types are just plain old data types. The only limitation is that a shared type must exist only once in the shared document.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ymap = doc.getMap(&#39;map&#39;)
const foodArray = new Y.Array()
foodArray.insert(0, [&#39;apple&#39;, &#39;banana&#39;])
ymap.set(&#39;food&#39;, foodArray)
ymap.get(&#39;food&#39;) === foodArray // =&amp;gt; true
ymap.set(&#39;fruit&#39;, foodArray) // =&amp;gt; Error! foodArray is already defined
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now you understand how types are defined on a shared document. Next you can jump to the &lt;a href=&quot;https://github.com/yjs/yjs-demos&quot;&gt;demo repository&lt;/a&gt; or continue reading the API docs.&lt;/p&gt; 
&lt;h3&gt;Example: Using and combining providers&lt;/h3&gt; 
&lt;p&gt;Any of the Yjs providers can be combined with each other. So you can sync data over different network technologies.&lt;/p&gt; 
&lt;p&gt;In most cases you want to use a network provider (like y-websocket or y-webrtc) in combination with a persistence provider (y-indexeddb in the browser). Persistence allows you to load the document faster and to persist data that is created while offline.&lt;/p&gt; 
&lt;p&gt;For the sake of this demo we combine two different network providers with a persistence provider.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import * as Y from &#39;yjs&#39;
import { WebrtcProvider } from &#39;y-webrtc&#39;
import { WebsocketProvider } from &#39;y-websocket&#39;
import { IndexeddbPersistence } from &#39;y-indexeddb&#39;

const ydoc = new Y.Doc()

// this allows you to instantly get the (cached) documents data
const indexeddbProvider = new IndexeddbPersistence(&#39;count-demo&#39;, ydoc)
indexeddbProvider.whenSynced.then(() =&amp;gt; {
  console.log(&#39;loaded data from indexed db&#39;)
})

// Sync clients with the y-webrtc provider.
const webrtcProvider = new WebrtcProvider(&#39;count-demo&#39;, ydoc)

// Sync clients with the y-websocket provider
const websocketProvider = new WebsocketProvider(
  &#39;wss://demos.yjs.dev&#39;, &#39;count-demo&#39;, ydoc
)

// array of numbers which produce a sum
const yarray = ydoc.getArray(&#39;count&#39;)

// observe changes of the sum
yarray.observe(event =&amp;gt; {
  // print updates when the data changes
  console.log(&#39;new sum: &#39; + yarray.toArray().reduce((a,b) =&amp;gt; a + b))
})

// add 1 to the sum
yarray.push([1]) // =&amp;gt; &quot;new sum: 1&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;API&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import * as Y from &#39;yjs&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Shared Types&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Y.Array&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;p&gt; A shareable Array-like type that supports efficient insert/delete of elements at any position. Internally it uses a linked list of Arrays that is split when necessary. &lt;/p&gt; 
 &lt;pre&gt;const yarray = new Y.Array()&lt;/pre&gt; 
 &lt;dl&gt; 
  &lt;b&gt;&lt;code&gt;parent:Y.AbstractType|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;insert(index:number, content:Array&amp;lt;object|boolean|Array|string|number|null|Uint8Array|Y.Type&amp;gt;)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Insert content at 
   &lt;var&gt;index&lt;/var&gt;. Note that content is an array of elements. I.e. 
   &lt;code&gt;array.insert(0, [1])&lt;/code&gt; splices the list and inserts 1 at position 0. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;push(Array&amp;lt;Object|boolean|Array|string|number|null|Uint8Array|Y.Type&amp;gt;)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unshift(Array&amp;lt;Object|boolean|Array|string|number|null|Uint8Array|Y.Type&amp;gt;)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;delete(index:number, length:number)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;get(index:number)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;slice(start:number, end:number):Array&amp;lt;Object|boolean|Array|string|number|null|Uint8Array|Y.Type&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Retrieve a range of content
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;length:number&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt; &lt;code&gt; forEach(function(value:object|boolean|Array|string|number|null|Uint8Array|Y.Type, index:number, array: Y.Array)) &lt;/code&gt; &lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;map(function(T, number, YArray):M):Array&amp;lt;M&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toArray():Array&amp;lt;object|boolean|Array|string|number|null|Uint8Array|Y.Type&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Copies the content of this YArray to a new Array.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toJSON():Array&amp;lt;Object|boolean|Array|string|number|null&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Copies the content of this YArray to a new Array. It transforms all child types to JSON using their 
   &lt;code&gt;toJSON&lt;/code&gt; method. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;[Symbol.Iterator]&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Returns an YArray Iterator that contains the values for each index in the array. 
   &lt;pre&gt;for (let value of yarray) { .. }&lt;/pre&gt; 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observe(function(YArrayEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserve(function(YArrayEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observe&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observeDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type or any of its children is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. The event listener receives all Events created by itself or any of its children. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserveDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observeDeep&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
 &lt;/dl&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Y.Map&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;p&gt; A shareable Map type. &lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;const ymap = new Y.Map()&lt;/code&gt;&lt;/pre&gt; 
 &lt;dl&gt; 
  &lt;b&gt;&lt;code&gt;parent:Y.AbstractType|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;size: number&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Total number of key/value pairs.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;get(key:string):object|boolean|string|number|null|Uint8Array|Y.Type&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;set(key:string, value:object|boolean|string|number|null|Uint8Array|Y.Type)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;delete(key:string)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;has(key:string):boolean&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;get(index:number)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Removes all elements from this YMap.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;clone():Y.Map&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Clone this type into a fresh Yjs type.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toJSON():Object&amp;lt;string, Object|boolean|Array|string|number|null|Uint8Array&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Copies the 
   &lt;code&gt;[key,value]&lt;/code&gt; pairs of this YMap to a new Object.It transforms all child types to JSON using their 
   &lt;code&gt;toJSON&lt;/code&gt; method. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;forEach(function(value:object|boolean|Array|string|number|null|Uint8Array|Y.Type, key:string, map: Y.Map))&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Execute the provided function once for every key-value pair. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;[Symbol.Iterator]&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Returns an Iterator of 
   &lt;code&gt;[key, value]&lt;/code&gt; pairs. 
   &lt;pre&gt;for (let [key, value] of ymap) { .. }&lt;/pre&gt; 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;entries()&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Returns an Iterator of 
   &lt;code&gt;[key, value]&lt;/code&gt; pairs. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Returns an Iterator of all values. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;keys()&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Returns an Iterator of all keys. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observe(function(YMapEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserve(function(YMapEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observe&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observeDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type or any of its children is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. The event listener receives all Events created by itself or any of its children. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserveDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observeDeep&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
 &lt;/dl&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Y.Text&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;p&gt; A shareable type that is optimized for shared editing on text. It allows to assign properties to ranges in the text. This makes it possible to implement rich-text bindings to this type. &lt;/p&gt; 
 &lt;p&gt; This type can also be transformed to the &lt;a href=&quot;https://quilljs.com/docs/delta&quot;&gt;delta format&lt;/a&gt;. Similarly the YTextEvents compute changes as deltas. &lt;/p&gt; 
 &lt;pre&gt;const ytext = new Y.Text()&lt;/pre&gt; 
 &lt;dl&gt; 
  &lt;b&gt;&lt;code&gt;parent:Y.AbstractType|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;insert(index:number, content:string, [formattingAttributes:Object&amp;lt;string,string&amp;gt;])&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Insert a string at 
   &lt;var&gt;index&lt;/var&gt; and assign formatting attributes to it. 
   &lt;pre&gt;ytext.insert(0, &#39;bold text&#39;, { bold: true })&lt;/pre&gt; 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;delete(index:number, length:number)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;format(index:number, length:number, formattingAttributes:Object&amp;lt;string,string&amp;gt;)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Assign formatting attributes to a range in the text
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;applyDelta(delta: Delta, opts:Object&amp;lt;string,any&amp;gt;)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    See 
   &lt;a href=&quot;https://quilljs.com/docs/delta/&quot;&gt;Quill Delta&lt;/a&gt; Can set options for preventing remove ending newLines, default is true. 
   &lt;pre&gt;ytext.applyDelta(delta, { sanitize: false })&lt;/pre&gt; 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;length:number&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toString():string&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Transforms this type, without formatting options, into a string.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toJSON():string&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   See 
   &lt;code&gt;toString&lt;/code&gt;
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toDelta():Delta&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Transforms this type to a 
   &lt;a href=&quot;https://quilljs.com/docs/delta/&quot;&gt;Quill Delta&lt;/a&gt; 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observe(function(YTextEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserve(function(YTextEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observe&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observeDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type or any of its children is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. The event listener receives all Events created by itself or any of its children. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserveDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observeDeep&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
 &lt;/dl&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Y.XmlFragment&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;p&gt; A container that holds an Array of Y.XmlElements. &lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;const yxml = new Y.XmlFragment()&lt;/code&gt;&lt;/pre&gt; 
 &lt;dl&gt; 
  &lt;b&gt;&lt;code&gt;parent:Y.AbstractType|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;firstChild:Y.XmlElement|Y.XmlText|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;insert(index:number, content:Array&amp;lt;Y.XmlElement|Y.XmlText&amp;gt;)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;delete(index:number, length:number)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;get(index:number)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;slice(start:number, end:number):Array&amp;lt;Y.XmlElement|Y.XmlText&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Retrieve a range of content
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;length:number&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;clone():Y.XmlFragment&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Clone this type into a fresh Yjs type.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toArray():Array&amp;lt;Y.XmlElement|Y.XmlText&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Copies the children to a new Array.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toDOM():DocumentFragment&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Transforms this type and all children to new DOM elements.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toString():string&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Get the XML serialization of all descendants.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toJSON():string&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   See 
   &lt;code&gt;toString&lt;/code&gt;.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;createTreeWalker(filter: function(AbstractType&amp;lt;any&amp;gt;):boolean):Iterable&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Create an Iterable that walks through the children.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observe(function(YXmlEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserve(function(YXmlEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observe&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observeDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type or any of its children is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. The event listener receives all Events created by itself or any of its children. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserveDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observeDeep&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
 &lt;/dl&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt;&lt;b&gt;Y.XmlElement&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;p&gt; A shareable type that represents an XML Element. It has a &lt;code&gt;nodeName&lt;/code&gt;, attributes, and a list of children. But it makes no effort to validate its content and be actually XML compliant. &lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;const yxml = new Y.XmlElement()&lt;/code&gt;&lt;/pre&gt; 
 &lt;dl&gt; 
  &lt;b&gt;&lt;code&gt;parent:Y.AbstractType|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;firstChild:Y.XmlElement|Y.XmlText|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;nextSibling:Y.XmlElement|Y.XmlText|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;prevSibling:Y.XmlElement|Y.XmlText|null&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;insert(index:number, content:Array&amp;lt;Y.XmlElement|Y.XmlText&amp;gt;)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;delete(index:number, length:number)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;get(index:number)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;length:number&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;setAttribute(attributeName:string, attributeValue:string)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;removeAttribute(attributeName:string)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;getAttribute(attributeName:string):string&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;getAttributes():Object&amp;lt;string,string&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;&lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;get(i:number):Y.XmlElement|Y.XmlText&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Retrieve the i-th element.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;slice(start:number, end:number):Array&amp;lt;Y.XmlElement|Y.XmlText&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Retrieve a range of content
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;clone():Y.XmlElement&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Clone this type into a fresh Yjs type.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toArray():Array&amp;lt;Y.XmlElement|Y.XmlText&amp;gt;&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Copies the children to a new Array.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toDOM():Element&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Transforms this type and all children to a new DOM element.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toString():string&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   Get the XML serialization of all descendants.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;toJSON():string&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
   See 
   &lt;code&gt;toString&lt;/code&gt;.
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observe(function(YXmlEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserve(function(YXmlEvent, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observe&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;observeDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Adds an event listener to this type that will be called synchronously every time this type or any of its children is modified. In the case this type is modified in the event listener, the event listener will be called again after the current event listener returns. The event listener receives all Events created by itself or any of its children. 
  &lt;/dd&gt; 
  &lt;b&gt;&lt;code&gt;unobserveDeep(function(Array&amp;lt;YEvent&amp;gt;, Transaction):void)&lt;/code&gt;&lt;/b&gt; 
  &lt;dd&gt;
    Removes an 
   &lt;code&gt;observeDeep&lt;/code&gt; event listener from this type. 
  &lt;/dd&gt; 
 &lt;/dl&gt; 
&lt;/details&gt; 
&lt;h3&gt;Y.Doc&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const doc = new Y.Doc()
&lt;/code&gt;&lt;/pre&gt; 
&lt;dl&gt; 
 &lt;b&gt;&lt;code&gt;clientID&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  A unique id that identifies this client. (readonly)
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;gc&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Whether garbage collection is enabled on this doc instance. Set `doc.gc = false` in order to disable gc and be able to restore old content. See https://github.com/yjs/yjs#yjs-crdt-algorithm for more information about gc in Yjs. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;transact(function(Transaction):void [, origin:any])&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Every change on the shared document happens in a transaction. Observer calls and the 
  &lt;code&gt;update&lt;/code&gt; event are called after each transaction. You should 
  &lt;i&gt;bundle&lt;/i&gt; changes into a single transaction to reduce the amount of event calls. I.e. 
  &lt;code&gt;doc.transact(() =&amp;gt; { yarray.insert(..); ymap.set(..) })&lt;/code&gt; triggers a single change event. 
  &lt;br&gt;You can specify an optional 
  &lt;code&gt;origin&lt;/code&gt; parameter that is stored on 
  &lt;code&gt;transaction.origin&lt;/code&gt; and 
  &lt;code&gt;on(&#39;update&#39;, (update, origin) =&amp;gt; ..)&lt;/code&gt;. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;toJSON():any&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Deprecated: It is recommended to call toJSON directly on the shared types. Converts the entire document into a js object, recursively traversing each yjs type. Doesn&#39;t log types that have not been defined (using 
  &lt;code&gt;ydoc.getType(..)&lt;/code&gt;). 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;get(string, Y.[TypeClass]):[Type]&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Define a shared type.
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;getArray(string):Y.Array&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Define a shared Y.Array type. Is equivalent to 
  &lt;code&gt;y.get(string, Y.Array)&lt;/code&gt;.
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;getMap(string):Y.Map&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Define a shared Y.Map type. Is equivalent to 
  &lt;code&gt;y.get(string, Y.Map)&lt;/code&gt;.
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;getXmlFragment(string):Y.XmlFragment&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Define a shared Y.XmlFragment type. Is equivalent to 
  &lt;code&gt;y.get(string, Y.XmlFragment)&lt;/code&gt;.
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;on(string, function)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Register an event listener on the shared type
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;off(string, function)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Unregister an event listener from the shared type
 &lt;/dd&gt; 
&lt;/dl&gt; 
&lt;h4&gt;Y.Doc Events&lt;/h4&gt; 
&lt;dl&gt; 
 &lt;b&gt;&lt;code&gt;on(&#39;update&#39;, function(updateMessage:Uint8Array, origin:any, Y.Doc):void)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Listen to document updates. Document updates must be transmitted to all other peers. You can apply document updates in any order and multiple times. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;on(&#39;beforeTransaction&#39;, function(Y.Transaction, Y.Doc):void)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Emitted before each transaction.
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;on(&#39;afterTransaction&#39;, function(Y.Transaction, Y.Doc):void)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Emitted after each transaction.
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;on(&#39;beforeAllTransactions&#39;, function(Y.Doc):void)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Transactions can be nested (e.g. when an event within a transaction calls another transaction). Emitted before the first transaction. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;on(&#39;afterAllTransactions&#39;, function(Y.Doc, Array&amp;lt;Y.Transaction&amp;gt;):void)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Emitted after the last transaction is cleaned up.
 &lt;/dd&gt; 
&lt;/dl&gt; 
&lt;h3&gt;Document Updates&lt;/h3&gt; 
&lt;p&gt;Changes on the shared document are encoded into &lt;em&gt;document updates&lt;/em&gt;. Document updates are &lt;em&gt;commutative&lt;/em&gt; and &lt;em&gt;idempotent&lt;/em&gt;. This means that they can be applied in any order and multiple times.&lt;/p&gt; 
&lt;h4&gt;Example: Listen to update events and apply them on remote client&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const doc1 = new Y.Doc()
const doc2 = new Y.Doc()

doc1.on(&#39;update&#39;, update =&amp;gt; {
  Y.applyUpdate(doc2, update)
})

doc2.on(&#39;update&#39;, update =&amp;gt; {
  Y.applyUpdate(doc1, update)
})

// All changes are also applied to the other document
doc1.getArray(&#39;myarray&#39;).insert(0, [&#39;Hello doc2, you got this?&#39;])
doc2.getArray(&#39;myarray&#39;).get(0) // =&amp;gt; &#39;Hello doc2, you got this?&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Yjs internally maintains a &lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/#State-Vector&quot;&gt;state vector&lt;/a&gt; that denotes the next expected clock from each client. In a different interpretation it holds the number of structs created by each client. When two clients sync, you can either exchange the complete document structure or only the differences by sending the state vector to compute the differences.&lt;/p&gt; 
&lt;h4&gt;Example: Sync two clients by exchanging the complete document structure&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const state1 = Y.encodeStateAsUpdate(ydoc1)
const state2 = Y.encodeStateAsUpdate(ydoc2)
Y.applyUpdate(ydoc1, state2)
Y.applyUpdate(ydoc2, state1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Example: Sync two clients by computing the differences&lt;/h4&gt; 
&lt;p&gt;This example shows how to sync two clients with the minimal amount of exchanged data by computing only the differences using the state vector of the remote client. Syncing clients using the state vector requires another roundtrip, but can save a lot of bandwidth.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const stateVector1 = Y.encodeStateVector(ydoc1)
const stateVector2 = Y.encodeStateVector(ydoc2)
const diff1 = Y.encodeStateAsUpdate(ydoc1, stateVector2)
const diff2 = Y.encodeStateAsUpdate(ydoc2, stateVector1)
Y.applyUpdate(ydoc1, diff2)
Y.applyUpdate(ydoc2, diff1)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Example: Syncing clients without loading the Y.Doc&lt;/h4&gt; 
&lt;p&gt;It is possible to sync clients and compute delta updates without loading the Yjs document to memory. Yjs exposes an API to compute the differences directly on the binary document updates.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// encode the current state as a binary buffer
let currentState1 = Y.encodeStateAsUpdate(ydoc1)
let currentState2 = Y.encodeStateAsUpdate(ydoc2)
// now we can continue syncing clients using state vectors without using the Y.Doc
ydoc1.destroy()
ydoc2.destroy()

const stateVector1 = Y.encodeStateVectorFromUpdate(currentState1)
const stateVector2 = Y.encodeStateVectorFromUpdate(currentState2)
const diff1 = Y.diffUpdate(currentState1, stateVector2)
const diff2 = Y.diffUpdate(currentState2, stateVector1)

// sync clients
currentState1 = Y.mergeUpdates([currentState1, diff2])
currentState1 = Y.mergeUpdates([currentState1, diff1])
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using V2 update format&lt;/h4&gt; 
&lt;p&gt;Yjs implements two update formats. By default you are using the V1 update format. You can opt-in into the V2 update format wich provides much better compression. It is not yet used by all providers. However, you can already use it if you are building your own provider. All below functions are available with the suffix &quot;V2&quot;. E.g. &lt;code&gt;Y.applyUpdate&lt;/code&gt; ‚áí &lt;code&gt;Y.applyUpdateV2&lt;/code&gt;. We also support conversion functions between both formats: &lt;code&gt;Y.convertUpdateFormatV1ToV2&lt;/code&gt; &amp;amp; &lt;code&gt;Y.convertUpdateFormatV2ToV1&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Update API&lt;/h4&gt; 
&lt;dl&gt; 
 &lt;b&gt;&lt;code&gt;Y.applyUpdate(Y.Doc, update:Uint8Array, [transactionOrigin:any])&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Apply a document update on the shared document. Optionally you can specify 
  &lt;code&gt;transactionOrigin&lt;/code&gt; that will be stored on 
  &lt;code&gt;transaction.origin&lt;/code&gt; and 
  &lt;code&gt;ydoc.on(&#39;update&#39;, (update, origin) =&amp;gt; ..)&lt;/code&gt;. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;Y.encodeStateAsUpdate(Y.Doc, [encodedTargetStateVector:Uint8Array]):Uint8Array&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Encode the document state as a single update message that can be applied on the remote document. Optionally specify the target state vector to only write the differences to the update message. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;Y.encodeStateVector(Y.Doc):Uint8Array&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Computes the state vector and encodes it into an Uint8Array.
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;Y.mergeUpdates(Array&amp;lt;Uint8Array&amp;gt;)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Merge several document updates into a single document update while removing duplicate information. The merged document update is always smaller than the separate updates because of the compressed encoding. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;Y.encodeStateVectorFromUpdate(Uint8Array): Uint8Array&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Computes the state vector from a document update and encodes it into an Uint8Array. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;Y.diffUpdate(update: Uint8Array, stateVector: Uint8Array): Uint8Array&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Encode the missing differences to another update message. This function works similarly to 
  &lt;code&gt;Y.encodeStateAsUpdate(ydoc, stateVector)&lt;/code&gt; but works on updates instead. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;convertUpdateFormatV1ToV2&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Convert V1 update format to the V2 update format. 
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;convertUpdateFormatV2ToV1&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
   Convert V2 update format to the V1 update format. 
 &lt;/dd&gt; 
&lt;/dl&gt; 
&lt;h3&gt;Relative Positions&lt;/h3&gt; 
&lt;h4&gt;Example: Transform to RelativePosition and back&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const relPos = Y.createRelativePositionFromTypeIndex(ytext, 2)
const pos = Y.createAbsolutePositionFromRelativePosition(relPos, doc)
pos.type === ytext // =&amp;gt; true
pos.index === 2 // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Example: Send relative position to remote client (json)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const relPos = Y.createRelativePositionFromTypeIndex(ytext, 2)
const encodedRelPos = JSON.stringify(relPos)
// send encodedRelPos to remote client..
const parsedRelPos = JSON.parse(encodedRelPos)
const pos = Y.createAbsolutePositionFromRelativePosition(parsedRelPos, remoteDoc)
pos.type === remoteytext // =&amp;gt; true
pos.index === 2 // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Example: Send relative position to remote client (Uint8Array)&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const relPos = Y.createRelativePositionFromTypeIndex(ytext, 2)
const encodedRelPos = Y.encodeRelativePosition(relPos)
// send encodedRelPos to remote client..
const parsedRelPos = Y.decodeRelativePosition(encodedRelPos)
const pos = Y.createAbsolutePositionFromRelativePosition(parsedRelPos, remoteDoc)
pos.type === remoteytext // =&amp;gt; true
pos.index === 2 // =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;dl&gt; 
 &lt;b&gt;&lt;code&gt;Y.createRelativePositionFromTypeIndex(Uint8Array|Y.Type, number)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;&lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;Y.createAbsolutePositionFromRelativePosition(RelativePosition, Y.Doc)&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;&lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;Y.encodeRelativePosition(RelativePosition):Uint8Array&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;&lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;Y.decodeRelativePosition(Uint8Array):RelativePosition&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;&lt;/dd&gt; 
&lt;/dl&gt; 
&lt;h3&gt;Y.UndoManager&lt;/h3&gt; 
&lt;p&gt;Yjs ships with an Undo/Redo manager for selective undo/redo of changes on a Yjs type. The changes can be optionally scoped to transaction origins.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ytext = doc.getText(&#39;text&#39;)
const undoManager = new Y.UndoManager(ytext)

ytext.insert(0, &#39;abc&#39;)
undoManager.undo()
ytext.toString() // =&amp;gt; &#39;&#39;
undoManager.redo()
ytext.toString() // =&amp;gt; &#39;abc&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;dl&gt; 
 &lt;b&gt;&lt;code&gt;constructor(scope:Y.AbstractType|Array&amp;lt;Y.AbstractType&amp;gt; [, {captureTimeout:number,trackedOrigins:Set&amp;lt;any&amp;gt;,deleteFilter:function(item):boolean}])&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;
  Accepts either single type as scope or an array of types.
 &lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;undo()&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;&lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;redo()&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;&lt;/dd&gt; 
 &lt;b&gt;&lt;code&gt;stopCapturing()&lt;/code&gt;&lt;/b&gt; 
 &lt;dd&gt;&lt;/dd&gt; 
 &lt;b&gt; &lt;code&gt; on(&#39;stack-item-added&#39;, { stackItem: { meta: Map&amp;lt;any,any&amp;gt; }, type: &#39;undo&#39; | &#39;redo&#39; }) &lt;/code&gt; &lt;/b&gt; 
 &lt;dd&gt;
   Register an event that is called when a 
  &lt;code&gt;StackItem&lt;/code&gt; is added to the undo- or the redo-stack. 
 &lt;/dd&gt; 
 &lt;b&gt; &lt;code&gt; on(&#39;stack-item-popped&#39;, { stackItem: { meta: Map&amp;lt;any,any&amp;gt; }, type: &#39;undo&#39; | &#39;redo&#39; }) &lt;/code&gt; &lt;/b&gt; 
 &lt;dd&gt;
   Register an event that is called when a 
  &lt;code&gt;StackItem&lt;/code&gt; is popped from the undo- or the redo-stack. 
 &lt;/dd&gt; 
&lt;/dl&gt; 
&lt;h4&gt;Example: Stop Capturing&lt;/h4&gt; 
&lt;p&gt;UndoManager merges Undo-StackItems if they are created within time-gap smaller than &lt;code&gt;options.captureTimeout&lt;/code&gt;. Call &lt;code&gt;um.stopCapturing()&lt;/code&gt; so that the next StackItem won&#39;t be merged.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// without stopCapturing
ytext.insert(0, &#39;a&#39;)
ytext.insert(1, &#39;b&#39;)
undoManager.undo()
ytext.toString() // =&amp;gt; &#39;&#39; (note that &#39;ab&#39; was removed)
// with stopCapturing
ytext.insert(0, &#39;a&#39;)
undoManager.stopCapturing()
ytext.insert(0, &#39;b&#39;)
undoManager.undo()
ytext.toString() // =&amp;gt; &#39;a&#39; (note that only &#39;b&#39; was removed)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Example: Specify tracked origins&lt;/h4&gt; 
&lt;p&gt;Every change on the shared document has an origin. If no origin was specified, it defaults to &lt;code&gt;null&lt;/code&gt;. By specifying &lt;code&gt;trackedOrigins&lt;/code&gt; you can selectively specify which changes should be tracked by &lt;code&gt;UndoManager&lt;/code&gt;. The UndoManager instance is always added to &lt;code&gt;trackedOrigins&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class CustomBinding {}

const ytext = doc.getText(&#39;text&#39;)
const undoManager = new Y.UndoManager(ytext, {
  trackedOrigins: new Set([42, CustomBinding])
})

ytext.insert(0, &#39;abc&#39;)
undoManager.undo()
ytext.toString() // =&amp;gt; &#39;abc&#39; (does not track because origin `null` and not part
                 //           of `trackedTransactionOrigins`)
ytext.delete(0, 3) // revert change

doc.transact(() =&amp;gt; {
  ytext.insert(0, &#39;abc&#39;)
}, 42)
undoManager.undo()
ytext.toString() // =&amp;gt; &#39;&#39; (tracked because origin is an instance of `trackedTransactionorigins`)

doc.transact(() =&amp;gt; {
  ytext.insert(0, &#39;abc&#39;)
}, 41)
undoManager.undo()
ytext.toString() // =&amp;gt; &#39;&#39; (not tracked because 41 is not an instance of
                 //        `trackedTransactionorigins`)
ytext.delete(0, 3) // revert change

doc.transact(() =&amp;gt; {
  ytext.insert(0, &#39;abc&#39;)
}, new CustomBinding())
undoManager.undo()
ytext.toString() // =&amp;gt; &#39;&#39; (tracked because origin is a `CustomBinding` and
                 //        `CustomBinding` is in `trackedTransactionorigins`)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Example: Add additional information to the StackItems&lt;/h4&gt; 
&lt;p&gt;When undoing or redoing a previous action, it is often expected to restore additional meta information like the cursor location or the view on the document. You can assign meta-information to Undo-/Redo-StackItems.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ytext = doc.getText(&#39;text&#39;)
const undoManager = new Y.UndoManager(ytext, {
  trackedOrigins: new Set([42, CustomBinding])
})

undoManager.on(&#39;stack-item-added&#39;, event =&amp;gt; {
  // save the current cursor location on the stack-item
  event.stackItem.meta.set(&#39;cursor-location&#39;, getRelativeCursorLocation())
})

undoManager.on(&#39;stack-item-popped&#39;, event =&amp;gt; {
  // restore the current cursor location on the stack-item
  restoreCursorLocation(event.stackItem.meta.get(&#39;cursor-location&#39;))
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Yjs CRDT Algorithm&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Conflict-free replicated data types&lt;/em&gt; (CRDT) for collaborative editing are an alternative approach to &lt;em&gt;operational transformation&lt;/em&gt; (OT). A very simple differentiation between the two approaches is that OT attempts to transform index positions to ensure convergence (all clients end up with the same content), while CRDTs use mathematical models that usually do not involve index transformations, like linked lists. OT is currently the de-facto standard for shared editing on text. OT approaches that support shared editing without a central source of truth (a central server) require too much bookkeeping to be viable in practice. CRDTs are better suited for distributed systems, provide additional guarantees that the document can be synced with remote clients, and do not require a central source of truth.&lt;/p&gt; 
&lt;p&gt;Yjs implements a modified version of the algorithm described in &lt;a href=&quot;https://www.researchgate.net/publication/310212186_Near_Real-Time_Peer-to-Peer_Shared_Editing_on_Extensible_Data_Types&quot;&gt;this paper&lt;/a&gt;. This &lt;a href=&quot;https://blog.kevinjahns.de/are-crdts-suitable-for-shared-editing/&quot;&gt;article&lt;/a&gt; explains a simple optimization on the CRDT model and gives more insight about the performance characteristics in Yjs. More information about the specific implementation is available in &lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/INTERNALS.md&quot;&gt;INTERNALS.md&lt;/a&gt; and in &lt;a href=&quot;https://youtu.be/0l5XgnQ6rB4&quot;&gt;this walkthrough of the Yjs codebase&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;CRDTs that suitable for shared text editing suffer from the fact that they only grow in size. There are CRDTs that do not grow in size, but they do not have the characteristics that are benificial for shared text editing (like intention preservation). Yjs implements many improvements to the original algorithm that diminish the trade-off that the document only grows in size. We can&#39;t garbage collect deleted structs (tombstones) while ensuring a unique order of the structs. But we can 1. merge preceeding structs into a single struct to reduce the amount of meta information, 2. we can delete content from the struct if it is deleted, and 3. we can garbage collect tombstones if we don&#39;t care about the order of the structs anymore (e.g. if the parent was deleted).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;If a user inserts elements in sequence, the struct will be merged into a single struct. E.g. &lt;code&gt;text.insert(0, &#39;a&#39;), text.insert(1, &#39;b&#39;);&lt;/code&gt; is first represented as two structs (&lt;code&gt;[{id: {client, clock: 0}, content: &#39;a&#39;}, {id: {client, clock: 1}, content: &#39;b&#39;}&lt;/code&gt;) and then merged into a single struct: &lt;code&gt;[{id: {client, clock: 0}, content: &#39;ab&#39;}]&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;When a struct that contains content (e.g. &lt;code&gt;ItemString&lt;/code&gt;) is deleted, the struct will be replaced with an &lt;code&gt;ItemDeleted&lt;/code&gt; that does not contain content anymore.&lt;/li&gt; 
 &lt;li&gt;When a type is deleted, all child elements are transformed to &lt;code&gt;GC&lt;/code&gt; structs. A &lt;code&gt;GC&lt;/code&gt; struct only denotes the existence of a struct and that it is deleted. &lt;code&gt;GC&lt;/code&gt; structs can always be merged with other &lt;code&gt;GC&lt;/code&gt; structs if the id&#39;s are adjacent.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Especially when working on structured content (e.g. shared editing on ProseMirror), these improvements yield very good results when &lt;a href=&quot;https://github.com/dmonad/crdt-benchmarks&quot;&gt;benchmarking&lt;/a&gt; random document edits. In practice they show even better results, because users usually edit text in sequence, resulting in structs that can easily be merged. The benchmarks show that even in the worst case scenario that a user edits text from right to left, Yjs achieves good performance even for huge documents.&lt;/p&gt; 
&lt;h3&gt;State Vector&lt;/h3&gt; 
&lt;p&gt;Yjs has the ability to exchange only the differences when syncing two clients. We use lamport timestamps to identify structs and to track in which order a client created them. Each struct has an &lt;code&gt;struct.id = { client: number, clock: number}&lt;/code&gt; that uniquely identifies a struct. We define the next expected &lt;code&gt;clock&lt;/code&gt; by each client as the &lt;em&gt;state vector&lt;/em&gt;. This data structure is similar to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_vector&quot;&gt;version vectors&lt;/a&gt; data structure. But we use state vectors only to describe the state of the local document, so we can compute the missing struct of the remote client. We do not use it to track causality.&lt;/p&gt; 
&lt;h2&gt;License and Author&lt;/h2&gt; 
&lt;p&gt;Yjs and all related projects are &lt;a href=&quot;https://raw.githubusercontent.com/yjs/yjs/main/LICENSE&quot;&gt;&lt;strong&gt;MIT licensed&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Yjs is based on my research as a student at the &lt;a href=&quot;http://dbis.rwth-aachen.de/&quot;&gt;RWTH i5&lt;/a&gt;. Now I am working on Yjs in my spare time.&lt;/p&gt; 
&lt;p&gt;Fund this project by donating on &lt;a href=&quot;https://github.com/sponsors/dmonad&quot;&gt;GitHub Sponsors&lt;/a&gt; or hiring &lt;a href=&quot;https://github.com/dmonad&quot;&gt;me&lt;/a&gt; as a contractor for your collaborative app.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>merico-dev/lake</title>
      <link>https://github.com/merico-dev/lake</link>
      <description>&lt;p&gt;DevLake: the open source data lake &amp; dashboard for your DevOps tools.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;br&gt; 
 &lt;img src=&quot;https://user-images.githubusercontent.com/3789273/128085813-92845abd-7c26-4fa2-9f98-928ce2246616.png&quot; width=&quot;120px&quot;&gt; 
 &lt;h1&gt;DevLake&lt;/h1&gt; 
 &lt;p&gt; &lt;/p&gt; 
 &lt;p&gt; &lt;/p&gt;
 &lt;p&gt;&lt;a href=&quot;http://makeapullrequest.com&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&amp;amp;logo=github&amp;amp;color=2370ff&amp;amp;labelColor=454545&quot; alt=&quot;PRs Welcome&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/83rDG6ydVZ&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/844603288082186240.svg?style=flat?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=747df7&amp;amp;labelColor=454545&quot; alt=&quot;Discord&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://github.com/merico-dev/lake/actions/workflows/test.yml/badge.svg?sanitize=true&quot; alt=&quot;badge&quot;&gt; &lt;a href=&quot;https://goreportcard.com/report/github.com/merico-dev/lake&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/merico-dev/lake&quot; alt=&quot;Go Report Card&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/README.md&quot;&gt;English&lt;/a&gt;&lt;/th&gt; 
    &lt;th&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/README-zh-CN.md&quot;&gt;‰∏≠Êñá&lt;/a&gt;&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
 &lt;/table&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;div align=&quot;left&quot;&gt; 
 &lt;h3&gt;What is DevLake?&lt;/h3&gt; 
 &lt;p&gt;DevLake brings all your DevOps data into one practical, personalized, extensible view. Ingest, analyze, and visualize data from an ever-growing list of developer tools, with our free and open source product.&lt;/p&gt; 
 &lt;p&gt;DevLake is most exciting for developer teams looking to make better sense of their development process and to bring a more data-driven approach to their own practices. With DevLake you can ask your process any question, just connect and query.&lt;/p&gt; 
 &lt;h4&gt;Get started with just a few clicks&lt;/h4&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td valign=&quot;middle&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#user-setup&quot;&gt;Run Locally&lt;/a&gt;&lt;/td&gt; 
    &lt;td valign=&quot;middle&quot;&gt; &lt;a valign=&quot;middle&quot; href=&quot;https://www.teamcode.com/tin/clone?applicationId=259777118600769536&quot;&gt; &lt;img src=&quot;https://static01.teamcode.com/badge/teamcode-badge-run-in-cloud-en.svg?sanitize=true&quot; width=&quot;140px&quot; alt=&quot;Teamcode&quot; valign=&quot;middle&quot;&gt; &lt;/a&gt; &lt;a valign=&quot;middle&quot; href=&quot;https://github.com/merico-dev/lake/wiki/How-to-Set-Up-Dev-Lake-with-Tin&quot;&gt;&lt;span valign=&quot;middle&quot;&gt;See the Guide&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
 &lt;br&gt; 
 &lt;div align=&quot;left&quot;&gt; 
  &lt;img src=&quot;https://user-images.githubusercontent.com/2908155/130271622-827c4ffa-d812-4843-b09d-ea1338b7e6e5.png&quot; width=&quot;100%&quot; alt=&quot;Dev Lake Grafana Dashboard&quot; style=&quot;border-radius:15px;&quot;&gt; 
  &lt;p align=&quot;center&quot;&gt;Dashboard Screenshot&lt;/p&gt;
  &lt;br&gt; 
  &lt;img src=&quot;https://user-images.githubusercontent.com/14050754/145056261-ceaf7044-f5c5-420f-80ca-54e56eb8e2a7.png&quot; width=&quot;100%&quot; alt=&quot;User Flow&quot; style=&quot;border-radius:15px;&quot;&gt; 
  &lt;p align=&quot;center&quot;&gt;User Flow&lt;/p&gt; 
  &lt;h3&gt;Why DevLake?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Comprehensive understanding of software development lifecycle, digging workflow bottlenecks&lt;/li&gt; 
   &lt;li&gt;Timely review of team iteration performance, rapid feedback, agile adjustment&lt;/li&gt; 
   &lt;li&gt;Quickly build scenario-based data dashboards and drill down to analyze the root cause of problems&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;h3&gt;What can be accomplished with DevLake?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Collect DevOps performance data for the whole process&lt;/li&gt; 
   &lt;li&gt;Share abstraction layer with similar tools to output standardized performance data&lt;/li&gt; 
   &lt;li&gt;Built-in 20+ performance metrics and drill-down analysis capability&lt;/li&gt; 
   &lt;li&gt;Support custom SQL analysis and drag and drop to build scenario-based data views&lt;/li&gt; 
   &lt;li&gt;Flexible architecture and plug-in design to support fast access to new data sources&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;h3&gt;See Demo&lt;/h3&gt; 
  &lt;p&gt;&lt;a href=&quot;https://app-259373083972538368-3002.ars.teamcode.com/d/0Rjxknc7z/demo-homepage?orgId=1&quot;&gt;Click here&lt;/a&gt; to see demo. The demo is based on data from this repo.&lt;br&gt; Username/Password: test/test&lt;/p&gt; 
  &lt;br&gt; 
  &lt;h2&gt;Contents&lt;/h2&gt; 
  &lt;table&gt; 
   &lt;tbody&gt;
    &lt;tr&gt; 
     &lt;td&gt;&lt;b&gt;Section&lt;/b&gt;&lt;/td&gt; 
     &lt;td&gt;&lt;b&gt;Sub-section&lt;/b&gt;&lt;/td&gt; 
     &lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt; 
     &lt;td&gt;&lt;b&gt;Documentation Link&lt;/b&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Data Sources&lt;/td&gt; 
     &lt;td&gt;Supported Data Sources&lt;/td&gt; 
     &lt;td&gt;Links to specific plugin usage &amp;amp; details&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#data-source-plugins&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td rowspan=&quot;3&quot;&gt;Setup Guide&lt;/td&gt; 
     &lt;td&gt;User Setup&lt;/td&gt; 
     &lt;td&gt;Set up Dev Lake locally as a user&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#user-setup&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Developer Setup&lt;/td&gt; 
     &lt;td&gt;Set up development environment locally&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#dev-setup&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Cloud Setup&lt;/td&gt; 
     &lt;td&gt;Set up DevLake in the cloud with Tin&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#cloud-setup&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Tests&lt;/td&gt; 
     &lt;td&gt;Tests&lt;/td&gt; 
     &lt;td&gt;Commands for running tests&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#tests&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td rowspan=&quot;4&quot;&gt;Make Contribution&lt;/td&gt; 
     &lt;td&gt;Understand the architecture of DevLake&lt;/td&gt; 
     &lt;td&gt;See the architecture diagram&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#architecture&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Build a Plugin&lt;/td&gt; 
     &lt;td&gt;Details on how to make your own plugin&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#plugin&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Add Plugin Metrics&lt;/td&gt; 
     &lt;td&gt;Guide to add metrics&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#metrics&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Contribution specs&lt;/td&gt; 
     &lt;td&gt;How to contribute to this repo&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#contributing&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td rowspan=&quot;4&quot;&gt;User Guide, Help, and more&lt;/td&gt; 
     &lt;td&gt;Grafana&lt;/td&gt; 
     &lt;td&gt;How to visualize the data&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#grafana&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Need Help&lt;/td&gt; 
     &lt;td&gt;Message us on Discord&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#help&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;FAQ&lt;/td&gt; 
     &lt;td&gt;Frequently asked questions by users&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#faq&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;License&lt;/td&gt; 
     &lt;td&gt;The project license&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/#license&quot;&gt;View Section&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt;
  &lt;/table&gt; 
  &lt;br&gt; 
  &lt;h2&gt;Data Sources We Currently Support&lt;a id=&quot;data-source-plugins&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
  &lt;p&gt;Below is a list of &lt;em&gt;data source plugins&lt;/em&gt; used to collect &amp;amp; enrich data from specific sources. Each has a &lt;code&gt;README.md&lt;/code&gt; file with basic setup, troubleshooting, and metrics info.&lt;/p&gt; 
  &lt;p&gt;For more information on building a new &lt;em&gt;data source plugin&lt;/em&gt;, see &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/README.md&quot;&gt;Build a Plugin&lt;/a&gt;.&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Section&lt;/th&gt; 
     &lt;th&gt;Section Info&lt;/th&gt; 
     &lt;th&gt;Docs&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Jira&lt;/td&gt; 
     &lt;td&gt;Summary, Data &amp;amp; Metrics, Configuration, Plugin API&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/jira/README.md&quot; target=&quot;_blank&quot;&gt;Link&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;GitLab&lt;/td&gt; 
     &lt;td&gt;Summary, Data &amp;amp; Metrics, Configuration, Plugin API&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/gitlab/README.md&quot; target=&quot;_blank&quot;&gt;Link&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Jenkins&lt;/td&gt; 
     &lt;td&gt;Summary, Data &amp;amp; Metrics, Configuration, Plugin API&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/jenkins/README.md&quot; target=&quot;_blank&quot;&gt;Link&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;GitHub&lt;/td&gt; 
     &lt;td&gt;Summary, Data &amp;amp; Metrics, Configuration, Plugin API&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/github/README.md&quot; target=&quot;_blank&quot;&gt;Link&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
  &lt;br&gt; 
  &lt;hr&gt; 
  &lt;h2&gt;Setup Guide&lt;/h2&gt; 
  &lt;p&gt;There&#39;re 3 ways to set up DevLake: user setup, developer setup and cloud setup.&lt;/p&gt; 
  &lt;h3&gt;User setup&lt;a id=&quot;user-setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you only plan to run the product locally, this is the &lt;strong&gt;ONLY&lt;/strong&gt; section you should need.&lt;/li&gt; 
   &lt;li&gt;Commands written &lt;code&gt;like this&lt;/code&gt; are to be run in your terminal.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;h4&gt;Required Packages to Install&lt;a id=&quot;user-setup-requirements&quot;&gt;&lt;/a&gt;&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-docker&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;docker-compose&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;NOTE: After installing docker, you may need to run the docker application and restart your terminal&lt;/p&gt; 
  &lt;h4&gt;Commands to run in your terminal&lt;a id=&quot;user-setup-commands&quot;&gt;&lt;/a&gt;&lt;/h4&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Clone repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/merico-dev/lake.git devlake
cd devlake
cp .env.example .env
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Start Docker on your machine, then run &lt;code&gt;docker compose up -d&lt;/code&gt; to start the services.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Visit &lt;code&gt;localhost:4000&lt;/code&gt; to setup configuration files.&lt;/p&gt; 
    &lt;blockquote&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Navigate to desired plugins pages on the Integrations page&lt;/li&gt; 
      &lt;li&gt;You will need to enter the required information for the plugins you intend to use.&lt;/li&gt; 
      &lt;li&gt;Please reference the following for more details on how to configure each one: -&amp;gt; &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/jira/README.md&quot; target=&quot;_blank&quot;&gt;Jira&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/gitlab/README.md&quot; target=&quot;_blank&quot;&gt;GitLab&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/jenkins/README.md&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/github/README.md&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Submit the form to update the values by clicking on the &lt;strong&gt;Save Connection&lt;/strong&gt; button on each form page&lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;ul&gt; 
      &lt;li&gt;&lt;code&gt;devlake&lt;/code&gt; takes a while to fully boot up. if &lt;code&gt;config-ui&lt;/code&gt; complaining about api being unreachable, please wait a few seconds and try refreshing the page.&lt;/li&gt; 
      &lt;li&gt;To collect this repo for a quick preview, please provide a Github personal token on &lt;strong&gt;Data Integrations / Github&lt;/strong&gt; page.&lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/blockquote&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Visit &lt;code&gt;localhost:4000/triggers&lt;/code&gt; to trigger data collection.&lt;/p&gt; 
    &lt;blockquote&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Please refer to this wiki &lt;a href=&quot;https://github.com/merico-dev/lake/wiki/How-to-use-the-triggers-page&quot;&gt;How to trigger data collection&lt;/a&gt;. Data collection can take a while depending on the amount of data you&#39;d like to collect.&lt;/li&gt; 
      &lt;li&gt;To collect this repo for a quick preview, you can use the following JSON &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;[
  [
    {
      &quot;Plugin&quot;: &quot;github&quot;,
      &quot;Options&quot;: {
        &quot;repositoryName&quot;: &quot;lake&quot;,
        &quot;owner&quot;: &quot;merico-dev&quot;
      }
    }
  ]
]
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/blockquote&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Click &lt;em&gt;View Dashboards&lt;/em&gt; button when done (username: &lt;code&gt;admin&lt;/code&gt;, password: &lt;code&gt;admin&lt;/code&gt;). The button will be shown on the Trigger Collection page when data collection has finished.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;h4&gt;Setup cron job&lt;/h4&gt; 
  &lt;p&gt;To synchronize data periodically, we provide &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/cmd/lake-cli/README.md&quot;&gt;&lt;code&gt;lake-cli&lt;/code&gt;&lt;/a&gt; for easily sending data collection requests along with &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/devops/sync/README.md&quot;&gt;a cron job&lt;/a&gt; to periodically trigger the cli tool.&lt;/p&gt; 
  &lt;br&gt; 
  &lt;hr&gt; 
  &lt;br&gt; 
  &lt;h3&gt;Developer Setup&lt;a id=&quot;dev-setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;h4&gt;Requirements&lt;/h4&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-docker&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://golang.org/doc/install&quot; target=&quot;_blank&quot;&gt;Golang&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;Make 
    &lt;ul&gt; 
     &lt;li&gt;Mac (Already installed)&lt;/li&gt; 
     &lt;li&gt;Windows: &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/make.htm&quot;&gt;Download&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;Ubuntu: &lt;code&gt;sudo apt-get install build-essential&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;h4&gt;How to setup dev environment&lt;/h4&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Navigate to where you would like to install this project and clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/merico-dev/lake.git
cd lake
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Install Go packages:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Copy the sample config file to new local file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;cp .env.example .env
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Update the following variables in the file &lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;DB_URL&lt;/code&gt;: Replace &lt;code&gt;mysql:3306&lt;/code&gt; with &lt;code&gt;127.0.0.1:3306&lt;/code&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;code&gt;COMPOSE_PROFILES&lt;/code&gt;: Change &lt;code&gt;user&lt;/code&gt; to &lt;code&gt;dev&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Start the MySQL and Grafana containers:&lt;/p&gt; 
    &lt;blockquote&gt; 
     &lt;p&gt;Make sure the Docker daemon is running before this step.&lt;/p&gt; 
    &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;docker compose up
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Run lake and config UI in dev mode in two seperate terminals:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# run lake
make dev
# run config UI
make configure-dev
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Visit config UI at &lt;code&gt;localhost:4000&lt;/code&gt; to configure data sources.&lt;/p&gt; 
    &lt;blockquote&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Navigate to desired plugins pages on the Integrations page&lt;/li&gt; 
      &lt;li&gt;You will need to enter the required information for the plugins you intend to use.&lt;/li&gt; 
      &lt;li&gt;Please reference the following for more details on how to configure each one: -&amp;gt; &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/jira/README.md&quot; target=&quot;_blank&quot;&gt;Jira&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/gitlab/README.md&quot; target=&quot;_blank&quot;&gt;GitLab&lt;/a&gt;, -&amp;gt; &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/jenkins/README.md&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/github/README.md&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Submit the form to update the values by clicking on the &lt;strong&gt;Save Connection&lt;/strong&gt; button on each form page&lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/blockquote&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Visit &lt;code&gt;localhost:4000/triggers&lt;/code&gt; to trigger data collection.&lt;/p&gt; 
    &lt;blockquote&gt; 
     &lt;ul&gt; 
      &lt;li&gt;Please refer to this wiki &lt;a href=&quot;https://github.com/merico-dev/lake/wiki/How-to-use-the-triggers-page&quot;&gt;How to trigger data collection&lt;/a&gt;. Data collection can take up to 20 minutes for large projects. (GitLab 10k+ commits or Jira 5k+ issues)&lt;/li&gt; 
     &lt;/ul&gt; 
    &lt;/blockquote&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Click &lt;em&gt;View Dashboards&lt;/em&gt; button when done (username: &lt;code&gt;admin&lt;/code&gt;, password: &lt;code&gt;admin&lt;/code&gt;). The button is shown in the top left.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;br&gt; 
  &lt;hr&gt; 
  &lt;br&gt; 
  &lt;h3&gt;Cloud setup&lt;a id=&quot;cloud-setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;If you want to run DevLake in a clound environment, you can set up DevLake with Tin. &lt;a href=&quot;https://github.com/merico-dev/lake/wiki/How-to-Set-Up-Dev-Lake-with-Tin&quot;&gt;See detailed setup guide&lt;/a&gt;&lt;/p&gt; 
  &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt;&lt;/p&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;To protect your information, it is critical for users of the Tin hosting to set passwords to protect DevLake applications. We built DevLake as a self-hosted product, in part to ensure users have total protection and ownership of their data, while the same remains true for the Tin hosting, this risk point can only be eliminated by the end-user.&lt;/p&gt; 
  &lt;/blockquote&gt; 
  &lt;br&gt; 
  &lt;h2&gt;Tests&lt;a id=&quot;tests&quot;&gt;&lt;/a&gt;&lt;/h2&gt; 
  &lt;p&gt;To run the tests:&lt;/p&gt; 
  &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;make test
&lt;/code&gt;&lt;/pre&gt; 
  &lt;br&gt; 
  &lt;h2&gt;Make Contribution&lt;/h2&gt; 
  &lt;p&gt;This section list all the documents to help you contribute to the repo.&lt;/p&gt; 
  &lt;h3&gt;Understand the Architecture of DevLake&lt;a id=&quot;architecture&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/14050754/143292041-a4839bf1-ca46-462d-96da-2381c8aa0fed.png&quot; alt=&quot;devlake-architecture&quot;&gt;&lt;/p&gt; 
  &lt;p align=&quot;center&quot;&gt;Architecture Diagram&lt;/p&gt; 
  &lt;h3&gt;Add a Plugin&lt;a id=&quot;plugin&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/README.md&quot;&gt;plugins/README.md&lt;/a&gt;&lt;/p&gt; 
  &lt;h3&gt;Add Plugin Metrics&lt;a id=&quot;metrics&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/plugins/HOW-TO-ADD-METRICS.md&quot;&gt;plugins/HOW-TO-ADD-METRICS.md&lt;/a&gt;&lt;/p&gt; 
  &lt;h3&gt;Contributing Spec&lt;a id=&quot;contributing&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
  &lt;br&gt; 
  &lt;h2&gt;User Guide, Help and more&lt;/h2&gt; 
  &lt;h3&gt;Grafana&lt;a id=&quot;grafana&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;We use &lt;a href=&quot;https://grafana.com/&quot; target=&quot;_blank&quot;&gt;Grafana&lt;/a&gt; as a visualization tool to build charts for the data stored in our database. Using SQL queries, we can add panels to build, save, and edit customized dashboards.&lt;/p&gt; 
  &lt;p&gt;All the details on provisioning and customizing a dashboard can be found in the &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/docs/GRAFANA.md&quot;&gt;Grafana Doc&lt;/a&gt;.&lt;/p&gt; 
  &lt;h3&gt;Need help?&lt;a id=&quot;help&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;Message us on &lt;a href=&quot;https://discord.com/invite/83rDG6ydVZ&quot; target=&quot;_blank&quot;&gt;Discord&lt;/a&gt;&lt;/p&gt; 
  &lt;h3&gt;FAQ&lt;a id=&quot;faq&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;Q: When I run &lt;code&gt;docker-compose up -d&lt;/code&gt; I get this error: &quot;qemu: uncaught target signal 11 (Segmentation fault) - core dumped&quot;. How do I fix this?&lt;/p&gt; 
  &lt;p&gt;A: M1 Mac users need to download a specific version of docker on their machine. You can find it &lt;a href=&quot;https://docs.docker.com/desktop/mac/apple-silicon/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
  &lt;h3&gt;License&lt;a id=&quot;license&quot;&gt;&lt;/a&gt;&lt;/h3&gt; 
  &lt;p&gt;This project is licensed under Apache License 2.0 - see the &lt;a href=&quot;https://raw.githubusercontent.com/merico-dev/lake/main/LICENSE&quot;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; file for details.&lt;/p&gt; 
 &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>facebook/react-native</title>
      <link>https://github.com/facebook/react-native</link>
      <description>&lt;p&gt;A framework for building native applications using React&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt; &lt;a href=&quot;https://reactnative.dev/&quot;&gt; React Native &lt;/a&gt; &lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt;Learn once, write anywhere:&lt;/strong&gt;&lt;br&gt; Build mobile apps with React. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/facebook/react-native/raw/HEAD/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;React Native is released under the MIT license.&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/facebook/react-native&quot;&gt; &lt;img src=&quot;https://circleci.com/gh/facebook/react-native.svg?style=shield&quot; alt=&quot;Current CircleCI build status.&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://www.npmjs.org/package/react-native&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/v/react-native?color=brightgreen&amp;amp;label=npm%20package&quot; alt=&quot;Current npm package version.&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://reactnative.dev/docs/contributing&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&quot; alt=&quot;PRs welcome!&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=reactnative&quot;&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/reactnative.svg?label=Follow%20@reactnative&quot; alt=&quot;Follow @reactnative&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt; &lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;Getting Started&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://reactnative.dev/docs/tutorial&quot;&gt;Learn the Basics&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://reactnative.dev/showcase&quot;&gt;Showcase&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://reactnative.dev/docs/contributing&quot;&gt;Contribute&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://reactnative.dev/help&quot;&gt;Community&lt;/a&gt; &lt;span&gt; ¬∑ &lt;/span&gt; &lt;a href=&quot;https://github.com/facebook/react-native/raw/HEAD/.github/SUPPORT.md&quot;&gt;Support&lt;/a&gt; &lt;/h3&gt; 
&lt;p&gt;React Native brings &lt;a href=&quot;https://reactjs.org/&quot;&gt;&lt;strong&gt;React&lt;/strong&gt;&#39;s&lt;/a&gt; declarative UI framework to iOS and Android. With React Native, you use native UI controls and have full access to the native platform.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Declarative.&lt;/strong&gt; React makes it painless to create interactive UIs. Declarative views make your code more predictable and easier to debug.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Component-Based.&lt;/strong&gt; Build encapsulated components that manage their state, then compose them to make complex UIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Developer Velocity.&lt;/strong&gt; See local changes in seconds. Changes to JavaScript code can be live reloaded without rebuilding the native app.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Portability.&lt;/strong&gt; Reuse code across iOS, Android, and &lt;a href=&quot;https://reactnative.dev/docs/out-of-tree-platforms&quot;&gt;other platforms&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;React Native is developed and supported by many companies and individual core contributors. Find out more in our &lt;a href=&quot;https://github.com/facebook/react-native/raw/HEAD/ECOSYSTEM.md&quot;&gt;ecosystem overview&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/main/#-requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/main/#-building-your-first-react-native-app&quot;&gt;Building your first React Native app&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/main/#-documentation&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/main/#-upgrading&quot;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/main/#-how-to-contribute&quot;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/main/#code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/facebook/react-native/main/#-license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üìã Requirements&lt;/h2&gt; 
&lt;p&gt;React Native apps may target iOS 11.0 and Android 5.0 (API 21) or newer. You may use Windows, macOS, or Linux as your development operating system, though building and running iOS apps is limited to macOS. Tools like &lt;a href=&quot;https://expo.io&quot;&gt;Expo&lt;/a&gt; can be used to work around this.&lt;/p&gt; 
&lt;h2&gt;üéâ Building your first React Native app&lt;/h2&gt; 
&lt;p&gt;Follow the &lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;Getting Started guide&lt;/a&gt;. The recommended way to install React Native depends on your project. Here you can find short guides for the most common scenarios:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://snack.expo.io/@hramos/hello,-world!&quot;&gt;Trying out React Native&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;Creating a New Application&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactnative.dev/docs/integration-with-existing-apps&quot;&gt;Adding React Native to an Existing Application&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;üìñ Documentation&lt;/h2&gt; 
&lt;p&gt;The full documentation for React Native can be found on our &lt;a href=&quot;https://reactnative.dev/docs/getting-started&quot;&gt;website&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The React Native documentation discusses components, APIs, and topics that are specific to React Native. For further documentation on the React API that is shared between React Native and React DOM, refer to the &lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot;&gt;React documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The source for the React Native documentation and website is hosted on a separate repo, &lt;a href=&quot;https://github.com/facebook/react-native-website&quot;&gt;&lt;strong&gt;@facebook/react-native-website&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üöÄ Upgrading&lt;/h2&gt; 
&lt;p&gt;Upgrading to new versions of React Native may give you access to more APIs, views, developer tools, and other goodies. See the &lt;a href=&quot;https://reactnative.dev/docs/upgrading&quot;&gt;Upgrading Guide&lt;/a&gt; for instructions.&lt;/p&gt; 
&lt;p&gt;React Native releases are discussed &lt;a href=&quot;https://github.com/reactwg/react-native-releases/discussions&quot;&gt;in this discussion repo&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üëè How to Contribute&lt;/h2&gt; 
&lt;p&gt;The main purpose of this repository is to continue evolving React Native core. We want to make contributing to this project as easy and transparent as possible, and we are grateful to the community for contributing bug fixes and improvements. Read below to learn how you can take part in improving React Native.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://code.fb.com/codeofconduct/&quot;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the &lt;a href=&quot;https://code.fb.com/codeofconduct/&quot;&gt;full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://reactnative.dev/docs/contributing&quot;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Read our &lt;a href=&quot;https://reactnative.dev/docs/contributing&quot;&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React Native.&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/facebook/react-native/wiki/Roadmap&quot;&gt;Open Source Roadmap&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;You can learn more about our vision for React Native in the &lt;a href=&quot;https://github.com/facebook/react-native/wiki/Roadmap&quot;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Good First Issues&lt;/h3&gt; 
&lt;p&gt;We have a list of &lt;a href=&quot;https://github.com/facebook/react-native/labels/good%20first%20issue&quot;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; 
&lt;h3&gt;Discussions&lt;/h3&gt; 
&lt;p&gt;Larger discussions and proposals are discussed in &lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals&quot;&gt;&lt;strong&gt;@react-native-community/discussions-and-proposals&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;üìÑ License&lt;/h2&gt; 
&lt;p&gt;React Native is MIT licensed, as found in the &lt;a href=&quot;https://github.com/facebook/react-native/raw/HEAD/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; 
&lt;p&gt;React Native documentation is Creative Commons licensed, as found in the &lt;a href=&quot;https://github.com/facebook/react-native/raw/HEAD/LICENSE-docs&quot;&gt;LICENSE-docs&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>learning-zone/nodejs-interview-questions</title>
      <link>https://github.com/learning-zone/nodejs-interview-questions</link>
      <description>&lt;p&gt;Frequently Asked Node.js Interview Questions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Interview Questions&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;Click &lt;img src=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/star.png&quot; width=&quot;18&quot; height=&quot;18&quot; align=&quot;absmiddle&quot; title=&quot;Star&quot;&gt; if you like the project. Pull Requests are highly appreciated.&lt;/em&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/nodejs-api.md&quot;&gt;NodeJS APIs&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/nodejs-programming.md&quot;&gt;NodeJS Coding Practice&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/nodejs-commands.md&quot;&gt;NodeJS Commands&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Sl.No&lt;/th&gt; 
   &lt;th&gt;Questions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;01.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-does-the-runtime-environment-mean-in-nodejs&quot;&gt;What does the runtime environment mean in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;02.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-nodejs&quot;&gt;What is Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;03.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-nodejs-process-model&quot;&gt;What is Node.js Process Model?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;04.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-data-types-in-nodejs&quot;&gt;What are the data types in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;05.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-create-a-simple-server-in-nodejs-that-returns-hello-world&quot;&gt;How to create a simple server in Node.js that returns Hello World?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;06.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-do-nodejs-works&quot;&gt;How do Node.js works?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;07.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-an-error-first-callback&quot;&gt;What is an error-first callback?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;08.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-callback-hell-in-nodejs&quot;&gt;What is callback hell in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;09.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-promises-in-nodejs&quot;&gt;What are Promises in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;10.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-tools-can-be-used-to-assure-consistent-style&quot;&gt;What tools can be used to assure consistent style?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;11.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-when-should-you-npm-and-when-yarn&quot;&gt;When should you npm and when yarn?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;12.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-stub&quot;&gt;What is a stub?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;13.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-test-pyramid-how-can-you-implement-it-when-talking-about-http-apis&quot;&gt;What is a test pyramid? How can you implement it when talking about HTTP APIs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;14.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-secure-your-http-cookies-against-xss-attacks&quot;&gt;How can you secure your HTTP cookies against XSS attacks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;15.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-make-sure-your-dependencies-are-safe&quot;&gt;How can you make sure your dependencies are safe?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;16.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-event-loop-in-nodejs-how-does-it-work&quot;&gt;What is Event loop in Node.js? How does it work?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;17.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-repl-what-purpose-it-is-used-for&quot;&gt;What is REPL? What purpose it is used for?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;18.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-asynchronous-and-non-blocking&quot;&gt;What is the difference between Asynchronous and Non-blocking?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;19.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-debug-an-application-in-nodejs&quot;&gt;How to debug an application in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;20.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-some-of-the-most-popular-packages-of-nodejs&quot;&gt;What are some of the most popular packages of Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;21.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-eventemitter-in-nodejs&quot;&gt;What is EventEmitter in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;22.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-many-types-of-streams-are-present-in-nodejs&quot;&gt;How many types of streams are present in node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-crypto-in-nodejs-how-do-you-cipher-the-secure-information-in-nodejs&quot;&gt;What is crypto in Node.js? How do you cipher the secure information in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;24.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-use-of-dns-module-in-nodejs&quot;&gt;What is the use of DNS module in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-security-mechanisms-available-in-nodejs&quot;&gt;What are the security mechanisms available in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;26.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-name-the-types-of-api-functions-in-nodejs&quot;&gt;Name the types of API functions in Node.js.&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;27.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-nodejs-handle-child-threads&quot;&gt;How does Node.js handle child threads?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;28.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-preferred-method-of-resolving-unhandled-exceptions-in-nodejs&quot;&gt;What is the preferred method of resolving unhandled exceptions in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;29.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-nodejs-support-multi-processor-platforms-and-does-it-fully-utilize-all-processor-resources&quot;&gt;How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;30.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-typically-the-first-argument-passed-to-a-nodejs-callback-handler&quot;&gt;What is typically the first argument passed to a Node.js callback handler?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;31.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-nodejs-read-the-content-of-a-file&quot;&gt;How Node.js read the content of a file?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;32.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-jit-and-how-is-it-related-to-nodejs&quot;&gt;What is JIT and how is it related to Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;33.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-put-and-patch&quot;&gt;What is difference between put and patch?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;34.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-list-types-of-http-requests-supported-by-nodejs&quot;&gt;List types of Http requests supported by Node.js.&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;35.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-to-use-expressjs&quot;&gt;Why to use Express.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;36.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-write-the-steps-for-setting-up-an-express-js-application&quot;&gt;Write the steps for setting up an Express JS application.&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;37.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-since-node-is-a-single-threaded-process-how-to-make-use-of-all-cpus&quot;&gt;Since node is a single threaded process, how to make use of all CPUs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;38.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-does-emitter-do-and-what-is-dispatcher&quot;&gt;What does emitter do and what is dispatcher?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;39.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-kill-child-processes-that-spawn-their-own-child-processes-in-nodejs&quot;&gt;How to kill child processes that spawn their own child processes in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;40.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-do-you-understand-by-reactor-pattern-in-nodejs&quot;&gt;What do you understand by Reactor Pattern in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;41.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-key-features-of-nodejs&quot;&gt;What are the key features of Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;42.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-globals-in-nodejs&quot;&gt;What are globals in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;43.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-chaining-process-in-nodejs&quot;&gt;What is chaining process in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;44.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-a-control-flow-function-what-are-the-steps-does-it-execute&quot;&gt;What is a control flow function? what are the steps does it execute?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;45.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-npm-in-nodejs&quot;&gt;What is npm in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;46.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-when-to-use-nodejs-and-when-not-to-use-it&quot;&gt;When to use Node.js and when not to use it?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;47.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-how-does-nodejs-work&quot;&gt;Explain how does Node.js work?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;48.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-is-nodejs-entirely-based-on-a-single-thread&quot;&gt;Is Node.js entirely based on a single-thread?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;49.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-make-post-request-in-nodejs&quot;&gt;How to make post request in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;50.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-can-you-create-http-server-in-nodejs-explain-the-code-used-for-it&quot;&gt;Can you create http server in Node.js, explain the code used for it?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;51.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-load-html-in-nodejs&quot;&gt;How to load html in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;52.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-can-you-listen-on-port-80-with-node&quot;&gt;How can you listen on port 80 with Node?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;53.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-operational-and-programmer-errors&quot;&gt;What is the difference between operational and programmer errors?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;54.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-npm-shrinkwrap-is-useful&quot;&gt;Why npm shrinkwrap is useful?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;55.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-your-favourite-http-framework-and-why&quot;&gt;What is your favourite HTTP framework and why?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;56.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-challenges-with-nodejs&quot;&gt;What are the Challenges with Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;57.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-nodejs-vs-ajax&quot;&gt;What is the difference between Node.js vs Ajax?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;58.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-nodejs-overcomes-the-problem-of-blocking-of-i-o-operations&quot;&gt;How Node.js overcomes the problem of blocking of I/O operations?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;59.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-mention-the-steps-by-which-you-can-async-in-nodejs&quot;&gt;Mention the steps by which you can async in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;60.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-timing-features-of-nodejs&quot;&gt;What are the timing features of Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;61.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-lts-releases-of-nodejs-why-should-you-care&quot;&gt;What is LTS releases of Node.js why should you care?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;62.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-why-should-you-separate-express-app-and-server&quot;&gt;Why should you separate Express &#39;app&#39; and &#39;server&#39;?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;63.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-the-difference-between-processnexttick-and-setimmediate&quot;&gt;What is the difference between process.nextTick() and setImmediate()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;64.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-javascript-and-nodejs&quot;&gt;What is difference between JavaScript and Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;65.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-are-the-difference-between-events-and-callbacks&quot;&gt;What are the difference between Events and Callbacks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;66.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-restful-web-services-in-nodejs&quot;&gt;Explain RESTful Web Services in Node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;67.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-handle-file-upload-in-node-js&quot;&gt;How to handle file upload in Node js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;68.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-the-terms-body-parser-cookie-parser-debug-jade-morgan-nodemon-pm2-serve-favicon-cors-in-express-js&quot;&gt;Explain the terms body-parser, cookie-parser, debug, jade, morgan, nodemon, pm2, serve-favicon, cors in Express JS?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;69.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-does-routing-work-in-node-js&quot;&gt;How does routing work in Node.js&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;70.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-node-prevents-blocking-code&quot;&gt;How Node prevents blocking code?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;71.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-difference-between-promise-and-async-await-in-node-js&quot;&gt;What is difference between promise and async await in node js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;72.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-json-web-token-jwt-for-authentication-in-node-js&quot;&gt;How to use JSON Web Token (JWT) for authentication in node js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;73.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-build-a-microservices-architecture-with-node-js&quot;&gt;How to build a microservices architecture with node js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;74.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-q-promise-in-node-js&quot;&gt;How to use Q promise in node js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;75.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-use-locale-i18n-in-node-js&quot;&gt;How to use locale (i18n) in node js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;76.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-implement-memcached-in-nodejs&quot;&gt;How to Implement Memcached in Nodejs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;77.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-explain-error-handling-approaches-in-nodejs&quot;&gt;Explain Error Handling approaches in Nodejs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;78.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-how-to-generate-and-verify-checksum-of-the-given-string-in-nodejs&quot;&gt;How to generate and verify checksum of the given string in Nodejs&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;79.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-callback-function-in-nodejs&quot;&gt;What is Callback function in node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;80.&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#q-what-is-asynchronous-programming-in-nodejs&quot;&gt;What is asynchronous programming in node.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is an open-source server side runtime environment built on Chrome&#39;s V8 JavaScript engine. It provides an event driven, non-blocking (asynchronous) I/O and cross-platform runtime environment for building highly scalable server-side applications using JavaScript.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the benefits of using Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;From a web server development perspective Node has a number of benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Great performance! Node was designed to optimize throughput and scalability in web applications and is a good solution for many common web-development problems (e.g. real-time web applications).&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Code is written in &quot;plain old JavaScript&quot;, which means that less time is spent dealing with &quot;context shift&quot; between languages when you&#39;re writing both client-side and server-side code.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;JavaScript is a relatively new programming languages and benefits from improvements in language design when compared to other traditional web-server languages (e.g. Python, PHP, etc.) Many other new and pouplar languages compile/convert into JavaScript so you can use TypeScript, CoffeeScript, ClojureScript, Scala, LiveScript, etc.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;The node package manager (NPM) provides access to hundres of thousands of resuable packages. It also has best-in-class dependency resolution and can also be used to automate most of the build toolchain.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Node.js is portable. It is available on Microsoft Windows, macOS, Linux, Solaris, FreeBSD, OpenBSD, WebOS, and NonStop OS. Furthermore, it is well-supported by many web hosting providers, that often provide specific infrastrucutre and documentation for hosting Node sites.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;It has a very active third party ecosystem and developer community, with lots of people who are willing to help.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Node.js Process Model?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js runs in a single process and the application code runs in a single thread and thereby needs less resources than other platforms. All the user requests to your web application will be handled by a single thread and all the I/O work or long running job is performed asynchronously for a particular request. So, this single thread doesn&#39;t have to wait for the request to complete and is free to handle the next request. When asynchronous I/O work completes then it processes the request further and sends the response.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the data types in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Just like JS, there are two categories of data types in Node: Primitives and Objects.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Primitives&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;String&lt;/li&gt; 
 &lt;li&gt;Number&lt;/li&gt; 
 &lt;li&gt;Bigint&lt;/li&gt; 
 &lt;li&gt;Boolean&lt;/li&gt; 
 &lt;li&gt;Undefined&lt;/li&gt; 
 &lt;li&gt;Null&lt;/li&gt; 
 &lt;li&gt;Symbol&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Objects&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Function&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Array&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;Buffer&lt;/code&gt;: Node.js includes an additional data type called Buffer (not available in browser&#39;s JavaScript). Buffer is mainly used to store binary data, while reading from a file or receiving packets over the network. &lt;code&gt;Buffer&lt;/code&gt; is a class.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;other regular objects&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to create a simple server in Node.js that returns Hello World?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Step 01&lt;/strong&gt;: Create a project directory&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir myapp
cd myapp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 02&lt;/strong&gt;: Initialize project and link it to npm&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This creates a &lt;code&gt;package.json&lt;/code&gt; file in your myapp folder. The file contains references for all npm packages you have downloaded to your project. The command will prompt you to enter a number of things. You can enter your way through all of them EXCEPT this one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;entry point: (index.js)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Rename this to:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 03&lt;/strong&gt;: Install Express in the myapp directory&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 04&lt;/strong&gt;: app.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Hello World!&#39;);
});

app.listen(3000, function () {
  console.log(&#39;Example app listening on port 3000!&#39;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 05&lt;/strong&gt;: Run the app&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bah&quot;&gt;node app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain the concept of URL module in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The URL module in Node.js splits up a web address into readable parts. Use &lt;code&gt;require()&lt;/code&gt; to include the module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var url = require(&#39;url&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Then parse an address with the &lt;code&gt;url.parse()&lt;/code&gt; method, and it will return a URL object with each part of the address as properties.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var url = require(&#39;url&#39;);
var adr = &#39;http://localhost:8080/default.htm?year=2021&amp;amp;month=september&#39;;
var q = url.parse(adr, true);

console.log(q.host); //returns &#39;localhost:8080&#39;
console.log(q.pathname); //returns &#39;/default.htm&#39;
console.log(q.search); //returns &#39;?year=2021&amp;amp;month=september&#39;

var qdata = q.query; //returns an object: { year: 2021, month: &#39;september&#39; }
console.log(qdata.month); //returns &#39;september&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to make an HTTP POST request using Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const https = require(&#39;https&#39;)


const obj = {
    &quot;userId&quot;:1,
    &quot;id&quot;:1,
    &quot;title&quot;:&quot;whatever&quot;,
    &quot;completed&quot;:false
}

const data = JSON.stringify(obj)

const options = {
  hostname: &#39;jsonplaceholder.typicode.com&#39;,
  port: 443,
  path: &#39;/todos&#39;,
  method: &#39;POST&#39;,
  headers: {
    &#39;Content-Type&#39;: &#39;application/json&#39;,
    &#39;Content-Length&#39;: data.length
  }
}

const req = https.request(options, res =&amp;gt; {
  console.log(`statusCode: ${res.statusCode}`)

  res.on(&#39;data&#39;, d =&amp;gt; {
    process.stdout.write(d)
  })
})

req.on(&#39;error&#39;, error =&amp;gt; {
  console.error(error)
})

req.write(data)
req.end()
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to execute an external program from within Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What does the runtime environment mean in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The Node.js runtime is the software stack responsible for installing your web service&#39;s code and its dependencies and running your service.&lt;/p&gt; 
&lt;p&gt;The Node.js runtime for App Engine in the standard environment is declared in the &lt;code&gt;app.yaml&lt;/code&gt; file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;runtime: nodejs10
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The runtime environment is literally just the environment your application is running in. This can be used to describe both the hardware and the software that is running your application. How much RAM, what version of node, what operating system, how much CPU cores, can all be referenced when talking about a runtime environment.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain usage of NODE_ENV?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;NODE_ENV is an environment variable made popular by the express web server framework. When a node application is run, it can check the value of the environment variable and do different things based on the value.&lt;/p&gt; 
&lt;p&gt;For example, when we work on a project and there are production and development environments. We don&#39;t need to use caching in the development env. So we set&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ NODE_ENV=development
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and use the code below&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (process.env.NODE_ENV === &#39;development&#39;)
    useCaching = false;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Upon that, if the project runs on production it will use caching.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How do Node.js works?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/event-loop.png&quot; alt=&quot;Node Architecture&quot; width=&quot;800px&quot;&gt; &lt;/p&gt; 
&lt;p&gt;Node is completely event-driven. Basically the server consists of one thread processing one event after another.&lt;/p&gt; 
&lt;p&gt;A new request coming in is one kind of event. The server starts processing it and when there is a blocking IO operation, it does not wait until it completes and instead registers a callback function. The server then immediately starts to process another event (maybe another request). When the IO operation is finished, that is another kind of event, and the server will process it (i.e. continue working on the request) by executing the callback as soon as it has time.&lt;/p&gt; 
&lt;p&gt;So the server never needs to create additional threads or switch between threads, which means it has very little overhead. If you want to make full use of multiple hardware cores, you just start multiple instances of node.js&lt;/p&gt; 
&lt;p&gt;Node JS Platform does not follow Request/Response Multi-Threaded Stateless Model. It follows Single Threaded with Event Loop Model. Node JS Processing model mainly based on Javascript Event based model with Javascript callback mechanism.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Single Threaded Event Loop Model Processing Steps:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clients Send request to Web Server.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server internally maintains a Limited Thread pool to provide services to the Client Requests.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server receives those requests and places them into a Queue. It is known as ‚ÄúEvent Queue‚Äù.&lt;/li&gt; 
 &lt;li&gt;Node JS Web Server internally has a Component, known as ‚ÄúEvent Loop‚Äù. Why it got this name is that it uses indefinite loop to receive requests and process them.&lt;/li&gt; 
 &lt;li&gt;Event Loop uses Single Thread only. It is main heart of Node JS Platform Processing Model.&lt;/li&gt; 
 &lt;li&gt;Event Loop checks any Client Request is placed in Event Queue. If no, then wait for incoming requests for indefinitely.&lt;/li&gt; 
 &lt;li&gt;If yes, then pick up one Client Request from Event Queue 
  &lt;ul&gt; 
   &lt;li&gt;Starts process that Client Request&lt;/li&gt; 
   &lt;li&gt;If that Client Request Does Not requires any Blocking IO Operations, then process everything, prepare response and send it back to client.&lt;/li&gt; 
   &lt;li&gt;If that Client Request requires some Blocking IO Operations like interacting with Database, File System, External Services then it will follow different approach 
    &lt;ul&gt; 
     &lt;li&gt;Checks Threads availability from Internal Thread Pool&lt;/li&gt; 
     &lt;li&gt;Picks up one Thread and assign this Client Request to that thread.&lt;/li&gt; 
     &lt;li&gt;That Thread is responsible for taking that request, process it, perform Blocking IO operations, prepare response and send it back to the Event Loop&lt;/li&gt; 
     &lt;li&gt;Event Loop in turn, sends that Response to the respective Client.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between Node.js, AJAX, and JQuery?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a javascript runtime that makes it possible for us to write back-end of applications.&lt;/p&gt; 
&lt;p&gt;Asynchronous JavaScript and XML(AJAX) refers to group of technologies that we use to send requests to web servers and retrieve data from them without reloading the page.&lt;/p&gt; 
&lt;p&gt;Jquery is a simple javascript library that helps us with front-end development.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the core modules of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;They are defined within the Node.js source and are located in the lib/ folder, and Node.js has several modules compiled into the binary.&lt;/p&gt; 
&lt;p&gt;Core modules are always preferentially loaded if their identifier is passed to &lt;code&gt;require()&lt;/code&gt;. For instance, &lt;code&gt;require(&#39;http&#39;)&lt;/code&gt; will always return the built in HTTP module, even if there is a file by that name.&lt;/p&gt; 
&lt;p&gt;Core modules can also be identified using the &lt;code&gt;node:&lt;/code&gt; prefix, in which case it bypasses the require cache. For instance, &lt;code&gt;require(&#39;node:http&#39;)&lt;/code&gt; will always return the built in HTTP module, even if there is &lt;code&gt;require.cache&lt;/code&gt; entry by that name.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is callback function in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;In node.js, we basically use callbacks for handling asynchronous operations like ‚Äî making any I/O request, database operations or calling an API to fetch some data. Callback allows our code to not get blocked when a process is taking a long time.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function myNew(next){
    console.log(&quot;Im the one who initates callback&quot;);
    next(&quot;nope&quot;, &quot;success&quot;);
}

myNew(function(err, res){
    console.log(&quot;I got back from callback&quot;,err, res);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How assert works in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The assert module provides a way of testing expressions. If the expression evaluates to 0, or false, an assertion failure is being caused, and the program is terminated.&lt;/p&gt; 
&lt;p&gt;This module was built to be used internally by Node.js.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// Sample usage

const assert = require(&#39;assert&#39;);
assert(50 &amp;gt; 70, &quot;50 is less than 70.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is an error-first callback?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The pattern used across all the asynchronous methods in Node.js is called &lt;em&gt;Error-first Callback&lt;/em&gt;. Here is an example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile( &quot;file.json&quot;, function ( err, data ) {
  if ( err ) {
    console.error( err );
  }
  console.log( data );
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Any asynchronous method expects one of the arguments to be a callback. The full callback argument list depends on the caller method, but the first argument is always an error object or null. When we go for the asynchronous method, an exception thrown during function execution cannot be detected in a try/catch statement. The event happens after the JavaScript engine leaves the try block.&lt;/p&gt; 
&lt;p&gt;In the preceding example, if any exception is thrown during the reading of the file, it lands on the callback function as the first and mandatory parameter.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is callback hell in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;Callback hell&lt;/code&gt; is a phenomenon that afflicts a JavaScript developer when he tries to execute multiple asynchronous operations one after the other.&lt;/p&gt; 
&lt;p&gt;An asynchronous function is one where some external activity must complete before a result can be processed; it is ‚Äúasynchronous‚Äù in the sense that there is an unpredictable amount of time before a result becomes available. Such functions require a callback function to handle errors and process the result.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getData(function(a){
    getMoreData(a, function(b){
        getMoreData(b, function(c){ 
            getMoreData(c, function(d){ 
	            getMoreData(d, function(e){ 
		            ...
		        });
	        });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Techniques for avoiding callback hell&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Using Async.js&lt;/li&gt; 
 &lt;li&gt;Using Promises&lt;/li&gt; 
 &lt;li&gt;Using Async-Await&lt;/li&gt; 
&lt;/ol&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Managing callbacks using Async.js&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;Async&lt;/code&gt; is a really powerful npm module for managing asynchronous nature of JavaScript. Along with Node.js, it also works for JavaScript written for browsers.&lt;/p&gt; 
&lt;p&gt;Async provides lots of powerful utilities to work with asynchronous processes under different scenarios.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save async
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ASYNC WATERFALL&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var async = require(&#39;async&#39;);
async.waterfall([
    function(callback) {
        //doSomething
        callback(null, paramx); //paramx will be availaible as the first parameter to the next function
        /**
            The 1st parameter passed in callback.
            @null or @undefined or @false control moves to the next function
            in the array
            if @true or @string the control is immedeatly moved
            to the final callback fucntion
            rest of the functions in the array
            would not be executed
        */
    },
    function(arg1, callback) {
        //doSomething else
      // arg1 now equals paramx
        callback(null, result);
    },
    function(arg1, callback) {
        //do More
        // arg1 now equals result
        callback(null, &#39;done&#39;);
    },
    function(arg1, callback) {
        //even more
        // arg1 now equals &#39;done&#39;
        callback(null, &#39;done&#39;);
    }
], function (err, result) {
    //final callback function
    //finally do something when all function are done.
    // result now equals &#39;done&#39;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;ASYNC SERIES&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var async = require(&#39;async&#39;);
async.series([
    function(callback){
        // do some stuff ...
        callback(null, &#39;one&#39;);
        /**
            The 1st parameter passed in callback.
            @null or @undefined or @false control moves to the next function
            in the array
            if @true or @string the control is immedeatly moved
            to the final callback fucntion with the value of err same as
            passed over here and
            rest of the functions in the array
            would not be executed
        */
    },
    function(callback){
        // do some more stuff ...
        callback(null, &#39;two&#39;);
    }
],
// optional callback
function(err, results){
    // results is now equal to [&#39;one&#39;, &#39;two&#39;]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Managing callbacks hell using promises&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Promises are alternative to callbacks while dealing with asynchronous code. Promises return the value of the result or an error exception. The core of the promises is the &lt;code&gt;.then()&lt;/code&gt; function, which waits for the promise object to be returned. The &lt;code&gt;.then()&lt;/code&gt; function takes two optional functions as arguments and depending on the state of the promise only one will ever be called. The first function is called when the promise if fulfilled (A successful result). The second function is called when the promise is rejected.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var outputPromise = getInputPromise().then(function (input) {
    //handle success
}, function (error) {
    //handle error
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Using Async Await&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Async await makes asynchronous code look like it\‚Äôs synchronous. This has only been possible because of the reintroduction of promises into node.js. Async-Await only works with functions that return a promise.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const getrandomnumber = function(){
    return new Promise((resolve, reject)=&amp;gt;{
        setTimeout(() =&amp;gt; {
            resolve(Math.floor(Math.random() * 20));
        }, 1000);
    });
}

const addRandomNumber = async function(){
    const sum = await getrandomnumber() + await getrandomnumber();
    console.log(sum);
}

addRandomNumber();
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are Promises in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It allows to associate handlers to an asynchronous action&#39;s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of the final value, the asynchronous method returns a promise for the value at some point in the future.&lt;/p&gt; 
&lt;p&gt;Promises in node.js promised to do some work and then had separate callbacks that would be executed for success and failure as well as handling timeouts. Another way to think of promises in node.js was that they were emitters that could emit only two events: success and error.The cool thing about promises is you can combine them into dependency chains (do Promise C only when Promise A and Promise B complete).&lt;/p&gt; 
&lt;p&gt;The core idea behind promises is that a promise represents the result of an asynchronous operation. A promise is in one of three different states:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;pending - The initial state of a promise.&lt;/li&gt; 
 &lt;li&gt;fulfilled - The state of a promise representing a successful operation.&lt;/li&gt; 
 &lt;li&gt;rejected - The state of a promise representing a failed operation. Once a promise is fulfilled or rejected, it is immutable (i.e. it can never change again).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Creating a Promise&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var myPromise = new Promise(function(resolve, reject){
   ....
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What tools can be used to assure consistent style?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;ESLint&lt;/li&gt; 
 &lt;li&gt;Standard&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;When should you npm and when yarn?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;npm&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is the default method for managing packages in the Node.js runtime environment. It relies upon a command line client and a database made up of public and premium packages known as the the npm registry. Users can access the registry via the client and browse the many packages available through the npm website. Both npm and its registry are managed by npm, Inc.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Yarn&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Yarn was developed by Facebook in attempt to resolve some of npm‚Äôs shortcomings. Yarn isn‚Äôt technically a replacement for npm since it relies on modules from the npm registry. Think of Yarn as a new installer that still relies upon the same npm structure. The registry itself hasn‚Äôt changed, but the installation method is different. Since Yarn gives you access to the same packages as npm, moving from npm to Yarn doesn‚Äôt require you to make any changes to your workflow.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install yarn --global
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Comparing Yarn vs npm&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fast: Yarn caches every package it downloads so it never needs to again. It also parallelizes operations to maximize resource utilization so install times are faster than ever.&lt;/li&gt; 
 &lt;li&gt;Reliable: Using a detailed, but concise, lockfile format, and a deterministic algorithm for installs, Yarn is able to guarantee that an install that worked on one system will work exactly the same way on any other system.&lt;/li&gt; 
 &lt;li&gt;Secure: Yarn uses checksums to verify the integrity of every installed package before its code is executed.&lt;/li&gt; 
 &lt;li&gt;Offline Mode: If you&#39;ve installed a package before, you can install it again without any internet connection.&lt;/li&gt; 
 &lt;li&gt;Deterministic: The same dependencies will be installed the same exact way across every machine regardless of install order.&lt;/li&gt; 
 &lt;li&gt;Network Performance: Yarn efficiently queues up requests and avoids request waterfalls in order to maximize network utilization.&lt;/li&gt; 
 &lt;li&gt;Multiple Registries: Install any package from either npm or Bower and keep your package workflow the same.&lt;/li&gt; 
 &lt;li&gt;Network Resilience: A single request failing won&#39;t cause an install to fail. Requests are retried upon failure.&lt;/li&gt; 
 &lt;li&gt;Flat Mode: Resolve mismatching versions of dependencies to a single version to avoid creating duplicates.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a stub?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Stubbing and verification for node.js tests. Enables you to validate and override behaviour of nested pieces of code such as methods, require() and npm modules or even instances of classes. This library is inspired on node-gently, MockJS and mock-require.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Features of Stub:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Produces simple, lightweight Objects capable of extending down their tree&lt;/li&gt; 
 &lt;li&gt;Compatible with Nodejs&lt;/li&gt; 
 &lt;li&gt;Easily extendable directly or through an ExtensionManager&lt;/li&gt; 
 &lt;li&gt;Comes with predefined, usable extensions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Stubs are functions/programs that simulate the behaviours of components/modules. Stubs provide canned answers to function calls made during test cases. Also, you can assert on with what these stubs were called.&lt;/p&gt; 
&lt;p&gt;A use-case can be a file read, when you do not want to read an actual file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&#39;fs&#39;);

var readFileStub = sinon.stub(fs, &#39;readFile&#39;, function (path, cb) {  
  return cb(null, &#39;filecontent&#39;);
});

expect(readFileStub).to.be.called;  
readFileStub.restore();
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a test pyramid? How can you implement it when talking about HTTP APIs?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &quot;Test Pyramid&quot; is a metaphor that tells us to group software tests into buckets of different granularity. It also gives an idea of how many tests we should have in each of these groups. It shows which kinds of tests you should be looking for in the different levels of the pyramid and gives practical examples on how these can be implemented.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/testPyramid.png&quot; alt=&quot;Test Pyramid&quot;&gt; &lt;/p&gt; 
&lt;p&gt;Mike Cohn&#39;s original test pyramid consists of three layers that your test suite should consist of (bottom to top):&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Unit Tests&lt;/li&gt; 
 &lt;li&gt;Service Tests&lt;/li&gt; 
 &lt;li&gt;User Interface Tests&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you secure your HTTP cookies against XSS attacks?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; When the web server sets cookies, it can provide some additional attributes to make sure the cookies won&#39;t be accessible by using malicious JavaScript. One such attribute is HttpOnly.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Set-Cookie: [name]=[value]; HttpOnly
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;HttpOnly makes sure the cookies will be submitted only to the domain they originated from.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; The &quot;Secure&quot; attribute can make sure the cookies are sent over secured channel only.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Set-Cookie: [name]=[value]; Secure
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; The web server can use X-XSS-Protection response header to make sure pages do not load when they detect reflected cross-site scripting (XSS) attacks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;X-XSS-Protection: 1; mode=block
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; The web server can use HTTP Content-Security-Policy response header to control what resources a user agent is allowed to load for a certain page. It can help to prevent various types of attacks like Cross Site Scripting (XSS) and data injection attacks.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Content-Security-Policy: default-src &#39;self&#39; *.http://sometrustedwebsite.com
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you make sure your dependencies are safe?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The only option is to automate the update / security audit of your dependencies. For that there are free and paid options:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;npm outdated&lt;/li&gt; 
 &lt;li&gt;Trace by RisingStack&lt;/li&gt; 
 &lt;li&gt;NSP&lt;/li&gt; 
 &lt;li&gt;GreenKeeper&lt;/li&gt; 
 &lt;li&gt;Snyk&lt;/li&gt; 
 &lt;li&gt;npm audit&lt;/li&gt; 
 &lt;li&gt;npm audit fix&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is Event loop in Node.js? How does it work?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The event loop is what allows Node.js to perform non-blocking I/O operations ‚Äî despite the fact that JavaScript is single-threaded ‚Äî by offloading operations to the system kernel whenever possible.&lt;/p&gt; 
&lt;p&gt;Node.js is a single-threaded application, but it can support concurrency via the concept of &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;callbacks&lt;/code&gt;. Every API of Node.js is asynchronous and being single-threaded, they use &lt;code&gt;async function calls&lt;/code&gt; to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Event-Driven Programming&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In an event-driven application, there is generally a main loop that listens for events, and then triggers a callback function when one of those events is detected.&lt;/p&gt; 
&lt;p&gt;Although events look quite similar to callbacks, the difference lies in the fact that callback functions are called when an asynchronous function returns its result, whereas event handling works on the observer pattern. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners as follows&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Import events module
var events = require(&#39;events&#39;);

// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Import events module
var events = require(&#39;events&#39;);

// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();

// Create an event handler as follows
var connectHandler = function connected() {
   console.log(&#39;connection succesful.&#39;);
  
   // Fire the data_received event 
   eventEmitter.emit(&#39;data_received&#39;);
}

// Bind the connection event with the handler
eventEmitter.on(&#39;connection&#39;, connectHandler);
 
// Bind the data_received event with the anonymous function
eventEmitter.on(&#39;data_received&#39;, function() {
   console.log(&#39;data received succesfully.&#39;);
});

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

console.log(&quot;Program Ended.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;If Node.js is single threaded then how it handles concurrency?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is REPL? What purpose it is used for?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;REPL (READ, EVAL, PRINT, LOOP) is a computer environment similar to Shell (Unix/Linux) and command prompt. Node comes with the REPL environment when it is installed. System interacts with the user through outputs of commands/expressions used. It is useful in writing and debugging the codes. The work of REPL can be understood from its full form:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt;: It reads the inputs from users and parses it into JavaScript data structure. It is then stored to memory.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Eval&lt;/strong&gt;: The parsed JavaScript data structure is evaluated for the results.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Print&lt;/strong&gt;: The result is printed after the evaluation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Loop&lt;/strong&gt;: Loops the input command. To come out of NODE REPL, press ctrl+c twice&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Simple Expression&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$ node
&amp;gt; 10 + 20
30
&amp;gt; 10 + ( 20 * 30 ) - 40
570
&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is asynchronous programming in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Asynchronous programming is a form of parallel programming that allows a unit of work to run separately from the primary application thread. When the work is complete, it notifies the main thread (as well as whether the work was completed or failed). There are numerous benefits to using it, such as improved application performance and enhanced responsiveness.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between Asynchronous and Non-blocking?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Asynchronous&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The architecture of asynchronous explains that the message sent will not give the reply on immediate basis just like we send the mail but do not get the reply on an immediate basis. It does not have any dependency or order. Hence improving the system efficiency and performance. The server stores the information and when the action is done it will be notified.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Non-Blocking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nonblocking immediately responses with whatever data available. Moreover, it does not block any execution and keeps on running as per the requests. If an answer could not be retrieved then in those cases API returns immediately with an error. Nonblocking is mostly used with I/O(input/output). Node.js is itself based on nonblocking I/O model. There are few ways of communication that a nonblocking I/O has completed. The callback function is to be called when the operation is completed. Nonblocking call uses the help of javascript which provides a callback function.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous VS Non-Blocking&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt;Asynchronous does not respond immediately, While Nonblocking responds immediately if the data is available and if not that simply returns an error.&lt;/li&gt; 
 &lt;li&gt;Asynchronous improves the efficiency by doing the task fast as the response might come later, meanwhile, can do complete other tasks. Nonblocking does not block any execution and if the data is available it retrieves the information quickly.&lt;/li&gt; 
 &lt;li&gt;Asynchronous is the opposite of synchronous while nonblocking I/O is the opposite of blocking. They both are fairly similar but they are also different as asynchronous is used with a broader range of operations while nonblocking is mostly used with I/O.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to debug an application in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;node-inspector&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g node-inspector
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node-debug app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Debugger&lt;/li&gt; 
   &lt;li&gt;Node Inspector&lt;/li&gt; 
   &lt;li&gt;Visual Studio Code&lt;/li&gt; 
   &lt;li&gt;Cloud9&lt;/li&gt; 
   &lt;li&gt;Brackets&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Profiling&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;1. node --prof ./app.js
2. node --prof-process ./the-generated-log-file
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Heapdumps&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;node-heapdump with Chrome Developer Tools&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tracing&lt;/strong&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Interactive Stack Traces with TraceGL&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Logging&lt;/strong&gt;&lt;br&gt; Libraries that output debugging information&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Caterpillar&lt;/li&gt; 
   &lt;li&gt;Tracer&lt;/li&gt; 
   &lt;li&gt;scribbles&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Libraries that enhance stack trace information&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Longjohn&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are some of the most popular packages of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Async&lt;/strong&gt;: Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Browserify&lt;/strong&gt;: Browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Bower&lt;/strong&gt;: Bower is a package manager for the web. It works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you‚Äôre looking for.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Csv&lt;/strong&gt;: csv module has four sub modules which provides CSV generation, parsing, transformation and serialization for Node.js.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Debug&lt;/strong&gt;: Debug is a tiny node.js debugging utility modelled after node core&#39;s debugging technique.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Express&lt;/strong&gt;: Express is a fast, un-opinionated, minimalist web framework. It provides small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Grunt&lt;/strong&gt;: is a JavaScript Task Runner that facilitates creating new projects and makes performing repetitive but necessary tasks such as linting, unit testing, concatenating and minifying files (among other things) trivial.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Gulp&lt;/strong&gt;: is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Hapi&lt;/strong&gt;: is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Http-server&lt;/strong&gt;: is a simple, zero-configuration command-line http server. It is powerful enough for production usage, but it&#39;s simple and hackable enough to be used for testing, local development, and learning.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Inquirer&lt;/strong&gt;: A collection of common interactive command line user interfaces.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jquery&lt;/strong&gt;: jQuery is a fast, small, and feature-rich JavaScript library.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Jshint&lt;/strong&gt;: Static analysis tool to detect errors and potential problems in JavaScript code and to enforce your team&#39;s coding conventions.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Koa&lt;/strong&gt;: Koa is web app framework. It is an expressive HTTP middleware for node.js to make web applications and APIs more enjoyable to write.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Lodash&lt;/strong&gt;: The lodash library exported as a node module. Lodash is a modern JavaScript utility library delivering modularity, performance, &amp;amp; extras.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Less&lt;/strong&gt;: The less library exported as a node module.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Moment&lt;/strong&gt;: A lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Mongoose&lt;/strong&gt;: It is a MongoDB object modeling tool designed to work in an asynchronous environment.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;: The official MongoDB driver for Node.js. It provides a high-level API on top of mongodb-core that is meant for end users.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Npm&lt;/strong&gt;: is package manager for javascript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nodemon&lt;/strong&gt;: It is a simple monitor script for use during development of a node.js app, It will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Nodemailer&lt;/strong&gt;: This module enables e-mail sending from a Node.js applications.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Optimist&lt;/strong&gt;: is a node.js library for option parsing with an argv hash.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Phantomjs&lt;/strong&gt;: An NPM installer for PhantomJS, headless webkit with JS API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Passport&lt;/strong&gt;: A simple, unobtrusive authentication middleware for Node.js. Passport uses the strategies to authenticate requests. Strategies can range from verifying username and password credentials or authentication using OAuth or OpenID.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: Q is a library for promises. A promise is an object that represents the return value or the thrown exception that the function may eventually provide.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: Request is Simplified HTTP request client make it possible to make http calls. It supports HTTPS and follows redirects by default.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Socket.io&lt;/strong&gt;: Its a node.js realtime framework server.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Sails&lt;/strong&gt;: Sails : API-driven framework for building realtime apps, using MVC conventions (based on Express and Socket.io)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Through&lt;/strong&gt;: It enables simplified stream construction. It is easy way to create a stream that is both readable and writable.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Underscore&lt;/strong&gt;: Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Validator&lt;/strong&gt;: A nodejs module for a library of string validators and sanitizers.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Winston&lt;/strong&gt;: A multi-transport async logging library for Node.js&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Ws&lt;/strong&gt;: A simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Xml2js&lt;/strong&gt;: A Simple XML to JavaScript object converter.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Yo&lt;/strong&gt;: A CLI tool for running Yeoman generators&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Zmq&lt;/strong&gt;: Bindings for node.js and io.js to ZeroMQ .It is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is EventEmitter in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;All objects that emit events are members of EventEmitter class. These objects expose an &lt;code&gt;eventEmitter.on()&lt;/code&gt; function that allows one or more functions to be attached to named events emitted by the object.&lt;/p&gt; 
&lt;p&gt;When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. All values returned by the called listeners are ignored and will be discarded.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var events = require(&#39;events&#39;);
var eventEmitter = new events.EventEmitter();

// listener #1
var listner1 = function listner1() {
   console.log(&#39;listner1 executed.&#39;);
}

// listener #2
var listner2 = function listner2() {
   console.log(&#39;listner2 executed.&#39;);
}

// Bind the connection event with the listner1 function
eventEmitter.addListener(&#39;connection&#39;, listner1);

// Bind the connection event with the listner2 function
eventEmitter.on(&#39;connection&#39;, listner2);

var eventListeners = require(&#39;events&#39;).EventEmitter.listenerCount
   (eventEmitter,&#39;connection&#39;);
console.log(eventListeners + &quot; Listner(s) listening to connection event&quot;);

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

// Remove the binding of listner1 function
eventEmitter.removeListener(&#39;connection&#39;, listner1);
console.log(&quot;Listner1 will not listen now.&quot;);

// Fire the connection event 
eventEmitter.emit(&#39;connection&#39;);

eventListeners = require(&#39;events&#39;).EventEmitter.listenerCount(eventEmitter,&#39;connection&#39;);
console.log(eventListeners + &quot; Listner(s) listening to connection event&quot;);

console.log(&quot;Program Ended.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now run the main.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node main.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Output&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;2 Listner(s) listening to connection event
listner1 executed.
listner2 executed.
Listner1 will not listen now.
listner2 executed.
1 Listner(s) listening to connection event
Program Ended.
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How many types of streams are present in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Streams are objects that let you read data from a source or write data to a destination in continuous fashion. There are four types of streams&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Readable&lt;/strong&gt; ‚àí Stream which is used for read operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Writable&lt;/strong&gt; ‚àí Stream which is used for write operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Duplex&lt;/strong&gt; ‚àí Stream which can be used for both read and write operation.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt; ‚àí A type of duplex stream where the output is computed based on input.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Each type of Stream is an EventEmitter instance and throws several events at different instance of times.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt; ‚àí This event is fired when there is data is available to read.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt; ‚àí This event is fired when there is no more data to read.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;error&lt;/strong&gt; ‚àí This event is fired when there is any error receiving or writing data.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;finish&lt;/strong&gt; ‚àí This event is fired when all the data has been flushed to underlying system.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Reading from a Stream&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var data = &#39;&#39;;

// Create a readable stream
var readerStream = fs.createReadStream(&#39;input.txt&#39;);

// Set the encoding to be utf8. 
readerStream.setEncoding(&#39;UTF8&#39;);

// Handle stream events --&amp;gt; data, end, and error
readerStream.on(&#39;data&#39;, function(chunk) {
   data += chunk;
});

readerStream.on(&#39;end&#39;,function() {
   console.log(data);
});

readerStream.on(&#39;error&#39;, function(err) {
   console.log(err.stack);
});

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Writing to a Stream&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var data = &#39;Simply Easy Learning&#39;;

// Create a writable stream
var writerStream = fs.createWriteStream(&#39;output.txt&#39;);

// Write the data to stream with encoding to be utf8
writerStream.write(data,&#39;UTF8&#39;);

// Mark the end of file
writerStream.end();

// Handle stream events --&amp;gt; finish, and error
writerStream.on(&#39;finish&#39;, function() {
   console.log(&quot;Write completed.&quot;);
});

writerStream.on(&#39;error&#39;, function(err) {
   console.log(err.stack);
});

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Piping the Streams&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Piping is a mechanism where we provide the output of one stream as the input to another stream. It is normally used to get data from one stream and to pass the output of that stream to another stream. There is no limit on piping operations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);

// Create a readable stream
var readerStream = fs.createReadStream(&#39;input.txt&#39;);

// Create a writable stream
var writerStream = fs.createWriteStream(&#39;output.txt&#39;);

// Pipe the read and write operations
// read input.txt and write data to output.txt
readerStream.pipe(writerStream);

console.log(&quot;Program Ended&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Chaining the Streams&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Chaining is a mechanism to connect the output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var fs = require(&quot;fs&quot;);
var zlib = require(&#39;zlib&#39;);

// Compress the file input.txt to input.txt.gz
fs.createReadStream(&#39;input.txt&#39;)
   .pipe(zlib.createGzip())
   .pipe(fs.createWriteStream(&#39;input.txt.gz&#39;));
  
console.log(&quot;File Compressed.&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is crypto in Node.js? How do you cipher the secure information in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The Node.js Crypto module supports cryptography. It provides cryptographic functionality that includes a set of wrappers for open SSL&#39;s hash HMAC, cipher, decipher, sign and verify functions.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hash&lt;/strong&gt;: A hash is a fixed-length string of bits i.e. procedurally and deterministically generated from some arbitrary block of source data.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;HMAC&lt;/strong&gt;: HMAC stands for Hash-based Message Authentication Code. It is a process for applying a hash algorithm to both data and a secret key that results in a single final hash.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Encryption Example using Hash and HMAC&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const secret = &#39;abcdefg&#39;;  
const hash = crypto.createHmac(&#39;sha256&#39;, secret)  
                   .update(&#39;Welcome to JavaTpoint&#39;)  
                   .digest(&#39;hex&#39;);  
console.log(hash);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Encryption example using Cipher&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);  
var encrypted = cipher.update(&#39;Hello JavaTpoint&#39;, &#39;utf8&#39;, &#39;hex&#39;);  
encrypted += cipher.final(&#39;hex&#39;);  
console.log(encrypted);
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Decryption example using Decipher&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const crypto = require(&#39;crypto&#39;);  
const decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);  
var encrypted = &#39;4ce3b761d58398aed30d5af898a0656a3174d9c7d7502e781e83cf6b9fb836d5&#39;;  
var decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);  
decrypted += decipher.final(&#39;utf8&#39;);  
console.log(decrypted);  
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the use of DNS module in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;DNS is a node module used to do name resolution facility which is provided by the operating system as well as used to do an actual DNS lookup. No need for memorising IP addresses ‚Äì DNS servers provide a nifty solution of converting domain or subdomain names to IP addresses. This module provides an asynchronous network wrapper and can be imported using the following syntax.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;dns.lookup()&lt;/code&gt; function&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.lookup(&#39;www.google.com&#39;, (err, addresses, family) =&amp;gt; {  
  console.log(&#39;addresses:&#39;, addresses);  
  console.log(&#39;family:&#39;,family);  
});  
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: &lt;code&gt;resolve4()&lt;/code&gt; and &lt;code&gt;reverse()&lt;/code&gt; functions&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.resolve4(&#39;www.google.com&#39;, (err, addresses) =&amp;gt; {  
  if (err) throw err;  
  console.log(`addresses: ${JSON.stringify(addresses)}`);  
  addresses.forEach((a) =&amp;gt; {  
    dns.reverse(a, (err, hostnames) =&amp;gt; {  
      if (err) {  
        throw err;  
      }  
      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);  
    });  
  });  
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: print the localhost name using &lt;code&gt;lookupService()&lt;/code&gt; function&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const dns = require(&#39;dns&#39;);  
dns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&amp;gt; {  
  console.log(hostname, service);  
    // Prints: localhost  
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the security mechanisms available in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Using the Helmet module&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Helmet helps to secure your Express applications by setting various HTTP headers, like:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;X-Frame-Options to mitigates clickjacking attacks,&lt;/li&gt; 
 &lt;li&gt;Strict-Transport-Security to keep your users on HTTPS,&lt;/li&gt; 
 &lt;li&gt;X-XSS-Protection to prevent reflected XSS attacks,&lt;/li&gt; 
 &lt;li&gt;X-DNS-Prefetch-Control to disable browsers DNS prefetching.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const express = require(&#39;express&#39;)
const helmet = require(&#39;helmet&#39;)
const app = express()

app.use(helmet())
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Validating user input&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Validating user input is one of the most important things to do when it comes to the security of your application. Failing to do it correctly can open up your application and users to a wide range of attacks, including command injection, SQL injection or stored cross-site scripting.&lt;/p&gt; 
&lt;p&gt;To validate user input, one of the best libraries you can pick is joi. Joi is an object schema description language and validator for JavaScript objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Joi = require(&#39;joi&#39;);

const schema = Joi.object().keys({
    username: Joi.string().alphanum().min(3).max(30).required(),
    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),
    access_token: [Joi.string(), Joi.number()],
    birthyear: Joi.number().integer().min(1900).max(2013),
    email: Joi.string().email()
}).with(&#39;username&#39;, &#39;birthyear&#39;).without(&#39;password&#39;, &#39;access_token&#39;)

// Return result
const result = Joi.validate({
    username: &#39;abc&#39;,
    birthyear: 1994
}, schema)
// result.error === null -&amp;gt; valid
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Securing your Regular Expressions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Regular Expressions are a great way to manipulate texts and get the parts that you need from them. However, there is an attack vector called Regular Expression Denial of Service attack, which exposes the fact that most Regular Expression implementations may reach extreme situations for specially crafted input, that cause them to work extremely slowly.&lt;/p&gt; 
&lt;p&gt;The Regular Expressions that can do such a thing are commonly referred as Evil Regexes. These expressions contain: *grouping with repetition, *inside the repeated group: *repetition, or *alternation with overlapping&lt;/p&gt; 
&lt;p&gt;Examples of Evil Regular Expressions patterns:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(a+)+
([a-zA-Z]+)*
(a|aa)+
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Security.txt&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Security.txt defines a standard to help organizations define the process for security researchers to securely disclose security vulnerabilities.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const express = require(&#39;express&#39;)
const securityTxt = require(&#39;express-security.txt&#39;)

const app = express()

app.get(&#39;/security.txt&#39;, securityTxt({
  // your security address
  contact: &#39;email@example.com&#39;,
  // your pgp key
  encryption: &#39;encryption&#39;,
  // if you have a hall of fame for securty resourcers, include the link here
  acknowledgements: &#39;http://acknowledgements.example.com&#39;
}))
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Name the types of API functions in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;There are two types of API functions in Node.js:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Asynchronous, Non-blocking functions&lt;/li&gt; 
 &lt;li&gt;Synchronous, Blocking functions&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;1. Blocking functions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In a blocking operation, all other code is blocked from executing until an I/O event that is being waited on occurs. Blocking functions execute synchronously.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fs = require(&#39;fs&#39;);
const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read
console.log(data);
// moreWork(); will run after console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The second line of code blocks the execution of additional JavaScript until the entire file is read. moreWork () will only be called after Console.log&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Non-blocking functions&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;In a non-blocking operation, multiple I/O calls can be performed without the execution of the program being halted. Non-blocking functions execute asynchronously.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fs = require(&#39;fs&#39;);
fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {
  if (err) throw err;
  console.log(data);
});
// moreWork(); will run before console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Since &lt;code&gt;fs.readFile()&lt;/code&gt; is non-blocking, moreWork() does not have to wait for the file read to complete before being called. This allows for higher throughput.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does Node.js handle child threads?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Nodejs Primary application runs in an event loop, which is in a single thread.&lt;/li&gt; 
 &lt;li&gt;Background I/O is running in a thread pool that is only accessible to C/C++ or other compiled/native modules and mostly transparent to the JS.&lt;/li&gt; 
 &lt;li&gt;Node v11/12 now has experimental worker_threads, which is another option.&lt;/li&gt; 
 &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; 
 &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; 
 &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the preferred method of resolving unhandled exceptions in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Unhandled exceptions in Node.js can be caught at the Process level by attaching a handler for uncaughtException event.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;process.on(&#39;uncaughtException&#39;, function(err) {
    console.log(&#39;Caught exception: &#39; + err);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Process is a global object that provides information about the current Node.js process. Process is a listener function that is always listening to events.&lt;/p&gt; 
&lt;p&gt;Few events are :&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Exit&lt;/li&gt; 
 &lt;li&gt;disconnect&lt;/li&gt; 
 &lt;li&gt;unhandledException&lt;/li&gt; 
 &lt;li&gt;rejectionHandled&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Since Node.js is by default a single thread application, it will run on a single processor core and will not take full advantage of multiple core resources. However, Node.js provides support for deployment on multiple-core systems, to take greater advantage of the hardware. The Cluster module is one of the core Node.js modules and it allows running multiple Node.js worker processes that will share the same port.&lt;/p&gt; 
&lt;p&gt;The cluster module helps to spawn new processes on the operating system. Each process works independently, so you cannot use shared state between child processes. Each process communicates with the main process by IPC and pass server handles back and forth.&lt;/p&gt; 
&lt;p&gt;Cluster supports two types of load distribution:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The main process listens on a port, accepts new connection and assigns it to a child process in a round robin fashion.&lt;/li&gt; 
 &lt;li&gt;The main process assigns the port to a child process and child process itself listen the port.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is typically the first argument passed to a Node.js callback handler?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The first argument to any callback handler is an optional error object&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function callback(err, results) {
    // usually we&#39;ll check for the error before handling results
    if(err) {
        // handle error somehow and return
    }
    // no error, perform standard callback handling
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How Node.js read the content of a file?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &quot;normal&quot; way in Node.js is probably to read in the content of a file in a non-blocking, asynchronous way. That is, to tell Node to read in the file, and then to get a callback when the file-reading has been finished. That would allow us to hand several requests in parallel.&lt;/p&gt; 
&lt;p&gt;Common use for the File System module:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Read files&lt;/li&gt; 
 &lt;li&gt;Create files&lt;/li&gt; 
 &lt;li&gt;Update files&lt;/li&gt; 
 &lt;li&gt;Delete files&lt;/li&gt; 
 &lt;li&gt;Rename files&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Read Files&lt;/strong&gt;&lt;br&gt; index.html&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;My Header&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;My paragraph.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// read_file.js

var http = require(&#39;http&#39;);
var fs = require(&#39;fs&#39;);
http.createServer(function (req, res) {
  fs.readFile(&#39;index.html&#39;, function(err, data) {
    res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;});
    res.write(data);
    res.end();
  });
}).listen(8080);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Initiate read_file.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node read_file.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is JIT and how is it related to Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js has depended on the V8 JavaScript engine to provide code execution in the language. The V8 is a JavaScript engine built at the google development center, in Germany. It is open source and written in C++. It is used for both client side (Google Chrome) and server side (node.js) JavaScript applications. A central piece of the V8 engine that allows it to execute JavaScript at high speed is the JIT (Just In Time) compiler. This is a dynamic compiler that can optimize code during runtime. When V8 was first built the JIT Compiler was dubbed FullCodegen. Then, the V8 team implemented Crankshaft, which included many performance optimizations that FullCodegen did not implement.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;V8&lt;/code&gt; was first designed to increase the performance of the JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler like a lot of modern JavaScript engines such as SpiderMonkey or Rhino (Mozilla) are doing. The main difference with V8 is that it doesn‚Äôt produce bytecode or any intermediate code.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is chrome v8 engine?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;V8 is the name of the JavaScript engine that powers Google Chrome. It&#39;s the thing that takes our JavaScript and executes it while browsing with Chrome. V8 provides the runtime environment in which JavaScript executes. The DOM, and the other Web Platform APIs are provided by the browser.&lt;/p&gt; 
&lt;p&gt;V8 is Google‚Äôs open source high-performance JavaScript and WebAssembly engine, written in C++. It is used in Chrome and in Node.js, among others. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors. V8 can run standalone, or can be embedded into any C++ application.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the purpose of using hidden classes in V8?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How V8 compiles JavaScript code?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is V8 Templates?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why is LIBUV needed in Node JS?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;LIBUV is a library written in C and it&#39;s focus is on asynchronous I/O. Node.js use this library to interact with OS, system files and networking and also two core features of Node.js called event loop and thread pool are available in this runtime thanks to this library.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between put and patch?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;PUT and PATCH are HTTP verbs and they both relate to updating a resource. The main difference between PUT and PATCH requests are in the way the server processes the enclosed entity to modify the resource identified by the Request-URI.&lt;/p&gt; 
&lt;p&gt;In a PUT request, the enclosed entity is considered to be a modified version of the resource stored on the origin server, and the client is requesting that the stored version be replaced.&lt;/p&gt; 
&lt;p&gt;With PATCH, however, the enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version.&lt;/p&gt; 
&lt;p&gt;Also, another difference is that when you want to update a resource with PUT request, you have to send the full payload as the request whereas with PATCH, you only send the parameters which you want to update.&lt;/p&gt; 
&lt;p&gt;The most commonly used HTTP verbs POST, GET, PUT, DELETE are similar to CRUD (Create, Read, Update and Delete) operations in database. We specify these HTTP verbs in the capital case. So, the below is the comparison between them.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; - create&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; - read&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; - update&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; - delete&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: Submits a partial modification to a resource. If you only need to update one field for the resource, you may want to use the PATCH method.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;List types of Http requests supported by Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The HTTP core module is a key module to Node.js networking.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const http = require(&#39;http&#39;)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;http.METHODS&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;require(&#39;http&#39;).METHODS
[ &#39;ACL&#39;,
  &#39;BIND&#39;,
  &#39;CHECKOUT&#39;,
  &#39;CONNECT&#39;,
  &#39;COPY&#39;,
  &#39;DELETE&#39;,
  &#39;GET&#39;,
  &#39;HEAD&#39;,
  &#39;LINK&#39;,
  &#39;LOCK&#39;,
  &#39;M-SEARCH&#39;,
  &#39;MERGE&#39;,
  &#39;MKACTIVITY&#39;,
  &#39;MKCALENDAR&#39;,
  &#39;MKCOL&#39;,
  &#39;MOVE&#39;,
  &#39;NOTIFY&#39;,
  &#39;OPTIONS&#39;,
  &#39;PATCH&#39;,
  &#39;POST&#39;,
  &#39;PROPFIND&#39;,
  &#39;PROPPATCH&#39;,
  &#39;PURGE&#39;,
  &#39;PUT&#39;,
  &#39;REBIND&#39;,
  &#39;REPORT&#39;,
  &#39;SEARCH&#39;,
  &#39;SUBSCRIBE&#39;,
  &#39;TRACE&#39;,
  &#39;UNBIND&#39;,
  &#39;UNLINK&#39;,
  &#39;UNLOCK&#39;,
  &#39;UNSUBSCRIBE&#39; ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;http.STATUS_CODES&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;require(&#39;http&#39;).STATUS_CODES
{ &#39;100&#39;: &#39;Continue&#39;,
&#39;101&#39;: &#39;Switching Protocols&#39;,
&#39;102&#39;: &#39;Processing&#39;,
&#39;200&#39;: &#39;OK&#39;,
&#39;201&#39;: &#39;Created&#39;,
&#39;202&#39;: &#39;Accepted&#39;,
&#39;203&#39;: &#39;Non-Authoritative Information&#39;,
&#39;204&#39;: &#39;No Content&#39;,
&#39;205&#39;: &#39;Reset Content&#39;,
&#39;206&#39;: &#39;Partial Content&#39;,
&#39;207&#39;: &#39;Multi-Status&#39;,
&#39;208&#39;: &#39;Already Reported&#39;,
&#39;226&#39;: &#39;IM Used&#39;,
&#39;300&#39;: &#39;Multiple Choices&#39;,
&#39;301&#39;: &#39;Moved Permanently&#39;,
&#39;302&#39;: &#39;Found&#39;,
&#39;303&#39;: &#39;See Other&#39;,
&#39;304&#39;: &#39;Not Modified&#39;,
&#39;305&#39;: &#39;Use Proxy&#39;,
&#39;307&#39;: &#39;Temporary Redirect&#39;,
&#39;308&#39;: &#39;Permanent Redirect&#39;,
&#39;400&#39;: &#39;Bad Request&#39;,
&#39;401&#39;: &#39;Unauthorized&#39;,
&#39;402&#39;: &#39;Payment Required&#39;,
&#39;403&#39;: &#39;Forbidden&#39;,
&#39;404&#39;: &#39;Not Found&#39;,
&#39;405&#39;: &#39;Method Not Allowed&#39;,
&#39;406&#39;: &#39;Not Acceptable&#39;,
&#39;407&#39;: &#39;Proxy Authentication Required&#39;,
&#39;408&#39;: &#39;Request Timeout&#39;,
&#39;409&#39;: &#39;Conflict&#39;,
&#39;410&#39;: &#39;Gone&#39;,
&#39;411&#39;: &#39;Length Required&#39;,
&#39;412&#39;: &#39;Precondition Failed&#39;,
&#39;413&#39;: &#39;Payload Too Large&#39;,
&#39;414&#39;: &#39;URI Too Long&#39;,
&#39;415&#39;: &#39;Unsupported Media Type&#39;,
&#39;416&#39;: &#39;Range Not Satisfiable&#39;,
&#39;417&#39;: &#39;Expectation Failed&#39;,
&#39;418&#39;: &#39;I\&#39;m a teapot&#39;,
&#39;421&#39;: &#39;Misdirected Request&#39;,
&#39;422&#39;: &#39;Unprocessable Entity&#39;,
&#39;423&#39;: &#39;Locked&#39;,
&#39;424&#39;: &#39;Failed Dependency&#39;,
&#39;425&#39;: &#39;Unordered Collection&#39;,
&#39;426&#39;: &#39;Upgrade Required&#39;,
&#39;428&#39;: &#39;Precondition Required&#39;,
&#39;429&#39;: &#39;Too Many Requests&#39;,
&#39;431&#39;: &#39;Request Header Fields Too Large&#39;,
&#39;451&#39;: &#39;Unavailable For Legal Reasons&#39;,
&#39;500&#39;: &#39;Internal Server Error&#39;,
&#39;501&#39;: &#39;Not Implemented&#39;,
&#39;502&#39;: &#39;Bad Gateway&#39;,
&#39;503&#39;: &#39;Service Unavailable&#39;,
&#39;504&#39;: &#39;Gateway Timeout&#39;,
&#39;505&#39;: &#39;HTTP Version Not Supported&#39;,
&#39;506&#39;: &#39;Variant Also Negotiates&#39;,
&#39;507&#39;: &#39;Insufficient Storage&#39;,
&#39;508&#39;: &#39;Loop Detected&#39;,
&#39;509&#39;: &#39;Bandwidth Limit Exceeded&#39;,
&#39;510&#39;: &#39;Not Extended&#39;,
&#39;511&#39;: &#39;Network Authentication Required&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Making HTTP Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const request = require(&#39;request&#39;);

request(&#39;https://nodejs.org/&#39;, function(err, res, body) {
    console.log(body);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The first argument to request can either be a URL string, or an object of options. Here are some of the more common options you&#39;ll encounter in your applications:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt;: The destination URL of the HTTP request&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt;: The HTTP method to be used (GET, POST, DELETE, etc)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt;: An object of HTTP headers (key-value) to be set in the request&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;form&lt;/strong&gt;: An object containing key-value form data&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const request = require(&#39;request&#39;);

const options = {
    url: &#39;https://nodejs.org/file.json&#39;,
    method: &#39;GET&#39;,
    headers: {
        &#39;Accept&#39;: &#39;application/json&#39;,
        &#39;Accept-Charset&#39;: &#39;utf-8&#39;,
        &#39;User-Agent&#39;: &#39;my-reddit-client&#39;
    }
};

request(options, function(err, res, body) {
    let json = JSON.parse(body);
    console.log(json);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Using the options object, this request uses the GET method to retrieve JSON data directly from Reddit, which is returned as a string in the body field. From here, you can use &lt;code&gt;JSON.parse&lt;/code&gt; and use the data as a normal JavaScript object.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why to use Express.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;ExpressJS is a prebuilt NodeJS framework that can help you in creating server-side web applications faster and smarter. Simplicity, minimalism, flexibility, scalability are some of its characteristics and since it is made in NodeJS itself, it inherited its performance as well.&lt;/p&gt; 
&lt;p&gt;Express 3.x is a light-weight web application framework to help organize your web application into an MVC architecture on the server side. You can then use a database like &lt;code&gt;MongoDB&lt;/code&gt; with &lt;code&gt;Mongoose&lt;/code&gt; (for modeling) to provide a backend for your Node.js application. Express.js basically helps you manage everything, from routes, to handling requests and views.&lt;/p&gt; 
&lt;p&gt;It has become the standard server framework for node.js. Express is the backend part of something known as the MEAN stack. The MEAN is a free and open-source JavaScript software stack for building dynamic web sites and web applications which has the following components;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;strong&gt;MongoDB&lt;/strong&gt; - The standard NoSQL database&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Express.js&lt;/strong&gt; - The default web applications framework&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Angular.js&lt;/strong&gt; - The JavaScript MVC framework used for web applications&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; - Framework used for scalable server-side and networking applications.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;The Express.js framework makes it very easy to develop an application which can be used to handle multiple types of requests like the GET, PUT, and POST and DELETE requests.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;using Express&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var express=require(&#39;express&#39;);
var app=express();
app.get(&#39;/&#39;,function(req,res) {
  res.send(&#39;Hello World!&#39;);
});
var server=app.listen(3000,function() {});
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Write the steps for setting up an Express JS application?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Install Express Generator&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node&amp;gt;npm install -g express-generator
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Create an Express Project&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node&amp;gt;express --view=&quot;ejs&quot; nodetest1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3. Edit Dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;MAKE SURE TO CD INTO YOUR nodetest FOLDER. OK, now we have some basic structure in there, but we&#39;re not quite done. You&#39;ll note that the express-generator routine created a file called package.json in your nodetest1 directory. Open this up in a text editor and it&#39;ll look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// C:\node\nodetest1\package.json
{
  &quot;name&quot;: &quot;nodetest1&quot;,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;private&quot;: true,
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;node ./bin/www&quot;
  },
  &quot;dependencies&quot;: {
    &quot;cookie-parser&quot;: &quot;~1.4.3&quot;,
    &quot;debug&quot;: &quot;~2.6.9&quot;,
    &quot;ejs&quot;: &quot;~2.5.7&quot;,
    &quot;express&quot;: &quot;~4.16.0&quot;,
    &quot;http-errors&quot;: &quot;~1.6.2&quot;,
    &quot;morgan&quot;: &quot;~1.9.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is a basic JSON file describing our app and its dependencies. We need to add a few things to it. Specifically, calls for MongoDB and Monk.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node\nodetest1&amp;gt;npm install --save monk@^6.0.6 mongodb@^3.1.13
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4. Install Dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;C:\node\nodetest1&amp;gt;npm install
C:\node\nodetest1&amp;gt;npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Node Console&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt; nodetest1@0.0.0 start C:\node\nodetest1
&amp;gt; node ./bin/www
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Since node is a single threaded process, how to make use of all CPUs?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; 
 &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; 
 &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;A single instance of Node.js runs in a single thread. To take advantage of multi-core systems, the user will sometimes want to launch a cluster of Node.js processes to handle the load. The cluster module allows easy creation of child processes that all share server ports.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const cluster = require(&#39;cluster&#39;);
const http = require(&#39;http&#39;);
const numCPUs = require(&#39;os&#39;).cpus().length;

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i &amp;lt; numCPUs; i++) {
    cluster.fork();
  }

  cluster.on(&#39;exit&#39;, (worker, code, signal) =&amp;gt; {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server
  http.createServer((req, res) =&amp;gt; {
    res.writeHead(200);
    res.end(&#39;hello world\n&#39;);
  }).listen(8000);

  console.log(`Worker ${process.pid} started`);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Running Node.js will now share port 8000 between the workers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node server.js
Master 3596 is running
Worker 4324 started
Worker 4520 started
Worker 6056 started
Worker 5644 started
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The worker processes are spawned using the &lt;code&gt;child_process.fork()&lt;/code&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.&lt;/p&gt; 
&lt;p&gt;The cluster module supports two methods of distributing incoming connections.&lt;/p&gt; 
&lt;p&gt;The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.&lt;/p&gt; 
&lt;p&gt;The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What does emitter do and what is dispatcher?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js core API is based on asynchronous event-driven architecture in which certain kind of objects called emitters periodically emit events that cause listener objects to be called.&lt;/p&gt; 
&lt;p&gt;All objects that emit events are members of EventEmitter class. These objects expose an eventEmitter.on() function that allows one or more functions to be attached to named events emitted by the object.&lt;/p&gt; 
&lt;p&gt;When the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. All values returned by the called listeners are ignored and will be discarded.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const EventEmitter = require(&#39;events&#39;);
class MyEmitter extends EventEmitter {}
const myEmitter = new MyEmitter();
myEmitter.on(&#39;event&#39;, function(a, b) {
  console.log(a, b, this);
  // Prints:
  //   Technoetics Club MyEmitter {
  //     domain: null,
  //     _events: { event: [Function] },
  //     _eventsCount: 1,
  //     _maxListeners: undefined }
});
myEmitter.emit(&#39;event&#39;,&#39;Technoetics&#39;, &#39;Club&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here we create a myEmitter object and emit event at the end which triggers the callback function and we are able to get the desired output.&lt;/p&gt; 
&lt;p&gt;By default, all listeners attached to a particular event object are called by the EventListener object synchronously in the order in which they are registered or attached to the event object.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Dispatcher&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Dispatcher has functionality not provided nor expected in EventEmitter, the most notable being waitFor, which allows a store to ensure that another store has been updated in response to an action before it proceeds.&lt;/p&gt; 
&lt;p&gt;Pattern-wise, the Dispatcher is also a singleton, whereas EventEmitter is an API that you might object-assign onto multiple stores.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to kill child processes that spawn their own child processes in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;If a child process in Node.js spawn their own child processes, kill() method will not kill the child process‚Äôs own child processes. For example, if I start a process that starts it‚Äôs own child processes via child_process module, killing that child process will not make my program to quit.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var spawn = require(&#39;child_process&#39;).spawn;
var child = spawn(&#39;my-command&#39;);

child.kill();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The program above will not quit if &lt;code&gt;my-command&lt;/code&gt; spins up some more processes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;PID range hack&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;We can start child processes with {detached: true} option so those processes will not be attached to main process but they will go to a new group of processes. Then using process.kill(-pid) method on main process we can kill all processes that are in the same group of a child process with the same pid group. In my case, I only have one processes in this group.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var spawn = require(&#39;child_process&#39;).spawn;
var child = spawn(&#39;my-command&#39;, {detached: true});

process.kill(-child.pid);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please note - before pid. This converts a pid to a group of pids for process kill() method.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What do you understand by Reactor Pattern in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Reactor Pattern is an idea of non-blocking I/O operations in Node.js. This pattern provides a handler(in case of Node.js, a callback function) that is associated with each I/O operation. When an I/O request is generated, it is submitted to a demultiplexer.&lt;/p&gt; 
&lt;p&gt;This demultiplexer is a notification interface that is used to handle concurrency in non-blocking I/O mode and collects every request in form of an event and queues each event in a queue. Thus, the demultiplexer provides the Event Queue, which we often hear about. When a request is collected by the demultiplexer, it returns the control back to the system and does not blocks the I/O. At the same time, there is an Event Loop which iterates over the items in the Event Queue. Every event has a callback function associated with it, and that callback function is invoked when the Event Loop iterates.&lt;/p&gt; 
&lt;p&gt;The callback function further mostly have other callbacks associated within representing some asynchronous operations. These operations are inserted in the Event Queue by the demultiplexer and are ready to be processed once the Event Loop iterates over them. That is why calls to other operations must be asynchronous.&lt;/p&gt; 
&lt;p&gt;When all the items in the Event Queue are processed and there are no pending operations left, Node.js terminates the application automatically.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/reactor-pattern.jpg&quot; alt=&quot;Test Pyramid&quot; width=&quot;800px&quot;&gt; &lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The application generates a new I/O operation by submitting a request to the Event Demultiplexer. The application also specifies a handler, which will be invoked when the operation completes. Submitting a new request to the Event Demultiplexer is a non-blocking call and it immediately returns the control back to the application.&lt;/li&gt; 
 &lt;li&gt;When a set of I/O operations completes, the Event Demultiplexer pushes the new events into the Event Queue.&lt;/li&gt; 
 &lt;li&gt;At this point, the Event Loop iterates over the items of the Event Queue.&lt;/li&gt; 
 &lt;li&gt;For each event, the associated handler is invoked.&lt;/li&gt; 
 &lt;li&gt;The handler, which is part of the application code, will give back the control to the Event Loop when its execution completes (5a). However, new asynchronous operations might be requested during the execution of the handler (5b), causing new operations to be inserted in the Event Demultiplexer (1), before the control is given back to the Event Loop.&lt;/li&gt; 
 &lt;li&gt;When all the items in the Event Queue are processed, the loop will block again on the Event Demultiplexer which will then trigger another cycle.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the key features of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Asynchronous event driven IO helps concurrent request handling&lt;/strong&gt; ‚Äì All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the processing of other requests. Thus it will not wait for the response from the previous requests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fast in Code execution&lt;/strong&gt; ‚Äì Node.js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node.js also become faster.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Single Threaded but Highly Scalable&lt;/strong&gt; ‚Äì Node.js uses a single thread model for event looping. The response from these events may or may not reach the server immediately. However, this does not block other operations. Thus making Node.js highly scalable. Traditional servers create limited threads to handle requests while Node.js creates a single thread that provides service to much larger numbers of such requests.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Node.js library uses JavaScript&lt;/strong&gt; ‚Äì This is another important aspect of Node.js from the developer‚Äôs point of view. The majority of developers are already well-versed in JavaScript. Hence, development in Node.js becomes easier for a developer who knows JavaScript.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;There is an Active and vibrant community for the Node.js framework&lt;/strong&gt; ‚Äì The active community always keeps the framework updated with the latest trends in the web development.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;No Buffering&lt;/strong&gt; ‚Äì Node.js applications never buffer any data. They simply output the data in chunks.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are globals in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;There are three keywords in Node.js which constitute as Globals. These are Global, Process, and Buffer.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Global&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Global keyword represents the global namespace object. It acts as a container for all other &lt;code&gt;global&lt;/code&gt; objects. If we type &lt;code&gt;console.log(global)&lt;/code&gt;, it will print out all of them.&lt;/p&gt; 
&lt;p&gt;An important point to note about the global objects is that not all of them are in the global scope, some of them fall in the module scope. So, it is wise to declare them without using the var keyword or add them to Global object.&lt;/p&gt; 
&lt;p&gt;Variables declared using the var keyword become local to the module whereas those declared without it get subscribed to the global object.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. Process&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is also one of the global objects but includes additional functionality to turn a synchronous function into an async callback. There is no boundation to access it from anywhere in the code. It is the instance of the EventEmitter class. And each node application object is an instance of the Process object.&lt;/p&gt; 
&lt;p&gt;It primarily gives back the information about the application or the environment.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.execPath&amp;gt;&lt;/code&gt; ‚Äì to get the execution path of the Node app.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.Version&amp;gt;&lt;/code&gt; ‚Äì to get the Node version currently running.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.platform&amp;gt;&lt;/code&gt; ‚Äì to get the server platform.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Some of the other useful Process methods are as follows.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.memoryUsage&amp;gt;&lt;/code&gt; ‚Äì To know the memory used by Node application.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;process.NextTick&amp;gt;&lt;/code&gt; ‚Äì To attach a callback function that will get called during the next loop. It can cause a delay in executing a function.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;3. Buffer&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Buffer is a class in Node.js to handle binary data. It is similar to a list of integers but stores as a raw memory outside the V8 heap.&lt;/p&gt; 
&lt;p&gt;We can convert JavaScript string objects into Buffers. But it requires mentioning the encoding type explicitly.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;ascii&amp;gt;&lt;/code&gt; ‚Äì Specifies 7-bit ASCII data.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;utf8&amp;gt;&lt;/code&gt; ‚Äì Represents multibyte encoded Unicode char set.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;utf16le&amp;gt;&lt;/code&gt; ‚Äì Indicates 2 or 4 bytes, little endian encoded Unicode chars.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;base64&amp;gt;&lt;/code&gt; ‚Äì Used for Base64 string encoding.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;hex&amp;gt;&lt;/code&gt; ‚Äì Encodes each byte as two hexadecimal chars.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Here is the syntax to use the Buffer class.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var buffer = new Buffer(string, [encoding]);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The above command will allocate a new buffer holding the string with &lt;code&gt;utf8&lt;/code&gt; as the default encoding. However, if you like to write a &lt;code&gt;string&lt;/code&gt; to an existing buffer object, then use the following line of code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;buffer.write(string)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This class also offers other methods like &lt;code&gt;readInt8&lt;/code&gt; and &lt;code&gt;writeUInt8&lt;/code&gt; that allows read/write from various types of data to the buffer.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is chaining process in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It is an approach to connect the output of one stream to the input of another stream, thus creating a chain of multiple stream operations.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is a control flow function? What are the steps does it execute?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;It is a generic piece of code which runs in between several asynchronous function calls is known as control flow function.&lt;/p&gt; 
&lt;p&gt;It executes the following steps.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Control the order of execution.&lt;/li&gt; 
 &lt;li&gt;Collect data.&lt;/li&gt; 
 &lt;li&gt;Limit concurrency.&lt;/li&gt; 
 &lt;li&gt;Call the next step in the program.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is npm in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;NPM stands for Node Package Manager. It provides following two main functionalities.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;It works as an Online repository for node.js packages/modules which are present at &amp;lt;nodejs.org&amp;gt;.&lt;/li&gt; 
 &lt;li&gt;It works as Command line utility to install packages, do version management and dependency management of Node.js packages. NPM comes bundled along with Node.js installable. We can verify its version using the following command-&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm --version
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;NPM helps to install any Node.js module using the following command.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install &amp;lt;Module Name&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For example, following is the command to install a famous Node.js web framework module called express-&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;When to use Node.js and when not to use it?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;When to use Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is ideal to use Node.js for developing streaming or event-based real-time applications that require less CPU usage such as.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Chat applications.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Game servers -- Node.js is good for fast and high-performance servers, that face the need to handle thousands of user requests simultaneously.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Good For A Collaborative Environment -- It is suitable for environments where multiple people work together. For example, they post their documents, modify them by doing check-out and check-in of these documents. Node.js supports such situations by creating an event loop for every change made to the document. The ‚ÄúEvent loop‚Äù feature of Node.js enables it to handle multiple events simultaneously without getting blocked.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Advertisement Servers -- Here again, we have servers that handle thousands of request for downloading advertisements from a central host. And Node.js is an ideal solution to handle such tasks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Streaming Servers -- Another ideal scenario to use Node.js is for multimedia streaming servers where clients fire request‚Äôs towards the server to download different multimedia contents from it.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To summarize, it‚Äôs good to use Node.js, when you need high levels of concurrency but less amount of dedicated CPU time.&lt;/p&gt; 
&lt;p&gt;Last but not the least, since Node.js uses JavaScript internally, so it fits best for building client-side applications that also use JavaScript.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When to not use Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;However, we can use Node.js for a variety of applications. But it is a single threaded framework, so we should not use it for cases where the application requires long processing time. If the server is doing some calculation, it won‚Äôt be able to process any other requests. Hence, Node.js is best when processing needs less dedicated CPU time.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain how does Node.js work?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;A Node.js application creates a single thread on its invocation. Whenever Node.js receives a request, it first completes its processing before moving on to the next request.&lt;/p&gt; 
&lt;p&gt;Node.js works asynchronously by using the event loop and callback functions, to handle multiple requests coming in parallel. An Event Loop is a functionality which handles and processes all your external events and just converts them to a callback function. It invokes all the event handlers at a proper time. Thus, lots of work is done on the back-end, while processing a single request, so that the new incoming request doesn‚Äôt have to wait if the processing is not complete.&lt;/p&gt; 
&lt;p&gt;While processing a request, Node.js attaches a callback function to it and moves it to the back-end. Now, whenever its response is ready, an event is called which triggers the associated callback function to send this response.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Is Node.js entirely based on a single-thread?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Yes, it is true that Node.js processes all requests on a single thread. But it is just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.&lt;/p&gt; 
&lt;p&gt;Moreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.&lt;/p&gt; 
&lt;p&gt;To explain it practically, let‚Äôs assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to make post request in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Following code snippet can be used to make a Post Request in Node.js.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var request = require(&#39;request&#39;);
    request.post(&#39;http://www.example.com/action&#39;, { form: { key: &#39;value&#39; } },
    function (error, response, body) {
        if (!error &amp;amp;&amp;amp; response.statusCode == 200) {
            console.log(body)
        }
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Can you create http server in Node.js, explain the code used for it?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Yes, we can create HTTP Server in Node.js. We can use the &lt;code&gt;&amp;lt;http-server&amp;gt;&lt;/code&gt; command to do so.&lt;/p&gt; 
&lt;p&gt;Following is the sample code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var http = require(&#39;http&#39;);
var requestListener = function (request, response) {
    response.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
    response.end(&#39;Welcome Viewers\n&#39;);
}
var server = http.createServer(requestListener);
server.listen(4200); // The port where you want to start with.
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to load html in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;To load HTML in Node.js we have to change the ‚ÄúContent-type‚Äù in the HTML code from text/plain to text/html.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile(filename, &quot;binary&quot;, function(err, file) {
    if(err) { 
        response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
        response.write(err + &quot;\n&quot;);
        response.end();
        return;
    }

response.writeHead(200);
response.write(file, &quot;binary&quot;);
response.end();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now we will modify this code to load an HTML page instead of plain text.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs.readFile(filename, &quot;binary&quot;, function(err, file) {
    if(err) { 
        response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/html&quot;});
        response.write(err + &quot;\n&quot;);
        response.end();
        return;
    }

response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
response.write(file);
response.end();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How can you listen on port 80 with Node?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Instead of running on port 80 we can redirect port 80 to your application&#39;s port (&amp;gt;1024) using&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3000
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between operational and programmer errors?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Operation errors are not bugs, but problems with the system, like request timeout or hardware failure. On the other hand programmer errors are actual bugs.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why npm shrinkwrap is useful?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;NPM shrinkwrap lets you lock down the ver¬≠sions of installed pack¬≠ages and their descen¬≠dant pack¬≠ages. It helps you use same package versions on all environments (development, staging, production) and also improve download and installation speed. Having same versions of packages on all environments can help you test systems and deploy with confidence. If all tests pass on one machine, you can be sure that it will pass on all other because you know that you use same code!&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm shrinkwrap
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It should create new npm-shrinkwrap.json file with information about all packages you use.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is your favourite HTTP framework and why?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Express.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Express provides a thin layer on top of Node.js with web application features such as basic routing, middleware, template engine and static files serving, so the drastic I/O performance of Node.js doesn‚Äôt get compromised.&lt;/p&gt; 
&lt;p&gt;Express is a minimal, un-opinionated framework. it doesn‚Äôt apply any of the prevalent design patterns such as MVC, MVP, MVVM or whatever is trending out of the box. For fans of simplicity, this is a big plus among all other frameworks because you can build your application with your own preference and no unnecessary learning curve. This is especially advantageous when creating a new personal project with no historical burden, but as the project or developing team grows, lack of standardization may lead to extra work for project/code management, and worst case scenario it may lead to the inability to maintain.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Generator&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Even though the framework is un-opinionated, it does have the generator that generates specific project folder structure. After installing express-generator npm package and creating application skeleton with generator command, an application folder with clear hierarchy will be created to help you organize images, front-end static JavaScript, stylesheet files and HTML template files.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express-generator -g
express helloapp
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Middleware&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Middleware are basically just functions that have full access to both request and response objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = express();

app.use(cookieParser());
app.use(bodyParser());
app.use(logger());
app.use(authentication());

app.get(&#39;/&#39;, function (req, res) {
  // ...
});

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;An Express application is essentially Node.js with a host of middleware functions, whether you want to customize your own middleware or take advantage of the built-in middlewares of the framework, Express made the process natural and intuitive.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Template Engine&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Template engines allow developer to embed backend variables into HTML files, and when requested the template file will be rendered to plain HTML format with the variables interpolated with their actual values. By default, the express-generator uses Pug (originally known as Jade) template engine, but other options like Mustache and EJS also work with Express seamlessly.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Database Integration&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;As a minimal framework, Express does not consider database integration as a required aspect within its package, thus it leans toward no specific database usage whatsoever. While adopting a particular data storage technology, be it MySQL, MongoDB, PostgreSQL, Redis, ElasticSearch or something else, it‚Äôs just a matter of installing the particular npm package as database driver. These third party database drivers do not conform to unified syntax when doing CRUD instructions, which makes switching databases a big hassle and error prone.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the Challenges with Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Challenges with Node.js Application Maintenance&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Improper maintenance of an application can result in issues related to stability or flexibility, often leading to the app&#39;s failure. If the code is not well-written or if developers use outdated tools, the performance can suffer, and users might experience more bugs and app crashes. On top of that, poor-quality code can hamper the app‚Äôs scaling capacity and the further development of the application. In the worst case scenario, it might become impossible to introduce new features without rewriting the codebase from scratch.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Extensive stack&lt;/li&gt; 
 &lt;li&gt;Technical Debt&lt;/li&gt; 
 &lt;li&gt;Scalability challanges&lt;/li&gt; 
 &lt;li&gt;Poor documentation&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;How to Deal With Maintenance Problems&lt;/strong&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Conduct code review&lt;/li&gt; 
 &lt;li&gt;Use microservices&lt;/li&gt; 
 &lt;li&gt;Improve code quality&lt;/li&gt; 
 &lt;li&gt;Test before new feature implementation&lt;/li&gt; 
 &lt;li&gt;Improve documentation&lt;/li&gt; 
 &lt;li&gt;Update the stack&lt;/li&gt; 
 &lt;li&gt;Dig into the roots&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between Node.js vs Ajax?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. AJAX&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;AJAX stands for Asynchronous Javascript and XML, it‚Äôs used to allow web pages (client-side) to update asynchronously by communicating with a web server and by exchanging data. This essentially means that applications can talk to a server in the background of the application. It uses some core components to function:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The browser &lt;code&gt;XMLHttpRequest&lt;/code&gt; object to request data from a server&lt;/li&gt; 
 &lt;li&gt;HTML/CSS to display or collect data&lt;/li&gt; 
 &lt;li&gt;DOM for dynamic display&lt;/li&gt; 
 &lt;li&gt;JSON/XML for interchanging the data&lt;/li&gt; 
 &lt;li&gt;Javascript to unify everything&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;2. Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Node.js allows the developers to develop a web application in a single language called JavaScript for both client side and server side.&lt;/p&gt; 
&lt;p&gt;Unlike the other programming languages, Node.js has its cycle of the event in the form of language which is very beneficial for high-performance and scalable application development.&lt;/p&gt; 
&lt;p&gt;It is required for those web applications where traffic rate is very high. Node.js is an event based I/O language and its response time is very high rather than the other traditional languages. It is being used by the famous websites like Linked in, Twitter and Gmail.&lt;/p&gt; 
&lt;p&gt;The runtime environment of Node.js interprets JavaScript, which is very easy and simple to understand and code. Due to this reason, even the developers find it easy going which keeps them happy and relaxed. It is pertinent for real-time collaborative apps.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How Node.js overcomes the problem of blocking of I/O operations?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js solves this problem by putting the event based model at its core, using an event loop instead of threads.&lt;/p&gt; 
&lt;p&gt;Node.js uses an event loop for this. An event loop is ‚Äúan entity that handles and processes external events and converts them into callback invocations‚Äù. Whenever data is needed nodejs registers a callback and sends the operation to this event loop. Whenever the data is available the callback is called.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are async functions in Node?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Mention the steps by which you can async in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;ES 2017 introduced Asynchronous functions. Async functions are essentially a cleaner way to work with asynchronous code in JavaScript.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Async/Await&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The newest way to write asynchronous code in JavaScript.&lt;/li&gt; 
 &lt;li&gt;It is non blocking (just like promises and callbacks).&lt;/li&gt; 
 &lt;li&gt;Async/Await was created to simplify the process of working with and writing chained promises.&lt;/li&gt; 
 &lt;li&gt;Async functions return a Promise. If the function throws an error, the Promise will be rejected. If the function returns a value, the Promise will be resolved.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Syntax&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Normal Function
function add(x,y){
  return x + y;
}
// Async Function
async function add(x,y){
  return x + y;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Await&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Async functions can make use of the await expression. This will pause the async function and wait for the Promise to resolve prior to moving on.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function doubleAfter2Seconds(x) {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      resolve(x * 2);
    }, 2000);
  });
}

async function addAsync(x) {
  const a = await doubleAfter2Seconds(10);
  const b = await doubleAfter2Seconds(20);
  const c = await doubleAfter2Seconds(30);
  return x + a + b + c;
}


addAsync(10).then((sum) =&amp;gt; {
  console.log(sum);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the timing features of Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is LTS releases of Node.js why should you care?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;An LTS(Long Term Support) version of Node.js receives all the critical bug fixes, security updates and performance&lt;/p&gt; 
&lt;p&gt;LTS versions of Node.js are supported for at least 18 months and are indicated by even version numbers (e.g. 4, 6, 8). They‚Äôre best for production since the LTS release line is focussed on stability and security, whereas the Current release line has a shorter lifespan and more frequent updates to the code. Changes to LTS versions are limited to bug fixes for stability, security updates, possible npm updates, documentation updates and certain performance improvements that can be demonstrated to not break existing applications.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Why should you separate Express &#39;app&#39; and &#39;server&#39;?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Keeping the API declaration separated from the network related configuration (port, protocol, etc) allows testing the API in-process, without performing network calls, with all the benefits that it brings to the table: fast testing execution and getting coverage metrics of the code. It also allows deploying the same API under flexible and different network conditions. Bonus: better separation of concerns and cleaner code.&lt;/p&gt; 
&lt;p&gt;API declaration, should reside in app.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = express();
app.use(bodyParser.json());
app.use(&quot;/api/events&quot;, events.API);
app.use(&quot;/api/forms&quot;, forms);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Server network declaration, should reside in /bin/www:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = require(&#39;../app&#39;);
var http = require(&#39;http&#39;);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || &#39;3000&#39;);
app.set(&#39;port&#39;, port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between process.nextTick() and setImmediate()?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The difference between &lt;code&gt;process.nextTick()&lt;/code&gt; and &lt;code&gt;setImmediate()&lt;/code&gt; is that &lt;code&gt;process.nextTick()&lt;/code&gt; defers the execution of an action till the next pass around the event loop or it simply calls the callback function once the ongoing execution of the event loop is finished whereas &lt;code&gt;setImmediate()&lt;/code&gt; executes a callback on the next cycle of the event loop and it gives back to the event loop for executing any I/O operations.&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between JavaScript and Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;&lt;/th&gt; 
   &lt;th&gt;JavaScript&lt;/th&gt; 
   &lt;th&gt;Node JS&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Type&lt;/td&gt; 
   &lt;td&gt;JavaScript is a programming language. It running in any web browser with a proper browser engine.&lt;/td&gt; 
   &lt;td&gt;It is an interpreter and environment for JavaScript with some specific useful libraries which JavaScript programming can use separately.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Utility&lt;/td&gt; 
   &lt;td&gt;Mainly using for any client-side activity for a web application, like possible attribute validation or refreshing the page in a specific interval or provide some dynamic changes in web pages without refreshing the page.&lt;/td&gt; 
   &lt;td&gt;It mainly used for accessing or performing any non-blocking operation of any operating system, like creating or executing a shell script or accessing any hardware specific information or running any backend job.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Running Engine&lt;/td&gt; 
   &lt;td&gt;JavaScript running any engine like Spider monkey (FireFox), JavaScript Core (Safari), V8 (Google Chrome).&lt;/td&gt; 
   &lt;td&gt;Node JS only run in a V8 engine which mainly used by google chrome. And javascript program which will be written under this Node JS will be always run in V8 Engine.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What are the difference between Events and Callbacks?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Node.js is a single-threaded application, but it support concurrency via the concept of &lt;strong&gt;event&lt;/strong&gt; and &lt;strong&gt;callbacks&lt;/strong&gt;. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.&lt;/p&gt; 
&lt;p&gt;callback functions are called when an asynchronous function returns its result, whereas event handling works on the &lt;strong&gt;observer pattern&lt;/strong&gt;. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;1. Callback&lt;/strong&gt;: A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: synchronous callback&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function greeting(name) {
  alert(&#39;Hello &#39; + name);
}

function processUserInput(callback) {
  var name = prompt(&#39;Please enter your name.&#39;);
  callback(name);
}

processUserInput(greeting);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Events&lt;/strong&gt;: Every action on a computer is an event. Node.js allows us to create and handle custom events easily by using events module. Event module includes &lt;code&gt;EventEmitter&lt;/code&gt; class which can be used to raise and handle custom events.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var event = require(&#39;events&#39;);  
var eventEmitter = new event.EventEmitter();  
  
//  Add listener function for Sum event  
eventEmitter.on(&#39;Sum&#39;, function(num1, num2) {  
    console.log(&#39;Total: &#39; + (Number(num1) + Number(num2)));  
});  

//  Call Event.  
eventEmitter.emit(&#39;Sum&#39;, &#39;10&#39;, &#39;20&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain RESTful Web Services in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It is an architectural style as well as an approach for communications purposes that is often used in various web services development. A REST Server simply provides access to resources and REST client accesses and modifies the resources using HTTP protocol.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;HTTP methods&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; ‚àí Provides read-only access to a resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; ‚àí Updates an existing resource or creates a new resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; ‚àí Removes a resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; ‚àí Creates a new resource.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;‚àí Update/modify a resource&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Principles of REST&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Uniform Interface&lt;/li&gt; 
 &lt;li&gt;Stateless&lt;/li&gt; 
 &lt;li&gt;Cacheable&lt;/li&gt; 
 &lt;li&gt;Client-Server&lt;/li&gt; 
 &lt;li&gt;Layered System&lt;/li&gt; 
 &lt;li&gt;Code on Demand (optional)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;users.json&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
   &quot;user1&quot; : {
      &quot;id&quot;: 1,
      &quot;name&quot; : &quot;Ehsan Philip&quot;,
      &quot;age&quot; : 24
   },

   &quot;user2&quot; : {
      &quot;id&quot;: 2,
      &quot;name&quot; : &quot;Karim Jimenez&quot;,
      &quot;age&quot; : 22
   },

   &quot;user3&quot; : {
      &quot;id&quot;: 3,
      &quot;name&quot; : &quot;Giacomo Weir&quot;,
      &quot;age&quot; : 18
   }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;List Users&lt;/strong&gt; ( &lt;code&gt;GET&lt;/code&gt; method)&lt;/p&gt; 
&lt;p&gt;Let&#39;s implement our first RESTful API listUsers using the following code in a server.js file ‚àí&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

app.get(&#39;/listUsers&#39;, function (req, res) {
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      console.log( data );
      res.end( data );
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Add User&lt;/strong&gt; ( &lt;code&gt;POST&lt;/code&gt; method )&lt;/p&gt; 
&lt;p&gt;Following API will show you how to add new user in the list.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

var user = {
   &quot;user4&quot; : {
      &quot;id&quot;: 4,
      &quot;name&quot; : &quot;Spencer Amos&quot;,
      &quot;age&quot; : 28
   }
}

app.post(&#39;/addUser&#39;, function (req, res) {
   // First read existing users.
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      data = JSON.parse( data );
      data[&quot;user4&quot;] = user[&quot;user4&quot;];
      console.log( data );
      res.end( JSON.stringify(data));
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Delete User&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var app = express();
var fs = require(&quot;fs&quot;);

var id = 2;

app.delete(&#39;/deleteUser&#39;, function (req, res) {
   // First read existing users.
   fs.readFile( __dirname + &quot;/&quot; + &quot;users.json&quot;, &#39;utf8&#39;, function (err, data) {
      data = JSON.parse( data );
      delete data[&quot;user&quot; + 2];
      console.log( data );
      res.end( JSON.stringify(data));
   });
})

var server = app.listen(3000, function () {
   var host = server.address().address
   var port = server.address().port
   console.log(&quot;App listening at http://%s:%s&quot;, host, port)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is the difference between req.params and req.query?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;params are a part of a path in URL and they&#39;re also known as URL variables. for example, if you have the route /books/:id, then the ‚Äúid‚Äù property will be available as req.params.id. req.params default value is an empty object {}.&lt;/p&gt; 
&lt;p&gt;A query string is a part of a URL that assigns values to specified parameters. A query string commonly includes fields added to a base URL by a Web browser or other client application, for example as part of an HTML form. A query is the last part of URL&lt;/p&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to handle file upload in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;express&lt;/strong&gt;: Popular web framework built on top of Node.js, used for creating REST-API.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;body-parser&lt;/strong&gt;: Parse incoming request bodies in a middleware&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;multer&lt;/strong&gt;: Middleware for handling multipart/form-data ‚Äî file uploads&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;1. Installing the dependencies&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express body-parser multer --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Package.json&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;name&quot;: &quot;file_upload&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;4.13.3&quot;,
    &quot;multer&quot;: &quot;1.1.0&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;should&quot;: &quot;~7.1.0&quot;,
    &quot;mocha&quot;: &quot;~2.3.3&quot;,
    &quot;supertest&quot;: &quot;~1.1.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;3. Server.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&quot;express&quot;);
var bodyParser = require(&#39;body-parser&#39;);
var multer  = require(&#39;multer&#39;);
var app = express();

// for text/number data transfer between clientg and server
app.use(bodyParser());

var storage =   multer.diskStorage({
  destination: function (req, file, callback) {
    callback(null, &#39;./uploads&#39;);
  },
  filename: function (req, file, callback) {
    callback(null, file.fieldname + &#39;-&#39; + Date.now());
  }
});

var upload = multer({ storage : storage}).single(&#39;userPhoto&#39;);

app.get(&#39;/&#39;, function(req, res) {
      res.sendFile(__dirname + &quot;/index.html&quot;);
});

// POST: upload for single file upload
app.post(&#39;/api/photo&#39;, function(req, res) {
    upload(req,res,function(err) {
        if(err) {
            return res.end(&quot;Error uploading file.&quot;);
        }
        res.end(&quot;File is uploaded&quot;);
    });
});

app.listen(3000, function(){
    console.log(&quot;Listening on port 3000&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;4. index.html&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Multer-File-Upload&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;MULTER File Upload | Single File Upload&amp;lt;/h1&amp;gt; 

    &amp;lt;form id = &quot;uploadForm&quot;
         enctype = &quot;multipart/form-data&quot;
         action = &quot;/api/photo&quot;
         method = &quot;post&quot;
    &amp;gt;
      &amp;lt;input type=&quot;file&quot; name=&quot;userPhoto&quot; /&amp;gt;
      &amp;lt;input type=&quot;submit&quot; value=&quot;Upload Image&quot; name=&quot;submit&quot;&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;Explain the terms body-parser, cookie-parser, morgan, nodemon, pm2, serve-favicon, cors, dotenv, fs-extra, moment in Express JS?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;a) body-parser&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;body-parser&lt;/code&gt; extract the entire body portion of an incoming request stream and exposes it on &lt;code&gt;req.body&lt;/code&gt;. This body-parser module parses the JSON, buffer, string and URL encoded data submitted using HTTP POST request.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express ejs body-parser
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// server.js

var express = require(&#39;express&#39;)
var bodyParser = require(&#39;body-parser&#39;)

var app = express()

// create application/json parser
var jsonParser = bodyParser.json()

// create application/x-www-form-urlencoded parser
var urlencodedParser = bodyParser.urlencoded({ extended: false })

// POST /login gets urlencoded bodies
app.post(&#39;/login&#39;, urlencodedParser, function (req, res) {
  res.send(&#39;welcome, &#39; + req.body.username)
})

// POST /api/users gets JSON bodies
app.post(&#39;/api/users&#39;, jsonParser, function (req, res) {
  // create user in req.body
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;b) cookie-parser&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A cookie is a piece of data that is sent to the client-side with a request and is stored on the client-side itself by the Web Browser the user is currently using.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;cookie-parser&lt;/code&gt; middleware&#39;s cookieParser function takes a &lt;code&gt;secret&lt;/code&gt; string or array of strings as the first argument and an &lt;code&gt;options&lt;/code&gt; object as the second argument.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cookie-parser
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cookieParser = require(&#39;cookie-parser&#39;)

var app = express()
app.use(cookieParser())

app.get(&#39;/&#39;, function (req, res) {
  // Cookies that have not been signed
  console.log(&#39;Cookies: &#39;, req.cookies)

  // Cookies that have been signed
  console.log(&#39;Signed Cookies: &#39;, req.signedCookies)
})

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;c) morgan&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;HTTP request logger middleware for node.js.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install morgan
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;: write logs to a file&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var fs = require(&#39;fs&#39;)
var morgan = require(&#39;morgan&#39;)
var path = require(&#39;path&#39;)

var app = express()

// create a write stream (in append mode)
var accessLogStream = fs.createWriteStream(path.join(__dirname, &#39;access.log&#39;), { flags: &#39;a&#39; })

// setup the logger
app.use(morgan(&#39;combined&#39;, { stream: accessLogStream }))

app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;hello, world!&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;d) nodemon&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Nodemon is a utility that will monitor for any changes in source and automatically restart your server.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g nodemon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  // ...
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;nodemon server.js&quot;
  },
  // ...
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;e) pm2&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;(rocess) &lt;strong&gt;M&lt;/strong&gt;(anager) &lt;strong&gt;2&lt;/strong&gt; (pm2) is a production process manager for Node.js applications with a built-in load balancer. It allows to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install pm2 -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Start an application&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pm2 start app.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;[&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/quick-start/&quot;&gt;Read More&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;f) serve-favicon&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Node.js middleware for serving a favicon. The &lt;code&gt;serve-favicon&lt;/code&gt; module lets us exclude requests for the favicon in our logger middleware. It also caches the icon in memory to improve performance by reducing disk access. In addition, it provides an &lt;code&gt;ETag&lt;/code&gt; based on the contents of the icon, rather than file system properties.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install serve-favicon
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var favicon = require(&#39;serve-favicon&#39;)
var path = require(&#39;path&#39;)

var app = express()
app.use(favicon(path.join(__dirname, &#39;public&#39;, &#39;favicon.ico&#39;)))

// Add your routes here, etc.

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;g) cors&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ross-&lt;strong&gt;O&lt;/strong&gt;rigin &lt;strong&gt;R&lt;/strong&gt;esource &lt;strong&gt;S&lt;/strong&gt;haring (CORS) headers allow apps running in the browser to make requests to servers on different domains (also known as origins). CORS headers are set on the server side - the HTTP server is responsible for indicating that a given HTTP request can be cross-origin. CORS defines a way in which a browser and server can interact and determine whether or not it is safe to allow a cross-origin request.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cors
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example: Enable All CORS Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cors = require(&#39;cors&#39;)
var app = express()

app.use(cors())

app.get(&#39;/products/:id&#39;, function (req, res, next) {
  res.json({msg: &#39;This is CORS-enabled for all origins!&#39;})
})

app.listen(8080, function () {
  console.log(&#39;CORS-enabled web server listening on port 80&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example: Enable CORS for a Single Route&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var cors = require(&#39;cors&#39;)
var app = express()

app.get(&#39;/products/:id&#39;, cors(), function (req, res, next) {
  res.json({msg: &#39;This is CORS-enabled for a Single Route&#39;})
})

app.listen(8080, function () {
  console.log(&#39;CORS-enabled web server listening on port 80&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;h) dotenv&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;When a NodeJs application runs, it injects a global variable called &lt;code&gt;process.env&lt;/code&gt; which contains information about the state of environment in which the application is running. The &lt;code&gt;dotenv&lt;/code&gt; loads environment variables stored in the &lt;code&gt;.env&lt;/code&gt; file into &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install dotenv
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .env

DB_HOST=localhost
DB_USER=admin
DB_PASS=root
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// config.js

const db = require(&#39;db&#39;)

db.connect({
  host: process.env.DB_HOST,
  username: process.env.DB_USER,
  password: process.env.DB_PASS
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;i) fs-extra&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;fs-extra&lt;/code&gt; contains methods that aren&#39;t included in the vanilla Node.js fs package. Such as recursive &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, and &lt;code&gt;remove&lt;/code&gt;. It also uses graceful-fs to prevent &lt;code&gt;EMFILE&lt;/code&gt; errors.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install fs-extra
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs-extra&#39;)


// Async with callbacks:
fs.copy(&#39;/tmp/myfile&#39;, &#39;/tmp/mynewfile&#39;, err =&amp;gt; {
  if (err) return console.error(err)
  console.log(&#39;success!&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;j) moment&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install moment --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Format Dates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment().format(&#39;MMMM Do YYYY, h:mm:ss a&#39;); // October 24th 2020, 3:15:22 pm
moment().format(&#39;dddd&#39;);                    // Saturday
moment().format(&quot;MMM Do YY&quot;);               // Oct 24th 20
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Relative Time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment(&quot;20111031&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 9 years ago
moment(&quot;20120620&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 8 years ago
moment().startOf(&#39;day&#39;).fromNow();        // 15 hours ago
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Calendar Time&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moment = require(&#39;moment&#39;);

moment().subtract(10, &#39;days&#39;).calendar(); // 10/14/2020
moment().subtract(6, &#39;days&#39;).calendar();  // Last Sunday at 3:18 PM
moment().subtract(3, &#39;days&#39;).calendar();  // Last Wednesday at 3:18 PM
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How does routing work in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;Routing defines the way in which the client requests are handled by the application endpoints. We define routing using methods of the Express app object that correspond to HTTP methods; for example, &lt;code&gt;app.get()&lt;/code&gt; to handle &lt;code&gt;GET&lt;/code&gt; requests and &lt;code&gt;app.post&lt;/code&gt; to handle &lt;code&gt;POST&lt;/code&gt; requests, &lt;code&gt;app.all()&lt;/code&gt; to handle all HTTP methods and &lt;code&gt;app.use()&lt;/code&gt; to specify middleware as the callback function.&lt;/p&gt; 
&lt;p&gt;These routing methods &quot;listens&quot; for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Syntax&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.METHOD(PATH, HANDLER)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Where:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;app is an instance of express.&lt;/li&gt; 
 &lt;li&gt;METHOD is an &lt;code&gt;HTTP request method&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;PATH is a path on the server.&lt;/li&gt; 
 &lt;li&gt;HANDLER is the function executed when the route is matched.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;a) Route methods&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// GET method route
app.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;GET request&#39;)
})

// POST method route
app.post(&#39;/login&#39;, function (req, res) {
  res.send(&#39;POST request&#39;)
})

// ALL method route
app.all(&#39;/secret&#39;, function (req, res, next) {
  console.log(&#39;Accessing the secret section ...&#39;)
  next() // pass control to the next handler
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;b) Route paths&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Route paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.&lt;/p&gt; 
&lt;p&gt;The characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;()&lt;/code&gt; are subsets of their regular expression counterparts. The hyphen &lt;code&gt;(-)&lt;/code&gt; and the dot &lt;code&gt;(.)&lt;/code&gt; are interpreted literally by string-based paths.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This route path will match requests to /about.
app.get(&#39;/about&#39;, function (req, res) {
  res.send(&#39;about&#39;)
})


// This route path will match acd and abcd.
app.get(&#39;/ab?cd&#39;, function (req, res) {
  res.send(&#39;ab?cd&#39;)
})


// This route path will match butterfly and dragonfly
app.get(/.*fly$/, function (req, res) {
  res.send(&#39;/.*fly$/&#39;)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;c) Route parameters&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the &lt;code&gt;req.params&lt;/code&gt; object, with the name of the route parameter specified in the path as their respective keys.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/users/:userId&#39;, function (req, res) {
  res.send(req.params)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Response methods&lt;/strong&gt;&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Method&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.download()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Prompt a file to be downloaded.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.end()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;End the response process.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.json()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send a JSON response.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.jsonp()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send a JSON response with JSONP support.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.redirect()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Redirect a request.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.render()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Render a view template.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.send()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send a response of various types.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.sendFile()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Send a file as an octet stream.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;code&gt;res.sendStatus()&lt;/code&gt;&lt;/td&gt; 
   &lt;td&gt;Set the response status code and send its string representation as the response body.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;&lt;strong&gt;d) Router method&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;)
var router = express.Router()

// middleware that is specific to this router
router.use(function timeLog (req, res, next) {
  console.log(&#39;Time: &#39;, Date.now())
  next()
})

// define the home page route
router.get(&#39;/&#39;, function (req, res) {
  res.send(&#39;Birds home page&#39;)
})

// define the about route
router.get(&#39;/about&#39;, function (req, res) {
  res.send(&#39;About birds&#39;)
})

module.exports = router
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How node.js prevents blocking code?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Blocking vs Non-blocking&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Blocking&lt;/strong&gt; is when the execution of additional JavaScript in the Node.js process must wait until a non-JavaScript operation completes. This happens because the event loop is unable to continue running JavaScript while a &lt;strong&gt;blocking&lt;/strong&gt; operation is occurring.&lt;/p&gt; 
&lt;p&gt;Synchronous methods in the Node.js standard library that use &lt;strong&gt;libuv&lt;/strong&gt; are the most commonly used blocking operations. Native modules may also have blocking methods. Blocking methods execute &lt;code&gt;synchronously&lt;/code&gt; and non-blocking methods execute &lt;code&gt;asynchronously&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Blocking
const fs = require(&#39;fs&#39;);
const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read
console.log(data);
moreWork(); // will run after console.log

// Non-blocking
const fs = require(&#39;fs&#39;);
fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {
  if (err) throw err;
  console.log(data);
});
moreWork(); // will run before console.log
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;What is difference between promises and async-await in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;1. Promises&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;A promise is used to handle the asynchronous result of an operation. JavaScript is designed to not wait for an asynchronous block of code to completely execute before other synchronous parts of the code can run. With Promises, we can defer the execution of a code block until an async request is completed. This way, other operations can keep running without interruption.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;States of Promises:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Pending&lt;/code&gt;: Initial State, before the Promise succeeds or fails.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Resolved&lt;/code&gt;: Completed Promise&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Rejected&lt;/code&gt;: Failed Promise, throw an error&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function logFetch(url) {
  return fetch(url)
    .then(response =&amp;gt; {
      console.log(response);
    })
    .catch(err =&amp;gt; {
      console.error(&#39;fetch failed&#39;, err);
    });
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;2. Async-Await&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;Await&lt;/code&gt; is basically syntactic sugar for &lt;strong&gt;Promises&lt;/strong&gt;. It makes asynchronous code look more like synchronous/procedural code, which is easier for humans to understand.&lt;/p&gt; 
&lt;p&gt;Putting the keyword &lt;code&gt;async&lt;/code&gt; before a function tells the function to return a Promise. If the code returns something that is not a &lt;code&gt;Promise&lt;/code&gt;, then JavaScript automatically wraps it into a resolved promise with that value. The &lt;code&gt;await&lt;/code&gt; keyword simply makes JavaScript wait until that &lt;code&gt;Promise&lt;/code&gt; settles and then returns its result.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function logFetch(url) {
  try {
    const response = await fetch(url);
    console.log(response);
  }
  catch (err) {
    console.log(&#39;fetch failed&#39;, err);
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to use JSON Web Token (JWT) for authentication in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;JSON Web Token (JWT) is an open standard that defines a compact and self-contained way of securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.&lt;/p&gt; 
&lt;p&gt;There are some advantages of using JWT for authorization:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Purely stateless. No additional server or infra required to store session information.&lt;/li&gt; 
 &lt;li&gt;It can be easily shared among services.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;JSON Web Tokens consist of three parts separated by dots (.), which are:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jwt.sign(payload, secretOrPrivateKey, [options, callback])
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt; - Consists of two parts: the type of token (i.e., JWT) and the signing algorithm (i.e., HS512)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Payload&lt;/strong&gt; - Contains the claims that provide information about a user who has been authenticated along with other information such as token expiration time.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt; - Final part of a token that wraps in the encoded header and payload, along with the algorithm and a secret&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install jsonwebtoken bcryptjs --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: AuthController.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var express = require(&#39;express&#39;);
var router = express.Router();
var bodyParser = require(&#39;body-parser&#39;);
var User = require(&#39;../user/User&#39;);

var jwt = require(&#39;jsonwebtoken&#39;);
var bcrypt = require(&#39;bcryptjs&#39;);
var config = require(&#39;../config&#39;);


router.use(bodyParser.urlencoded({ extended: false }));
router.use(bodyParser.json());

router.post(&#39;/register&#39;, function(req, res) {
  
  var hashedPassword = bcrypt.hashSync(req.body.password, 8);
  
  User.create({
    name : req.body.name,
    email : req.body.email,
    password : hashedPassword
  },
  function (err, user) {
    if (err) return res.status(500).send(&quot;There was a problem registering the user.&quot;)
    // create a token
    var token = jwt.sign({ id: user._id }, config.secret, {
      expiresIn: 86400 // expires in 24 hours
    });
    res.status(200).send({ auth: true, token: token });
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;config.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// config.js
module.exports = {
  &#39;secret&#39;: &#39;supersecret&#39;
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;jwt.sign()&lt;/code&gt; method takes a payload and the secret key defined in &lt;code&gt;config.js&lt;/code&gt; as parameters. It creates a unique string of characters representing the payload. In our case, the payload is an object containing only the id of the user.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.npmjs.com/package/jsonwebtoken&quot;&gt;https://www.npmjs.com/package/jsonwebtoken&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to build a microservices architecture with Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Microservices&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Microservices are a style of &lt;strong&gt;service-oriented architecture&lt;/strong&gt; (SOA) where the app is structured on an assembly of interconnected services. With microservices, the application architecture is built with lightweight protocols. The services are finely seeded in the architecture. Microservices disintegrate the app into smaller services and enable improved modularity.&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/monolithic-and-microservices-architecture.jpg&quot; alt=&quot;Microservices&quot; width=&quot;400px&quot;&gt; &lt;/p&gt; 
&lt;p&gt;There are few things worth emphasizing about the superiority of microservices, and distributed systems generally, over monolithic architecture:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Modularity ‚Äî responsibility for specific operations is assigned to separate pieces of the application&lt;/li&gt; 
 &lt;li&gt;Uniformity ‚Äî microservices interfaces (API endpoints) consist of a base URI identifying a data object and standard HTTP methods (GET, POST, PUT, PATCH and DELETE) used to manipulate the object&lt;/li&gt; 
 &lt;li&gt;Robustness ‚Äî component failures cause only the absence or reduction of a specific unit of functionality&lt;/li&gt; 
 &lt;li&gt;Maintainability ‚Äî system components can be modified and deployed independently&lt;/li&gt; 
 &lt;li&gt;Scalability ‚Äî instances of a service can be added or removed to respond to changes in demand.&lt;/li&gt; 
 &lt;li&gt;Availability ‚Äî new features can be added to the system while maintaining 100% availability.&lt;/li&gt; 
 &lt;li&gt;Testability ‚Äî new solutions can be tested directly in the production environment by implementing them for restricted segments of users to see how they behave in real life.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Creating Microservices with Node.js&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Step 01: Creating a Server to Accept Requests&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;This file is creating our server and assigns routes to process all requests.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//  server.js

const express = require(&#39;express&#39;)
const app = express();
const port = process.env.PORT || 3000;

const routes = require(&#39;./api/routes&#39;);
routes(app);
app.listen(port, function() {
   console.log(&#39;Server started on port: &#39; + port);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 02: Defining the routes&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The next step is to define the routes for the microservices and then assign each to a target in the controller. We have two endpoints. One endpoint called &quot;about&quot; that returns information about the application. And a &quot;distance&quot; endpoint that includes two path parameters, both Zip Codes of the Lego store. This endpoint returns the distance, in miles, between these two Zip Codes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const controller = require(&#39;./controller&#39;);

module.exports = function(app) {
   app.route(&#39;/about&#39;)
       .get(controller.about);
   app.route(&#39;/distance/:zipcode1/:zipcode2&#39;)
       .get(controller.getDistance);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Step 03: Adding Controller Logic&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Within the controller file, we are going to create a controller object with two properties. Those properties are the functions to handle the requests we defined in the routes module.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var properties = require(&#39;../package.json&#39;)
var distance = require(&#39;../service/distance&#39;);

var controllers = {
   about: function(req, res) {
       var aboutInfo = {
           name: properties.name,
           version: properties.version
       }
       res.json(aboutInfo);
   },
   getDistance: function(req, res) {
           distance.find(req, res, function(err, dist) {
               if (err)
                   res.send(err);
               res.json(dist);
           });
       },
};

module.exports = controllers;
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to use Q promise in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;A promise is an object that represents the return value or the thrown exception that the function may eventually provide. A promise can also be used as a proxy for a remote object to overcome latency.&lt;/p&gt; 
&lt;p&gt;Promise is relatively an easy implementation for asynchronous operation. The promise object returned from the function represents an operation which is not completed yet, but it guarantees to the caller of the operation that the operation will be completed in future.&lt;/p&gt; 
&lt;p&gt;Promise has the following states:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Pending&lt;/strong&gt; - asynchronous operation is not yet completed.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Fulfilled&lt;/strong&gt; - asynchronous operation is completed successfully.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Rejected&lt;/strong&gt; - asynchronous operation is terminated with an error.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Settled&lt;/strong&gt; - asynchronous operation is either fulfilled or rejected.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Callback&lt;/strong&gt; - function is executed if the promise is executed with value.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Errback&lt;/strong&gt; - function is executed if the promise is rejected.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;Moving to Promises from Callback&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;On the first pass, promises can mitigate the &lt;strong&gt;Pyramid of Doom&lt;/strong&gt;: the situation where code marches to the right faster than it marches forward.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;step1(function (value1) {
    step2(value1, function(value2) {
        step3(value2, function(value3) {
            step4(value3, function(value4) {
                // Do something with value4
            });
        });
    });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With a promise library, it can flatten the pyramid.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Q.fcall(promisedStep1)
.then(promisedStep2)
.then(promisedStep3)
.then(promisedStep4)
.then(function (value4) {
    // Do something with value4
})
.catch(function (error) {
    // Handle any error from all above steps
})
.done();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.npmjs.com/package/q&quot;&gt;https://www.npmjs.com/package/q&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to implement Memcached in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Memcached&lt;/strong&gt; is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. Memcached is free and open-source software, licensed under the Revised BSD licence. Memcached runs on Unix-like operating systems (at least LINUX and OS X) and on Microsoft windows.&lt;/p&gt; 
&lt;p&gt;We can store data to memcached server in key pair format. So whenever any request come from the app can be matched with memcached server without any query from mysql/Nosql server. This increases the performance of the application.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install memcached
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Setting up the client&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The constructor of the memcached client take 2 different arguments server locations and options. Syntax:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;var Memcached = require(&#39;memcached&#39;);
var memcached = new Memcached(Server locations, options);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Example usage&lt;/strong&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var Memcached = require(&#39;memcached&#39;);
// all global configurations should be applied to the .config object of the Client.
Memcached.config.poolSize = 25;

var memcached = new Memcached(&#39;localhost:11211&#39;, {retries:10,retry:10000,remove:true,failOverServers:[&#39;192.168.0.103:11211&#39;]});
&lt;/code&gt;&lt;/pre&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.npmjs.com/package/memcached&quot;&gt;https://www.npmjs.com/package/memcached&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h2&gt;Q. &lt;em&gt;&lt;strong&gt;How to generate and verify checksum of the given string in Nodejs&lt;/strong&gt;&lt;/em&gt;&lt;/h2&gt; 
&lt;p&gt;The &lt;strong&gt;checksum&lt;/strong&gt; (aka &lt;strong&gt;hash sum&lt;/strong&gt;) calculation is a one-way process of mapping an extensive data set of variable length (e.g., message, file), to a smaller data set of a fixed length (hash). The length depends on a hashing algorithm.&lt;/p&gt; 
&lt;p&gt;For the checksum generation, we can use node &lt;code&gt;crypto()&lt;/code&gt; module. The module uses &lt;code&gt;createHash(algorithm)&lt;/code&gt; to create a checksum (hash) generator. The algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const crypto = require(&#39;crypto&#39;);

// To get a list of all available hash algorithms
crypto.getHashes() // [ &#39;md5&#39;, &#39;sha1&#39;, &#39;sha3-256&#39;, ... ]

  
// Create hash of SHA1 type
const key = &quot;MY_SECRET_KEY&quot;;


// &#39;digest&#39; is the output of hash function containing  
// only hexadecimal digits
hashPwd = crypto.createHash(&#39;sha1&#39;).update(key).digest(&#39;hex&#39;);
  
console.log(hashPwd); //ef5225a03e4f9cc953ab3c4dd41f5c4db7dc2e5b
&lt;/code&gt;&lt;/pre&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;Is it possible to use &quot;Class&quot; in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;Explain Error Handling approaches in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How would you handle errors for async code in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;What are the use cases for the Node.js &quot;vm&quot; core module?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;Explain the concept of Domain in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;What is Node-API (N-API)?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;Why Node.js is a single threaded language?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to use locale (i18n) in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;What are the types of memory leaks in node.js&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to implement a Sleep function?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How does the cluster load balance work in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;What is daemon process? how to implement it in node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to synchronize data between multiple clients on node.js server?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How do you convert an existing callback API to promises?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How would you scale Node application?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How to solve &quot;Process out of Memory Exception&quot; in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;How does the cluster module work? What is the difference between it and a load balancer?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;h4&gt;Q. &lt;em&gt;&lt;strong&gt;Why do we need C++ Addons in Node.js?&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt; 
&lt;div align=&quot;right&quot;&gt; 
 &lt;b&gt;&lt;a href=&quot;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#&quot;&gt;‚Ü• back to top&lt;/a&gt;&lt;/b&gt; 
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>validatorjs/validator.js</title>
      <link>https://github.com/validatorjs/validator.js</link>
      <description>&lt;p&gt;String validation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;validator.js&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/validator&quot;&gt;&lt;img src=&quot;http://img.shields.io/npm/v/validator.svg?sanitize=true&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/validatorjs/validator.js/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/validatorjs/validator.js/workflows/CI/badge.svg?branch=master&quot; alt=&quot;CI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/validatorjs/validator.js&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/validatorjs/validator.js/branch/master/graph/badge.svg?sanitize=true&quot; alt=&quot;Coverage&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://npmjs.org/package/validator&quot;&gt;&lt;img src=&quot;http://img.shields.io/npm/dm/validator.svg?sanitize=true&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/validatorjs/validator.js/master/#backers&quot;&gt;&lt;img src=&quot;https://opencollective.com/validatorjs/backers/badge.svg?sanitize=true&quot; alt=&quot;Backers on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/validatorjs/validator.js/master/#sponsors&quot;&gt;&lt;img src=&quot;https://opencollective.com/validatorjs/sponsors/badge.svg?sanitize=true&quot; alt=&quot;Sponsors on Open Collective&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/validatorjs/community&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/validatorjs/community.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;A library of string validators and sanitizers.&lt;/p&gt; 
&lt;h2&gt;Strings only&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;This library validates and sanitizes strings only.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you&#39;re not sure if your input is a string, coerce it using &lt;code&gt;input + &#39;&#39;&lt;/code&gt;. Passing anything other than a string will result in an error.&lt;/p&gt; 
&lt;h2&gt;Installation and Usage&lt;/h2&gt; 
&lt;h3&gt;Server-side usage&lt;/h3&gt; 
&lt;p&gt;Install the library with &lt;code&gt;npm install validator&lt;/code&gt;&lt;/p&gt; 
&lt;h4&gt;No ES6&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var validator = require(&#39;validator&#39;);

validator.isEmail(&#39;foo@bar.com&#39;); //=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;ES6&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import validator from &#39;validator&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or, import only a subset of the library:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import isEmail from &#39;validator/lib/isEmail&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Tree-shakeable ES imports&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import isEmail from &#39;validator/es/lib/isEmail&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Client-side usage&lt;/h3&gt; 
&lt;p&gt;The library can be loaded either as a standalone script, or through an &lt;a href=&quot;http://requirejs.org/docs/whyamd.html&quot;&gt;AMD&lt;/a&gt;-compatible loader&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;validator.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
  validator.isEmail(&#39;foo@bar.com&#39;); //=&amp;gt; true
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The library can also be installed through &lt;a href=&quot;http://bower.io/&quot;&gt;bower&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower install validator-js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;CDN&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://unpkg.com/validator@latest/validator.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/validatorjs#backer&quot;&gt;Become a backer&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://opencollective.com/validatorjs#sponsor&quot;&gt;Become a sponsor&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Thank you to the people who have already contributed:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/validatorjs/validator.js/graphs/contributors&quot;&gt;&lt;img src=&quot;https://opencollective.com/validatorjs/contributors.svg?width=890&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Validators&lt;/h2&gt; 
&lt;p&gt;Here is a list of the validators currently available.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Validator&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;contains(str, seed [, options ])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains the seed.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object that defaults to &lt;code&gt;{ ignoreCase: false, minOccurrences: 1 }&lt;/code&gt;.&lt;br&gt;Options: &lt;br&gt; &lt;code&gt;ignoreCase&lt;/code&gt;: Ignore case when doing comparison, default false&lt;br&gt;&lt;code&gt;minOccurences&lt;/code&gt;: Minimum number of occurrences for the seed in the string. Defaults to 1.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;equals(str, comparison)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string matches the comparison.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isAfter(str [, date])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a date that&#39;s after the specified date (defaults to now).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isAlpha(str [, locale, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains only letters (a-zA-Z).&lt;br&gt;&lt;br&gt;Locale is one of &lt;code&gt;[&#39;ar&#39;, &#39;ar-AE&#39;, &#39;ar-BH&#39;, &#39;ar-DZ&#39;, &#39;ar-EG&#39;, &#39;ar-IQ&#39;, &#39;ar-JO&#39;, &#39;ar-KW&#39;, &#39;ar-LB&#39;, &#39;ar-LY&#39;, &#39;ar-MA&#39;, &#39;ar-QA&#39;, &#39;ar-QM&#39;, &#39;ar-SA&#39;, &#39;ar-SD&#39;, &#39;ar-SY&#39;, &#39;ar-TN&#39;, &#39;ar-YE&#39;, &#39;bg-BG&#39;, &#39;cs-CZ&#39;, &#39;da-DK&#39;, &#39;de-DE&#39;, &#39;el-GR&#39;, &#39;en-AU&#39;, &#39;en-GB&#39;, &#39;en-HK&#39;, &#39;en-IN&#39;, &#39;en-NZ&#39;, &#39;en-US&#39;, &#39;en-ZA&#39;, &#39;en-ZM&#39;, &#39;es-ES&#39;, &#39;fa-IR&#39;, &#39;fi-FI&#39;, &#39;fr-CA&#39;, &#39;fr-FR&#39;, &#39;he&#39;, &#39;hi-IN&#39;, &#39;hu-HU&#39;, &#39;it-IT&#39;, &#39;ku-IQ&#39;, &#39;nb-NO&#39;, &#39;nl-NL&#39;, &#39;nn-NO&#39;, &#39;pl-PL&#39;, &#39;pt-BR&#39;, &#39;pt-PT&#39;, &#39;ru-RU&#39;, &#39;sl-SI&#39;, &#39;sk-SK&#39;, &#39;sr-RS&#39;, &#39;sr-RS@latin&#39;, &#39;sv-SE&#39;, &#39;tr-TR&#39;, &#39;uk-UA&#39;]&lt;/code&gt;) and defaults to &lt;code&gt;en-US&lt;/code&gt;. Locale list is &lt;code&gt;validator.isAlphaLocales&lt;/code&gt;. options is an optional object that can be supplied with the following key(s): ignore which can either be a String or RegExp of characters to be ignored e.g. &quot; -&quot; will ignore spaces and -&#39;s.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isAlphanumeric(str [, locale, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains only letters and numbers (a-zA-Z0-9).&lt;br&gt;&lt;br&gt;Locale is one of &lt;code&gt;[&#39;ar&#39;, &#39;ar-AE&#39;, &#39;ar-BH&#39;, &#39;ar-DZ&#39;, &#39;ar-EG&#39;, &#39;ar-IQ&#39;, &#39;ar-JO&#39;, &#39;ar-KW&#39;, &#39;ar-LB&#39;, &#39;ar-LY&#39;, &#39;ar-MA&#39;, &#39;ar-QA&#39;, &#39;ar-QM&#39;, &#39;ar-SA&#39;, &#39;ar-SD&#39;, &#39;ar-SY&#39;, &#39;ar-TN&#39;, &#39;ar-YE&#39;, &#39;bg-BG&#39;, &#39;cs-CZ&#39;, &#39;da-DK&#39;, &#39;de-DE&#39;, &#39;el-GR&#39;, &#39;en-AU&#39;, &#39;en-GB&#39;, &#39;en-HK&#39;, &#39;en-IN&#39;, &#39;en-NZ&#39;, &#39;en-US&#39;, &#39;en-ZA&#39;, &#39;en-ZM&#39;, &#39;es-ES&#39;, &#39;fa-IR&#39;, &#39;fi-FI&#39;, &#39;fr-CA&#39;, &#39;fr-FR&#39;, &#39;he&#39;, &#39;hi-IN&#39;, &#39;hu-HU&#39;, &#39;it-IT&#39;, &#39;ku-IQ&#39;, &#39;nb-NO&#39;, &#39;nl-NL&#39;, &#39;nn-NO&#39;, &#39;pl-PL&#39;, &#39;pt-BR&#39;, &#39;pt-PT&#39;, &#39;ru-RU&#39;, &#39;sl-SI&#39;, &#39;sk-SK&#39;, &#39;sr-RS&#39;, &#39;sr-RS@latin&#39;, &#39;sv-SE&#39;, &#39;tr-TR&#39;, &#39;uk-UA&#39;]&lt;/code&gt;) and defaults to &lt;code&gt;en-US&lt;/code&gt;. Locale list is &lt;code&gt;validator.isAlphanumericLocales&lt;/code&gt;. options is an optional object that can be supplied with the following key(s): ignore which can either be a String or RegExp of characters to be ignored e.g. &quot; -&quot; will ignore spaces and -&#39;s.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isAscii(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains ASCII chars only.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isBase32(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if a string is base32 encoded.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isBase58(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if a string is base58 encoded.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isBase64(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if a string is base64 encoded. options is optional and defaults to &lt;code&gt;{urlSafe: false}&lt;/code&gt;&lt;br&gt; when &lt;code&gt;urlSafe&lt;/code&gt; is true it tests the given base64 encoded string is &lt;a href=&quot;https://base64.guru/standards/base64url&quot;&gt;url safe&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isBefore(str [, date])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a date that&#39;s before the specified date.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isBIC(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if a string is a BIC (Bank Identification Code) or SWIFT code.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isBoolean(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if a string is a boolean.&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{ loose: false }&lt;/code&gt;. If loose is is set to false, the validator will strictly match [&#39;true&#39;, &#39;false&#39;, &#39;0&#39;, &#39;1&#39;]. If loose is set to true, the validator will also match &#39;yes&#39;, &#39;no&#39;, and will match a valid boolean string of any case. (eg: [&#39;true&#39;, &#39;True&#39;, &#39;TRUE&#39;]).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isBtcAddress(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid BTC address.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isByteLength(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string&#39;s length (in UTF-8 bytes) falls in a range.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{min:0, max: undefined}&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isCreditCard(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a credit card.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isCurrency(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid currency amount.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{symbol: &#39;$&#39;, require_symbol: false, allow_space_after_symbol: false, symbol_after_digits: false, allow_negatives: true, parens_for_negatives: false, negative_sign_before_digits: false, negative_sign_after_digits: false, allow_negative_sign_placeholder: false, thousands_separator: &#39;,&#39;, decimal_separator: &#39;.&#39;, allow_decimal: true, require_decimal: false, digits_after_decimal: [2], allow_space_after_digits: false}&lt;/code&gt;.&lt;br&gt;&lt;strong&gt;Note:&lt;/strong&gt; The array &lt;code&gt;digits_after_decimal&lt;/code&gt; is filled with the exact number of digits allowed not a range, for example a range 1 to 3 will be given as [1, 2, 3].&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isDataURI(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs&quot;&gt;data uri format&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isDate(input [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Check if the input is a valid date. e.g. [&lt;code&gt;2002-07-15&lt;/code&gt;, new Date()].&lt;br&gt;&lt;br&gt; &lt;code&gt;options&lt;/code&gt; is an object which can contain the keys &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;strictMode&lt;/code&gt; and/or &lt;code&gt;delimiters&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;format&lt;/code&gt; is a string and defaults to &lt;code&gt;YYYY/MM/DD&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;code&gt;strictMode&lt;/code&gt; is a boolean and defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;strictMode&lt;/code&gt; is set to true, the validator will reject inputs different from &lt;code&gt;format&lt;/code&gt;.&lt;br&gt;&lt;br&gt; &lt;code&gt;delimiters&lt;/code&gt; is an array of allowed date delimiters and defaults to &lt;code&gt;[&#39;/&#39;, &#39;-&#39;]&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isDecimal(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string represents a decimal number, such as 0.1, .3, 1.1, 1.00003, 4.0, etc.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{force_decimal: false, decimal_digits: &#39;1,&#39;, locale: &#39;en-US&#39;}&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;locale&lt;/code&gt; determine the decimal separator and is one of &lt;code&gt;[&#39;ar&#39;, &#39;ar-AE&#39;, &#39;ar-BH&#39;, &#39;ar-DZ&#39;, &#39;ar-EG&#39;, &#39;ar-IQ&#39;, &#39;ar-JO&#39;, &#39;ar-KW&#39;, &#39;ar-LB&#39;, &#39;ar-LY&#39;, &#39;ar-MA&#39;, &#39;ar-QA&#39;, &#39;ar-QM&#39;, &#39;ar-SA&#39;, &#39;ar-SD&#39;, &#39;ar-SY&#39;, &#39;ar-TN&#39;, &#39;ar-YE&#39;, &#39;bg-BG&#39;, &#39;cs-CZ&#39;, &#39;da-DK&#39;, &#39;de-DE&#39;, &#39;el-GR&#39;, &#39;en-AU&#39;, &#39;en-GB&#39;, &#39;en-HK&#39;, &#39;en-IN&#39;, &#39;en-NZ&#39;, &#39;en-US&#39;, &#39;en-ZA&#39;, &#39;en-ZM&#39;, &#39;es-ES&#39;, &#39;fa&#39;, &#39;fa-AF&#39;, &#39;fa-IR&#39;, &#39;fr-FR&#39;, &#39;fr-CA&#39;, &#39;hu-HU&#39;, &#39;id-ID&#39;, &#39;it-IT&#39;, &#39;ku-IQ&#39;, &#39;nb-NO&#39;, &#39;nl-NL&#39;, &#39;nn-NO&#39;, &#39;pl-PL&#39;, &#39;pl-Pl&#39;, &#39;pt-BR&#39;, &#39;pt-PT&#39;, &#39;ru-RU&#39;, &#39;sl-SI&#39;, &#39;sr-RS&#39;, &#39;sr-RS@latin&#39;, &#39;sv-SE&#39;, &#39;tr-TR&#39;, &#39;uk-UA&#39;, &#39;vi-VN&#39;]&lt;/code&gt;.&lt;br&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;decimal_digits&lt;/code&gt; is given as a range like &#39;1,3&#39;, a specific value like &#39;3&#39; or min like &#39;1,&#39;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isDivisibleBy(str, number)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a number that&#39;s divisible by another.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isEAN(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an EAN (European Article Number).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isEmail(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an email.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{ allow_display_name: false, require_display_name: false, allow_utf8_local_part: true, require_tld: true, allow_ip_domain: false, domain_specific_validation: false, blacklisted_chars: &#39;&#39;, host_blacklist: [] }&lt;/code&gt;. If &lt;code&gt;allow_display_name&lt;/code&gt; is set to true, the validator will also match &lt;code&gt;Display Name &amp;lt;email-address&amp;gt;&lt;/code&gt;. If &lt;code&gt;require_display_name&lt;/code&gt; is set to true, the validator will reject strings without the format &lt;code&gt;Display Name &amp;lt;email-address&amp;gt;&lt;/code&gt;. If &lt;code&gt;allow_utf8_local_part&lt;/code&gt; is set to false, the validator will not allow any non-English UTF8 character in email address&#39; local part. If &lt;code&gt;require_tld&lt;/code&gt; is set to false, e-mail addresses without having TLD in their domain will also be matched. If &lt;code&gt;ignore_max_length&lt;/code&gt; is set to true, the validator will not check for the standard max length of an email. If &lt;code&gt;allow_ip_domain&lt;/code&gt; is set to true, the validator will allow IP addresses in the host part. If &lt;code&gt;domain_specific_validation&lt;/code&gt; is true, some additional validation will be enabled, e.g. disallowing certain syntactically valid email addresses that are rejected by GMail. If &lt;code&gt;blacklisted_chars&lt;/code&gt; receives a string, then the validator will reject emails that include any of the characters in the string, in the name part. If &lt;code&gt;host_blacklist&lt;/code&gt; is set to an array of strings and the part of the email after the &lt;code&gt;@&lt;/code&gt; symbol matches one of the strings defined in it, the validation fails.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isEmpty(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string has a length of zero.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{ ignore_whitespace:false }&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isEthereumAddress(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an &lt;a href=&quot;https://ethereum.org/&quot;&gt;Ethereum&lt;/a&gt; address using basic regex. Does not validate address checksums.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isFloat(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a float.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which can contain the keys &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, and/or &lt;code&gt;lt&lt;/code&gt; to validate the float is within boundaries (e.g. &lt;code&gt;{ min: 7.22, max: 9.55 }&lt;/code&gt;) it also has &lt;code&gt;locale&lt;/code&gt; as an option.&lt;br&gt;&lt;br&gt;&lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are equivalent to &#39;greater or equal&#39; and &#39;less or equal&#39;, respectively while &lt;code&gt;gt&lt;/code&gt; and &lt;code&gt;lt&lt;/code&gt; are their strict counterparts.&lt;br&gt;&lt;br&gt;&lt;code&gt;locale&lt;/code&gt; determine the decimal separator and is one of &lt;code&gt;[&#39;ar&#39;, &#39;ar-AE&#39;, &#39;ar-BH&#39;, &#39;ar-DZ&#39;, &#39;ar-EG&#39;, &#39;ar-IQ&#39;, &#39;ar-JO&#39;, &#39;ar-KW&#39;, &#39;ar-LB&#39;, &#39;ar-LY&#39;, &#39;ar-MA&#39;, &#39;ar-QA&#39;, &#39;ar-QM&#39;, &#39;ar-SA&#39;, &#39;ar-SD&#39;, &#39;ar-SY&#39;, &#39;ar-TN&#39;, &#39;ar-YE&#39;, &#39;bg-BG&#39;, &#39;cs-CZ&#39;, &#39;da-DK&#39;, &#39;de-DE&#39;, &#39;en-AU&#39;, &#39;en-GB&#39;, &#39;en-HK&#39;, &#39;en-IN&#39;, &#39;en-NZ&#39;, &#39;en-US&#39;, &#39;en-ZA&#39;, &#39;en-ZM&#39;, &#39;es-ES&#39;, &#39;fr-CA&#39;, &#39;fr-FR&#39;, &#39;hu-HU&#39;, &#39;it-IT&#39;, &#39;nb-NO&#39;, &#39;nl-NL&#39;, &#39;nn-NO&#39;, &#39;pl-PL&#39;, &#39;pt-BR&#39;, &#39;pt-PT&#39;, &#39;ru-RU&#39;, &#39;sl-SI&#39;, &#39;sr-RS&#39;, &#39;sr-RS@latin&#39;, &#39;sv-SE&#39;, &#39;tr-TR&#39;, &#39;uk-UA&#39;]&lt;/code&gt;. Locale list is &lt;code&gt;validator.isFloatLocales&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isFQDN(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a fully qualified domain name (e.g. domain.com).&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{ require_tld: true, allow_underscores: false, allow_trailing_dot: false, allow_numeric_tld: false, allow_wildcard: false }&lt;/code&gt;. If &lt;code&gt;allow_wildcard&lt;/code&gt; is set to true, the validator will allow domain starting with &lt;code&gt;*.&lt;/code&gt; (e.g. &lt;code&gt;*.example.com&lt;/code&gt; or &lt;code&gt;*.shop.example.com&lt;/code&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isFullWidth(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains any full-width chars.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isHalfWidth(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains any half-width chars.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isHash(str, algorithm)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a hash of type algorithm.&lt;br&gt;&lt;br&gt;Algorithm is one of &lt;code&gt;[&#39;md4&#39;, &#39;md5&#39;, &#39;sha1&#39;, &#39;sha256&#39;, &#39;sha384&#39;, &#39;sha512&#39;, &#39;ripemd128&#39;, &#39;ripemd160&#39;, &#39;tiger128&#39;, &#39;tiger160&#39;, &#39;tiger192&#39;, &#39;crc32&#39;, &#39;crc32b&#39;]&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isHexadecimal(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a hexadecimal number.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isHexColor(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a hexadecimal color.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isHSL(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an HSL (hue, saturation, lightness, optional alpha) color based on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value&quot;&gt;CSS Colors Level 4 specification&lt;/a&gt;.&lt;br&gt;&lt;br&gt;Comma-separated format supported. Space-separated format supported with the exception of a few edge cases (ex: &lt;code&gt;hsl(200grad+.1%62%/1)&lt;/code&gt;).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isIBAN(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if a string is a IBAN (International Bank Account Number).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isIdentityCard(str [, locale])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid identity card code.&lt;br&gt;&lt;br&gt;&lt;code&gt;locale&lt;/code&gt; is one of &lt;code&gt;[&#39;LK&#39;, &#39;PL&#39;, &#39;ES&#39;, &#39;FI&#39;, &#39;IN&#39;, &#39;IT&#39;, &#39;IR&#39;, &#39;MZ&#39;, &#39;NO&#39;, &#39;TH&#39;, &#39;zh-TW&#39;, &#39;he-IL&#39;, &#39;ar-LY&#39;, &#39;ar-TN&#39;, &#39;zh-CN&#39;]&lt;/code&gt; OR &lt;code&gt;&#39;any&#39;&lt;/code&gt;. If &#39;any&#39; is used, function will check if any of the locals match.&lt;br&gt;&lt;br&gt;Defaults to &#39;any&#39;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isIMEI(str [, options]))&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid IMEI number. Imei should be of format &lt;code&gt;###############&lt;/code&gt; or &lt;code&gt;##-######-######-#&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which can contain the keys &lt;code&gt;allow_hyphens&lt;/code&gt;. Defaults to first format . If allow_hyphens is set to true, the validator will validate the second format.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isIn(str, values)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is in a array of allowed values.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isInt(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an integer.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which can contain the keys &lt;code&gt;min&lt;/code&gt; and/or &lt;code&gt;max&lt;/code&gt; to check the integer is within boundaries (e.g. &lt;code&gt;{ min: 10, max: 99 }&lt;/code&gt;). &lt;code&gt;options&lt;/code&gt; can also contain the key &lt;code&gt;allow_leading_zeroes&lt;/code&gt;, which when set to false will disallow integer values with leading zeroes (e.g. &lt;code&gt;{ allow_leading_zeroes: false }&lt;/code&gt;). Finally, &lt;code&gt;options&lt;/code&gt; can contain the keys &lt;code&gt;gt&lt;/code&gt; and/or &lt;code&gt;lt&lt;/code&gt; which will enforce integers being greater than or less than, respectively, the value provided (e.g. &lt;code&gt;{gt: 1, lt: 4}&lt;/code&gt; for a number between 1 and 4).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isIP(str [, version])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an IP (version 4 or 6).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isIPRange(str [, version])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an IP Range (version 4 or 6).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isISBN(str [, version])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an ISBN (version 10 or 13).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isISIN(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Securities_Identification_Number&quot;&gt;ISIN&lt;/a&gt; (stock/security identifier).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isISO8601(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt; date. &lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{ strict: false, strictSeparator: false }&lt;/code&gt;. If &lt;code&gt;strict&lt;/code&gt; is true, date strings with invalid dates like &lt;code&gt;2009-02-29&lt;/code&gt; will be invalid. If &lt;code&gt;strictSeparator&lt;/code&gt; is true, date strings with date and time separated by anything other than a T will be invalid.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isISO31661Alpha2(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2&quot;&gt;ISO 3166-1 alpha-2&lt;/a&gt; officially assigned country code.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isISO31661Alpha3(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3&quot;&gt;ISO 3166-1 alpha-3&lt;/a&gt; officially assigned country code.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isISO4217(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; officially assigned currency code.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isISRC(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Standard_Recording_Code&quot;&gt;ISRC&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isISSN(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an &lt;a href=&quot;https://en.wikipedia.org/wiki/International_Standard_Serial_Number&quot;&gt;ISSN&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{ case_sensitive: false, require_hyphen: false }&lt;/code&gt;. If &lt;code&gt;case_sensitive&lt;/code&gt; is true, ISSNs with a lowercase &lt;code&gt;&#39;x&#39;&lt;/code&gt; as the check digit are rejected.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isJSON(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is valid JSON (note: uses JSON.parse).&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{ allow_primitives: false }&lt;/code&gt;. If &lt;code&gt;allow_primitives&lt;/code&gt; is true, the primitives &#39;true&#39;, &#39;false&#39; and &#39;null&#39; are accepted as valid JSON values.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isJWT(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is valid JWT token.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isLatLong(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid latitude-longitude coordinate in the format &lt;code&gt;lat,long&lt;/code&gt; or &lt;code&gt;lat, long&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object that defaults to &lt;code&gt;{ checkDMS: false }&lt;/code&gt;. Pass &lt;code&gt;checkDMS&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt; to validate DMS(degrees, minutes, and seconds) latitude-longitude format.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isLength(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string&#39;s length falls in a range.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{min:0, max: undefined}&lt;/code&gt;. Note: this function takes into account surrogate pairs.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isLicensePlate(str [, locale])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if string matches the format of a country&#39;s license plate.&lt;br&gt;&lt;br&gt;(locale is one of &lt;code&gt;[&#39;cs-CZ&#39;, &#39;de-DE&#39;, &#39;de-LI&#39;, &#39;fi-FI&#39;, pt-PT&#39;, &#39;sq-AL&#39;, &#39;pt-BR&#39;]&lt;/code&gt; or &lt;code&gt;any&lt;/code&gt;)&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isLocale(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a locale&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isLowercase(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is lowercase.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isMACAddress(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a MAC address.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{no_separators: false}&lt;/code&gt;. If &lt;code&gt;no_separators&lt;/code&gt; is true, the validator will allow MAC addresses without separators. Also, it allows the use of hyphens, spaces or dots e.g &#39;01 02 03 04 05 ab&#39;, &#39;01-02-03-04-05-ab&#39; or &#39;0102.0304.05ab&#39;. The options also allow a &lt;code&gt;eui&lt;/code&gt; property to specify if it needs to be validated against EUI-48 or EUI-64. The accepted values of &lt;code&gt;eui&lt;/code&gt; are: 48, 64.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isMagnetURI(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnet_URI_scheme&quot;&gt;magnet uri format&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isMD5(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a MD5 hash.&lt;br&gt;&lt;br&gt;Please note that you can also use the &lt;code&gt;isHash(str, &#39;md5&#39;)&lt;/code&gt; function. Keep in mind that MD5 has some collision weaknesses compared to other algorithms (e.g., SHA).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isMimeType(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string matches to a valid &lt;a href=&quot;https://en.wikipedia.org/wiki/Media_type&quot;&gt;MIME type&lt;/a&gt; format&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isMobilePhone(str [, locale [, options]])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a mobile phone number,&lt;br&gt;&lt;br&gt;(locale is either an array of locales (e.g &lt;code&gt;[&#39;sk-SK&#39;, &#39;sr-RS&#39;]&lt;/code&gt;) OR one of &lt;code&gt;[&#39;am-Am&#39;, &#39;ar-AE&#39;, &#39;ar-BH&#39;, &#39;ar-DZ&#39;, &#39;ar-EG&#39;, &#39;ar-IQ&#39;, ar-JO&#39;, &#39;ar-KW&#39;, &#39;ar-PS&#39;, &#39;ar-SA&#39;, &#39;ar-SY&#39;, &#39;ar-TN&#39;, &#39;az-AZ&#39;, &#39;az-LY&#39;, &#39;az-LB&#39;, &#39;bs-BA&#39;, &#39;be-BY&#39;, &#39;bg-BG&#39;, &#39;bn-BD&#39;, &#39;ca-AD&#39;, &#39;cs-CZ&#39;, &#39;da-DK&#39;, &#39;de-DE&#39;, &#39;de-AT&#39;, &#39;de-CH&#39;, &#39;de-LU&#39;, &#39;dv-MV&#39;, &#39;el-GR&#39;, &#39;en-AU&#39;, &#39;en-BM&#39;, &#39;en-BW&#39;, &#39;en-CA&#39;, &#39;en-GB&#39;, &#39;en-GG&#39;, &#39;en-GH&#39;, &#39;en-GY&#39;, &#39;en-HK&#39;, &#39;en-MO&#39;, &#39;en-IE&#39;, &#39;en-IN&#39;, &#39;en-KE&#39;, &#39;en-KI&#39;, &#39;en-MT&#39;, &#39;en-MU&#39;, &#39;en-NG&#39;, &#39;en-NZ&#39;, &#39;en-PK&#39;, &#39;en-PH&#39;, &#39;en-RW&#39;, &#39;en-SG&#39;, &#39;en-SL&#39;, &#39;en-UG&#39;, &#39;en-US&#39;, &#39;en-TZ&#39;, &#39;en-ZA&#39;, &#39;en-ZM&#39;, &#39;en-ZW&#39;, &#39;es-AR&#39;, &#39;es-BO&#39;, &#39;es-CL&#39;, &#39;es-CO&#39;, &#39;es-CR&#39;, &#39;es-CU&#39;, &#39;es-DO&#39;, &#39;es-HN&#39;, &#39;es-PE&#39;, &#39;es-EC&#39;, &#39;es-ES&#39;, &#39;es-MX&#39;, &#39;es-PA&#39;, &#39;es-PY&#39;, &#39;es-SV&#39;, &#39;es-UY&#39;, &#39;es-VE&#39;, &#39;et-EE&#39;, &#39;fa-IR&#39;, &#39;fi-FI&#39;, &#39;fj-FJ&#39;, &#39;fo-FO&#39;, &#39;fr-BE&#39;, &#39;fr-BF&#39;, &#39;fr-FR&#39;, &#39;fr-GF&#39;, &#39;fr-GP&#39;, &#39;fr-MQ&#39;, &#39;fr-PF&#39;, &#39;fr-RE&#39;, &#39;ga-IE&#39;, &#39;he-IL&#39;, &#39;hu-HU&#39;, &#39;id-ID&#39;, &#39;it-IT&#39;, &#39;it-SM&#39;, &#39;ja-JP&#39;, &#39;ka-GE&#39;, &#39;kk-KZ&#39;, &#39;kl-GL&#39;, &#39;ko-KR&#39;, &#39;lt-LT&#39;, &#39;ms-MY&#39;, &#39;my-MM&#39;, &#39;mz-MZ&#39;, nb-NO&#39;, &#39;ne-NP&#39;, &#39;nl-BE&#39;, &#39;nl-NL&#39;, &#39;nn-NO&#39;, &#39;pl-PL&#39;, &#39;pt-BR&#39;, &#39;pt-PT&#39;, &#39;pt-AO&#39;, &#39;ro-RO&#39;, &#39;ru-RU&#39;, &#39;si-LK&#39; &#39;sl-SI&#39;, &#39;sk-SK&#39;, &#39;sq-AL&#39;, &#39;sr-RS&#39;, &#39;sv-SE&#39;, &#39;tg-TJ&#39;, &#39;th-TH&#39;, &#39;tk-TM&#39;, &#39;tr-TR&#39;, &#39;uk-UA&#39;, &#39;uz-UZ&#39;, &#39;vi-VN&#39;, &#39;zh-CN&#39;, &#39;zh-HK&#39;, &#39;zh-MO&#39;, &#39;zh-TW&#39;, &#39;dz-BT&#39;]&lt;/code&gt; OR defaults to &#39;any&#39;. If &#39;any&#39; or a falsey value is used, function will check if any of the locales match).&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an optional object that can be supplied with the following keys: &lt;code&gt;strictMode&lt;/code&gt;, if this is set to &lt;code&gt;true&lt;/code&gt;, the mobile phone number must be supplied with the country code and therefore must start with &lt;code&gt;+&lt;/code&gt;. Locale list is &lt;code&gt;validator.isMobilePhoneLocales&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isMongoId(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid hex-encoded representation of a &lt;a href=&quot;http://docs.mongodb.org/manual/reference/object-id/&quot;&gt;MongoDB ObjectId&lt;/a&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isMultibyte(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains one or more multibyte chars.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isNumeric(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains only numbers.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{no_symbols: false}&lt;/code&gt; it also has locale as an option. If &lt;code&gt;no_symbols&lt;/code&gt; is true, the validator will reject numeric strings that feature a symbol (e.g. &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, or &lt;code&gt;.&lt;/code&gt;).&lt;br&gt;&lt;br&gt;&lt;code&gt;locale&lt;/code&gt; determine the decimal separator and is one of &lt;code&gt;[&#39;ar&#39;, &#39;ar-AE&#39;, &#39;ar-BH&#39;, &#39;ar-DZ&#39;, &#39;ar-EG&#39;, &#39;ar-IQ&#39;, &#39;ar-JO&#39;, &#39;ar-KW&#39;, &#39;ar-LB&#39;, &#39;ar-LY&#39;, &#39;ar-MA&#39;, &#39;ar-QA&#39;, &#39;ar-QM&#39;, &#39;ar-SA&#39;, &#39;ar-SD&#39;, &#39;ar-SY&#39;, &#39;ar-TN&#39;, &#39;ar-YE&#39;, &#39;bg-BG&#39;, &#39;cs-CZ&#39;, &#39;da-DK&#39;, &#39;de-DE&#39;, &#39;en-AU&#39;, &#39;en-GB&#39;, &#39;en-HK&#39;, &#39;en-IN&#39;, &#39;en-NZ&#39;, &#39;en-US&#39;, &#39;en-ZA&#39;, &#39;en-ZM&#39;, &#39;es-ES&#39;, &#39;fr-FR&#39;, &#39;fr-CA&#39;, &#39;hu-HU&#39;, &#39;it-IT&#39;, &#39;nb-NO&#39;, &#39;nl-NL&#39;, &#39;nn-NO&#39;, &#39;pl-PL&#39;, &#39;pt-BR&#39;, &#39;pt-PT&#39;, &#39;ru-RU&#39;, &#39;sl-SI&#39;, &#39;sr-RS&#39;, &#39;sr-RS@latin&#39;, &#39;sv-SE&#39;, &#39;tr-TR&#39;, &#39;uk-UA&#39;]&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isOctal(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid octal number.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isPassportNumber(str, countryCode)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid passport number.&lt;br&gt;&lt;br&gt;(countryCode is one of &lt;code&gt;[ &#39;AM&#39;, &#39;AR&#39;, &#39;AT&#39;, &#39;AU&#39;, &#39;BE&#39;, &#39;BG&#39;, &#39;BY&#39;, &#39;BR&#39;, &#39;CA&#39;, &#39;CH&#39;, &#39;CN&#39;, &#39;CY&#39;, &#39;CZ&#39;, &#39;DE&#39;, &#39;DK&#39;, &#39;DZ&#39;, &#39;EE&#39;, &#39;ES&#39;, &#39;FI&#39;, &#39;FR&#39;, &#39;GB&#39;, &#39;GR&#39;, &#39;HR&#39;, &#39;HU&#39;, &#39;IE&#39; &#39;IN&#39;, &#39;IR&#39;, &#39;ID&#39;, &#39;IS&#39;, &#39;IT&#39;, &#39;JP&#39;, &#39;KR&#39;, &#39;LT&#39;, &#39;LU&#39;, &#39;LV&#39;, &#39;LY&#39;, &#39;MT&#39;, &#39;MY&#39;, &#39;MZ&#39;, &#39;NL&#39;, &#39;PL&#39;, &#39;PT&#39;, &#39;RO&#39;, &#39;RU&#39;, &#39;SE&#39;, &#39;SL&#39;, &#39;SK&#39;, &#39;TR&#39;, &#39;UA&#39;, &#39;US&#39; ]&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isPort(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid port number.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isPostalCode(str, locale)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a postal code,&lt;br&gt;&lt;br&gt;(locale is one of &lt;code&gt;[ &#39;AD&#39;, &#39;AT&#39;, &#39;AU&#39;, &#39;AZ&#39;, &#39;BE&#39;, &#39;BG&#39;, &#39;BR&#39;, &#39;BY&#39;, &#39;CA&#39;, &#39;CH&#39;, &#39;CN&#39;, &#39;CZ&#39;, &#39;DE&#39;, &#39;DK&#39;, &#39;DO&#39;, &#39;DZ&#39;, &#39;EE&#39;, &#39;ES&#39;, &#39;FI&#39;, &#39;FR&#39;, &#39;GB&#39;, &#39;GR&#39;, &#39;HR&#39;, &#39;HT&#39;, &#39;HU&#39;, &#39;ID&#39;, &#39;IE&#39; &#39;IL&#39;, &#39;IN&#39;, &#39;IR&#39;, &#39;IS&#39;, &#39;IT&#39;, &#39;JP&#39;, &#39;KE&#39;, &#39;KR&#39;, &#39;LI&#39;, &#39;LK&#39;, &#39;LT&#39;, &#39;LU&#39;, &#39;LV&#39;, &#39;MT&#39;, &#39;MX&#39;, &#39;MY&#39;, &#39;NL&#39;, &#39;NO&#39;, &#39;NP&#39;, &#39;NZ&#39;, &#39;PL&#39;, &#39;PR&#39;, &#39;PT&#39;, &#39;RO&#39;, &#39;RU&#39;, &#39;SA&#39;, &#39;SE&#39;, &#39;SG&#39;, &#39;SI&#39;, &#39;TH&#39;, &#39;TN&#39;, &#39;TW&#39;, &#39;UA&#39;, &#39;US&#39;, &#39;ZA&#39;, &#39;ZM&#39; ]&lt;/code&gt; OR &#39;any&#39;. If &#39;any&#39; is used, function will check if any of the locals match. Locale list is &lt;code&gt;validator.isPostalCodeLocales&lt;/code&gt;.).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isRFC3339(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a valid &lt;a href=&quot;https://tools.ietf.org/html/rfc3339&quot;&gt;RFC 3339&lt;/a&gt; date.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isRgbColor(str [, includePercentValues])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a rgb or rgba color.&lt;br&gt;&lt;br&gt;&lt;code&gt;includePercentValues&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;. If you don&#39;t want to allow to set &lt;code&gt;rgb&lt;/code&gt; or &lt;code&gt;rgba&lt;/code&gt; values with percents, like &lt;code&gt;rgb(5%,5%,5%)&lt;/code&gt;, or &lt;code&gt;rgba(90%,90%,90%,.3)&lt;/code&gt;, then set it to false.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isSemVer(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a Semantic Versioning Specification (SemVer).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isSurrogatePair(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains any surrogate pairs chars.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isUppercase(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is uppercase.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isSlug&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Check if the string is of type slug. &lt;code&gt;Options&lt;/code&gt; allow a single hyphen between string. e.g. [&lt;code&gt;cn-cn&lt;/code&gt;, &lt;code&gt;cn-c-c&lt;/code&gt;]&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isStrongPassword(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Check if a password is strong or not. Allows for custom requirements or scoring rules. If &lt;code&gt;returnScore&lt;/code&gt; is true, then the function returns an integer score for the password rather than a boolean.&lt;br&gt;Default options: &lt;br&gt;&lt;code&gt;{ minLength: 8, minLowercase: 1, minUppercase: 1, minNumbers: 1, minSymbols: 1, returnScore: false, pointsPerUnique: 1, pointsPerRepeat: 0.5, pointsForContainingLower: 10, pointsForContainingUpper: 10, pointsForContainingNumber: 10, pointsForContainingSymbol: 10 }&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isTaxID(str, locale)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;Check if the given value is a valid Tax Identification Number. Default locale is &lt;code&gt;en-US&lt;/code&gt;.&lt;br&gt;&lt;br&gt;More info about exact TIN support can be found in &lt;code&gt;src/lib/isTaxID.js&lt;/code&gt;&lt;br&gt;&lt;br&gt;Supported locales: &lt;code&gt;[ &#39;bg-BG&#39;, &#39;cs-CZ&#39;, &#39;de-AT&#39;, &#39;de-DE&#39;, &#39;dk-DK&#39;, &#39;el-CY&#39;, &#39;el-GR&#39;, &#39;en-GB&#39;, &#39;en-IE&#39;, &#39;en-US&#39;, &#39;es-ES&#39;, &#39;et-EE&#39;, &#39;fi-FI&#39;, &#39;fr-BE&#39;, &#39;fr-FR&#39;, &#39;fr-LU&#39;, &#39;hr-HR&#39;, &#39;hu-HU&#39;, &#39;it-IT&#39;, &#39;lb-LU&#39;, &#39;lt-LT&#39;, &#39;lv-LV&#39; &#39;mt-MT&#39;, &#39;nl-BE&#39;, &#39;nl-NL&#39;, &#39;pl-PL&#39;, &#39;pt-BR&#39;, &#39;pt-PT&#39;, &#39;ro-RO&#39;, &#39;sk-SK&#39;, &#39;sl-SI&#39;, &#39;sv-SE&#39; ]&lt;/code&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isURL(str [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is an URL.&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object which defaults to &lt;code&gt;{ protocols: [&#39;http&#39;,&#39;https&#39;,&#39;ftp&#39;], require_tld: true, require_protocol: false, require_host: true, require_port: false, require_valid_protocol: true, allow_underscores: false, host_whitelist: false, host_blacklist: false, allow_trailing_dot: false, allow_protocol_relative_urls: false, allow_fragments: true, allow_query_components: true, disallow_auth: false, validate_length: true }&lt;/code&gt;.&lt;br&gt;&lt;br&gt;require_protocol - if set as true isURL will return false if protocol is not present in the URL.&lt;br&gt;require_valid_protocol - isURL will check if the URL&#39;s protocol is present in the protocols option.&lt;br&gt;protocols - valid protocols can be modified with this option.&lt;br&gt;require_host - if set as false isURL will not check if host is present in the URL.&lt;br&gt;require_port - if set as true isURL will check if port is present in the URL.&lt;br&gt;allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed.&lt;br&gt;allow_fragments - if set as false isURL will return false if fragments are present.&lt;br&gt;allow_query_components - if set as false isURL will return false if query components are present.&lt;br&gt;validate_length - if set as false isURL will skip string length validation (2083 characters is IE max URL length).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isUUID(str [, version])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string is a UUID (version 1, 2, 3, 4 or 5).&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isVariableWidth(str)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if the string contains a mixture of full and half-width chars.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isVAT(str, countryCode)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;checks that the string is a &lt;a href=&quot;https://en.wikipedia.org/wiki/VAT_identification_number&quot;&gt;valid VAT number&lt;/a&gt; if validation is available for the given country code matching &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2&quot;&gt;ISO 3166-1 alpha-2&lt;/a&gt;. &lt;br&gt;&lt;br&gt;Available country codes: &lt;code&gt;[ &#39;GB&#39;, &#39;IT&#39;,&#39;NL&#39; ]&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;isWhitelisted(str, chars)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;checks characters if they appear in the whitelist.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;matches(str, pattern [, modifiers])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;check if string matches the pattern.&lt;br&gt;&lt;br&gt;Either &lt;code&gt;matches(&#39;foo&#39;, /foo/i)&lt;/code&gt; or &lt;code&gt;matches(&#39;foo&#39;, &#39;foo&#39;, &#39;i&#39;)&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Sanitizers&lt;/h2&gt; 
&lt;p&gt;Here is a list of the sanitizers currently available.&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;Sanitizer&lt;/th&gt; 
   &lt;th&gt;Description&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;blacklist(input, chars)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;remove characters that appear in the blacklist. The characters are used in a RegExp and so you will need to escape some chars, e.g. &lt;code&gt;blacklist(input, &#39;\\[\\]&#39;)&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;escape(input)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;replace &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; with HTML entities.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;ltrim(input [, chars])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;trim characters from the left-side of the input.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;normalizeEmail(email [, options])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;canonicalizes an email address. (This doesn&#39;t validate that the input is an email, if you want to validate the email use isEmail beforehand)&lt;br&gt;&lt;br&gt;&lt;code&gt;options&lt;/code&gt; is an object with the following keys and default values:&lt;br&gt;
    &lt;ul&gt;
     &lt;li&gt;&lt;em&gt;all_lowercase: true&lt;/em&gt; - Transforms the local part (before the @ symbol) of all email addresses to lowercase. Please note that this may violate RFC 5321, which gives providers the possibility to treat the local part of email addresses in a case sensitive way (although in practice most - yet not all - providers don&#39;t). The domain part of the email address is always lowercased, as it&#39;s case insensitive per RFC 1035.&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;gmail_lowercase: true&lt;/em&gt; - GMail addresses are known to be case-insensitive, so this switch allows lowercasing them even when &lt;em&gt;all_lowercase&lt;/em&gt; is set to false. Please note that when &lt;em&gt;all_lowercase&lt;/em&gt; is true, GMail addresses are lowercased regardless of the value of this setting.&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;gmail_remove_dots: true&lt;/em&gt;: Removes dots from the local part of the email address, as GMail ignores them (e.g. &quot;john.doe&quot; and &quot;johndoe&quot; are considered equal).&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;gmail_remove_subaddress: true&lt;/em&gt;: Normalizes addresses by removing &quot;sub-addresses&quot;, which is the part following a &quot;+&quot; sign (e.g. &quot;&lt;a href=&quot;mailto:foo+bar@gmail.com&quot;&gt;foo+bar@gmail.com&lt;/a&gt;&quot; becomes &quot;&lt;a href=&quot;mailto:foo@gmail.com&quot;&gt;foo@gmail.com&lt;/a&gt;&quot;).&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;gmail_convert_googlemaildotcom: true&lt;/em&gt;: Converts addresses with domain @googlemail.com to @gmail.com, as they&#39;re equivalent.&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;outlookdotcom_lowercase: true&lt;/em&gt; - Outlook.com addresses (including Windows Live and Hotmail) are known to be case-insensitive, so this switch allows lowercasing them even when &lt;em&gt;all_lowercase&lt;/em&gt; is set to false. Please note that when &lt;em&gt;all_lowercase&lt;/em&gt; is true, Outlook.com addresses are lowercased regardless of the value of this setting.&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;outlookdotcom_remove_subaddress: true&lt;/em&gt;: Normalizes addresses by removing &quot;sub-addresses&quot;, which is the part following a &quot;+&quot; sign (e.g. &quot;&lt;a href=&quot;mailto:foo+bar@outlook.com&quot;&gt;foo+bar@outlook.com&lt;/a&gt;&quot; becomes &quot;&lt;a href=&quot;mailto:foo@outlook.com&quot;&gt;foo@outlook.com&lt;/a&gt;&quot;).&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;yahoo_lowercase: true&lt;/em&gt; - Yahoo Mail addresses are known to be case-insensitive, so this switch allows lowercasing them even when &lt;em&gt;all_lowercase&lt;/em&gt; is set to false. Please note that when &lt;em&gt;all_lowercase&lt;/em&gt; is true, Yahoo Mail addresses are lowercased regardless of the value of this setting.&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;yahoo_remove_subaddress: true&lt;/em&gt;: Normalizes addresses by removing &quot;sub-addresses&quot;, which is the part following a &quot;-&quot; sign (e.g. &quot;&lt;a href=&quot;mailto:foo-bar@yahoo.com&quot;&gt;foo-bar@yahoo.com&lt;/a&gt;&quot; becomes &quot;&lt;a href=&quot;mailto:foo@yahoo.com&quot;&gt;foo@yahoo.com&lt;/a&gt;&quot;).&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;icloud_lowercase: true&lt;/em&gt; - iCloud addresses (including MobileMe) are known to be case-insensitive, so this switch allows lowercasing them even when &lt;em&gt;all_lowercase&lt;/em&gt; is set to false. Please note that when &lt;em&gt;all_lowercase&lt;/em&gt; is true, iCloud addresses are lowercased regardless of the value of this setting.&lt;/li&gt;
     &lt;li&gt;&lt;em&gt;icloud_remove_subaddress: true&lt;/em&gt;: Normalizes addresses by removing &quot;sub-addresses&quot;, which is the part following a &quot;+&quot; sign (e.g. &quot;&lt;a href=&quot;mailto:foo+bar@icloud.com&quot;&gt;foo+bar@icloud.com&lt;/a&gt;&quot; becomes &quot;&lt;a href=&quot;mailto:foo@icloud.com&quot;&gt;foo@icloud.com&lt;/a&gt;&quot;).&lt;/li&gt;
    &lt;/ul&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;rtrim(input [, chars])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;trim characters from the right-side of the input.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;stripLow(input [, keep_new_lines])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;remove characters with a numerical value &amp;lt; 32 and 127, mostly control characters. If &lt;code&gt;keep_new_lines&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, newline characters are preserved (&lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\r&lt;/code&gt;, hex &lt;code&gt;0xA&lt;/code&gt; and &lt;code&gt;0xD&lt;/code&gt;). Unicode-safe in JavaScript.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;toBoolean(input [, strict])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;convert the input string to a boolean. Everything except for &lt;code&gt;&#39;0&#39;&lt;/code&gt;, &lt;code&gt;&#39;false&#39;&lt;/code&gt; and &lt;code&gt;&#39;&#39;&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. In strict mode only &lt;code&gt;&#39;1&#39;&lt;/code&gt; and &lt;code&gt;&#39;true&#39;&lt;/code&gt; return &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;toDate(input)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;convert the input string to a date, or &lt;code&gt;null&lt;/code&gt; if the input is not a date.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;toFloat(input)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;convert the input string to a float, or &lt;code&gt;NaN&lt;/code&gt; if the input is not a float.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;toInt(input [, radix])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;convert the input string to an integer, or &lt;code&gt;NaN&lt;/code&gt; if the input is not an integer.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;trim(input [, chars])&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;trim characters (whitespace by default) from both sides of the input.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;unescape(input)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;replaces HTML encoded entities with &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&#39;&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;whitelist(input, chars)&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;remove characters that do not appear in the whitelist. The characters are used in a RegExp and so you will need to escape some chars, e.g. &lt;code&gt;whitelist(input, &#39;\\[\\]&#39;)&lt;/code&gt;.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;XSS Sanitization&lt;/h3&gt; 
&lt;p&gt;XSS sanitization was removed from the library in &lt;a href=&quot;https://github.com/validatorjs/validator.js/commit/2d5d6999541add350fb396ef02dc42ca3215049e&quot;&gt;2d5d6999&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For an alternative, have a look at Yahoo&#39;s &lt;a href=&quot;https://github.com/yahoo/xss-filters&quot;&gt;xss-filters library&lt;/a&gt; or at &lt;a href=&quot;https://github.com/cure53/DOMPurify&quot;&gt;DOMPurify&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;In general, we follow the &quot;fork-and-pull&quot; Git workflow.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Fork the repo on GitHub&lt;/li&gt; 
 &lt;li&gt;Clone the project to your own machine&lt;/li&gt; 
 &lt;li&gt;Work on your fork 
  &lt;ol&gt; 
   &lt;li&gt;Make your changes and additions 
    &lt;ul&gt; 
     &lt;li&gt;Most of your changes should be focused on &lt;code&gt;src/&lt;/code&gt; and &lt;code&gt;test/&lt;/code&gt; folders and/or &lt;code&gt;README.md&lt;/code&gt;.&lt;/li&gt; 
     &lt;li&gt;Files such as &lt;code&gt;validator.js&lt;/code&gt;, &lt;code&gt;validator.min.js&lt;/code&gt; and files in &lt;code&gt;lib/&lt;/code&gt; folder are autogenerated when running tests (&lt;code&gt;npm test&lt;/code&gt;) and need not to be changed &lt;strong&gt;manually&lt;/strong&gt;.&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Change or add tests if needed&lt;/li&gt; 
   &lt;li&gt;Run tests and make sure they pass&lt;/li&gt; 
   &lt;li&gt;Add changes to README.md if needed&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt;Commit changes to your own branch&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Make sure&lt;/strong&gt; you merge the latest from &quot;upstream&quot; and resolve conflicts if there is any&lt;/li&gt; 
 &lt;li&gt;Repeat step 3(3) above&lt;/li&gt; 
 &lt;li&gt;Push your work back up to your fork&lt;/li&gt; 
 &lt;li&gt;Submit a Pull request so that we can review your changes&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Tests&lt;/h2&gt; 
&lt;p&gt;Tests are using mocha, to run the tests use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Maintainers&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chriso&quot;&gt;chriso&lt;/a&gt; - &lt;strong&gt;Chris O&#39;Hara&lt;/strong&gt; (author)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/profnandaa&quot;&gt;profnandaa&lt;/a&gt; - &lt;strong&gt;Anthony Nandaa&lt;/strong&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Reading&lt;/h2&gt; 
&lt;p&gt;Remember, validating can be troublesome sometimes. See &lt;a href=&quot;https://github.com/jameslk/awesome-falsehoods&quot;&gt;A list of articles about programming assumptions commonly made that aren&#39;t true&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License (MIT)&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;Copyright (c) 2018 Chris O&#39;Hara &amp;lt;cohara87@gmail.com&amp;gt;

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
&quot;Software&quot;), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>lerna/lerna</title>
      <link>https://github.com/lerna/lerna</link>
      <description>&lt;p&gt;üêâ A tool for managing JavaScript projects with multiple packages.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img alt=&quot;Lerna&quot; src=&quot;https://user-images.githubusercontent.com/645641/79596653-38f81200-80e1-11ea-98cd-1c6a3bb5de51.png&quot; width=&quot;480&quot;&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; A tool for managing JavaScript projects with multiple packages. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.npmjs.com/package/lerna&quot;&gt;&lt;img alt=&quot;NPM Status&quot; src=&quot;https://img.shields.io/npm/v/lerna.svg?style=flat&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/lerna/lerna/actions?query=branch%3Amain+workflow%3Aci&quot;&gt;&lt;img alt=&quot;CI Status&quot; src=&quot;https://github.com/lerna/lerna/workflows/ci/badge.svg?branch=main&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#how-it-works&quot;&gt;How It Works&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Commands 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/publish#readme&quot;&gt;&lt;code&gt;lerna publish&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/version#readme&quot;&gt;&lt;code&gt;lerna version&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/bootstrap#readme&quot;&gt;&lt;code&gt;lerna bootstrap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/list#readme&quot;&gt;&lt;code&gt;lerna list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/changed#readme&quot;&gt;&lt;code&gt;lerna changed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/diff#readme&quot;&gt;&lt;code&gt;lerna diff&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/exec#readme&quot;&gt;&lt;code&gt;lerna exec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/run#readme&quot;&gt;&lt;code&gt;lerna run&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/init#readme&quot;&gt;&lt;code&gt;lerna init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/add#readme&quot;&gt;&lt;code&gt;lerna add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/clean#readme&quot;&gt;&lt;code&gt;lerna clean&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/import#readme&quot;&gt;&lt;code&gt;lerna import&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/link#readme&quot;&gt;&lt;code&gt;lerna link&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/create#readme&quot;&gt;&lt;code&gt;lerna create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/info#readme&quot;&gt;&lt;code&gt;lerna info&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#concepts&quot;&gt;Concepts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#lernajson&quot;&gt;Lerna.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/core/global-options&quot;&gt;Global Flags&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/core/filter-options&quot;&gt;Filter Flags&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Splitting up large codebases into separate independently versioned packages is extremely useful for code sharing. However, making changes across many repositories is &lt;em&gt;messy&lt;/em&gt; and difficult to track, and testing across repositories becomes complicated very quickly.&lt;/p&gt; 
&lt;p&gt;To solve these (and many other) problems, some projects will organize their codebases into multi-package repositories (sometimes called &lt;a href=&quot;https://github.com/babel/babel/raw/master/doc/design/monorepo.md&quot;&gt;monorepos&lt;/a&gt;). Projects like &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages&quot;&gt;Babel&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/react/tree/master/packages&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/angular/tree/master/modules&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/master/packages&quot;&gt;Ember&lt;/a&gt;, &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages&quot;&gt;Meteor&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/jest/tree/master/packages&quot;&gt;Jest&lt;/a&gt;, and many others develop all of their packages within a single repository.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Lerna can also reduce the time and space requirements for numerous copies of packages in development and build environments - normally a downside of dividing a project into many separate NPM packages. See the &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/doc/hoist.md&quot;&gt;hoist documentation&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;What does a Lerna repo look like?&lt;/h3&gt; 
&lt;p&gt;There&#39;s actually very little to it. You have a file structure that looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;my-lerna-repo/
  package.json
  packages/
    package-1/
      package.json
    package-2/
      package.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;What can Lerna do?&lt;/h3&gt; 
&lt;p&gt;The two primary commands in Lerna are &lt;code&gt;lerna bootstrap&lt;/code&gt; and &lt;code&gt;lerna publish&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; will link dependencies in the repo together. &lt;code&gt;publish&lt;/code&gt; will help publish any updated packages.&lt;/p&gt; 
&lt;h3&gt;What can&#39;t Lerna do?&lt;/h3&gt; 
&lt;p&gt;Lerna is not a deployment tool for serverless monorepos. Hoisting might be incompatible with traditional serverless monorepo deployment techniques.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The instructions below are for Lerna 3.x. We recommend using it instead of 2.x for a new Lerna project.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Let&#39;s start by installing Lerna as a dev dependency of your project with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ mkdir lerna-repo &amp;amp;&amp;amp; cd $_
$ npx lerna init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a &lt;code&gt;lerna.json&lt;/code&gt; configuration file as well as a &lt;code&gt;packages&lt;/code&gt; folder, so your folder should now look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;lerna-repo/
  packages/
  package.json
  lerna.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How It Works&lt;/h2&gt; 
&lt;p&gt;Lerna allows you to manage your project using one of two modes: Fixed or Independent.&lt;/p&gt; 
&lt;h3&gt;Fixed/Locked mode (default)&lt;/h3&gt; 
&lt;p&gt;Fixed mode Lerna projects operate on a single version line. The version is kept in the &lt;code&gt;lerna.json&lt;/code&gt; file at the root of your project under the &lt;code&gt;version&lt;/code&gt; key. When you run &lt;code&gt;lerna publish&lt;/code&gt;, if a module has been updated since the last time a release was made, it will be updated to the new version you&#39;re releasing. This means that you only publish a new version of a package when you need to.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you have a major version zero, all updates are &lt;a href=&quot;https://semver.org/#spec-item-4&quot;&gt;considered breaking&lt;/a&gt;. Because of that, running &lt;code&gt;lerna publish&lt;/code&gt; with a major version zero and choosing any non-prerelease version number will cause new versions to be published for all packages, even if not all packages have changed since the last release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This is the mode that &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; is currently using. Use this if you want to automatically tie all package versions together. One issue with this approach is that a major change in any package will result in all packages having a new major version.&lt;/p&gt; 
&lt;h3&gt;Independent mode&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;lerna init --independent&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Independent mode Lerna projects allows maintainers to increment package versions independently of each other. Each time you publish, you will get a prompt for each package that has changed to specify if it&#39;s a patch, minor, major or custom change.&lt;/p&gt; 
&lt;p&gt;Independent mode allows you to more specifically update versions for each package and makes sense for a group of components. Combining this mode with something like &lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot;&gt;semantic-release&lt;/a&gt; would make it less painful. (There is work on this already at &lt;a href=&quot;https://github.com/atlassian/lerna-semantic-release&quot;&gt;atlassian/lerna-semantic-release&lt;/a&gt;).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Set the &lt;code&gt;version&lt;/code&gt; key in &lt;code&gt;lerna.json&lt;/code&gt; to &lt;code&gt;independent&lt;/code&gt; to run in independent mode.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;If you encounter any issues while using Lerna please check out our &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/doc/troubleshooting.md&quot;&gt;Troubleshooting&lt;/a&gt; document where you might find the answer to your problem.&lt;/p&gt; 
&lt;h2&gt;Frequently asked questions&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/FAQ.md&quot;&gt;FAQ.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Concepts&lt;/h2&gt; 
&lt;p&gt;Lerna will log to a &lt;code&gt;lerna-debug.log&lt;/code&gt; file (same as &lt;code&gt;npm-debug.log&lt;/code&gt;) when it encounters an error running a command.&lt;/p&gt; 
&lt;p&gt;Lerna also has support for &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped packages&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;lerna --help&lt;/code&gt; to see all available commands and options.&lt;/p&gt; 
&lt;h3&gt;lerna.json&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;version&quot;: &quot;1.1.3&quot;,
  &quot;npmClient&quot;: &quot;npm&quot;,
  &quot;command&quot;: {
    &quot;publish&quot;: {
      &quot;ignoreChanges&quot;: [&quot;ignored-file&quot;, &quot;*.md&quot;],
      &quot;message&quot;: &quot;chore(release): publish&quot;,
      &quot;registry&quot;: &quot;https://npm.pkg.github.com&quot;
    },
    &quot;bootstrap&quot;: {
      &quot;ignore&quot;: &quot;component-*&quot;,
      &quot;npmClientArgs&quot;: [&quot;--no-package-lock&quot;]
    }
  },
  &quot;packages&quot;: [&quot;packages/*&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: the current version of the repository.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npmClient&lt;/code&gt;: an option to specify a specific client to run commands with (this can also be specified on a per command basis). Change to &lt;code&gt;&quot;yarn&quot;&lt;/code&gt; to run all commands with yarn. Defaults to &quot;npm&quot;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.ignoreChanges&lt;/code&gt;: an array of globs that won&#39;t be included in &lt;code&gt;lerna changed/publish&lt;/code&gt;. Use this to prevent publishing a new version unnecessarily for changes, such as fixing a &lt;code&gt;README.md&lt;/code&gt; typo.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.message&lt;/code&gt;: a custom commit message when performing version updates for publication. See &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/version#--message-msg&quot;&gt;@lerna/version&lt;/a&gt; for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.registry&lt;/code&gt;: use it to set a custom registry url to publish to instead of npmjs.org, you must already be authenticated if required.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.ignore&lt;/code&gt;: an array of globs that won&#39;t be bootstrapped when running the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.npmClientArgs&lt;/code&gt;: array of strings that will be passed as arguments directly to &lt;code&gt;npm install&lt;/code&gt; during the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.scope&lt;/code&gt;: an array of globs that restricts which packages will be bootstrapped when running the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;packages&lt;/code&gt;: Array of globs to use as package locations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The packages config in &lt;code&gt;lerna.json&lt;/code&gt; is a list of globs that match directories containing a &lt;code&gt;package.json&lt;/code&gt;, which is how lerna recognizes &quot;leaf&quot; packages (vs the &quot;root&quot; &lt;code&gt;package.json&lt;/code&gt;, which is intended to manage the dev dependencies and scripts for the entire repo).&lt;/p&gt; 
&lt;p&gt;By default, lerna initializes the packages list as &lt;code&gt;[&quot;packages/*&quot;]&lt;/code&gt;, but you can also use another directory such as &lt;code&gt;[&quot;modules/*&quot;]&lt;/code&gt;, or &lt;code&gt;[&quot;package1&quot;, &quot;package2&quot;]&lt;/code&gt;. The globs defined are relative to the directory that &lt;code&gt;lerna.json&lt;/code&gt; lives in, which is usually the repository root. The only restriction is that you can&#39;t directly nest package locations, but this is a restriction shared by &quot;normal&quot; npm packages as well.&lt;/p&gt; 
&lt;p&gt;For example, &lt;code&gt;[&quot;packages/*&quot;, &quot;src/**&quot;]&lt;/code&gt; matches this tree:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;packages/
‚îú‚îÄ‚îÄ foo-pkg
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ bar-pkg
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ baz-pkg
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ qux-pkg
    ‚îî‚îÄ‚îÄ package.json
src/
‚îú‚îÄ‚îÄ admin
‚îÇ   ‚îú‚îÄ‚îÄ my-app
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îÇ   ‚îú‚îÄ‚îÄ stuff
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ things
‚îÇ       ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ profile
‚îÇ   ‚îî‚îÄ‚îÄ more-things
‚îÇ       ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ property
‚îÇ   ‚îú‚îÄ‚îÄ more-stuff
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ other-things
‚îÇ       ‚îî‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ upload
    ‚îî‚îÄ‚îÄ other-stuff
        ‚îî‚îÄ‚îÄ package.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Locating leaf packages under &lt;code&gt;packages/*&lt;/code&gt; is considered a &quot;best-practice&quot;, but is not a requirement for using Lerna.&lt;/p&gt; 
&lt;h4&gt;Legacy Fields&lt;/h4&gt; 
&lt;p&gt;Some &lt;code&gt;lerna.json&lt;/code&gt; fields are no longer in use. Those of note include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lerna&lt;/code&gt;: originally used to indicate the current version of Lerna. &lt;a href=&quot;https://github.com/lerna/lerna/pull/1122&quot;&gt;Made obsolete&lt;/a&gt; and &lt;a href=&quot;https://github.com/lerna/lerna/pull/1225&quot;&gt;removed&lt;/a&gt; in v3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Common &lt;code&gt;devDependencies&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Most &lt;code&gt;devDependencies&lt;/code&gt; can be pulled up to the root of a Lerna repo with &lt;code&gt;lerna link convert&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The above command will automatically hoist things and use relative &lt;code&gt;file:&lt;/code&gt; specifiers.&lt;/p&gt; 
&lt;p&gt;Hoisting has a few benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All packages use the same version of a given dependency&lt;/li&gt; 
 &lt;li&gt;Can keep dependencies at the root up-to-date with an automated tool such as &lt;a href=&quot;https://snyk.io/&quot;&gt;Snyk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dependency installation time is reduced&lt;/li&gt; 
 &lt;li&gt;Less storage is needed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that &lt;code&gt;devDependencies&lt;/code&gt; providing &quot;binary&quot; executables that are used by npm scripts still need to be installed directly in each package where they&#39;re used.&lt;/p&gt; 
&lt;p&gt;For example the &lt;code&gt;nsp&lt;/code&gt; dependency is necessary in this case for &lt;code&gt;lerna run nsp&lt;/code&gt; (and &lt;code&gt;npm run nsp&lt;/code&gt; within the package&#39;s directory) to work correctly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;scripts&quot;: {
    &quot;nsp&quot;: &quot;nsp&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;nsp&quot;: &quot;^2.3.3&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Git Hosted Dependencies&lt;/h3&gt; 
&lt;p&gt;Lerna allows target versions of local dependent packages to be written as a &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;git remote url&lt;/a&gt; with a &lt;code&gt;committish&lt;/code&gt; (e.g., &lt;code&gt;#v1.0.0&lt;/code&gt; or &lt;code&gt;#semver:^1.0.0&lt;/code&gt;) instead of the normal numeric version range. This allows packages to be distributed via git repositories when packages must be private and a &lt;a href=&quot;https://www.dotconferences.com/2016/05/fabien-potencier-monolithic-repositories-vs-many-repositories&quot;&gt;private npm registry is not desired&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please note that lerna does &lt;em&gt;not&lt;/em&gt; perform the actual splitting of git history into the separate read-only repositories. This is the responsibility of the user. (See &lt;a href=&quot;https://github.com/lerna/lerna/pull/1033#issuecomment-335894690&quot;&gt;this comment&lt;/a&gt; for implementation details)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// packages/pkg-1/package.json
{
  name: &quot;pkg-1&quot;,
  version: &quot;1.0.0&quot;,
  dependencies: {
    &quot;pkg-2&quot;: &quot;github:example-user/pkg-2#v1.0.0&quot;
  }
}

// packages/pkg-2/package.json
{
  name: &quot;pkg-2&quot;,
  version: &quot;1.0.0&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the example above,&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lerna bootstrap&lt;/code&gt; will properly symlink &lt;code&gt;pkg-2&lt;/code&gt; into &lt;code&gt;pkg-1&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lerna publish&lt;/code&gt; will update the committish (&lt;code&gt;#v1.0.0&lt;/code&gt;) in &lt;code&gt;pkg-1&lt;/code&gt; when &lt;code&gt;pkg-2&lt;/code&gt; changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;README Badge&lt;/h3&gt; 
&lt;p&gt;Using Lerna? Add a README badge to show it off: &lt;a href=&quot;https://lerna.js.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg?sanitize=true&quot; alt=&quot;lerna&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Wizard&lt;/h3&gt; 
&lt;p&gt;If you prefer some guidance for cli (in case you&#39;re about to start using lerna or introducing it to a new team), you might like &lt;a href=&quot;https://github.com/szarouski/lerna-wizard&quot;&gt;lerna-wizard&lt;/a&gt;. It will lead you through a series of well-defined steps:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/szarouski/lerna-wizard/2e269fb5a3af7100397a1f874cea3fa78089486e/demo.png&quot; alt=&quot;lerna-wizard demo image&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>goldbergyoni/javascript-testing-best-practices</title>
      <link>https://github.com/goldbergyoni/javascript-testing-best-practices</link>
      <description>&lt;p&gt;üìóüåê üö¢ Comprehensive and exhaustive JavaScript &amp; Node.js testing best practices (August 2021)&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/jtbp-header-blue.png&quot; width=&quot;1920px&quot;&gt; 
&lt;br&gt; 
&lt;h1&gt;üëá Why this guide can take your testing skills to the next level&lt;/h1&gt; 
&lt;br&gt; 
&lt;h2&gt;üìó 46+ best practices: Super-comprehensive and exhaustive&lt;/h2&gt; 
&lt;p&gt;This is a guide for JavaScript &amp;amp; Node.js reliability from A-Z. It summarizes and curates for you dozens of the best blog posts, books and tools the market has to offer&lt;/p&gt; 
&lt;h2&gt;üö¢ Advanced: Goes 10,000 miles beyond the basics&lt;/h2&gt; 
&lt;p&gt;Hop into a journey that travels way beyond the basics into advanced topics like testing in production, mutation testing, property-based testing and many other strategic &amp;amp; professional tools. Should you read every word in this guide your testing skills are likely to go way above the average&lt;/p&gt; 
&lt;h2&gt;üåê Full-stack: front, backend, CI, anything&lt;/h2&gt; 
&lt;p&gt;Start by understanding the ubiquitous testing practices that are the foundation for any application tier. Then, delve into your area of choice: frontend/UI, backend, CI or maybe all of them?&lt;/p&gt; 
&lt;br&gt; 
&lt;h3&gt;Written By Yoni Goldberg&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;A JavaScript &amp;amp; Node.js consultant&lt;/li&gt; 
 &lt;li&gt;üìó &lt;a href=&quot;https://www.testjavascript.com&quot;&gt;Testing Node.js &amp;amp; JavaScript From A To Z&lt;/a&gt; - My comprehensive online course with more than &lt;a href=&quot;https://www.testjavascript.com&quot;&gt;10 hours of video&lt;/a&gt;, 14 test types and more than 40 best practices&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/goldbergyoni/&quot;&gt;Follow me on Twitter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;h3&gt;Translations - read in your own language&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;üá®üá≥&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-zh-CN.md&quot;&gt;Chinese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/yvesyao&quot;&gt;Yves yao&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üá∞üá∑&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme.kr.md&quot;&gt;Korean&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/ragubyun&quot;&gt;Rain Byun&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üáµüá±&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-pl.md&quot;&gt;Polish&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mbiesiad&quot;&gt;Michal Biesiada&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üá™üá∏&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-es.md&quot;&gt;Spanish&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/sanguino&quot;&gt;Miguel G. Sanguino&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üáßüá∑&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-pt-br.md&quot;&gt;Portuguese-BR&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/iagocavalcante&quot;&gt;Iago Angelim Costa Cavalcante&lt;/a&gt; , &lt;a href=&quot;https://github.com/DouglasMV&quot;&gt;Douglas Mariano Valero&lt;/a&gt; and &lt;a href=&quot;https://github.com/koooge&quot;&gt;koooge&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;üá´üá∑&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/readme-fr.md&quot;&gt;French&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mel-mouk&quot;&gt;Mathilde El Mouktafi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Want to translate to your own language? please open an issue üíú&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;code&gt;Table of Contents&lt;/code&gt;&lt;/h2&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-0%EF%B8%8F%E2%83%A3-the-golden-rule&quot;&gt;&lt;code&gt;Section 0: The Golden Rule&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;A single advice that inspires all the others (1 special bullet)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-1-the-test-anatomy-1&quot;&gt;&lt;code&gt;Section 1: The Test Anatomy&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;The foundation - structuring clean tests (12 bullets)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-2%EF%B8%8F%E2%83%A3-backend-testing&quot;&gt;&lt;code&gt;Section 2: Backend&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Writing backend and Microservices tests efficiently (8 bullets)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-3%EF%B8%8F%E2%83%A3-frontend-testing&quot;&gt;&lt;code&gt;Section 3: Frontend&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Writing tests for web UI including component and E2E tests (11 bullets)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-4%EF%B8%8F%E2%83%A3-measuring-test-effectiveness&quot;&gt;&lt;code&gt;Section 4: Measuring Tests Effectiveness&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Watching the watchman - measuring test quality (4 bullets)&lt;/p&gt; 
&lt;h4&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#section-5%EF%B8%8F%E2%83%A3-ci-and-other-quality-measures&quot;&gt;&lt;code&gt;Section 5: Continuous Integration&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; 
&lt;p&gt;Guidelines for CI in the JS world (9 bullets)&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;Section 0Ô∏è‚É£: The Golden Rule&lt;/h1&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™Ô∏è 0 The Golden Rule: Design for lean testing&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Testing code is not like production-code - design it to be dead-simple, short, abstraction-free, flat, delightful to work with, lean. One should look at a test and get the intent instantly.&lt;/p&gt; 
&lt;p&gt;Our minds are full with the main production code, we don&#39;t have &#39;headspace&#39; for additional complexity. Should we try to squeeze yet another challenging code into our poor brain it will slow the team down which works against the reason we do testing. Practically this is where many teams just abandon testing.&lt;/p&gt; 
&lt;p&gt;The tests are an opportunity for something else - a friendly and smiley assistant, one that it&#39;s delightful to work with and delivers great value for such a small investment. Science tells us that we have two brain systems: system 1 is used for effortless activities like driving a car on an empty road and system 2 which is meant for complex and conscious operations like solving a math equation. Design your test for system 1, when looking at test code it should &lt;em&gt;feel&lt;/em&gt; as easy as modifying an HTML document and not like solving 2X(17 √ó 24).&lt;/p&gt; 
&lt;p&gt;This can be achieved by selectively cherry-picking techniques, tools and test targets that are cost-effective and provide great ROI. Test only as much as needed, strive to keep it nimble, sometimes it&#39;s even worth dropping some tests and trade reliability for agility and simplicity.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/headspace.png&quot; alt=&quot;alt text&quot; title=&quot;We have no head room for additional complexity&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Most of the advice below are derivatives of this principle.&lt;/p&gt; 
&lt;h3&gt;Ready to start?&lt;/h3&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;Section 1: The Test Anatomy&lt;/h1&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 1.1 Include 3 parts in each test name&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; A test report should tell whether the current application revision satisfies the requirements for the people who are not necessarily familiar with the code: the tester, the DevOps engineer who is deploying and the future you two years from now. This can be achieved best if the tests speak at the requirements level and include 3 parts:&lt;/p&gt; 
&lt;p&gt;(1) What is being tested? For example, the ProductsService.addNewProduct method&lt;/p&gt; 
&lt;p&gt;(2) Under what circumstances and scenario? For example, no price is passed to the method&lt;/p&gt; 
&lt;p&gt;(3) What is the expected result? For example, the new product is not approved&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; A deployment just failed, a test named ‚ÄúAdd product‚Äù failed. Does this tell you what exactly is malfunctioning?&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;strong&gt;üëá Note:&lt;/strong&gt; Each bullet has code examples and sometime also an image illustration. Click to expand &lt;br&gt;&lt;/p&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: A test name that constitutes 3 parts&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Mocha-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Mocha to illustrate the idea&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//1. unit under test
describe(&#39;Products Service&#39;, function() {
  describe(&#39;Add new product&#39;, function() {
    //2. scenario and 3. expectation
    it(&#39;When no price is specified, then the product status is pending approval&#39;, ()=&amp;gt; {
      const newProduct = new ProductService().add(...);
      expect(newProduct.status).to.equal(&#39;pendingApproval&#39;);
    });
  });
});

&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: A test name that constitutes 3 parts&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-1-3-parts.jpeg&quot; alt=&quot;alt text&quot; title=&quot;A test name that constitutes 3 parts&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;¬© &lt;b&gt;Credits &amp;amp; read-more&lt;/b&gt;&lt;/summary&gt; 1. 
 &lt;a href=&quot;https://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html&quot;&gt;Roy Osherove - Naming standards for unit tests&lt;/a&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 1.2 Structure tests by the AAA pattern&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Structure your tests with 3 well-separated sections Arrange, Act &amp;amp; Assert (AAA). Following this structure guarantees that the reader spends no brain-CPU on understanding the test plan:&lt;/p&gt; 
&lt;p&gt;1st A - Arrange: All the setup code to bring the system to the scenario the test aims to simulate. This might include instantiating the unit under test constructor, adding DB records, mocking/stubbing on objects and any other preparation code&lt;/p&gt; 
&lt;p&gt;2nd A - Act: Execute the unit under test. Usually 1 line of code&lt;/p&gt; 
&lt;p&gt;3rd A - Assert: Ensure that the received value satisfies the expectation. Usually 1 line of code&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Not only do you spend hours understanding the main code, but what should have been the simplest part of the day (testing) stretches your brain&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: A test structured with the AAA pattern&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&quot;Customer classifier&quot;, () =&amp;gt; {
  test(&quot;When customer spent more than 500$, should be classified as premium&quot;, () =&amp;gt; {
    //Arrange
    const customerToClassify = { spent: 505, joined: new Date(), id: 1 };
    const DBStub = sinon.stub(dataAccess, &quot;getCustomer&quot;).reply({ id: 1, classification: &quot;regular&quot; });

    //Act
    const receivedClassification = customerClassifier.classifyCustomer(customerToClassify);

    //Assert
    expect(receivedClassification).toMatch(&quot;premium&quot;);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: No separation, one bulk, harder to interpret&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;Should be classified as premium&quot;, () =&amp;gt; {
  const customerToClassify = { spent: 505, joined: new Date(), id: 1 };
  const DBStub = sinon.stub(dataAccess, &quot;getCustomer&quot;).reply({ id: 1, classification: &quot;regular&quot; });
  const receivedClassification = customerClassifier.classifyCustomer(customerToClassify);
  expect(receivedClassification).toMatch(&quot;premium&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è1.3 Describe expectations in a product language: use BDD-style assertions&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Coding your tests in a declarative-style allows the reader to get the grab instantly without spending even a single brain-CPU cycle. When you write imperative code that is packed with conditional logic, the reader is forced to exert more brain-CPU cycles. In that case, code the expectation in a human-like language, declarative BDD style using &lt;code&gt;expect&lt;/code&gt; or &lt;code&gt;should&lt;/code&gt; and not using custom code. If Chai &amp;amp; Jest doesn&#39;t include the desired assertion and it‚Äôs highly repeatable, consider &lt;a href=&quot;https://jestjs.io/docs/en/expect#expectextendmatchers&quot;&gt;extending Jest matcher (Jest)&lt;/a&gt; or writing a &lt;a href=&quot;https://www.chaijs.com/guide/plugins/&quot;&gt;custom Chai plugin&lt;/a&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; The team will write less tests and decorate the annoying ones with .skip()&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt;
 &lt;br&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Mocha &amp;amp; Chai&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: The reader must skim through not so short, and imperative code just to get the test story&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;When asking for an admin, ensure only ordered admins in results&quot;, () =&amp;gt; {
  //assuming we&#39;ve added here two admins &quot;admin1&quot;, &quot;admin2&quot; and &quot;user1&quot;
  const allAdmins = getUsers({ adminOnly: true });

  let admin1Found,
    adming2Found = false;

  allAdmins.forEach(aSingleUser =&amp;gt; {
    if (aSingleUser === &quot;user1&quot;) {
      assert.notEqual(aSingleUser, &quot;user1&quot;, &quot;A user was found and not admin&quot;);
    }
    if (aSingleUser === &quot;admin1&quot;) {
      admin1Found = true;
    }
    if (aSingleUser === &quot;admin2&quot;) {
      admin2Found = true;
    }
  });

  if (!admin1Found || !admin2Found) {
    throw new Error(&quot;Not all admins were returned&quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Skimming through the following declarative test is a breeze&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When asking for an admin, ensure only ordered admins in results&quot;, () =&amp;gt; {
  //assuming we&#39;ve added here two admins
  const allAdmins = getUsers({ adminOnly: true });

  expect(allAdmins)
    .to.include.ordered.members([&quot;admin1&quot;, &quot;admin2&quot;])
    .but.not.include.ordered.members([&quot;user1&quot;]);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 1.4 Stick to black-box testing: Test only public methods&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Testing the internals brings huge overhead for almost nothing. If your code/API delivers the right results, should you really invest your next 3 hours in testing HOW it worked internally and then maintain these fragile tests? Whenever a public behavior is checked, the private implementation is also implicitly tested and your tests will break only if there is a certain problem (e.g. wrong output). This approach is also referred to as &lt;code&gt;behavioral testing&lt;/code&gt;. On the other side, should you test the internals (white box approach)‚Ää‚Äî‚Ääyour focus shifts from planning the component outcome to nitty-gritty details and your test might break because of minor code refactors although the results are fine - this dramatically increases the maintenance burden &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Your tests behave like the &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Boy_Who_Cried_Wolf&quot;&gt;boy who cried wolf&lt;/a&gt;: shouting false-positive cries (e.g., A test fails because a private variable name was changed). Unsurprisingly, people will soon start to ignore the CI notifications until someday, a real bug gets ignored‚Ä¶&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: A test case is testing the internals for no good reason&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Mocha &amp;amp; Chai&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class ProductService {
  //this method is only used internally
  //Change this name will make the tests fail
  calculateVATAdd(priceWithoutVAT) {
    return { finalPrice: priceWithoutVAT * 1.2 };
    //Change the result format or key name above will make the tests fail
  }
  //public method
  getPrice(productId) {
    const desiredProduct = DB.getProduct(productId);
    finalPrice = this.calculateVATAdd(desiredProduct.price).finalPrice;
    return finalPrice;
  }
}

it(&quot;White-box test: When the internal methods get 0 vat, it return 0 response&quot;, async () =&amp;gt; {
  //There&#39;s no requirement to allow users to calculate the VAT, only show the final price. Nevertheless we falsely insist here to test the class internals
  expect(new ProductService().calculateVATAdd(0).finalPrice).to.equal(0);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è Ô∏è1.5 Choose the right test doubles: Avoid mocks in favor of stubs and spies&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Test doubles are a necessary evil because they are coupled to the application internals, yet some provide immense value (&lt;a href=&quot;https://martinfowler.com/articles/mocksArentStubs.html&quot; data-href=&quot;https://martinfowler.com/articles/mocksArentStubs.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;Read here a reminder about test doubles: mocks vs stubs vs spies&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;Before using test doubles, ask a very simple question: Do I use it to test functionality that appears, or could appear, in the requirements document? If no, it‚Äôs a white-box testing smell.&lt;/p&gt; 
&lt;p&gt;For example, if you want to test that your app behaves reasonably when the payment service is down, you might stub the payment service and trigger some ‚ÄòNo Response‚Äô return to ensure that the unit under test returns the right value. This checks our application behavior/response/outcome under certain scenarios. You might also use a spy to assert that an email was sent when that service is down‚Ää‚Äî‚Ääthis is again a behavioral check which is likely to appear in a requirements doc (‚ÄúSend an email if payment couldn‚Äôt be saved‚Äù). On the flip side, if you mock the Payment service and ensure that it was called with the right JavaScript types‚Ää‚Äî‚Ääthen your test is focused on internal things that have nothing to do with the application functionality and are likely to change frequently &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Any refactoring of code mandates searching for all the mocks in the code and updating accordingly. Tests become a burden rather than a helpful friend&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-pattern example: Mocks focus on the internals&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Sinon-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Sinon&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When a valid product is about to be deleted, ensure data access DAL was called once, with the right product and right config&quot;, async () =&amp;gt; {
  //Assume we already added a product
  const dataAccessMock = sinon.mock(DAL);
  //hmmm BAD: testing the internals is actually our main goal here, not just a side-effect
  dataAccessMock
    .expects(&quot;deleteProduct&quot;)
    .once()
    .withArgs(DBConfig, theProductWeJustAdded, true, false);
  new ProductService().deletePrice(theProductWeJustAdded);
  dataAccessMock.verify();
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt;Doing It Right Example: spies are focused on testing the requirements but as a side-effect are unavoidably touching to the internals&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When a valid product is about to be deleted, ensure an email is sent&quot;, async () =&amp;gt; {
  //Assume we already added here a product
  const spy = sinon.spy(Emailer.prototype, &quot;sendEmail&quot;);
  new ProductService().deletePrice(theProductWeJustAdded);
  //hmmm OK: we deal with internals? Yes, but as a side effect of testing the requirements (sending an email)
  expect(spy.calledOnce).to.be.true;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;üìó Want to learn all these practices with live video?&lt;/h2&gt; 
&lt;h3&gt;Visit my online course &lt;a href=&quot;https://www.testjavascript.com&quot;&gt;Testing Node.js &amp;amp; JavaScript From A To Z&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è1.6 Don‚Äôt ‚Äúfoo‚Äù, use realistic input data&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Often production bugs are revealed under some very specific and surprising input‚Ää‚Äî‚Ääthe more realistic the test input is, the greater the chances are to catch bugs early. Use dedicated libraries like &lt;a href=&quot;https://www.npmjs.com/package/faker&quot;&gt;Faker&lt;/a&gt; to generate pseudo-real data that resembles the variety and form of production data. For example, such libraries can generate realistic phone numbers, usernames, credit card, company names, and even ‚Äòlorem ipsum‚Äô text. You may also create some tests (on top of unit tests, not as a replacement) that randomize fakers data to stretch your unit under test or even import real data from your production environment. Want to take it to the next level? See the next bullet (property-based testing). &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; All your development testing will falsely show green when you use synthetic inputs like ‚ÄúFoo‚Äù, but then production might turn red when a hacker passes-in a nasty string like ‚Äú@3e2ddsf . ##‚Äô 1 fdsfds . fds432 AAAA‚Äù&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: A test suite that passes due to non-realistic data&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const addProduct = (name, price) =&amp;gt; {
  const productNameRegexNoSpace = /^\S*$/; //no white-space allowed

  if (!productNameRegexNoSpace.test(name)) return false; //this path never reached due to dull input

  //some logic here
  return true;
};

test(&quot;Wrong: When adding new product with valid properties, get successful confirmation&quot;, async () =&amp;gt; {
  //The string &quot;Foo&quot; which is used in all tests never triggers a false result
  const addProductResult = addProduct(&quot;Foo&quot;, 5);
  expect(addProductResult).toBe(true);
  //Positive-false: the operation succeeded because we never tried with long
  //product name including spaces
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt;Doing It Right Example: Randomizing realistic input&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;Better: When adding new valid product, get successful confirmation&quot;, async () =&amp;gt; {
  const addProductResult = addProduct(faker.commerce.productName(), faker.random.number());
  //Generated random input: {&#39;Sleek Cotton Computer&#39;,  85481}
  expect(addProductResult).to.be.true;
  //Test failed, the random input triggered some path we never planned for.
  //We discovered a bug early!
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 1.7 Test many input combinations using Property-based testing&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Typically we choose a few input samples for each test. Even when the input format resembles real-world data (see bullet &lt;a href=&quot;https://github.com/goldbergyoni/javascript-testing-best-practices#-%EF%B8%8F16-dont-foo-use-realistic-input-data&quot;&gt;‚ÄòDon‚Äôt foo‚Äô&lt;/a&gt;), we cover only a few input combinations (method(‚Äò‚Äô, true, 1), method(‚Äústring‚Äù , false , 0)), However, in production, an API that is called with 5 parameters can be invoked with thousands of different permutations, one of them might render our process down (&lt;a href=&quot;https://en.wikipedia.org/wiki/Fuzzing&quot;&gt;see Fuzz Testing&lt;/a&gt;). What if you could write a single test that sends 1000 permutations of different inputs automatically and catches for which input our code fails to return the right response? Property-based testing is a technique that does exactly that: by sending all the possible input combinations to your unit under test it increases the serendipity of finding a bug. For example, given a method‚Ää‚Äî‚ÄäaddNewProduct(id, name, isDiscount)‚Ää‚Äî‚Ääthe supporting libraries will call this method with many combinations of (number, string, boolean) like (1, ‚ÄúiPhone‚Äù, false), (2, ‚ÄúGalaxy‚Äù, true). You can run property-based testing using your favorite test runner (Mocha, Jest, etc) using libraries like &lt;a href=&quot;https://github.com/jsverify/jsverify&quot;&gt;js-verify&lt;/a&gt; or &lt;a href=&quot;https://github.com/leebyron/testcheck-js&quot;&gt;testcheck&lt;/a&gt; (much better documentation). Update: Nicolas Dubien suggests in the comments below to &lt;a href=&quot;https://github.com/dubzzz/fast-check#readme&quot;&gt;checkout fast-check&lt;/a&gt; which seems to offer some additional features and also to be actively maintained &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Unconsciously, you choose the test inputs that cover only code paths that work well. Unfortunately, this decreases the efficiency of testing as a vehicle to expose bugs&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Testing many input permutations with ‚Äúfast-check‚Äù&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import fc from &quot;fast-check&quot;;

describe(&quot;Product service&quot;, () =&amp;gt; {
  describe(&quot;Adding new&quot;, () =&amp;gt; {
    //this will run 100 times with different random properties
    it(&quot;Add new product with random yet valid properties, always successful&quot;, () =&amp;gt;
      fc.assert(
        fc.property(fc.integer(), fc.string(), (id, name) =&amp;gt; {
          expect(addNewProduct(id, name).status).toEqual(&quot;approved&quot;);
        })
      ));
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 1.8 If needed, use only short &amp;amp; inline snapshots&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; When there is a need for &lt;a href=&quot;https://jestjs.io/docs/en/snapshot-testing&quot;&gt;snapshot testing&lt;/a&gt;, use only short and focused snapshots (i.e. 3-7 lines) that are included as part of the test (&lt;a href=&quot;https://jestjs.io/docs/en/snapshot-testing#inline-snapshots&quot;&gt;Inline Snapshot&lt;/a&gt;) and not within external files. Keeping this guideline will ensure your tests remain self-explanatory and less fragile.&lt;/p&gt; 
&lt;p&gt;On the other hand, ‚Äòclassic snapshots‚Äô tutorials and tools encourage to store big files (e.g. component rendering markup, API JSON result) over some external medium and ensure each time when the test run to compare the received result with the saved version. This, for example, can implicitly couple our test to 1000 lines with 3000 data values that the test writer never read and reasoned about. Why is this wrong? By doing so, there are 1000 reasons for your test to fail - it‚Äôs enough for a single line to change for the snapshot to get invalid and this is likely to happen a lot. How frequently? for every space, comment or minor CSS/HTML change. Not only this, the test name wouldn‚Äôt give a clue about the failure as it just checks that 1000 lines didn‚Äôt change, also it encourages to the test writer to accept as the desired true a long document he couldn‚Äôt inspect and verify. All of these are symptoms of obscure and eager test that is not focused and aims to achieve too much&lt;/p&gt; 
&lt;p&gt;It‚Äôs worth noting that there are few cases where long &amp;amp; external snapshots are acceptable - when asserting on schema and not data (extracting out values and focusing on fields) or when the received document rarely changes &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; A UI test fails. The code seems right, the screen renders perfect pixels, what happened? your snapshot testing just found a difference from the origin document to current received one - a single space character was added to the markdown...&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: Coupling our test to unseen 2000 lines of code&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;TestJavaScript.com is renderd correctly&quot;, () =&amp;gt; {
  //Arrange

  //Act
  const receivedPage = renderer
    .create(&amp;lt;DisplayPage page=&quot;http://www.testjavascript.com&quot;&amp;gt; Test JavaScript &amp;lt;/DisplayPage&amp;gt;)
    .toJSON();

  //Assert
  expect(receivedPage).toMatchSnapshot();
  //We now implicitly maintain a 2000 lines long document
  //every additional line break or comment - will break this test
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Expectations are visible and focused&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When visiting TestJavaScript.com home page, a menu is displayed&quot;, () =&amp;gt; {
  //Arrange

  //Act
  const receivedPage = renderer
    .create(&amp;lt;DisplayPage page=&quot;http://www.testjavascript.com&quot;&amp;gt; Test JavaScript &amp;lt;/DisplayPage&amp;gt;)
    .toJSON();

  //Assert

  const menu = receivedPage.content.menu;
  expect(menu).toMatchInlineSnapshot(`
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Home&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt; About &amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt; Contact &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
`);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è1.9 Avoid global test fixtures and seeds, add data per-test&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Going by the golden rule (bullet 0), each test should add and act on its own set of DB rows to prevent coupling and easily reason about the test flow. In reality, this is often violated by testers who seed the DB with data before running the tests (&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_fixture&quot;&gt;also known as ‚Äòtest fixture‚Äô&lt;/a&gt;) for the sake of performance improvement. While performance is indeed a valid concern‚Ää‚Äî‚Ääit can be mitigated (see ‚ÄúComponent testing‚Äù bullet), however, test complexity is a much painful sorrow that should govern other considerations most of the time. Practically, make each test case explicitly add the DB records it needs and act only on those records. If performance becomes a critical concern‚Ää‚Äî‚Ääa balanced compromise might come in the form of seeding the only suite of tests that are not mutating data (e.g. queries) &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Few tests fail, a deployment is aborted, our team is going to spend precious time now, do we have a bug? let‚Äôs investigate, oh no‚Ää‚Äî‚Ääit seems that two tests were mutating the same seed data&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: tests are not independent and rely on some global hook to feed global DB data&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;before(async () =&amp;gt; {
  //adding sites and admins data to our DB. Where is the data? outside. At some external json or migration framework
  await DB.AddSeedDataFromJson(&#39;seed.json&#39;);
});
it(&quot;When updating site name, get successful confirmation&quot;, async () =&amp;gt; {
  //I know that site name &quot;portal&quot; exists - I saw it in the seed files
  const siteToUpdate = await SiteService.getSiteByName(&quot;Portal&quot;);
  const updateNameResult = await SiteService.changeName(siteToUpdate, &quot;newName&quot;);
  expect(updateNameResult).to.be(true);
});
it(&quot;When querying by site name, get the right site&quot;, async () =&amp;gt; {
  //I know that site name &quot;portal&quot; exists - I saw it in the seed files
  const siteToCheck = await SiteService.getSiteByName(&quot;Portal&quot;);
  expect(siteToCheck.name).to.be.equal(&quot;Portal&quot;); //Failure! The previous test change the name :[
});

&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: We can stay within the test, each test acts on its own set of data&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When updating site name, get successful confirmation&quot;, async () =&amp;gt; {
  //test is adding a fresh new records and acting on the records only
  const siteUnderTest = await SiteService.addSite({
    name: &quot;siteForUpdateTest&quot;
  });

  const updateNameResult = await SiteService.changeName(siteUnderTest, &quot;newName&quot;);

  expect(updateNameResult).to.be(true);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 1.10 Don‚Äôt catch errors, expect them&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; When trying to assert that some input triggers an error, it might look right to use try-catch-finally and asserts that the catch clause was entered. The result is an awkward and verbose test case (example below) that hides the simple test intent and the result expectations&lt;/p&gt; 
&lt;p&gt;A more elegant alternative is the using the one-line dedicated Chai assertion: expect(method).to.throw (or in Jest: expect(method).toThrow()). It‚Äôs absolutely mandatory to also ensure the exception contains a property that tells the error type, otherwise given just a generic error the application won‚Äôt be able to do much rather than show a disappointing message to the user &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; It will be challenging to infer from the test reports (e.g. CI reports) what went wrong&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-pattern Example: A long test case that tries to assert the existence of error with try-catch&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When no product name, it throws error 400&quot;, async () =&amp;gt; {
  let errorWeExceptFor = null;
  try {
    const result = await addNewProduct({});
  } catch (error) {
    expect(error.code).to.equal(&quot;InvalidInput&quot;);
    errorWeExceptFor = error;
  }
  expect(errorWeExceptFor).not.to.be.null;
  //if this assertion fails, the tests results/reports will only show
  //that some value is null, there won&#39;t be a word about a missing Exception
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: A human-readable expectation that could be understood easily, maybe even by QA or technical PM&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When no product name, it throws error 400&quot;, async () =&amp;gt; {
  await expect(addNewProduct({}))
    .to.eventually.throw(AppError)
    .with.property(&quot;code&quot;, &quot;InvalidInput&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 1.11 Tag your tests&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Different tests must run on different scenarios: quick smoke, IO-less, tests should run when a developer saves or commits a file, full end-to-end tests usually run when a new pull request is submitted, etc. This can be achieved by tagging tests with keywords like #cold #api #sanity so you can grep with your testing harness and invoke the desired subset. For example, this is how you would invoke only the sanity test group with Mocha: mocha‚Ää‚Äî‚Äägrep ‚Äòsanity‚Äô &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Running all the tests, including tests that perform dozens of DB queries, any time a developer makes a small change can be extremely slow and keeps developers away from running tests&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Tagging tests as ‚Äò#cold-test‚Äô allows the test runner to execute only fast tests (Cold===quick tests that are doing no IO and can be executed frequently even as the developer is typing)&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//this test is fast (no DB) and we&#39;re tagging it correspondigly
//now the user/CI can run it frequently
describe(&quot;Order service&quot;, function() {
  describe(&quot;Add new order #cold-test #sanity&quot;, function() {
    test(&quot;Scenario - no currency was supplied. Expectation - Use the default currency #sanity&quot;, function() {
      //code logic here
    });
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 1.12 Categorize tests under at least 2 levels&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Apply some structure to your test suite so an occasional visitor could easily understand the requirements (tests are the best documentation) and the various scenarios that are being tested. A common method for this is by placing at least 2 &#39;describe&#39; blocks above your tests: the 1st is for the name of the unit under test and the 2nd for additional level of categorization like the scenario or custom categories (see code examples and print screen below). Doing so will also greatly improve the test reports: The reader will easily infer the tests categories, delve into the desired section and correlate failing tests. In addition, it will get much easier for a developer to navigate through the code of a suite with many tests. There are multiple alternative structures for test suite that you may consider like &lt;a href=&quot;https://github.com/searls/jasmine-given&quot;&gt;given-when-then&lt;/a&gt; and &lt;a href=&quot;https://github.com/ericelliott/riteway&quot;&gt;RITE&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; When looking at a report with flat and long list of tests, the reader have to skim-read through long texts to conclude the major scenarios and correlate the commonality of failing tests. Consider the following case: When 7/100 tests fail, looking at a flat list will demand reading the failing tests text to see how they relate to each other. However, in a hierarchical report all of them could be under the same flow or category and the reader will quickly infer what or at least where is the root failure cause&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Structuring suite with the name of unit under test and scenarios will lead to the convenient report that is shown below&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Unit under test
describe(&quot;Transfer service&quot;, () =&amp;gt; {
  //Scenario
  describe(&quot;When no credit&quot;, () =&amp;gt; {
    //Expectation
    test(&quot;Then the response status should decline&quot;, () =&amp;gt; {});

    //Expectation
    test(&quot;Then it should send email to admin&quot;, () =&amp;gt; {});
  });
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/hierarchical-report.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-pattern Example: A flat list of tests will make it harder for the reader to identify the user stories and correlate failing tests&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;Then the response status should decline&quot;, () =&amp;gt; {});

test(&quot;Then it should send email&quot;, () =&amp;gt; {});

test(&quot;Then there should not be a new transfer record&quot;, () =&amp;gt; {});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/flat-report.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
 &lt;br&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è1.13 Other generic good testing hygiene&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; This post is focused on testing advice that is related to, or at least can be exemplified with Node JS. This bullet, however, groups few non-Node related tips that are well-known&lt;/p&gt; 
&lt;p&gt;Learn and practice &lt;a href=&quot;https://www.sm-cloud.com/book-review-test-driven-development-by-example-a-tldr/&quot;&gt;TDD principles&lt;/a&gt;‚Ää‚Äî‚Ääthey are extremely valuable for many but don‚Äôt get intimidated if they don‚Äôt fit your style, you‚Äôre not the only one. Consider writing the tests before the code in a &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html&quot;&gt;red-green-refactor style&lt;/a&gt;, ensure each test checks exactly one thing, when you find a bug‚Ää‚Äî‚Ääbefore fixing write a test that will detect this bug in the future, let each test fail at least once before turning green, start a module by writing a quick and simplistic code that satisfies the test - then refactor gradually and take it to a production grade level, avoid any dependency on the environment (paths, OS, etc) &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; You‚Äòll miss pearls of wisdom that were collected for decades&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;Section 2Ô∏è‚É£: Backend Testing&lt;/h1&gt; 
&lt;h2&gt;‚ö™ Ô∏è2.1 Enrich your testing portfolio: Look beyond unit tests and the pyramid&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; The &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;testing pyramid&lt;/a&gt;, though 10&amp;gt; years old, is a great and relevant model that suggests three testing types and influences most developers‚Äô testing strategy. At the same time, more than a handful of shiny new testing techniques emerged and are hiding in the shadows of the testing pyramid. Given all the dramatic changes that we‚Äôve seen in the recent 10 years (Microservices, cloud, serverless), is it even possible that one quite-old model will suit &lt;em&gt;all&lt;/em&gt; types of applications? shouldn‚Äôt the testing world consider welcoming new testing techniques?&lt;/p&gt; 
&lt;p&gt;Don‚Äôt get me wrong, in 2019 the testing pyramid, TDD and unit tests are still a powerful technique and are probably the best match for many applications. Only like any other model, despite its usefulness, &lt;a href=&quot;https://en.wikipedia.org/wiki/All_models_are_wrong&quot;&gt;it must be wrong sometimes&lt;/a&gt;. For example, consider an IoT application that ingests many events into a message-bus like Kafka/RabbitMQ, which then flow into some data-warehouse and are eventually queried by some analytics UI. Should we really spend 50% of our testing budget on writing unit tests for an application that is integration-centric and has almost no logic? As the diversity of application types increase (bots, crypto, Alexa-skills) greater are the chances to find scenarios where the testing pyramid is not the best match.&lt;/p&gt; 
&lt;p&gt;It‚Äôs time to enrich your testing portfolio and become familiar with more testing types (the next bullets suggest few ideas), mind models like the testing pyramid but also match testing types to real-world problems that you‚Äôre facing (‚ÄòHey, our API is broken, let‚Äôs write consumer-driven contract testing!‚Äô), diversify your tests like an investor that build a portfolio based on risk analysis‚Ää‚Äî‚Ääassess where problems might arise and match some prevention measures to mitigate those potential risks&lt;/p&gt; 
&lt;p&gt;A word of caution: the TDD argument in the software world takes a typical false-dichotomy face, some preach to use it everywhere, others think it‚Äôs the devil. Everyone who speaks in absolutes is wrong :]&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; You‚Äôre going to miss some tools with amazing ROI, some like Fuzz, lint, and mutation can provide value in 10 minutes&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Cindy Sridharan suggests a rich testing portfolio in her amazing post ‚ÄòTesting Microservices‚Ää‚Äî‚Ääthe same way‚Äô&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-12-rich-testing.jpeg&quot; alt=&quot;alt text&quot; title=&quot;Cindy Sridharan suggests a rich testing portfolio in her amazing post ‚ÄòTesting Microservices‚Ää‚Äî‚Ääthe sane way‚Äô&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;‚ò∫Ô∏èExample: &lt;/strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-2zP494wdUY&amp;amp;feature=youtube&quot; data-href=&quot;https://www.youtube.com/watch?v=-2zP494wdUY&amp;amp;feature=youtu.be&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-2zP494wdUY&amp;amp;feature=youtu.be&quot;&gt;YouTube: ‚ÄúBeyond Unit Tests: 5 Shiny Node.JS Test Types (2018)‚Äù (Yoni Goldberg)&lt;/a&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-12-Yoni-Goldberg-Testing.jpeg&quot; alt=&quot;alt text&quot; title=&quot;A test name that constitutes 3 parts&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è2.2 Component testing might be your best affair&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Each unit test covers a tiny portion of the application and it‚Äôs expensive to cover the whole, whereas end-to-end testing easily covers a lot of ground but is flaky and slower, why not apply a balanced approach and write tests that are bigger than unit tests but smaller than end-to-end testing? Component testing is the unsung song of the testing world‚Ää‚Äî‚Ääthey provide the best from both worlds: reasonable performance and a possibility to apply TDD patterns + realistic and great coverage.&lt;/p&gt; 
&lt;p&gt;Component tests focus on the Microservice ‚Äòunit‚Äô, they work against the API, don‚Äôt mock anything which belongs to the Microservice itself (e.g. real DB, or at least the in-memory version of that DB) but stub anything that is external like calls to other Microservices. By doing so, we test what we deploy, approach the app from outwards to inwards and gain great confidence in a reasonable amount of time. &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; You may spend long days on writing unit tests to find out that you got only 20% system coverage&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Supertest allows approaching Express API in-process (fast and cover many layers)&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-13-component-test-yoni-goldberg.png&quot; alt=&quot;alt text&quot; title=&quot; [Supertest](https://www.npmjs.com/package/supertest) allows approaching Express API in-process (fast and cover many layers)&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è2.3 Ensure new releases don‚Äôt break the API using contract tests&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; So your Microservice has multiple clients, and you run multiple versions of the service for compatibility reasons (keeping everyone happy). Then you change some field and ‚Äòboom!‚Äô, some important client who relies on this field is angry. This is the Catch-22 of the integration world: It‚Äôs very challenging for the server side to consider all the multiple client expectations‚Ää‚Äî‚ÄäOn the other hand, the clients can‚Äôt perform any testing because the server controls the release dates. &lt;a href=&quot;https://docs.pact.io/&quot;&gt;Consumer-driven contracts and the framework PACT&lt;/a&gt; were born to formalize this process with a very disruptive approach‚Ää‚Äî‚Äänot the server defines the test plan of itself rather the client defines the tests of the‚Ä¶ server! PACT can record the client expectation and put in a shared location, ‚Äúbroker‚Äù, so the server can pull the expectations and run on every build using PACT library to detect broken contracts‚Ää‚Äî‚Ääa client expectation that is not met. By doing so, all the server-client API mismatches are caught early during build/CI and might save you a great deal of frustration &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; The alternatives are exhausting manual testing or deployment fear&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example:&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20PACT-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with PACT&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-14-testing-best-practices-contract-flow.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 2.4 Test your middlewares in isolation&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Many avoid Middleware testing because they represent a small portion of the system and require a live Express server. Both reasons are wrong‚Ää‚Äî‚ÄäMiddlewares are small but affect all or most of the requests and can be tested easily as pure functions that get {req,res} JS objects. To test a middleware function one should just invoke it and spy (&lt;a href=&quot;https://www.npmjs.com/package/sinon&quot;&gt;using Sinon for example&lt;/a&gt;) on the interaction with the {req,res} objects to ensure the function performed the right action. The library &lt;a href=&quot;https://www.npmjs.com/package/node-mocks-http&quot;&gt;node-mock-http&lt;/a&gt; takes it even further and factors the {req,res} objects along with spying on their behavior. For example, it can assert whether the http status that was set on the res object matches the expectation (See example below) &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; A bug in Express middleware === a bug in all or most requests&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt;Doing It Right Example: Testing middleware in isolation without issuing network calls and waking-up the entire Express machine&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Jest&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//the middleware we want to test
const unitUnderTest = require(&quot;./middleware&quot;);
const httpMocks = require(&quot;node-mocks-http&quot;);
//Jest syntax, equivelant to describe() &amp;amp; it() in Mocha
test(&quot;A request without authentication header, should return http status 403&quot;, () =&amp;gt; {
  const request = httpMocks.createRequest({
    method: &quot;GET&quot;,
    url: &quot;/user/42&quot;,
    headers: {
      authentication: &quot;&quot;
    }
  });
  const response = httpMocks.createResponse();
  unitUnderTest(request, response);
  expect(response.statusCode).toBe(403);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è2.5 Measure and refactor using static analysis tools&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Using static analysis tools helps by giving objective ways to improve code quality and keep your code maintainable. You can add static analysis tools to your CI build to abort when it finds code smells. Its main selling points over plain linting are the ability to inspect quality in the context of multiple files (e.g. detect duplications), perform advanced analysis (e.g. code complexity) and follow the history and progress of code issues. Two examples of tools you can use are &lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;SonarQube&lt;/a&gt; (4,900+ &lt;a href=&quot;https://github.com/SonarSource/sonarqube&quot;&gt;stars&lt;/a&gt;) and &lt;a href=&quot;https://codeclimate.com/&quot;&gt;Code Climate&lt;/a&gt; (2,000+ &lt;a href=&quot;https://github.com/codeclimate/codeclimate&quot;&gt;stars&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;Credit: &lt;a href=&quot;https://github.com/TheHollidayInn&quot; data-href=&quot;https://github.com/TheHollidayInn&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/TheHollidayInn&quot;&gt;Keith Holliday&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; With poor code quality, bugs and performance will always be an issue that no shiny new library or state of the art features can fix&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: CodeClimate, a commercial tool that can identify complex methods:&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Code%20Climate-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with CodeClimate&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-16-yoni-goldberg-quality.png&quot; alt=&quot;alt text&quot; title=&quot;CodeClimate, a commercial tool that can identify complex methods:&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 2.6 Check your readiness for Node-related chaos&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Weirdly, most software testings are about logic &amp;amp; data only, but some of the worst things that happen (and are really hard to mitigate) are infrastructural issues. For example, did you ever test what happens when your process memory is overloaded, or when the server/process dies, or does your monitoring system realizes when the API becomes 50% slower?. To test and mitigate these type of bad things‚Ää‚Äî‚Ää&lt;a href=&quot;https://principlesofchaos.org/&quot;&gt;Chaos engineering&lt;/a&gt; was born by Netflix. It aims to provide awareness, frameworks and tools for testing our app resiliency for chaotic issues. For example, one of its famous tools, &lt;a href=&quot;https://github.com/Netflix/chaosmonkey&quot;&gt;the chaos monkey&lt;/a&gt;, randomly kills servers to ensure that our service can still serve users and not relying on a single server (there is also a Kubernetes version, &lt;a href=&quot;https://github.com/asobti/kube-monkey&quot;&gt;kube-monkey&lt;/a&gt;, that kills pods). All these tools work on the hosting/platform level, but what if you wish to test and generate pure Node chaos like check how your Node process copes with uncaught errors, unhandled promise rejection, v8 memory overloaded with the max allowed of 1.7GB or whether your UX remains satisfactory when the event loop gets blocked often? to address this I‚Äôve written, &lt;a href=&quot;https://github.com/i0natan/node-chaos-monkey&quot;&gt;node-chaos&lt;/a&gt; (alpha) which provides all sort of Node-related chaotic acts &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; No escape here, Murphy‚Äôs law will hit your production without mercy&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: : Node-chaos can generate all sort of Node.js pranks so you can test how resilience is your app to chaos&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-17-yoni-goldberg-chaos-monkey-nodejs.png&quot; alt=&quot;alt text&quot; title=&quot;Node-chaos can generate all sort of Node.js pranks so you can test how resilience is your app to chaos&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è2.7 Avoid global test fixtures and seeds, add data per-test&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Going by the golden rule (bullet 0), each test should add and act on its own set of DB rows to prevent coupling and easily reason about the test flow. In reality, this is often violated by testers who seed the DB with data before running the tests (also known as ‚Äòtest fixture‚Äô) for the sake of performance improvement. While performance is indeed a valid concern‚Ää‚Äî‚Ääit can be mitigated (see ‚ÄúComponent testing‚Äù bullet), however, test complexity is a much painful sorrow that should govern other considerations most of the time. Practically, make each test case explicitly add the DB records it needs and act only on those records. If performance becomes a critical concern‚Ää‚Äî‚Ääa balanced compromise might come in the form of seeding the only suite of tests that are not mutating data (e.g. queries) &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Few tests fail, a deployment is aborted, our team is going to spend precious time now, do we have a bug? let‚Äôs investigate, oh no‚Ää‚Äî‚Ääit seems that two tests were mutating the same seed data&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: tests are not independent and rely on some global hook to feed global DB data&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Mocha-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Mocha&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;before(async () =&amp;gt; {
  //adding sites and admins data to our DB. Where is the data? outside. At some external json or migration framework
  await DB.AddSeedDataFromJson(&#39;seed.json&#39;);
});
it(&quot;When updating site name, get successful confirmation&quot;, async () =&amp;gt; {
  //I know that site name &quot;portal&quot; exists - I saw it in the seed files
  const siteToUpdate = await SiteService.getSiteByName(&quot;Portal&quot;);
  const updateNameResult = await SiteService.changeName(siteToUpdate, &quot;newName&quot;);
  expect(updateNameResult).to.be(true);
});
it(&quot;When querying by site name, get the right site&quot;, async () =&amp;gt; {
  //I know that site name &quot;portal&quot; exists - I saw it in the seed files
  const siteToCheck = await SiteService.getSiteByName(&quot;Portal&quot;);
  expect(siteToCheck.name).to.be.equal(&quot;Portal&quot;); //Failure! The previous test change the name :[
});

&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: We can stay within the test, each test acts on its own set of data&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When updating site name, get successful confirmation&quot;, async () =&amp;gt; {
  //test is adding a fresh new records and acting on the records only
  const siteUnderTest = await SiteService.addSite({
    name: &quot;siteForUpdateTest&quot;
  });
  const updateNameResult = await SiteService.changeName(siteUnderTest, &quot;newName&quot;);
  expect(updateNameResult).to.be(true);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;Section 3Ô∏è‚É£: Frontend Testing&lt;/h1&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.1 Separate UI from functionality&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; When focusing on testing component logic, UI details become a noise that should be extracted, so your tests can focus on pure data. Practically, extract the desired data from the markup in an abstract way that is not too coupled to the graphic implementation, assert only on pure data (vs HTML/CSS graphic details) and disable animations that slow down. You might get tempted to avoid rendering and test only the back part of the UI (e.g. services, actions, store) but this will result in fictional tests that don&#39;t resemble the reality and won&#39;t reveal cases where the right data doesn&#39;t even arrive in the UI&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; The pure calculated data of your test might be ready in 10ms, but then the whole test will last 500ms (100 tests = 1 min) due to some fancy and irrelevant animation&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Separating out the UI details&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with React&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React%20Testing%20Library-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with react-testing-library&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;When users-list is flagged to show only VIP, should display only VIP members&quot;, () =&amp;gt; {
  // Arrange
  const allUsers = [{ id: 1, name: &quot;Yoni Goldberg&quot;, vip: false }, { id: 2, name: &quot;John Doe&quot;, vip: true }];

  // Act
  const { getAllByTestId } = render(&amp;lt;UsersList users={allUsers} showOnlyVIP={true} /&amp;gt;);

  // Assert - Extract the data from the UI first
  const allRenderedUsers = getAllByTestId(&quot;user&quot;).map(uiElement =&amp;gt; uiElement.textContent);
  const allRealVIPUsers = allUsers.filter(user =&amp;gt; user.vip).map(user =&amp;gt; user.name);
  expect(allRenderedUsers).toEqual(allRealVIPUsers); //compare data with data, no UI here
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: Assertion mix UI details and data&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;When flagging to show only VIP, should display only VIP members&quot;, () =&amp;gt; {
  // Arrange
  const allUsers = [{ id: 1, name: &quot;Yoni Goldberg&quot;, vip: false }, { id: 2, name: &quot;John Doe&quot;, vip: true }];

  // Act
  const { getAllByTestId } = render(&amp;lt;UsersList users={allUsers} showOnlyVIP={true} /&amp;gt;);

  // Assert - Mix UI &amp;amp; data in assertion
  expect(getAllByTestId(&quot;user&quot;)).toEqual(&#39;[&amp;lt;li data-test-id=&quot;user&quot;&amp;gt;John Doe&amp;lt;/li&amp;gt;]&#39;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.2 Query HTML elements based on attributes that are unlikely to change&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Query HTML elements based on attributes that are likely to survive graphic changes unlike CSS selectors and like form labels. If the designated element doesn&#39;t have such attributes, create a dedicated test attribute like &#39;test-id-submit-button&#39;. Going this route not only ensures that your functional/logic tests never break because of look &amp;amp; feel changes but also it becomes clear to the entire team that this element and attribute are utilized by tests and shouldn&#39;t get removed&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; You want to test the login functionality that spans many components, logic and services, everything is set up perfectly - stubs, spies, Ajax calls are isolated. All seems perfect. Then the test fails because the designer changed the div CSS class from &#39;thick-border&#39; to &#39;thin-border&#39;&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Querying an element using a dedicated attribute for testing&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with React&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;// the markup code (part of React component)
&amp;lt;h3&amp;gt;
  &amp;lt;Badge pill className=&quot;fixed_badge&quot; variant=&quot;dark&quot;&amp;gt;
    &amp;lt;span data-test-id=&quot;errorsLabel&quot;&amp;gt;{value}&amp;lt;/span&amp;gt;
    &amp;lt;!-- note the attribute data-test-id --&amp;gt;
  &amp;lt;/Badge&amp;gt;
&amp;lt;/h3&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// this example is using react-testing-library
test(&quot;Whenever no data is passed to metric, show 0 as default&quot;, () =&amp;gt; {
  // Arrange
  const metricValue = undefined;

  // Act
  const { getByTestId } = render(&amp;lt;dashboardMetric value={undefined} /&amp;gt;);

  expect(getByTestId(&quot;errorsLabel&quot;).text()).toBe(&quot;0&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: Relying on CSS attributes&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- the markup code (part of React component) --&amp;gt;
&amp;lt;span id=&quot;metric&quot; className=&quot;d-flex-column&quot;&amp;gt;{value}&amp;lt;/span&amp;gt;
&amp;lt;!-- what if the designer changes the classs? --&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// this exammple is using enzyme
test(&quot;Whenever no data is passed, error metric shows zero&quot;, () =&amp;gt; {
  // ...

  expect(wrapper.find(&quot;[className=&#39;d-flex-column&#39;]&quot;).text()).toBe(&quot;0&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.3 Whenever possible, test with a realistic and fully rendered component&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Whenever reasonably sized, test your component from outside like your users do, fully render the UI, act on it and assert that the rendered UI behaves as expected. Avoid all sort of mocking, partial and shallow rendering - this approach might result in untrapped bugs due to lack of details and harden the maintenance as the tests mess with the internals (see bullet &lt;a href=&quot;https://github.com/goldbergyoni/javascript-testing-best-practices#-%EF%B8%8F-14-stick-to-black-box-testing-test-only-public-methods&quot;&gt;&#39;Favour blackbox testing&#39;&lt;/a&gt;). If one of the child components is significantly slowing down (e.g. animation) or complicating the setup - consider explicitly replacing it with a fake&lt;/p&gt; 
&lt;p&gt;With all that said, a word of caution is in order: this technique works for small/medium components that pack a reasonable size of child components. Fully rendering a component with too many children will make it hard to reason about test failures (root cause analysis) and might get too slow. In such cases, write only a few tests against that fat parent component and more tests against its children&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; When poking into a component&#39;s internal by invoking its private methods, and checking the inner state - you would have to refactor all tests when refactoring the components implementation. Do you really have a capacity for this level of maintenance?&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Working realistically with a fully rendered component&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with React&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Enzyme-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Enzyme&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Calendar extends React.Component {
  static defaultProps = { showFilters: false };

  render() {
    return (
      &amp;lt;div&amp;gt;
        A filters panel with a button to hide/show filters
        &amp;lt;FiltersPanel showFilter={showFilters} title=&quot;Choose Filters&quot; /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

//Examples use React &amp;amp; Enzyme
test(&quot;Realistic approach: When clicked to show filters, filters are displayed&quot;, () =&amp;gt; {
  // Arrange
  const wrapper = mount(&amp;lt;Calendar showFilters={false} /&amp;gt;);

  // Act
  wrapper.find(&quot;button&quot;).simulate(&quot;click&quot;);

  // Assert
  expect(wrapper.text().includes(&quot;Choose Filter&quot;));
  // This is how the user will approach this element: by text
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: Mocking the reality with shallow rendering&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;Shallow/mocked approach: When clicked to show filters, filters are displayed&quot;, () =&amp;gt; {
  // Arrange
  const wrapper = shallow(&amp;lt;Calendar showFilters={false} title=&quot;Choose Filter&quot; /&amp;gt;);

  // Act
  wrapper
    .find(&quot;filtersPanel&quot;)
    .instance()
    .showFilters();
  // Tap into the internals, bypass the UI and invoke a method. White-box approach

  // Assert
  expect(wrapper.find(&quot;Filter&quot;).props()).toEqual({ title: &quot;Choose Filter&quot; });
  // what if we change the prop name or don&#39;t pass anything relevant?
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.4 Don&#39;t sleep, use frameworks built-in support for async events. Also try to speed things up&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; In many cases, the unit under test completion time is just unknown (e.g. animation suspends element appearance) - in that case, avoid sleeping (e.g. setTimeOut) and prefer more deterministic methods that most platforms provide. Some libraries allows awaiting on operations (e.g. &lt;a href=&quot;https://docs.cypress.io/guides/references/best-practices.html#Unnecessary-Waiting&quot;&gt;Cypress cy.request(&#39;url&#39;)&lt;/a&gt;), other provide API for waiting like &lt;a href=&quot;https://testing-library.com/docs/guide-disappearance&quot;&gt;@testing-library/dom method wait(expect(element))&lt;/a&gt;. Sometimes a more elegant way is to stub the slow resource, like API for example, and then once the response moment becomes deterministic the component can be explicitly re-rendered. When depending upon some external component that sleeps, it might turn useful to &lt;a href=&quot;https://jestjs.io/docs/en/timer-mocks&quot;&gt;hurry-up the clock&lt;/a&gt;. Sleeping is a pattern to avoid because it forces your test to be slow or risky (when waiting for a too short period). Whenever sleeping and polling is inevitable and there&#39;s no support from the testing framework, some npm libraries like &lt;a href=&quot;https://www.npmjs.com/package/wait-for-expect&quot;&gt;wait-for-expect&lt;/a&gt; can help with a semi-deterministic solution &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; When sleeping for a long time, tests will be an order of magnitude slower. When trying to sleep for small numbers, test will fail when the unit under test didn&#39;t respond in a timely fashion. So it boils down to a trade-off between flakiness and bad performance&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: E2E API that resolves only when the async operations is done (Cypress)&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cypress-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Cypress to illustrate the idea&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React%20Testing%20Library-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with react-testing-library&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// using Cypress
cy.get(&quot;#show-products&quot;).click(); // navigate
cy.wait(&quot;@products&quot;); // wait for route to appear
// this line will get executed only when the route is ready
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Testing library that waits for DOM elements&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// @testing-library/dom
test(&quot;movie title appears&quot;, async () =&amp;gt; {
  // element is initially not present...

  // wait for appearance
  await wait(() =&amp;gt; {
    expect(getByText(&quot;the lion king&quot;)).toBeInTheDocument();
  });

  // wait for appearance and return the element
  const movie = await waitForElement(() =&amp;gt; getByText(&quot;the lion king&quot;));
});
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: custom sleep code&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&quot;movie title appears&quot;, async () =&amp;gt; {
  // element is initially not present...

  // custom wait logic (caution: simplistic, no timeout)
  const interval = setInterval(() =&amp;gt; {
    const found = getByText(&quot;the lion king&quot;);
    if (found) {
      clearInterval(interval);
      expect(getByText(&quot;the lion king&quot;)).toBeInTheDocument();
    }
  }, 100);

  // wait for appearance and return the element
  const movie = await waitForElement(() =&amp;gt; getByText(&quot;the lion king&quot;));
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.5 Watch how the content is served over the network&lt;/h2&gt; 
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20Google%20LightHouse-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with Lighthouse&quot;&gt;&lt;/p&gt; 
&lt;p&gt;‚úÖ &lt;strong&gt;Do:&lt;/strong&gt; Apply some active monitor that ensures the page load under real network is optimized - this includes any UX concern like slow page load or un-minified bundle. The inspection tools market is no short: basic tools like &lt;a href=&quot;https://www.pingdom.com/&quot;&gt;pingdom&lt;/a&gt;, AWS CloudWatch, &lt;a href=&quot;https://cloud.google.com/monitoring/uptime-checks/&quot;&gt;gcp StackDriver&lt;/a&gt; can be easily configured to watch whether the server is alive and response under a reasonable SLA. This only scratches the surface of what might get wrong, hence it&#39;s preferable to opt for tools that specialize in frontend (e.g. &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;lighthouse&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;pagespeed&lt;/a&gt;) and perform richer analysis. The focus should be on symptoms, metrics that directly affect the UX, like page load time, &lt;a href=&quot;https://scotch.io/courses/10-web-performance-audit-tips-for-your-next-billion-users-in-2018/fmp-first-meaningful-paint&quot;&gt;meaningful paint&lt;/a&gt;, &lt;a href=&quot;https://calibreapp.com/blog/time-to-interactive/&quot;&gt;time until the page gets interactive (TTI)&lt;/a&gt;. On top of that, one may also watch for technical causes like ensuring the content is compressed, time to the first byte, optimize images, ensuring reasonable DOM size, SSL and many others. It&#39;s advisable to have these rich monitors both during development, as part of the CI and most important - 24x7 over the production&#39;s servers/CDN&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; It must be disappointing to realize that after such great care for crafting a UI, 100% functional tests passing and sophisticated bundling - the UX is horrible and slow due to CDN misconfiguration&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Lighthouse page load inspection report&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/lighthouse2.png&quot; alt=&quot;&quot; title=&quot;Lighthouse page load inspection report&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.6 Stub flaky and slow resources like backend APIs&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; When coding your mainstream tests (not E2E tests), avoid involving any resource that is beyond your responsibility and control like backend API and use stubs instead (i.e. test double). Practically, instead of real network calls to APIs, use some test double library (like &lt;a href=&quot;https://sinonjs.org/&quot;&gt;Sinon&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/testdouble&quot;&gt;Test doubles&lt;/a&gt;, etc) for stubbing the API response. The main benefit is preventing flakiness - testing or staging APIs by definition are not highly stable and from time to time will fail your tests although YOUR component behaves just fine (production env was not meant for testing and it usually throttles requests). Doing this will allow simulating various API behavior that should drive your component behavior as when no data was found or the case when API throws an error. Last but not least, network calls will greatly slow down the tests&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; The average test runs no longer than few ms, a typical API call last 100ms&amp;gt;, this makes each test ~20x slower&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Stubbing or intercepting API calls&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with React&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A7%20Example%20using%20React%20Testing%20Library-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples with react-testing-library&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// unit under test
export default function ProductsList() {
  const [products, setProducts] = useState(false);

  const fetchProducts = async () =&amp;gt; {
    const products = await axios.get(&quot;api/products&quot;);
    setProducts(products);
  };

  useEffect(() =&amp;gt; {
    fetchProducts();
  }, []);

  return products ? &amp;lt;div&amp;gt;{products}&amp;lt;/div&amp;gt; : &amp;lt;div data-test-id=&quot;no-products-message&quot;&amp;gt;No products&amp;lt;/div&amp;gt;;
}

// test
test(&quot;When no products exist, show the appropriate message&quot;, () =&amp;gt; {
  // Arrange
  nock(&quot;api&quot;)
    .get(`/products`)
    .reply(404);

  // Act
  const { getByTestId } = render(&amp;lt;ProductsList /&amp;gt;);

  // Assert
  expect(getByTestId(&quot;no-products-message&quot;)).toBeTruthy();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.7 Have very few end-to-end tests that spans the whole system&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Although E2E (end-to-end) usually means UI-only testing with a real browser (See &lt;a href=&quot;https://github.com/goldbergyoni/javascript-testing-best-practices#-%EF%B8%8F-36-stub-flaky-and-slow-resources-like-backend-apis&quot;&gt;bullet 3.6&lt;/a&gt;), for other they mean tests that stretch the entire system including the real backend. The latter type of tests is highly valuable as they cover integration bugs between frontend and backend that might happen due to a wrong understanding of the exchange schema. They are also an efficient method to discover backend-to-backend integration issues (e.g. Microservice A sends the wrong message to Microservice B) and even to detect deployment failures - there are no backend frameworks for E2E testing that are as friendly and mature as UI frameworks like &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt; and &lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot;&gt;Puppeteer&lt;/a&gt;. The downside of such tests is the high cost of configuring an environment with so many components, and mostly their brittleness - given 50 microservices, even if one fails then the entire E2E just failed. For that reason, we should use this technique sparingly and probably have 1-10 of those and no more. That said, even a small number of E2E tests are likely to catch the type of issues they are targeted for - deployment &amp;amp; integration faults. It&#39;s advisable to run those over a production-like staging environment&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; UI might invest much in testing its functionality only to realizes very late that the backend returned payload (the data schema the UI has to work with) is very different than expected&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.8 Speed-up E2E tests by reusing login credentials&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; In E2E tests that involve a real backend and rely on a valid user token for API calls, it doesn&#39;t payoff to isolate the test to a level where a user is created and logged-in in every request. Instead, login only once before the tests execution start (i.e. before-all hook), save the token in some local storage and reuse it across requests. This seem to violate one of the core testing principle - keep the test autonomous without resources coupling. While this is a valid worry, in E2E tests performance is a key concern and creating 1-3 API requests before starting each individual tests might lead to horrible execution time. Reusing credentials doesn&#39;t mean the tests have to act on the same user records - if relying on user records (e.g. test user payments history) than make sure to generate those records as part of the test and avoid sharing their existence with other tests. Also remember that the backend can be faked - if your tests are focused on the frontend it might be better to isolate it and stub the backend API (see &lt;a href=&quot;https://github.com/goldbergyoni/javascript-testing-best-practices#-%EF%B8%8F-36-stub-flaky-and-slow-resources-like-backend-apis&quot;&gt;bullet 3.6&lt;/a&gt;).&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Given 200 test cases and assuming login=100ms = 20 seconds only for logging-in again and again&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Logging-in before-all and not before-each&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cypress-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Cypress to illustrate the idea&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let authenticationToken;

// happens before ALL tests run
before(() =&amp;gt; {
  cy.request(&#39;POST&#39;, &#39;http://localhost:3000/login&#39;, {
    username: Cypress.env(&#39;username&#39;),
    password: Cypress.env(&#39;password&#39;),
  })
  .its(&#39;body&#39;)
  .then((responseFromLogin) =&amp;gt; {
    authenticationToken = responseFromLogin.token;
  })
})

// happens before EACH test
beforeEach(setUser =&amp;gt; () {
  cy.visit(&#39;/home&#39;, {
    onBeforeLoad (win) {
      win.localStorage.setItem(&#39;token&#39;, JSON.stringify(authenticationToken))
    },
  })
})

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.9 Have one E2E smoke test that just travels across the site map&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; For production monitoring and development-time sanity check, run a single E2E test that visits all/most of the site pages and ensures no one breaks. This type of test brings a great return on investment as it&#39;s very easy to write and maintain, but it can detect any kind of failure including functional, network and deployment issues. Other styles of smoke and sanity checking are not as reliable and exhaustive - some ops teams just ping the home page (production) or developers who run many integration tests which don&#39;t discover packaging and browser issues. Goes without saying that the smoke test doesn&#39;t replace functional tests rather just aim to serve as a quick smoke detector&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Everything might seem perfect, all tests pass, production health-check is also positive but the Payment component had some packaging issue and only the /Payment route is not rendering&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Smoke travelling across all pages&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cypress-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Cypress to illustrate the idea&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&quot;When doing smoke testing over all page, should load them all successfully&quot;, () =&amp;gt; {
  // exemplified using Cypress but can be implemented easily
  // using any E2E suite
  cy.visit(&quot;https://mysite.com/home&quot;);
  cy.contains(&quot;Home&quot;);
  cy.contains(&quot;https://mysite.com/Login&quot;);
  cy.contains(&quot;Login&quot;);
  cy.contains(&quot;https://mysite.com/About&quot;);
  cy.contains(&quot;About&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;br&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.10 Expose the tests as a live collaborative document&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Besides increasing app reliability, tests bring another attractive opportunity to the table - serve as live app documentation. Since tests inherently speak at a less-technical and product/UX language, using the right tools they can serve as a communication artifact that greatly aligns all the peers - developers and their customers. For example, some frameworks allow expressing the flow and expectations (i.e. tests plan) using a human-readable language so any stakeholder, including product managers, can read, approve and collaborate on the tests which just became the live requirements document. This technique is also being referred to as &#39;acceptance test&#39; as it allows the customer to define his acceptance criteria in plain language. This is &lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD (behavior-driven testing)&lt;/a&gt; at its purest form. One of the popular frameworks that enable this is &lt;a href=&quot;https://github.com/cucumber/cucumber-js&quot;&gt;Cucumber which has a JavaScript flavor&lt;/a&gt;, see example below. Another similar yet different opportunity, &lt;a href=&quot;https://storybook.js.org/&quot;&gt;StoryBook&lt;/a&gt;, allows exposing UI components as a graphic catalog where one can walk through the various states of each component (e.g. render a grid w/o filters, render that grid with multiple rows or with none, etc), see how it looks like, and how to trigger that state - this can appeal also to product folks but mostly serves as live doc for developers who consume those components.&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; After investing top resources on testing, it&#39;s just a pity not to leverage this investment and win great value&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Describing tests in human-language using cucumber-js&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cucumber-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Examples using Cucumber&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// this is how one can describe tests using cucumber: plain language that allows anyone to understand and collaborate

Feature: Twitter new tweet

  I want to tweet something in Twitter

  @focus
  Scenario: Tweeting from the home page
    Given I open Twitter home
    Given I click on &quot;New tweet&quot; button
    Given I type &quot;Hello followers!&quot; in the textbox
    Given I click on &quot;Submit&quot; button
    Then I see message &quot;Tweet saved&quot;

&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Visualizing our components, their various states and inputs using Storybook&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20StoryBook-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using StoryBook&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/story-book.jpg&quot; alt=&quot;alt text&quot; title=&quot;Storybook&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 3.11 Detect visual issues with automated tools&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Setup automated tools to capture UI screenshots when changes are presented and detect visual issues like content overlapping or breaking. This ensures that not only the right data is prepared but also the user can conveniently see it. This technique is not widely adopted, our testing mindset leans toward functional tests but it&#39;s the visuals what the user experience and with so many device types it&#39;s very easy to overlook some nasty UI bug. Some free tools can provide the basics - generate and save screenshots for the inspection of human eyes. While this approach might be sufficient for small apps, it&#39;s flawed as any other manual testing that demands human labor anytime something changes. On the other hand, it&#39;s quite challenging to detect UI issues automatically due to the lack of clear definition - this is where the field of &#39;Visual Regression&#39; chime in and solve this puzzle by comparing old UI with the latest changes and detect differences. Some OSS/free tools can provide some of this functionality (e.g. &lt;a href=&quot;https://github.com/BBC-News/wraith&quot;&gt;wraith&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/%5Bhttps://github.com/HuddleEng/PhantomCSS%5D(https://github.com/HuddleEng/PhantomCSS)&quot;&gt;PhantomCSS&lt;/a&gt; but might charge significant setup time. The commercial line of tools (e.g. &lt;a href=&quot;https://applitools.com/&quot;&gt;Applitools&lt;/a&gt;, &lt;a href=&quot;https://percy.io/&quot;&gt;Percy.io&lt;/a&gt;) takes is a step further by smoothing the installation and packing advanced features like management UI, alerting, smart capturing by eliminating &#39;visual noise&#39; (e.g. ads, animations) and even root cause analysis of the DOM/CSS changes that led to the issue&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; How good is a content page that display great content (100% tests passed), loads instantly but half of the content area is hidden?&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: A typical visual regression - right content that is served badly&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/amazon-visual-regression.jpeg&quot; alt=&quot;alt text&quot; title=&quot;Amazon page breaks&quot;&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Configuring wraith to capture and compare UI snapshots&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Wraith-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Wraith&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code&gt;‚Äã# Add as many domains as necessary. Key will act as a label‚Äã

domains:
  english: &quot;http://www.mysite.com&quot;‚Äã

‚Äã# Type screen widths below, here are a couple of examples‚Äã

screen_widths:

  - 600‚Äã
  - 768‚Äã
  - 1024‚Äã
  - 1280‚Äã

‚Äã# Type page URL paths below, here are a couple of examples‚Äã
paths:
  about:
    path: /about
    selector: &#39;.about&#39;‚Äã
  subscribe:
      selector: &#39;.subscribe&#39;‚Äã
    path: /subscribe
&lt;/code&gt;&lt;/pre&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Using Applitools to get snapshot comparison and other advanced features&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20AppliTools-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Applitools&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Cypress-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Cypress to illustrate the idea&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as todoPage from &quot;../page-objects/todo-page&quot;;

describe(&quot;visual validation&quot;, () =&amp;gt; {
  before(() =&amp;gt; todoPage.navigate());
  beforeEach(() =&amp;gt; cy.eyesOpen({ appName: &quot;TAU TodoMVC&quot; }));
  afterEach(() =&amp;gt; cy.eyesClose());

  it(&quot;should look good&quot;, () =&amp;gt; {
    cy.eyesCheckWindow(&quot;empty todo list&quot;);
    todoPage.addTodo(&quot;Clean room&quot;);
    todoPage.addTodo(&quot;Learn javascript&quot;);
    cy.eyesCheckWindow(&quot;two todos&quot;);
    todoPage.toggleTodo(0);
    cy.eyesCheckWindow(&quot;mark as completed&quot;);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;Section 4Ô∏è‚É£: Measuring Test Effectiveness&lt;/h1&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 4.1 Get enough coverage for being confident, ~80% seems to be the lucky number&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; The purpose of testing is to get enough confidence for moving fast, obviously the more code is tested the more confident the team can be. Coverage is a measure of how many code lines (and branches, statements, etc) are being reached by the tests. So how much is enough? 10‚Äì30% is obviously too low to get any sense about the build correctness, on the other side 100% is very expensive and might shift your focus from the critical paths to the exotic corners of the code. The long answer is that it depends on many factors like the type of application‚Ää‚Äî‚Ääif you‚Äôre building the next generation of Airbus A380 than 100% is a must, for a cartoon pictures website 50% might be too much. Although most of the testing enthusiasts claim that the right coverage threshold is contextual, most of them also mention the number 80% as a thumb of a rule (&lt;a href=&quot;https://martinfowler.com/bliki/TestCoverage.html&quot;&gt;Fowler: ‚Äúin the upper 80s or 90s‚Äù&lt;/a&gt;) that presumably should satisfy most of the applications.&lt;/p&gt; 
&lt;p&gt;Implementation tips: You may want to configure your continuous integration (CI) to have a coverage threshold (&lt;a href=&quot;https://jestjs.io/docs/en/configuration.html#collectcoverage-boolean&quot;&gt;Jest link&lt;/a&gt;) and stop a build that doesn‚Äôt stand to this standard (it‚Äôs also possible to configure threshold per component, see code example below). On top of this, consider detecting build coverage decrease (when a newly committed code has less coverage)‚Ää‚Äî‚Ääthis will push developers raising or at least preserving the amount of tested code. All that said, coverage is only one measure, a quantitative based one, that is not enough to tell the robustness of your testing. And it can also be fooled as illustrated in the next bullets&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Confidence and numbers go hand in hand, without really knowing that you tested most of the system‚Ää‚Äî‚Ääthere will also be some fear and fear will slow you down&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Example: A typical coverage report&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-18-yoni-goldberg-code-coverage.png&quot; alt=&quot;alt text&quot; title=&quot;A typical coverage report&quot;&gt;&lt;/p&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Setting up coverage per component (using Jest)&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Jest-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Jest&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-18-code-coverage2.jpeg&quot; alt=&quot;alt text&quot; title=&quot;Setting up coverage per component (using Jest)&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 4.2 Inspect coverage reports to detect untested areas and other oddities&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Some issues sneak just under the radar and are really hard to find using traditional tools. These are not really bugs but more of surprising application behavior that might have a severe impact. For example, often some code areas are never or rarely being invoked‚Ää‚Äî‚Ääyou thought that the ‚ÄòPricingCalculator‚Äô class is always setting the product price but it turns out it is actually never invoked although we have 10000 products in DB and many sales‚Ä¶ Code coverage reports help you realize whether the application behaves the way you believe it does. Other than that, it can also highlight which types of code is not tested‚Ää‚Äî‚Ääbeing informed that 80% of the code is tested doesn‚Äôt tell whether the critical parts are covered. Generating reports is easy‚Ää‚Äî‚Ääjust run your app in production or during testing with coverage tracking and then see colorful reports that highlight how frequent each code area is invoked. If you take your time to glimpse into this data‚Ää‚Äî‚Ääyou might find some gotchas &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; If you don‚Äôt know which parts of your code are left un-tested, you don‚Äôt know where the issues might come from&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: What‚Äôs wrong with this coverage report?&lt;/h3&gt; 
 &lt;p&gt;Based on a real-world scenario where we tracked our application usage in QA and find out interesting login patterns (Hint: the amount of login failures is non-proportional, something is clearly wrong. Finally it turned out that some frontend bug keeps hitting the backend login API)&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-19-coverage-yoni-goldberg-nodejs-consultant.png&quot; alt=&quot;alt text&quot; title=&quot;What‚Äôs wrong with this coverage report?&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 4.3 Measure logical coverage using mutation testing&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; The Traditional Coverage metric often lies: It may show you 100% code coverage, but none of your functions, even not one, return the right response. How come? it simply measures over which lines of code the test visited, but it doesn‚Äôt check if the tests actually tested anything‚Ää‚Äî‚Ääasserted for the right response. Like someone who‚Äôs traveling for business and showing his passport stamps‚Ää‚Äî‚Ääthis doesn‚Äôt prove any work done, only that he visited few airports and hotels.&lt;/p&gt; 
&lt;p&gt;Mutation-based testing is here to help by measuring the amount of code that was actually TESTED not just VISITED. &lt;a href=&quot;https://stryker-mutator.io/&quot;&gt;Stryker&lt;/a&gt; is a JavaScript library for mutation testing and the implementation is really neat:&lt;/p&gt; 
&lt;p&gt;(1) it intentionally changes the code and ‚Äúplants bugs‚Äù. For example the code newOrder.price===0 becomes newOrder.price!=0. This ‚Äúbugs‚Äù are called mutations&lt;/p&gt; 
&lt;p&gt;(2) it runs the tests, if all succeed then we have a problem‚Ää‚Äî‚Ääthe tests didn‚Äôt serve their purpose of discovering bugs, the mutations are so-called survived. If the tests failed, then great, the mutations were killed.&lt;/p&gt; 
&lt;p&gt;Knowing that all or most of the mutations were killed gives much higher confidence than traditional coverage and the setup time is similar &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; You‚Äôll be fooled to believe that 85% coverage means your test will detect bugs in 85% of your code&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: 100% coverage, 0% testing&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%F0%9F%94%A8%20Example%20using%20Stryker-blue.svg?sanitize=true&quot; alt=&quot;&quot; title=&quot;Using Stryker&quot;&gt;&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function addNewOrder(newOrder) {
  logger.log(`Adding new order ${newOrder}`);
  DB.save(newOrder);
  Mailer.sendMail(newOrder.assignee, `A new order was places ${newOrder}`);

  return { approved: true };
}

it(&quot;Test addNewOrder, don&#39;t use such test names&quot;, () =&amp;gt; {
  addNewOrder({ assignee: &quot;John@mailer.com&quot;, price: 120 });
}); //Triggers 100% code coverage, but it doesn&#39;t check anything
&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Stryker reports, a tool for mutation testing, detects and counts the amount of code that is not tested (Mutations)&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-20-yoni-goldberg-mutation-testing.jpeg&quot; alt=&quot;alt text&quot; title=&quot;Stryker reports, a tool for mutation testing, detects and counts the amount of code that is not tested (Mutations)&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è4.4 Preventing test code issues with Test linters&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; A set of ESLint plugins were built specifically for inspecting the tests code patterns and discover issues. For example, &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-mocha&quot;&gt;eslint-plugin-mocha&lt;/a&gt; will warn when a test is written at the global level (not a son of a describe() statement) or when tests are &lt;a href=&quot;https://mochajs.org/#inclusive-tests&quot;&gt;skipped&lt;/a&gt; which might lead to a false belief that all tests are passing. Similarly, &lt;a href=&quot;https://github.com/jest-community/eslint-plugin-jest&quot;&gt;eslint-plugin-jest&lt;/a&gt; can, for example, warn when a test has no assertions at all (not checking anything)&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Seeing 90% code coverage and 100% green tests will make your face wear a big smile only until you realize that many tests aren‚Äôt asserting for anything and many test suites were just skipped. Hopefully, you didn‚Äôt deploy anything based on this false observation&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: A test case full of errors, luckily all are caught by Linters&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&quot;Too short description&quot;, () =&amp;gt; {
  const userToken = userService.getDefaultToken() // *error:no-setup-in-describe, use hooks (sparingly) instead
  it(&quot;Some description&quot;, () =&amp;gt; {});//* error: valid-test-description. Must include the word &quot;Should&quot; + at least 5 words
});

it.skip(&quot;Test name&quot;, () =&amp;gt; {// *error:no-skipped-tests, error:error:no-global-tests. Put tests only under describe or suite
  expect(&quot;somevalue&quot;); // error:no-assert
});

it(&quot;Test name&quot;, () =&amp;gt; {*//error:no-identical-title. Assign unique titles to tests
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;Section 5Ô∏è‚É£: CI and Other Quality Measures&lt;/h1&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 5.1 Enrich your linters and abort builds that have linting issues&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Linters are a free lunch, with 5 min setup you get for free an auto-pilot guarding your code and catching significant issue as you type. Gone are the days where linting was about cosmetics (no semi-colons!). Nowadays, Linters can catch severe issues like errors that are not thrown correctly and losing information. On top of your basic set of rules (like &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-standard&quot;&gt;ESLint standard&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/eslint-config-airbnb&quot;&gt;Airbnb style&lt;/a&gt;), consider including some specializing Linters like &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-chai-expect&quot;&gt;eslint-plugin-chai-expect&lt;/a&gt; that can discover tests without assertions, &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-promise?activeTab=readme&quot;&gt;eslint-plugin-promise&lt;/a&gt; can discover promises with no resolve (your code will never continue), &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-security?activeTab=readme&quot;&gt;eslint-plugin-security&lt;/a&gt; which can discover eager regex expressions that might get used for DOS attacks, and &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-you-dont-need-lodash-underscore&quot;&gt;eslint-plugin-you-dont-need-lodash-underscore&lt;/a&gt; is capable of alarming when the code uses utility library methods that are part of the V8 core methods like Lodash._map(‚Ä¶) &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Consider a rainy day where your production keeps crashing but the logs don‚Äôt display the error stack trace. What happened? Your code mistakenly threw a non-error object and the stack trace was lost, a good reason for banging your head against a brick wall. A 5 min linter setup could detect this TYPO and save your day&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëé&lt;/span&gt; Anti-Pattern Example: The wrong Error object is thrown mistakenly, no stack-trace will appear for this error. Luckily, ESLint catches the next production bug&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-21-yoni-goldberg-eslint.jpeg&quot; alt=&quot;alt text&quot; title=&quot;The wrong Error object is thrown mistakenly, no stack-trace will appear for this error. Luckily, ESLint catches the next production bug&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 5.2 Shorten the feedback loop with local developer-CI&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Using a CI with shiny quality inspections like testing, linting, vulnerabilities check, etc? Help developers run this pipeline also locally to solicit instant feedback and shorten the &lt;a href=&quot;https://www.gocd.org/2016/03/15/are-you-ready-for-continuous-delivery-part-2-feedback-loops/&quot;&gt;feedback loop&lt;/a&gt;. Why? an efficient testing process constitutes many and iterative loops: (1) try-outs -&amp;gt; (2) feedback -&amp;gt; (3) refactor. The faster the feedback is, the more improvement iterations a developer can perform per-module and perfect the results. On the flip, when the feedback is late to come fewer improvement iterations could be packed into a single day, the team might already move forward to another topic/task/module and might not be up for refining that module.&lt;/p&gt; 
&lt;p&gt;Practically, some CI vendors (Example: &lt;a href=&quot;https://circleci.com/docs/2.0/local-cli/&quot;&gt;CircleCI local CLI&lt;/a&gt;) allow running the pipeline locally. Some commercial tools like &lt;a href=&quot;https://wallabyjs.com/&quot;&gt;wallaby provide highly-valuable &amp;amp; testing insights&lt;/a&gt; as a developer prototype (no affiliation). Alternatively, you may just add npm script to package.json that runs all the quality commands (e.g. test, lint, vulnerabilities)‚Ää‚Äî‚Ääuse tools like &lt;a href=&quot;https://www.npmjs.com/package/concurrently&quot;&gt;concurrently&lt;/a&gt; for parallelization and non-zero exit code if one of the tools failed. Now the developer should just invoke one command‚Ää‚Äî‚Ääe.g. ‚Äònpm run quality‚Äô‚Ää‚Äî‚Ääto get instant feedback. Consider also aborting a commit if the quality check failed using a githook (&lt;a href=&quot;https://github.com/typicode/husky&quot;&gt;husky can help&lt;/a&gt;) &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; When the quality results arrive the day after the code, testing doesn‚Äôt become a fluent part of development rather an after the fact formal artifact&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: npm scripts that perform code quality inspection, all are run in parallel on demand or when a developer is trying to push new code&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;scripts&quot;: {
    &quot;inspect:sanity-testing&quot;: &quot;mocha **/**--test.js --grep \&quot;sanity\&quot;&quot;,
    &quot;inspect:lint&quot;: &quot;eslint .&quot;,
    &quot;inspect:vulnerabilities&quot;: &quot;npm audit&quot;,
    &quot;inspect:license&quot;: &quot;license-checker --failOn GPLv2&quot;,
    &quot;inspect:complexity&quot;: &quot;plato .&quot;,

    &quot;inspect:all&quot;: &quot;concurrently -c \&quot;bgBlue.bold,bgMagenta.bold,yellow\&quot; \&quot;npm:inspect:quick-testing\&quot; \&quot;npm:inspect:lint\&quot; \&quot;npm:inspect:vulnerabilities\&quot; \&quot;npm:inspect:license\&quot;&quot;
  },
  &quot;husky&quot;: {
    &quot;hooks&quot;: {
      &quot;precommit&quot;: &quot;npm run inspect:all&quot;,
      &quot;prepush&quot;: &quot;npm run inspect:all&quot;
    }
}

&lt;/code&gt;&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è5.3 Perform e2e testing over a true production-mirror&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; End to end (e2e) testing are the main challenge of every CI pipeline‚Ää‚Äî‚Ääcreating an identical ephemeral production mirror on the fly with all the related cloud services can be tedious and expensive. Finding the best compromise is your game: &lt;a href=&quot;https://serverless.com/&quot;&gt;Docker-compose&lt;/a&gt; allows crafting isolated dockerized environment with identical containers using a single plain text file but the backing technology (e.g. networking, deployment model) is different from real-world productions. You may combine it with &lt;a href=&quot;https://github.com/localstack/localstack&quot;&gt;‚ÄòAWS Local‚Äô&lt;/a&gt; to work with a stub of the real AWS services. If you went &lt;a href=&quot;https://serverless.com/&quot;&gt;serverless&lt;/a&gt; multiple frameworks like serverless and &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/serverless_app.html&quot;&gt;AWS SAM&lt;/a&gt; allows the local invocation of FaaS code.&lt;/p&gt; 
&lt;p&gt;The huge Kubernetes ecosystem is yet to formalize a standard convenient tool for local and CI-mirroring though many new tools are launched frequently. One approach is running a ‚Äòminimized-Kubernetes‚Äô using tools like &lt;a href=&quot;https://kubernetes.io/docs/setup/minikube/&quot;&gt;Minikube&lt;/a&gt; and &lt;a href=&quot;https://microk8s.io/&quot;&gt;MicroK8s&lt;/a&gt; which resemble the real thing only come with less overhead. Another approach is testing over a remote ‚Äòreal-Kubernetes‚Äô, some CI providers (e.g. &lt;a href=&quot;https://codefresh.io/&quot;&gt;Codefresh&lt;/a&gt;) has native integration with Kubernetes environment and make it easy to run the CI pipeline over the real thing, others allow custom scripting against a remote Kubernetes. &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Using different technologies for production and testing demands maintaining two deployment models and keeps the developers and the ops team separated&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Example: a CI pipeline that generates Kubernetes cluster on the fly &lt;a href=&quot;https://container-solutions.com/dynamic-environments-kubernetes/&quot; data-href=&quot;https://container-solutions.com/dynamic-environments-kubernetes/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;(&lt;/a&gt;&lt;a href=&quot;https://container-solutions.com/dynamic-environments-kubernetes/&quot;&gt;Credit: Dynamic-environments Kubernetes&lt;/a&gt;)&lt;/h3&gt; 
 &lt;pre name=&quot;38d9&quot; id=&quot;38d9&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;deploy:&lt;br&gt;stage: deploy&lt;br&gt;image: registry.gitlab.com/gitlab-examples/kubernetes-deploy&lt;br&gt;script:&lt;br&gt;- ./configureCluster.sh $KUBE_CA_PEM_FILE $KUBE_URL $KUBE_TOKEN&lt;br&gt;- kubectl create ns $NAMESPACE&lt;br&gt;- kubectl create secret -n $NAMESPACE docker-registry gitlab-registry --docker-server=&quot;$CI_REGISTRY&quot; --docker-username=&quot;$CI_REGISTRY_USER&quot; --docker-password=&quot;$CI_REGISTRY_PASSWORD&quot; --docker-email=&quot;$GITLAB_USER_EMAIL&quot;&lt;br&gt;- mkdir .generated&lt;br&gt;- echo &quot;$CI_BUILD_REF_NAME-$CI_BUILD_REF&quot;&lt;br&gt;- sed -e &quot;s/TAG/$CI_BUILD_REF_NAME-$CI_BUILD_REF/g&quot; templates/deals.yaml | tee &quot;.generated/deals.yaml&quot;&lt;br&gt;- kubectl apply --namespace $NAMESPACE -f .generated/deals.yaml&lt;br&gt;- kubectl apply --namespace $NAMESPACE -f templates/my-sock-shop.yaml&lt;br&gt;environment:&lt;br&gt;name: test-for-ci&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è5.4 Parallelize test execution&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; When done right, testing is your 24/7 friend providing almost instant feedback. In practice, executing 500 CPU-bounded unit test on a single thread can take too long. Luckily, modern test runners and CI platforms (like &lt;a href=&quot;https://github.com/facebook/jest&quot;&gt;Jest&lt;/a&gt;, &lt;a href=&quot;https://github.com/avajs/ava&quot;&gt;AVA&lt;/a&gt; and &lt;a href=&quot;https://github.com/yandex/mocha-parallel-tests&quot;&gt;Mocha extensions&lt;/a&gt;) can parallelize the test into multiple processes and achieve significant improvement in feedback time. Some CI vendors do also parallelize tests across containers (!) which shortens the feedback loop even further. Whether locally over multiple processes, or over some cloud CLI using multiple machines‚Ää‚Äî‚Ääparallelizing demand keeping the tests autonomous as each might run on different processes&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Getting test results 1 hour long after pushing new code, as you already code the next features, is a great recipe for making testing less relevant&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example: Mocha parallel &amp;amp; Jest easily outrun the traditional Mocha thanks to testing parallelization (&lt;a href=&quot;https://medium.com/dailyjs/javascript-test-runners-benchmark-3a78d4117b4&quot;&gt;Credit: JavaScript Test-Runners Benchmark&lt;/a&gt;)&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-24-yonigoldberg-jest-parallel.png&quot; alt=&quot;alt text&quot; title=&quot;Mocha parallel &amp;amp; Jest easily outrun the traditional Mocha thanks to testing parallelization (Credit: JavaScript Test-Runners Benchmark)&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è5.5 Stay away from legal issues using license and plagiarism check&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Licensing and plagiarism issues are probably not your main concern right now, but why not tick this box as well in 10 minutes? A bunch of npm packages like &lt;a href=&quot;https://www.npmjs.com/package/license-checker&quot;&gt;license check&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/plagiarism-checker&quot;&gt;plagiarism check&lt;/a&gt; (commercial with free plan) can be easily baked into your CI pipeline and inspect for sorrows like dependencies with restrictive licenses or code that was copy-pasted from Stack Overflow and apparently violates some copyrights&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Unintentionally, developers might use packages with inappropriate licenses or copy paste commercial code and run into legal issues&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Doing It Right Example:&lt;/h3&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//install license-checker in your CI environment or also locally
npm install -g license-checker

//ask it to scan all licenses and fail with exit code other than 0 if it found unauthorized license. The CI system should catch this failure and stop the build
license-checker --summary --failOn BSD

&lt;/code&gt;&lt;/pre&gt; 
 &lt;br&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-25-nodejs-licsense.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è5.6 Constantly inspect for vulnerable dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Even the most reputable dependencies such as Express have known vulnerabilities. This can get easily tamed using community tools such as &lt;a href=&quot;https://docs.npmjs.com/getting-started/running-a-security-audit&quot;&gt;npm audit&lt;/a&gt;, or commercial tools like &lt;a href=&quot;https://snyk.io/&quot;&gt;snyk&lt;/a&gt; (offer also a free community version). Both can be invoked from your CI on every build&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Keeping your code clean from vulnerabilities without dedicated tools will require to constantly follow online publications about new threats. Quite tedious&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Example: NPM Audit result&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-26-npm-audit-snyk.png&quot; alt=&quot;alt text&quot; title=&quot;NPM Audit result&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è5.7 Automate dependency updates&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Yarn and npm latest introduction of package-lock.json introduced a serious challenge (the road to hell is paved with good intentions)‚Ää‚Äî‚Ääby default now, packages are no longer getting updates. Even a team running many fresh deployments with ‚Äònpm install‚Äô &amp;amp; ‚Äònpm update‚Äô won‚Äôt get any new updates. This leads to subpar dependent packages versions at best or to vulnerable code at worst. Teams now rely on developers goodwill and memory to manually update the package.json or use tools &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;like ncu&lt;/a&gt; manually. A more reliable way could be to automate the process of getting the most reliable dependency versions, though there are no silver bullet solutions yet there are two possible automation roads:&lt;/p&gt; 
&lt;p&gt;(1) CI can fail builds that have obsolete dependencies‚Ää‚Äî‚Ääusing tools like &lt;a href=&quot;https://docs.npmjs.com/cli/outdated&quot;&gt;‚Äònpm outdated‚Äô&lt;/a&gt; or ‚Äònpm-check-updates (ncu)‚Äô . Doing so will enforce developers to update dependencies.&lt;/p&gt; 
&lt;p&gt;(2) Use commercial tools that scan the code and automatically send pull requests with updated dependencies. One interesting question remaining is what should be the dependency update policy‚Ää‚Äî‚Ääupdating on every patch generates too many overhead, updating right when a major is released might point to an unstable version (many packages found vulnerable on the very first days after being released, &lt;a href=&quot;https://nodesource.com/blog/a-high-level-post-mortem-of-the-eslint-scope-security-incident/&quot;&gt;see the&lt;/a&gt; eslint-scope incident).&lt;/p&gt; 
&lt;p&gt;An efficient update policy may allow some ‚Äòvesting period‚Äô‚Ää‚Äî‚Äälet the code lag behind the @latest for some time and versions before considering the local copy as obsolete (e.g. local version is 1.3.1 and repository version is 1.3.8) &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; Your production will run packages that have been explicitly tagged by their author as risky&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Example: &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;ncu&lt;/a&gt; can be used manually or within a CI pipeline to detect to which extent the code lag behind the latest versions&lt;/h3&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/bp-27-yoni-goldberg-npm.png&quot; alt=&quot;alt text&quot; title=&quot;ncu can be used manually or within a CI pipeline to detect to which extent the code lag behind the latest versions&quot;&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 5.8 Other, non-Node related, CI tips&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; This post is focused on testing advice that is related to, or at least can be exemplified with Node JS. This bullet, however, groups few non-Node related tips that are well-known&lt;/p&gt; 
&lt;ol class=&quot;postList&quot;&gt;
 &lt;li name=&quot;e3e4&quot; id=&quot;e3e4&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Use a declarative syntax. This is the only option for most vendors but older versions of Jenkins allows using code or UI&lt;/li&gt;
 &lt;li name=&quot;1fdc&quot; id=&quot;1fdc&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Opt for a vendor that has native Docker support&lt;/li&gt;
 &lt;li name=&quot;edcd&quot; id=&quot;edcd&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Fail early, run your fastest tests first. Create a ‚ÄòSmoke testing‚Äô step/milestone that groups multiple fast inspections (e.g. linting, unit tests) and provide snappy feedback to the code committer&lt;/li&gt;
 &lt;li name=&quot;0375&quot; id=&quot;0375&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Make it easy to skim-through all build artifacts including test reports, coverage reports, mutation reports, logs, etc&lt;/li&gt;
 &lt;li name=&quot;df82&quot; id=&quot;df82&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Create multiple pipelines/jobs for each event, reuse steps between them. For example, configure a job for feature branch commits and a different one for master PR. Let each reuse logic using shared steps (most vendors provide some mechanism for code reuse)&lt;/li&gt;
 &lt;li name=&quot;19b0&quot; id=&quot;19b0&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Never embed secrets in a job declaration, grab them from a secret store or from the job‚Äôs configuration&lt;/li&gt;
 &lt;li name=&quot;b70d&quot; id=&quot;b70d&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Explicitly bump version in a release build or at least ensure the developer did so&lt;/li&gt;
 &lt;li name=&quot;957c&quot; id=&quot;957c&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Build only once and perform all the inspections over the single build artifact (e.g. Docker image)&lt;/li&gt;
 &lt;li name=&quot;339b&quot; id=&quot;339b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Test in an ephemeral environment that doesn‚Äôt drift state between builds. Caching node_modules might be the only exception&lt;/li&gt;
&lt;/ol&gt; 
&lt;br&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; You‚Äòll miss years of wisdom&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;‚ö™ Ô∏è 5.9 Build matrix: Run the same CI steps using multiple Node versions&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;‚úÖ&lt;/span&gt; &lt;strong&gt;Do:&lt;/strong&gt; Quality checking is about serendipity, the more ground you cover the luckier you get in detecting issues early. When developing reusable packages or running a multi-customer production with various configuration and Node versions, the CI must run the pipeline of tests over all the permutations of configurations. For example, assuming we use MySQL for some customers and Postgres for others‚Ää‚Äî‚Ääsome CI vendors support a feature called ‚ÄòMatrix‚Äô which allow running the suit of testing against all permutations of MySQL, Postgres and multiple Node version like 8, 9 and 10. This is done using configuration only without any additional effort (assuming you have testing or any other quality checks). Other CIs who doesn‚Äôt support Matrix might have extensions or tweaks to allow that &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;‚ùå &lt;strong&gt;Otherwise:&lt;/strong&gt; So after doing all that hard work of writing testing are we going to let bugs sneak in only because of configuration issues?&lt;/p&gt; 
&lt;br&gt; 
&lt;details&gt;
 &lt;summary&gt;‚úè &lt;b&gt;Code Examples&lt;/b&gt;&lt;/summary&gt; 
 &lt;br&gt; 
 &lt;h3&gt;&lt;span&gt;üëè&lt;/span&gt; Example: Using Travis (CI vendor) build definition to run the same test over multiple Node versions&lt;/h3&gt; 
 &lt;pre name=&quot;f909&quot; id=&quot;f909&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;language: node_js&lt;br&gt;node_js:&lt;br&gt;  - &quot;7&quot;&lt;br&gt;  - &quot;6&quot;&lt;br&gt;  - &quot;5&quot;&lt;br&gt;  - &quot;4&quot;&lt;br&gt;install:&lt;br&gt;  - npm install&lt;br&gt;script:&lt;br&gt;  - npm run test&lt;/pre&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;Team&lt;/h1&gt; 
&lt;h2&gt;Yoni Goldberg&lt;/h2&gt; 
&lt;br&gt; 
&lt;img width=&quot;480px&quot; src=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/yoni-goldberg.jpg&quot;&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Writer&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt; I&#39;m an independent consultant who works with Fortune 500 companies and garage startups on polishing their JS &amp;amp; Node.js applications. More than any other topic I&#39;m fascinated by and aims to master the art of testing. I&#39;m also the author of &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices&quot;&gt;Node.js Best Practices&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;üìó Online Course:&lt;/strong&gt; Liked this guide and wish to take your testing skills to the extreme? Consider visiting my comprehensive course &lt;a href=&quot;https://www.testjavascript.com&quot;&gt;Testing Node.js &amp;amp; JavaScript From A To Z&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;strong&gt;Follow:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/goldbergyoni/&quot;&gt;üê¶ Twitter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://testjavascript.com/contact-2/&quot;&gt;üìû Contact&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://testjavascript.com/newsletter//&quot;&gt;‚úâÔ∏è Newsletter&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br&gt; 
&lt;hr&gt; 
&lt;br&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/BrunoScheufler&quot;&gt;Bruno Scheufler&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Tech reviewer and advisor&lt;/p&gt; 
&lt;p&gt;Took care to revise, improve, lint and polish all the texts&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt; full-stack web engineer, Node.js &amp;amp; GraphQL enthusiast&lt;/p&gt; 
&lt;hr&gt; 
&lt;br&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/idori&quot;&gt;Ido Richter&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Concept, design and great advice&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt; A savvy frontend developer, CSS expert and emojis freak&lt;/p&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/js-kyle&quot;&gt;Kyle Martin&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Helps keep this project running, and reviews security related practices&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;About:&lt;/strong&gt; Loves working on Node.js projects and web application security.&lt;/p&gt; 
&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people who have contributed to this repository!&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://geospatialscott.blogspot.com/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/1326248?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Scott Davis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-stdavis&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/AdrienRedon&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/5978436?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Adrien REDON&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-AdrienRedon&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/NoriSte&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/173663?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Stefano Magni&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-NoriSte&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.joer.im&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/47742486?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yeoh Joer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-yjoer&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://jhonnymoreira.dev&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2177742?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jhonny Moreira&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-jhonnymoreira&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Germanika&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/8846678?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ian Germann&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-Germanika&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/AbdelrahmanHafez&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/19984935?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Hafez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-AbdelrahmanHafez&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.ruxandrafediuc.com&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/11021586?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ruxandra Fediuc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-ruxandrafed&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jacklee814&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/9951291?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jack&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-jacklee814&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.petercarrero.com&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/231727?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Peter Carrero&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-aloyr&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/huhgawz&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/369338?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Huhgawz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-huhgawz&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/haakonmb&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/7099302?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Haakon Borch&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-haakonmb&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://jaimemendoza.com/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/5395811?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jaime Mendoza&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-jaimemendozadev&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/camerondunford&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/840612?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Cameron Dunford&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-camerondunford&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/shadowspawn&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/15719847?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;John Gee&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-shadowspawn&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/aurelijusrozenas&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/3273544?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aurelijus Ro≈æƒónas&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-aurelijusrozenas&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://aaronshivers.com&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/42848750?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aaron&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-aaronshivers&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://tomdoes.tech/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/8683577?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tom Nagle&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-tomanagle&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/yvesyao&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/7723729?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yves yao&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-yvesyao&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Userbit&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/34487074?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Userbit&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-Userbit&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://glaucialemos.netlify.com/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1631477?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Glaucia Lemos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#maintenance-glaucia86&quot; title=&quot;Maintenance&quot;&gt;üöß&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/koooge&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/7419215?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;koooge&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-koooge&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/michalbiesiada&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/18367606?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Michal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-mbiesiad&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://roywalker.me&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/611846?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;roywalker&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-roywalker&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://dangen-effy.github.io/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/23185799?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;dangen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-dangen-effy&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://dev.to/mbiesiad&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/60202305?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;biesiadamich&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-biesiadamich&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://tarojsx.github.io&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/127009?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yanlin Jiang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-cncolder&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/sanguino&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/2077168?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;sanguino&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-sanguino&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/MorganGeek&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/3721240?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Morgan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-MorganGeek&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://luk4s.dev&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/8350985?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lukas Bischof&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/goldbergyoni/javascript-testing-best-practices/commits?author=lukasbischof&quot; title=&quot;Tests&quot;&gt;‚ö†Ô∏è&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-lukasbischof&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://juanmaruiz.surge.sh&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/1837650?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JuanMa Ruiz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-JuanMaRuiz&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://luisangelorjr.com.br&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/22268900?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lu√≠s √Çngelo Rodrigues Jr.&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-luisangelorjr&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://jfernandezpe.wordpress.com/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/12046620?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jos√© Fern√°ndez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-jfernandezpe&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.linkedin.com/in/AlejandroGutierrezB&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/56408597?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alejandro Gutierrez Barcenilla&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-AlejandroGutierrezB&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jasonandmonte&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/30088000?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jason&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-jasonandmonte&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/otavionetoca&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/11263232?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Otavio Araujo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/goldbergyoni/javascript-testing-best-practices/commits?author=otavionetoca&quot; title=&quot;Tests&quot;&gt;‚ö†Ô∏è&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-otavionetoca&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://contributor.pw&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/5027939?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alex Ivanov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-contributorpw&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/YeeJone&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/20400822?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yiqiao Xu&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/#content-YeeJone&quot; title=&quot;Content&quot;&gt;üñã&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;</description>
    </item>
    
    <item>
      <title>highlightjs/highlight.js</title>
      <link>https://github.com/highlightjs/highlight.js</link>
      <description>&lt;p&gt;JavaScript syntax highlighter with language auto-detection and zero dependencies.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Highlight.js&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/highlight.js&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/v/highlight.js?label=latest&quot; alt=&quot;latest version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/highlightjs/highlight.js/raw/main/LICENSE&quot;&gt;&lt;img src=&quot;https://badgen.net/github/license/highlightjs/highlight.js?color=cyan&quot; alt=&quot;license&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://packagephobia.now.sh/result?p=highlight.js&quot;&gt;&lt;img src=&quot;https://badgen.net/packagephobia/install/highlight.js?label=npm+install&quot; alt=&quot;install size&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/github/size/highlightjs/cdn-release/build/highlight.min.js?label=minified&quot; alt=&quot;minified&quot;&gt; &lt;a href=&quot;https://www.npmjs.com/package/highlight.js&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/dw/highlight.js?label=npm+downloads&amp;amp;color=purple&quot; alt=&quot;NPM downloads weekly&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.jsdelivr.com/package/gh/highlightjs/cdn-release&quot;&gt;&lt;img src=&quot;https://badgen.net/jsdelivr/hits/gh/highlightjs/cdn-release?label=jsDelivr+CDN&amp;amp;color=purple&quot; alt=&quot;jsDelivr CDN downloads&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- [![build and CI status](https://badgen.net/github/checks/highlightjs/highlight.js?label=build)](https://github.com/highlightjs/highlight.js/actions?query=workflow%3A%22Node.js+CI%22) --&gt; 
&lt;p&gt;&lt;img src=&quot;https://badgen.net/github/checks/highlightjs/highlight.js/main?label=build&quot; alt=&quot;build and CI status&quot;&gt; &lt;a href=&quot;https://lgtm.com/projects/g/highlightjs/highlight.js/?mode=list&quot;&gt;&lt;img src=&quot;https://badgen.net/lgtm/grade/g/highlightjs/highlight.js/js?label=code+quality&quot; alt=&quot;code quality&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://snyk.io/test/github/highlightjs/highlight.js?targetFile=package.json&quot;&gt;&lt;img src=&quot;https://badgen.net/snyk/highlightjs/highlight.js&quot; alt=&quot;vulnerabilities&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://badgen.net/david/dev/highlightjs/highlight.js?label=dev+deps&quot; alt=&quot;dev deps&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://discord.gg/M24EbU7ja9&quot;&gt;&lt;img src=&quot;https://badgen.net/badge/icon/discord?icon=discord&amp;amp;label&amp;amp;color=pink&quot; alt=&quot;discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/highlightjs/highlight.js/issues&quot;&gt;&lt;img src=&quot;https://badgen.net/github/open-issues/highlightjs/highlight.js?label=issues&quot; alt=&quot;open issues&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/highlightjs/highlight.js/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+welcome%22&quot;&gt;&lt;img src=&quot;https://badgen.net/github/label-issues/highlightjs/highlight.js/help%20welcome/open&quot; alt=&quot;help welcome issues&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/highlightjs/highlight.js/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&quot;&gt;&lt;img src=&quot;https://badgen.net/github/label-issues/highlightjs/highlight.js/good%20first%20issue/open&quot; alt=&quot;good first issue&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- [![Build CI](https://img.shields.io/github/workflow/status/highlightjs/highlight.js/Node.js%20CI)](https://github.com/highlightjs/highlight.js/actions?query=workflow%3A%22Node.js+CI%22) --&gt; 
&lt;!-- [![commits since release](https://img.shields.io/github/commits-since/highlightjs/highlight.js/latest?label=commits+since)](https://github.com/highlightjs/highlight.js/commits/main) --&gt; 
&lt;!-- [![](https://data.jsdelivr.com/v1/package/gh/highlightjs/cdn-release/badge?style=rounded)](https://www.jsdelivr.com/package/gh/highlightjs/cdn-release) --&gt; 
&lt;!-- [![Total Lines](https://img.shields.io/tokei/lines/github/highlightjs/highlight.js)]() --&gt; 
&lt;!-- [![npm bundle size (minified + gzip)](https://img.shields.io/bundlephobia/minzip/highlight.js.svg)](https://bundlephobia.com/result?p=highlight.js) --&gt; 
&lt;p&gt;Highlight.js is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It can work with pretty much any markup, doesn‚Äôt depend on any other frameworks, and has automatic language detection.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#basic-usage&quot;&gt;Basic Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#in-the-browser&quot;&gt;In the Browser&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#plaintext-code-blocks&quot;&gt;Plaintext Code Blocks&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#ignoring-a-code-block&quot;&gt;Ignoring a Code Block&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#nodejs-on-the-server&quot;&gt;Node.js on the Server&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#supported-languages&quot;&gt;Supported Languages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#custom-usage&quot;&gt;Custom Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#using-custom-html&quot;&gt;Using custom HTML&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#using-with-vuejs&quot;&gt;Using with Vue.js&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#using-web-workers&quot;&gt;Using Web Workers&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#importing-the-library&quot;&gt;Importing the Library&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#nodejs--require&quot;&gt;Node.js / &lt;code&gt;require&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#es6-modules--import&quot;&gt;ES6 Modules / &lt;code&gt;import&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#getting-the-library&quot;&gt;Getting the Library&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#fetch-via-cdn&quot;&gt;Fetch via CDN&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#cdnjs-link&quot;&gt;cdnjs (link)&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#jsdelivr-link&quot;&gt;jsdelivr (link)&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#unpkg-link&quot;&gt;unpkg (link)&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#download-prebuilt-cdn-assets&quot;&gt;Download prebuilt CDN assets&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#download-from-our-website&quot;&gt;Download from our website&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#install-via-npm-package&quot;&gt;Install via NPM package&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#build-from-source&quot;&gt;Build from Source&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#links&quot;&gt;Links&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h4&gt;Upgrading to Version 11&lt;/h4&gt; 
&lt;p&gt;As always, major releases do contain breaking changes which may require action from users. Please read &lt;a href=&quot;https://github.com/highlightjs/highlight.js/raw/main/VERSION_11_UPGRADE.md&quot;&gt;VERSION_11_UPGRADE.md&lt;/a&gt; for a detailed summary of breaking changes and any actions you may need to take.&lt;/p&gt; 
&lt;h4&gt;Support for older versions 
 &lt;!-- omit in toc --&gt;&lt;/h4&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://github.com/highlightjs/highlight.js/raw/main/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt; for long-term support information.&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;Basic Usage&lt;/h2&gt; 
&lt;h3&gt;In the Browser&lt;/h3&gt; 
&lt;p&gt;The bare minimum for using highlight.js on a web page is linking to the library along with one of the themes and calling &lt;a href=&quot;http://highlightjs.readthedocs.io/en/latest/api.html#highlightall&quot;&gt;&lt;code&gt;highlightAll&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/path/to/styles/default.min.css&quot;&amp;gt;
&amp;lt;script src=&quot;/path/to/highlight.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;hljs.highlightAll();&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will find and highlight code inside of &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags; it tries to detect the language automatically. If automatic detection doesn‚Äôt work for you, or you simply prefer to be explicit, you can specify the language manually in the using the &lt;code&gt;class&lt;/code&gt; attribute:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&quot;language-html&quot;&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Plaintext Code Blocks&lt;/h4&gt; 
&lt;p&gt;To apply the Highlight.js styling to plaintext without actually highlighting it, use the &lt;code&gt;plaintext&lt;/code&gt; language:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&quot;language-plaintext&quot;&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Ignoring a Code Block&lt;/h4&gt; 
&lt;p&gt;To skip highlighting of a code block completely, use the &lt;code&gt;nohighlight&lt;/code&gt; class:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code class=&quot;nohighlight&quot;&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Node.js on the Server&lt;/h3&gt; 
&lt;p&gt;The bare minimum to auto-detect the language and highlight some code.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// load the library and ALL languages
hljs = require(&#39;highlight.js&#39;);
html = hljs.highlightAuto(&#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&#39;).value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To load only a &quot;common&quot; subset of popular languages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;hljs = require(&#39;highlight.js/lib/common&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To highlight code with a specific language, use &lt;code&gt;highlight&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;html = hljs.highlight(&#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&#39;, {language: &#39;xml&#39;}).value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#importing-the-library&quot;&gt;Importing the Library&lt;/a&gt; for more examples of &lt;code&gt;require&lt;/code&gt; vs &lt;code&gt;import&lt;/code&gt; usage, etc. For more information about the result object returned by &lt;code&gt;highlight&lt;/code&gt; or &lt;code&gt;highlightAuto&lt;/code&gt; refer to the &lt;a href=&quot;https://highlightjs.readthedocs.io/en/latest/api.html&quot;&gt;api docs&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supported Languages&lt;/h2&gt; 
&lt;p&gt;Highlight.js supports over 180 languages in the core library. There are also 3rd party language definitions available to support even more languages. You can find the full list of supported languages in &lt;a href=&quot;https://github.com/highlightjs/highlight.js/raw/main/SUPPORTED_LANGUAGES.md&quot;&gt;SUPPORTED_LANGUAGES.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Custom Usage&lt;/h2&gt; 
&lt;p&gt;If you need a bit more control over the initialization of Highlight.js, you can use the &lt;a href=&quot;http://highlightjs.readthedocs.io/en/latest/api.html#highlightelement&quot;&gt;&lt;code&gt;highlightElement&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://highlightjs.readthedocs.io/en/latest/api.html#configure&quot;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; functions. This allows you to better control &lt;em&gt;what&lt;/em&gt; to highlight and &lt;em&gt;when&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;For example, here‚Äôs the rough equivalent of calling &lt;a href=&quot;http://highlightjs.readthedocs.io/en/latest/api.html#highlightall&quot;&gt;&lt;code&gt;highlightAll&lt;/code&gt;&lt;/a&gt; but doing the work manually instead:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, (event) =&amp;gt; {
  document.querySelectorAll(&#39;pre code&#39;).forEach((el) =&amp;gt; {
    hljs.highlightElement(el);
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Please refer to the documentation for &lt;a href=&quot;http://highlightjs.readthedocs.io/en/latest/api.html#configure&quot;&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/a&gt; options.&lt;/p&gt; 
&lt;h3&gt;Using custom HTML&lt;/h3&gt; 
&lt;p&gt;We strongly recommend &lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt; wrapping for code blocks. It&#39;s quite semantic and &quot;just works&quot; out of the box with zero fiddling. It is possible to use other HTML elements (or combos), but you may need to pay special attention to preserving linebreaks.&lt;/p&gt; 
&lt;p&gt;Let&#39;s say your markup for code blocks uses divs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&#39;code&#39;&amp;gt;...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To highlight such blocks manually:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// first, find all the div.code blocks
document.querySelectorAll(&#39;div.code&#39;).forEach(el =&amp;gt; {
  // then highlight each
  hljs.highlightElement(el);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Without using a tag that preserves linebreaks (like &lt;code&gt;pre&lt;/code&gt;) you&#39;ll need some additional CSS to help preserve them. You could also &lt;a href=&quot;https://github.com/highlightjs/highlight.js/issues/2559&quot;&gt;pre and post-process line breaks with a plug-in&lt;/a&gt;, but &lt;em&gt;we recommend using CSS&lt;/em&gt;.&lt;/p&gt; 
&lt;p&gt;To preserve linebreaks inside a &lt;code&gt;div&lt;/code&gt; using CSS:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;div.code {
  white-space: pre;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using with Vue.js&lt;/h3&gt; 
&lt;p&gt;See &lt;a href=&quot;https://github.com/highlightjs/vue-plugin&quot;&gt;highlightjs/vue-plugin&lt;/a&gt; for a simple Vue plugin that works great with Highlight.js.&lt;/p&gt; 
&lt;p&gt;An example of &lt;code&gt;vue-plugin&lt;/code&gt; in action:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;div id=&quot;app&quot;&amp;gt;
    &amp;lt;!-- bind to a data property named `code` --&amp;gt;
    &amp;lt;highlightjs autodetect :code=&quot;code&quot; /&amp;gt;
    &amp;lt;!-- or literal code works as well --&amp;gt;
    &amp;lt;highlightjs language=&#39;javascript&#39; code=&quot;var x = 5;&quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using Web Workers&lt;/h3&gt; 
&lt;p&gt;You can run highlighting inside a web worker to avoid freezing the browser window while dealing with very big chunks of code.&lt;/p&gt; 
&lt;p&gt;In your main script:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;addEventListener(&#39;load&#39;, () =&amp;gt; {
  const code = document.querySelector(&#39;#code&#39;);
  const worker = new Worker(&#39;worker.js&#39;);
  worker.onmessage = (event) =&amp;gt; { code.innerHTML = event.data; }
  worker.postMessage(code.textContent);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In worker.js:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;onmessage = (event) =&amp;gt; {
  importScripts(&#39;&amp;lt;path&amp;gt;/highlight.min.js&#39;);
  const result = self.hljs.highlightAuto(event.data);
  postMessage(result.value);
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Importing the Library&lt;/h2&gt; 
&lt;p&gt;First, you&#39;ll likely be installing the library via &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; -- see &lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#getting-the-library&quot;&gt;Getting the Library&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Node.js / &lt;code&gt;require&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Requiring the top-level library will load all languages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// require the highlight.js library, including all languages
const hljs = require(&#39;./highlight.js&#39;);
const highlightedCode = hljs.highlightAuto(&#39;&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;&#39;).value
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For a smaller footprint, load our common subset of languages (the same set used for our default web build).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const hljs = require(&#39;highlight.js/lib/common&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For the smallest footprint, load only the languages you need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const hljs = require(&#39;highlight.js/lib/core&#39;);
hljs.registerLanguage(&#39;xml&#39;, require(&#39;highlight.js/lib/languages/xml&#39;));

const highlightedCode = hljs.highlight(&#39;&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;&#39;, {language: &#39;xml&#39;}).value
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;ES6 Modules / &lt;code&gt;import&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Note: You can also import directly from fully static URLs, such as our very own pre-built ES6 Module CDN resources. See &lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#fetch-via-cdn&quot;&gt;Fetch via CDN&lt;/a&gt; for specific examples.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;The default import will register all languages:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import hljs from &#39;highlight.js&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is more efficient to import only the library and register the languages you need:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import hljs from &#39;highlight.js/lib/core&#39;;
import javascript from &#39;highlight.js/lib/languages/javascript&#39;;
hljs.registerLanguage(&#39;javascript&#39;, javascript);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If your build tool processes CSS imports, you can also import the theme directly as a module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import hljs from &#39;highlight.js&#39;;
import &#39;highlight.js/styles/github.css&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting the Library&lt;/h2&gt; 
&lt;p&gt;You can get highlight.js as a hosted, or custom-build, browser script or as a server module. Right out of the box the browser script supports both AMD and CommonJS, so if you wish you can use RequireJS or Browserify without having to build from source. The server module also works perfectly fine with Browserify, but there is the option to use a build specific to browsers rather than something meant for a server.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Do not link to GitHub directly.&lt;/strong&gt; The library is not supposed to work straight from the source, it requires building. If none of the pre-packaged options work for you refer to the &lt;a href=&quot;http://highlightjs.readthedocs.io/en/latest/building-testing.html&quot;&gt;building documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;On Almond.&lt;/strong&gt; You need to use the optimizer to give the module a name. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;r.js -o name=hljs paths.hljs=/path/to/highlight out=highlight.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Fetch via CDN&lt;/h3&gt; 
&lt;p&gt;A prebuilt version of Highlight.js bundled with many common languages is hosted by several popular CDNs. When using Highlight.js via CDN you can use Subresource Integrity for additional security. For details see &lt;a href=&quot;https://github.com/highlightjs/cdn-release/raw/main/DIGESTS.md&quot;&gt;DIGESTS.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;cdnjs (&lt;a href=&quot;https://cdnjs.com/libraries/highlight.js&quot;&gt;link&lt;/a&gt;)&lt;/h4&gt; 
&lt;h5&gt;Common JS 
 &lt;!-- omit in toc --&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/default.min.css&quot;&amp;gt;
&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/highlight.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- and it&#39;s easy to individually load additional languages --&amp;gt;
&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/languages/go.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;ES6 Modules 
 &lt;!-- omit in toc --&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/styles/dark.min.css&quot;&amp;gt;
&amp;lt;script type=&quot;module&quot;&amp;gt;
import hljs from &#39;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/es/highlight.min.js&#39;;
//  and it&#39;s easy to individually load additional languages
import go from &#39;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/es/languages/go.min.js&#39;;
hljs.registerLanguage(&#39;go&#39;, go);
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;jsdelivr (&lt;a href=&quot;https://www.jsdelivr.com/package/gh/highlightjs/cdn-release&quot;&gt;link&lt;/a&gt;)&lt;/h4&gt; 
&lt;h5&gt;Common JS 
 &lt;!-- omit in toc --&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.4.0/build/styles/default.min.css&quot;&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.4.0/build/highlight.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- and it&#39;s easy to individually load additional languages --&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.4.0/build/languages/go.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;ES6 Modules 
 &lt;!-- omit in toc --&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.4.0/build/styles/default.min.css&quot;&amp;gt;
&amp;lt;script type=&quot;module&quot;&amp;gt;
import hljs from &#39;https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.4.0/build/es/highlight.min.js&#39;;
//  and it&#39;s easy to individually load additional languages
import go from &#39;https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.4.0/build/es/languages/go.min.js&#39;;
hljs.registerLanguage(&#39;go&#39;, go);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;unpkg (&lt;a href=&quot;https://unpkg.com/browse/@highlightjs/cdn-assets/&quot;&gt;link&lt;/a&gt;)&lt;/h4&gt; 
&lt;h5&gt;Common JS 
 &lt;!-- omit in toc --&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/@highlightjs/cdn-assets@11.4.0/styles/default.min.css&quot;&amp;gt;
&amp;lt;script src=&quot;https://unpkg.com/@highlightjs/cdn-assets@11.4.0/highlight.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- and it&#39;s easy to individually load additional languages --&amp;gt;
&amp;lt;script src=&quot;https://unpkg.com/@highlightjs/cdn-assets@11.4.0/languages/go.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;ES6 Modules 
 &lt;!-- omit in toc --&gt;&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/@highlightjs/cdn-assets@11.4.0/styles/default.min.css&quot;&amp;gt;
&amp;lt;script type=&quot;module&quot;&amp;gt;
import hljs from &#39;https://unpkg.com/@highlightjs/cdn-assets@11.4.0/es/highlight.min.js&#39;;
//  and it&#39;s easy to individually load &amp;amp; register additional languages
import go from &#39;https://unpkg.com/@highlightjs/cdn-assets@11.4.0/es/languages/go.min.js&#39;;
hljs.registerLanguage(&#39;go&#39;, go);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;The CDN-hosted &lt;code&gt;highlight.min.js&lt;/code&gt; package doesn&#39;t bundle every language.&lt;/em&gt; It would be very large. You can find our list of &quot;common&quot; languages that we bundle by default on our &lt;a href=&quot;https://highlightjs.org/download/&quot;&gt;download page&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Download prebuilt CDN assets&lt;/h4&gt; 
&lt;p&gt;You can also download and self-host the same assets we serve up via our own CDNs. We publish those builds to the &lt;a href=&quot;https://github.com/highlightjs/cdn-release&quot;&gt;cdn-release&lt;/a&gt; GitHub repository. You can easily pull individual files off the CDN endpoints with &lt;code&gt;curl&lt;/code&gt;, etc; if say you only needed &lt;code&gt;highlight.min.js&lt;/code&gt; and a single CSS file.&lt;/p&gt; 
&lt;p&gt;There is also an npm package &lt;a href=&quot;https://www.npmjs.com/package/@highlightjs/cdn-assets&quot;&gt;@highlightjs/cdn-assets&lt;/a&gt; if pulling the assets in via &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; would be easier for your build process.&lt;/p&gt; 
&lt;h3&gt;Download from our website&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://highlightjs.org/download/&quot;&gt;download page&lt;/a&gt; can quickly generate a custom single-file minified bundle including only the languages you desire.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&quot;https://raw.githubusercontent.com/highlightjs/highlight.js/main/#build-from-source&quot;&gt;Building from source&lt;/a&gt; can produce slightly smaller builds than the website download.&lt;/p&gt; 
&lt;h3&gt;Install via NPM package&lt;/h3&gt; 
&lt;p&gt;Our NPM package including all supported languages can be installed with NPM or Yarn:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install highlight.js
# or
yarn add highlight.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can build the NPM package from source.&lt;/p&gt; 
&lt;h3&gt;Build from Source&lt;/h3&gt; 
&lt;p&gt;The &lt;a href=&quot;https://github.com/highlightjs/&quot;&gt;current source code&lt;/a&gt; is always available on GitHub.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node tools/build.js -t node
node tools/build.js -t browser :common
node tools/build.js -t cdn :common
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See our &lt;a href=&quot;http://highlightjs.readthedocs.io/en/latest/building-testing.html&quot;&gt;building documentation&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Requirements&lt;/h2&gt; 
&lt;p&gt;Highlight.js works on all modern browsers and currently supported Node.js versions. You&#39;ll need the following software to contribute to the core library:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Node.js &amp;gt;= 12.x&lt;/li&gt; 
 &lt;li&gt;npm &amp;gt;= 6.x&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Highlight.js is released under the BSD License. See our &lt;a href=&quot;https://github.com/highlightjs/highlight.js/raw/main/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;p&gt;The official website for the library is &lt;a href=&quot;https://highlightjs.org/&quot;&gt;https://highlightjs.org/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Further in-depth documentation for the API and other topics is at &lt;a href=&quot;http://highlightjs.readthedocs.io/&quot;&gt;http://highlightjs.readthedocs.io/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A list of the Core Team and contributors can be found in the &lt;a href=&quot;https://github.com/highlightjs/highlight.js/raw/main/CONTRIBUTORS.md&quot;&gt;CONTRIBUTORS.md&lt;/a&gt; file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeCoupa/awesome-cheatsheets</title>
      <link>https://github.com/LeCoupa/awesome-cheatsheets</link>
      <description>&lt;p&gt;üë©‚Äçüíªüë®‚Äçüíª Awesome cheatsheets for popular programming languages, frameworks and development tools. They include everything you should know in one single file.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://lecoupa.github.io/awesome-cheatsheets/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/_design/cover_github@2x.png&quot; alt=&quot;AWESOME CHEATSHEETS LOGO&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://awesome.re&quot;&gt;&lt;img src=&quot;https://awesome.re/badge.svg?sanitize=true&quot; alt=&quot;Awesome&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/LeCoupa/awesome-cheatsheets/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;GitHub license&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;WEBSITE DIRECTORY&lt;/strong&gt;: &lt;a href=&quot;https://lecoupa.github.io/awesome-cheatsheets/&quot;&gt;Available here&lt;/a&gt;.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;üìö Awesome cheatsheets for popular programming languages, frameworks and development tools. They include everything you should know in one single file.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;ü§î Why Awesome-Cheatsheets?&lt;/h2&gt; 
&lt;p&gt;I usually make a cheat sheet when I want to improve my skills in a programming language, a framework or a development tool. &lt;a href=&quot;https://gist.github.com/LeCoupa&quot;&gt;I started doing these kinds of things a long time ago on Gist&lt;/a&gt;. To better keep track of the history and to let people contribute, I reorganized all of them into this single repository. Most of the content is coming from official documentation and some books I have read.&lt;/p&gt; 
&lt;p&gt;Feel free to take a look. You might learn new things. They have been designed to provide a quick way to assess your knowledge and to save you time.&lt;/p&gt; 
&lt;h2&gt;üìö Table of Contents&lt;/h2&gt; 
&lt;h3&gt;üìÉ Languages&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;View cheatsheets&lt;/summary&gt; 
 &lt;h4&gt;Command line interface&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/languages/bash.sh&quot;&gt;Bash&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Imperative&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/languages/C.txt&quot;&gt;C&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/languages/C%23.txt&quot;&gt;C#&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/languages/golang.md&quot;&gt;Go&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/languages/java.md&quot;&gt;Java&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/languages/php.php&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/languages/python.md&quot;&gt;Python&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Functional&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/languages/javascript.js&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/details&gt; 
&lt;h3&gt;üì¶ Backend&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;View cheatsheets&lt;/summary&gt; 
 &lt;h4&gt;PHP&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/backend/laravel.php&quot;&gt;Laravel&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Python&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/backend/django.py&quot;&gt;Django&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Javascript&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/backend/adonis.js&quot;&gt;Adonis.js&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/backend/express.js&quot;&gt;Express.js&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/backend/feathers.js&quot;&gt;Feathers.js&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/backend/moleculer.js&quot;&gt;Moleculer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/backend/node.js&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/backend/sails.js&quot;&gt;Sails.js&lt;/a&gt; &lt;/li&gt;
 &lt;/ul&gt;
&lt;/details&gt;   
&lt;h3&gt;üåê Frontend&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;View cheatsheets&lt;/summary&gt; 
 &lt;h4&gt;Basics&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/frontend/html5.html&quot;&gt;HTML5&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Frameworks&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/frontend/react.js&quot;&gt;React.js&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/frontend/vue.js&quot;&gt;Vue.js&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/frontend/tailwind.css&quot;&gt;Tailwind.css&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/frontend/ember.js&quot;&gt;Ember.js&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/frontend/angular.js&quot;&gt;Angular (2+)&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/frontend/angularjs.js&quot;&gt;AngularJS&lt;/a&gt; &lt;/li&gt;
 &lt;/ul&gt;
&lt;/details&gt;   
&lt;h3&gt;üóÉÔ∏è Databases&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;View cheatsheets&lt;/summary&gt; 
 &lt;h4&gt;SQL&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/databases/mysql.sh&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;NoSQL&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/databases/redis.sh&quot;&gt;Redis&lt;/a&gt; &lt;/li&gt;
 &lt;/ul&gt;
&lt;/details&gt;   
&lt;h3&gt;üîß Tools&lt;/h3&gt; 
&lt;details&gt; 
 &lt;summary&gt;View cheatsheets&lt;/summary&gt; 
 &lt;h4&gt;Development&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/curl.sh&quot;&gt;cURL&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/drush.sh&quot;&gt;Drush&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/elasticsearch.js&quot;&gt;Elasticsearch&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/emmet.md&quot;&gt;Emmet&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/git.sh&quot;&gt;Git&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/puppeteer.js&quot;&gt;Puppeteer&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/sublime_text.md&quot;&gt;Sublime Text&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/vim.txt&quot;&gt;VIM&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/vscode.md&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/xcode.txt&quot;&gt;Xcode&lt;/a&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;h4&gt;Infrastructure&lt;/h4&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/aws.sh&quot;&gt;AWS CLI&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/docker.sh&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/heroku.sh&quot;&gt;Heroku CLI&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/kubernetes.md&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/nanobox_boxfile.yml&quot;&gt;Nanobox Boxfile&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/nanobox_cli.sh&quot;&gt;Nanobox CLI&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/nginx.sh&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/pm2.sh&quot;&gt;PM2&lt;/a&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/LeCoupa/awesome-cheatsheets/master/tools/ubuntu.sh&quot;&gt;Ubuntu&lt;/a&gt; &lt;/li&gt;
 &lt;/ul&gt;
&lt;/details&gt;   
&lt;h2&gt;üôåüèº How to Contribute?&lt;/h2&gt; 
&lt;p&gt;You are more than welcome to contribute and build your own cheat sheet for your favorite programming language, framework or development tool. Just submit changes via pull request and I will review them before merging.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AMAI-GmbH/AI-Expert-Roadmap</title>
      <link>https://github.com/AMAI-GmbH/AI-Expert-Roadmap</link>
      <description>&lt;p&gt;Roadmap to becoming an Artificial Intelligence Expert in 2021&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/AMAI-GmbH/AI-Expert-Roadmap&quot;&gt; &lt;img src=&quot;https://uploads-ssl.webflow.com/58e6a2b25c28230d367487ad/5c32232ecb585fcc5c4645e1_icon_machine-learning.svg?sanitize=true&quot; alt=&quot;Developer Roadmap&quot; width=&quot;96&quot; height=&quot;96&quot;&gt; &lt;/a&gt; &lt;/p&gt;
&lt;h2 align=&quot;center&quot;&gt;i.am.ai&lt;br&gt;AI Expert Roadmap&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt;Roadmap to becoming an Artificial Intelligence Expert in 2021&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://twitter.com/home?status=https://i.am.ai/roadmap Roadmap to becoming an Artificial Intelligence Expert in 2021&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tweet-blue.svg?logo=twitter&amp;amp;logoColor=white&quot; style=&quot;display: inherit;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/shareArticle?mini=true&amp;amp;url=https://i.am.ai/roadmap&amp;amp;title=&amp;amp;summary=Roadmap to becoming an Artificial Intelligence Expert in 2021&amp;amp;source=&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/post-blue.svg?logo=linkedin&amp;amp;logoColor=white&quot; style=&quot;display: inherit;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/AMAI-GmbH/AI-Expert-Roadmap&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Roadmap-2021-yellowgreen.svg?sanitize=true&quot; style=&quot;display: inherit;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://am.ai?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Badge&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;AMAI GmbH&quot; src=&quot;https://img.shields.io/badge/Author-AMAI GmbH-blue.svg&quot; style=&quot;display: inherit;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opensource.org/licenses/MIT/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;MIT License&quot; src=&quot;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&quot; style=&quot;display: inherit;&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Below you find a set of charts demonstrating the paths that you can take and the technologies that you would want to adopt in order to become a data scientist, machine learning or an ai expert. We made these charts for our new employees to make them AI Experts but we wanted to share them here to help the community.&lt;/p&gt; 
&lt;p&gt;If you are interested to become an AI EXPERT at &lt;a href=&quot;https://www.linkedin.com/company/amai-gmbh/?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Become+Expert&quot;&gt;AMAI&lt;/a&gt; in Germany, or you want to &lt;a href=&quot;https://am.ai?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Hire+Expert&quot;&gt;hire an AI Expert&lt;/a&gt;, please say &lt;a href=&quot;mailto:hi@am.ai&quot;&gt;hi@am.ai&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Note&lt;/h2&gt; 
&lt;p&gt;üëâ An &lt;strong&gt;interactive version with links to follow&lt;/strong&gt; about each bullet of the list can be found at &lt;a href=&quot;https://i.am.ai/roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Interactive&quot;&gt;i.am.ai/roadmap&lt;/a&gt; üëà&lt;/p&gt; 
&lt;p&gt;To receive updates &lt;a href=&quot;https://github.com/AMAI-GmbH/AI-Expert-Roadmap/stargazers&quot;&gt;star &lt;span&gt;‚≠ê&lt;/span&gt;&lt;/a&gt; and watch &lt;span&gt;üëÄ&lt;/span&gt; the &lt;a href=&quot;https://github.com/AMAI-GmbH/AI-Expert-Roadmap/&quot;&gt;GitHub Repo&lt;/a&gt; to get notified, when we add new content to stay on the top of the most recent research.&lt;/p&gt; 
&lt;h2&gt;Disclaimer&lt;/h2&gt; 
&lt;p&gt;The purpose of these roadmaps is to give you an idea about the landscape and to guide you if you are confused about what to learn next and not to encourage you to pick what is hip and trendy. You should grow some understanding of why one tool would better suited for some cases than the other and remember hip and trendy never means best suited for the job.&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://i.am.ai/roadmap#introduction?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Introduction&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/intro.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Fundamentals&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://i.am.ai/roadmap#fundamentals?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Fundamentals&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/fundamentals.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Data Science Roadmap&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://i.am.ai/roadmap#data-science-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+DataScience&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/datascience.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Machine Learning Roadmap&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://i.am.ai/roadmap#machine-learning-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+MachineLearning&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/machine_learning.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Deep Learning Roadmap&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://i.am.ai/roadmap#deep-learning-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+DeepLearning&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/deep_learning.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Data Engineer Roadmap&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://i.am.ai/roadmap#data-engineer-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+DataEngineer&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/data_engineer.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Big Data Engineer Roadmap&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://i.am.ai/roadmap#big-data-engineer-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+BigDataEngineer&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/big_data_engineer.svg?sanitize=true&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;üö¶ Wrap Up&lt;/h2&gt; 
&lt;p&gt;If you think any of the roadmaps can be improved, please do open a PR with any updates and submit any issues. Also, we will continue to improve this, so you might want to watch/star this repository to revisit.&lt;/p&gt; 
&lt;h2&gt;üôå Contribution&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Have a look at the &lt;a href=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/contributing.md&quot;&gt;contribution docs&lt;/a&gt; for how to update any of the roadmaps&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Open pull request with improvements&lt;/li&gt; 
 &lt;li&gt;Discuss ideas in issues&lt;/li&gt; 
 &lt;li&gt;Spread the word&lt;/li&gt; 
 &lt;li&gt;Reach out with any feedback&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Supported By&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/company/amai-gmbh/?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+SupportedBy&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;AMAI GmbH&quot; src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/logos/amai.svg?sanitize=true&quot; style=&quot;display: inherit;max-width: 150px;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://digitalhub-ai.de?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;AMAI GmbH&quot; src=&quot;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/logos/de-hub.svg?sanitize=true&quot; style=&quot;display: inherit; max-width: 150px;&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sudheerj/reactjs-interview-questions</title>
      <link>https://github.com/sudheerj/reactjs-interview-questions</link>
      <description>&lt;p&gt;List of top 500 ReactJS Interview Questions &amp; Answers....Coding exercise questions are coming soon!!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Interview Questions &amp;amp; Answers&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Click &lt;span&gt;‚≠ê&lt;/span&gt;if you like the project. Pull Request are highly appreciated. Follow me &lt;a href=&quot;https://twitter.com/SudheerJonna&quot;&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://www.fullstack.cafe/?utm_source=github&amp;amp;utm_medium=sud&quot;&gt; 3600 Tech Interview Questions. &lt;b&gt;Answered&lt;/b&gt;. 
  &lt;div&gt; 
   &lt;img src=&quot;https://user-images.githubusercontent.com/13550565/76382460-cc784d80-6393-11ea-8837-2b89265ac853.png&quot; width=&quot;150&quot; alt=&quot;FullStack.Cafe&quot;&gt; 
  &lt;/div&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;div&gt;
  Learn to code and get hired with 
 &lt;a href=&quot;https://zerotomastery.io/?utm_source=github&amp;amp;utm_medium=sponsor&amp;amp;utm_campaign=reactjs-interview-questions&quot;&gt;Zero To Mastery:&lt;/a&gt; 
 &lt;ol&gt; 
  &lt;li&gt;This &lt;a href=&quot;https://links.zerotomastery.io/react_sudheer&quot;&gt;React course&lt;/a&gt; is good if you‚Äôre struggling to learn React beyond the basics&lt;/li&gt; 
  &lt;li&gt;This &lt;a href=&quot;http://links.zerotomastery.io/mci_sudheer&quot;&gt;coding interview bootcamp&lt;/a&gt; is helpful if you‚Äôre serious about getting hired as a developer&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repository is specific to ReactJS. Please check &lt;a href=&quot;https://github.com/sudheerj/javascript-interview-questions&quot;&gt;Javascript Interview questions&lt;/a&gt; for core javascript questions.&lt;/p&gt; 
&lt;h2&gt;Downloading PDF/Epub formats&lt;/h2&gt; 
&lt;p&gt;You can download the PDF and Epub version of this repository from the latest run on the &lt;a href=&quot;https://github.com/sudheerj/reactjs-interview-questions/actions&quot;&gt;actions tab&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;No.&lt;/th&gt; 
   &lt;th&gt;Questions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Core React&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react&quot;&gt;What is React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-major-features-of-react&quot;&gt;What are the major features of React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jsx&quot;&gt;What is JSX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-element-and-component&quot;&gt;What is the difference between Element and Component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-components-in-react&quot;&gt;How to create components in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-to-use-a-class-component-over-a-function-component&quot;&gt;When to use a Class Component over a Function Component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;7&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-pure-components&quot;&gt;What are Pure Components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;8&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-in-react&quot;&gt;What is state in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;9&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-props-in-react&quot;&gt;What are props in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-state-and-props&quot;&gt;What is the difference between state and props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-we-not-update-the-state-directly&quot;&gt;Why should we not update the state directly?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-callback-function-as-an-argument-of-setstate&quot;&gt;What is the purpose of callback function as an argument of setState()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;13&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-html-and-react-event-handling&quot;&gt;What is the difference between HTML and React event handling?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;14&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-bind-methods-or-event-handlers-in-jsx-callbacks&quot;&gt;How to bind methods or event handlers in JSX callbacks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;15&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-a-parameter-to-an-event-handler-or-callback&quot;&gt;How to pass a parameter to an event handler or callback?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;16&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-synthetic-events-in-react&quot;&gt;What are synthetic events in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;17&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-inline-conditional-expressions&quot;&gt;What are inline conditional expressions?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;18&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-key-prop-and-what-is-the-benefit-of-using-it-in-arrays-of-elements&quot;&gt;What is &quot;key&quot; prop and what is the benefit of using it in arrays of elements?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;19&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-refs&quot;&gt;What is the use of refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;20&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-refs&quot;&gt;How to create refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;21&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-forward-refs&quot;&gt;What are forward refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;22&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#which-is-preferred-option-with-in-callback-refs-and-finddomnode&quot;&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-string-refs-legacy&quot;&gt;Why are String Refs legacy?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;24&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-virtual-dom&quot;&gt;What is Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-virtual-dom-works&quot;&gt;How Virtual DOM works?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;26&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-shadow-dom-and-virtual-dom&quot;&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;27&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-fiber&quot;&gt;What is React Fiber?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;28&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-goal-of-react-fiber&quot;&gt;What is the main goal of React Fiber?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;29&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-controlled-components&quot;&gt;What are controlled components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-uncontrolled-components&quot;&gt;What are uncontrolled components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;31&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-createelement-and-cloneelement&quot;&gt;What is the difference between createElement and cloneElement?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;32&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-lifting-state-up-in-react&quot;&gt;What is Lifting State Up in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;33&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-phases-of-component-lifecycle&quot;&gt;What are the different phases of component lifecycle?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;34&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-of-react&quot;&gt;What are the lifecycle methods of React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;35&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-higher-order-components&quot;&gt;What are Higher-Order components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;36&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-props-proxy-for-hoc-component&quot;&gt;How to create props proxy for HOC component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;37&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-context&quot;&gt;What is context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;38&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-children-prop&quot;&gt;What is children prop?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;39&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-write-comments-in-react&quot;&gt;How to write comments in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;40&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-using-super-constructor-with-props-argument&quot;&gt;What is the purpose of using super constructor with props argument?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;41&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reconciliation&quot;&gt;What is reconciliation?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;42&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-state-with-a-dynamic-key-name&quot;&gt;How to set state with a dynamic key name?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;43&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-would-be-the-common-mistake-of-function-being-called-every-time-the-component-renders&quot;&gt;What would be the common mistake of function being called every time the component renders?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;44&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-lazy-function-supports-named-exports&quot;&gt;Is lazy function supports named exports?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;45&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-uses-classname-over-class-attribute&quot;&gt;Why React uses className over class attribute?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;46&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-fragments&quot;&gt;What are fragments?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;47&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-fragments-are-better-than-container-divs&quot;&gt;Why fragments are better than container divs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;48&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-portals-in-react&quot;&gt;What are portals in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;49&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateless-components&quot;&gt;What are stateless components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;50&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateful-components&quot;&gt;What are stateful components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;51&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-apply-validation-on-props-in-react&quot;&gt;How to apply validation on props in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;52&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react&quot;&gt;What are the advantages of React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;53&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-of-react&quot;&gt;What are the limitations of React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;54&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-error-boundaries-in-react-v16&quot;&gt;What are error boundaries in React v16&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;55&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-error-boundaries-handled-in-react-v15&quot;&gt;How error boundaries handled in React v15?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;56&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-recommended-ways-for-static-type-checking&quot;&gt;What are the recommended ways for static type checking?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;57&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-react-dom-package&quot;&gt;What is the use of react-dom package?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;58&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-render-method-of-react-dom&quot;&gt;What is the purpose of render method of react-dom?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;59&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reactdomserver&quot;&gt;What is ReactDOMServer?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;60&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-innerhtml-in-react&quot;&gt;How to use InnerHtml in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;61&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-styles-in-react&quot;&gt;How to use styles in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;62&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-events-are-different-in-react&quot;&gt;How events are different in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;63&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-setstate-in-constructor&quot;&gt;What will happen if you use setState in constructor?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-impact-of-indexes-as-keys&quot;&gt;What is the impact of indexes as keys?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;65&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-setstate-in-componentwillmount-method&quot;&gt;Is it good to use setState() in componentWillMount() method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;66&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-props-in-initial-state&quot;&gt;What will happen if you use props in initial state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;67&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-conditionally-render-components&quot;&gt;How do you conditionally render components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;68&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-be-careful-when-spreading-props-on-dom-elements&quot;&gt;Why we need to be careful when spreading props on DOM elements??&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;69&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-use-decorators-in-react&quot;&gt;How you use decorators in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;70&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-memoize-a-component&quot;&gt;How do you memoize a component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;71&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-implement-server-side-rendering-or-ssr&quot;&gt;How you implement Server-Side Rendering or SSR?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;72&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-enable-production-mode-in-react&quot;&gt;How to enable production mode in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;73&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-cra-and-its-benefits&quot;&gt;What is CRA and its benefits?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;74&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-lifecycle-methods-order-in-mounting&quot;&gt;What is the lifecycle methods order in mounting?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;75&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-going-to-be-deprecated-in-react-v16&quot;&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;76&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromprops-lifecycle-method&quot;&gt;What is the purpose of getDerivedStateFromProps() lifecycle method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;77&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getsnapshotbeforeupdate-lifecycle-method&quot;&gt;What is the purpose of getSnapshotBeforeUpdate() lifecycle method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;78&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-hooks-replace-render-props-and-higher-order-components&quot;&gt;Do Hooks replace render props and higher order components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;79&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-way-for-naming-components&quot;&gt;What is the recommended way for naming components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;80&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-ordering-of-methods-in-component-class&quot;&gt;What is the recommended ordering of methods in component class?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;81&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-switching-component&quot;&gt;What is a switching component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;82&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-pass-a-function-to-setstate&quot;&gt;Why we need to pass a function to setState()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;83&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-strict-mode-in-react&quot;&gt;What is strict mode in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;84&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-mixins&quot;&gt;What are React Mixins?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;85&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-ismounted-an-anti-pattern-and-what-is-the-proper-solution&quot;&gt;Why is isMounted() an anti-pattern and what is the proper solution?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;86&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-pointer-events-supported-in-react&quot;&gt;What are the Pointer Events supported in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;87&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-component-names-start-with-capital-letter&quot;&gt;Why should component names start with capital letter?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;88&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-custom-dom-attributes-supported-in-react-v16&quot;&gt;Are custom DOM attributes supported in React v16?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;89&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-constructor-and-getinitialstate&quot;&gt;What is the difference between constructor and getInitialState?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;90&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-force-a-component-to-re-render-without-calling-setstate&quot;&gt;Can you force a component to re-render without calling setState?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;91&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-super-and-superprops-in-react-using-es6-classes&quot;&gt;What is the difference between super() and super(props) in React using ES6 classes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;92&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-loop-inside-jsx&quot;&gt;How to loop inside JSX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;93&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-props-in-attribute-quotes&quot;&gt;How do you access props in attribute quotes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;94&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-proptype-array-with-shape&quot;&gt;What is React PropType array with shape?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;95&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-conditionally-apply-class-attributes&quot;&gt;How to conditionally apply class attributes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;96&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-reactdom&quot;&gt;What is the difference between React and ReactDOM?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;97&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-reactdom-is-separated-from-react&quot;&gt;Why ReactDOM is separated from React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;98&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-react-label-element&quot;&gt;How to use React label element?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;99&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-combine-multiple-inline-style-objects&quot;&gt;How to combine multiple inline style objects?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-re-render-the-view-when-the-browser-is-resized&quot;&gt;How to re-render the view when the browser is resized?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;101&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-setstate-and-replacestate-methods&quot;&gt;What is the difference between setState and replaceState methods?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;102&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-listen-to-state-changes&quot;&gt;How to listen to state changes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;103&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-approach-of-removing-an-array-element-in-react-state&quot;&gt;What is the recommended approach of removing an array element in react state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;104&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-rendering-html&quot;&gt;Is it possible to use React without rendering HTML?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;105&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pretty-print-json-with-react&quot;&gt;How to pretty print JSON with React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;106&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-cant-update-props-in-react&quot;&gt;Why you can&#39;t update props in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;107&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-focus-an-input-element-on-page-load&quot;&gt;How to focus an input element on page load?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;108&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-ways-of-updating-objects-in-state&quot;&gt;What are the possible ways of updating objects in state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;110&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-can-we-find-the-version-of-react-at-runtime-in-the-browser&quot;&gt;How can we find the version of React at runtime in the browser?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;111&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-approaches-to-include-polyfills-in-your-create-react-app&quot;&gt;What are the approaches to include polyfills in your create-react-app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;112&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-https-instead-of-http-in-create-react-app&quot;&gt;How to use https instead of http in create-react-app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;113&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-avoid-using-relative-path-imports-in-create-react-app&quot;&gt;How to avoid using relative path imports in create-react-app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;114&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-google-analytics-for-react-router&quot;&gt;How to add Google Analytics for react-router?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;115&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-update-a-component-every-second&quot;&gt;How to update a component every second?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;116&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-apply-vendor-prefixes-to-inline-styles-in-react&quot;&gt;How do you apply vendor prefixes to inline styles in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;117&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-import-and-export-components-using-react-and-es6&quot;&gt;How to import and export components using react and ES6?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;118&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-exceptions-on-react-component-naming&quot;&gt;What are the exceptions on React component naming?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;119&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-a-component-constructor-called-only-once&quot;&gt;Why is a component constructor called only once?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;120&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-define-constants-in-react&quot;&gt;How to define constants in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;121&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-programmatically-trigger-click-event-in-react&quot;&gt;How to programmatically trigger click event in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;122&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-asyncawait-in-plain-react&quot;&gt;Is it possible to use async/await in plain React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;123&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-common-folder-structures-for-react&quot;&gt;What are the common folder structures for React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;124&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-packages-for-animation&quot;&gt;What are the popular packages for animation?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;125&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-styles-modules&quot;&gt;What is the benefit of styles modules?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;126&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-react-specific-linters&quot;&gt;What are the popular React-specific linters?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;127&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-call-and-in-which-component-lifecycle-methods-should-i-make-an-ajax-call&quot;&gt;How to make AJAX call and In which component lifecycle methods should I make an AJAX call?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;128&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-render-props&quot;&gt;What are render props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Router&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;129&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-router&quot;&gt;What is React Router?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;130&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-router-is-different-from-history-library&quot;&gt;How React Router is different from history library?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;131&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-router-components-of-react-router-v4&quot;&gt;What are the &amp;lt;Router&amp;gt; components of React Router v4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;132&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-push-and-replace-methods-of-history&quot;&gt;What is the purpose of push and replace methods of history?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;133&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-programmatically-navigate-using-react-router-v4&quot;&gt;How do you programmatically navigate using React router v4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;134&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-query-parameters-in-react-router-v4&quot;&gt;How to get query parameters in React Router v4&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;135&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-get-router-may-have-only-one-child-element-warning&quot;&gt;Why you get &quot;Router may have only one child element&quot; warning?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;136&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-params-to-historypush-method-in-react-router-v4&quot;&gt;How to pass params to history.push method in React Router v4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;137&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-implement-default-or-notfound-page&quot;&gt;How to implement default or NotFound page?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;138&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-history-on-react-router-v4&quot;&gt;How to get history on React Router v4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;139&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-perform-automatic-redirect-after-login&quot;&gt;How to perform automatic redirect after login?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Internationalization&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;140&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-intl&quot;&gt;What is React-Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;141&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-react-intl&quot;&gt;What are the main features of React Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;142&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-two-ways-of-formatting-in-react-intl&quot;&gt;What are the two ways of formatting in React Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;143&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-formattedmessage-as-placeholder-using-react-intl&quot;&gt;How to use FormattedMessage as placeholder using React Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;144&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-current-locale-with-react-intl&quot;&gt;How to access current locale with React Intl&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;145&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-format-date-using-react-intl&quot;&gt;How to format date using React Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Testing&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;146&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-shallow-renderer-in-react-testing&quot;&gt;What is Shallow Renderer in React testing?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;147&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-testrenderer-package-in-react&quot;&gt;What is TestRenderer package in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;148&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-reacttestutils-package&quot;&gt;What is the purpose of ReactTestUtils package?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;149&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jest&quot;&gt;What is Jest?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;150&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-jest-over-jasmine&quot;&gt;What are the advantages of Jest over Jasmine?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;151&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-a-simple-example-of-jest-test-case&quot;&gt;Give a simple example of Jest test case&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Redux&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;152&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flux&quot;&gt;What is Flux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;153&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux&quot;&gt;What is Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;154&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-core-principles-of-redux&quot;&gt;What are the core principles of Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;155&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-downsides-of-redux-compared-to-flux&quot;&gt;What are the downsides of Redux compared to Flux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;156&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-mapstatetoprops-and-mapdispatchtoprops&quot;&gt;What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;157&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-dispatch-an-action-in-reducer&quot;&gt;Can I dispatch an action in reducer?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;158&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-redux-store-outside-a-component&quot;&gt;How to access Redux store outside a component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;159&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-drawbacks-of-mvw-pattern&quot;&gt;What are the drawbacks of MVW pattern&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;160&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-there-any-similarities-between-redux-and-rxjs&quot;&gt;Are there any similarities between Redux and RxJS?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;161&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-dispatch-an-action-on-load&quot;&gt;How to dispatch an action on load?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;162&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-connect-from-react-redux&quot;&gt;How to use connect from React Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;163&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-reset-state-in-redux&quot;&gt;How to reset state in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;164&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#whats-the-purpose-of-at-symbol-in-the-redux-connect-decorator&quot;&gt;Whats the purpose of at symbol in the redux connect decorator?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;165&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-context-and-react-redux&quot;&gt;What is the difference between React context and React Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;166&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-redux-state-functions-called-reducers&quot;&gt;Why are Redux state functions called reducers?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;167&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-request-in-redux&quot;&gt;How to make AJAX request in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;168&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-keep-all-components-state-in-redux-store&quot;&gt;Should I keep all component&#39;s state in Redux store?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;169&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-way-to-access-redux-store&quot;&gt;What is the proper way to access Redux store?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;170&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-component-and-container-in-react-redux&quot;&gt;What is the difference between component and container in React Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;171&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-the-constants-in-redux&quot;&gt;What is the purpose of the constants in Redux? &lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;172&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-ways-to-write-mapdispatchtoprops&quot;&gt;What are the different ways to write mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;173&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-the-ownprops-parameter-in-mapstatetoprops-and-mapdispatchtoprops&quot;&gt;What is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;174&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-structure-redux-top-level-directories&quot;&gt;How to structure Redux top level directories?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;175&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-saga&quot;&gt;What is redux-saga?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;176&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-mental-model-of-redux-saga&quot;&gt;What is the mental model of redux-saga?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;177&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-call-and-put-in-redux-saga&quot;&gt;What are the differences between call and put in redux-saga&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;178&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-thunk&quot;&gt;What is Redux Thunk?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;179&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-saga-and-redux-thunk&quot;&gt;What are the differences between redux-saga and redux-thunk&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;180&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-devtools&quot;&gt;What is Redux DevTools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;181&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-redux-devtools&quot;&gt;What are the features of Redux DevTools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;182&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-redux-selectors-and-why-to-use-them&quot;&gt;What are Redux selectors and Why to use them?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;183&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-form&quot;&gt;What is Redux Form?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;184&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-redux-form&quot;&gt;What are the main features of Redux Form?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;185&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-multiple-middlewares-to-redux&quot;&gt;How to add multiple middlewares to Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;186&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-initial-state-in-redux&quot;&gt;How to set initial state in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;187&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-relay-is-different-from-redux&quot;&gt;How Relay is different from Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;188&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-an-action-in-redux&quot;&gt;What is an action in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;188&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-native-and-react&quot;&gt;What is the difference between React Native and React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;189&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-test-react-native-apps&quot;&gt;How to test React Native apps?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;190&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-do-logging-in-react-native&quot;&gt;How to do logging in React Native?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;191&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-your-react-native&quot;&gt;How to debug your React Native?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React supported libraries and Integration&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;192&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reselect-and-how-it-works&quot;&gt;What is reselect and how it works?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;193&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flow&quot;&gt;What is Flow?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;194&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-flow-and-proptypes&quot;&gt;What is the difference between Flow and PropTypes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;195&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-font-awesome-icons-in-react&quot;&gt;How to use font-awesome icons in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;196&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-dev-tools&quot;&gt;What is React Dev Tools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;197&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-devtools-not-loading-in-chrome-for-local-files&quot;&gt;Why is DevTools not loading in Chrome for local files?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;198&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-polymer-in-react&quot;&gt;How to use Polymer in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;199&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react-over-vuejs&quot;&gt;What are the advantages of React over Vue.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;200&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-angular&quot;&gt;What is the difference between React and Angular?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;201&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-tab-is-not-showing-up-in-devtools&quot;&gt;Why React tab is not showing up in DevTools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;202&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-styled-components&quot;&gt;What are styled components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;203&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-styled-components&quot;&gt;Give an example of Styled Components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;204&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-relay&quot;&gt;What is Relay?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;205&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-typescript-in-create-react-app-application&quot;&gt;How to use TypeScript in create-react-app application?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;206&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-reselect-library&quot;&gt;What are the main features of reselect library?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;207&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-reselect-usage&quot;&gt;Give an example of reselect usage?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;209&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-the-statics-object-work-with-es6-classes-in-react&quot;&gt;Does the statics object work with ES6 classes in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;210&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-redux-only-be-used-with-react&quot;&gt;Can Redux only be used with React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;211&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-you-need-to-have-a-particular-build-tool-to-use-redux&quot;&gt;Do you need to have a particular build tool to use Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;212&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-redux-form-initialvalues-get-updated-from-state&quot;&gt;How Redux Form initialValues get updated from state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;213&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-proptypes-allow-different-types-for-one-prop&quot;&gt;How React PropTypes allow different type for one prop?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;214&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-import-an-svg-file-as-react-component&quot;&gt;Can I import an SVG file as react component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;215&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-inline-ref-callbacks-or-functions-not-recommended&quot;&gt;Why are inline ref callbacks or functions not recommended?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;216&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-render-hijacking-in-react&quot;&gt;What is render hijacking in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;217&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hoc-factory-implementations&quot;&gt;What are HOC factory implementations?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;218&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-numbers-to-react-component&quot;&gt;How to pass numbers to React component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;219&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-keep-all-my-state-into-redux-should-i-ever-use-react-internal-state&quot;&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;220&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-registerserviceworker-in-react&quot;&gt;What is the purpose of registerServiceWorker in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;221&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-memo-function&quot;&gt;What is React memo function?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;222&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-lazy-function&quot;&gt;What is React lazy function?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;223&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-unnecessary-updates-using-setstate&quot;&gt;How to prevent unnecessary updates using setState?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;224&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-render-array-strings-and-numbers-in-react-16-version&quot;&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;225&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-class-field-declarations-syntax-in-react-classes&quot;&gt;How to use class field declarations syntax in React classes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;226&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hooks&quot;&gt;What are hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;227&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-needs-to-follow-for-hooks&quot;&gt;What are the rules needs to follow for hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;228&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-ensure-hooks-followed-the-rules-in-your-project&quot;&gt;How to ensure hooks followed the rules in your project?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;229&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-flux-and-redux&quot;&gt;What are the differences between Flux and Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;230&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-react-router-v4&quot;&gt;What are the benefits of React Router V4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;231&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-describe-about-componentdidcatch-lifecycle-method-signature&quot;&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;232&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#in-which-scenarios-error-boundaries-do-not-catch-errors&quot;&gt;In which scenarios error boundaries do not catch errors?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;233&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-need-error-boundaries-for-event-handlers&quot;&gt;Why do you not need error boundaries for event handlers?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;234&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-try-catch-block-and-error-boundaries&quot;&gt;What is the difference between try catch block and error boundaries?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;235&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-behavior-of-uncaught-errors-in-react-16&quot;&gt;What is the behavior of uncaught errors in react 16?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;236&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-placement-for-error-boundaries&quot;&gt;What is the proper placement for error boundaries?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;237&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-component-stack-trace-from-error-boundary&quot;&gt;What is the benefit of component stack trace from error boundary?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;238&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-required-method-to-be-defined-for-a-class-component&quot;&gt;What is the required method to be defined for a class component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;239&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-return-types-of-render-method&quot;&gt;What are the possible return types of render method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;240&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-purpose-of-constructor&quot;&gt;What is the main purpose of constructor?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;241&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-mandatory-to-define-constructor-for-react-component&quot;&gt;Is it mandatory to define constructor for React component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;242&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-default-props&quot;&gt;What are default props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;243&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-not-call-setstate-in-componentwillunmount&quot;&gt;Why should not call setState in componentWillUnmount?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;244&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromerror&quot;&gt;What is the purpose of getDerivedStateFromError?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;245&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-methods-order-when-component-re-rendered&quot;&gt;What is the methods order when component re-rendered?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;246&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-methods-invoked-during-error-handling&quot;&gt;What are the methods invoked during error handling?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;247&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-displayname-class-property&quot;&gt;What is the purpose of displayName class property?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;248&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-browser-support-for-react-applications&quot;&gt;What is the browser support for react applications?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;249&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-unmountcomponentatnode-method&quot;&gt;What is the purpose of unmountComponentAtNode method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;250&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-code-splitting&quot;&gt;What is code-splitting?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;251&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-strict-mode&quot;&gt;What is the benefit of strict mode?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;252&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-keyed-fragments&quot;&gt;What are Keyed Fragments?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;253&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-react-support-all-html-attributes&quot;&gt;Does React support all HTML attributes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;254&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-with-hocs&quot;&gt;What are the limitations with HOCs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;255&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-forwardrefs-in-devtools&quot;&gt;How to debug forwardRefs in DevTools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;256&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-component-props-defaults-to-true&quot;&gt;When component props defaults to true?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;257&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-nextjs-and-major-features-of-it&quot;&gt;What is NextJS and major features of it?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;258&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-an-event-handler-to-a-component&quot;&gt;How do you pass an event handler to a component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;259&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-arrow-functions-in-render-methods&quot;&gt;Is it good to use arrow functions in render methods?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;260&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-a-function-from-being-called-multiple-times&quot;&gt;How to prevent a function from being called multiple times?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;261&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-jsx-prevents-injection-attacks&quot;&gt;How JSX prevents Injection Attacks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;262&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-update-rendered-elements&quot;&gt;How do you update rendered elements?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;263&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-props-are-read-only&quot;&gt;How do you say that props are read only?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;264&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-state-updates-are-merged&quot;&gt;How do you say that state updates are merged?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;265&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-arguments-to-an-event-handler&quot;&gt;How do you pass arguments to an event handler?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;266&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-component-from-rendering&quot;&gt;How to prevent component from rendering?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;267&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-conditions-to-safely-use-the-index-as-a-key&quot;&gt;What are the conditions to safely use the index as a key?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;268&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-keys-should-be-globally-unique&quot;&gt;Is it keys should be globally unique?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;269&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-popular-choice-for-form-handling&quot;&gt;What is the popular choice for form handling?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;270&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-formik-over-redux-form-library&quot;&gt;What are the advantages of formik over redux form library?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;271&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-required-to-use-inheritance&quot;&gt;Why do you not required to use inheritance?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;272&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-web-components-in-react-application&quot;&gt;Can I use web components in react application?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;273&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-dynamic-import&quot;&gt;What is dynamic import?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;274&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-loadable-components&quot;&gt;What are loadable components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;275&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-suspense-component&quot;&gt;What is suspense component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;276&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-route-based-code-splitting&quot;&gt;What is route based code splitting?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;277&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-on-how-to-use-context&quot;&gt;Give an example on How to use context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;278&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-default-value-in-context&quot;&gt;What is the purpose of default value in context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;279&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-use-contexttype&quot;&gt;How do you use contextType?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;280&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-consumer&quot;&gt;What is a consumer?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;281&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-solve-performance-corner-cases-while-using-context&quot;&gt;How do you solve performance corner cases while using context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;282&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-forward-ref-in-hocs&quot;&gt;What is the purpose of forward ref in HOCs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;283&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-ref-argument-available-for-all-functions-or-class-components&quot;&gt;Is it ref argument available for all functions or class components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;284&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-need-additional-care-for-component-libraries-while-using-forward-refs&quot;&gt;Why do you need additional care for component libraries while using forward refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;285&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-react-class-components-without-es6&quot;&gt;How to create react class components without ES6?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;286&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-jsx&quot;&gt;Is it possible to use react without JSX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;287&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-diffing-algorithm&quot;&gt;What is diffing algorithm?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;288&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-covered-by-diffing-algorithm&quot;&gt;What are the rules covered by diffing algorithm?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;289&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-do-you-need-to-use-refs&quot;&gt;When do you need to use refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;290&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-prop-must-be-named-as-render-for-render-props&quot;&gt;Is it prop must be named as render for render props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;291&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-problems-of-using-render-props-with-pure-components&quot;&gt;What are the problems of using render props with pure components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;292&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-create-hoc-using-render-props&quot;&gt;How do you create HOC using render props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;293&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-windowing-technique&quot;&gt;What is windowing technique?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;294&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-print-falsy-values-in-jsx&quot;&gt;How do you print falsy values in JSX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;295&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-typical-use-case-of-portals?&quot;&gt;What is the typical use case of portals?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;296&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-set-default-value-for-uncontrolled-component&quot;&gt;How do you set default value for uncontrolled component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;297&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-your-favorite-react-stack&quot;&gt;What is your favorite React stack?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;298&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-real-dom-and-virtual-dom&quot;&gt;What is the difference between Real DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;299&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-bootstrap-to-a-react-application&quot;&gt;How to add Bootstrap to a react application?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;300&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-list-down-top-websites-or-applications-using-react-as-front-end-framework&quot;&gt;Can you list down top websites or applications using react as front end framework?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;301&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-recommended-to-use-css-in-js-technique-in-react&quot;&gt;Is it recommended to use CSS In JS technique in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;302&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-rewrite-all-my-class-components-with-hooks&quot;&gt;Do I need to rewrite all my class components with hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;303&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-fetch-data-with-react-hooks&quot;&gt;How to fetch data with React Hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;304&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-hooks-cover-all-use-cases-for-classes&quot;&gt;Is Hooks cover all use cases for classes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;305&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-stable-release-for-hooks-support&quot;&gt;What is the stable release for hooks support?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;306&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-we-use-array-destructuring-square-brackets-notation-in-usestate&quot;&gt;Why do we use array destructuring (square brackets notation) in useState?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;307&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-sources-used-for-introducing-hooks&quot;&gt;What are the sources used for introducing hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;308&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-imperative-api-of-web-components&quot;&gt;How do you access imperative API of web components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;309&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-formik&quot;&gt;What is formik?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;310&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-typical-middleware-choices-for-handling-asynchronous-calls-in-redux&quot;&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;311&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-browsers-understand-jsx-code&quot;&gt;Do browsers understand JSX code?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;312&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#describe-about-data-flow-in-react&quot;&gt;Describe about data flow in react?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;313&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-scripts&quot;&gt;What is react scripts?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;314&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-create-react-app&quot;&gt;What are the features of create react app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;315&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-rendertonodestream-method&quot;&gt;What is the purpose of renderToNodeStream method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;316&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-mobx&quot;&gt;What is MobX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;317&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-and-mobx&quot;&gt;What are the differences between Redux and MobX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;318&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-learn-es6-before-learning-reactjs&quot;&gt;Should I learn ES6 before learning ReactJS?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;319&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-concurrent-rendering&quot;&gt;What is Concurrent Rendering?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;320&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-async-mode-and-concurrent-mode&quot;&gt;What is the difference between async mode and concurrent mode?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;321&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-javascript-urls-in-react169&quot;&gt;Can I use javascript urls in react16.9?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;322&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-eslint-plugin-for-hooks&quot;&gt;What is the purpose of eslint plugin for hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;323&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-imperative-and-declarative-in-react&quot;&gt;What is the difference between Imperative and Declarative in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;324&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-using-typescript-with-reactjs&quot;&gt;What are the benefits of using typescript with reactjs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;325&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-make-sure-that-user-remains-authenticated-on-page-refresh-while-using-context-api-state-management&quot;&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;326&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-new-jsx-transform&quot;&gt;What are the benefits of new JSX transform?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;327&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-does-new-jsx-transform-different-from-old-transform&quot;&gt;How does new JSX transform different from old transform?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;328&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-get-redux-scaffolding-using-create-react-app&quot;&gt;How do you get redux scaffolding using create-react-app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;329&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-server-components&quot;&gt;What are React Server components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Core React&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;h3&gt;What is React?&lt;/h3&gt; &lt;p&gt;React is an &lt;strong&gt;open-source frontend JavaScript library&lt;/strong&gt; which is used for building user interfaces especially for single page applications. It is used for handling view layer for web and mobile apps. React was created by &lt;a href=&quot;https://github.com/jordwalke&quot;&gt;Jordan Walke&lt;/a&gt;, a software engineer working for Facebook. React was first deployed on Facebook&#39;s News Feed in 2011 and on Instagram in 2012.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the major features of React?&lt;/h3&gt; &lt;p&gt;The major features of React are:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;It uses &lt;strong&gt;VirtualDOM&lt;/strong&gt; instead of RealDOM considering that RealDOM manipulations are expensive.&lt;/li&gt; 
   &lt;li&gt;Supports &lt;strong&gt;server-side rendering&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Follows &lt;strong&gt;Unidirectional&lt;/strong&gt; data flow or data binding.&lt;/li&gt; 
   &lt;li&gt;Uses &lt;strong&gt;reusable/composable&lt;/strong&gt; UI components to develop the view.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSX?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;JSX&lt;/em&gt; is a XML-like syntax extension to ECMAScript (the acronym stands for &lt;em&gt;JavaScript XML&lt;/em&gt;). Basically it just provides syntactic sugar for the &lt;code&gt;React.createElement()&lt;/code&gt; function, giving us expressiveness of JavaScript along with HTML like template syntax.&lt;/p&gt; &lt;p&gt;In the example below text inside &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is returned as JavaScript function to the render function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class App extends React.Component {
  render() {
    return(
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{&#39;Welcome to React world!&#39;}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Element and Component?&lt;/h3&gt; &lt;p&gt;An &lt;em&gt;Element&lt;/em&gt; is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. &lt;em&gt;Elements&lt;/em&gt; can contain other &lt;em&gt;Elements&lt;/em&gt; in their props. Creating a React element is cheap. Once an element is created, it is never mutated.&lt;/p&gt; &lt;p&gt;The object representation of React Element would be as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const element = React.createElement(
  &#39;div&#39;,
  {id: &#39;login-btn&#39;},
  &#39;Login&#39;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above &lt;code&gt;React.createElement()&lt;/code&gt; function returns an object:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{
  type: &#39;div&#39;,
  props: {
    children: &#39;Login&#39;,
    id: &#39;login-btn&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And finally it renders to the DOM using &lt;code&gt;ReactDOM.render()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div id=&#39;login-btn&#39;&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas a &lt;strong&gt;component&lt;/strong&gt; can be declared in several different ways. It can be a class with a &lt;code&gt;render()&lt;/code&gt; method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Button = ({ onLogin }) =&amp;gt;
  &amp;lt;div id={&#39;login-btn&#39;} onClick={onLogin}&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then JSX gets transpiled to a &lt;code&gt;React.createElement()&lt;/code&gt; function tree:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Button = ({ onLogin }) =&amp;gt; React.createElement(
  &#39;div&#39;,
  { id: &#39;login-btn&#39;, onClick: onLogin },
  &#39;Login&#39;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to create components in React?&lt;/h3&gt; &lt;p&gt;There are two possible ways to create a component.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function Components:&lt;/strong&gt; This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function Greeting({ message }) {
  return &amp;lt;h1&amp;gt;{`Hello, ${message}`}&amp;lt;/h1&amp;gt;

}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Class Components:&lt;/strong&gt; You can also use ES6 class to define a component. The above function component can be written as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class Greeting extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;{`Hello, ${this.props.message}`}&amp;lt;/h1&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;When to use a Class Component over a Function Component?&lt;/h3&gt; &lt;p&gt;If the component needs &lt;em&gt;state or lifecycle methods&lt;/em&gt; then use class component otherwise use function component. &lt;em&gt;However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are Pure Components?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/em&gt; is exactly the same as &lt;em&gt;&lt;code&gt;React.Component&lt;/code&gt;&lt;/em&gt; except that it handles the &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; method for you. When props or state changes, &lt;em&gt;PureComponent&lt;/em&gt; will do a shallow comparison on both props and state. &lt;em&gt;Component&lt;/em&gt; on the other hand won&#39;t compare current props and state to next out of the box. Thus, the component will re-render by default whenever &lt;code&gt;shouldComponentUpdate&lt;/code&gt; is called.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is state in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;State&lt;/em&gt; of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.&lt;/p&gt; &lt;p&gt;Let&#39;s create a user component with message state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class User extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      message: &#39;Welcome to React world&#39;
    }
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/state.jpg&quot; alt=&quot;state&quot;&gt;&lt;/p&gt; &lt;p&gt;State is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any other component til the owner component decides to pass it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are props in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Props&lt;/em&gt; are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.&lt;/p&gt; &lt;p&gt;The primary purpose of props in React is to provide following component functionality:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Pass custom data to your component.&lt;/li&gt; 
   &lt;li&gt;Trigger state changes.&lt;/li&gt; 
   &lt;li&gt;Use via &lt;code&gt;this.props.reactProp&lt;/code&gt; inside component&#39;s &lt;code&gt;render()&lt;/code&gt; method.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, let us create an element with &lt;code&gt;reactProp&lt;/code&gt; property:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Element reactProp={&#39;1&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This &lt;code&gt;reactProp&lt;/code&gt; (or whatever you came up with) name then becomes a property attached to React&#39;s native props object which originally already exists on all components created using React library.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;props.reactProp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between state and props?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;props&lt;/em&gt; and &lt;em&gt;state&lt;/em&gt; are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;11&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should we not update the state directly?&lt;/h3&gt; &lt;p&gt;If you try to update the state directly then it won&#39;t re-render the component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Wrong
this.state.message = &#39;Hello world&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead use &lt;code&gt;setState()&lt;/code&gt; method. It schedules an update to a component&#39;s state object. When state changes, the component responds by re-rendering.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Correct
this.setState({ message: &#39;Hello World&#39; })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can directly assign to the state object either in &lt;em&gt;constructor&lt;/em&gt; or using latest javascript&#39;s class field declaration syntax.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;12&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;The callback function is invoked when setState finished and the component gets rendered. Since &lt;code&gt;setState()&lt;/code&gt; is &lt;strong&gt;asynchronous&lt;/strong&gt; the callback function is used for any post action.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is recommended to use lifecycle method rather than this callback function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;setState({ name: &#39;John&#39; }, () =&amp;gt; console.log(&#39;The name has updated and component re-rendered&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;13&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; &lt;p&gt;Below are some of the main differences between HTML and React event handling,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, the event name usually represents in &lt;em&gt;lowercase&lt;/em&gt; as a convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onclick=&#39;activateLasers()&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React it follows &lt;em&gt;camelCase&lt;/em&gt; convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={activateLasers}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, you can return &lt;code&gt;false&lt;/code&gt; to prevent default behavior:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&#39;#&#39; onclick=&#39;console.log(&quot;The link was clicked.&quot;); return false;&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React you must call &lt;code&gt;preventDefault()&lt;/code&gt; explicitly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function handleClick(event) {
  event.preventDefault()
  console.log(&#39;The link was clicked.&#39;)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, you need to invoke the function by appending &lt;code&gt;()&lt;/code&gt; Whereas in react you should not append &lt;code&gt;()&lt;/code&gt; with the function name. (refer &quot;activateLasers&quot; function in the first point for example)&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;14&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to bind methods or event handlers in JSX callbacks?&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to achieve this:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Binding in Constructor:&lt;/strong&gt; In JavaScript classes, the methods are not bound by default. The same thing applies for React event handlers defined as class methods. Normally we bind them in constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Foo extends Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    console.log(&#39;Click happened&#39;);
  }
  render() {
    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
  }
}

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Public class fields syntax:&lt;/strong&gt; If you don&#39;t like to use bind approach then &lt;em&gt;public class fields syntax&lt;/em&gt; can be used to correctly bind callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;handleClick = () =&amp;gt; {
  console.log(&#39;this is:&#39;, this)
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;
  {&#39;Click me&#39;}
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arrow functions in callbacks:&lt;/strong&gt; You can use &lt;em&gt;arrow functions&lt;/em&gt; directly in the callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;handleClick() {
    console.log(&#39;Click happened&#39;);
}
render() {
    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with &lt;code&gt;.bind()&lt;/code&gt; or &lt;em&gt;public class fields syntax&lt;/em&gt; approach considering performance.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;15&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass a parameter to an event handler or callback?&lt;/h3&gt; &lt;p&gt;You can use an &lt;em&gt;arrow function&lt;/em&gt; to wrap around an &lt;em&gt;event handler&lt;/em&gt; and pass parameters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={() =&amp;gt; this.handleClick(id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is an equivalent to calling &lt;code&gt;.bind&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick.bind(this, id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apart from these two approaches, you can also pass arguments to a function which is defined as arrow function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick(id)} /&amp;gt;
handleClick = (id) =&amp;gt; () =&amp;gt; {
    console.log(&quot;Hello, your ticket number is&quot;, id)
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;16&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are synthetic events in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SyntheticEvent&lt;/code&gt; is a cross-browser wrapper around the browser&#39;s native event. It&#39;s API is same as the browser&#39;s native event, including &lt;code&gt;stopPropagation()&lt;/code&gt; and &lt;code&gt;preventDefault()&lt;/code&gt;, except the events work identically across all browsers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;17&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are inline conditional expressions?&lt;/h3&gt; &lt;p&gt;You can use either &lt;em&gt;if statements&lt;/em&gt; or &lt;em&gt;ternary expressions&lt;/em&gt; which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
{
    messages.length &amp;gt; 0 &amp;amp;&amp;amp; !isLogin?
      &amp;lt;h2&amp;gt;
          You have {messages.length} unread messages.
      &amp;lt;/h2&amp;gt;
      :
      &amp;lt;h2&amp;gt;
          You don&#39;t have unread messages.
      &amp;lt;/h2&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;18&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is &quot;key&quot; prop and what is the benefit of using it in arrays of elements?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;key&lt;/code&gt; is a special string attribute you &lt;strong&gt;should&lt;/strong&gt; include when creating arrays of elements. &lt;em&gt;Key&lt;/em&gt; prop helps React identify which items have changed, are added, or are removed.&lt;/p&gt; &lt;p&gt;Most often we use ID from our data as &lt;em&gt;key&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const todoItems = todos.map((todo) =&amp;gt;
  &amp;lt;li key={todo.id}&amp;gt;
    {todo.text}
  &amp;lt;/li&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you don&#39;t have stable IDs for rendered items, you may use the item &lt;em&gt;index&lt;/em&gt; as a &lt;em&gt;key&lt;/em&gt; as a last resort:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const todoItems = todos.map((todo, index) =&amp;gt;
  &amp;lt;li key={index}&amp;gt;
    {todo.text}
  &amp;lt;/li&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using &lt;em&gt;indexes&lt;/em&gt; for &lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;not recommended&lt;/strong&gt; if the order of items may change. This can negatively impact performance and may cause issues with component state.&lt;/li&gt; 
   &lt;li&gt;If you extract list item as separate component then apply &lt;em&gt;keys&lt;/em&gt; on list component instead of &lt;code&gt;li&lt;/code&gt; tag.&lt;/li&gt; 
   &lt;li&gt;There will be a warning message in the console if the &lt;code&gt;key&lt;/code&gt; prop is not present on list items.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;19&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of refs?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;ref&lt;/em&gt; is used to return a reference to the element. They &lt;em&gt;should be avoided&lt;/em&gt; in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;20&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create refs?&lt;/h3&gt; &lt;p&gt;There are two approaches&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;This is a recently added approach. &lt;em&gt;Refs&lt;/em&gt; are created using &lt;code&gt;React.createRef()&lt;/code&gt; method and attached to React elements via the &lt;code&gt;ref&lt;/code&gt; attribute. In order to use &lt;em&gt;refs&lt;/em&gt; throughout the component, just assign the &lt;em&gt;ref&lt;/em&gt; to the instance property within constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.myRef = React.createRef()
  }
  render() {
    return &amp;lt;div ref={this.myRef} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use ref callbacks approach regardless of React version. For example, the search bar component&#39;s input element accessed as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class SearchBar extends Component {
   constructor(props) {
      super(props);
      this.txtSearch = null;
      this.state = { term: &#39;&#39; };
      this.setInputSearchRef = e =&amp;gt; {
         this.txtSearch = e;
      }
   }
   onInputChange(event) {
      this.setState({ term: this.txtSearch.value });
   }
   render() {
      return (
         &amp;lt;input
            value={this.state.term}
            onChange={this.onInputChange.bind(this)}
            ref={this.setInputSearchRef} /&amp;gt;
      );
   }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;You can also use &lt;em&gt;refs&lt;/em&gt; in function components using &lt;strong&gt;closures&lt;/strong&gt;. &lt;strong&gt;Note&lt;/strong&gt;: You can also use inline ref callbacks even though it is not a recommended approach&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;21&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are forward refs?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Ref forwarding&lt;/em&gt; is a feature that lets some components take a &lt;em&gt;ref&lt;/em&gt; they receive, and pass it further down to a child.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ButtonElement = React.forwardRef((props, ref) =&amp;gt; (
  &amp;lt;button ref={ref} className=&quot;CustomButton&quot;&amp;gt;
    {props.children}
  &amp;lt;/button&amp;gt;
));

// Create ref to the DOM button:
const ref = React.createRef();
&amp;lt;ButtonElement ref={ref}&amp;gt;{&#39;Forward Ref&#39;}&amp;lt;/ButtonElement&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;22&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/h3&gt; &lt;p&gt;It is preferred to use &lt;em&gt;callback refs&lt;/em&gt; over &lt;code&gt;findDOMNode()&lt;/code&gt; API. Because &lt;code&gt;findDOMNode()&lt;/code&gt; prevents certain improvements in React in the future.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;legacy&lt;/strong&gt; approach of using &lt;code&gt;findDOMNode&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends Component {
  componentDidMount() {
    findDOMNode(this).scrollIntoView()
  }

  render() {
    return &amp;lt;div /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The recommended approach is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends Component {
  constructor(props){
    super(props);
    this.node = createRef();
  }
  componentDidMount() {
    this.node.current.scrollIntoView();
  }

  render() {
    return &amp;lt;div ref={this.node} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;23&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are String Refs legacy?&lt;/h3&gt; &lt;p&gt;If you worked with React before, you might be familiar with an older API where the &lt;code&gt;ref&lt;/code&gt; attribute is a string, like &lt;code&gt;ref={&#39;textInput&#39;}&lt;/code&gt;, and the DOM node is accessed as &lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because &lt;em&gt;string refs have below issues&lt;/em&gt;, and are considered legacy. String refs were &lt;strong&gt;removed in React v16&lt;/strong&gt;.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;They &lt;em&gt;force React to keep track of currently executing component&lt;/em&gt;. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.&lt;/li&gt; 
   &lt;li&gt;They are &lt;em&gt;not composable&lt;/em&gt; ‚Äî if a library puts a ref on the passed child, the user can&#39;t put another ref on it. Callback refs are perfectly composable.&lt;/li&gt; 
   &lt;li&gt;They &lt;em&gt;don&#39;t work with static analysis&lt;/em&gt; like Flow. Flow can&#39;t guess the magic that framework does to make the string ref appear on &lt;code&gt;this.refs&lt;/code&gt;, as well as its type (which could be different). Callback refs are friendlier to static analysis.&lt;/li&gt; 
   &lt;li&gt;It doesn&#39;t work as most people would expect with the &quot;render callback&quot; pattern (e.g. 
    &lt;datagrid renderRow=&quot;{this.renderRow}&quot; /&gt;) &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends Component {
  renderRow = (index) =&amp;gt; {
    // This won&#39;t work. Ref will get attached to DataTable rather than MyComponent:
    return &amp;lt;input ref={&#39;input-&#39; + index} /&amp;gt;;

    // This would work though! Callback refs are awesome.
    return &amp;lt;input ref={input =&amp;gt; this[&#39;input-&#39; + index] = input} /&amp;gt;;
  }

  render() {
    return &amp;lt;DataTable data={this.props.data} renderRow={this.renderRow} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;24&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; (VDOM) is an in-memory representation of &lt;em&gt;Real DOM&lt;/em&gt;. The representation of a UI is kept in memory and synced with the &quot;real&quot; DOM. It&#39;s a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;25&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Virtual DOM works?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; works in three simple steps.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom1.png&quot; alt=&quot;vdom&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Then the difference between the previous DOM representation and the new one is calculated.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom2.png&quot; alt=&quot;vdom2&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Once the calculations are done, the real DOM will be updated with only the things that have actually changed.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom3.png&quot; alt=&quot;vdom3&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;26&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Shadow DOM&lt;/em&gt; is a browser technology designed primarily for scoping variables and CSS in &lt;em&gt;web components&lt;/em&gt;. The &lt;em&gt;Virtual DOM&lt;/em&gt; is a concept implemented by libraries in JavaScript on top of browser APIs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;27&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Fiber?&lt;/h3&gt; &lt;p&gt;Fiber is the new &lt;em&gt;reconciliation&lt;/em&gt; engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;28&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main goal of React Fiber?&lt;/h3&gt; &lt;p&gt;The goal of &lt;em&gt;React Fiber&lt;/em&gt; is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is &lt;strong&gt;incremental rendering&lt;/strong&gt;: the ability to split rendering work into chunks and spread it out over multiple frames.&lt;/p&gt; &lt;p&gt;&lt;em&gt;from documentation&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Its main goals are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Ability to split interruptible work in chunks.&lt;/li&gt; 
   &lt;li&gt;Ability to prioritize, rebase and reuse work in progress.&lt;/li&gt; 
   &lt;li&gt;Ability to yield back and forth between parents and children to support layout in React.&lt;/li&gt; 
   &lt;li&gt;Ability to return multiple elements from render().&lt;/li&gt; 
   &lt;li&gt;Better support for error boundaries.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;29&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are controlled components?&lt;/h3&gt; &lt;p&gt;A component that controls the input elements within the forms on subsequent user input is called &lt;strong&gt;Controlled Component&lt;/strong&gt;, i.e, every state mutation will have an associated handler function.&lt;/p&gt; &lt;p&gt;For example, to write all the names in uppercase letters, we use handleChange as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;handleChange(event) {
  this.setState({value: event.target.value.toUpperCase()})
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;30&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are uncontrolled components?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Uncontrolled Components&lt;/strong&gt; are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.&lt;/p&gt; &lt;p&gt;In the below UserProfile component, the &lt;code&gt;name&lt;/code&gt; input is accessed using ref.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserProfile extends React.Component {
  constructor(props) {
    super(props)
    this.handleSubmit = this.handleSubmit.bind(this)
    this.input = React.createRef()
  }

  handleSubmit(event) {
    alert(&#39;A name was submitted: &#39; + this.input.current.value)
    event.preventDefault()
  }

  render() {
    return (
      &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
        &amp;lt;label&amp;gt;
          {&#39;Name:&#39;}
          &amp;lt;input type=&quot;text&quot; ref={this.input} /&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In most cases, it&#39;s recommend to use controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;31&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between createElement and cloneElement?&lt;/h3&gt; &lt;p&gt;JSX elements will be transpiled to &lt;code&gt;React.createElement()&lt;/code&gt; functions to create React elements which are going to be used for the object representation of UI. Whereas &lt;code&gt;cloneElement&lt;/code&gt; is used to clone an element and pass it new props.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;32&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Lifting State Up in React?&lt;/h3&gt; &lt;p&gt;When several components need to share the same changing data then it is recommended to &lt;em&gt;lift the shared state up&lt;/em&gt; to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;33&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different phases of component lifecycle?&lt;/h3&gt; &lt;p&gt;The component lifecycle has three distinct lifecycle phases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mounting:&lt;/strong&gt; The component is ready to mount in the browser DOM. This phase covers initialization from &lt;code&gt;constructor()&lt;/code&gt;, &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, and &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Updating:&lt;/strong&gt; In this phase, the component gets updated in two ways, sending the new props and updating the state either from &lt;code&gt;setState()&lt;/code&gt; or &lt;code&gt;forceUpdate()&lt;/code&gt;. This phase covers &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; and &lt;code&gt;componentDidUpdate()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unmounting:&lt;/strong&gt; In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes &lt;code&gt;componentWillUnmount()&lt;/code&gt; lifecycle method.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;It&#39;s worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Render&lt;/strong&gt; The component will render without any side-effects. This applies for Pure components and in this phase, React can pause, abort, or restart the render.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pre-commit&lt;/strong&gt; Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Commit&lt;/strong&gt; React works with the DOM and executes the final lifecycles respectively &lt;code&gt;componentDidMount()&lt;/code&gt; for mounting, &lt;code&gt;componentDidUpdate()&lt;/code&gt; for updating, and &lt;code&gt;componentWillUnmount()&lt;/code&gt; for unmounting.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;React 16.3+ Phases (or an &lt;a href=&quot;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot;&gt;interactive version&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases16.4.png&quot; alt=&quot;phases 16.4+&quot;&gt;&lt;/p&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases.png&quot; alt=&quot;phases 16.2&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;34&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the lifecycle methods of React?&lt;/h3&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillMount:&lt;/strong&gt; Executed before rendering and is used for App level configuration in your root component.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillReceiveProps:&lt;/strong&gt; Executed when particular prop updates to trigger state transitions.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn&#39;t need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUpdate:&lt;/strong&gt; Executed before re-rendering the component when there are props &amp;amp; state changes confirmed by &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; which returns true.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUnmount:&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;React 16.3+&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;getDerivedStateFromProps:&lt;/strong&gt; Invoked right before calling &lt;code&gt;render()&lt;/code&gt; and is invoked on &lt;em&gt;every&lt;/em&gt; render. This exists for rare use cases where you need derived state. Worth reading &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&quot;&gt;if you need derived state&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn&#39;t need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;getSnapshotBeforeUpdate:&lt;/strong&gt; Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into &lt;code&gt;componentDidUpdate()&lt;/code&gt;. This is useful to capture information from the DOM i.e. scroll position.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes. This will not fire if &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUnmount&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;35&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Higher-Order Components?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;higher-order component&lt;/em&gt; (&lt;em&gt;HOC&lt;/em&gt;) is a function that takes a component and returns a new component. Basically, it&#39;s a pattern that is derived from React&#39;s compositional nature.&lt;/p&gt; &lt;p&gt;We call them &lt;strong&gt;pure components&lt;/strong&gt; because they can accept any dynamically provided child component but they won&#39;t modify or copy any behavior from their input components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const EnhancedComponent = higherOrderComponent(WrappedComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;HOC can be used for many use cases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Code reuse, logic and bootstrap abstraction.&lt;/li&gt; 
   &lt;li&gt;Render hijacking.&lt;/li&gt; 
   &lt;li&gt;State abstraction and manipulation.&lt;/li&gt; 
   &lt;li&gt;Props manipulation.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;36&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create props proxy for HOC component?&lt;/h3&gt; &lt;p&gt;You can add/edit props passed to the component using &lt;em&gt;props proxy&lt;/em&gt; pattern like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function HOC(WrappedComponent) {
  return class Test extends Component {
    render() {
      const newProps = {
        title: &#39;New Header&#39;,
        footer: false,
        showFeatureX: false,
        showFeatureY: true
      }

      return &amp;lt;WrappedComponent {...this.props} {...newProps} /&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;37&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is context?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Context&lt;/em&gt; provides a way to pass data through the component tree without having to pass props down manually at every level.&lt;/p&gt; &lt;p&gt;For example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const {Provider, Consumer} = React.createContext(defaultValue)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;38&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is children prop?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Children&lt;/em&gt; is a prop (&lt;code&gt;this.props.children&lt;/code&gt;) that allow you to pass components as data to other components, just like any other prop you use. Component tree put between component&#39;s opening and closing tag will be passed to that component as &lt;code&gt;children&lt;/code&gt; prop.&lt;/p&gt; &lt;p&gt;There are a number of methods available in the React API to work with this prop. These include &lt;code&gt;React.Children.map&lt;/code&gt;, &lt;code&gt;React.Children.forEach&lt;/code&gt;, &lt;code&gt;React.Children.count&lt;/code&gt;, &lt;code&gt;React.Children.only&lt;/code&gt;, &lt;code&gt;React.Children.toArray&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A simple usage of children prop looks as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyDiv = React.createClass({
  render: function() {
    return &amp;lt;div&amp;gt;{this.props.children}&amp;lt;/div&amp;gt;
  }
})

ReactDOM.render(
  &amp;lt;MyDiv&amp;gt;
    &amp;lt;span&amp;gt;{&#39;Hello&#39;}&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;{&#39;World&#39;}&amp;lt;/span&amp;gt;
  &amp;lt;/MyDiv&amp;gt;,
  node
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;39&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to write comments in React?&lt;/h3&gt; &lt;p&gt;The comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Single-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div&amp;gt;
  {/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(//)) */}
  {`Welcome ${user}, let&#39;s play React`}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Multi-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div&amp;gt;
  {/* Multi-line comments for more than
   one line */}
  {`Welcome ${user}, let&#39;s play React`}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;40&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of using super constructor with props argument?&lt;/h3&gt; &lt;p&gt;A child class constructor cannot make use of &lt;code&gt;this&lt;/code&gt; reference until &lt;code&gt;super()&lt;/code&gt; method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to &lt;code&gt;super()&lt;/code&gt; call is to access &lt;code&gt;this.props&lt;/code&gt; in your child constructors.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Not passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super()

    console.log(this.props) // prints undefined

    // but props parameter is still available
    console.log(props) // prints { name: &#39;John&#39;, age: 42 }
  }

  render() {
    // no difference outside constructor
    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code snippets reveals that &lt;code&gt;this.props&lt;/code&gt; is different only within the constructor. It would be the same outside the constructor.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;41&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is reconciliation?&lt;/h3&gt; &lt;p&gt;When a component&#39;s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;42&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to set state with a dynamic key name?&lt;/h3&gt; &lt;p&gt;If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with &lt;em&gt;computed property names&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;handleInputChange(event) {
  this.setState({ [event.target.id]: event.target.value })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;43&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What would be the common mistake of function being called every time the component renders?&lt;/h3&gt; &lt;p&gt;You need to make sure that function is not being called while passing the function as a parameter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  // Wrong: handleClick is called instead of passed as a reference!
  return &amp;lt;button onClick={this.handleClick()}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead, pass the function itself without parenthesis:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  // Correct: handleClick is passed as a reference!
  return &amp;lt;button onClick={this.handleClick}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;44&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is lazy function supports named exports?&lt;/h3&gt; No, currently &lt;code&gt;React.lazy&lt;/code&gt; function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don‚Äôt pull unused components. Let&#39;s take a component file which exports multiple named components, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// MoreComponents.js
export const SomeComponent = /* ... */;
export const UnusedComponent = /* ... */;
&lt;/code&gt;&lt;/pre&gt; and reexport &lt;code&gt;MoreComponents.js&lt;/code&gt; components in an intermediate file &lt;code&gt;IntermediateComponent.js&lt;/code&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// IntermediateComponent.js
export { SomeComponent as default } from &quot;./MoreComponents.js&quot;;
&lt;/code&gt;&lt;/pre&gt; Now you can import the module using lazy function as below, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { lazy } from &#39;react&#39;;
const SomeComponent = lazy(() =&amp;gt; import(&quot;./IntermediateComponent.js&quot;));
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;45&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why React uses &lt;code&gt;className&lt;/code&gt; over &lt;code&gt;class&lt;/code&gt; attribute?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;class&lt;/code&gt; is a keyword in JavaScript, and JSX is an extension of JavaScript. That&#39;s the principal reason why React uses &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;. Pass a string as the &lt;code&gt;className&lt;/code&gt; prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;span className={&#39;menu navigation-menu&#39;}&amp;gt;{&#39;Menu&#39;}&amp;lt;/span&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;46&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are fragments?&lt;/h3&gt; &lt;p&gt;It&#39;s a common pattern in React which is used for a component to return multiple elements. &lt;em&gt;Fragments&lt;/em&gt; let you group a list of children without adding extra nodes to the DOM.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is also a &lt;em&gt;shorter syntax&lt;/em&gt;, but it&#39;s not supported in many tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;47&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why fragments are better than container divs?&lt;/h3&gt; &lt;p&gt;Below are the list of reasons,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.&lt;/li&gt; 
   &lt;li&gt;Some CSS mechanisms like &lt;em&gt;Flexbox&lt;/em&gt; and &lt;em&gt;CSS Grid&lt;/em&gt; have a special parent-child relationships, and adding divs in the middle makes it hard to keep the desired layout.&lt;/li&gt; 
   &lt;li&gt;The DOM Inspector is less cluttered.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;48&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are portals in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Portal&lt;/em&gt; is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactDOM.createPortal(child, container)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;49&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are stateless components?&lt;/h3&gt; &lt;p&gt;If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the &lt;code&gt;this&lt;/code&gt; keyword altogether.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;50&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are stateful components?&lt;/h3&gt; &lt;p&gt;If the behaviour of a component is dependent on the &lt;em&gt;state&lt;/em&gt; of the component then it can be termed as stateful component. These &lt;em&gt;stateful components&lt;/em&gt; are always &lt;em&gt;class components&lt;/em&gt; and have a state that gets initialized in the &lt;code&gt;constructor&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends Component {
  constructor(props) {
    super(props)
    this.state = { count: 0 }
  }

  render() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;React 16.8 Update:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Hooks let you use state and other React features without writing classes.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; import React, {useState} from &#39;react&#39;;

 const App = (props) =&amp;gt; {
   const [count, setCount] = useState(0);

   return (
     // JSX
   )
 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;51&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to apply validation on props in React?&lt;/h3&gt; &lt;p&gt;When the application is running in &lt;em&gt;development mode&lt;/em&gt;, React will automatically check all props that we set on components to make sure they have &lt;em&gt;correct type&lt;/em&gt;. If the type is incorrect, React will generate warning messages in the console. It&#39;s disabled in &lt;em&gt;production mode&lt;/em&gt; due to performance impact. The mandatory props are defined with &lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The set of predefined prop types:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.number&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.string&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.array&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.object&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.func&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.node&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.element&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.bool&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.symbol&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.any&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;We can define &lt;code&gt;propTypes&lt;/code&gt; for &lt;code&gt;User&lt;/code&gt; component as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import PropTypes from &#39;prop-types&#39;

class User extends React.Component {
  static propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }

  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;h1&amp;gt;{`Welcome, ${this.props.name}`}&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;{`Age, ${this.props.age}`}&amp;lt;/h2&amp;gt;
      &amp;lt;/&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In React v15.5 &lt;em&gt;PropTypes&lt;/em&gt; were moved from &lt;code&gt;React.PropTypes&lt;/code&gt; to &lt;code&gt;prop-types&lt;/code&gt; library.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import PropTypes from &#39;prop-types&#39;

function User({name, age}) {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;{`Welcome, ${name}`}&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;{`Age, ${age}`}&amp;lt;/h2&amp;gt;
    &amp;lt;/&amp;gt;
  )
}

User.propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;52&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of React?&lt;/h3&gt; &lt;p&gt;Below are the list of main advantages of React,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Increases the application&#39;s performance with &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/li&gt; 
   &lt;li&gt;JSX makes code easy to read and write.&lt;/li&gt; 
   &lt;li&gt;It renders both on client and server side (&lt;em&gt;SSR&lt;/em&gt;).&lt;/li&gt; 
   &lt;li&gt;Easy to integrate with frameworks (Angular, Backbone) since it is only a view library.&lt;/li&gt; 
   &lt;li&gt;Easy to write unit and integration tests with tools such as Jest.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;53&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the limitations of React?&lt;/h3&gt; &lt;p&gt;Apart from the advantages, there are few limitations of React too,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React is just a view library, not a full framework.&lt;/li&gt; 
   &lt;li&gt;There is a learning curve for beginners who are new to web development.&lt;/li&gt; 
   &lt;li&gt;Integrating React into a traditional MVC framework requires some additional configuration.&lt;/li&gt; 
   &lt;li&gt;The code complexity increases with inline templating and JSX.&lt;/li&gt; 
   &lt;li&gt;Too many smaller components leading to over engineering or boilerplate.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;54&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are error boundaries in React v16?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Error boundaries&lt;/em&gt; are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.&lt;/p&gt; &lt;p&gt;A class component becomes an error boundary if it defines a new lifecycle method called &lt;code&gt;componentDidCatch(error, info)&lt;/code&gt; or &lt;code&gt;static getDerivedStateFromError() &lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props)
    this.state = { hasError: false }
  }

  componentDidCatch(error, info) {
    // You can also log the error to an error reporting service
    logErrorToMyService(error, info)
  }

  static getDerivedStateFromError(error) {
     // Update state so the next render will show the fallback UI.
     return { hasError: true };
   }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;{&#39;Something went wrong.&#39;}&amp;lt;/h1&amp;gt;
    }
    return this.props.children
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that use it as a regular component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;ErrorBoundary&amp;gt;
  &amp;lt;MyWidget /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;55&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How error boundaries handled in React v15?&lt;/h3&gt; &lt;p&gt;React v15 provided very basic support for &lt;em&gt;error boundaries&lt;/em&gt; using &lt;code&gt;unstable_handleError&lt;/code&gt; method. It has been renamed to &lt;code&gt;componentDidCatch&lt;/code&gt; in React v16.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;56&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the recommended ways for static type checking?&lt;/h3&gt; &lt;p&gt;Normally we use &lt;em&gt;PropTypes library&lt;/em&gt; (&lt;code&gt;React.PropTypes&lt;/code&gt; moved to a &lt;code&gt;prop-types&lt;/code&gt; package since React v15.5) for &lt;em&gt;type checking&lt;/em&gt; in the React applications. For large code bases, it is recommended to use &lt;em&gt;static type checkers&lt;/em&gt; such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;57&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of &lt;code&gt;react-dom&lt;/code&gt; package?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-dom&lt;/code&gt; package provides &lt;em&gt;DOM-specific methods&lt;/em&gt; that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;hydrate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;unmountComponentAtNode()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;findDOMNode()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;createPortal()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;58&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of render method of &lt;code&gt;react-dom&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;This method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ReactDOM.render(element, container[, callback])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the optional callback is provided, it will be executed after the component is rendered or updated.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;59&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is ReactDOMServer?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;ReactDOMServer&lt;/code&gt; object enables you to render components to static markup (typically used on node server). This object is mainly used for &lt;em&gt;server-side rendering&lt;/em&gt; (SSR). The following methods can be used in both the server and browser environments:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;renderToString()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;renderToStaticMarkup()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call &lt;code&gt;renderToString&lt;/code&gt; to render your root component to a string, which you then send as response.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// using Express
import { renderToString } from &#39;react-dom/server&#39;
import MyPage from &#39;./MyPage&#39;

app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  res.write(&#39;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;My Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&#39;)
  res.write(&#39;&amp;lt;div id=&quot;content&quot;&amp;gt;&#39;)
  res.write(renderToString(&amp;lt;MyPage/&amp;gt;))
  res.write(&#39;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;)
  res.end()
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;60&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use innerHTML in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute is React&#39;s replacement for using &lt;code&gt;innerHTML&lt;/code&gt; in the browser DOM. Just like &lt;code&gt;innerHTML&lt;/code&gt;, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a &lt;code&gt;__html&lt;/code&gt; object as key and HTML text as value.&lt;/p&gt; &lt;p&gt;In this example MyComponent uses &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute for setting HTML markup:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function createMarkup() {
  return { __html: &#39;First &amp;amp;middot; Second&#39; }
}

function MyComponent() {
  return &amp;lt;div dangerouslySetInnerHTML={createMarkup()} /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;61&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use styles in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;style&lt;/code&gt; attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const divStyle = {
  color: &#39;blue&#39;,
  backgroundImage: &#39;url(&#39; + imgUrl + &#39;)&#39;
};

function HelloWorldComponent() {
  return &amp;lt;div style={divStyle}&amp;gt;Hello World!&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. &lt;code&gt;node.style.backgroundImage&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;62&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How events are different in React?&lt;/h3&gt; &lt;p&gt;Handling events in React elements has some syntactic differences:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React event handlers are named using camelCase, rather than lowercase.&lt;/li&gt; 
   &lt;li&gt;With JSX you pass a function as the event handler, rather than a string.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;63&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen if you use &lt;code&gt;setState()&lt;/code&gt; in constructor?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt;, then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: &lt;em&gt;Can only update a mounted or mounting component.&lt;/em&gt; So we need to use &lt;code&gt;this.state&lt;/code&gt; to initialize variables inside constructor.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;64&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the impact of indexes as keys?&lt;/h3&gt; &lt;p&gt;Keys should be stable, predictable, and unique so that React can keep track of elements.&lt;/p&gt; &lt;p&gt;In the below code snippet each element&#39;s key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;{todos.map((todo, index) =&amp;gt;
  &amp;lt;Todo
    {...todo}
    key={index}
  /&amp;gt;
)}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;{todos.map((todo) =&amp;gt;
  &amp;lt;Todo {...todo}
    key={todo.id} /&amp;gt;
)}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;65&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it good to use &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillMount()&lt;/code&gt; method?&lt;/h3&gt; &lt;p&gt;Yes, it is safe to use &lt;code&gt;setState()&lt;/code&gt; inside &lt;code&gt;componentWillMount()&lt;/code&gt; method. But at the same it is recommended to avoid async initialization in &lt;code&gt;componentWillMount()&lt;/code&gt; lifecycle method. &lt;code&gt;componentWillMount()&lt;/code&gt; is invoked immediately before mounting occurs. It is called before &lt;code&gt;render()&lt;/code&gt;, therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in &lt;code&gt;componentDidMount()&lt;/code&gt; instead of &lt;code&gt;componentWillMount()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;componentDidMount() {
  axios.get(`api/todos`)
    .then((result) =&amp;gt; {
      this.setState({
        messages: [...result.data]
      })
    })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;66&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen if you use props in initial state?&lt;/h3&gt; &lt;p&gt;If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.&lt;/p&gt; &lt;p&gt;The below component won&#39;t display the updated input value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      records: [],
      inputValue: this.props.inputValue
    };
  }

  render() {
    return &amp;lt;div&amp;gt;{this.state.inputValue}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using props inside render method will update the value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      record: []
    }
  }

  render() {
    return &amp;lt;div&amp;gt;{this.props.inputValue}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;67&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you conditionally render components?&lt;/h3&gt; &lt;p&gt;In some cases you want to render different components depending on some state. JSX does not render &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, so you can use conditional &lt;em&gt;short-circuiting&lt;/em&gt; to render a given part of your component only if a certain condition is true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = ({ name, address }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;
    {address &amp;amp;&amp;amp;
      &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;
    }
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need an &lt;code&gt;if-else&lt;/code&gt; condition then use &lt;em&gt;ternary operator&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = ({ name, address }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;
    {address
      ? &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;
      : &amp;lt;p&amp;gt;{&#39;Address is not available&#39;}&amp;lt;/p&amp;gt;
    }
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;68&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why we need to be careful when spreading props on DOM elements?&lt;/h3&gt; &lt;p&gt;When we &lt;em&gt;spread props&lt;/em&gt; we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with &lt;code&gt;...rest&lt;/code&gt; operator, so it will add only required props.&lt;/p&gt; &lt;p&gt;For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ComponentA = () =&amp;gt;
  &amp;lt;ComponentB isDisplay={true} className={&#39;componentStyle&#39;} /&amp;gt;

const ComponentB = ({ isDisplay, ...domProps }) =&amp;gt;
  &amp;lt;div {...domProps}&amp;gt;{&#39;ComponentB&#39;}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;69&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How you use decorators in React?&lt;/h3&gt; &lt;p&gt;You can &lt;em&gt;decorate&lt;/em&gt; your &lt;em&gt;class&lt;/em&gt; components, which is the same as passing the component into a function. &lt;strong&gt;Decorators&lt;/strong&gt; are flexible and readable way of modifying component functionality.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;@setTitle(&#39;Profile&#39;)
class Profile extends React.Component {
    //....
}

/*
  title is a string that will be set as a document title
  WrappedComponent is what our decorator will receive when
  put directly above a component class as seen in the example above
*/
const setTitle = (title) =&amp;gt; (WrappedComponent) =&amp;gt; {
  return class extends React.Component {
    componentDidMount() {
      document.title = title
    }

    render() {
      return &amp;lt;WrappedComponent {...this.props} /&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Decorators are a feature that didn&#39;t make it into ES7, but are currently a &lt;em&gt;stage 2 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;70&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you memoize a component?&lt;/h3&gt; &lt;p&gt;There are memoize libraries available which can be used on function components.&lt;/p&gt; &lt;p&gt;For example &lt;code&gt;moize&lt;/code&gt; library can memoize the component in another component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import moize from &#39;moize&#39;
import Component from &#39;./components/Component&#39; // this module exports a non-memoized component

const MemoizedFoo = moize.react(Component)

const Consumer = () =&amp;gt; {
  &amp;lt;div&amp;gt;
    {&#39;I will memoize the following entry:&#39;}
    &amp;lt;MemoizedFoo/&amp;gt;
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Since React v16.6.0, we have a &lt;code&gt;React.memo&lt;/code&gt;. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  const MemoComponent = React.memo(function MemoComponent(props) {
    /* render using props */
  });
  OR
  export default React.memo(MyFunctionComponent);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;71&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How you implement Server Side Rendering or SSR?&lt;/h3&gt; &lt;p&gt;React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ReactDOMServer from &#39;react-dom/server&#39;
import App from &#39;./App&#39;

ReactDOMServer.renderToString(&amp;lt;App /&amp;gt;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;72&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to enable production mode in React?&lt;/h3&gt; &lt;p&gt;You should use Webpack&#39;s &lt;code&gt;DefinePlugin&lt;/code&gt; method to set &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify&#39;s dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;73&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is CRA and its benefits?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;create-react-app&lt;/code&gt; CLI tool allows you to quickly create &amp;amp; run React applications with no configuration step.&lt;/p&gt; &lt;p&gt;Let&#39;s create Todo App using &lt;em&gt;CRA&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;# Installation
$ npm install -g create-react-app

# Create new project
$ create-react-app todo-app
$ cd todo-app

# Build, test and run
$ npm run build
$ npm run test
$ npm start
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It includes everything we need to build a React app:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React, JSX, ES6, and Flow syntax support.&lt;/li&gt; 
   &lt;li&gt;Language extras beyond ES6 like the object spread operator.&lt;/li&gt; 
   &lt;li&gt;Autoprefixed CSS, so you don‚Äôt need -webkit- or other prefixes.&lt;/li&gt; 
   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting.&lt;/li&gt; 
   &lt;li&gt;A live development server that warns about common mistakes.&lt;/li&gt; 
   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;74&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the lifecycle methods order in mounting?&lt;/h3&gt; &lt;p&gt;The lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;static getDerivedStateFromProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;75&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/h3&gt; &lt;p&gt;The following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Starting with React v16.3 these methods are aliased with &lt;code&gt;UNSAFE_&lt;/code&gt; prefix, and the unprefixed version will be removed in React v17.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;76&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new static &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or &lt;code&gt;null&lt;/code&gt; to indicate that the new props do not require any state updates.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  static getDerivedStateFromProps(props, state) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillReceiveProps()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;77&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to &lt;code&gt;componentDidUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  getSnapshotBeforeUpdate(prevProps, prevState) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;78&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do Hooks replace render props and higher order components?&lt;/h3&gt; &lt;p&gt;Both render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;79&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended way for naming components?&lt;/h3&gt; &lt;p&gt;It is recommended to name the component by reference instead of using &lt;code&gt;displayName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Using &lt;code&gt;displayName&lt;/code&gt; for naming component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default React.createClass({
  displayName: &#39;TodoApp&#39;,
  // ...
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;strong&gt;recommended&lt;/strong&gt; approach:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class TodoApp extends React.Component {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;80&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended ordering of methods in component class?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt; ordering of methods from &lt;em&gt;mounting&lt;/em&gt; to &lt;em&gt;render stage&lt;/em&gt;:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;static&lt;/code&gt; methods&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;getChildContext()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;click handlers or event handlers like &lt;code&gt;onClickSubmit()&lt;/code&gt; or &lt;code&gt;onChangeDescription()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;getter methods for render like &lt;code&gt;getSelectReason()&lt;/code&gt; or &lt;code&gt;getFooterContent()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;optional render methods like &lt;code&gt;renderNavigation()&lt;/code&gt; or &lt;code&gt;renderProfilePicture()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;81&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is a switching component?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;switching component&lt;/em&gt; is a component that renders one of many components. We need to use object to map prop values to components.&lt;/p&gt; &lt;p&gt;For example, a switching component to display different pages based on &lt;code&gt;page&lt;/code&gt; prop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import HomePage from &#39;./HomePage&#39;
import AboutPage from &#39;./AboutPage&#39;
import ServicesPage from &#39;./ServicesPage&#39;
import ContactPage from &#39;./ContactPage&#39;

const PAGES = {
  home: HomePage,
  about: AboutPage,
  services: ServicesPage,
  contact: ContactPage
}

const Page = (props) =&amp;gt; {
  const Handler = PAGES[props.page] || ContactPage

  return &amp;lt;Handler {...props} /&amp;gt;
}

// The keys of the PAGES object can be used in the prop types to catch dev-time errors.
Page.propTypes = {
  page: PropTypes.oneOf(Object.keys(PAGES)).isRequired
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;82&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why we need to pass a function to setState()?&lt;/h3&gt; &lt;p&gt;The reason behind for this is that &lt;code&gt;setState()&lt;/code&gt; is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after &lt;code&gt;setState()&lt;/code&gt; is called. That means you should not rely on the current state when calling &lt;code&gt;setState()&lt;/code&gt;‚Ääsince you can&#39;t be sure what that state will be. The solution is to pass a function to &lt;code&gt;setState()&lt;/code&gt;, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&#39;s say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// assuming this.state.count === 0
this.setState({ count: this.state.count + 1 })
this.setState({ count: this.state.count + 1 })
this.setState({ count: this.state.count + 1 })
// this.state.count === 1, not 3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we pass a function to &lt;code&gt;setState()&lt;/code&gt;, the count gets incremented correctly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.setState((prevState, props) =&amp;gt; ({
  count: prevState.count + props.increment
}))
// this.state.count === 3 as expected
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;h3&gt;Why function is preferred over object for &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;React may batch multiple &lt;code&gt;setState()&lt;/code&gt; calls into a single update for performance. Because &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; may be updated asynchronously, you should not rely on their values for calculating the next state.&lt;/p&gt; &lt;p&gt;This counter example will fail to update as expected:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Wrong
this.setState({
  counter: this.state.counter + this.props.increment,
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The preferred approach is to call &lt;code&gt;setState()&lt;/code&gt; with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Correct
this.setState((prevState, props) =&amp;gt; ({
  counter: prevState.counter + props.increment
}))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;83&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is strict mode in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;React.StrictMode&lt;/code&gt; is a useful component for highlighting potential problems in an application. Just like &lt;code&gt;&amp;lt;Fragment&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;StrictMode&amp;gt;&lt;/code&gt; does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for &lt;em&gt;development mode&lt;/em&gt; only.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;

function ExampleApplication() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Header /&amp;gt;
      &amp;lt;React.StrictMode&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;ComponentOne /&amp;gt;
          &amp;lt;ComponentTwo /&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/React.StrictMode&amp;gt;
      &amp;lt;Header /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the example above, the &lt;em&gt;strict mode&lt;/em&gt; checks apply to &lt;code&gt;&amp;lt;ComponentOne&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ComponentTwo&amp;gt;&lt;/code&gt; components only.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;84&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are React Mixins?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Mixins&lt;/em&gt; are a way to totally separate components to have a common functionality. Mixins &lt;strong&gt;should not be used&lt;/strong&gt; and can be replaced with &lt;em&gt;higher-order components&lt;/em&gt; or &lt;em&gt;decorators&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;One of the most commonly used mixins is &lt;code&gt;PureRenderMixin&lt;/code&gt;. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const PureRenderMixin = require(&#39;react-addons-pure-render-mixin&#39;)

const Button = React.createClass({
  mixins: [PureRenderMixin],
  // ...
})
&lt;/code&gt;&lt;/pre&gt; 
  &lt;!-- TODO: mixins are deprecated --&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;85&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is &lt;code&gt;isMounted()&lt;/code&gt; an anti-pattern and what is the proper solution?&lt;/h3&gt; &lt;p&gt;The primary use case for &lt;code&gt;isMounted()&lt;/code&gt; is to avoid calling &lt;code&gt;setState()&lt;/code&gt; after a component has been unmounted, because it will emit a warning.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (this.isMounted()) {
  this.setState({...})
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Checking &lt;code&gt;isMounted()&lt;/code&gt; before calling &lt;code&gt;setState()&lt;/code&gt; does eliminate the warning, but it also defeats the purpose of the warning. Using &lt;code&gt;isMounted()&lt;/code&gt; is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.&lt;/p&gt; &lt;p&gt;An optimal solution would be to find places where &lt;code&gt;setState()&lt;/code&gt; might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in &lt;code&gt;componentWillUnmount()&lt;/code&gt;, prior to unmounting.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;86&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the Pointer Events supported in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Pointer Events&lt;/em&gt; provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don&#39;t correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the &lt;em&gt;Pointer Events&lt;/em&gt; specification.&lt;/p&gt; &lt;p&gt;The following event types are now available in &lt;em&gt;React DOM&lt;/em&gt;:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;onPointerDown&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerMove&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerUp&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerCancel&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onGotPointerCapture&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onLostPointerCapture&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerEnter&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerLeave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerOver&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerOut&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;87&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should component names start with capital letter?&lt;/h3&gt; &lt;p&gt;If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class SomeComponent extends Component {
 // Code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can define component class which name starts with lowercase letter, but when it&#39;s imported it should have capital letter. Here lowercase is fine:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class myComponent extends Component {
  render() {
    return &amp;lt;div /&amp;gt;
  }
}

export default myComponent
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While when imported in another file it should start with capital letter:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import MyComponent from &#39;./MyComponent&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;What are the exceptions on React component naming?&lt;/h4&gt; &lt;p&gt;The component names should start with a uppercase letter but there are few exceptions on this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names. For example the below tag can be compiled to a valid component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;     render() {
          return (
            &amp;lt;obj.component/&amp;gt; // `React.createElement(obj.component)`
          )
    }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;88&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Are custom DOM attributes supported in React v16?&lt;/h3&gt; &lt;p&gt;Yes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn&#39;t recognize, React would just skip it.&lt;/p&gt; &lt;p&gt;For example, let&#39;s take a look at the below attribute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div mycustomattribute={&#39;something&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Would render an empty div to the DOM with React v15:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In React v16 any unknown attributes will end up in the DOM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div mycustomattribute=&#39;something&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;89&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between constructor and getInitialState?&lt;/h3&gt; &lt;p&gt;You should initialize state in the constructor when using ES6 classes, and &lt;code&gt;getInitialState()&lt;/code&gt; method when using &lt;code&gt;React.createClass()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using ES6 classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.state = { /* initial state */ }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const MyComponent = React.createClass({
  getInitialState() {
    return { /* initial state */ }
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.createClass()&lt;/code&gt; is deprecated and removed in React v16. Use plain JavaScript classes instead.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;90&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you force a component to re-render without calling setState?&lt;/h3&gt; &lt;p&gt;By default, when your component&#39;s state or props change, your component will re-render. If your &lt;code&gt;render()&lt;/code&gt; method depends on some other data, you can tell React that the component needs re-rendering by calling &lt;code&gt;forceUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;component.forceUpdate(callback)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;91&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;super()&lt;/code&gt; and &lt;code&gt;super(props)&lt;/code&gt; in React using ES6 classes?&lt;/h3&gt; &lt;p&gt;When you want to access &lt;code&gt;this.props&lt;/code&gt; in &lt;code&gt;constructor()&lt;/code&gt; then you should pass props to &lt;code&gt;super()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super(props)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    console.log(this.props) // { name: &#39;John&#39;, ... }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super()
    console.log(this.props) // undefined
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Outside &lt;code&gt;constructor()&lt;/code&gt; both will display same value for &lt;code&gt;this.props&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;92&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to loop inside JSX?&lt;/h3&gt; &lt;p&gt;You can simply use &lt;code&gt;Array.prototype.map&lt;/code&gt; with ES6 &lt;em&gt;arrow function&lt;/em&gt; syntax.&lt;/p&gt; &lt;p&gt;For example, the &lt;code&gt;items&lt;/code&gt; array of objects is mapped into an array of components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;tbody&amp;gt;
  {items.map(item =&amp;gt; &amp;lt;SomeComponent key={item.id} name={item.name} /&amp;gt;)}
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can&#39;t iterate using &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;tbody&amp;gt;
  for (let i = 0; i &amp;lt; items.length; i++) {
    &amp;lt;SomeComponent key={items[i].id} name={items[i].name} /&amp;gt;
  }
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is because JSX tags are transpiled into &lt;em&gt;function calls&lt;/em&gt;, and you can&#39;t use statements inside expressions. This may change thanks to &lt;code&gt;do&lt;/code&gt; expressions which are &lt;em&gt;stage 1 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;93&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access props in attribute quotes?&lt;/h3&gt; &lt;p&gt;React (or JSX) doesn&#39;t support variable interpolation inside an attribute value. The below representation won&#39;t work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src=&#39;images/{this.props.image}&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src={&#39;images/&#39; + this.props.image} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;em&gt;template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src={`images/${this.props.image}`} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;94&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React proptype array with shape?&lt;/h3&gt; &lt;p&gt;If you want to pass an array of objects to a component with a particular shape then use &lt;code&gt;React.PropTypes.shape()&lt;/code&gt; as an argument to &lt;code&gt;React.PropTypes.arrayOf()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactComponent.propTypes = {
  arrayWithShape: React.PropTypes.arrayOf(React.PropTypes.shape({
    color: React.PropTypes.string.isRequired,
    fontSize: React.PropTypes.number.isRequired
  })).isRequired
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;95&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to conditionally apply class attributes?&lt;/h3&gt; &lt;p&gt;You shouldn&#39;t use curly braces inside quotes because it is going to be evaluated as a string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className=&quot;btn-panel {this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead you need to move curly braces outside (don&#39;t forget to include spaces between class names):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className={&#39;btn-panel &#39; + (this.props.visible ? &#39;show&#39; : &#39;hidden&#39;)}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className={`btn-panel ${this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}`}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;96&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React and ReactDOM?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react&lt;/code&gt; package contains &lt;code&gt;React.createElement()&lt;/code&gt;, &lt;code&gt;React.Component&lt;/code&gt;, &lt;code&gt;React.Children&lt;/code&gt;, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The &lt;code&gt;react-dom&lt;/code&gt; package contains &lt;code&gt;ReactDOM.render()&lt;/code&gt;, and in &lt;code&gt;react-dom/server&lt;/code&gt; we have &lt;em&gt;server-side rendering&lt;/em&gt; support with &lt;code&gt;ReactDOMServer.renderToString()&lt;/code&gt; and &lt;code&gt;ReactDOMServer.renderToStaticMarkup()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;97&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why ReactDOM is separated from React?&lt;/h3&gt; &lt;p&gt;The React team worked on extracting all DOM-related features into a separate library called &lt;em&gt;ReactDOM&lt;/em&gt;. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, &lt;code&gt;react-native&lt;/code&gt;, &lt;code&gt;react-art&lt;/code&gt;, &lt;code&gt;react-canvas&lt;/code&gt;, and &lt;code&gt;react-three&lt;/code&gt;, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.&lt;/p&gt; &lt;p&gt;To build more environments that React can render to, React team planned to split the main React package into two: &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;. This paves the way to writing components that can be shared between the web version of React and React Native.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;98&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use React label element?&lt;/h3&gt; &lt;p&gt;If you try to render a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element bound to a text input using the standard &lt;code&gt;for&lt;/code&gt; attribute, then it produces HTML missing that attribute and prints a warning to the console.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;label for={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;
&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since &lt;code&gt;for&lt;/code&gt; is a reserved keyword in JavaScript, use &lt;code&gt;htmlFor&lt;/code&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;label htmlFor={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;
&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;99&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to combine multiple inline style objects?&lt;/h3&gt; &lt;p&gt;You can use &lt;em&gt;spread operator&lt;/em&gt; in regular React:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt; &amp;lt;button style={{...styles.panel.button, ...styles.panel.submitButton}}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re using React Native then you can use the array notation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button style={[styles.panel.button, styles.panel.submitButton]}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;100&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to re-render the view when the browser is resized?&lt;/h3&gt; &lt;p&gt;You can listen to the &lt;code&gt;resize&lt;/code&gt; event in &lt;code&gt;componentDidMount()&lt;/code&gt; and then update the dimensions (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;). You should remove the listener in &lt;code&gt;componentWillUnmount()&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class WindowDimensions extends React.Component {
  constructor(props){
    super(props);
    this.updateDimensions = this.updateDimensions.bind(this);
  }
   
  componentWillMount() {
    this.updateDimensions()
  }

  componentDidMount() {
    window.addEventListener(&#39;resize&#39;, this.updateDimensions)
  }

  componentWillUnmount() {
    window.removeEventListener(&#39;resize&#39;, this.updateDimensions)
  }

  updateDimensions() {
    this.setState({width: window.innerWidth, height: window.innerHeight})
  }

  render() {
    return &amp;lt;span&amp;gt;{this.state.width} x {this.state.height}&amp;lt;/span&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;101&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;setState()&lt;/code&gt; and &lt;code&gt;replaceState()&lt;/code&gt; methods?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt; the current and previous states are merged. &lt;code&gt;replaceState()&lt;/code&gt; throws out the current state, and replaces it with only what you provide. Usually &lt;code&gt;setState()&lt;/code&gt; is used unless you really need to remove all previous keys for some reason. You can also set state to &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt; in &lt;code&gt;setState()&lt;/code&gt; instead of using &lt;code&gt;replaceState()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;102&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to listen to state changes?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;componentDidUpdate&lt;/code&gt; lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;componentDidUpdate(object prevProps, object prevState)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The previous releases of ReactJS also uses &lt;code&gt;componentWillUpdate(object nextProps, object nextState)&lt;/code&gt; for state changes. It has been deprecated in latest releases.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;103&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended approach of removing an array element in React state?&lt;/h3&gt; &lt;p&gt;The better approach is to use &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;For example, let&#39;s create a &lt;code&gt;removeItem()&lt;/code&gt; method for updating the state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;removeItem(index) {
  this.setState({
    data: this.state.data.filter((item, i) =&amp;gt; i !== index)
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;104&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use React without rendering HTML?&lt;/h3&gt; &lt;p&gt;It is possible with latest version (&amp;gt;=16.2). Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return false
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return null
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return []
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;React.Fragment&amp;gt;&amp;lt;/React.Fragment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Returning &lt;code&gt;undefined&lt;/code&gt; won&#39;t work.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;105&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pretty print JSON with React?&lt;/h3&gt; &lt;p&gt;We can use &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag so that the formatting of the &lt;code&gt;JSON.stringify()&lt;/code&gt; is retained:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const data = { name: &#39;John&#39;, age: 42 }

class User extends React.Component {
  render() {
    return (
      &amp;lt;pre&amp;gt;
        {JSON.stringify(data, null, 2)}
      &amp;lt;/pre&amp;gt;
    )
  }
}

React.render(&amp;lt;User /&amp;gt;, document.getElementById(&#39;container&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;106&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why you can&#39;t update props in React?&lt;/h3&gt; &lt;p&gt;The React philosophy is that props should be &lt;em&gt;immutable&lt;/em&gt; and &lt;em&gt;top-down&lt;/em&gt;. This means that a parent can send any prop values to a child, but the child can&#39;t modify received props.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;107&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to focus an input element on page load?&lt;/h3&gt; &lt;p&gt;You can do it by creating &lt;em&gt;ref&lt;/em&gt; for &lt;code&gt;input&lt;/code&gt; element and using it in &lt;code&gt;componentDidMount()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class App extends React.Component{
  componentDidMount() {
    this.nameInput.focus()
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;input
          defaultValue={&#39;Won\&#39;t focus&#39;}
        /&amp;gt;
        &amp;lt;input
          ref={(input) =&amp;gt; this.nameInput = input}
          defaultValue={&#39;Will focus&#39;}
        /&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;108&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible ways of updating objects in state?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with an object to merge with state:&lt;/strong&gt;&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;Using &lt;code&gt;Object.assign()&lt;/code&gt; to create a copy of the object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = Object.assign({}, this.state.user, { age: 42 })
this.setState({ user })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Using &lt;em&gt;spread operator&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = { ...this.state.user, age: 42 }
this.setState({ user })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with a function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.setState(prevState =&amp;gt; ({
  user: {
    ...prevState.user,
    age: 42
  }
}))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;110&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How can we find the version of React at runtime in the browser?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;React.version&lt;/code&gt; to get the version.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const REACT_VERSION = React.version

ReactDOM.render(
  &amp;lt;div&amp;gt;{`React version: ${REACT_VERSION}`}&amp;lt;/div&amp;gt;,
  document.getElementById(&#39;app&#39;)
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;111&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the approaches to include polyfills in your &lt;code&gt;create-react-app&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are approaches to include polyfills in create-react-app,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual import from &lt;code&gt;core-js&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a file called (something like) &lt;code&gt;polyfills.js&lt;/code&gt; and import it into root &lt;code&gt;index.js&lt;/code&gt; file. Run &lt;code&gt;npm install core-js&lt;/code&gt; or &lt;code&gt;yarn add core-js&lt;/code&gt; and import your specific required features.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &#39;core-js/fn/array/find&#39;
import &#39;core-js/fn/array/includes&#39;
import &#39;core-js/fn/number/is-nan&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Polyfill service:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&#39;https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes&#39;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above script we had to explicitly request the &lt;code&gt;Array.prototype.includes&lt;/code&gt; feature as it is not included in the default feature set.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;112&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use https instead of http in create-react-app?&lt;/h3&gt; &lt;p&gt;You just need to use &lt;code&gt;HTTPS=true&lt;/code&gt; configuration. You can edit your &lt;code&gt;package.json&lt;/code&gt; scripts section:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;scripts&quot;: {
  &quot;start&quot;: &quot;set HTTPS=true &amp;amp;&amp;amp; react-scripts start&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or just run &lt;code&gt;set HTTPS=true &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;113&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to avoid using relative path imports in create-react-app?&lt;/h3&gt; &lt;p&gt;Create a file called &lt;code&gt;.env&lt;/code&gt; in the project root and write the import path:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NODE_PATH=src/app
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that restart the development server. Now you should be able to import anything inside &lt;code&gt;src/app&lt;/code&gt; without relative paths.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;114&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add Google Analytics for React Router?&lt;/h3&gt; &lt;p&gt;Add a listener on the &lt;code&gt;history&lt;/code&gt; object to record each page view:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;history.listen(function (location) {
  window.ga(&#39;set&#39;, &#39;page&#39;, location.pathname + location.search)
  window.ga(&#39;send&#39;, &#39;pageview&#39;, location.pathname + location.search)
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;115&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to update a component every second?&lt;/h3&gt; &lt;p&gt;You need to use &lt;code&gt;setInterval()&lt;/code&gt; to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;componentDidMount() {
  this.interval = setInterval(() =&amp;gt; this.setState({ time: Date.now() }), 1000)
}

componentWillUnmount() {
  clearInterval(this.interval)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;116&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you apply vendor prefixes to inline styles in React?&lt;/h3&gt; &lt;p&gt;React &lt;em&gt;does not&lt;/em&gt; apply &lt;em&gt;vendor prefixes&lt;/em&gt; automatically. You need to add vendor prefixes manually.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div style={{
  transform: &#39;rotate(90deg)&#39;,
  WebkitTransform: &#39;rotate(90deg)&#39;, // note the capital &#39;W&#39; here
  msTransform: &#39;rotate(90deg)&#39; // &#39;ms&#39; is the only lowercase vendor prefix
}} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;117&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to import and export components using React and ES6?&lt;/h3&gt; &lt;p&gt;You should use default for exporting the components&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import User from &#39;user&#39;

export default class MyProfile extends React.Component {
  render(){
    return (
      &amp;lt;User type=&quot;customer&quot;&amp;gt;
        //...
      &amp;lt;/User&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;119&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is a component constructor called only once?&lt;/h3&gt; &lt;p&gt;React&#39;s &lt;em&gt;reconciliation&lt;/em&gt; algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it&#39;s the same component as before, so reuses the previous instance rather than creating a new one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;120&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to define constants in React?&lt;/h3&gt; &lt;p&gt;You can use ES7 &lt;code&gt;static&lt;/code&gt; field to define constant.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  static DEFAULT_PAGINATION = 10
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Static fields&lt;/em&gt; are part of the &lt;em&gt;Class Fields&lt;/em&gt; stage 3 proposal.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;121&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to programmatically trigger click event in React?&lt;/h3&gt; &lt;p&gt;You could use the ref prop to acquire a reference to the underlying &lt;code&gt;HTMLInputElement&lt;/code&gt; object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the &lt;code&gt;HTMLElement.click&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;This can be done in two steps:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create ref in render method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;input ref={input =&amp;gt; this.inputElement = input} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Apply click event in your event handler:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.inputElement.click()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;122&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use async/await in plain React?&lt;/h3&gt; &lt;p&gt;If you want to use &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; in React, you will need &lt;em&gt;Babel&lt;/em&gt; and &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator&quot;&gt;transform-async-to-generator&lt;/a&gt; plugin. React Native ships with Babel and a set of transforms.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;123&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common folder structures for React?&lt;/h3&gt; &lt;p&gt;There are two common practices for React project file structure.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by features or routes:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;One common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;common/
‚îú‚îÄ Avatar.js
‚îú‚îÄ Avatar.css
‚îú‚îÄ APIUtils.js
‚îî‚îÄ APIUtils.test.js
feed/
‚îú‚îÄ index.js
‚îú‚îÄ Feed.js
‚îú‚îÄ Feed.css
‚îú‚îÄ FeedStory.js
‚îú‚îÄ FeedStory.test.js
‚îî‚îÄ FeedAPI.js
profile/
‚îú‚îÄ index.js
‚îú‚îÄ Profile.js
‚îú‚îÄ ProfileHeader.js
‚îú‚îÄ ProfileHeader.css
‚îî‚îÄ ProfileAPI.js
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by file type:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Another popular way to structure projects is to group similar files together.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;api/
‚îú‚îÄ APIUtils.js
‚îú‚îÄ APIUtils.test.js
‚îú‚îÄ ProfileAPI.js
‚îî‚îÄ UserAPI.js
components/
‚îú‚îÄ Avatar.js
‚îú‚îÄ Avatar.css
‚îú‚îÄ Feed.js
‚îú‚îÄ Feed.css
‚îú‚îÄ FeedStory.js
‚îú‚îÄ FeedStory.test.js
‚îú‚îÄ Profile.js
‚îú‚îÄ ProfileHeader.js
‚îî‚îÄ ProfileHeader.css
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;124&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the popular packages for animation?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Transition Group&lt;/em&gt; and &lt;em&gt;React Motion&lt;/em&gt; are popular animation packages in React ecosystem.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;125&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of styles modules?&lt;/h3&gt; &lt;p&gt;It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.&lt;/p&gt; &lt;p&gt;For example, these styles could be extracted into a separate component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export const colors = {
  white,
  black,
  blue
}

export const space = [
  0,
  8,
  16,
  32,
  64
]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then imported individually in other components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { space, colors } from &#39;./styles&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;126&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the popular React-specific linters?&lt;/h3&gt; &lt;p&gt;ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called &lt;code&gt;eslint-plugin-react&lt;/code&gt;. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.&lt;/p&gt; &lt;p&gt;Another popular plugin is &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with &lt;code&gt;alt&lt;/code&gt; text and &lt;code&gt;tabindex&lt;/code&gt;, for example, will not be picked up by regular plugins.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;127&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to make AJAX call and in which component lifecycle methods should I make an AJAX call?&lt;/h3&gt; &lt;p&gt;You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in &lt;code&gt;fetch&lt;/code&gt;. You should fetch data in the &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle method. This is so you can use &lt;code&gt;setState()&lt;/code&gt; to update your component when the data is retrieved.&lt;/p&gt; &lt;p&gt;For example, the employees list fetched from API and set local state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      employees: [],
      error: null
    }
  }

  componentDidMount() {
    fetch(&#39;https://api.example.com/items&#39;)
      .then(res =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            employees: result.employees
          })
        },
        (error) =&amp;gt; {
          this.setState({ error })
        }
      )
  }

  render() {
    const { error, employees } = this.state
    if (error) {
      return &amp;lt;div&amp;gt;Error: {error.message}&amp;lt;/div&amp;gt;;
    } else {
      return (
        &amp;lt;ul&amp;gt;
          {employees.map(employee =&amp;gt; (
            &amp;lt;li key={employee.name}&amp;gt;
              {employee.name}-{employee.experience}
            &amp;lt;/li&amp;gt;
          ))}
        &amp;lt;/ul&amp;gt;
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;128&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are render props?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Render Props&lt;/strong&gt; is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;DataProvider render={data =&amp;gt; (
  &amp;lt;h1&amp;gt;{`Hello ${data.target}`}&amp;lt;/h1&amp;gt;
)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Libraries such as React Router and DownShift are using this pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Router&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;129&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Router?&lt;/h3&gt; &lt;p&gt;React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what&#39;s being displayed on the page.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;130&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How React Router is different from history library?&lt;/h3&gt; &lt;p&gt;React Router is a wrapper around the &lt;code&gt;history&lt;/code&gt; library which handles interaction with the browser&#39;s &lt;code&gt;window.history&lt;/code&gt; with its browser and hash histories. It also provides memory history which is useful for environments that don&#39;t have global history, such as mobile app development (React Native) and unit testing with Node.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;131&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components of React Router v4?&lt;/h3&gt; &lt;p&gt;React Router v4 provides below 3 &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;HashRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;MemoryRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The above components will create &lt;em&gt;browser&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, and &lt;em&gt;memory&lt;/em&gt; history instances. React Router v4 makes the properties and methods of the &lt;code&gt;history&lt;/code&gt; instance associated with your router available through the context in the &lt;code&gt;router&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;132&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods of &lt;code&gt;history&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;A history instance has two methods for navigation purpose.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;If you think of the history as an array of visited locations, &lt;code&gt;push()&lt;/code&gt; will add a new location to the array and &lt;code&gt;replace()&lt;/code&gt; will replace the current location in the array with the new one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;133&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you programmatically navigate using React Router v4?&lt;/h3&gt; &lt;p&gt;There are three different ways to achieve programmatic routing/navigation within components.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using the &lt;code&gt;withRouter()&lt;/code&gt; higher-order function:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;withRouter()&lt;/code&gt; higher-order function will inject the history object as a prop of the component. This object provides &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods to avoid the usage of context.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { withRouter } from &#39;react-router-dom&#39; // this also works with &#39;react-router-native&#39;

const Button = withRouter(({ history }) =&amp;gt; (
  &amp;lt;button
    type=&#39;button&#39;
    onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}
  &amp;gt;
    {&#39;Click Me!&#39;}
  &amp;lt;/button&amp;gt;
))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component and render props pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component passes the same props as &lt;code&gt;withRouter()&lt;/code&gt;, so you will be able to access the history methods through the history prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { Route } from &#39;react-router-dom&#39;

const Button = () =&amp;gt; (
  &amp;lt;Route render={({ history }) =&amp;gt; (
    &amp;lt;button
      type=&#39;button&#39;
      onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}
    &amp;gt;
      {&#39;Click Me!&#39;}
    &amp;lt;/button&amp;gt;
  )} /&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using context:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This option is not recommended and treated as unstable API.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const Button = (props, context) =&amp;gt; (
  &amp;lt;button
    type=&#39;button&#39;
    onClick={() =&amp;gt; {
      context.history.push(&#39;/new-location&#39;)
    }}
  &amp;gt;
    {&#39;Click Me!&#39;}
  &amp;lt;/button&amp;gt;
)

Button.contextTypes = {
  history: React.PropTypes.shape({
    push: React.PropTypes.func.isRequired
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;134&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to get query parameters in React Router v4?&lt;/h3&gt; &lt;p&gt;The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const queryString = require(&#39;query-string&#39;);
const parsed = queryString.parse(props.location.search);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use &lt;code&gt;URLSearchParams&lt;/code&gt; if you want something native:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const params = new URLSearchParams(props.location.search)
const foo = params.get(&#39;name&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should use a &lt;em&gt;polyfill&lt;/em&gt; for IE11.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;135&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why you get &quot;Router may have only one child element&quot; warning?&lt;/h3&gt; &lt;p&gt;You have to wrap your Route&#39;s in a &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block because &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; is unique in that it renders a route exclusively.&lt;/p&gt; &lt;p&gt;At first you need to add &lt;code&gt;Switch&lt;/code&gt; to your imports:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Switch, Router, Route } from &#39;react-router&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then define the routes within &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Router&amp;gt;
  &amp;lt;Switch&amp;gt;
    &amp;lt;Route {/* ... */} /&amp;gt;
    &amp;lt;Route {/* ... */} /&amp;gt;
  &amp;lt;/Switch&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;136&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass params to &lt;code&gt;history.push&lt;/code&gt; method in React Router v4?&lt;/h3&gt; &lt;p&gt;While navigating you can pass props to the &lt;code&gt;history&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.props.history.push({
  pathname: &#39;/template&#39;,
  search: &#39;?name=sudheer&#39;,
  state: { detail: response.data }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;search&lt;/code&gt; property is used to pass query params in &lt;code&gt;push()&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;137&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to implement &lt;em&gt;default&lt;/em&gt; or &lt;em&gt;NotFound&lt;/em&gt; page?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; renders the first child &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; that matches. A &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; with no path always matches. So you just need to simply drop path attribute as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Switch&amp;gt;
  &amp;lt;Route exact path=&quot;/&quot; component={Home}/&amp;gt;
  &amp;lt;Route path=&quot;/user&quot; component={User}/&amp;gt;
  &amp;lt;Route component={NotFound} /&amp;gt;
&amp;lt;/Switch&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;138&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to get history on React Router v4?&lt;/h3&gt; &lt;p&gt;Below are the list of steps to get history object on React Router v4,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create a module that exports a &lt;code&gt;history&lt;/code&gt; object and import this module across the project.&lt;/p&gt; &lt;p&gt;For example, create &lt;code&gt;history.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createBrowserHistory } from &#39;history&#39;

export default createBrowserHistory({
  /* pass a configuration object here if needed */
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You should use the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; component instead of built-in routers. Imported the above &lt;code&gt;history.js&lt;/code&gt; inside &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { Router } from &#39;react-router-dom&#39;
import history from &#39;./history&#39;
import App from &#39;./App&#39;

ReactDOM.render((
  &amp;lt;Router history={history}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Router&amp;gt;
), holder)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use push method of &lt;code&gt;history&lt;/code&gt; object similar to built-in history object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// some-other-file.js
import history from &#39;./history&#39;

history.push(&#39;/go-here&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;139&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to perform automatic redirect after login?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-router&lt;/code&gt; package provides &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; component in React Router. Rendering a &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;
import { Redirect } from &#39;react-router&#39;

export default class LoginComponent extends Component {
  render() {
    if (this.state.isLoggedIn === true) {
      return &amp;lt;Redirect to=&quot;/your/redirect/page&quot; /&amp;gt;
    } else {
      return &amp;lt;div&amp;gt;{&#39;Login Please&#39;}&amp;lt;/div&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Internationalization&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;140&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;React Intl&lt;/em&gt; library makes internalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of &lt;em&gt;FormatJS&lt;/em&gt; which provides bindings to React via its components and API.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;141&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of React Intl?&lt;/h3&gt; &lt;p&gt;Below are the main features of React Intl,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Display numbers with separators.&lt;/li&gt; 
   &lt;li&gt;Display dates and times correctly.&lt;/li&gt; 
   &lt;li&gt;Display dates relative to &quot;now&quot;.&lt;/li&gt; 
   &lt;li&gt;Pluralize labels in strings.&lt;/li&gt; 
   &lt;li&gt;Support for 150+ languages.&lt;/li&gt; 
   &lt;li&gt;Runs in the browser and Node.&lt;/li&gt; 
   &lt;li&gt;Built on standards.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;142&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the two ways of formatting in React Intl?&lt;/h3&gt; &lt;p&gt;The library provides two ways to format strings, numbers, and dates:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using react components:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;FormattedMessage
  id={&#39;account&#39;}
  defaultMessage={&#39;The amount is less than minimum balance.&#39;}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using an API:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const messages = defineMessages({
  accountMessage: {
    id: &#39;account&#39;,
    defaultMessage: &#39;The amount is less than minimum balance.&#39;,
  }
})

formatMessage(messages.accountMessage)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;143&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;&amp;lt;FormattedMessage&amp;gt;&lt;/code&gt; as placeholder using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Formatted... /&amp;gt;&lt;/code&gt; components from &lt;code&gt;react-intl&lt;/code&gt; return elements, not plain text, so they can&#39;t be used for placeholders, alt text, etc. In that case, you should use lower level API &lt;code&gt;formatMessage()&lt;/code&gt;. You can inject the &lt;code&gt;intl&lt;/code&gt; object into your component using &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component and then format the message using &lt;code&gt;formatMessage()&lt;/code&gt; available on that object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import { injectIntl, intlShape } from &#39;react-intl&#39;

const MyComponent = ({ intl }) =&amp;gt; {
  const placeholder = intl.formatMessage({id: &#39;messageId&#39;})
  return &amp;lt;input placeholder={placeholder} /&amp;gt;
}

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;144&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to access current locale with React Intl?&lt;/h3&gt; &lt;p&gt;You can get the current locale in any component of your application using &lt;code&gt;injectIntl()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;

const MyComponent = ({ intl }) =&amp;gt; (
  &amp;lt;div&amp;gt;{`The current locale is ${intl.locale}`}&amp;lt;/div&amp;gt;
)

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;145&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to format date using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component will give you access to the &lt;code&gt;formatDate()&lt;/code&gt; method via the props in your component. The method is used internally by instances of &lt;code&gt;FormattedDate&lt;/code&gt; and it returns the string representation of the formatted date.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;

const stringDate = this.props.intl.formatDate(date, {
  year: &#39;numeric&#39;,
  month: &#39;numeric&#39;,
  day: &#39;numeric&#39;
})

const MyComponent = ({intl}) =&amp;gt; (
  &amp;lt;div&amp;gt;{`The formatted date is ${stringDate}`}&amp;lt;/div&amp;gt;
)

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;146&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Shallow Renderer in React testing?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Shallow rendering&lt;/em&gt; is useful for writing unit test cases in React. It lets you render a component &lt;em&gt;one level deep&lt;/em&gt; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.&lt;/p&gt; &lt;p&gt;For example, if you have the following component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;
      &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then you can assert as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ShallowRenderer from &#39;react-test-renderer/shallow&#39;

// in your test
const renderer = new ShallowRenderer()
renderer.render(&amp;lt;MyComponent /&amp;gt;)

const result = renderer.getRenderOutput()

expect(result.type).toBe(&#39;div&#39;)
expect(result.props.children).toEqual([
  &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;,
  &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;
])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;147&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is &lt;code&gt;TestRenderer&lt;/code&gt; package in React?&lt;/h3&gt; &lt;p&gt;This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or &lt;code&gt;jsdom&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import TestRenderer from &#39;react-test-renderer&#39;

const Link = ({page, children}) =&amp;gt; &amp;lt;a href={page}&amp;gt;{children}&amp;lt;/a&amp;gt;

const testRenderer = TestRenderer.create(
  &amp;lt;Link page={&#39;https://www.facebook.com/&#39;}&amp;gt;{&#39;Facebook&#39;}&amp;lt;/Link&amp;gt;
)

console.log(testRenderer.toJSON())
// {
//   type: &#39;a&#39;,
//   props: { href: &#39;https://www.facebook.com/&#39; },
//   children: [ &#39;Facebook&#39; ]
// }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;148&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of ReactTestUtils package?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;ReactTestUtils&lt;/em&gt; are provided in the &lt;code&gt;with-addons&lt;/code&gt; package and allow you to perform actions against a simulated DOM for the purpose of unit testing.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;149&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Jest?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Jest&lt;/em&gt; is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a &lt;code&gt;jsdom&lt;/code&gt; environment. It&#39;s often used for testing components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;150&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of Jest over Jasmine?&lt;/h3&gt; &lt;p&gt;There are couple of advantages compared to Jasmine:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically finds tests to execute in your source code.&lt;/li&gt; 
   &lt;li&gt;Automatically mocks dependencies when running your tests.&lt;/li&gt; 
   &lt;li&gt;Allows you to test asynchronous code synchronously.&lt;/li&gt; 
   &lt;li&gt;Runs your tests with a fake DOM implementation (via &lt;code&gt;jsdom&lt;/code&gt;) so that your tests can be run on the command line.&lt;/li&gt; 
   &lt;li&gt;Runs tests in parallel processes so that they finish sooner.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;151&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give a simple example of Jest test case&lt;/h3&gt; &lt;p&gt;Let&#39;s write a test for a function that adds two numbers in &lt;code&gt;sum.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sum = (a, b) =&amp;gt; a + b

export default sum
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a file named &lt;code&gt;sum.test.js&lt;/code&gt; which contains actual test:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import sum from &#39;./sum&#39;

test(&#39;adds 1 + 2 to equal 3&#39;, () =&amp;gt; {
  expect(sum(1, 2)).toBe(3)
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then add the following section to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;jest&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, run &lt;code&gt;yarn test&lt;/code&gt; or &lt;code&gt;npm test&lt;/code&gt; and Jest will print a result:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ yarn test
PASS ./sum.test.js
‚úì adds 1 + 2 to equal 3 (2ms)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Redux&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;152&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is flux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flux&lt;/em&gt; is an &lt;em&gt;application design paradigm&lt;/em&gt; used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React.&lt;/p&gt; &lt;p&gt;The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/flux.png&quot; alt=&quot;flux&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;153&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux&lt;/em&gt; is a predictable state container for JavaScript apps based on the &lt;em&gt;Flux design pattern&lt;/em&gt;. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;154&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the core principles of Redux?&lt;/h3&gt; &lt;p&gt;Redux follows three fundamental principles:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Single source of truth:&lt;/strong&gt; The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;State is read-only:&lt;/strong&gt; The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Changes are made with pure functions:&lt;/strong&gt; To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;155&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the downsides of Redux compared to Flux?&lt;/h3&gt; &lt;p&gt;Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;You will need to learn to avoid mutations:&lt;/strong&gt; Flux is un-opinionated about mutating data, but Redux doesn&#39;t like mutations and many packages complementary to Redux assume you never mutate the state. You can enforce this with dev-only packages like &lt;code&gt;redux-immutable-state-invariant&lt;/code&gt;, Immutable.js, or instructing your team to write non-mutating code.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;You&#39;re going to have to carefully pick your packages:&lt;/strong&gt; While Flux explicitly doesn&#39;t try to solve problems such as undo/redo, persistence, or forms, Redux has extension points such as middleware and store enhancers, and it has spawned a rich ecosystem.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;There is no nice Flow integration yet:&lt;/strong&gt; Flux currently lets you do very impressive static type checks which Redux doesn&#39;t support yet.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;156&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;mapStateToProps()&lt;/code&gt; is a utility which helps your component get updated state (which is updated by some other components):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapStateToProps = (state) =&amp;gt; {
  return {
    todos: getVisibleTodos(state.todos, state.visibilityFilter)
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;mapDispatchToProps()&lt;/code&gt; is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    onTodoClick: (id) =&amp;gt; {
      dispatch(toggleTodo(id))
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Recommend always using the ‚Äúobject shorthand‚Äù form for the &lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Redux wrap it in another function that looks like (‚Ä¶args) =&amp;gt; dispatch(onTodoClick(‚Ä¶args)), and pass that wrapper function as a prop to your component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const mapDispatchToProps = ({
   onTodoClick
 })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;157&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I dispatch an action in reducer?&lt;/h3&gt; &lt;p&gt;Dispatching an action within a reducer is an &lt;strong&gt;anti-pattern&lt;/strong&gt;. Your reducer should be &lt;em&gt;without side effects&lt;/em&gt;, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;158&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to access Redux store outside a component?&lt;/h3&gt; &lt;p&gt;You just need to export the store from the module where it created with &lt;code&gt;createStore()&lt;/code&gt;. Also, it shouldn&#39;t pollute the global window object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;store = createStore(myReducer)

export default store
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;159&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the drawbacks of MVW pattern?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;DOM manipulation is very expensive which causes applications to behave slow and inefficient.&lt;/li&gt; 
   &lt;li&gt;Due to circular dependencies, a complicated model was created around models and views.&lt;/li&gt; 
   &lt;li&gt;Lot of data changes happens for collaborative applications(like Google Docs).&lt;/li&gt; 
   &lt;li&gt;No way to do undo (travel back in time) easily without adding so much extra code.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;160&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Are there any similarities between Redux and RxJS?&lt;/h3&gt; &lt;p&gt;These libraries are very different for very different purposes, but there are some vague similarities.&lt;/p&gt; &lt;p&gt;Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;161&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to dispatch an action on load?&lt;/h3&gt; &lt;p&gt;You can dispatch an action in &lt;code&gt;componentDidMount()&lt;/code&gt; method and in &lt;code&gt;render()&lt;/code&gt; method you can verify the data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends Component {
  componentDidMount() {
    this.props.fetchData()
  }

  render() {
    return this.props.isLoaded
      ? &amp;lt;div&amp;gt;{&#39;Loaded&#39;}&amp;lt;/div&amp;gt;
      : &amp;lt;div&amp;gt;{&#39;Not Loaded&#39;}&amp;lt;/div&amp;gt;
  }
}

const mapStateToProps = (state) =&amp;gt; ({
  isLoaded: state.isLoaded
})

const mapDispatchToProps = { fetchData }

export default connect(mapStateToProps, mapDispatchToProps)(App)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;162&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;connect()&lt;/code&gt; from React Redux?&lt;/h3&gt; &lt;p&gt;You need to follow two steps to use your store in your container:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use &lt;code&gt;mapStateToProps()&lt;/code&gt;:&lt;/strong&gt; It maps the state variables from your store to the props that you specify.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect the above props to your container:&lt;/strong&gt; The object returned by the &lt;code&gt;mapStateToProps&lt;/code&gt; function is connected to the container. You can import &lt;code&gt;connect()&lt;/code&gt; from &lt;code&gt;react-redux&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import { connect } from &#39;react-redux&#39;

class App extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;{this.props.containerData}&amp;lt;/div&amp;gt;
  }
}

function mapStateToProps(state) {
  return { containerData: state.data }
}

export default connect(mapStateToProps)(App)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;163&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to reset state in Redux?&lt;/h3&gt; &lt;p&gt;You need to write a &lt;em&gt;root reducer&lt;/em&gt; in your application which delegate handling the action to the reducer generated by &lt;code&gt;combineReducers()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take &lt;code&gt;rootReducer()&lt;/code&gt; to return the initial state after &lt;code&gt;USER_LOGOUT&lt;/code&gt; action. As we know, reducers are supposed to return the initial state when they are called with &lt;code&gt;undefined&lt;/code&gt; as the first argument, no matter the action.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const appReducer = combineReducers({
  /* your app&#39;s top-level reducers */
})

const rootReducer = (state, action) =&amp;gt; {
  if (action.type === &#39;USER_LOGOUT&#39;) {
    state = undefined
  }

  return appReducer(state, action)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case of using &lt;code&gt;redux-persist&lt;/code&gt;, you may also need to clean your storage. &lt;code&gt;redux-persist&lt;/code&gt; keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const appReducer = combineReducers({
  /* your app&#39;s top-level reducers */
})

const rootReducer = (state, action) =&amp;gt; {
  if (action.type === &#39;USER_LOGOUT&#39;) {
    Object.keys(state).forEach(key =&amp;gt; {
      storage.removeItem(`persist:${key}`)
    })

    state = undefined
  }

  return appReducer(state, action)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;164&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Whats the purpose of &lt;code&gt;at&lt;/code&gt; symbol in the Redux connect decorator?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;@&lt;/strong&gt; symbol is in fact a JavaScript expression used to signify decorators. &lt;em&gt;Decorators&lt;/em&gt; make it possible to annotate and modify classes and properties at design time.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example setting up Redux without and with a decorator.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Without decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import * as actionCreators from &#39;./actionCreators&#39;
import { bindActionCreators } from &#39;redux&#39;
import { connect } from &#39;react-redux&#39;

function mapStateToProps(state) {
  return { todos: state.todos }
}

function mapDispatchToProps(dispatch) {
  return { actions: bindActionCreators(actionCreators, dispatch) }
}

class MyApp extends React.Component {
  // ...define your main app here
}

export default connect(mapStateToProps, mapDispatchToProps)(MyApp)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;With decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import * as actionCreators from &#39;./actionCreators&#39;
import { bindActionCreators } from &#39;redux&#39;
import { connect } from &#39;react-redux&#39;

function mapStateToProps(state) {
  return { todos: state.todos }
}

function mapDispatchToProps(dispatch) {
  return { actions: bindActionCreators(actionCreators, dispatch) }
}

@connect(mapStateToProps, mapDispatchToProps)
export default class MyApp extends React.Component {
  // ...define your main app here
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The above examples are almost similar except the usage of decorator. The decorator syntax isn&#39;t built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;165&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React context and React Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;strong&gt;Context&lt;/strong&gt; in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.&lt;/p&gt; &lt;p&gt;Whereas &lt;strong&gt;Redux&lt;/strong&gt; is much more powerful and provides a large number of features that the Context API doesn&#39;t provide. Also, React Redux uses context internally but it doesn&#39;t expose this fact in the public API.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;166&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are Redux state functions called reducers?&lt;/h3&gt; &lt;p&gt;Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could &lt;em&gt;reduce&lt;/em&gt; a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;167&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to make AJAX request in Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;redux-thunk&lt;/code&gt; middleware which allows you to define async actions.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of fetching specific account as an AJAX call using &lt;em&gt;fetch API&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export function fetchAccount(id) {
  return dispatch =&amp;gt; {
    dispatch(setLoadingAccountState()) // Show a loading spinner
    fetch(`/account/${id}`, (response) =&amp;gt; {
      dispatch(doneFetchingAccount()) // Hide loading spinner
      if (response.status === 200) {
        dispatch(setAccount(response.json)) // Use a normal function to set the received state
      } else {
        dispatch(someError)
      }
    })
  }
}

function setAccount(data) {
 return { type: &#39;SET_Account&#39;, data: data }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;168&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Should I keep all component&#39;s state in Redux store?&lt;/h3&gt; &lt;p&gt;Keep your data in the Redux store, and the UI related state internally in the component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;169&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the proper way to access Redux store?&lt;/h3&gt; &lt;p&gt;The best way to access your store in a component is to use the &lt;code&gt;connect()&lt;/code&gt; function, that creates a new component that wraps around your existing one. This pattern is called &lt;em&gt;Higher-Order Components&lt;/em&gt;, and is generally the preferred way of extending a component&#39;s functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of &lt;code&gt;&amp;lt;FilterLink&amp;gt;&lt;/code&gt; component using connect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { connect } from &#39;react-redux&#39;
import { setVisibilityFilter } from &#39;../actions&#39;
import Link from &#39;../components/Link&#39;

const mapStateToProps = (state, ownProps) =&amp;gt; ({
  active: ownProps.filter === state.visibilityFilter
})

const mapDispatchToProps = (dispatch, ownProps) =&amp;gt; ({
  onClick: () =&amp;gt; dispatch(setVisibilityFilter(ownProps.filter))
})

const FilterLink = connect(
  mapStateToProps,
  mapDispatchToProps
)(Link)

export default FilterLink
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using &lt;code&gt;connect()&lt;/code&gt; over accessing the store directly (using context API).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent {
  someMethod() {
    doSomethingWith(this.context.store)
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;170&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between component and container in React Redux?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Component&lt;/strong&gt; is a class or function component that describes the presentational part of your application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is an informal term for a component that is connected to a Redux store. Containers &lt;em&gt;subscribe&lt;/em&gt; to Redux state updates and &lt;em&gt;dispatch&lt;/em&gt; actions, and they usually don&#39;t render DOM elements; they delegate rendering to presentational child components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;171&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the constants in Redux?&lt;/h3&gt; &lt;p&gt;Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos ‚Äì in which case, you will get a &lt;code&gt;ReferenceError&lt;/code&gt; immediately.&lt;/p&gt; &lt;p&gt;Normally we will save them in a single file (&lt;code&gt;constants.js&lt;/code&gt; or &lt;code&gt;actionTypes.js&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export const ADD_TODO = &#39;ADD_TODO&#39;
export const DELETE_TODO = &#39;DELETE_TODO&#39;
export const EDIT_TODO = &#39;EDIT_TODO&#39;
export const COMPLETE_TODO = &#39;COMPLETE_TODO&#39;
export const COMPLETE_ALL = &#39;COMPLETE_ALL&#39;
export const CLEAR_COMPLETED = &#39;CLEAR_COMPLETED&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In Redux, you use them in two places:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;During action creation:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let&#39;s take &lt;code&gt;actions.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;;

export function addTodo(text) {
  return { type: ADD_TODO, text }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;In reducers:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let&#39;s create &lt;code&gt;reducer.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;

export default (state = [], action) =&amp;gt; {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ];
    default:
      return state
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;172&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to write &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are a few ways of binding &lt;em&gt;action creators&lt;/em&gt; to &lt;code&gt;dispatch()&lt;/code&gt; in &lt;code&gt;mapDispatchToProps()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
 action: () =&amp;gt; dispatch(action())
})
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
 action: bindActionCreators(action, dispatch)
})
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = { action }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The third option is just a shorthand for the first one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;173&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of the &lt;code&gt;ownProps&lt;/code&gt; parameter in &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;If the &lt;code&gt;ownProps&lt;/code&gt; parameter is specified, React Redux will pass the props that were passed to the component into your &lt;em&gt;connect&lt;/em&gt; functions. So, if you use a connected component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ConnectedComponent from &#39;./containers/ConnectedComponent&#39;;

&amp;lt;ConnectedComponent user={&#39;john&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;ownProps&lt;/code&gt; inside your &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt; functions will be an object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{ user: &#39;john&#39; }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use this object to decide what to return from those functions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;174&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to structure Redux top level directories?&lt;/h3&gt; &lt;p&gt;Most of the applications has several top-level directories as below:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: Used for &lt;em&gt;dumb&lt;/em&gt; components unaware of Redux.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Used for &lt;em&gt;smart&lt;/em&gt; components connected to Redux.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;: Used for all action creators, where file names correspond to part of the app.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Reducers&lt;/strong&gt;: Used for all reducers, where files name correspond to state key.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: Used for store initialization.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;This structure works well for small and medium size apps.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;175&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;redux-saga&lt;/code&gt; is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.&lt;/p&gt; &lt;p&gt;It is available in NPM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install --save redux-saga
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;176&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the mental model of redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Saga&lt;/em&gt; is like a separate thread in your application, that&#39;s solely responsible for side effects. &lt;code&gt;redux-saga&lt;/code&gt; is a redux &lt;em&gt;middleware&lt;/em&gt;, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;177&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; in redux-saga?&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; are effect creator functions. &lt;code&gt;call()&lt;/code&gt; function is used to create effect description, which instructs middleware to call the promise. &lt;code&gt;put()&lt;/code&gt; function creates an effect, which instructs middleware to dispatch an action to the store.&lt;/p&gt; &lt;p&gt;Let&#39;s take example of how these effects work for fetching particular user data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* fetchUserSaga(action) {
  // `call` function accepts rest arguments, which will be passed to `api.fetchUser` function.
  // Instructing middleware to call promise, it resolved value will be assigned to `userData` variable
  const userData = yield call(api.fetchUser, action.userId)

  // Instructing middleware to dispatch corresponding action.
  yield put({
    type: &#39;FETCH_USER_SUCCESS&#39;,
    userData
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;178&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux Thunk?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Thunk&lt;/em&gt; middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;getState()&lt;/code&gt; as parameters.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;179&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;redux-saga&lt;/code&gt; and &lt;code&gt;redux-thunk&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;Redux Thunk&lt;/em&gt; and &lt;em&gt;Redux Saga&lt;/em&gt; take care of dealing with side effects. In most of the scenarios, Thunk uses &lt;em&gt;Promises&lt;/em&gt; to deal with them, whereas Saga uses &lt;em&gt;Generators&lt;/em&gt;. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;180&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux DevTools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux DevTools&lt;/em&gt; is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don&#39;t want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;181&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the features of Redux DevTools?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux DevTools are below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Lets you inspect every state and action payload.&lt;/li&gt; 
   &lt;li&gt;Lets you go back in time by &lt;em&gt;cancelling&lt;/em&gt; actions.&lt;/li&gt; 
   &lt;li&gt;If you change the reducer code, each &lt;em&gt;staged&lt;/em&gt; action will be re-evaluated.&lt;/li&gt; 
   &lt;li&gt;If the reducers throw, you will see during which action this happened, and what the error was.&lt;/li&gt; 
   &lt;li&gt;With &lt;code&gt;persistState()&lt;/code&gt; store enhancer, you can persist debug sessions across page reloads.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;182&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Redux selectors and why to use them?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Selectors&lt;/em&gt; are functions that take Redux state as an argument and return some data to pass to the component.&lt;/p&gt; &lt;p&gt;For example, to get user details from the state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const getUserData = state =&amp;gt; state.user.data
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These selectors have two main benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The selector can compute derived data, allowing Redux to store the minimal possible state&lt;/li&gt; 
   &lt;li&gt;The selector is not recomputed unless one of its arguments changes&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;183&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux Form?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Form&lt;/em&gt; works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;184&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of Redux Form?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux Form are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Field values persistence via Redux store.&lt;/li&gt; 
   &lt;li&gt;Validation (sync/async) and submission.&lt;/li&gt; 
   &lt;li&gt;Formatting, parsing and normalization of field values.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;185&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add multiple middlewares to Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;applyMiddleware()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, you can add &lt;code&gt;redux-thunk&lt;/code&gt; and &lt;code&gt;logger&lt;/code&gt; passing them as arguments to &lt;code&gt;applyMiddleware()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;
const createStoreWithMiddleware = applyMiddleware(ReduxThunk, logger)(createStore)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;186&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to set initial state in Redux?&lt;/h3&gt; &lt;p&gt;You need to pass initial state as second argument to createStore:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const rootReducer = combineReducers({
  todos: todos,
  visibilityFilter: visibilityFilter
})

const initialState = {
  todos: [{ id: 123, name: &#39;example&#39;, completed: false }]
}

const store = createStore(
  rootReducer,
  initialState
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;187&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Relay is different from Redux?&lt;/h3&gt; &lt;p&gt;Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via &lt;em&gt;GraphQL&lt;/em&gt; queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an action in Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Actions&lt;/em&gt; are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.&lt;/p&gt; &lt;p&gt;For example, let&#39;s take an action which represents adding a new todo item:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{
  type: ADD_TODO,
  text: &#39;Add todo item&#39;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;React Native&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;188&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React Native and React?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;React Native&lt;/strong&gt; is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;189&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to test React Native apps?&lt;/h3&gt; &lt;p&gt;React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (&lt;a href=&quot;https://expo.io&quot;&gt;https://expo.io&lt;/a&gt;) Where it syncs using QR code, your mobile and computer should be in same wireless network.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;190&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to do logging in React Native?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, etc. As of React Native v0.29 you can simply run the following to see logs in the console:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ react-native log-ios
$ react-native log-android
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;191&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to debug your React Native?&lt;/h3&gt; &lt;p&gt;Follow the below steps to debug React Native app:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Run your application in the iOS simulator.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;Command + D&lt;/code&gt; and a webpage should open up at &lt;code&gt;http://localhost:8081/debugger-ui&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Enable &lt;em&gt;Pause On Caught Exceptions&lt;/em&gt; for a better debugging experience.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;Command + Option + I&lt;/code&gt; to open the Chrome Developer tools, or open it via &lt;code&gt;View&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer Tools&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;You should now be able to debug as you normally would.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React supported libraries &amp;amp; Integration&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;192&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is reselect and how it works?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Reselect&lt;/em&gt; is a &lt;strong&gt;selector library&lt;/strong&gt; (for Redux) which uses &lt;em&gt;memoization&lt;/em&gt; concept. It was originally written to compute derived data from Redux-like applications state, but it can&#39;t be tied to any architecture or library.&lt;/p&gt; &lt;p&gt;Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It&#39;s memoization and cache are fully customizable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;193&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Flow?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flow&lt;/em&gt; is a &lt;em&gt;static type checker&lt;/em&gt; designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving &lt;code&gt;null&lt;/code&gt;, unlike most type systems.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;194&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Flow and PropTypes?&lt;/h3&gt; &lt;p&gt;Flow is a &lt;em&gt;static analysis tool&lt;/em&gt; (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.&lt;/p&gt; &lt;p&gt;PropTypes is a &lt;em&gt;basic type checker&lt;/em&gt; (runtime checker) which has been patched onto React. It can&#39;t check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;195&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use Font Awesome icons in React?&lt;/h3&gt; &lt;p&gt;The below steps followed to include Font Awesome in React:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Install &lt;code&gt;font-awesome&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install --save font-awesome
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Import &lt;code&gt;font-awesome&lt;/code&gt; in your &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &#39;font-awesome/css/font-awesome.min.css&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Add Font Awesome classes in &lt;code&gt;className&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  return &amp;lt;div&amp;gt;&amp;lt;i className={&#39;fa fa-spinner&#39;} /&amp;gt;&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;196&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Dev Tools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Developer Tools&lt;/em&gt; let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).&lt;/p&gt; &lt;p&gt;The official extensions available for different browsers or environments.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Chrome extension&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Firefox extension&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Standalone app&lt;/strong&gt; (Safari, React Native, etc)&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;197&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is DevTools not loading in Chrome for local files?&lt;/h3&gt; &lt;p&gt;If you opened a local HTML file in your browser (&lt;code&gt;file://...&lt;/code&gt;) then you must first open &lt;em&gt;Chrome Extensions&lt;/em&gt; and check &lt;code&gt;Allow access to file URLs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;198&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use Polymer in React?&lt;/h3&gt; &lt;p&gt;You need to follow below steps to use Polymer in React,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create a Polymer element:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;../../bower_components/polymer/polymer.html&#39; /&amp;gt;
Polymer({
  is: &#39;calender-element&#39;,
  ready: function() {
    this.textContent = &#39;I am a calender&#39;
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Create the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the &lt;code&gt;index.html&lt;/code&gt; of your React application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;./src/polymer-components/calender-element.html&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Use that element in the JSX file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;

class MyComponent extends React.Component {
  render() {
    return (
      &amp;lt;calender-element /&amp;gt;
    )
  }
}

export default MyComponent
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;199&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of React over Vue.js?&lt;/h3&gt; &lt;p&gt;React has the following advantages over Vue.js:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Gives more flexibility in large apps developing.&lt;/li&gt; 
   &lt;li&gt;Easier to test.&lt;/li&gt; 
   &lt;li&gt;Suitable for mobile apps creating.&lt;/li&gt; 
   &lt;li&gt;More information and solutions available.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;200&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React and Angular?&lt;/h3&gt; &lt;p&gt;Let&#39;s see the difference between React and Angular in a table format.&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;React&lt;/th&gt; 
     &lt;th&gt;Angular&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React is a library and has only the View layer&lt;/td&gt; 
     &lt;td&gt;Angular is a framework and has complete MVC functionality&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React handles rendering on the server side&lt;/td&gt; 
     &lt;td&gt;AngularJS renders only on the client side but Angular 2 and above renders on the server side&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React uses JSX that looks like HTML in JS which can be confusing&lt;/td&gt; 
     &lt;td&gt;Angular follows the template approach for HTML, which makes code shorter and easy to understand&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React Native, which is a React type to build mobile applications are faster and more stable&lt;/td&gt; 
     &lt;td&gt;Ionic, Angular&#39;s mobile native app is relatively less stable and slower&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;In React, data flows only in one way and hence debugging is easy&lt;/td&gt; 
     &lt;td&gt;In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;201&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why React tab is not showing up in DevTools?&lt;/h3&gt; &lt;p&gt;When the page loads, &lt;em&gt;React DevTools&lt;/em&gt; sets a global named &lt;code&gt;__REACT_DEVTOOLS_GLOBAL_HOOK__&lt;/code&gt;, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won&#39;t show up the tab.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;202&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Styled Components?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt; is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;203&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example of Styled Components?&lt;/h3&gt; &lt;p&gt;Lets create &lt;code&gt;&amp;lt;Title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Wrapper&amp;gt;&lt;/code&gt; components with specific styles for each.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import styled from &#39;styled-components&#39;

// Create a &amp;lt;Title&amp;gt; component that renders an &amp;lt;h1&amp;gt; which is centered, red and sized at 1.5em
const Title = styled.h1`
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
`

// Create a &amp;lt;Wrapper&amp;gt; component that renders a &amp;lt;section&amp;gt; with some padding and a papayawhip background
const Wrapper = styled.section`
  padding: 4em;
  background: papayawhip;
`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These two variables, &lt;code&gt;Title&lt;/code&gt; and &lt;code&gt;Wrapper&lt;/code&gt;, are now components that you can render just like any other react component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Wrapper&amp;gt;
  &amp;lt;Title&amp;gt;{&#39;Lets start first styled component!&#39;}&amp;lt;/Title&amp;gt;
&amp;lt;/Wrapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;204&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Relay?&lt;/h3&gt; &lt;p&gt;Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;205&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use TypeScript in &lt;code&gt;create-react-app&lt;/code&gt; application?&lt;/h3&gt; &lt;p&gt;Starting from react-scripts@2.1.0 or higher, there is a built-in support for typescript. i.e, &lt;code&gt;create-react-app&lt;/code&gt; now supports typescript natively. You can just pass &lt;code&gt;--typescript&lt;/code&gt; option as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-react-app my-app --typescript

# or

yarn create react-app my-app --typescript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But for lower versions of react scripts, just supply &lt;code&gt;--scripts-version&lt;/code&gt; option as &lt;code&gt;react-scripts-ts&lt;/code&gt; while you create a new project. &lt;code&gt;react-scripts-ts&lt;/code&gt; is a set of adjustments to take the standard &lt;code&gt;create-react-app&lt;/code&gt; project pipeline and bring TypeScript into the mix.&lt;/p&gt; &lt;p&gt;Now the project layout should look like the following:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;my-app/
‚îú‚îÄ .gitignore
‚îú‚îÄ images.d.ts
‚îú‚îÄ node_modules/
‚îú‚îÄ public/
‚îú‚îÄ src/
‚îÇ  ‚îî‚îÄ ...
‚îú‚îÄ package.json
‚îú‚îÄ tsconfig.json
‚îú‚îÄ tsconfig.prod.json
‚îú‚îÄ tsconfig.test.json
‚îî‚îÄ tslint.json
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Miscellaneous&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;206&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of Reselect library?&lt;/h3&gt; &lt;p&gt;Let&#39;s see the main features of Reselect library,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Selectors can compute derived data, allowing Redux to store the minimal possible state.&lt;/li&gt; 
   &lt;li&gt;Selectors are efficient. A selector is not recomputed unless one of its arguments changes.&lt;/li&gt; 
   &lt;li&gt;Selectors are composable. They can be used as input to other selectors.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h4&gt;Give an example of Reselect usage?&lt;/h4&gt; &lt;p&gt;Let&#39;s take calculations and different amounts of a shipment order with the simplified usage of Reselect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createSelector } from &#39;reselect&#39;

const shopItemsSelector = state =&amp;gt; state.shop.items
const taxPercentSelector = state =&amp;gt; state.shop.taxPercent

const subtotalSelector = createSelector(
  shopItemsSelector,
  items =&amp;gt; items.reduce((acc, item) =&amp;gt; acc + item.value, 0)
)

const taxSelector = createSelector(
  subtotalSelector,
  taxPercentSelector,
  (subtotal, taxPercent) =&amp;gt; subtotal * (taxPercent / 100)
)

export const totalSelector = createSelector(
  subtotalSelector,
  taxSelector,
  (subtotal, tax) =&amp;gt; ({ total: subtotal + tax })
)

let exampleState = {
  shop: {
    taxPercent: 8,
    items: [
      { name: &#39;apple&#39;, value: 1.20 },
      { name: &#39;orange&#39;, value: 0.95 },
    ]
  }
}

console.log(subtotalSelector(exampleState)) // 2.15
console.log(taxSelector(exampleState))      // 0.172
console.log(totalSelector(exampleState))    // { total: 2.322 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;209&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Does the statics object work with ES6 classes in React?&lt;/h3&gt; &lt;p&gt;No, &lt;code&gt;statics&lt;/code&gt; only works with &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;someComponent= React.createClass({
  statics: {
    someMethod: function() {
      // ..
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can write statics inside ES6+ classes as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Component extends React.Component {
  static propTypes = {
    // ...
  }

  static someMethod() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or writing them outside class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Component extends React.Component {
   ....
}

Component.propTypes = {...}
Component.someMethod = function(){....}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;210&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can Redux only be used with React?&lt;/h3&gt; &lt;p&gt;Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;211&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do you need to have a particular build tool to use Redux?&lt;/h3&gt; &lt;p&gt;Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;212&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Redux Form &lt;code&gt;initialValues&lt;/code&gt; get updated from state?&lt;/h3&gt; &lt;p&gt;You need to add &lt;code&gt;enableReinitialize : true&lt;/code&gt; setting.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const InitializeFromStateForm = reduxForm({
  form: &#39;initializeFromState&#39;,
  enableReinitialize : true
})(UserEdit)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your &lt;code&gt;initialValues&lt;/code&gt; prop gets updated, your form will update too.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;213&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How React PropTypes allow different types for one prop?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;oneOfType()&lt;/code&gt; method of &lt;code&gt;PropTypes&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, the height property can be defined with either &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; type as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Component.propTypes = {
  size: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number
  ])
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;214&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I import an SVG file as react component?&lt;/h3&gt; &lt;p&gt;You can import SVG directly as component instead of loading it as a file. This feature is available with &lt;code&gt;react-scripts@2.0.0&lt;/code&gt; and higher.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { ReactComponent as Logo } from &#39;./logo.svg&#39;

const App = () =&amp;gt; (
  &amp;lt;div&amp;gt;
    {/* Logo is an actual react component */}
    &amp;lt;Logo /&amp;gt;
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don&#39;t forget about the curly braces in the import.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;215&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are inline ref callbacks or functions not recommended?&lt;/h3&gt; &lt;p&gt;If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserForm extends Component {
  handleSubmit = () =&amp;gt; {
    console.log(&quot;Input Value is: &quot;, this.input.value)
  }


  render () {
   return (
     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
       &amp;lt;input
         type=&#39;text&#39;
         ref={(input) =&amp;gt; this.input = input} /&amp;gt; // Access DOM input in handle submit
       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;
     &amp;lt;/form&amp;gt;
   )
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserForm extends Component {
 handleSubmit = () =&amp;gt; {
   console.log(&quot;Input Value is: &quot;, this.input.value)
 }

 setSearchInput = (input) =&amp;gt; {
   this.input = input
 }

 render () {
   return (
     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
       &amp;lt;input
         type=&#39;text&#39;
         ref={this.setSearchInput} /&amp;gt; // Access DOM input in handle submit
       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;
     &amp;lt;/form&amp;gt;
   )
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;**Note:** In React v16.3,
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;216&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is render hijacking in react?&lt;/h3&gt; &lt;p&gt;The concept of render hijacking is the ability to control what a component will output from another component. It actually means that you decorate your component by wrapping it into a Higher-Order component. By wrapping you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enables hijacking, but by using HOC you make your component behave in different way.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;217&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are HOC factory implementations?&lt;/h3&gt; &lt;p&gt;There are two main ways of implementing HOCs in React.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Props Proxy (PP) and&lt;/li&gt; 
   &lt;li&gt;Inheritance Inversion (II).&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;But they follow different approaches for manipulating the &lt;em&gt;WrappedComponent&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Props Proxy&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name &lt;strong&gt;Props Proxy&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;
function ppHOC(WrappedComponent) {
 return class PP extends React.Component {
   render() {
     return &amp;lt;WrappedComponent {...this.props}/&amp;gt;
   }
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Inheritance Inversion&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems &lt;strong&gt;inverse&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function iiHOC(WrappedComponent) {
 return class Enhancer extends WrappedComponent {
   render() {
     return super.render()
   }
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;218&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass numbers to React component?&lt;/h3&gt; &lt;p&gt;You should be passing the numbers via curly braces({}) where as strings in quotes&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;   React.render(&amp;lt;User age={30} department={&quot;IT&quot;} /&amp;gt;, document.getElementById(&#39;container&#39;));
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;219&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/h3&gt; &lt;p&gt;It is up to developer decision. i.e, It is developer job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as ‚Äúis this dropdown currently open‚Äù, inside a component&#39;s internal state.&lt;/p&gt; &lt;p&gt;Below are the thumb rules to determine what kind of data should be put into Redux&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Do other parts of the application care about this data?&lt;/li&gt; 
   &lt;li&gt;Do you need to be able to create further derived data based on this original data?&lt;/li&gt; 
   &lt;li&gt;Is the same data being used to drive multiple components?&lt;/li&gt; 
   &lt;li&gt;Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?&lt;/li&gt; 
   &lt;li&gt;Do you want to cache the data (i.e, use what&#39;s in state if it&#39;s already there instead of re-requesting it)?&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;220&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of registerServiceWorker in React?&lt;/h3&gt; &lt;p&gt;React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that&#39;s what you should know about service worker&#39;s for now. It&#39;s all about adding offline capabilities to your site.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;   import React from &#39;react&#39;;
   import ReactDOM from &#39;react-dom&#39;;
   import App from &#39;./App&#39;;
   import registerServiceWorker from &#39;./registerServiceWorker&#39;;

   ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;root&#39;));
   registerServiceWorker();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;221&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React memo function?&lt;/h3&gt; &lt;p&gt;Class components can be restricted from rendering when their input props are the same using &lt;strong&gt;PureComponent or shouldComponentUpdate&lt;/strong&gt;. Now you can do the same with function components by wrapping them in &lt;strong&gt;React.memo&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = React.memo(function MyComponent(props) {
 /* only rerenders if props change */
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;222&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React lazy function?&lt;/h3&gt; The &lt;code&gt;React.lazy&lt;/code&gt; function lets you render an dynamic import as a regular component. It will automatically load the bundle containing the OtherComponent when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component. &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));

function MyComponent() {
 return (
   &amp;lt;div&amp;gt;
     &amp;lt;OtherComponent /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; React.lazy and Suspense is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;223&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent unnecessary updates using setState?&lt;/h3&gt; &lt;p&gt;You can compare current value of the state with an existing state value and decide whether to rerender the page or not. If the values are same then you need to return &lt;strong&gt;null&lt;/strong&gt; to stop re-rendering otherwise return the latest state value.&lt;/p&gt; &lt;p&gt;For example, the user profile information is conditionally rendered as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;getUserProfile = user =&amp;gt; {
  const latestAddress = user.address;
  this.setState(state =&amp;gt; {
    if (state.address === latestAddress) {
      return null;
    } else {
      return { title: latestAddress };
    }
  });
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;224&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;: Unlike older releases, you don&#39;t need to make sure &lt;strong&gt;render&lt;/strong&gt; method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.&lt;/p&gt; &lt;p&gt;For example, let us take the below list of developers,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ReactJSDevs = () =&amp;gt; {
  return [
    &amp;lt;li key=&quot;1&quot;&amp;gt;John&amp;lt;/li&amp;gt;,
    &amp;lt;li key=&quot;2&quot;&amp;gt;Jackie&amp;lt;/li&amp;gt;,
    &amp;lt;li key=&quot;3&quot;&amp;gt;Jordan&amp;lt;/li&amp;gt;
  ];
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also merge this array of items in another array component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const JSDevs = () =&amp;gt; {
  return (
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;Brad&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;Brodge&amp;lt;/li&amp;gt;
      &amp;lt;ReactJSDevs/&amp;gt;
      &amp;lt;li&amp;gt;Brandon&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Strings and Numbers:&lt;/strong&gt; You can also return string and number type from the render method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
 return &#39;Welcome to ReactJS questions&#39;;
}
// Number
render() {
 return 2018;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;225&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use class field declarations syntax in React classes?&lt;/h3&gt; &lt;p&gt;React Class Components can be made much more concise using the class field declarations. You can initialize local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.&lt;/p&gt; &lt;p&gt;Let&#39;s take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class Counter extends Component {
  state = { value: 0 };

  handleIncrement = () =&amp;gt; {
    this.setState(prevState =&amp;gt; ({
      value: prevState.value + 1
    }));
  };

  handleDecrement = () =&amp;gt; {
    this.setState(prevState =&amp;gt; ({
      value: prevState.value - 1
    }));
  };

  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.state.value}

        &amp;lt;button onClick={this.handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
        &amp;lt;button onClick={this.handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;226&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are hooks?&lt;/h3&gt; &lt;p&gt;Hooks is a new feature(React 16.8) that lets you use state and other React features without writing a class.&lt;/p&gt; &lt;p&gt;Let&#39;s see an example of useState hook example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { useState } from &#39;react&#39;;

function Example() {
  // Declare a new state variable, which we&#39;ll call &quot;count&quot;
  const [count, setCount] = useState(0);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
        Click me
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;227&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the rules needs to follow for hooks?&lt;/h3&gt; &lt;p&gt;You need to follow two rules in order to use hooks,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Call Hooks only at the top level of your react functions. i.e, You shouldn‚Äôt call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple useState and useEffect calls.&lt;/li&gt; 
   &lt;li&gt;Call Hooks from React Functions only. i.e, You shouldn‚Äôt call Hooks from regular JavaScript functions.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;228&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to ensure hooks followed the rules in your project?&lt;/h3&gt; React team released an ESLint plugin called &lt;strong&gt;eslint-plugin-react-hooks&lt;/strong&gt; that enforces these two rules. You can add this plugin to your project using the below command, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install eslint-plugin-react-hooks@next
&lt;/code&gt;&lt;/pre&gt; And apply the below config in your ESLint config file, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Your ESLint configuration
{
  &quot;plugins&quot;: [
    // ...
    &quot;react-hooks&quot;
  ],
  &quot;rules&quot;: {
    // ...
    &quot;react-hooks/rules-of-hooks&quot;: &quot;error&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; This plugin is intended to use in Create React App by default.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;229&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Flux and Redux?&lt;/h3&gt; &lt;p&gt;Below are the major differences between Flux and Redux&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Flux&lt;/th&gt; 
     &lt;th&gt;Redux&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;State is mutable&lt;/td&gt; 
     &lt;td&gt;State is immutable&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;The Store contains both state and change logic&lt;/td&gt; 
     &lt;td&gt;The Store and change logic are separate&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;There are multiple stores exist&lt;/td&gt; 
     &lt;td&gt;There is only one store exist&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;All the stores are disconnected and flat&lt;/td&gt; 
     &lt;td&gt;Single store with hierarchical reducers&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It has a singleton dispatcher&lt;/td&gt; 
     &lt;td&gt;There is no concept of dispatcher&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React components subscribe to the store&lt;/td&gt; 
     &lt;td&gt;Container components uses connect function&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;230&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of React Router V4?&lt;/h3&gt; &lt;p&gt;Below are the main benefits of React Router V4 module,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;In React Router v4(version 4), the API is completely about components. A router can be visualized as a single component(&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;) which wraps specific child router components(&lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;You don&#39;t need to manually set history. The router module will take care history by wrapping routes with &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; component.&lt;/li&gt; 
   &lt;li&gt;The application size is reduced by adding only the specific router module(Web, core, or native)&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;231&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;error: - The error object which was thrown&lt;/li&gt; 
   &lt;li&gt;info: - An object with a componentStack key contains the information about which component threw the error.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The method structure would be as follows&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;componentDidCatch(error, info)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;232&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;In which scenarios error boundaries do not catch errors?&lt;/h3&gt; &lt;p&gt;Below are the cases in which error boundaries doesn&#39;t work,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Inside Event handlers&lt;/li&gt; 
   &lt;li&gt;Asynchronous code using &lt;strong&gt;setTimeout or requestAnimationFrame&lt;/strong&gt; callbacks&lt;/li&gt; 
   &lt;li&gt;During Server side rendering&lt;/li&gt; 
   &lt;li&gt;When errors thrown in the error boundary code itself&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;233&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you not need error boundaries for event handlers?&lt;/h3&gt; &lt;p&gt;Error boundaries do not catch errors inside event handlers.&lt;/p&gt; &lt;p&gt;React doesn‚Äôt need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don‚Äôt happen during rendering. So if they throw, React still knows what to display on the screen.&lt;/p&gt; &lt;p&gt;If you need to catch an error inside an event handler, use the regular JavaScript try / catch statement:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    try {
      // Do something that could throw
    } catch (error) {
      this.setState({ error });
    }
  }

  render() {
    if (this.state.error) {
      return &amp;lt;h1&amp;gt;Caught an error.&amp;lt;/h1&amp;gt;
    }
    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the above example is demonstrating regular JavaScript behavior and doesn‚Äôt use error boundaries.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;234&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between try catch block and error boundaries?&lt;/h3&gt; &lt;p&gt;Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.&lt;/p&gt; &lt;p&gt;For example, the try catch block used for below imperative code&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  showButton();
} catch (error) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas error boundaries wrap declarative code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ErrorBoundary&amp;gt;
  &amp;lt;MyComponent /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So if an error occurs in a &lt;strong&gt;componentDidUpdate&lt;/strong&gt; method caused by a &lt;strong&gt;setState&lt;/strong&gt; somewhere deep in the tree, it will still correctly propagate to the closest error boundary.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;235&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the behavior of uncaught errors in react 16?&lt;/h3&gt; In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;236&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the proper placement for error boundaries?&lt;/h3&gt; The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches, 
  &lt;ol&gt; 
   &lt;li&gt;You can wrap top-level route components to display a generic error message for the entire application.&lt;/li&gt; 
   &lt;li&gt;You can also wrap individual components in an error boundary to protect them from crashing the rest of the application.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;237&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of component stack trace from error boundary?&lt;/h3&gt; &lt;p&gt;Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.&lt;/p&gt; &lt;p&gt;For example, BuggyCounter component displays the component stack trace as below,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/error_boundary.png&quot; alt=&quot;stacktrace&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;238&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the required method to be defined for a class component?&lt;/h3&gt; The &lt;code&gt;render()&lt;/code&gt; method is the only required method in a class component. i.e, All methods other than render method are optional for a class component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;239&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible return types of render method?&lt;/h3&gt; &lt;p&gt;Below are the list of following types used and return from render method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;React elements:&lt;/strong&gt; Elements that instruct React to render a DOM node. It includes html elements such as &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; and user defined elements.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Arrays and fragments:&lt;/strong&gt; Return multiple elements to render as Arrays and Fragments to wrap multiple elements&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Portals:&lt;/strong&gt; Render children into a different DOM subtree.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;String and numbers:&lt;/strong&gt; Render both Strings and Numbers as text nodes in the DOM&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Booleans or null:&lt;/strong&gt; Doesn&#39;t render anything but these types are used to conditionally render content.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;240&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main purpose of constructor?&lt;/h3&gt; &lt;p&gt;The constructor is mainly used for two purposes,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;To initialize local state by assigning object to this.state&lt;/li&gt; 
   &lt;li&gt;For binding event handler methods to the instance For example, the below code covers both the above cases,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;constructor(props) {
  super(props);
  // Don&#39;t call this.setState() here!
  this.state = { counter: 0 };
  this.handleClick = this.handleClick.bind(this);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;241&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it mandatory to define constructor for React component?&lt;/h3&gt; No, it is not mandatory. i.e, If you don‚Äôt initialize state and you don‚Äôt bind methods, you don‚Äôt need to implement a constructor for your React component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;242&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are default props?&lt;/h3&gt; &lt;p&gt;The defaultProps are defined as a property on the component class to set the default props for the class. This is used for undefined props, but not for null props.&lt;/p&gt; &lt;p&gt;For example, let us create color default prop for the button component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyButton extends React.Component {
  // ...
}

MyButton.defaultProps = {
  color: &#39;red&#39;
};

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If props.color is not provided then it will set the default value to &#39;red&#39;. i.e, Whenever you try to access the color prop it uses default value&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
   return &amp;lt;MyButton /&amp;gt; ; // props.color will be set to red
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you provide null value then it remains null value.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;243&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should not call setState in componentWillUnmount?&lt;/h3&gt; You should not call &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillUnmount()&lt;/code&gt; because once a component instance is unmounted, it will never be mounted again.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;244&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of getDerivedStateFromError?&lt;/h3&gt; &lt;p&gt;This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.&lt;/p&gt; &lt;p&gt;The signature of the lifecycle method is as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;static getDerivedStateFromError(error)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let us take error boundary use case with the above lifecycle method for demonstration purpose,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;Something went wrong.&amp;lt;/h1&amp;gt;;
    }

    return this.props.children;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;245&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the methods order when component re-rendered?&lt;/h3&gt; &lt;p&gt;An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt; 
   &lt;li&gt;shouldComponentUpdate()&lt;/li&gt; 
   &lt;li&gt;render()&lt;/li&gt; 
   &lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt; 
   &lt;li&gt;componentDidUpdate()&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;246&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the methods invoked during error handling?&lt;/h3&gt; &lt;p&gt;Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;static getDerivedStateFromError()&lt;/li&gt; 
   &lt;li&gt;componentDidCatch()&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;247&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of displayName class property?&lt;/h3&gt; &lt;p&gt;The displayName string is used in debugging messages. Usually, you don‚Äôt need to set it explicitly because it‚Äôs inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.&lt;/p&gt; &lt;p&gt;For example, To ease debugging, choose a display name that communicates that it‚Äôs the result of a withSubscription HOC.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function withSubscription(WrappedComponent) {
  class WithSubscription extends React.Component {/* ... */}
  WithSubscription.displayName = `WithSubscription(${getDisplayName(WrappedComponent)})`;
  return WithSubscription;
}
function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || &#39;Component&#39;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;248&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the browser support for react applications?&lt;/h3&gt; React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use &lt;strong&gt;es5-shim and es5-sham&lt;/strong&gt; polyfill then it even support old browsers that doesn&#39;t support ES5 methods.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;249&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of unmountComponentAtNode method?&lt;/h3&gt; &lt;p&gt;This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.&lt;/p&gt; &lt;p&gt;The method signature would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactDOM.unmountComponentAtNode(container)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;250&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is code-splitting?&lt;/h3&gt; &lt;p&gt;Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.&lt;/p&gt; &lt;p&gt;For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the &#39;Load&#39; button. &lt;strong&gt;moduleA.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const moduleA = &#39;Hello&#39;;

export { moduleA };
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;;

class App extends Component {
  handleClick = () =&amp;gt; {
    import(&#39;./moduleA&#39;)
      .then(({ moduleA }) =&amp;gt; {
        // Use moduleA
      })
      .catch(err =&amp;gt; {
        // Handle failure
      });
  };

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;Load&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;251&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of strict mode?&lt;/h3&gt; &lt;p&gt;The 
   &lt;strictmode&gt;
     will be helpful in the below cases
   &lt;/strictmode&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Identifying components with &lt;strong&gt;unsafe lifecycle methods&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Warning about &lt;strong&gt;legacy string ref&lt;/strong&gt; API usage.&lt;/li&gt; 
   &lt;li&gt;Detecting unexpected &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Detecting &lt;strong&gt;legacy context&lt;/strong&gt; API.&lt;/li&gt; 
   &lt;li&gt;Warning about deprecated findDOMNode usage&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;252&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Keyed Fragments?&lt;/h3&gt; &lt;p&gt;The Fragments declared with the explicit &amp;lt;React.Fragment&amp;gt; syntax may have keys. The general use case is mapping a collection to an array of fragments as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Glossary(props) {
  return (
    &amp;lt;dl&amp;gt;
      {props.items.map(item =&amp;gt; (
        // Without the `key`, React will fire a key warning
        &amp;lt;React.Fragment key={item.id}&amp;gt;
          &amp;lt;dt&amp;gt;{item.term}&amp;lt;/dt&amp;gt;
          &amp;lt;dd&amp;gt;{item.description}&amp;lt;/dd&amp;gt;
        &amp;lt;/React.Fragment&amp;gt;
      ))}
    &amp;lt;/dl&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;253&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Does React support all HTML attributes?&lt;/h3&gt; &lt;p&gt;As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.&lt;/p&gt; &lt;p&gt;Let us take few props with respect to standard HTML attributes,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div tabIndex=&quot;-1&quot; /&amp;gt;      // Just like node.tabIndex DOM API
&amp;lt;div className=&quot;Button&quot; /&amp;gt; // Just like node.className DOM API
&amp;lt;input readOnly={true} /&amp;gt;  // Just like node.readOnly DOM API
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;254&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the limitations with HOCs?&lt;/h3&gt; &lt;p&gt;Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don‚Äôt use HOCs inside the render method:&lt;/strong&gt; It is not recommended to apply a HOC to a component within the render method of a component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  // A new version of EnhancedComponent is created on every render
  // EnhancedComponent1 !== EnhancedComponent2
  const EnhancedComponent = enhance(MyComponent);
  // That causes the entire subtree to unmount/remount each time!
  return &amp;lt;EnhancedComponent /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code impact performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static methods must be copied over:&lt;/strong&gt; When you apply a HOC to a component the new component does not have any of the static methods of the original component&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Define a static method
WrappedComponent.staticMethod = function() {/*...*/}
// Now apply a HOC
const EnhancedComponent = enhance(WrappedComponent);

// The enhanced component has no static method
typeof EnhancedComponent.staticMethod === &#39;undefined&#39; // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can overcome this by copying the methods onto the container before returning it,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function enhance(WrappedComponent) {
  class Enhance extends React.Component {/*...*/}
  // Must know exactly which method(s) to copy :(
  Enhance.staticMethod = WrappedComponent.staticMethod;
  return Enhance;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refs aren‚Äôt passed through:&lt;/strong&gt; For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;255&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to debug forwardRefs in DevTools?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React.forwardRef&lt;/strong&gt; accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.&lt;/p&gt; &lt;p&gt;For example, If you don&#39;t name the render function or not using displayName property then it will appear as ‚ÄùForwardRef‚Äù in the DevTools,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const WrappedComponent = React.forwardRef((props, ref) =&amp;gt; {
  return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But If you name the render function then it will appear as &lt;strong&gt;‚ÄùForwardRef(myFunction)‚Äù&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const WrappedComponent = React.forwardRef(
  function myFunction(props, ref) {
    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
  }
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As an alternative, You can also set displayName property for forwardRef function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function logProps(Component) {
  class LogProps extends React.Component {
    // ...
  }

  function forwardRef(props, ref) {
    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
  }

  // Give this component a more helpful display name in DevTools.
  // e.g. &quot;ForwardRef(logProps(MyComponent))&quot;
  const name = Component.displayName || Component.name;
  forwardRef.displayName = `logProps(${name})`;

  return React.forwardRef(forwardRef);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;256&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;When component props defaults to true?&lt;/h3&gt; &lt;p&gt;If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.&lt;/p&gt; &lt;p&gt;For example, below expressions are equivalent,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;MyInput autocomplete /&amp;gt;

&amp;lt;MyInput autocomplete={true} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, &lt;code&gt;{name}&lt;/code&gt; which is short for &lt;code&gt;{name: name}&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;257&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is NextJS and major features of it?&lt;/h3&gt; &lt;p&gt;Next.js is a popular and lightweight framework for static and server‚Äërendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Server-rendered by default&lt;/li&gt; 
   &lt;li&gt;Automatic code splitting for faster page loads&lt;/li&gt; 
   &lt;li&gt;Simple client-side routing (page based)&lt;/li&gt; 
   &lt;li&gt;Webpack-based dev environment which supports (HMR)&lt;/li&gt; 
   &lt;li&gt;Able to implement with Express or any other Node.js HTTP server&lt;/li&gt; 
   &lt;li&gt;Customizable with your own Babel and Webpack configurations&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;258&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you pass an event handler to a component?&lt;/h3&gt; &lt;p&gt;You can pass event handlers and other functions as props to child components. It can be used in child component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;259&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it good to use arrow functions in render methods?&lt;/h3&gt; &lt;p&gt;Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Foo extends Component {
  handleClick() {
    console.log(&#39;Click happened&#39;);
  }
  render() {
    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using an arrow function in render method creates a new function each time the component renders, which may have performance implications&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;260&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent a function from being called multiple times?&lt;/h3&gt; &lt;p&gt;If you use an event handler such as &lt;strong&gt;onClick or onScroll&lt;/strong&gt; and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Throttling:&lt;/strong&gt; Changes based on a time based frequency. For example, it can be used using _.throttle lodash function&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Debouncing:&lt;/strong&gt; Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;RequestAnimationFrame throttling:&lt;/strong&gt; Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;261&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How JSX prevents Injection Attacks?&lt;/h3&gt; &lt;p&gt;React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that‚Äôs not explicitly written in your application. Everything is converted to a string before being rendered.&lt;/p&gt; &lt;p&gt;For example, you can embed user input as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const name = response.potentiallyMaliciousInput;
const element = &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way you can prevent XSS(Cross-site-scripting) attacks in the application.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;262&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you update rendered elements?&lt;/h3&gt; &lt;p&gt;You can update UI(represented by rendered element) by passing the newly created element to ReactDOM&#39;s render method.&lt;/p&gt; &lt;p&gt;For example, lets take a ticking clock example, where it updates the time by calling render method multiple times,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function tick() {
  const element = (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;It is {new Date().toLocaleTimeString()}.&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  );
  ReactDOM.render(element, document.getElementById(&#39;root&#39;));
}

setInterval(tick, 1000);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;263&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you say that props are read only?&lt;/h3&gt; &lt;p&gt;When you declare a component as a function or a class, it must never modify its own props.&lt;/p&gt; &lt;p&gt;Let us take a below capital function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function capital(amount, interest) {
   return amount + interest;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above function is called ‚Äúpure‚Äù because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying &quot;All React components must act like pure functions with respect to their props.&quot;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;264&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you say that state updates are merged?&lt;/h3&gt; &lt;p&gt;When you call setState() in the component, React merges the object you provide into the current state.&lt;/p&gt; &lt;p&gt;For example, let us take a facebook user with posts and comments details as state variables,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  constructor(props) {
    super(props);
    this.state = {
      posts: [],
      comments: []
    };
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can update them independently with separate &lt;code&gt;setState()&lt;/code&gt; calls as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; componentDidMount() {
    fetchPosts().then(response =&amp;gt; {
      this.setState({
        posts: response.posts
      });
    });

    fetchComments().then(response =&amp;gt; {
      this.setState({
        comments: response.comments
      });
    });
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code snippets, &lt;code&gt;this.setState({comments})&lt;/code&gt; updates only comments variable without modifying or replacing posts variable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;265&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you pass arguments to an event handler?&lt;/h3&gt; &lt;p&gt;During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.&lt;/p&gt; &lt;p&gt;Let us take an example of user details updated in a grid,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;button onClick={(e) =&amp;gt; this.updateUser(userId, e)}&amp;gt;Update User details&amp;lt;/button&amp;gt;
&amp;lt;button onClick={this.updateUser.bind(this, userId)}&amp;gt;Update User details&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In both the approaches, the synthetic argument e is passed as a second argument. You need to pass it explicitly for arrow functions and it forwarded automatically for bind method.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;266&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent component from rendering?&lt;/h3&gt; &lt;p&gt;You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Greeting(props) {
  if (!props.loggedIn) {
    return null;
  }

  return (
    &amp;lt;div className=&quot;greeting&quot;&amp;gt;
      welcome, {props.name}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class User extends React.Component {
  constructor(props) {
    super(props);
    this.state = {loggedIn: false, name: &#39;John&#39;};
  }

  render() {
   return (
       &amp;lt;div&amp;gt;
         //Prevent component render if it is not loggedIn
         &amp;lt;Greeting loggedIn={this.state.loggedIn} /&amp;gt;
         &amp;lt;UserDetails name={this.state.name}&amp;gt;
       &amp;lt;/div&amp;gt;
   );
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, the greeting component skips its rendering section by applying condition and returning null value.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;267&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the conditions to safely use the index as a key?&lt;/h3&gt; &lt;p&gt;There are three conditions to make sure, it is safe use the index as a key.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The list and items are static‚Äì they are not computed and do not change&lt;/li&gt; 
   &lt;li&gt;The items in the list have no ids&lt;/li&gt; 
   &lt;li&gt;The list is never reordered or filtered.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;268&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it keys should be globally unique?&lt;/h3&gt; &lt;p&gt;Keys used within arrays should be unique among their siblings but they don‚Äôt need to be globally unique. i.e, You can use the same keys with two different arrays.&lt;/p&gt; &lt;p&gt;For example, the below book component uses two arrays with different arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Book(props) {
  const index = (
    &amp;lt;ul&amp;gt;
      {props.pages.map((page) =&amp;gt;
        &amp;lt;li key={page.id}&amp;gt;
          {page.title}
        &amp;lt;/li&amp;gt;
      )}
    &amp;lt;/ul&amp;gt;
  );
  const content = props.pages.map((page) =&amp;gt;
    &amp;lt;div key={page.id}&amp;gt;
      &amp;lt;h3&amp;gt;{page.title}&amp;lt;/h3&amp;gt;
      &amp;lt;p&amp;gt;{page.content}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{page.pageNumber}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
  return (
    &amp;lt;div&amp;gt;
      {index}
      &amp;lt;hr /&amp;gt;
      {content}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;269&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the popular choice for form handling?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Formik&lt;/code&gt; is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.&lt;/p&gt; &lt;p&gt;In detail, You can categorize them as follows,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; 
   &lt;li&gt;Validation and error messages&lt;/li&gt; 
   &lt;li&gt;Handling form submission&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;It is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;270&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of formik over redux form library?&lt;/h3&gt; &lt;p&gt;Below are the main reasons to recommend formik over redux form library,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The form state is inherently short-term and local, so tracking it in Redux (or any kind of Flux library) is unnecessary.&lt;/li&gt; 
   &lt;li&gt;Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY SINGLE KEYSTROKE. This way it increases input latency for large apps.&lt;/li&gt; 
   &lt;li&gt;Redux-Form is 22.5 kB minified gzipped whereas Formik is 12.7 kB&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;271&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you not required to use inheritance?&lt;/h3&gt; In React, it is recommend using composition instead of inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component‚Äôs look and behavior in an explicit and safe way. Whereas, If you want to reuse non-UI functionality between components, it is suggested to extracting it into a separate JavaScript module. Later components import it and use that function, object, or a class, without extending it.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;272&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use web components in react application?&lt;/h3&gt; &lt;p&gt;Yes, you can use web components in a react application. Even though many developers won&#39;t use this combination, it may require especially if you are using third-party UI components that are written using Web Components.&lt;/p&gt; &lt;p&gt;For example, let us use &lt;code&gt;Vaadin&lt;/code&gt; date picker web component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;;
import &#39;./App.css&#39;;
import &#39;@vaadin/vaadin-date-picker&#39;;
class App extends Component {
  render() {
    return (
      &amp;lt;div className=&quot;App&quot;&amp;gt;
        &amp;lt;vaadin-date-picker label=&quot;When were you born?&quot;&amp;gt;&amp;lt;/vaadin-date-picker&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;273&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is dynamic import?&lt;/h3&gt; &lt;p&gt;The dynamic import() syntax is a ECMAScript proposal not currently part of the language standard. It is expected to be accepted in the near future. You can achieve code-splitting into your app using dynamic import.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of addition,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Normal Import&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { add } from &#39;./math&#39;;
console.log(add(10, 20));
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start=&quot;2&quot;&gt; 
   &lt;li&gt;&lt;strong&gt;Dynamic Import&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import(&quot;./math&quot;).then(math =&amp;gt; {
  console.log(math.add(10, 20));
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;274&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are loadable components?&lt;/h3&gt; &lt;p&gt;If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.&lt;/p&gt; &lt;p&gt;Lets take an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import loadable from &#39;@loadable/component&#39;

const OtherComponent = loadable(() =&amp;gt; import(&#39;./OtherComponent&#39;))

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;OtherComponent /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now OtherComponent will be loaded in a separated bundle&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;275&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is suspense component?&lt;/h3&gt; &lt;p&gt;If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you‚Äôre waiting for it to load using a loading indicator. This can be done using &lt;strong&gt;Suspense&lt;/strong&gt; component.&lt;/p&gt; &lt;p&gt;For example, the below code uses suspense component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;
        &amp;lt;OtherComponent /&amp;gt;
      &amp;lt;/Suspense&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code, Suspense is wrapped above the lazy component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;276&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is route based code splitting?&lt;/h3&gt; &lt;p&gt;One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won&#39;t be disturbed.&lt;/p&gt; &lt;p&gt;Let us take an example of route based website using libraries like React Router with React.lazy,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { BrowserRouter as Router, Route, Switch } from &#39;react-router-dom&#39;;
import React, { Suspense, lazy } from &#39;react&#39;;

const Home = lazy(() =&amp;gt; import(&#39;./routes/Home&#39;));
const About = lazy(() =&amp;gt; import(&#39;./routes/About&#39;));

const App = () =&amp;gt; (
  &amp;lt;Router&amp;gt;
    &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route exact path=&quot;/&quot; component={Home}/&amp;gt;
        &amp;lt;Route path=&quot;/about&quot; component={About}/&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/Suspense&amp;gt;
  &amp;lt;/Router&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, the code splitting will happen at each route level.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;277&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example on How to use context?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt; is designed to share data that can be considered &lt;strong&gt;global&lt;/strong&gt; for a tree of React components.&lt;/p&gt; &lt;p&gt;For example, in the code below lets manually thread through a ‚Äútheme‚Äù prop in order to style the Button component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Lets create a context with a default theme value &quot;luna&quot;
const ThemeContext = React.createContext(&#39;luna&#39;);
// Create App component where it uses provider to pass theme value in the tree
class App extends React.Component {
  render() {
    return (
      &amp;lt;ThemeContext.Provider value=&quot;nova&quot;&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/ThemeContext.Provider&amp;gt;
    );
  }
}
// A middle component where you don&#39;t need to pass theme prop anymore
function Toolbar(props) {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;ThemedButton /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
// Lets read theme value in the button component to use
class ThemedButton extends React.Component {
  static contextType = ThemeContext;
  render() {
    return &amp;lt;Button theme={this.context} /&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;278&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of default value in context?&lt;/h3&gt; &lt;p&gt;The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.&lt;/p&gt; &lt;p&gt;Below code snippet provides default theme value as Luna.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const MyContext = React.createContext(defaultValue);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;279&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you use contextType?&lt;/h3&gt; &lt;p&gt;ContextType is used to consume the context object. The contextType property can be used in two ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;contextType as property of class:&lt;/strong&gt; The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function.&lt;/p&gt; &lt;p&gt;Lets assign contextType property on MyClass as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyClass extends React.Component {
  componentDidMount() {
    let value = this.context;
    /* perform a side-effect at mount using the value of MyContext */
  }
  componentDidUpdate() {
    let value = this.context;
    /* ... */
  }
  componentWillUnmount() {
    let value = this.context;
    /* ... */
  }
  render() {
    let value = this.context;
    /* render something based on the value of MyContext */
  }
}
MyClass.contextType = MyContext;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static field&lt;/strong&gt; You can use a static class field to initialize your contextType using public class field syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyClass extends React.Component {
  static contextType = MyContext;
  render() {
    let value = this.context;
    /* render something based on the value */
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;280&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is a consumer?&lt;/h3&gt; &lt;p&gt;A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.&lt;/p&gt; &lt;p&gt;Lets take a simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;MyContext.Consumer&amp;gt;
  {value =&amp;gt; /* render something based on the context value */}
&amp;lt;/MyContext.Consumer&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;281&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you solve performance corner cases while using context?&lt;/h3&gt; &lt;p&gt;The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider‚Äôs parent re-renders.&lt;/p&gt; &lt;p&gt;For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends React.Component {
  render() {
    return (
      &amp;lt;Provider value={{something: &#39;something&#39;}}&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can be solved by lifting up the value to parent state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: {something: &#39;something&#39;},
    };
  }

  render() {
    return (
      &amp;lt;Provider value={this.state.value}&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;282&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of forward ref in HOCs?&lt;/h3&gt; &lt;p&gt;Refs will not get passed through because ref is not a prop. It handled differently by React just like &lt;strong&gt;key&lt;/strong&gt;. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.&lt;/p&gt; &lt;p&gt;The below HOC logs all props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    function logProps(Component) {
      class LogProps extends React.Component {
        componentDidUpdate(prevProps) {
          console.log(&#39;old props:&#39;, prevProps);
          console.log(&#39;new props:&#39;, this.props);
        }

        render() {
          const {forwardedRef, ...rest} = this.props;

          // Assign the custom prop &quot;forwardedRef&quot; as a ref
          return &amp;lt;Component ref={forwardedRef} {...rest} /&amp;gt;;
        }
      }

      return React.forwardRef((props, ref) =&amp;gt; {
        return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
      });
    }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s use this HOC to log all props that get passed to our ‚Äúfancy button‚Äù component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    class FancyButton extends React.Component {
      focus() {
        // ...
      }

      // ...
    }
    export default logProps(FancyButton);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now lets create a ref and pass it to FancyButton component. In this case, you can set focus to button element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    import FancyButton from &#39;./FancyButton&#39;;

    const ref = React.createRef();
    ref.current.focus();
    &amp;lt;FancyButton
      label=&quot;Click Me&quot;
      handleClick={handleClick}
      ref={ref}
    /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;283&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it ref argument available for all functions or class components?&lt;/h3&gt; Regular function or class components don‚Äôt receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;284&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need additional care for component libraries while using forward refs?&lt;/h3&gt; When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;285&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create react class components without ES6?&lt;/h3&gt; &lt;p&gt;If you don‚Äôt use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var Greeting = createReactClass({
  getDefaultProps: function() {
      return {
        name: &#39;Jhohn&#39;
      };
    },
  getInitialState: function() {
      return {message: this.props.message};
    },
  handleClick: function() {
     console.log(this.state.message);
  },
  render: function() {
    return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;;
  }
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use createReactClass then auto binding is available for all methods. i.e, You don&#39;t need to use &lt;code&gt;.bind(this)&lt;/code&gt; with in constructor for event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;286&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use react without JSX?&lt;/h3&gt; &lt;p&gt;Yes, JSX is not mandatory for using React. Actually it is convenient when you don‚Äôt want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take a greeting example with JSX,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Greeting extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;Hello {this.props.message}&amp;lt;/div&amp;gt;;
  }
}

ReactDOM.render(
  &amp;lt;Greeting message=&quot;World&quot; /&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the same code without JSX as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Greeting extends React.Component {
  render() {
    return React.createElement(&#39;div&#39;, null, `Hello ${this.props.message}`);
  }
}

ReactDOM.render(
  React.createElement(Greeting, {message: &#39;World&#39;}, null),
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;287&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is diffing algorithm?&lt;/h3&gt; &lt;p&gt;React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.&lt;/p&gt; &lt;p&gt;In this case, for displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Two elements of different types will produce different trees.&lt;/li&gt; 
   &lt;li&gt;The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;288&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the rules covered by diffing algorithm?&lt;/h3&gt; &lt;p&gt;When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Elements Of Different Types:&lt;/strong&gt; Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. For example, elements &lt;a&gt; to &lt;img&gt;, or from 
     &lt;article&gt;
       to 
      &lt;comment&gt;
        of different types lead a full rebuild.
      &lt;/comment&gt;
     &lt;/article&gt;&lt;/a&gt;&lt;/li&gt;
   &lt;a&gt; &lt;li&gt;&lt;strong&gt;DOM Elements Of The Same Type:&lt;/strong&gt; When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div className=&quot;show&quot; title=&quot;ReactJS&quot; /&amp;gt;

&amp;lt;div className=&quot;hide&quot; title=&quot;ReactJS&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Component Elements Of The Same Type:&lt;/strong&gt; When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Recursing On Children:&lt;/strong&gt; when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there‚Äôs a difference. For example, when adding an element at the end of the children, converting between these two trees works well. &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Handling keys:&lt;/strong&gt; React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient,&lt;/li&gt; &lt;/a&gt;
  &lt;/ol&gt;&lt;a&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li key=&quot;2015&quot;&amp;gt;Duke&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2016&quot;&amp;gt;Villanova&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li key=&quot;2014&quot;&amp;gt;Connecticut&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2015&quot;&amp;gt;Duke&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2016&quot;&amp;gt;Villanova&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&lt;/li&gt;
 &lt;a&gt; &lt;/a&gt;
&lt;/ol&gt;
&lt;a&gt; &lt;/a&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;289&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;When do you need to use refs?&lt;/h3&gt; &lt;p&gt;There are few use cases to go for refs,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Managing focus, text selection, or media playback.&lt;/li&gt; 
   &lt;li&gt;Triggering imperative animations.&lt;/li&gt; 
   &lt;li&gt;Integrating with third-party DOM libraries.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;290&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it prop must be named as render for render props?&lt;/h3&gt; &lt;p&gt;Even though the pattern named render props, you don‚Äôt have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a ‚Äúrender prop‚Äù. Lets take an example with the children prop for render props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;Mouse children={mouse =&amp;gt; (
  &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Actually children prop doesn‚Äôt need to be named in the list of ‚Äúattributes‚Äù in JSX element. Instead, you can keep it directly inside element,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;Mouse&amp;gt;
  {mouse =&amp;gt; (
    &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
  )}
&amp;lt;/Mouse&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While using this above technique(without any name), explicitly state that children should be a function in your propTypes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Mouse.propTypes = {
  children: PropTypes.func.isRequired
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;291&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems of using render props with pure components?&lt;/h3&gt; If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;292&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create HOC using render props?&lt;/h3&gt; &lt;p&gt;You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a 
   &lt;mouse&gt;
     component, you could easily create one using a regular 
    &lt;mouse&gt;
      with a render prop.
    &lt;/mouse&gt;
   &lt;/mouse&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function withMouse(Component) {
  return class extends React.Component {
    render() {
      return (
        &amp;lt;Mouse render={mouse =&amp;gt; (
          &amp;lt;Component {...this.props} mouse={mouse} /&amp;gt;
        )}/&amp;gt;
      );
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way render props gives the flexibility of using either pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;293&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is windowing technique?&lt;/h3&gt; Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;294&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print falsy values in JSX?&lt;/h3&gt; &lt;p&gt;The falsy values such as false, null, undefined, and true are valid children but they don&#39;t render anything. If you still want to display them then you need to convert it to string. Let&#39;s take an example on how to convert to a string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div&amp;gt;
  My JavaScript variable is {String(myVariable)}.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;295&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the typical use case of portals?&lt;/h3&gt; &lt;p&gt;React portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context(z-index,position,opacity etc styles) and you need to visually ‚Äúbreak out‚Äù of its container.&lt;/p&gt; &lt;p&gt;For example, dialogs, global message notifications, hovercards, and tooltips.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;296&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you set default value for uncontrolled component?&lt;/h3&gt; &lt;p&gt;In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a &lt;strong&gt;defaultValue&lt;/strong&gt; attribute instead of &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  return (
    &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
      &amp;lt;label&amp;gt;
        User Name:
        &amp;lt;input
          defaultValue=&quot;John&quot;
          type=&quot;text&quot;
          ref={this.input} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The same applies for &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;textArea&lt;/code&gt; inputs. But you need to use &lt;strong&gt;defaultChecked&lt;/strong&gt; for &lt;code&gt;checkbox&lt;/code&gt; and &lt;code&gt;radio&lt;/code&gt; inputs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;297&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is your favorite React stack?&lt;/h3&gt; Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel. You can clone the project &lt;a href=&quot;https://github.com/react-boilerplate/react-boilerplate&quot;&gt;https://github.com/react-boilerplate/react-boilerplate&lt;/a&gt; and start working on any new react project.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;298&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Real DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Real DOM and Virtual DOM,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Real DOM&lt;/th&gt; 
     &lt;th&gt;Virtual DOM&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Updates are slow&lt;/td&gt; 
     &lt;td&gt;Updates are fast&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;DOM manipulation is very expensive.&lt;/td&gt; 
     &lt;td&gt;DOM manipulation is very easy&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;You can update HTML directly.&lt;/td&gt; 
     &lt;td&gt;You Can‚Äôt directly update HTML&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It causes too much of memory wastage&lt;/td&gt; 
     &lt;td&gt;There is no memory wastage&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Creates a new DOM if element updates&lt;/td&gt; 
     &lt;td&gt;It updates the JSX if element update&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;299&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add Bootstrap to a react application?&lt;/h3&gt; &lt;p&gt;Bootstrap can be added to your React app in a three possible ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using the Bootstrap CDN: This is the easiest way to add bootstrap. Add both bootstrap CSS and JS resources in a head tag.&lt;/li&gt; 
   &lt;li&gt;Bootstrap as Dependency: If you are using a build tool or a module bundler such as Webpack, then this is the preferred option for adding Bootstrap to your React application &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install bootstrap
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;React Bootstrap Package: In this case, you can add Bootstrap to our React app is by using a package that has rebuilt Bootstrap components to work particularly as React components. Below packages are popular in this category, 
    &lt;ol&gt; 
     &lt;li&gt;react-bootstrap&lt;/li&gt; 
     &lt;li&gt;reactstrap&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;300&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you list down top websites or applications using react as front end framework?&lt;/h3&gt; &lt;p&gt;Below are the &lt;code&gt;top 10 websites&lt;/code&gt; using React as their front-end framework,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Facebook&lt;/li&gt; 
   &lt;li&gt;Uber&lt;/li&gt; 
   &lt;li&gt;Instagram&lt;/li&gt; 
   &lt;li&gt;WhatsApp&lt;/li&gt; 
   &lt;li&gt;Khan Academy&lt;/li&gt; 
   &lt;li&gt;Airbnb&lt;/li&gt; 
   &lt;li&gt;Dropbox&lt;/li&gt; 
   &lt;li&gt;Flipboard&lt;/li&gt; 
   &lt;li&gt;Netflix&lt;/li&gt; 
   &lt;li&gt;PayPal&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;301&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it recommended to use CSS In JS technique in React?&lt;/h3&gt; React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;302&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do I need to rewrite all my class components with hooks?&lt;/h3&gt; No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;303&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to fetch data with React Hooks?&lt;/h3&gt; &lt;p&gt;The effect hook called &lt;code&gt;useEffect&lt;/code&gt; is used to fetch the data with axios from the API and to set the data in the local state of the component with the state hook‚Äôs update function.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example in which it fetches list of react articles from the API&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { useState, useEffect } from &#39;react&#39;;
import axios from &#39;axios&#39;;

function App() {
  const [data, setData] = useState({ hits: [] });

  useEffect(() =&amp;gt; {
    (async () =&amp;gt; {
      const result = await axios(
        &#39;http://hn.algolia.com/api/v1/search?query=react&#39;,
      );

      setData(result.data);
    })()
  }, []);

  return (
    &amp;lt;ul&amp;gt;
      {data.hits.map(item =&amp;gt; (
        &amp;lt;li key={item.objectID}&amp;gt;
          &amp;lt;a href={item.url}&amp;gt;{item.title}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember we provided an empty array as second argument to the effect hook to avoid activating it on component updates but only for the mounting of the component. i.e, It fetches only for component mount.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;304&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is Hooks cover all use cases for classes?&lt;/h3&gt; Hooks doesn&#39;t cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon &lt;strong&gt;getSnapshotBeforeUpdate&lt;/strong&gt; and &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycles yet.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;305&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the stable release for hooks support?&lt;/h3&gt; &lt;p&gt;React includes a stable implementation of React Hooks in 16.8 release for below packages&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React DOM&lt;/li&gt; 
   &lt;li&gt;React DOM Server&lt;/li&gt; 
   &lt;li&gt;React Test Renderer&lt;/li&gt; 
   &lt;li&gt;React Shallow Renderer&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;306&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we use array destructuring (square brackets notation) in &lt;code&gt;useState&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;When we declare a state variable with &lt;code&gt;useState&lt;/code&gt;, it returns a pair ‚Äî an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.&lt;/p&gt; &lt;p&gt;For example, the array index access would look as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var userStateVariable = useState(&#39;userProfile&#39;); // Returns an array pair
 var user = userStateVariable[0]; // Access first item
 var setUser = userStateVariable[1]; // Access second item
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas with array destructuring the variables can be accessed as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const [user, setUser] = useState(&#39;userProfile&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the sources used for introducing hooks?&lt;/h3&gt; &lt;p&gt;Hooks got the ideas from several different sources. Below are some of them,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Previous experiments with functional APIs in the react-future repository&lt;/li&gt; 
   &lt;li&gt;Community experiments with render prop APIs such as Reactions Component&lt;/li&gt; 
   &lt;li&gt;State variables and state cells in DisplayScript.&lt;/li&gt; 
   &lt;li&gt;Subscriptions in Rx.&lt;/li&gt; 
   &lt;li&gt;Reducer components in ReasonReact.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;308&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access imperative API of web components?&lt;/h3&gt; Web Components often expose an imperative API to implement its functions. You will need to use a &lt;strong&gt;ref&lt;/strong&gt; to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a &lt;strong&gt;wrapper&lt;/strong&gt; for your Web Component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;309&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is formik?&lt;/h3&gt; &lt;p&gt;Formik is a small react form library that helps you with the three major problems,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; 
   &lt;li&gt;Validation and error messages&lt;/li&gt; 
   &lt;li&gt;Handling form submission&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;310&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/h3&gt; Some of the popular middleware choices for handling asynchronous calls in Redux eco system are &lt;code&gt;Redux Thunk, Redux Promise, Redux Saga&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;311&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do browsers understand JSX code?&lt;/h3&gt; No, browsers can&#39;t understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;312&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Describe about data flow in react?&lt;/h3&gt; React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;313&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is react scripts?&lt;/h3&gt; The &lt;code&gt;react-scripts&lt;/code&gt; package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The &lt;code&gt;react-scripts start&lt;/code&gt; command sets up the development environment and starts a server, as well as hot module reloading.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;314&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the features of create react app?&lt;/h3&gt; &lt;p&gt;Below are the list of some of the features provided by create react app.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React, JSX, ES6, Typescript and Flow syntax support.&lt;/li&gt; 
   &lt;li&gt;Autoprefixed CSS&lt;/li&gt; 
   &lt;li&gt;CSS Reset/Normalize&lt;/li&gt; 
   &lt;li&gt;A live development server&lt;/li&gt; 
   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting&lt;/li&gt; 
   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps&lt;/li&gt; 
   &lt;li&gt;An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;315&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of renderToNodeStream method?&lt;/h3&gt; The &lt;code&gt;ReactDOMServer#renderToNodeStream&lt;/code&gt; method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes. &lt;strong&gt;Note:&lt;/strong&gt; Remember this method is not available in the browser but only server.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;316&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is MobX?&lt;/h3&gt; MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For reactJs application, you need to install below packages, &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mobx --save
npm install mobx-react --save
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;317&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Redux and MobX?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Redux and MobX,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Topic&lt;/th&gt; 
     &lt;th&gt;Redux&lt;/th&gt; 
     &lt;th&gt;MobX&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Definition&lt;/td&gt; 
     &lt;td&gt;It is a javascript library for managing the application state&lt;/td&gt; 
     &lt;td&gt;It is a library for reactively managing the state of your applications&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Programming&lt;/td&gt; 
     &lt;td&gt;It is mainly written in ES6&lt;/td&gt; 
     &lt;td&gt;It is written in JavaScript(ES5)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Data Store&lt;/td&gt; 
     &lt;td&gt;There is only one large store exist for data storage&lt;/td&gt; 
     &lt;td&gt;There is more than one store for storage&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Usage&lt;/td&gt; 
     &lt;td&gt;Mainly used for large and complex applications&lt;/td&gt; 
     &lt;td&gt;Used for simple applications&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Performance&lt;/td&gt; 
     &lt;td&gt;Need to be improved&lt;/td&gt; 
     &lt;td&gt;Provides better performance&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;How it stores&lt;/td&gt; 
     &lt;td&gt;Uses JS Object to store&lt;/td&gt; 
     &lt;td&gt;Uses observable to store the data&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;318&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Should I learn ES6 before learning ReactJS?&lt;/h3&gt; &lt;p&gt;No, you don‚Äôt have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let&#39;s see some of the frequently used ES6 features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Destructuring:&lt;/strong&gt; To get props and use them in a component &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// in es 5
 var someData = this.props.someData
 var dispatch = this.props.dispatch

// in es6
const { someData, dispatch } = this.props
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Spread operator: Helps in passing props down into a component &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// in es 5
&amp;lt;SomeComponent someData={this.props.someData} dispatch={this.props.dispatch} /&amp;gt;

// in es6
&amp;lt;SomeComponent {...this.props} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Arrow functions: Makes compact syntax &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// es 5
var users = usersList.map(function (user) {
 return &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;
})
// es 6
const users = usersList.map(user =&amp;gt; &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;319&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Concurrent Rendering?&lt;/h3&gt; &lt;p&gt;The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there&#39;s something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// 1. Part of an app by wrapping with ConcurrentMode
&amp;lt;React.unstable_ConcurrentMode&amp;gt;
  &amp;lt;Something /&amp;gt;
&amp;lt;/React.unstable_ConcurrentMode&amp;gt;

// 2. Whole app using createRoot
ReactDOM.unstable_createRoot(domNode).render(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;320&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between async mode and concurrent mode?&lt;/h3&gt; Both refers the same thing. Previously concurrent Mode being referred to as &quot;Async Mode&quot; by React team. The name has been changed to highlight React‚Äôs ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;321&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use javascript urls in react16.9?&lt;/h3&gt; &lt;p&gt;Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; and create a security hole.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const companyProfile = {
  website: &quot;javascript: alert(&#39;Your website is hacked&#39;)&quot;,
};
// It will log a warning
&amp;lt;a href={companyProfile.website}&amp;gt;More details&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember that the future versions will throw an error for javascript URLs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;322&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of eslint plugin for hooks?&lt;/h3&gt; &lt;p&gt;The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with ‚Äùuse‚Äù and a capital letter right after it is a Hook. In particular, the rule enforces that,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Calls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook).&lt;/li&gt; 
   &lt;li&gt;Hooks are called in the same order on every render.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;323&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Imperative and Declarative in React?&lt;/h3&gt; &lt;p&gt;Imagine a simple UI component, such as a &quot;Like&quot; button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.&lt;/p&gt; &lt;p&gt;The imperative way of doing this would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if( user.likes() ) {
    if( hasBlue() ) {
        removeBlue();
        addGrey();
    } else {
        removeGrey();
        addBlue();
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.&lt;/p&gt; &lt;p&gt;In contrast, the declarative approach would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if( this.state.liked ) {
    return &amp;lt;blueLike /&amp;gt;;
} else {
    return &amp;lt;greyLike /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a sepecific state, and is therefore much simpler to understand.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;324&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of using typescript with reactjs?&lt;/h3&gt; &lt;p&gt;Below are some of the benefits of using typescript with Reactjs,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is possible to use latest JavaScript features&lt;/li&gt; 
   &lt;li&gt;Use of interfaces for complex type definitions&lt;/li&gt; 
   &lt;li&gt;IDEs such as VS Code was made for TypeScript&lt;/li&gt; 
   &lt;li&gt;Avoid bugs with the ease of readability and Validation&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {loadUser}  from &#39;../actions/auth&#39;;
store.dispatch(loadUser());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;But while using &lt;strong&gt;Context API&lt;/strong&gt;, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as &lt;strong&gt;loadUser&lt;/strong&gt; action will be triggered on each re-render.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;
import AuthState from &#39;./context/auth/AuthState&#39;

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;AuthState&amp;gt;
      &amp;lt;App /&amp;gt;
    &amp;lt;/AuthState&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  const authContext = useContext(AuthContext);

  const { loadUser } = authContext;

  useEffect(() =&amp;gt; {
    loadUser();
  },[])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;loadUser&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;    const loadUser = async () =&amp;gt; {
        const token = sessionStorage.getItem(&#39;token&#39;);

        if(!token){
            dispatch({
                type: ERROR
            })
        }
        setAuthToken(token);

        try {
            const res = await axios(&#39;/api/auth&#39;); 

            dispatch({
                type: USER_LOADED,
                payload: res.data.data
            })
            
        } catch (err) {
           console.error(err); 
        }
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;‚¨Ü Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;326&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of new JSX transform?&lt;/h3&gt; &lt;p&gt;There are three major benefits of new JSX transform,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is possible to use JSX without importing React packages&lt;/li&gt; 
   &lt;li&gt;The compiled output might improve the bundle size in a small amount&lt;/li&gt; 
   &lt;li&gt;The future improvements provides the flexibility to reduce the number of concepts to learn React.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How does new JSX transform different from old transform?&lt;/h3&gt; &lt;p&gt;The new JSX transform doesn‚Äôt require React to be in scope. i.e, You don&#39;t need to import React package for simple scenarios.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example to look at the main differences between the old and the new transform,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Old Transform:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;

function App() {
  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now JSX transform convert the above code into regular JavaScript as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;

function App() {
  return React.createElement(&#39;h1&#39;, null, &#39;Good morning!!&#39;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;New Transform:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The new JSX transform doesn&#39;t require any React imports&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function App() {
  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Under the hood JSX transform compiles to below code&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {jsx as _jsx} from &#39;react/jsx-runtime&#39;;

function App() {
  return _jsx(&#39;h1&#39;, { children: &#39;Good morning!!&#39; });
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You still need to import React to use Hooks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get redux scaffolding using create-react-app?&lt;/h3&gt; &lt;p&gt;Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Redux Toolkit and React-Redux dependencies&lt;/li&gt; 
   &lt;li&gt;Create and configure Redux store&lt;/li&gt; 
   &lt;li&gt;React-Redux &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; passing the store to React components&lt;/li&gt; 
   &lt;li&gt;Small &quot;counter&quot; example to demo how to add redux logic and React-Redux hooks API to interact with the store from components&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The below commands need to be executed along with template option as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Javascript template:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npx create-react-app my-app --template redux
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start=&quot;2&quot;&gt; 
   &lt;li&gt;&lt;strong&gt;Typescript template:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npx create-react-app my-app --template redux-typescript
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are React Server components?&lt;/h3&gt; &lt;p&gt;React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; React Server Components is still under development and not recommended for production yet.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is prop drilling?&lt;/h3&gt; &lt;p&gt;Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to prevent state mutation?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>cruip/tailwind-dashboard-template</title>
      <link>https://github.com/cruip/tailwind-dashboard-template</link>
      <description>&lt;p&gt;Mosaic Lite is a free admin dashboard template built on top of Tailwind CSS and fully coded in React. Made by&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Free Tailwind dashboard template&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2683512/115404502-ad322d80-a1ed-11eb-91c0-1aa79b0949f0.png&quot; alt=&quot;Mosaic TailwindCSS template preview&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Mosaic Lite&lt;/strong&gt; is a responsive dashboard template built on top of TailwindCSS and fully coded in React. It comes with several pre-coded charts (built with Chart.js 3) and widgets, and it&#39;s a great starting for anyone who wants to create a user interface for SaaS products, administrator dashboards, modern web apps, and more.&lt;/p&gt; 
&lt;p&gt;Use it for whatever you want, and be sure to reach us out on &lt;a href=&quot;https://twitter.com/Cruip_com&quot;&gt;Twitter&lt;/a&gt; if you build anything cool/useful with it.&lt;/p&gt; 
&lt;p&gt;Created and maintained with ‚ù§Ô∏è by &lt;a href=&quot;https://cruip.com/&quot;&gt;Cruip.com&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Live demo&lt;/h2&gt; 
&lt;p&gt;Check the live demo here üëâÔ∏è &lt;a href=&quot;https://mosaic.cruip.com/&quot;&gt;https://mosaic.cruip.com/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Mosaic PRO&lt;/h2&gt; 
&lt;p&gt;Looking for more pages and components? Have a look at the &lt;strong&gt;premium version&lt;/strong&gt; here üëâÔ∏è &lt;a href=&quot;https://cruip.com/demos/mosaic/&quot;&gt;https://cruip.com/demos/mosaic/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#usage&quot;&gt;Usage&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#available-scripts&quot;&gt;Available Scripts&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#npm-start&quot;&gt;npm start&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#npm-test&quot;&gt;npm test&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#npm-run-build&quot;&gt;npm run build&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#npm-run-eject&quot;&gt;npm run eject&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#learn-more&quot;&gt;Learn More&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#code-splitting&quot;&gt;Code Splitting&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#analyzing-the-bundle-size&quot;&gt;Analyzing the Bundle Size&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#making-a-progressive-web-app&quot;&gt;Making a Progressive Web App&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#advanced-configuration&quot;&gt;Advanced Configuration&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#deployment&quot;&gt;Deployment&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#npm-run-build-fails-to-minify&quot;&gt;npm run build fails to minify&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#credits&quot;&gt;Credits&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#terms-and-license&quot;&gt;Terms and License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#about-us&quot;&gt;About Us&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/cruip/tailwind-dashboard-template/main/#stay-in-the-loop&quot;&gt;Stay in the loop&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;This project was bootstrapped with &lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;Create React App&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Available Scripts&lt;/h3&gt; 
&lt;p&gt;In the project directory, you can run:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;To install the dependencies package.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Runs the app in the development mode.&lt;br&gt; Open &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt; 
&lt;p&gt;The page will reload if you make edits.&lt;br&gt; You will also see any lint errors in the console.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;npm test&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Launches the test runner in the interactive watch mode.&lt;br&gt; See the section about &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/running-tests&quot;&gt;running tests&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt; It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt; 
&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt; Your app is ready to be deployed!&lt;/p&gt; 
&lt;p&gt;See the section about &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/deployment&quot;&gt;deployment&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;npm run eject&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;Note: this is a one-way operation. Once you &lt;code&gt;eject&lt;/code&gt;, you can‚Äôt go back!&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you aren‚Äôt satisfied with the build tool and configuration choices, you can &lt;code&gt;eject&lt;/code&gt; at any time. This command will remove the single build dependency from your project.&lt;/p&gt; 
&lt;p&gt;Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except &lt;code&gt;eject&lt;/code&gt; will still work, but they will point to the copied scripts so you can tweak them. At this point you‚Äôre on your own.&lt;/p&gt; 
&lt;p&gt;You don‚Äôt have to ever use &lt;code&gt;eject&lt;/code&gt;. The curated feature set is suitable for small and middle deployments, and you shouldn‚Äôt feel obligated to use this feature. However we understand that this tool wouldn‚Äôt be useful if you couldn‚Äôt customize it when you are ready for it.&lt;/p&gt; 
&lt;h3&gt;Learn More&lt;/h3&gt; 
&lt;p&gt;You can learn more in the &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/getting-started&quot;&gt;Create React App documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To learn React, check out the &lt;a href=&quot;https://reactjs.org/&quot;&gt;React documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;Code Splitting&lt;/h4&gt; 
&lt;p&gt;This section has moved here: &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/code-splitting&quot;&gt;https://facebook.github.io/create-react-app/docs/code-splitting&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Analyzing the Bundle Size&lt;/h4&gt; 
&lt;p&gt;This section has moved here: &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size&quot;&gt;https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Making a Progressive Web App&lt;/h4&gt; 
&lt;p&gt;This section has moved here: &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app&quot;&gt;https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Advanced Configuration&lt;/h4&gt; 
&lt;p&gt;This section has moved here: &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/advanced-configuration&quot;&gt;https://facebook.github.io/create-react-app/docs/advanced-configuration&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;Deployment&lt;/h4&gt; 
&lt;p&gt;This section has moved here: &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/deployment&quot;&gt;https://facebook.github.io/create-react-app/docs/deployment&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;npm run build&lt;/code&gt; fails to minify&lt;/h4&gt; 
&lt;p&gt;This section has moved here: &lt;a href=&quot;https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify&quot;&gt;https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cruip/vuejs-admin-dashboard-template&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/2683512/142940194-6ef06dbc-6bc2-4129-a554-db77efbba8f2.png&quot; alt=&quot;Vue version of Mosaic&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Credits&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nucleoapp.com/&quot;&gt;Nucleo&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Terms and License&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Released under the &lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.html&quot;&gt;GPL&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Copyright 2020 &lt;a href=&quot;https://cruip.com/&quot;&gt;Cruip&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Use it for personal and commercial projects, but please don‚Äôt republish, redistribute, or resell the template.&lt;/li&gt; 
 &lt;li&gt;Attribution is not required, although it is really appreciated.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About Us&lt;/h2&gt; 
&lt;p&gt;We&#39;re an Italian developer/designer duo creating high-quality design/code resources for developers, makers, and startups.&lt;/p&gt; 
&lt;h2&gt;Stay in the loop&lt;/h2&gt; 
&lt;p&gt;If you would like to know when we release new resources, you can follow us on &lt;a href=&quot;https://twitter.com/Cruip_com&quot;&gt;Twitter&lt;/a&gt;, or you can subscribe to our monthly &lt;a href=&quot;https://cruip.com/#subscribe&quot;&gt;newsletter&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
