<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Sun, 05 Dec 2021 01:58:55 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>thunlp/WantWords</title>
      <link>https://github.com/thunlp/WantWords</link>
      <description>&lt;p&gt;An open-source online reverse dictionary.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;a href=&quot;https://raw.githubusercontent.com/thunlp/WantWords/main/README_ZH.md&quot;&gt;ä¸­&lt;/a&gt;|En&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://wantwords.thunlp.org/&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/wantwords_logo.svg?sanitize=true&quot; width=&quot;300&quot; alt=&quot;WantWords Logo&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt;An open-source online reverse dictionary &lt;/h3&gt; 
&lt;h2&gt;What Is a Reverse Dictionary?&lt;/h2&gt; 
&lt;p&gt;Opposite to a regular (forward) dictionary that provides definitions for query words, a reverse dictionary returns words semantically matching the query descriptions.&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/rd_example.png&quot; alt=&quot;rd_example&quot; width=&quot;600&quot;&gt; 
&lt;/div&gt; 
&lt;h2&gt;What Can a Reverse Dictionary Do?&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Solve the &lt;em&gt;tip-of-the-tongue problem&lt;/em&gt;, the phenomenon of failing to retrieve a word from memory&lt;/li&gt; 
 &lt;li&gt;Help new language learners&lt;/li&gt; 
 &lt;li&gt;Help word selection (or word dictionary) anomia patients, people who can recognize and describe an object but fail to name it due to neurological disorder&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Our System&lt;/h2&gt; 
&lt;h3&gt;Workflow&lt;/h3&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/workflow.png&quot; alt=&quot;workflow&quot; width=&quot;500&quot;&gt; 
&lt;/div&gt; 
&lt;h3&gt;Core Model&lt;/h3&gt; 
&lt;p&gt;The core model of WantWords is based on our proposed &lt;strong&gt;Multi-channel Reverse Dictionary Model&lt;/strong&gt; [&lt;a href=&quot;https://ojs.aaai.org/index.php/AAAI/article/view/5365/5221&quot;&gt;paper&lt;/a&gt;] [&lt;a href=&quot;https://github.com/thunlp/MultiRD&quot;&gt;code&lt;/a&gt;], as illustrate in the following figure.&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/MRD_model.png&quot; alt=&quot;model&quot; width=&quot;500&quot;&gt; 
&lt;/div&gt; 
&lt;h3&gt;Key Requirements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Django==2.2.5&lt;/li&gt; 
 &lt;li&gt;django-cors-headers==3.5.0&lt;/li&gt; 
 &lt;li&gt;numpy==1.17.2&lt;/li&gt; 
 &lt;li&gt;pytorch-transformers==1.2.0&lt;/li&gt; 
 &lt;li&gt;requests==2.22.0&lt;/li&gt; 
 &lt;li&gt;scikit-learn==0.22.1&lt;/li&gt; 
 &lt;li&gt;scipy==1.4.1&lt;/li&gt; 
 &lt;li&gt;thulac==0.2.0&lt;/li&gt; 
 &lt;li&gt;torch==1.2.0&lt;/li&gt; 
 &lt;li&gt;urllib3==1.25.6&lt;/li&gt; 
 &lt;li&gt;uWSGI==2.0.18&lt;/li&gt; 
 &lt;li&gt;uwsgitop==0.11&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Cite&lt;/h2&gt; 
&lt;p&gt;If the code or data help you, please cite the following two papers.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;@inproceedings{qi2020wantwords,
  title={WantWords: An Open-source Online Reverse Dictionary System},
  author={Qi, Fanchao and Zhang, Lei and Yang, Yanhui and Liu, Zhiyuan and Sun, Maosong},
  booktitle={Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: System Demonstrations},
  pages={175--181},
  year={2020}
}

@inproceedings{zhang2020multi,
  title={Multi-channel reverse dictionary model},
  author={Zhang, Lei and Qi, Fanchao and Liu, Zhiyuan and Wang, Yasheng and Liu, Qun and Sun, Maosong},
  booktitle={Proceedings of the AAAI Conference on Artificial Intelligence},
  pages={312--319},
  year={2020}
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Bogdanp/awesome-advent-of-code</title>
      <link>https://github.com/Bogdanp/awesome-advent-of-code</link>
      <description>&lt;p&gt;A collection of awesome resources related to the yearly Advent of Code challenge.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome Advent of Code&lt;/h1&gt; 
&lt;p&gt;This is a collection of awesome resources related to the yearly &lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt; challenge.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://adventofcode.com/&quot;&gt;The Official AoC Website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/adventofcode/&quot;&gt;The AoC Subreddit&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#project-templates&quot;&gt;Project Templates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#tools-and-utilities&quot;&gt;Tools and Utilities&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#other-advent-calendars&quot;&gt;Other Advent Calendars&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/2018.md&quot;&gt;2018&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/2019.md&quot;&gt;2019&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/2020.md&quot;&gt;2020&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#2021&quot;&gt;2021&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#solutions&quot;&gt;Solutions&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#ada&quot;&gt;Ada&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#assembly&quot;&gt;Assembly&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#awk&quot;&gt;AWK&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#Bash&quot;&gt;Bash&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#c&quot;&gt;C&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#c-1&quot;&gt;C#&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#c-2&quot;&gt;C++&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#clojure&quot;&gt;Clojure&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#common-lisp&quot;&gt;Common Lisp&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#crystal&quot;&gt;Crystal&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#d&quot;&gt;D&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#dart&quot;&gt;Dart&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#elixir&quot;&gt;Elixir&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#elm&quot;&gt;Elm&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#erlang&quot;&gt;Erlang&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#excel&quot;&gt;Excel&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#f&quot;&gt;F#&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#go&quot;&gt;Go&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#groovy&quot;&gt;Groovy&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#hamler&quot;&gt;Hamler&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#haskell&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#haxe&quot;&gt;Haxe&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#idris&quot;&gt;Idris&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#J&quot;&gt;J&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#jq&quot;&gt;jq&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#julia&quot;&gt;Julia&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#kotlin&quot;&gt;Kotlin&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#ldpl&quot;&gt;LDPL&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#lua&quot;&gt;Lua&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#matlab&quot;&gt;MATLAB&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#nim&quot;&gt;Nim&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#objc&quot;&gt;Objective-C&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#ocaml&quot;&gt;OCaml&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#php&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#perl&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#pony&quot;&gt;Pony&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#powershell&quot;&gt;PowerShell&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#prolog&quot;&gt;Prolog&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#r&quot;&gt;R&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#racket&quot;&gt;Racket&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#raku&quot;&gt;Raku&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#reasonml&quot;&gt;ReasonML&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#red&quot;&gt;Red&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#rust&quot;&gt;Rust&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#smalltalk&quot;&gt;Smalltalk&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#scala&quot;&gt;Scala&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#scheme&quot;&gt;Scheme&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#solidity&quot;&gt;Solidity&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#spectx&quot;&gt;SpectX&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#sql&quot;&gt;SQL&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#swift&quot;&gt;Swift&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#typescript&quot;&gt;TypeScript&lt;/a&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#deno&quot;&gt;Deno&lt;/a&gt;&lt;/li&gt; 
      &lt;/ul&gt; &lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#unison&quot;&gt;Unison&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#vbnet&quot;&gt;VB.NET&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#whitespace&quot;&gt;Whitespace&lt;/a&gt;&lt;/li&gt; 
     &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#zig&quot;&gt;Zig&lt;/a&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/#live-streams&quot;&gt;Live Streams&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;hr&gt; 
&lt;h2&gt;Project Templates&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;Templates, cookiecutters and skeletons for quickly setting up projects in your favourite language.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ManasJayanth/reason-aoc-starter&quot;&gt;Reason Starter kit for Advent of Code&lt;/a&gt; &lt;em&gt;(Reason and OCaml)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dave-burke/advent-of-code-java-starter&quot;&gt;dave-burke/advent-of-code-java-starter&lt;/a&gt; &lt;em&gt;(Java)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gobanos/cargo-aoc&quot;&gt;gobanos/cargo-aoc&lt;/a&gt; &lt;em&gt;(Rust)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nickyvanurk/advent-of-code-rust-template&quot;&gt;nickyvanurk/advent-of-code-rust-template&lt;/a&gt; &lt;em&gt;(Rust)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hughjdavey/aoc-kotlin-starter&quot;&gt;hughjdavey/aoc-kotlin-starter&lt;/a&gt; &lt;em&gt;(Kotlin)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kindermoumoute/adventofcode/tree/master/template&quot;&gt;kindermoumoute/adventofcode&lt;/a&gt; &lt;em&gt;(Go)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/staylorwr/elixir_aoc&quot;&gt;staylorwr/elixir_aoc&lt;/a&gt; &lt;em&gt;(Elixir)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mhanberg/advent-of-code-elixir-starter&quot;&gt;mhanberg/advent-of-code-elixir-starter&lt;/a&gt; &lt;em&gt;(Elixir)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AlexeSimon/adventofcode&quot;&gt;AlexeSimon/adventofcode&lt;/a&gt; &lt;em&gt;(Python)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/UncleCJ/advent-of-code&quot;&gt;UncleCJ/advent-of-code&lt;/a&gt; &lt;em&gt;(Jupyter Python Notebooks)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sindrekjr/AdventOfCodeBase&quot;&gt;sindrekjr/AdventOfCodeBase&lt;/a&gt; &lt;em&gt;(C#)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mhanberg/advent-of-code-clojure-starter&quot;&gt;mhanberg/advent-of-code-clojure-starter&lt;/a&gt; &lt;em&gt;(Clojure)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/caderek/aoc-starter-js&quot;&gt;caderek/aoc-starter-js&lt;/a&gt; &lt;em&gt;(JavaScript)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/caderek/aoc-starter-ts&quot;&gt;caderek/aoc-starter-ts&lt;/a&gt; &lt;em&gt;(TypeScript)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mariotacke/template-advent-of-code&quot;&gt;mariotacke/template-advent-of-code&lt;/a&gt; &lt;em&gt;(JavaScript)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arkadye/advent_of_code_framework&quot;&gt;arkadye/advent_of_code&lt;/a&gt; &lt;em&gt;(C++)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eduherminio/AdventOfCode.Template&quot;&gt;eduherminio/AdventOfCode.Template&lt;/a&gt; &lt;em&gt;(C#)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/izexi/aoc-ts-template&quot;&gt;izexi/aoc-ts-template&lt;/a&gt; &lt;em&gt;(TypeScript)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ridaamirini/advent-of-code-template&quot;&gt;advent-of-code-template&lt;/a&gt; &lt;em&gt;(PHP)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/amorriscode/advent-of-code&quot;&gt;amorriscode/advent-of-code&lt;/a&gt; &lt;em&gt;(JavaScript)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nnari/aoc-typescript-starter&quot;&gt;nnari/aoc-typescript-starter&lt;/a&gt; &lt;em&gt;(TypeScript)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SpexGuy/Zig-AoC-Template&quot;&gt;SpexGuy/Zig-AoC-Template&lt;/a&gt; &lt;em&gt;(Zig)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pacso/aoc_rb&quot;&gt;pacso/aoc_rb&lt;/a&gt; &lt;em&gt;(Ruby)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ismtabo/advent-of-code-deno-template&quot;&gt;ismtabo/advent-of-code-deno-template&lt;/a&gt; &lt;em&gt;(TypeScript / Deno)&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Tools and Utilities&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://alfie.prodo.ai/&quot;&gt;Alfie&lt;/a&gt; -- Online JS editor that helps users solve AoC problems.&lt;/li&gt; 
 &lt;li&gt;Browser extension for private leaderboard visualization 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/advent-of-code-ranking/jbnlafikncgjjhdkmfhokcplgahebmjl&quot;&gt;Chrome extension&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/aoc-ranking/&quot;&gt;Firefox extension&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Browser extension which enhances your personal stats page with a time from Part 1 to Part 2 column (it also tracks when you&#39;ve first opened a puzzle and offsets the completion times accordingly) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/advent-of-code-part-2-timer/fhmjpoppaplfhgnknpbaaklgdnnimfbn&quot;&gt;Chrome extension&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/advent-of-code-part-2-timer/&quot;&gt;Firefox extension&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.maurits.vdschee.nl/scatterplot/medals.html&quot;&gt;Globals medals overview&lt;/a&gt; -- Alternative global leaderboard showing first, second and third places as gold, silver and bronze medals.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.maurits.vdschee.nl/scatterplot/&quot;&gt;Scatterplot of first 100&lt;/a&gt; -- Scatterplot of the time taken to solve the parts of each puzzle by the first 100 people that solved it.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/GreenLightning/advent-of-code-downloader&quot;&gt;aocdl&lt;/a&gt; -- Command-line utility that automatically downloads your personal input file while you read the puzzle description &lt;em&gt;(Go)&lt;/em&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dds/aoc2020/raw/main/cmd/aocinput/aocinput.go&quot;&gt;aocinput&lt;/a&gt; -- CLI for getting inputs. Clipboard support. Polite to AoC. Nice help and options. &lt;em&gt;(Go)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pacso/aoc_rb&quot;&gt;aoc_rb&lt;/a&gt; -- A Ruby gem that generates an empty AoC project, and provides command-line tools for fetching input and submitting solutions &lt;em&gt;(Ruby)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/keirua/aoc-cli&quot;&gt;aoc-cli&lt;/a&gt; -- Command-line utility that helps solve problems in ruby: it downloads your personal input file, creates the sample source files and benchmarks your solutions &lt;em&gt;(Ruby)&lt;/em&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eduherminio/AoCHelper&quot;&gt;AoCHelper&lt;/a&gt; -- NuGet library that simplifies puzzle solving and provides benchmarking &lt;em&gt;(.NET)&lt;/em&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scarvalhojr/aocleaderboard&quot;&gt;aocleaderboard&lt;/a&gt; -- get over the 200-member limit for private leaderboards and combine multiple leaderboards in a single page with recalculated scores.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/advent-of-code-api&quot;&gt;advent-of-code-api&lt;/a&gt; -- Haskell library for querying AOC prompts, inputs, and leaderboards &lt;em&gt;(Haskell)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-ocr#readme&quot;&gt;advent-of-code-ocr&lt;/a&gt; -- Command line utility and Haskell library for parsing AoC ascii art words &lt;em&gt;(Haskell)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bsoyka/advent-of-code-ocr&quot;&gt;advent-of-code-ocr&lt;/a&gt; -- Python module for parsing AoC ascii art words &lt;em&gt;(Python)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/freedomofkeima/aoc-ranking&quot;&gt;aoc-ranking&lt;/a&gt; -- Show all non-zero score AoC participants in one, global scoreboard. &lt;em&gt;(Python)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scarvalhojr/aoc-cli&quot;&gt;aoc-cli&lt;/a&gt; -- Read puzzle descriptions, download input, and submit answers from the comfort of your terminal. &lt;em&gt;(Rust)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/stackcats/adventofcode-badge&quot;&gt;adventofcode-badge&lt;/a&gt; -- An interface over Shields.io to facilitate the creation of badges from Advent of Code.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/aocjs/cli&quot;&gt;@aocjs/cli&lt;/a&gt; -- Package for executing solutions with hot reload and data fetching &lt;em&gt;(JavaScript, TypeScript)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/breakthatbass/eggnog&quot;&gt;eggnog&lt;/a&gt; -- CLI for getting input, directions (with nice colors!), and submitting answers. Caches absolutely everything. &lt;em&gt;(C)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/J0B10/aoc-badges-action&quot;&gt;aoc-badges-action&lt;/a&gt; -- A GitHub action for updating various aoc-related badges in your README &lt;em&gt;(GitHub Action, Python)&lt;/em&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/k2bd/advent-readme-stars&quot;&gt;advent-readme-stars&lt;/a&gt; -- A GitHub action that adds and maintains a table of your AoC progress to your README &lt;em&gt;(GitHub Action, Python)&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Other Advent Calendars&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;24 days of cool stuff regarding 
  &lt;insert-technology-here&gt;
   .
  &lt;/insert-technology-here&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raku-advent.blog/&quot;&gt;Raku Advent Calendar&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.qemu-advent-calendar.org/&quot;&gt;QEMU Advent Calendar&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;2021&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; All of these likely contain spoilers.&lt;/p&gt; 
&lt;p&gt;Read &lt;a href=&quot;https://raw.githubusercontent.com/Bogdanp/awesome-advent-of-code/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; to learn how to add your own repos.&lt;/p&gt; 
&lt;h3&gt;Solutions&lt;/h3&gt; 
&lt;h4&gt;Ada&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Ada.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Assembly&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Assembly.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;AWK&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in AWK.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nusretipek/Advent-of-Code-2021&quot;&gt;nusretipek/Advent-of-Code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ofrank123/AoC2021&quot;&gt;ofrank123/AoC2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/phillbush/aoc&quot;&gt;phillbush/aoc&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Bash&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Bash.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;C&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in C.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Jamesbarford/advent-of-code-2021&quot;&gt;Jamesbarford/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/breakthatbass/advent_of_code2021&quot;&gt;breakthatbass/advent_of_code2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jeromkiller/AoC2021&quot;&gt;jeromkiller/AoC2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vierofernando/ansi-adventure&quot;&gt;vierofernando/ansi-adventure&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Fritz179/aoc-2021&quot;&gt;Fritz179/aoc-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;C#&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in C#.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DjordjeNedovic/Advent-of-Code&quot;&gt;DjordjeNedovic/Advent-of-Code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ShootMe/AdventOfCode&quot;&gt;ShootMe/AdventOfCode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Virenbar/AdventOfCode&quot;&gt;Virenbar/AdventOfCode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/eduherminio/AoC2021&quot;&gt;eduherminio/AoC2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/encse/adventofcode&quot;&gt;encse/adventofcode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/norrbacka/aoc2021&quot;&gt;norrbacka/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/viceroypenguin/adventofcode&quot;&gt;viceroypenguin/adventofcode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;C++&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in C++.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FilipHusnjak/AdventOfCode-2021&quot;&gt;FilipHusnjak/AdventOfCode-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LMesaric/AoC-2021&quot;&gt;LMesaric/AoC-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TheRealMolen/adventofcode21&quot;&gt;TheRealMolen/adventofcode21&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lento234/advent2021&quot;&gt;lento234/advent2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lvrcek/advent-of-code-2021&quot;&gt;lvrcek/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/m3m0ry/aoc2021&quot;&gt;m3m0ry/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mpcallanan/aoc_cpp&quot;&gt;mpcallanan/aoc_cpp&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Clojure&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Clojure.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/unparalloser/advent-of-code-2021&quot;&gt;unparalloser/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Common Lisp&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Common Lisp.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/guojing0/aoc-2021&quot;&gt;guojing0/aoc-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Crystal&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Crystal.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jazcarate/advent-of-code-2021&quot;&gt;jazcarate/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;D&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in D.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Dart&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Dart.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/julemand101/AdventOfCode2021&quot;&gt;julemand101/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Elixir&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Elixir.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YauHsien/advent-of-code-2021&quot;&gt;YauHsien/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ballpointcarrot/advent-of-code-2021&quot;&gt;ballpointcarrot/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/maco/advent_of_code&quot;&gt;maco/advent_of_code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/memoriesadrift/AoC2021-Elixir&quot;&gt;memoriesadrift/AoC2021-Elixir&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sevenseacat/advent_of_code&quot;&gt;sevenseacat/advent_of_code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wasi0013/advent_of_code&quot;&gt;wasi0013/advent_of_code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Elm&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Elm and Literate Elm.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ryanolsonx/aocelm2021&quot;&gt;ryanolsonx/aocelm2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Erlang&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Erlang.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hypothermic/advent-of-code-2021&quot;&gt;hypothermic/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Excel&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Excel.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/detrang1301/adventofcode-2021-excel&quot;&gt;detrang1301/adventofcode-2021-excel&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Kolsky/AoC-2021-Excel&quot;&gt;Kolsky/AoC-2021-Excel&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;F#&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in F#.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JanDotNet/AdventOfCode&quot;&gt;JanDotNet/AdventOfCode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ThomasGoetzmann/AdventOfCode2021&quot;&gt;ThomasGoetzmann/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Go&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Go.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Alex-Wauters/advent-go-2021&quot;&gt;Alex-Wauters/advent-go-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/BorisLeMeec/adventofcode&quot;&gt;BorisLeMeec/adventofcode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Christheoreo/advent-of-code-2021&quot;&gt;Christheoreo/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Maitgon/Advent2021&quot;&gt;Maitgon/Advent2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SwiftPush/advent-of-code-2021&quot;&gt;SwiftPush/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/chigley/advent2021&quot;&gt;chigley/advent2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/codemicro/adventOfCode&quot;&gt;codemicro/adventOfCode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jsgv/advent-of-code&quot;&gt;jsgv/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nobbs/advent-of-code-in-go&quot;&gt;nobbs/advent-of-code-in-go&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orfeasa/advent-of-code-2021&quot;&gt;orfeasa/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ridaamirini/advent-of-code&quot;&gt;ridaamirini/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shytikov/advent-of-go&quot;&gt;shytikov/advent-of-go&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ostcar/aoc2021&quot;&gt;ostcar/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Groovy&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Groovy.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Hamler&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Hamler.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Haskell&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Haskell.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DestyNova/advent_of_code_2021&quot;&gt;DestyNova/advent_of_code_2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TommasoAmici/haskell-aoc-2021&quot;&gt;TommasoAmici/haskell-aoc-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Vince7778/adventofcode2021&quot;&gt;Vince7778/adventofcode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jitwit/aoc&quot;&gt;jitwit/aoc&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/p-kostic/AdventOfCode2021&quot;&gt;p-kostic/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sonowz/advent-of-code-haskell&quot;&gt;sonowz/advent-of-code-haskell&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Haxe&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Haxe.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Idris&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Idris.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;J&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in J.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jitwit/aoc&quot;&gt;jitwit/aoc&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Java&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Java.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/SimonBaars/AdventOfCode-Java&quot;&gt;SimonBaars/AdventOfCode-Java&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Sycix-HK/Advent-of-Code-2021&quot;&gt;Sycix-HK/Advent-of-Code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/akaritakai/AdventOfCode2021&quot;&gt;akaritakai/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/akbence/adventofcode&quot;&gt;akbence/adventofcode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/amalagraba/adventofcode-2021&quot;&gt;amalagraba/adventofcode-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;JavaScript&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in JavaScript.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Omay238/advent-of-code&quot;&gt;Omay238/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Totto16/AOC-2021&quot;&gt;Totto16/AOC-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ald890/advent-of-code&quot;&gt;ald890/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/joaomlneto/advent-of-code&quot;&gt;joaomlneto/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/thejan14/adventofcode2021&quot;&gt;thejan14/adventofcode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xhayper/advent-of-code&quot;&gt;xhayper/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Fritz179/aoc-2021&quot;&gt;Fritz179/aoc-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Pandicon/Advent-of-Code&quot;&gt;Pandicon/Advent-of-Code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;jq&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in jq.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/christianberg/advent&quot;&gt;christianberg/advent&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Julia&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Julia.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CmdQ/AoC&quot;&gt;CmdQ/AoC&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/JakobSachs/aoc21&quot;&gt;JakobSachs/aoc21&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/goggle/AdventOfCode2021.jl&quot;&gt;goggle/AdventOfCode2021.jl&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lostella/advent-of-code&quot;&gt;lostella/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/racinmat/advent_of_code_2021&quot;&gt;racinmat/advent_of_code_2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Kotlin&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Kotlin.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/7rebux/advent-of-code-2021&quot;&gt;7rebux/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RaphaelTarita/AoC-2021&quot;&gt;RaphaelTarita/AoC-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/The-Self-Taught-Software-Engineer/advent-of-code-2021&quot;&gt;The-Self-Taught-Software-Engineer/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/agrison/advent-of-code&quot;&gt;agrison/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/edgars-supe/advent-of-code&quot;&gt;edgars-supe/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hughjdavey/aoc-2021&quot;&gt;hughjdavey/aoc-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/marc-bouvier-katas/Kotlin_EduTools_Advent_of_Code_2021&quot;&gt;marc-bouvier-katas/Kotlin_EduTools_Advent_of_Code_2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/matios13/advent_of_code&quot;&gt;matios13/advent_of_code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tchojnacki/advent-of-code-2021-kotlin&quot;&gt;tchojnacki/advent-of-code-2021-kotlin&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ArpitShukIa/AdventOfCode2021&quot;&gt;ArpitShukIa/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;LDPL&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in LDPL.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Lua&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Lua.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jwise/aoc&quot;&gt;jwise/aoc&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2020--12--25-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xhayper/advent-of-code&quot;&gt;xhayper/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;MATLAB&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in MATLAB (Octave).&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Nim&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Nim.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AP2008/nim-aoc2021&quot;&gt;AP2008/nim-aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/codemicro/adventOfCode&quot;&gt;codemicro/adventOfCode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vanyle/AdventOfCode2021&quot;&gt;vanyle/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Objective-C&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Objective-C.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;OCaml&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in OCaml.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jamespwilliams/aoc2021&quot;&gt;jamespwilliams/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;PHP&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in PHP.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/arxeiss/advent-of-code-2021&quot;&gt;arxeiss/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jvwag/advent-of-code&quot;&gt;jvwag/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kirara/advent-of-code&quot;&gt;kirara/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ridaamirini/advent-of-code&quot;&gt;ridaamirini/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vuryss/aoc-php&quot;&gt;vuryss/aoc-php&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Perl&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Perl.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Pony&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Pony.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Prolog&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Prolog.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YauHsien/advent-of-code-2021&quot;&gt;YauHsien/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;PowerShell&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in PowerShell.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Python&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Python.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Arrezz/AdventOfCode2021&quot;&gt;Arrezz/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Aufbakanleitung/advent-of-code-2021&quot;&gt;Aufbakanleitung/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IanFindlay/advent-of-code&quot;&gt;IanFindlay/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/James-Ansley/adventofcode&quot;&gt;James-Ansley/adventofcode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NimVek/advent-of-code&quot;&gt;NimVek/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TechnoTone/AdventOfCode2021&quot;&gt;TechnoTone/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/TomDufall/prog-puzzles&quot;&gt;TomDufall/prog-puzzles&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Vasile-Hij/AOC-2021&quot;&gt;Vasile-Hij/AOC-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/adamml/advent-of-code&quot;&gt;adamml/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/alihacks/advent-of-code&quot;&gt;alihacks/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cobanov/advent-of-code&quot;&gt;cobanov/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/codemicro/adventOfCode&quot;&gt;codemicro/adventOfCode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ernestoarbitrio/AoC2021&quot;&gt;ernestoarbitrio/AoC2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gamma032steam/advent-of-code-2021&quot;&gt;gamma032steam/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/grigoresc/adventofcode.2021&quot;&gt;grigoresc/adventofcode.2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jopein/aoc2021&quot;&gt;jopein/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/k2bd/advent-of-code&quot;&gt;k2bd/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lostella/advent-of-code&quot;&gt;lostella/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lypnol/adventofcode-2021&quot;&gt;lypnol/adventofcode-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mathstrains21/Advent-Of-Code&quot;&gt;mathstrains21/Advent-Of-Code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mebeim/aoc&quot;&gt;mebeim/aoc&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nitekat1124/advent-of-code-2021&quot;&gt;nitekat1124/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/novoselov-ab/adventofcode-2021-python&quot;&gt;novoselov-ab/adventofcode-2021-python&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/orfeasa/advent-of-code-2021&quot;&gt;orfeasa/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/python-b5/advent-of-code-2021&quot;&gt;python-b5/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rosscon/rosscon_advent_of_code&quot;&gt;rosscon/rosscon_advent_of_code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sejaldua/advent-of-code-2021&quot;&gt;sejaldua/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/smetanin-av/advent_of_code&quot;&gt;smetanin-av/advent_of_code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/tobi6112/AoC-2021&quot;&gt;tobi6112/AoC-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/vlopezferrando/advent-of-code&quot;&gt;vlopezferrando/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/widdin/advent-of-code&quot;&gt;widdin/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yspreen/adventofcode&quot;&gt;yspreen/adventofcode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pranasziaukas/advent-of-code-2021&quot;&gt;pranasziaukas/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;R&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in R.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Zedseayou/advent_of_code&quot;&gt;Zedseayou/advent_of_code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/czeildi/advent-of-code&quot;&gt;czeildi/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/plannapus/Advent_of_Code&quot;&gt;plannapus/Advent_of_Code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rrrlw/advent-of-code&quot;&gt;rrrlw/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Racket&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Racket.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Bogdanp/aoc2021&quot;&gt;Bogdanp/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/lojic/LearningRacket&quot;&gt;lojic/LearningRacket&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Raku&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Raku.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Hydrazer/advent-of-code&quot;&gt;Hydrazer/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;ReasonML&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in ReasonML.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Red&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Red.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Ruby&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Ruby.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/damyvv/advent-of-code-2021&quot;&gt;damyvv/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Rust&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Rust.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Basicprogrammer10/Advent-Of-Code-2021&quot;&gt;Basicprogrammer10/Advent-Of-Code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Hydrazer/advent-of-code&quot;&gt;Hydrazer/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/agubelu/Advent-of-Code-2021&quot;&gt;agubelu/Advent-of-Code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/believer/advent-of-code&quot;&gt;believer/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hashedone/aoc2021&quot;&gt;hashedone/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/martinxxd/adventofcode-2021-rust&quot;&gt;martinxxd/adventofcode-2021-rust&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mayjs/advent_of_code_2021&quot;&gt;mayjs/advent_of_code_2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/megatank58/adventofcode&quot;&gt;megatank58/adventofcode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/nickyvanurk/advent-of-code&quot;&gt;nickyvanurk/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pemoreau/advent-of-code-2021&quot;&gt;pemoreau/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/poyea/aoc&quot;&gt;poyea/aoc&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/richardneililagan/adventofcode-2021&quot;&gt;richardneililagan/adventofcode-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sathwikmatsa/aoc21&quot;&gt;sathwikmatsa/aoc21&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sergree/aoc2021&quot;&gt;sergree/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--02-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/snxk/adventofcode-2021&quot;&gt;snxk/adventofcode-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/varunmehrishi/AdventOfCode2021&quot;&gt;varunmehrishi/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/yeurch/advent-of-code&quot;&gt;yeurch/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zsacul/AdventOfCode2021&quot;&gt;zsacul/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Smalltalk&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Smalltalk.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Scala&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Scala.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/2m/adventofcode2021&quot;&gt;2m/adventofcode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/FlorianCassayre/AdventOfCode-2021&quot;&gt;FlorianCassayre/AdventOfCode-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fdlk/advent-2021&quot;&gt;fdlk/advent-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mzielinski/advent-of-code-2021&quot;&gt;mzielinski/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sim642/adventofcode&quot;&gt;sim642/adventofcode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Scheme&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Scheme.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/AiziChen/advent-of-code&quot;&gt;AiziChen/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jitwit/aoc&quot;&gt;jitwit/aoc&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Solidity&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Solidity.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ethsgo/aoc&quot;&gt;ethsgo/aoc&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;SpectX&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in SpectX.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;SQL&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in SQL.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/alihacks/advent-of-code&quot;&gt;alihacks/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Swift&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Swift.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Frugghi/Advent-of-Code-2021&quot;&gt;Frugghi/Advent-of-Code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bence-t0th/Advent-of-Code-2021&quot;&gt;bence-t0th/Advent-of-Code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--01-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fguchelaar/AdventOfCode2021&quot;&gt;fguchelaar/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/onevcat/advent2021&quot;&gt;onevcat/advent2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scottluxenberg/AdventOfCode2021&quot;&gt;scottluxenberg/AdventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/bhargavg/AdventOfCode&quot;&gt;bhargavg/AdventOfCode&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;TypeScript&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in TypeScript.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/DarthGandalf/advent-of-code&quot;&gt;DarthGandalf/advent-of-code&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/atme/advent-of-code-2021&quot;&gt;atme/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/caderek/aoc2021&quot;&gt;caderek/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/pierreyoda/advent-2021-svelte&quot;&gt;pierreyoda/advent-2021-svelte&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sanraith/aoc2021&quot;&gt;sanraith/aoc2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Charlesworth/adventOfCode2021&quot;&gt;Charlesworth/adventOfCode2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Deno&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Deno (TypeScript).&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ismtabo/advent-of-code-2021&quot;&gt;ismtabo/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Unison&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Unison.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;VB.NET&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in VB.NET.&lt;/em&gt;&lt;/p&gt; 
&lt;h4&gt;Whitespace&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Whitespace.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/andrewarchi/ws-challenges&quot;&gt;andrewarchi/ws-challenges&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Zig&lt;/h4&gt; 
&lt;p&gt;&lt;em&gt;Solutions to AoC in Zig.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jwarwick/aoc_2021&quot;&gt;jwarwick/aoc_2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--03-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/scorphus/advent-of-code-2021&quot;&gt;scorphus/advent-of-code-2021&lt;/a&gt; &lt;img src=&quot;https://img.shields.io/badge/last%20commit-2021--12--04-brightgreen&quot; alt=&quot;Last Commit on GitHub&quot;&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Live Streams&lt;/h3&gt; 
&lt;p&gt;&lt;em&gt;Folks who are live streaming their process.&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://youtube.com/playlist?list=PLDeBWauprDRjbplIuyhVhXhIt7k4NuOad&quot;&gt;Aufbakanleitung&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>AsyncBanana/microdiff</title>
      <link>https://github.com/AsyncBanana/microdiff</link>
      <description>&lt;p&gt;A fast, zero dependency object and array comparison library. Significantly faster than most other deep comparison libraries and has full TypeScript support.&lt;/p&gt;&lt;hr&gt;&lt;div align=&quot;center&quot;&gt; 
 &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/AsyncBanana/microdiff/master/Logo.svg?sanitize=true&quot; alt=&quot;Microdiff Logo&quot;&gt;&lt;/p&gt; 
 &lt;p&gt;Microdiff is a tiny (currently &amp;lt;1kb), fast, zero dependency object and array comparison library. It is significantly faster than most other deep comparison libraries, and has full TypeScript support.&lt;/p&gt; 
 &lt;p&gt;&lt;img src=&quot;https://img.shields.io/bundlephobia/minzip/microdiff?style=flat-square&quot; alt=&quot;Minizipped Size (from Bundlephobia)&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/l/microdiff?style=flat-square&quot; alt=&quot;License&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/dependencies-0-green?style=flat-square&quot; alt=&quot;dependency Count&quot;&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;h1&gt;Features&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;ð More than double the speed of other object diff libraries&lt;/li&gt; 
 &lt;li&gt;ð¦ Extremely lightweight, &amp;lt;1kb minified&lt;/li&gt; 
 &lt;li&gt;ð Supports Deno, Node, the web, and even service workers. Also comes with built in Typescript types&lt;/li&gt; 
 &lt;li&gt;ð° Very easy to use, having just a single &lt;code&gt;diff()&lt;/code&gt; function&lt;/li&gt; 
 &lt;li&gt;ð Full support for objects like &lt;code&gt;new Date()&lt;/code&gt; and &lt;code&gt;new RegExp()&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h1&gt;Get started&lt;/h1&gt; 
&lt;p&gt;First, install Microdiff&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm i microdiff
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using Deno, you can import it from Deno.land with the link &lt;code&gt;https://deno.land/x/microdiff@VERSION/index.ts&lt;/code&gt; (remember to change &lt;code&gt;@VERSION&lt;/code&gt; to the version you want to use).&lt;/p&gt; 
&lt;p&gt;After you install it, simply import it and run it on two objects.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import diff from &quot;microdiff&quot;;

const obj1 = {
	originalProperty: true,
};
const obj2 = {
	originalProperty: true,
	newProperty: &quot;new&quot;,
};

console.log(diff(obj1, obj2));
// [{type: &quot;CREATE&quot;, path: [&quot;newProperty&quot;], value: &quot;new&quot;}]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using CommonJS, you can import it like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const diff = require(&quot;microdiff&quot;).default;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are three different types of changes. &lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;REMOVE&lt;/code&gt;, and &lt;code&gt;CHANGE&lt;/code&gt;. The &lt;code&gt;path&lt;/code&gt; property gives a path to the property in the new object (or the old object in the case of &lt;code&gt;REMOVE&lt;/code&gt;). Each element in the paths is a key to the next property a level deeper until you get to the property changed, and it is string or a number, depending on whether the object is an Array or Object (Objects with number keys will still be strings). The &lt;code&gt;value&lt;/code&gt; property exists in types &lt;code&gt;CREATE&lt;/code&gt; and &lt;code&gt;CHANGE&lt;/code&gt;, and it contains the value of the property added/changed.&lt;/p&gt; 
&lt;h1&gt;Cycles support&lt;/h1&gt; 
&lt;p&gt;By default cycles are supported, but if you are sure that the object has no cycles (for example if you are parsing JSON) you can disable cycles using the &lt;code&gt;cyclesFix&lt;/code&gt; option.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;diff(obj1, obj2, { cyclesFix: false });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Benchmarks&lt;/h1&gt; 
&lt;pre&gt;&lt;code&gt;Benchmarks: Small object
deep-diff: 17929ns - 409% slower
deep-object-diff: 10763ns - 206% slower
jsdiff: 79700ns - 2164% slower
microdiff: 3520ns - Fastest

Benchmarks: Large Object
deep-diff: 272887ns - 259% slower
deep-object-diff: 160019ns - 111% slower
jsdiff: 1688294ns - 2123% slower
microdiff: 75934ns - Fastest
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These benchmarks are currently only for one small object and a very large object, so they might not be accurate. I will be working on creating benchmarks with more varying types.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dundunnp/hamibot-auto_xuexiqiangguo</title>
      <link>https://github.com/dundunnp/hamibot-auto_xuexiqiangguo</link>
      <description>&lt;p&gt;æ¯æ¥æ¿æ»¡61åï¼årootï¼åäººèµåäººå¯¹æç§ç­ï¼åºäºHamibotçå®åç«¯å­¦ä¹ å¼ºå½èªå¨åèæ¬&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ç®å½&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E&quot;&gt;åè´£å£°æ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E8%84%9A%E6%9C%AC%E5%A3%B0%E6%98%8E&quot;&gt;èæ¬å£°æ&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E&quot;&gt;ä½¿ç¨è¯´æ&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#hamibothttpshamibotcom&quot;&gt;Hamibot&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC&quot;&gt;å®è£èæ¬&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E6%BB%A1%E8%B6%B3%E6%9D%A1%E4%BB%B6&quot;&gt;æ»¡è¶³æ¡ä»¶&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E7%BC%96%E8%BE%91%E9%85%8D%E7%BD%AE&quot;&gt;ç¼è¾éç½®&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&quot;&gt;å¸¸è§é®é¢&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#historical-change-log&quot;&gt;Historical Change Log&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#v33-%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&quot;&gt;v3.3 æ´æ°åå®¹:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#v32-%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&quot;&gt;v3.2 æ´æ°åå®¹:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#v31-%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&quot;&gt;v3.1 æ´æ°åå®¹:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#v30-%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&quot;&gt;v3.0 æ´æ°åå®¹:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#v21-%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&quot;&gt;v2.1 æ´æ°åå®¹:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#v20-%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&quot;&gt;v2.0 æ´æ°åå®¹:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#v12-%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&quot;&gt;v1.2 æ´æ°åå®¹:&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#v11-%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9&quot;&gt;v1.1 æ´æ°åå®¹:&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E5%BE%85%E7%BC%96%E5%86%99&quot;&gt;å¾ç¼å&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- /code_chunk_output --&gt; 
&lt;h1&gt;åè´£å£°æ&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;æ¬èæ¬ä¸ºåè´¹ä½¿ç¨ï¼æ¬èæ¬åªä¾ä¸ªäººå­¦ä¹ ä½¿ç¨ï¼ä¸å¾çå©ä¼ æ­ï¼ä¸å¾ç¨äºè¿æ³ç¨éï¼å¦åé æçä¸ååæèªè´ï¼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;å¦æåæ¬¢çè¯å¯ä»¥starä¸ä¸å¢ï¼è°¢è°¢ï¼&lt;/p&gt; 
&lt;h1&gt;èæ¬å£°æ&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;æ¬èæ¬éç¨äºå®åãé¸¿èç³»ç»ï¼ä¸éç¨äºIOSï¼å°½éå°å¼ºå½è½¯ä»¶åçº§è³ææ°çæ¬ï¼å¦æå¶ä»çæ¬åºç°æ¥éï¼æä¹æ æ³è§£å³&lt;/strong&gt; &lt;strong&gt;å¦æå ä¸ºbugæåç§åå ä¸å¾ä¸ç»æ­¢èæ¬ï¼è¯·éæ°è¿è¡èæ¬ï¼èæ¬ä¼èªå¨è·³è¿å·²å®æçé¨å&lt;/strong&gt; &lt;strong&gt;å¦æéå°bugé®é¢ï¼è¯·åæ¥ç&lt;a href=&quot;https://raw.githubusercontent.com/dundunnp/hamibot-auto_xuexiqiangguo/main/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&quot;&gt;å¸¸è§é®é¢&lt;/a&gt;ï¼å¦ææ²¡ææ¾å°ç±»ä¼¼é®é¢æè¿æ¯ä¸è¡è¯·åé¦bugç»æï¼å¯¹äºå¶ä»é®é¢ï¼ç±äºæè¿å¨ä¸è¯¾å®å¨æ æé¡¾åï¼æ±æ­&lt;/strong&gt; ç®åçæ¬&lt;strong&gt;æ æ³&lt;/strong&gt;å®æè®¢éãåè¡¨è§ç¹æ¨¡åï¼å¶ä»æ¨¡ååå¯èªå¨åå®æï¼å½ç¶ä¸åæ¬å¼ºå½è¿å¨ï¼ï¼ï¼å ä¸ºæ¬äººæ¯å¨æ ¡å­¦çæ æ³æå¨é¨ç²¾åæ¾å¨è¿ï¼å æ­¤å¦æææ³åä½çå°ä¼ä¼´è¯·å¨Githubä¸ä¸èµ·å®ææ´æ°é¡¹ç®&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;v4.0 æ´æ°åå®¹:
1. ä¼åæ¯é¢é´éæ¶é´ãå©ç¨åé¢åº, æå¤§æ¹ååäººèµãåäººå¯¹æçéåº¦åæ­£ç¡®ç
2. ä¿®å¤é¨åæºåå¡å¨é¦é¡µæ æ³ç¹å»âæçâ
&lt;/code&gt;&lt;/pre&gt; 
&lt;hr&gt; 
&lt;h1&gt;ä½¿ç¨è¯´æ&lt;/h1&gt; 
&lt;h2&gt;&lt;a href=&quot;https://hamibot.com/&quot;&gt;Hamibot&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;å¦æç¥éè¿æ¬¾è½¯ä»¶çå°ä¼ä¼´å¯ä»¥ç´æ¥è·³å°éç½®ï¼è¿æ¯å®ç&lt;a href=&quot;https://hamibot.com/&quot;&gt;å®ç½&lt;/a&gt;&lt;a href=&quot;https://hamibot.com%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89%E8%AF%A6%E7%BB%86%E7%9A%84%E4%BB%8B%E7%BB%8D%EF%BC%8C&quot;&gt;https://hamibot.comï¼éé¢æè¯¦ç»çä»ç»ï¼&lt;/a&gt; ç®åè¿æ¬¾è½¯ä»¶åªéç¨äºå®åç³»ç»&lt;/p&gt; 
&lt;h2&gt;å®è£èæ¬&lt;/h2&gt; 
&lt;p&gt;å¨ææºä¸å®è£å®æHamibotä¹åï¼å¨&lt;a href=&quot;https://hamibot.com/marketplace&quot;&gt;èæ¬å¸åº&lt;/a&gt;æç´¢&lt;a href=&quot;https://hamibot.com/marketplace/aQlXd&quot;&gt;&quot;Autoå­¦ä¹ å¼ºå½&quot;&lt;/a&gt;å¹¶å®è£èæ¬&lt;/p&gt; 
&lt;h2&gt;æ»¡è¶³æ¡ä»¶&lt;/h2&gt; 
&lt;p&gt;è¯·ç¡®ä¿ææºæ»¡è¶³ä»¥ä¸æ¡ä»¶&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;æå¼æ éç¢æå¡æéãç¨åºä¿æåå°è¿è¡&lt;/li&gt; 
 &lt;li&gt;ææºå±ä¿è®¾ç½®æ¶é¿å¤§äº2åé&lt;/li&gt; 
 &lt;li&gt;ææºæå¼å¿æ°æ¨¡å¼ï¼é²æ­¢çªç¶çä¿¡æ¯å¼¹çªå¯¼è´èæ¬çå¤±è´¥&lt;/li&gt; 
 &lt;li&gt;ææºåå°ä¸è¦æ­æ¾é³ä¹ï¼å¯è½ä¼å½±åçè§é¢çé¨å&lt;/li&gt; 
 &lt;li&gt;å¨åºç¨ä¸­å°½éä¸è¦æå¶ä»å¼¹çªï¼æ¯å¦æå¼åºç¨ï¼æç¤ºä½ åç°æ°çæ¬çå¼¹çª&lt;/li&gt; 
 &lt;li&gt;å¦æè¦å®æç­é¢ï¼è¯·å¨æ§è¡èæ¬åï¼ç¹å»ææºå¼¹çªåºæ¥çæå¼æªå¾æé&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;ç¼è¾éç½®&lt;/h2&gt; 
&lt;p&gt;å¨æ§å¶å°èæ¬ä¸­ï¼å¨ååå®è£å¥½çèæ¬ä¸­ï¼ç¹å»ç¼è¾&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_WRzp0mov3N.png&quot; width=&quot;600px&quot; alt=&quot;msedge_WRzp0mov3N&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/b095b81f07d19bd4b347052e5b9ace0.png&quot; width=&quot;350px&quot; alt=&quot;b095b81f07d19bd4b347052e5b9ace0&quot; style=&quot;zoom:50%;&quot;&gt; 
&lt;/div&gt; å¡«åä½ å¯¹åºççä»½ï¼ç¨äºæå¼æ¬å°é¢éå¯ä»¥ç§¯ä¸åï¼ä¸åä¹æ¯å!æ³¨æä¸è¦å¤å ä¸ä¸ªçå­ï¼ï¼æ¯å¦æè¿éæ¯æ±è¥¿ï¼ç¶åéæéæ©ä¸ä¸ªæ¬å°é¢éï¼æ¯å¦æéæ©çæ¯æ±è¥¿å«è§ï¼ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/HwMirror_zmj2eavi85.png&quot; width=&quot;300px&quot; alt=&quot;HwMirror_zmj2eavi85&quot; style=&quot;zoom:50%;&quot;&gt; 
&lt;/div&gt; èåå¡«åè·³è½¬é¡µé¢å è½½çæ¶é´(ä»¥ç§sä¸ºåä½)ï¼é»è®¤ä¸º1s(æ¯æå°æ°ç¹å½¢å¼)ï¼æ ¹æ®ææºæ§è½ä¸ç½ç»æåµèªè¡èå®ï¼æ¶é´è¶é¿åºbugçå¯è½è¶å°ï¼ä½åæ¶èè´¹çæ¶é´è¶é¿ã æçææºæ¯åä¸ºmate20 proç¨çæ¯1sï¼å¤§å®¶å¯ä»¥åèä¸ä¸ï¼ä¸å»ºè®®å°äº1sï¼å¤ªå¿«ä¸ç¬¦åæ­£å¸¸äººç±»ç¹å»é¢çï¼å®¹æè¢«ç³»ç»ä¾¦æµåºï¼å½ç¶æä¹è®¾ç½®äºéæºæ¶é´æ§ï¼ä½ çä»»ä½ç­å¾æ¶é´é½æ¯ä½ è®¾å®çåºç¡å¼å ä¸ä¸ªéæºæ¶é´ï¼ 
&lt;p&gt;ç®åèæ¬æ¯æä¸¤ç§æ¨¡å¼ï¼&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;ä¸å®ææ¯æ¥ç­é¢ãæ¯å¨ç­é¢ãä¸é¡¹ç­é¢ãåäººèµååäººå¯¹æï¼å¶ä»é½å®æ&lt;/li&gt; 
 &lt;li&gt;å¨é¨å®æ&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;ä½æ¯ç¬¬äºç§æ¨¡å¼éè¦éè¿åä¸ºAPIå®ç°OCRåè½ï¼ä»èå®æç­é¢ï¼æ³¨æè¿ééè¿åä¸ºAPIçæ¶è´¹æ åå¦ä¸ï¼å¯ä»¥çå°æ¯ä¸ªææä¸åæ¬¡åè´¹ä½¿ç¨ï¼æ¯å®å¨å¤ç¨çï¼ç¸å½äºåè´¹&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_QmQEm4XND4.png&quot; width=&quot;700px&quot; alt=&quot;msedge_QmQEm4XND4&quot; style=&quot;zoom:50%;&quot;&gt; 
&lt;/div&gt; å æ­¤å¦æåªæ³å®ç°æ¨¡å¼ä¸çç¨æ·åé¢çéé¡¹ä¸éè¦å¡«åï¼å°è¿éèæ¬å°±å¯ä»¥æ­£å¸¸è¿è¡äºï¼ 
&lt;p&gt;&lt;strong&gt;ä½å¦ææ³å®ç°ç­é¢åè½ä½ è¿éè¦å®æä»¥ä¸æ­¥éª¤ï¼&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;ç»å½&lt;a href=&quot;https://www.huaweicloud.com/&quot;&gt;åä¸ºäºå®ç½&lt;/a&gt;ï¼ç¹å»æ³¨åï¼å¦æå·²ç»æè´¦å·å¯ä»¥ç´æ¥ç»å½ï¼&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_LAXxJYLH9v.png&quot; width=&quot;700px&quot; alt=&quot;msedge_LAXxJYLH9v&quot; style=&quot;zoom: 33%;&quot;&gt; 
&lt;/div&gt; æ³¨åæååï¼ç»å½ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_MF3EQpHYfl.png&quot; width=&quot;700px&quot; alt=&quot;msedge_MF3EQpHYfl&quot; style=&quot;zoom: 33%;&quot;&gt; 
&lt;/div&gt; ç¹å»è´¦æ·ä¸­å¿ï¼å¹¶ç¹å»å®åè®¤è¯ä¸­çä¸ªäººè®¤è¯ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_i0WswextDv.png&quot; width=&quot;700px&quot; alt=&quot;msedge_i0WswextDv&quot; style=&quot;zoom: 33%;&quot;&gt; 
&lt;/div&gt; å®æè®¤è¯åï¼å¤§å®¶å¯ä»¥å¨åºæ¬ä¿¡æ¯ä¸­æ¹ä¸ä¸ªèªå·±çè´¦å·åï¼æè¿éæ¹ä¸ºäºdundunnpï¼æ³¨æåªè½æ¹ä¸æ¬¡è´¦å·åï¼å¤§å®¶ä¹å¯ä»¥éæ©ä¸æ¹ï¼ï¼èåè¿éåå»ºä¸ä¸ªç¨æ·ï¼ç¹å»ç»ä¸èº«ä»½è®¤è¯ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_KaElfaa67l.png&quot; width=&quot;700px&quot; alt=&quot;msedge_KaElfaa67l&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; è½ç¶å¯ä»¥çå°å·²ç»æä¸ä¸ªä¼ä¸ç®¡çåç¨æ·ï¼**ä½åä¸ºè´¦å·ä¸æ¯æè·åå¸å·Tokenï¼éè¦æä»¬èªå·±åå»ºä¸ä¸ªIAMç¨æ·**ï¼æäºè¯¥ç¨æ·å¿è¦çæéï¼è·åIAMç¨æ·Tokenï¼å æ­¤ï¼ç¹å»å³ä¸è§çåå»ºç¨æ· 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_DF8MDpI9Ck.png&quot; width=&quot;700px&quot; alt=&quot;msedge_DF8MDpI9Ck&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; å¡«åç¨æ·åä¸å¯ç ï¼è¯·è®°ä½ï¼åé¢éè¦ç¨å°ï¼ç¹å»ä¸ä¸æ­¥ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_uNigytTpFa.png&quot; width=&quot;700px&quot; alt=&quot;msedge_uNigytTpFa&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; ç¹å»adminï¼ä½¿å¶ç¨æ·å å¥ç¨æ·ç»ï¼ç¹å»åå»ºç¨æ· 
&lt;p&gt;æç´¢æ¡ä¸­&lt;a href=&quot;https://www.huaweicloud.com/s/JW9jciU&quot;&gt;æç´¢ocr&lt;/a&gt;ï¼å¨ç¬¬ä¸æ¡ä¸­ç¹å»ç«å³ä½¿ç¨&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_HNfceTw9ey.png&quot; width=&quot;700px&quot; alt=&quot;msedge_HNfceTw9ey&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; å°é¡µé¢æ»å¨å°æä¸æ¹ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_uUOIuwfWH1.png&quot; width=&quot;700px&quot; alt=&quot;msedge_uUOIuwfWH1&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; ç¿»å°ç¬¬äºé¡µï¼æ¾å°ç½ç»å¾çè¯å«ï¼ç¹å»å¼éæå¡ï¼å¹¶ç¡®è®¤ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_lLg8QqR7m8.png&quot; width=&quot;700px&quot; alt=&quot;msedge_lLg8QqR7m8&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; ç¹å»å·¦ä¾§çè°ç¨æåå¶ä¸çAPIè°ç¨ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_ccv7yxXG7h.png&quot; width=&quot;700px&quot; alt=&quot;msedge_ccv7yxXG7h&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; å¨è¿ä¸ªçé¢ä¸­ï¼ä¸é¢çéç½®åæ°æ¥è¯¢ä¸é¢çæé è¯·æ±æ¨¡åä¸­æï¼Endpointåproject_idä¸¤é¡¹ï¼å°è¿ä¸¤é¡¹å¡«å¥éç½®ä¸­ 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_iHvmohHfBh.png&quot; width=&quot;700px&quot; alt=&quot;msedge_iHvmohHfBh&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; åå°ç¬¬äºä¸ªæ¨¡åçdomainnameåprojectnameå¡«å¥éç½®ä¸­ï¼**æ³¨æ**ï¼è¿éåä¸ä¸è¦å°è¿éæ¾ç¤ºçdundunnpå¡«å¥usernameä¸­ï¼domainnameæ¯ä¼ä¸ç®¡çåçè´¦å·åä¹å°±æ¯dundunnpï¼èusernameåpasswordå¡«å¥çæ¯åååå»ºçç¨æ·çä¿¡æ¯ï¼ä¹å°±æ¯dundunåXXXXX(ä½ ä»¬è®¾ç½®çå¯ç )ã 
&lt;p&gt;è¿éæ¯æçéç½®æä»¶çä¾å­ï¼&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_4qInvihBwb.png&quot; width=&quot;400px&quot; alt=&quot;msedge_4qInvihBwb&quot; style=&quot;zoom:50%;&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;æ­åä½ ï¼å°è¿éå°±ç®æ¯å®æäº!&lt;/p&gt; 
&lt;h1&gt;å¸¸è§é®é¢&lt;/h1&gt; 
&lt;p&gt;Q1: è¿è¡èæ¬ååºç°è¿ä¸ªæ¥é&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/msedge_nGw9SZG0Ov.png&quot; width=&quot;300px&quot; alt=&quot;HwMirror_zmj2eavi85&quot; style=&quot;zoom:50%;&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;A: éç½®ä¿¡æ¯æ²¡æå¡«åï¼è¿ä¸ªèæ¬ä¸æ¯ç»è¿å®è£è¯´æé½ä¸çãéç½®ä¿¡æ¯é½ä¸å¡«ï¼ç¹å»å®è£å°±æ³æ¿åçäººç¨ç&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Q2: ç¹å»è¿è¡èæ¬æ²¡æååºï¼çè³è¿å­¦ä¹ å¼ºå½é½æ²¡ææå¼&lt;/p&gt; 
&lt;p&gt;A: è¯·ç¡®ä¿Hamibotå·²ç»æå¼&lt;strong&gt;æ éç¢æå¡æé&lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Q3: å¨åäººèµãåäººå¯¹ææ­£ç¡®çæäºº&lt;/p&gt; 
&lt;p&gt;A: æç¨èªå·±ææºæµè¯ç­é¢æ­£ç¡®çè½å¨80%ä»¥ä¸ï¼å¤§å®¶åºç°éè¯¯çé«çä¸»è¦åå å¨äºï¼&lt;strong&gt;ææºæ§è½åç½éãæ¯äººçææºä¸åï¼å¯¼è´è¿æ²¡æç­å¾é¢ç®å è½½å°±ocräºï¼é¢ç®å¹¶æ²¡æè¯å«æ­£ç¡®&lt;/strong&gt;ãæ¬¡è¦åå æ¯ï¼é¢åºçæ°ç®æéã è§£å³æ¹æ³ï¼éå½æé«å»¶è¿æ¶é´ï¼è®©é¢ç®å è½½åºæ¥ï¼åç»­çæ¬ä¼å©ç¨æ´å¥½çé¢åº &lt;strong&gt;å¦ï¼éè¯¯æ¯æ æ³é¿åçï¼å¦æä½ æç¹æ®çéæ±æä¸å®è¦æ¿æ»¡åï¼éå¸¸æ±æ­è¿ä¸ªèæ¬å¯è½ä¸è½æ»¡è¶³ä½ &lt;/strong&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;p&gt;Q4: è¿å»å°âæçâ-&amp;gt;âå­¦ä¹ ç§¯åâï¼åéåå°é¦é¡µåï¼èæ¬å¡ä¸»ä¸å¨äº&lt;/p&gt; 
&lt;p&gt;A: è¯·ç¡®ä¿éç½®ä¿¡æ¯ä¸­ç&lt;strong&gt;çä»½ä¸æ¬å°é¢éåæ¯èªå·±å­¦ä¹ å¼ºå½çé¢å¯¹åºçï¼èä¸æ¯ä½ èªå·±ç°å±å°&lt;/strong&gt;ï¼æ¯å¦åè®¾æç°å¨ä½å¨åäº¬ï¼èæå­¦ä¹ å¼ºå½çé¢å¦ä¸ï¼é£ä¹æåºè¯¥å¡«åçæ¯æ±è¥¿ï¼èä¸æ¯åäº¬&lt;/p&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/16.png&quot; width=&quot;400px&quot; alt=&quot;HwMirror_zmj2eavi85&quot; style=&quot;zoom:50%;&quot;&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;p&gt;Q5: ä¸ºä»ä¹ææç§æ­¥éª¤éç½®å¥½äºåä¸ºocræå¡ï¼ä½è¿æ¯ä¸ç­é¢&lt;/p&gt; 
&lt;p&gt;A: é¦åæ£æ¥éç½®ä¿¡æ¯æ¯å¦æ­£ç¡®ï¼å¶æ¬¡æ£æ¥æ¯å¦æå¼å¦å¾æç¤ºçæéï¼å¦æè¿è¡èæ¬æ¶ï¼ææºæ²¡æèªå¨å¼¹åºæå¼æéçæç¤ºï¼å¯è½åå æ¯ï¼&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;éç½®ä¿¡æ¯éæ¯å¦ç­é¢éæ©äºå¦&lt;/li&gt; 
 &lt;li&gt;è½¯ä»¶æ²¡æå¼¹çªæé&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;http://r32wozj47.hn-bkt.clouddn.com/img/18.jpg&quot; width=&quot;300px&quot; alt=&quot;18&quot; style=&quot;zoom:33%;&quot;&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;p&gt;Q6: é¤ä¸é¢çé®é¢&lt;/p&gt; 
&lt;p&gt;A: è¯·å¨&lt;a href=&quot;https://github.com/dundunnp/hamibot-auto_xuexiqiangguo/issues&quot;&gt;GitHub&lt;/a&gt;ä¸æåºé®é¢ï¼é®é¢å°½éè¯¦ç»ï¼æå¥½åå«å¾çæè§é¢ï¼è¿æ ·å¯¹å¤§å®¶è§£å³é®é¢é½å¿«&lt;/p&gt; 
&lt;h1&gt;Historical Change Log&lt;/h1&gt; 
&lt;h2&gt;v3.3 æ´æ°åå®¹:&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;æ¹ååäººèµãåäººå¯¹ææ­£ç¡®ç&lt;/li&gt; 
 &lt;li&gt;å¢å å¸¸è§é®é¢æ¿åï¼å¦ææé®é¢å¯ä»¥åççæ¯å¦å·²ç»å­å¨&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;v3.2 æ´æ°åå®¹:&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;ä¿®å¤åäººèµãåäººå¯¹æåå®æ æ³éåºçbug&lt;/li&gt; 
 &lt;li&gt;å¦æåäººèµå¤§äº2åï¼åäººå¯¹æå¤§äº0åå°ä¸ä¼éå¤ç­é¢&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;v3.1 æ´æ°åå®¹:&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;ä¿®å¤ææç­é¢éè¯¯bug&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;v3.0 æ´æ°åå®¹:&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;å¢å ä¸¤ä¸ªéç½®éé¡¹ï¼å¯¹äºæ¯å¨ç­é¢åä¸é¡¹ç­é¢ï¼å¦ææå·²ç»å°ä¹åç­é¢å¨é¨å®æçå°ä¼ä¼´ï¼å°ä¸ä¼ååä¸æç´¢ï¼éè¦éç½®æ¯ï¼é»è®¤éæ©å¦ï¼&lt;/li&gt; 
 &lt;li&gt;ç±äºè½¯ä»¶æ´æ°åå ï¼åäººèµååäººå¯¹æä¹éè¦ocrï¼ææç­é¢ä¸åå½±å&lt;/li&gt; 
 &lt;li&gt;ä¿®å¤ç¹å»âæçâæ¶è·³è½¬å°æç´¢æ¡bug&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;v2.1 æ´æ°åå®¹:&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;å¦æææ¯å¨ç­é¢æä¸é¡¹ç­é¢å·²ç»ç­å®çæåµï¼ä¸ä¼å¡æ­»&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;v2.0 æ´æ°åå®¹:&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;å®æäºææç­é¢ãåäººèµååäººå¯¹ææ¨¡å&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;v1.2 æ´æ°åå®¹:&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;æ´æ°v1.1çæ¬æ æ³è·åå·²å®æéè¯»æ°çbug&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;v1.1 æ´æ°åå®¹:&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;å¦æä½ å·²ç»çäºå åéçè§é¢æèå ç¯æç« ï¼é£ä¹åªéè¦åçå©ä½çç§¯åå¥å±æ¶é´å³å¯&lt;/li&gt; 
 &lt;li&gt;å®æäºæ¯æ¥ç­é¢ä¸æ¯å¨ç­é¢éå°åéæåµçéå&lt;/li&gt; 
 &lt;li&gt;ä¸é¡¹ç­é¢å¯ä»¥å®æç»§ç»­ç­é¢æ¨¡å&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h1&gt;å¾ç¼å&lt;/h1&gt; 
&lt;ol&gt; 
 &lt;li&gt;å¡«ç©ºé¢å¦æææ¬æ¡æåå¼çæåµè¿æªè§£å³&lt;/li&gt; 
 &lt;li&gt;è®¢éä¸åè¡¨è¨è®ºæ¨¡åæªç¼å&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>glixzzy/blooket-hack</title>
      <link>https://github.com/glixzzy/blooket-hack</link>
      <description>&lt;p&gt;Multiple game hacks to use so the game becomes easier to play!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Discord server: &lt;a href=&quot;https://discord.gg/K5xUbuDqmG&quot;&gt;https://discord.gg/K5xUbuDqmG&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;Blooket-Hack&lt;/h1&gt; 
&lt;p&gt;All of the cheats are based on a game mode.&lt;/p&gt; 
&lt;p&gt;People who are developers and want to make something for blooket I recommend checking out: &lt;a href=&quot;https://github.com/glixzzy/blooket-wrapper&quot;&gt;https://github.com/glixzzy/blooket-wrapper&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;All these bookmarklets are also at: &lt;a href=&quot;https://schoolcheats.net/blooket&quot;&gt;https://schoolcheats.net/blooket&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h1&gt;Video Tutorial&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/73669084/142779206-6cef86be-b2a5-4958-8637-cb6bde2a42da.mp4&quot;&gt;https://user-images.githubusercontent.com/73669084/142779206-6cef86be-b2a5-4958-8637-cb6bde2a42da.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Bookmarklet tutorial:&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://streamable.com/t4u7i7&quot;&gt;https://streamable.com/t4u7i7&lt;/a&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make a bookmark (the star on the right side of the url bar if you are using chrome)&lt;/li&gt; 
 &lt;li&gt;Click on more at the bottom left corner&lt;/li&gt; 
 &lt;li&gt;Delete everything in the url box&lt;/li&gt; 
 &lt;li&gt;Type &lt;code&gt;javascript:&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Paste in the code&lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>louislam/uptime-kuma</title>
      <link>https://github.com/louislam/uptime-kuma</link>
      <description>&lt;p&gt;A fancy self-hosted monitoring tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Uptime Kuma&lt;/h1&gt; 
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/louislam/uptime-kuma&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/louislam/uptime-kuma&quot;&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://hub.docker.com/r/louislam/uptime-kuma&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/pulls/louislam/uptime-kuma&quot;&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://hub.docker.com/r/louislam/uptime-kuma&quot;&gt;&lt;img src=&quot;https://img.shields.io/docker/v/louislam/uptime-kuma/latest?label=docker%20image%20ver.&quot;&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/louislam/uptime-kuma&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/louislam/uptime-kuma&quot;&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://opencollective.com/uptime-kuma&quot;&gt;&lt;img src=&quot;https://opencollective.com/uptime-kuma/total/badge.svg?label=Open%20Collective%20Backers&amp;amp;color=brightgreen&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sponsors/louislam&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/sponsors/louislam?label=GitHub%20Sponsors&quot; alt=&quot;GitHub Sponsors&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;div align=&quot;center&quot; width=&quot;100%&quot;&gt; 
 &lt;img src=&quot;https://raw.githubusercontent.com/louislam/uptime-kuma/master/public/icon.svg?sanitize=true&quot; width=&quot;128&quot; alt=&quot;&quot;&gt; 
&lt;/div&gt; 
&lt;p&gt;It is a self-hosted monitoring tool like &quot;Uptime Robot&quot;.&lt;/p&gt; 
&lt;img src=&quot;https://uptime.kuma.pet/img/dark.jpg&quot; width=&quot;700&quot; alt=&quot;&quot;&gt; 
&lt;h2&gt;ð¥ Live Demo&lt;/h2&gt; 
&lt;p&gt;Try it!&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://demo.uptime.kuma.pet&quot;&gt;https://demo.uptime.kuma.pet&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;It is a temporary live demo, all data will be deleted after 10 minutes. The server is located in Tokyo, so if you live far from there, it may affect your experience. I suggest that you should install and try it out for the best demo experience.&lt;/p&gt; 
&lt;p&gt;VPS is sponsored by Uptime Kuma sponsors on &lt;a href=&quot;https://opencollective.com/uptime-kuma&quot;&gt;Open Collective&lt;/a&gt;! Thank you so much!&lt;/p&gt; 
&lt;h2&gt;â­ Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Monitoring uptime for HTTP(s) / TCP / HTTP(s) Keyword / Ping / DNS Record / Push / Steam Game Server.&lt;/li&gt; 
 &lt;li&gt;Fancy, Reactive, Fast UI/UX.&lt;/li&gt; 
 &lt;li&gt;Notifications via Telegram, Discord, Gotify, Slack, Pushover, Email (SMTP), and &lt;a href=&quot;https://github.com/louislam/uptime-kuma/tree/master/src/components/notifications&quot;&gt;70+ notification services, click here for the full list&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;20 second intervals.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/louislam/uptime-kuma/tree/master/src/languages&quot;&gt;Multi Languages&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Simple Status Page&lt;/li&gt; 
 &lt;li&gt;Ping Chart&lt;/li&gt; 
 &lt;li&gt;Certificate Info&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ð§ How to Install&lt;/h2&gt; 
&lt;h3&gt;ð³ Docker&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker volume create uptime-kuma
docker run -d --restart=always -p 3001:3001 -v uptime-kuma:/app/data --name uptime-kuma louislam/uptime-kuma:1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Browse to &lt;a href=&quot;http://localhost:3001&quot;&gt;http://localhost:3001&lt;/a&gt; after starting.&lt;/p&gt; 
&lt;h3&gt;ðªð» Non-Docker&lt;/h3&gt; 
&lt;p&gt;Required Tools: Node.js &amp;gt;= 14, git and pm2.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Update your npm to the latest version
npm install npm -g

git clone https://github.com/louislam/uptime-kuma.git
cd uptime-kuma
npm run setup

# Option 1. Try it
node server/server.js

# (Recommended) Option 2. Run in background using PM2
# Install PM2 if you don&#39;t have it: npm install pm2 -g
pm2 start server/server.js --name uptime-kuma
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Browse to &lt;a href=&quot;http://localhost:3001&quot;&gt;http://localhost:3001&lt;/a&gt; after starting.&lt;/p&gt; 
&lt;h3&gt;Advanced Installation&lt;/h3&gt; 
&lt;p&gt;If you need more options or need to browse via a reverse proxy, please read:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/louislam/uptime-kuma/wiki/%F0%9F%94%A7-How-to-Install&quot;&gt;https://github.com/louislam/uptime-kuma/wiki/%F0%9F%94%A7-How-to-Install&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;ð How to Update&lt;/h2&gt; 
&lt;p&gt;Please read:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/louislam/uptime-kuma/wiki/%F0%9F%86%99-How-to-Update&quot;&gt;https://github.com/louislam/uptime-kuma/wiki/%F0%9F%86%99-How-to-Update&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;ð What&#39;s Next?&lt;/h2&gt; 
&lt;p&gt;I will mark requests/issues to the next milestone.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/louislam/uptime-kuma/milestones&quot;&gt;https://github.com/louislam/uptime-kuma/milestones&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Project Plan:&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/louislam/uptime-kuma/projects/1&quot;&gt;https://github.com/louislam/uptime-kuma/projects/1&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;ð¼ More Screenshots&lt;/h2&gt; 
&lt;p&gt;Light Mode:&lt;/p&gt; 
&lt;img src=&quot;https://uptime.kuma.pet/img/light.jpg&quot; width=&quot;512&quot; alt=&quot;&quot;&gt; 
&lt;p&gt;Status Page:&lt;/p&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/1336778/134628766-a3fe0981-0926-4285-ab46-891a21c3e4cb.png&quot; width=&quot;512&quot; alt=&quot;&quot;&gt; 
&lt;p&gt;Settings Page:&lt;/p&gt; 
&lt;img src=&quot;https://louislam.net/uptimekuma/2.jpg&quot; width=&quot;400&quot; alt=&quot;&quot;&gt; 
&lt;p&gt;Telegram Notification Sample:&lt;/p&gt; 
&lt;img src=&quot;https://louislam.net/uptimekuma/3.jpg&quot; width=&quot;400&quot; alt=&quot;&quot;&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;I was looking for a self-hosted monitoring tool like &quot;Uptime Robot&quot;, but it is hard to find a suitable one. One of the close ones is statping. Unfortunately, it is not stable and unmaintained.&lt;/li&gt; 
 &lt;li&gt;Want to build a fancy UI.&lt;/li&gt; 
 &lt;li&gt;Learn Vue 3 and vite.js.&lt;/li&gt; 
 &lt;li&gt;Show the power of Bootstrap 5.&lt;/li&gt; 
 &lt;li&gt;Try to use WebSocket with SPA instead of REST API.&lt;/li&gt; 
 &lt;li&gt;Deploy my first Docker image to Docker Hub.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you love this project, please consider giving me a â­.&lt;/p&gt; 
&lt;h2&gt;ð£ï¸ Discussion&lt;/h2&gt; 
&lt;h3&gt;Issues Page&lt;/h3&gt; 
&lt;p&gt;You can discuss or ask for help in &lt;a href=&quot;https://github.com/louislam/uptime-kuma/issues&quot;&gt;issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Subreddit&lt;/h3&gt; 
&lt;p&gt;My Reddit account: louislamlam You can mention me if you ask a question on Reddit. &lt;a href=&quot;https://www.reddit.com/r/UptimeKuma/&quot;&gt;https://www.reddit.com/r/UptimeKuma/&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;If you want to report a bug or request a new feature. Free feel to open a &lt;a href=&quot;https://github.com/louislam/uptime-kuma/issues&quot;&gt;new issue&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to translate Uptime Kuma into your language, please read: &lt;a href=&quot;https://github.com/louislam/uptime-kuma/tree/master/src/languages&quot;&gt;https://github.com/louislam/uptime-kuma/tree/master/src/languages&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;If you want to modify Uptime Kuma, this guideline may be useful for you: &lt;a href=&quot;https://github.com/louislam/uptime-kuma/raw/master/CONTRIBUTING.md&quot;&gt;https://github.com/louislam/uptime-kuma/blob/master/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;English proofreading is needed too because my grammar is not that great, sadly. Feel free to correct my grammar in this README, source code, or wiki.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>xifangczy/cat-catch</title>
      <link>https://github.com/xifangczy/cat-catch</link>
      <description>&lt;p&gt;ç«æ chromeåªä½åæ¢æä»¶&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ç®ä»&lt;/h2&gt; 
&lt;p&gt;ç«æ chromeåªä½åæ¢æä»¶&lt;/p&gt; 
&lt;h2&gt;å·²è¢«ä¸æ¶&lt;/h2&gt; 
&lt;p&gt;å ä¸ºChromeå®æ¹æ©å±ç½ç«æ¿ç­åå ï¼å·²ç»è¢«ä¸æ¶ã ä¸æ¶åå  &quot;åå©ç¨æ·æèªè®¿é®æä¸è½½åçæä¿æ¤çåå®¹æåªä½ã&quot; ä¹ååªä¼å¨githubæ´æ°ååå¸.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>atomiks/floating-ui</title>
      <link>https://github.com/atomiks/floating-ui</link>
      <description>&lt;p&gt;JavaScript positioning library for tooltips, popovers, dropdowns, and more&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img height=&quot;300&quot; src=&quot;https://github.com/atomiks/floating-ui/raw/main/website/assets/logo.png&quot; alt=&quot;Floating UI&quot;&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Powerful positioning primitives&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://floating-ui.com&quot;&gt;Website&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Floating UI is a low-level library for positioning &quot;floating&quot; elements like tooltips, popovers, dropdowns, menus and more. Since these types of elements float on top of the UI without disrupting the flow of content, challenges arise when positioning them.&lt;/p&gt; 
&lt;p&gt;Floating UI exposes primitives which enable a floating element to be positioned next to a given reference element while appearing in view for the user as best as possible. Features include overflow prevention (or collision awareness), placement flipping, and more.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Tiny&lt;/strong&gt;: 600-byte core with highly modular architecture for tree-shaking&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Low-level&lt;/strong&gt;: Hyper-granular control over positioning behavior&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Pure&lt;/strong&gt;: Predictable, side-effect free behavior&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: Powerful middleware system&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Platform-agnostic&lt;/strong&gt;: Runs on any JavaScript environment which provides measurement APIs, including the web and React Native&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;To use it on the web:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install @floating-ui/dom
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;yarn add @floating-ui/dom
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Quick start&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {computePosition} from &#39;@floating-ui/dom&#39;;

const referenceElement = document.querySelector(&#39;#button&#39;);
const floatingElement = document.querySelector(&#39;#tooltip&#39;);

function applyStyles({x = 0, y = 0, strategy = &#39;absolute&#39;}) {
  Object.assign(floatingElement.style, {
    position: strategy,
    left: `${x}px`,
    top: `${y}px`,
  });
}

applyStyles();

computePosition(referenceElement, floatingElement, {
  placement: &#39;right&#39;,
}).then(applyStyles);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;a href=&quot;https://floating-ui.com/docs/computePosition&quot;&gt;Visit the docs for detailed information&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;React&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://floating-ui.com/docs/react-dom&quot;&gt;React DOM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://floating-ui.com/docs/react-native&quot;&gt;React Native&lt;/a&gt; (*experimental)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Components&lt;/h2&gt; 
&lt;p&gt;Right now, Floating UI focuses on positioning floating elements, but a package that exposes higher-level primitives for building these elements more easily is in development.&lt;/p&gt; 
&lt;h2&gt;Inspiration&lt;/h2&gt; 
&lt;p&gt;Floating UI is an evolution of libraries in this space like Popper and Tether, developed by the co-author of the former and creator of Tippy.js. Much of the code is forked from Popper 2&#39;s codebase and adapted to the new API.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;This project a monorepo written in TypeScript using npm workspaces. The website is using Next.js SSG and Tailwind CSS for styling.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the repo&lt;/li&gt; 
 &lt;li&gt;Install dependencies in root directory with &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt; in the root will launch the &lt;code&gt;@floating-ui/dom&lt;/code&gt; development visual tests at &lt;code&gt;http://localhost:1234/spec&lt;/code&gt;. You can fiddle around with each test file in &lt;code&gt;packages/dom/test/visual/spec/&lt;/code&gt;. Reload the page to see your changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gchq/CyberChef</title>
      <link>https://github.com/gchq/CyberChef</link>
      <description>&lt;p&gt;The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CyberChef&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/gchq/CyberChef/actions?query=workflow%3A%22Master+Build%2C+Test+%26+Deploy%22&quot;&gt;&lt;img src=&quot;https://github.com/gchq/CyberChef/workflows/Master%20Build,%20Test%20&amp;amp;%20Deploy/badge.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://lgtm.com/projects/g/gchq/CyberChef/context:javascript&quot;&gt;&lt;img src=&quot;https://img.shields.io/lgtm/grade/javascript/g/gchq/CyberChef.svg?logo=lgtm&amp;amp;logoWidth=18&quot; alt=&quot;Language grade: JavaScript&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/gchq/CyberChef&quot;&gt;&lt;img src=&quot;https://david-dm.org/gchq/CyberChef/status.svg?sanitize=true&quot; alt=&quot;dependencies Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/cyberchef&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/cyberchef.svg?sanitize=true&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/gchq/CyberChef/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202.0-blue.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/gchq/CyberChef?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/gchq/CyberChef.svg?sanitize=true&quot; alt=&quot;Gitter&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;em&gt;The Cyber Swiss Army Knife&lt;/em&gt;&lt;/h4&gt; 
&lt;p&gt;CyberChef is a simple, intuitive web app for carrying out all manner of &quot;cyber&quot; operations within a web browser. These operations include simple encoding like XOR or Base64, more complex encryption like AES, DES and Blowfish, creating binary and hexdumps, compression and decompression of data, calculating hashes and checksums, IPv6 and X.509 parsing, changing character encodings, and much more.&lt;/p&gt; 
&lt;p&gt;The tool is designed to enable both technical and non-technical analysts to manipulate data in complex ways without having to deal with complex tools or algorithms. It was conceived, designed, built and incrementally improved by an analyst in their 10% innovation time over several years.&lt;/p&gt; 
&lt;h2&gt;Live demo&lt;/h2&gt; 
&lt;p&gt;CyberChef is still under active development. As a result, it shouldn&#39;t be considered a finished product. There is still testing and bug fixing to do, new features to be added and additional documentation to write. Please contribute!&lt;/p&gt; 
&lt;p&gt;Cryptographic operations in CyberChef should not be relied upon to provide security in any situation. No guarantee is offered for their correctness.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef&quot;&gt;A live demo can be found here&lt;/a&gt; - have fun!&lt;/p&gt; 
&lt;h2&gt;How it works&lt;/h2&gt; 
&lt;p&gt;There are four main areas in CyberChef:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The &lt;strong&gt;input&lt;/strong&gt; box in the top right, where you can paste, type or drag the text or file you want to operate on.&lt;/li&gt; 
 &lt;li&gt;The &lt;strong&gt;output&lt;/strong&gt; box in the bottom right, where the outcome of your processing will be displayed.&lt;/li&gt; 
 &lt;li&gt;The &lt;strong&gt;operations&lt;/strong&gt; list on the far left, where you can find all the operations that CyberChef is capable of in categorised lists, or by searching.&lt;/li&gt; 
 &lt;li&gt;The &lt;strong&gt;recipe&lt;/strong&gt; area in the middle, where you can drag the operations that you want to use and specify arguments and options.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;You can use as many operations as you like in simple or complex ways. Some examples are as follows:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Base64(&#39;A-Za-z0-9%2B/%3D&#39;,true)&amp;amp;input=VTI4Z2JHOXVaeUJoYm1RZ2RHaGhibXR6SUdadmNpQmhiR3dnZEdobElHWnBjMmd1&quot;&gt;Decode a Base64-encoded string&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Translate_DateTime_Format(&#39;Standard%20date%20and%20time&#39;,&#39;DD/MM/YYYY%20HH:mm:ss&#39;,&#39;UTC&#39;,&#39;dddd%20Do%20MMMM%20YYYY%20HH:mm:ss%20Z%20z&#39;,&#39;Australia/Queensland&#39;)&amp;amp;input=MTUvMDYvMjAxNSAyMDo0NTowMA&quot;&gt;Convert a date and time to a different time zone&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Parse_IPv6_address()&amp;amp;input=MjAwMTowMDAwOjQxMzY6ZTM3ODo4MDAwOjYzYmY6M2ZmZjpmZGQy&quot;&gt;Parse a Teredo IPv6 address&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Hexdump()Gunzip()&amp;amp;input=MDAwMDAwMDAgIDFmIDhiIDA4IDAwIDEyIGJjIGYzIDU3IDAwIGZmIDBkIGM3IGMxIDA5IDAwIDIwICB8Li4uLi6881cu/y7HwS4uIHwKMDAwMDAwMTAgIDA4IDA1IGQwIDU1IGZlIDA0IDJkIGQzIDA0IDFmIGNhIDhjIDQ0IDIxIDViIGZmICB8Li7QVf4uLdMuLsouRCFb/3wKMDAwMDAwMjAgIDYwIGM3IGQ3IDAzIDE2IGJlIDQwIDFmIDc4IDRhIDNmIDA5IDg5IDBiIDlhIDdkICB8YMfXLi6%2BQC54Sj8uLi4ufXwKMDAwMDAwMzAgIDRlIGM4IDRlIDZkIDA1IDFlIDAxIDhiIDRjIDI0IDAwIDAwIDAwICAgICAgICAgICB8TshObS4uLi5MJC4uLnw&quot;&gt;Convert data from a hexdump, then decompress&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=RC4(%7B&#39;option&#39;:&#39;UTF8&#39;,&#39;string&#39;:&#39;secret&#39;%7D,&#39;Hex&#39;,&#39;Hex&#39;)Disassemble_x86(&#39;64&#39;,&#39;Full%20x86%20architecture&#39;,16,0,true,true)&amp;amp;input=MjFkZGQyNTQwMTYwZWU2NWZlMDc3NzEwM2YyYTM5ZmJlNWJjYjZhYTBhYWJkNDE0ZjkwYzZjYWY1MzEyNzU0YWY3NzRiNzZiM2JiY2QxOTNjYjNkZGZkYmM1YTI2NTMzYTY4NmI1OWI4ZmVkNGQzODBkNDc0NDIwMWFlYzIwNDA1MDcxMzhlMmZlMmIzOTUwNDQ2ZGIzMWQyYmM2MjliZTRkM2YyZWIwMDQzYzI5M2Q3YTVkMjk2MmMwMGZlNmRhMzAwNzJkOGM1YTZiNGZlN2Q4NTlhMDQwZWVhZjI5OTczMzYzMDJmNWEwZWMxOQ&quot;&gt;Decrypt and disassemble shellcode&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Fork(&#39;%5C%5Cn&#39;,&#39;%5C%5Cn&#39;,false)From_UNIX_Timestamp(&#39;Seconds%20(s)&#39;)&amp;amp;input=OTc4MzQ2ODAwCjEwMTI2NTEyMDAKMTA0NjY5NjQwMAoxMDgxMDg3MjAwCjExMTUzMDUyMDAKMTE0OTYwOTYwMA&quot;&gt;Display multiple timestamps as full dates&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Fork(&#39;%5C%5Cn&#39;,&#39;%5C%5Cn&#39;,false)Conditional_Jump(&#39;1&#39;,false,&#39;base64&#39;,10)To_Hex(&#39;Space&#39;)Return()Label(&#39;base64&#39;)To_Base64(&#39;A-Za-z0-9%2B/%3D&#39;)&amp;amp;input=U29tZSBkYXRhIHdpdGggYSAxIGluIGl0ClNvbWUgZGF0YSB3aXRoIGEgMiBpbiBpdA&quot;&gt;Carry out different operations on data of different types&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Register(&#39;key%3D(%5B%5C%5Cda-f%5D*)&#39;,true,false)Find_/_Replace(%7B&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;.*data%3D(.*)&#39;%7D,&#39;$1&#39;,true,false,true)RC4(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;$R0&#39;%7D,&#39;Hex&#39;,&#39;Latin1&#39;)&amp;amp;input=aHR0cDovL21hbHdhcmV6LmJpei9iZWFjb24ucGhwP2tleT0wZTkzMmE1YyZkYXRhPThkYjdkNWViZTM4NjYzYTU0ZWNiYjMzNGUzZGIxMQ&quot;&gt;Use parts of the input as arguments to operations&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Register(&#39;(.%7B32%7D)&#39;,true,false)Drop_bytes(0,32,false)AES_Decrypt(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;1748e7179bd56570d51fa4ba287cc3e5&#39;%7D,%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;$R0&#39;%7D,&#39;CTR&#39;,&#39;Hex&#39;,&#39;Raw&#39;,%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;&#39;%7D)&amp;amp;input=NTFlMjAxZDQ2MzY5OGVmNWY3MTdmNzFmNWI0NzEyYWYyMGJlNjc0YjNiZmY1M2QzODU0NjM5NmVlNjFkYWFjNDkwOGUzMTljYTNmY2Y3MDg5YmZiNmIzOGVhOTllNzgxZDI2ZTU3N2JhOWRkNmYzMTFhMzk0MjBiODk3OGU5MzAxNGIwNDJkNDQ3MjZjYWVkZjU0MzZlYWY2NTI0MjljMGRmOTRiNTIxNjc2YzdjMmNlODEyMDk3YzI3NzI3M2M3YzcyY2Q4OWFlYzhkOWZiNGEyNzU4NmNjZjZhYTBhZWUyMjRjMzRiYTNiZmRmN2FlYjFkZGQ0Nzc2MjJiOTFlNzJjOWU3MDlhYjYwZjhkYWY3MzFlYzBjYzg1Y2UwZjc0NmZmMTU1NGE1YTNlYzI5MWNhNDBmOWU2MjlhODcyNTkyZDk4OGZkZDgzNDUzNGFiYTc5YzFhZDE2NzY3NjlhN2MwMTBiZjA0NzM5ZWNkYjY1ZDk1MzAyMzcxZDYyOWQ5ZTM3ZTdiNGEzNjFkYTQ2OGYxZWQ1MzU4OTIyZDJlYTc1MmRkMTFjMzY2ZjMwMTdiMTRhYTAxMWQyYWYwM2M0NGY5NTU3OTA5OGExNWUzY2Y5YjQ0ODZmOGZmZTljMjM5ZjM0ZGU3MTUxZjZjYTY1MDBmZTRiODUwYzNmMWMwMmU4MDFjYWYzYTI0NDY0NjE0ZTQyODAxNjE1YjhmZmFhMDdhYzgyNTE0OTNmZmRhN2RlNWRkZjMzNjg4ODBjMmI5NWIwMzBmNDFmOGYxNTA2NmFkZDA3MWE2NmNmNjBlNWY0NmYzYTIzMGQzOTdiNjUyOTYzYTIxYTUzZg&quot;&gt;Perform AES decryption, extracting the IV from the beginning of the cipher stream&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=Magic(3,false,false)&amp;amp;input=V1VhZ3dzaWFlNm1QOGdOdENDTFVGcENwQ0IyNlJtQkRvREQ4UGFjZEFtekF6QlZqa0syUXN0RlhhS2hwQzZpVVM3UkhxWHJKdEZpc29SU2dvSjR3aGptMWFybTg2NHFhTnE0UmNmVW1MSHJjc0FhWmM1VFhDWWlmTmRnUzgzZ0RlZWpHWDQ2Z2FpTXl1QlY2RXNrSHQxc2NnSjg4eDJ0TlNvdFFEd2JHWTFtbUNvYjJBUkdGdkNLWU5xaU45aXBNcTFaVTFtZ2tkYk51R2NiNzZhUnRZV2hDR1VjOGc5M1VKdWRoYjhodHNoZVpud1RwZ3FoeDgzU1ZKU1pYTVhVakpUMnptcEM3dVhXdHVtcW9rYmRTaTg4WXRrV0RBYzFUb291aDJvSDRENGRkbU5LSldVRHBNd21uZ1VtSzE0eHdtb21jY1BRRTloTTE3MkFQblNxd3hkS1ExNzJSa2NBc3lzbm1qNWdHdFJtVk5OaDJzMzU5d3I2bVMyUVJQ&quot;&gt;Automagically detect several layers of nested encoding&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Drag and drop 
  &lt;ul&gt; 
   &lt;li&gt;Operations can be dragged in and out of the recipe list, or reorganised.&lt;/li&gt; 
   &lt;li&gt;Files up to 2GB can be dragged over the input box to load them directly into the browser.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Auto Bake 
  &lt;ul&gt; 
   &lt;li&gt;Whenever you modify the input or the recipe, CyberChef will automatically &quot;bake&quot; for you and produce the output immediately.&lt;/li&gt; 
   &lt;li&gt;This can be turned off and operated manually if it is affecting performance (if the input is very large, for instance).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Automated encoding detection 
  &lt;ul&gt; 
   &lt;li&gt;CyberChef uses &lt;a href=&quot;https://github.com/gchq/CyberChef/wiki/Automatic-detection-of-encoded-data-using-CyberChef-Magic&quot;&gt;a number of techniques&lt;/a&gt; to attempt to automatically detect which encodings your data is under. If it finds a suitable operation which can make sense of your data, it displays the &#39;magic&#39; icon in the Output field which you can click to decode your data.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Breakpoints 
  &lt;ul&gt; 
   &lt;li&gt;You can set breakpoints on any operation in your recipe to pause execution before running it.&lt;/li&gt; 
   &lt;li&gt;You can also step through the recipe one operation at a time to see what the data looks like at each stage.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Save and load recipes 
  &lt;ul&gt; 
   &lt;li&gt;If you come up with an awesome recipe that you know youâll want to use again, just click &quot;Save recipe&quot; and add it to your local storage. It&#39;ll be waiting for you next time you visit CyberChef.&lt;/li&gt; 
   &lt;li&gt;You can also copy the URL, which includes your recipe and input, to easily share it with others.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Search 
  &lt;ul&gt; 
   &lt;li&gt;If you know the name of the operation you want or a word associated with it, start typing it into the search field and any matching operations will immediately be shown.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Highlighting 
  &lt;ul&gt; 
   &lt;li&gt;When you highlight text in the input or output, the offset and length values will be displayed and, if possible, the corresponding data will be highlighted in the output or input respectively (example: &lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=XOR(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;3a&#39;%7D,&#39;Standard&#39;,false)To_Hexdump(16,false,false)&amp;amp;input=VGhlIGFuc3dlciB0byB0aGUgdWx0aW1hdGUgcXVlc3Rpb24gb2YgbGlmZSwgdGhlIFVuaXZlcnNlLCBhbmQgZXZlcnl0aGluZyBpcyA0Mi4&quot;&gt;highlight the word &#39;question&#39; in the input to see where it appears in the output&lt;/a&gt;).&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Save to file and load from file 
  &lt;ul&gt; 
   &lt;li&gt;You can save the output to a file at any time or load a file by dragging and dropping it into the input field. Files up to around 2GB are supported (depending on your browser), however some operations may take a very long time to run over this much data.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;CyberChef is entirely client-side 
  &lt;ul&gt; 
   &lt;li&gt;It should be noted that none of your recipe configuration or input (either text or files) is ever sent to the CyberChef web server - all processing is carried out within your browser, on your own computer.&lt;/li&gt; 
   &lt;li&gt;Due to this feature, CyberChef can be downloaded and run locally. You can use the link in the top left corner of the app to download a full copy of CyberChef and drop it into a virtual machine, share it with other people, or host it in a closed network.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Deep linking&lt;/h2&gt; 
&lt;p&gt;By manipulation of CyberChef&#39;s URL hash, you can change the initial settings with which the page opens. The format is &lt;code&gt;https://gchq.github.io/CyberChef/#recipe=Operation()&amp;amp;input=...&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Supported arguments are &lt;code&gt;recipe&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt; (encoded in Base64), and &lt;code&gt;theme&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Browser support&lt;/h2&gt; 
&lt;p&gt;CyberChef is built to support&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Google Chrome 50+&lt;/li&gt; 
 &lt;li&gt;Mozilla Firefox 38+&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Node.js support&lt;/h2&gt; 
&lt;p&gt;CyberChef is built to fully support Node.js &lt;code&gt;v10&lt;/code&gt; and partially supports &lt;code&gt;v12&lt;/code&gt;. Named imports using a deep import specifier does not work in &lt;code&gt;v12&lt;/code&gt;. For more information, see the Node API page in the project &lt;a href=&quot;https://github.com/gchq/CyberChef/wiki&quot;&gt;wiki pages&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Contributing a new operation to CyberChef is super easy! There is a quickstart script which will walk you through the process. If you can write basic JavaScript, you can write a CyberChef operation.&lt;/p&gt; 
&lt;p&gt;An installation walkthrough, how-to guides for adding new operations and themes, descriptions of the repository structure, available data types and coding conventions can all be found in the project &lt;a href=&quot;https://github.com/gchq/CyberChef/wiki&quot;&gt;wiki pages&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Push your changes to your fork.&lt;/li&gt; 
 &lt;li&gt;Submit a pull request. If you are doing this for the first time, you will be prompted to sign the &lt;a href=&quot;https://cla-assistant.io/gchq/CyberChef&quot;&gt;GCHQ Contributor Licence Agreement&lt;/a&gt; via the CLA assistant on the pull request. This will also ask whether you are happy for GCHQ to contact you about a token of thanks for your contribution, or about job opportunities at GCHQ.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Licencing&lt;/h2&gt; 
&lt;p&gt;CyberChef is released under the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache 2.0 Licence&lt;/a&gt; and is covered by &lt;a href=&quot;https://www.nationalarchives.gov.uk/information-management/re-using-public-sector-information/copyright-and-re-use/crown-copyright/&quot;&gt;Crown Copyright&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>smiek2121/scripts</title>
      <link>https://github.com/smiek2121/scripts</link>
      <description>&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jd_scripts&lt;/h1&gt; 
&lt;p&gt;â&lt;/p&gt; 
&lt;h1&gt;é¢é&lt;/h1&gt; 
&lt;h3&gt;&lt;a href=&quot;https://t.me/s_guaguagua&quot;&gt;ç¹å»ç´è¾¾é¢é&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;â&lt;/p&gt; 
&lt;h1&gt;é¢ç&lt;/h1&gt; 
&lt;h3&gt;è¯´ç¹å¥å¢&lt;/h3&gt;</description>
    </item>
    
    <item>
      <title>TechXueXi/techxuexi-js</title>
      <link>https://github.com/TechXueXi/techxuexi-js</link>
      <description>&lt;p&gt;æ²¹ç´ç­æä»¶ç å­¦ä¹ å¼ºå½ js ä»£ç  45å/å¤©&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;techxuexi-js&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/TechXueXi/TechXueXi/issues/14&quot;&gt;äº¤æµç¾¤å°ååè¯´æï¼ç¹å»æ¥çï¼&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;æä»¬éæ¶å åºè·è·¯ï¼è¯·å äº¤æµç¾¤é²å¤±èã&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;æå»ºè®®è¯´ä¸ä¼ å° greasyforkï¼æ¹ä¾¿æ´æ°ãå¶å®ï¼æä»¬å¨è¿éåå¸ï¼æ¯å ä¸ºæåå¿åç° greasyfork &lt;strong&gt;æå®¡æ¥&lt;/strong&gt;ï¼ä¸ä¼ å°±è¢«ä¸¾æ¥ï¼è¢«å°ï¼&lt;strong&gt;é½æ²¡æå°æ¹å¯ä»¥ä¸è½½&lt;/strong&gt;ï¼æä»¥å¨è¿éå¼åºæ¶éçã&lt;strong&gt;è¯¥åå¿è¡¨ç¤ºï¼ ä¹ æ¯å¨ greasyfork æ¾å¼ºå½ä½ç³»xxçäººï¼å¤ªå¹´è½»äºï¼è¿ä¸ç¥éç¤¾ä¼çé©æ¶&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;æ¶éæ²¹ç´ç­æä»¶çç§æå¼ºå½ js ä»£ç ã&lt;/p&gt; 
&lt;p&gt;è¿éæ²¡æåç§æ¶å¿çå®¡æ¥ï¼æ¬¢è¿å¤§å®¶æäº¤è´¡ç®ï¼æ¯å¦æ°å¢èæ¬ï¼ä¿®æ¹ä»£ç ç­ã&lt;/p&gt; 
&lt;p&gt;æäº¤è´¡ç®æ¹æ³ï¼ &lt;a href=&quot;https://github.com/TechXueXi/TechXueXi/raw/dev/CONTRIBUTING.md&quot;&gt;https://github.com/TechXueXi/TechXueXi/blob/dev/CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;ä½¿ç¨æ¹æ³&lt;/h2&gt; 
&lt;p&gt;è¯·ä¼åä½¿ç¨ ä¸å­¦ä¹ ä½ä»¥å¼ºå½ ï¼å®å¯ä»¥å¨èªå¨ï¼ä»¥åç»´æ¤å·¥ä½ä»¥å®ä¸ºä¸»ï¼ å¼ºå½å­¦ä¹  éè¦æå¨è¿å¥ç­é¢ã&lt;/p&gt; 
&lt;p&gt;è£ä¸ªæµè§å¨æä»¶ tampermonkey ï¼ç½ä¸å¾å¤æç¨ï¼ï¼ç¹å»æä»¶éæ·»å æé®ï¼å»æç¼è¾æ¡éåæ¥çä»£ç ï¼æ ä¸å­¦ä¹ ä½ä»¥å¼ºå½ js èæ¬å¤å¶ç²è´´è¿ç¼è¾æ¡ä¿å­ãå¼å¯è¿ä¸ªèæ¬ï¼ç¶åè¿å¥ç½é¡µå¼ºå½ &lt;a href=&quot;http://www.xuexi.cn&quot;&gt;www.xuexi.cn&lt;/a&gt; ç»å½ï¼å·æ°ç»å½ç½é¡µï¼å·¦ä¸è§æå¯å¨æé®ã&lt;/p&gt; 
&lt;h2&gt;ä¸æ³æ¯å¤©å¼çµèå­¦ä¹ ï¼å¯ä»¥éç½® techxuexi python å¨æå¡å¨ã &lt;a href=&quot;https://github.com/TechXueXi/TechXueXi&quot;&gt;https://github.com/TechXueXi/TechXueXi&lt;/a&gt;&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>matt8707/hass-config</title>
      <link>https://github.com/matt8707/hass-config</link>
      <description>&lt;p&gt;A different take on designing a Lovelace UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Home Assistant Configuration&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/installation/#compare-installation-methods&quot;&gt;Home Assistant Container&lt;/a&gt; on a Synology DiskStation DS918+ NAS. Use cases are a &lt;a href=&quot;https://www.samsung.com/us/mobile/tablets/galaxy-tab-a/galaxy-tab-a-10-1-2019-32gb-black-wi-fi-sm-t510nzkaxar/&quot;&gt;Galaxy Tab A 10.1&lt;/a&gt; (&lt;a href=&quot;https://www.durable.eu/information-and-presentation/tablet-holder/wall-mounted-tablet-holder/tablet-holder-wall.html&quot;&gt;wall mounted&lt;/a&gt;) tablet with &lt;a href=&quot;https://www.ozerov.de/fully-kiosk-browser/&quot;&gt;Fully Kiosk Browser&lt;/a&gt; and &lt;a href=&quot;https://github.com/mrvnklm/homeassistant-desktop&quot;&gt;homeassistant-desktop&lt;/a&gt; on macOS. My configuration is exposed to HomeKit with Apple TV acting as a hub for remote connection. I also support &lt;a href=&quot;https://www.nabucasa.com/&quot;&gt;Nabu Casa&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you like anything here, be sure to &lt;span&gt;ð&lt;/span&gt; my repo!&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/screenshot.png&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;How do I install this theme?&lt;/strong&gt; &lt;br&gt; There&#39;s no install button. I&#39;m sharing my full configuration&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Can you please add this to HACS?&lt;/strong&gt; &lt;br&gt; No, because this is not a custom card or integration&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Where do I even start?&lt;/strong&gt; &lt;br&gt; &lt;a href=&quot;https://community.home-assistant.io/t/a-different-take-on-designing-a-lovelace-ui/162594/1717&quot;&gt;This post explains how to get started&lt;/a&gt; &lt;span&gt;ð&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.home-assistant.io/lovelace/&quot;&gt;Lovelace UI&lt;/a&gt; using custom &lt;a href=&quot;https://github.com/custom-cards/button-card&quot;&gt;button-card&lt;/a&gt; and &lt;a href=&quot;https://github.com/thomasloven/lovelace-layout-card&quot;&gt;layout-card&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Portrait, landscape and mobile view - &lt;a href=&quot;https://user-images.githubusercontent.com/36163594/120789256-ad825000-c531-11eb-97c2-18904c48efdd.mp4&quot;&gt;responsive_demo.mp4&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Less cluttered interface by displaying more information in a popup&lt;/li&gt; 
 &lt;li&gt;Loading animation for slow responding entities&lt;/li&gt; 
 &lt;li&gt;Adding tap audio feedback to the UI for wall-mounted tablet&lt;/li&gt; 
 &lt;li&gt;Icon &lt;a href=&quot;https://www.w3schools.com/css/css3_animations.asp&quot;&gt;CSS animations&lt;/a&gt; based on entity state&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/animations.gif&quot; alt=&quot;animations&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Sidebar&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Time and date with greeting based on time of day&lt;/li&gt; 
 &lt;li&gt;Entities that are on, using natural language&lt;/li&gt; 
 &lt;li&gt;Mailbox counter to show received mail&lt;/li&gt; 
 &lt;li&gt;Temperature with emoji based on weather conditions&lt;/li&gt; 
 &lt;li&gt;Geofenced bus departures&lt;/li&gt; 
 &lt;li&gt;Important calendar information&lt;/li&gt; 
 &lt;li&gt;Other conditional alerts&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Sidebar footer&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Vacuum - card to control robot vacuum, with a live map&lt;/li&gt; 
 &lt;li&gt;Information - monitor Home Assistant, tablet and NAS&lt;/li&gt; 
 &lt;li&gt;Updates - lists Home Assistant release notes and HACS updates&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Popups&lt;/h4&gt; 
&lt;p&gt;Long press a button to show settings and information pertaining to the entity, using &lt;a href=&quot;https://github.com/thomasloven/hass-browser_mod&quot;&gt;browser_mod&lt;/a&gt;. Light popups are automatically created using the &lt;code&gt;light&lt;/code&gt; button-card template with &lt;a href=&quot;https://github.com/DBuit/light-popup-card&quot;&gt;light-popup-card&lt;/a&gt; and &lt;a href=&quot;https://github.com/ljmerza/light-entity-card&quot;&gt;light-entity-card&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/light.gif&quot; alt=&quot;light&quot;&gt;&lt;/p&gt; 
&lt;h4&gt;Media&lt;/h4&gt; 
&lt;p&gt;Conditionally display media players based on the last active device. If nothing is active for 15 minutes, a poster of the last downloaded movie/episode is shown (&lt;a href=&quot;https://github.com/plexinc/pms-docker&quot;&gt;Plex&lt;/a&gt;, &lt;a href=&quot;https://github.com/Radarr/Radarr&quot;&gt;Radarr&lt;/a&gt;, &lt;a href=&quot;https://github.com/Sonarr/Sonarr&quot;&gt;Sonarr&lt;/a&gt;). Swipe to reveal non-active media players&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/media.gif&quot; alt=&quot;media&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Theme&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/thomasloven/lovelace-card-mod&quot;&gt;card-mod&lt;/a&gt; is used for the styles in &lt;code&gt;include/themes.yaml&lt;/code&gt; and each popup also contain styles depending on content. I&#39;ve made a tool to help with css element selectors - &lt;a href=&quot;https://matt8707.github.io/card-mod-helper/&quot;&gt;https://matt8707.github.io/card-mod-helper/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/cardmod_helper.png&quot; alt=&quot;media&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Screenshots&lt;/h2&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/info_light_2.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/info_light_2.png&quot; alt=&quot;imac_light&quot;&gt;&lt;/a&gt;&lt;br&gt;iMac and Light&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/info_2.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/info_2.png&quot; alt=&quot;information&quot;&gt;&lt;/a&gt;&lt;br&gt;Information&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/vacuum_2.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/vacuum_2.png&quot; alt=&quot;vacuum&quot;&gt;&lt;/a&gt;&lt;br&gt;Vacuum&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/misc_2.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/misc_2.png&quot; alt=&quot;misc&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Misc&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/tracker_updates.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/tracker_updates.png&quot; alt=&quot;person_updates&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Person and Updates&lt;/strong&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/custom_icons.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matt8707/hass-config/master/www/img/custom_icons.png&quot; alt=&quot;custom_icons&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;www/custom_icons.js&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Hardware&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt;click to expand&lt;/summary&gt; 
 &lt;table&gt; 
  &lt;thead&gt; 
   &lt;tr&gt; 
    &lt;th&gt;Vendor&lt;/th&gt; 
    &lt;th&gt;Product&lt;/th&gt; 
    &lt;th&gt;Integration&lt;/th&gt; 
    &lt;th&gt;Description&lt;/th&gt; 
   &lt;/tr&gt; 
  &lt;/thead&gt; 
  &lt;tbody&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Ubiquiti&lt;/td&gt; 
    &lt;td&gt;UniFi Dream Machine&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/unifi/&quot;&gt;unifi&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Router, controller, switch and access point&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Synology&lt;/td&gt; 
    &lt;td&gt;DiskStation DS918+&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/synology_dsm/&quot;&gt;synology_dsm&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;4x4TB NAS - &lt;a href=&quot;https://github.com/matt8707/docker-compose-dsm&quot;&gt;matt8707/docker-compose-dsm&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Raspberry&lt;/td&gt; 
    &lt;td&gt;Pi 3 Model B+&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/shell_command/&quot;&gt;shell_command&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Bluetooth communication - &lt;a href=&quot;https://github.com/matt8707/docker-compose-rpi&quot;&gt;matt8707/docker-compose-rpi&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Samsung&lt;/td&gt; 
    &lt;td&gt;Galaxy Tab A SM-T510&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/cgarwood/homeassistant-fullykiosk&quot;&gt;custom&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Wall mounted tablet in hallway by the front door&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Philips&lt;/td&gt; 
    &lt;td&gt;Hue&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/hue/&quot;&gt;hue&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Bridge, 15 bulbs, 3 motion sensors, 2 dimmer switches&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Apple&lt;/td&gt; 
    &lt;td&gt;iMac&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/shell_command/&quot;&gt;shell_command&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;All-in-one desktop computer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;SwitchBot&lt;/td&gt; 
    &lt;td&gt;SwitchBot Bot&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/fphammerle/switchbot-mqtt&quot;&gt;custom&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Bluetooth device that mechanically turns on my computer&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Xiaomi&lt;/td&gt; 
    &lt;td&gt;Mi Roborock S50&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/xiaomi_miio/&quot;&gt;xiaomi_miio&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Robot vacuum with lidar - &lt;a href=&quot;https://github.com/PiotrMachowski/Home-Assistant-custom-components-Xiaomi-Cloud-Map-Extractor&quot;&gt;xiaomi-cloud-map-extractor&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Broadlink&lt;/td&gt; 
    &lt;td&gt;RM4 Pro, HTS2 cable&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/broadlink/&quot;&gt;broadlink&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Infrared transmitter for AC unit with temp/humidity sensor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Gosund&lt;/td&gt; 
    &lt;td&gt;SP112&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/esphome/&quot;&gt;esphome&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;3x tuya wifi plugs with power monitoring, flashed with ESPHome&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Belkin&lt;/td&gt; 
    &lt;td&gt;WeMo&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/wemo/&quot;&gt;wemo&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;2x wifi plugs and 1x motion sensor&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Google&lt;/td&gt; 
    &lt;td&gt;Nest Mini&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/cast/&quot;&gt;cast&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Not really used, Google sent me one&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Deltaco&lt;/td&gt; 
    &lt;td&gt;SH-P01&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/tuya/&quot;&gt;tuya&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Cheap wifi plug for balcony LED lights&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Phoscon&lt;/td&gt; 
    &lt;td&gt;ConBee II&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/Koenkk/zigbee2mqtt&quot;&gt;custom&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Zigbee USB gateway using zigbee2mqtt&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Xiaomi&lt;/td&gt; 
    &lt;td&gt;Aqara MCCGQ11LM&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/mqtt/&quot;&gt;mqtt&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;3x zigbee door/window contact sensors&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Apple&lt;/td&gt; 
    &lt;td&gt;TV 4K&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/apple_tv/&quot;&gt;apple_tv&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;2x set-top-boxes that streams content from Plex&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Sony&lt;/td&gt; 
    &lt;td&gt;Bravia KDL-55W905A&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/braviatv/&quot;&gt;braviatv&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;2013 mid-range 55&quot; 1080p 3D TV&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Samsung&lt;/td&gt; 
    &lt;td&gt;UE50RU6025KXXC&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/ollo69/ha-samsungtv-smart&quot;&gt;custom&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;2019 low-range 50&quot; 4K HDR TV&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Sony&lt;/td&gt; 
    &lt;td&gt;PlayStation 5&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://github.com/dhleong/playactor&quot;&gt;custom&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Game console - State, sleep and wake &lt;a href=&quot;https://community.home-assistant.io/t/playstation-5-command-line-sensor-help-command-failed-empty-json/256275/60&quot;&gt;#ps5 thread&lt;/a&gt;&lt;/td&gt; 
   &lt;/tr&gt; 
   &lt;tr&gt; 
    &lt;td&gt;Apple&lt;/td&gt; 
    &lt;td&gt;iPhone X&lt;/td&gt; 
    &lt;td&gt;&lt;a href=&quot;https://www.home-assistant.io/integrations/ios/&quot;&gt;ios&lt;/a&gt;&lt;/td&gt; 
    &lt;td&gt;Home Assistant Companion App for iOS&lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt; 
 &lt;/table&gt; 
 &lt;p&gt;&lt;em&gt;Note: I do not recommend &quot;Belkin WeMo&quot; or &quot;Deltaco SH-P01&quot;&lt;/em&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;GitHub Repository&lt;/strong&gt; &lt;a href=&quot;https://github.com/matt8707/hass-config&quot;&gt;https://github.com/matt8707/hass-config&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Home Assistant Community Topic&lt;/strong&gt; &lt;a href=&quot;https://community.home-assistant.io/t/a-different-take-on-designing-a-lovelace-ui/162594&quot;&gt;https://community.home-assistant.io/t/a-different-take-on-designing-a-lovelace-ui/162594&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>khanhas/spicetify-cli</title>
      <link>https://github.com/khanhas/spicetify-cli</link>
      <description>&lt;p&gt;Commandline tool to customize Spotify client. Supports Windows, MacOS and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/iwcLITQ.png&quot; width=&quot;600px&quot;&gt;&lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://goreportcard.com/report/github.com/khanhas/spicetify-cli&quot;&gt;&lt;img src=&quot;https://goreportcard.com/badge/github.com/khanhas/spicetify-cli&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/khanhas/spicetify-cli/releases/latest&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/khanhas/spicetify-cli/all.svg?colorB=97CA00?label=version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/khanhas/spicetify-cli/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/downloads/khanhas/spicetify-cli/total.svg?colorB=97CA00&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/VnevqPp2Rr&quot;&gt;&lt;img src=&quot;https://img.shields.io/discord/842219447716151306?label=Chat&amp;amp;logo=discord&amp;amp;logoColor=discord&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.reddit.com/r/spicetify&quot;&gt;&lt;img src=&quot;https://img.shields.io/reddit/subreddit-subscribers/spicetify?style=social&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p&gt;Command-line tool to customize the official Spotify client. Supports Windows, MacOS and Linux.&lt;/p&gt; 
&lt;img src=&quot;https://user-images.githubusercontent.com/26436809/118751529-d0abcf00-b8a4-11eb-9876-8b15f930a691.png&quot; alt=&quot;img&quot; align=&quot;right&quot; width=&quot;500px&quot;&gt; 
&lt;h3&gt;Features&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Change colors whole UI&lt;/li&gt; 
 &lt;li&gt;Inject CSS for advanced customization&lt;/li&gt; 
 &lt;li&gt;Inject Extensions (Javascript script) to extend functionalities, manipulate UI and control player.&lt;/li&gt; 
 &lt;li&gt;Inject Custom apps&lt;/li&gt; 
 &lt;li&gt;Remove bloated components to improve performance&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;&lt;a href=&quot;https://github.com/khanhas/spicetify-cli/wiki/Installation&quot;&gt;Installation&lt;/a&gt;&lt;/h4&gt; 
&lt;h4&gt;&lt;a href=&quot;https://github.com/khanhas/spicetify-cli/wiki/Basic-Usage&quot;&gt;Basic Usage&lt;/a&gt;&lt;/h4&gt; 
&lt;h4&gt;&lt;a href=&quot;https://github.com/khanhas/spicetify-cli/wiki/Customization&quot;&gt;Customization&lt;/a&gt;&lt;/h4&gt; 
&lt;h4&gt;&lt;a href=&quot;https://github.com/khanhas/spicetify-cli/wiki/Extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/h4&gt; 
&lt;h4&gt;&lt;a href=&quot;https://github.com/khanhas/spicetify-cli/wiki/Custom-Apps&quot;&gt;Custom Apps&lt;/a&gt;&lt;/h4&gt; 
&lt;h4&gt;&lt;a href=&quot;https://github.com/khanhas/spicetify-cli/wiki&quot;&gt;Wiki&lt;/a&gt;&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>Th3Wall/Fakeflix</title>
      <link>https://github.com/Th3Wall/Fakeflix</link>
      <description>&lt;p&gt;Not the usual clone that you can find on the web.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&quot;center&quot;&gt;Fakeflix&lt;/h1&gt; 
&lt;h5 align=&quot;center&quot;&gt;Not the usual clone that you can find on the web.&lt;/h5&gt;
&lt;br&gt; 
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/Fakeflix_readme.png&quot; alt=&quot;Image of Fakeflix Project&quot;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/25078541/123811962-01474580-d8f4-11eb-83ba-66cded3f321f.mp4&quot;&gt;https://user-images.githubusercontent.com/25078541/123811962-01474580-d8f4-11eb-83ba-66cded3f321f.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;ð¯ About&lt;/h2&gt; 
&lt;p&gt;I have started this project with the purpose of learning how to structure a Web App of a mid-level complexity integrating the Redux logic.&lt;br&gt; I&#39;ve tried to replicate the original layout as much as possible and I&#39;ve also made some improvements in some sections inserting route animations and micro-interactions. I&#39;ve also inserted a really close clone of Netflix&#39;s original splash animation (forked from a famous &lt;a href=&quot;https://codepen.io/claudio_bonfati/pen/mdryxPv&quot;&gt;codepen from Claudio Bonfati&lt;/a&gt;), made entirely with CSS, as well as the play animation. I have then sampled the original Netflix &quot;ta-duummm&quot; sound and I made it play along with the two animations.&lt;br&gt; I put a lot of effort into it and I hope that you could like it.&lt;br&gt;&lt;br&gt; The Web App redirects you to an authentication page, in which you can choose to sign up or to sign in: you can sign in with your custom account or with your Google account. Once you are logged in and after the splash animation, you will land on the homepage, in which you can find a mix of movies and series divided into rows.&lt;br&gt; Each row represents a movie/series category: you can click on it and you will be redirected to the selected category, a page that loads thousands of movies with an infinite scroll. You can also navigate to the movies page, series page, new &amp;amp; popular page (that contains the upcoming movies/series and the most popular ones) or you can navigate to your favorites page.&lt;br&gt; You can add/remove movies/series through the plus and minus buttons that you can find hovering each poster or opening a single movie&#39;s detail modal. If you click on the play button you can enjoy a custom CSS-only play animation with Fakeflix&#39;s brand name.&lt;br&gt; You have also the option to search through TMDB&#39;s catalogue using the search functionality inside the fixed navbar: you can search by movie name, actor or movie director.&lt;br&gt;&lt;br&gt; Go try it and please let me know if you enjoyed it with a â­ï¸, I would appreciate it a lot. &lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;â¶ï¸ Demo&lt;/h2&gt; 
&lt;p&gt;Here you can find the demo links:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fakeflix-clone.vercel.app/&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fakeflix-app.netlify.app/&quot;&gt;Netlify&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Test credentials (for lazy users ð)&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Email: &lt;a href=&quot;mailto:fakeflixuser@test.com&quot;&gt;fakeflixuser@test.com&lt;/a&gt;&lt;br&gt; Password: FakeflixTest&lt;br&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;I have also added a button that lets you sign in anonymously.&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;â¨&lt;/span&gt; Features&lt;/h2&gt; 
&lt;p&gt;&lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Display movies and series, old and upcoming, also from the real Netflix&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Category related page with infinite scroll&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Search by title, actor, movie director&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Add/Remove to/from &quot;My list&quot; functionality&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Detail modal with extra informations about the selected movie/series&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Customized splash animation (credits: &lt;a href=&quot;https://codepen.io/claudio_bonfati/pen/mdryxPv&quot;&gt;Claudio Bonfati&#39;s pen&lt;/a&gt;) with characteristic Netflix sound&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Play animation with characteristic Netflix sound&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Google login&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;User Sign In &amp;amp; User Sign Up&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Use of React hooks and custom hooks&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Favourites list persistence (session storage)&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Responsive layout&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Swipeable movies list&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Loading skeletons&lt;br&gt; &lt;span&gt;â&lt;/span&gt; &amp;nbsp;&amp;nbsp;Route animations and micro-interactions (handled with Framer Motion)&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span&gt;ð&lt;/span&gt; Technologies&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.themoviedb.org/&quot;&gt;TMDb API&#39;s&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;React Hooks&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://react-hook-form.com/&quot;&gt;React Hooks Form&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://reactrouter.com/web/guides/quick-start&quot;&gt;React Router&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reduxjs/redux-thunk&quot;&gt;Redux Thunk&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://redux-saga.js.org/&quot;&gt;Redux Saga&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/rt2zz/redux-persist&quot;&gt;Redux Persist&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/LogRocket/redux-logger&quot;&gt;Redux Logger&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/reduxjs/reselect&quot;&gt;Reselect&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sass-lang.com/&quot;&gt;SCSS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://swiperjs.com/react&quot;&gt;SwiperJS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.framer.com/motion/&quot;&gt;Framer Motion&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://react-icons.github.io/react-icons/&quot;&gt;React Icons&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.netlify.com&quot;&gt;Netlify&lt;/a&gt; (have a look below) and &lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt; for the deploy and CI.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Netlify deploy &amp;amp; configuration&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://app.netlify.com/sites/fakeflix-app/deploys&quot;&gt;&lt;img src=&quot;https://api.netlify.com/api/v1/badges/14a32bbb-d899-445d-8fa6-8bed739c0296/deploy-status&quot; alt=&quot;Netlify Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Deploy configuration steps&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Connect your GitHub account to Netlify&lt;/li&gt; 
 &lt;li&gt;Select the project&lt;/li&gt; 
 &lt;li&gt;In Settings â Build &amp;amp; Deploy â Set &lt;strong&gt;Build command&lt;/strong&gt; to : &lt;strong&gt;&lt;em&gt;npm run build&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;In Settings â Build &amp;amp; Deploy â Set &lt;strong&gt;Publish directory&lt;/strong&gt; to : &lt;strong&gt;&lt;em&gt;build&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;In Settings â Build &amp;amp; Deploy â Set &lt;strong&gt;Environment variables&lt;/strong&gt; â Click on &lt;strong&gt;Edit variables&lt;/strong&gt; and add yours (ie: TMBd&#39;s API key, Firebase configuration). &lt;br&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;ð¸ Screenshots&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Sign In&lt;/strong&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/screenshots/Fakeflix_SignIn.jpg&quot; alt=&quot;Screenshot of Fakeflix Sign In&quot;&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Sign Up&lt;/strong&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/screenshots/Fakeflix_SignUp.jpg&quot; alt=&quot;Screenshot of Fakeflix Sign Up&quot;&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Homepage&lt;/strong&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/screenshots/Fakeflix_Home.jpg&quot; alt=&quot;Screenshot of Fakeflix Homepage&quot;&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Modal Detail&lt;/strong&gt; &lt;img src=&quot;https://cdn.jsdelivr.net/gh/Th3Wall/assets-cdn/Fakeflix/screenshots/Fakeflix_DetailModal.jpg&quot; alt=&quot;Screenshot of Fakeflix Modal Detail&quot;&gt; &lt;br&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Mobile Experience&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/25078541/123543831-b8a35700-d750-11eb-84dc-b53e5a9a997a.mp4&quot;&gt;https://user-images.githubusercontent.com/25078541/123543831-b8a35700-d750-11eb-84dc-b53e5a9a997a.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;strong&gt;Desktop Experience&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://user-images.githubusercontent.com/25078541/123811962-01474580-d8f4-11eb-83ba-66cded3f321f.mp4&quot;&gt;https://user-images.githubusercontent.com/25078541/123811962-01474580-d8f4-11eb-83ba-66cded3f321f.mp4&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;ð¨ð»âð» Run Locally&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone the project&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  git clone https://github.com/Th3Wall/Fakeflix
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to the project directory&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  cd fakeflix
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install dependencies&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Create a .env file&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Request an API key from TMDB and them add it to the .env file&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;REACT_APP_API_KEY=REACT_APP_API_KEY
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Create a project inside Google Firebase and export the configuration&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Add the configuration inside the .env file created previously&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code&gt;REACT_APP_FIREBASE_API_KEY=REACT_APP_FIREBASE_API_KEY
REACT_APP_FIREBASE_AUTH_DOMAIN=REACT_APP_FIREBASE_AUTH_DOMAIN
REACT_APP_FIREBASE_PROJECT_ID=REACT_APP_FIREBASE_PROJECT_ID
REACT_APP_FIREBASE_STORAGE_BUCKET=REACT_APP_FIREBASE_STORAGE_BUCKET
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=REACT_APP_FIREBASE_MESSAGING_SENDER_ID
REACT_APP_FIREBASE_APP_ID=REACT_APP_FIREBASE_APP_ID
REACT_APP_FIREBASE_MEASUREMEMT_ID=REACT_APP_FIREBASE_MEASUREMEMT_ID
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;Start the server&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;  npm start
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;&lt;span&gt;â&lt;/span&gt; Requirements&lt;/h2&gt; 
&lt;p&gt;Before starting &lt;span&gt;ð&lt;/span&gt;, you need to have &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node&lt;/a&gt; installed. &lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;ð License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/Th3Wall/Fakeflix/raw/main/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.buymeacoffee.com/th3wall&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&quot; height=&quot;41&quot; width=&quot;174&quot; alt=&quot;Buy Me A Coffee&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vercel/next.js</title>
      <link>https://github.com/vercel/next.js</link>
      <description>&lt;p&gt;The React Framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://nextjs.org&quot;&gt; &lt;img src=&quot;https://assets.vercel.com/image/upload/v1607554385/repositories/next-js/next-logo.png&quot; height=&quot;128&quot;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;&lt;a href=&quot;https://nextjs.org&quot;&gt;Next.js&lt;/a&gt;&lt;/h1&gt;
&lt;a href=&quot;https://nextjs.org&quot;&gt; &lt;/a&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a aria-label=&quot;Vercel logo&quot; href=&quot;https://vercel.com&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&amp;amp;logo=Vercel&amp;amp;labelColor=000&quot;&gt; &lt;/a&gt; &lt;a aria-label=&quot;NPM version&quot; href=&quot;https://www.npmjs.com/package/next&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/npm/v/next.svg?style=for-the-badge&amp;amp;labelColor=000000&quot;&gt; &lt;/a&gt; &lt;a aria-label=&quot;License&quot; href=&quot;https://github.com/vercel/next.js/raw/canary/license.md&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/npm/l/next.svg?style=for-the-badge&amp;amp;labelColor=000000&quot;&gt; &lt;/a&gt; &lt;a aria-label=&quot;Join the community on GitHub&quot; href=&quot;https://github.com/vercel/next.js/discussions&quot;&gt; &lt;img alt=&quot;&quot; src=&quot;https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&amp;amp;logo=Next.js&amp;amp;labelColor=000000&amp;amp;logoWidth=20&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a aria-label=&quot;next.js learn&quot; href=&quot;https://nextjs.org/learn&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://nextjs.org/learn&quot;&gt;https://nextjs.org/learn&lt;/a&gt; to get started with Next.js.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit &lt;a href=&quot;https://nextjs.org/docs&quot;&gt;https://nextjs.org/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; 
&lt;h2&gt;Who is using Next.js?&lt;/h2&gt; 
&lt;p&gt;Next.js is used by the world&#39;s leading companies. Check out the &lt;a href=&quot;https://nextjs.org/showcase&quot;&gt;Next.js Showcase&lt;/a&gt; to learn more.&lt;/p&gt; 
&lt;h2&gt;Community&lt;/h2&gt; 
&lt;p&gt;The Next.js community can be found on &lt;a href=&quot;https://github.com/vercel/next.js/discussions&quot;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; 
&lt;p&gt;To chat with other community members you can join the &lt;a href=&quot;https://nextjs.org/discord&quot;&gt;Next.js Discord&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Our &lt;a href=&quot;https://github.com/vercel/next.js/raw/canary/CODE_OF_CONDUCT.md&quot;&gt;Code of Conduct&lt;/a&gt; applies to all Next.js community channels.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/vercel/next.js/canary/contributing.md&quot;&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Good First Issues&lt;/h3&gt; 
&lt;p&gt;We have a list of &lt;a href=&quot;https://github.com/vercel/next.js/labels/good%20first%20issue&quot;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; 
&lt;h2&gt;Authors&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tim Neutkens (&lt;a href=&quot;https://twitter.com/timneutkens&quot;&gt;@timneutkens&lt;/a&gt;) â &lt;a href=&quot;https://vercel.com/about/timneutkens&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Naoyuki Kanezawa (&lt;a href=&quot;https://twitter.com/nkzawa&quot;&gt;@nkzawa&lt;/a&gt;) â &lt;a href=&quot;https://vercel.com/about/nkzawa&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Guillermo Rauch (&lt;a href=&quot;https://twitter.com/rauchg&quot;&gt;@rauchg&lt;/a&gt;) â &lt;a href=&quot;https://vercel.com/about/rauchg&quot;&gt;Vercel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Arunoda Susiripala (&lt;a href=&quot;https://twitter.com/arunoda&quot;&gt;@arunoda&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Tony Kovanen (&lt;a href=&quot;https://twitter.com/tonykovanen&quot;&gt;@tonykovanen&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Dan Zajdband (&lt;a href=&quot;https://twitter.com/impronunciable&quot;&gt;@impronunciable&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>cypress-io/cypress</title>
      <link>https://github.com/cypress-io/cypress</link>
      <description>&lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser.&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.cypress.io&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1268976/20607953/d7ae489c-b24a-11e6-9cc4-91c6c74c5e88.png&quot;&gt;&lt;/a&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://on.cypress.io&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://on.cypress.io/changelog&quot;&gt;Changelog&lt;/a&gt; | &lt;a href=&quot;https://on.cypress.io/roadmap&quot;&gt;Roadmap&lt;/a&gt; &lt;/p&gt; 
&lt;h3 align=&quot;center&quot;&gt; The web has evolved. Finally, testing has too. &lt;/h3&gt; 
&lt;p align=&quot;center&quot;&gt; Fast, easy and reliable testing for anything that runs in a browser. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; Join us, we&#39;re &lt;a href=&quot;https://cypress.io/jobs&quot;&gt;hiring&lt;/a&gt;. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.npmjs.com/package/cypress&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dm/cypress.svg?sanitize=true&quot; alt=&quot;npm&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://gitter.im/cypress-io/cypress&quot;&gt; &lt;img src=&quot;https://img.shields.io/gitter/room/cypress-io/cypress.svg?sanitize=true&quot; alt=&quot;Gitter chat&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://stackshare.io/cypress&quot;&gt; &lt;img src=&quot;https://img.stackshare.io/misc/follow-on-stackshare-badge.svg?sanitize=true&quot; alt=&quot;StackShare&quot;&gt; &lt;/a&gt;&lt;br&gt; &lt;/p&gt; 
&lt;h2&gt;What is Cypress?&lt;/h2&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://player.vimeo.com/video/237527670&quot;&gt; &lt;img alt=&quot;Why Cypress Video&quot; src=&quot;https://user-images.githubusercontent.com/1271364/31739717-dbdff0ee-b41c-11e7-9b16-bfa1b6ac1814.png&quot; width=&quot;75%&quot; height=&quot;75%&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/cypress&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/cypress.svg?sanitize=true&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Install Cypress for Mac, Linux, or Windows, then &lt;a href=&quot;https://docs.cypress.io/guides/getting-started/installing-cypress.html&quot;&gt;get started&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install cypress --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add cypress --dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1271364/31740846-7bf607f0-b420-11e7-855f-41c996040d31.gif&quot; alt=&quot;installing-cli e1693232&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/develop.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/cypress-io/cypress/tree/master.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; - &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please see our &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/CONTRIBUTING.md&quot;&gt;Contributing Guideline&lt;/a&gt; which explains repo organization, linting, testing, and other steps.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress/raw/master/LICENSE&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-MIT-green.svg?sanitize=true&quot; alt=&quot;license&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This project is licensed under the terms of the &lt;a href=&quot;https://raw.githubusercontent.com/cypress-io/cypress/develop/LICENSE&quot;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Badges&lt;/h2&gt; 
&lt;p&gt;Let the world know your project is using Cypress.io to test with this cool badge&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.cypress.io/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg?sanitize=true&quot; alt=&quot;Cypress.io&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>webrtc/samples</title>
      <link>https://github.com/webrtc/samples</link>
      <description>&lt;p&gt;WebRTC Web demos and samples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebRTC Code Samples&lt;/h1&gt; 
&lt;p&gt;This is a repository for the WebRTC JavaScript code samples. All of the samples can be tested from &lt;a href=&quot;https://webrtc.github.io/samples&quot;&gt;webrtc.github.io/samples&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We welcome contributions and bugfixes. Please see &lt;a href=&quot;https://github.com/webrtc/samples/raw/gh-pages/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h2&gt;Bugs&lt;/h2&gt; 
&lt;p&gt;If you encounter a bug or problem with one of the samples, please submit a &lt;a href=&quot;https://github.com/webrtc/samples/issues/new&quot;&gt;new issue&lt;/a&gt; so we know about it and can fix it.&lt;/p&gt; 
&lt;p&gt;Please avoid submitting issues on this repository for general problems you have with WebRTC. If you have found a bug in the WebRTC APIs, please see &lt;a href=&quot;https://webrtc.org/support/bug-reporting&quot;&gt;webrtc.org/bugs&lt;/a&gt; for how to submit bugs on the affected browsers. If you need support on how to implement your own WebRTC-based application, please see the &lt;a href=&quot;https://groups.google.com/forum/#!forum/discuss-webrtc&quot;&gt;discuss-webrtc&lt;/a&gt; Google Group.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microsoft/monaco-editor</title>
      <link>https://github.com/microsoft/monaco-editor</link>
      <description>&lt;p&gt;A browser based code editor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Monaco Editor&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/ms/monaco-editor/_build/latest?definitionId=3&quot;&gt;&lt;img src=&quot;https://dev.azure.com/ms/monaco-editor/_apis/build/status/microsoft.monaco-editor?label=website&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;The Monaco Editor is the code editor which powers &lt;a href=&quot;https://github.com/microsoft/vscode&quot;&gt;VS Code&lt;/a&gt;, with the features better described &lt;a href=&quot;https://code.visualstudio.com/docs/editor/editingevolved&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please note that this repository contains no source code for the code editor, it only contains the scripts to package everything together and ship the &lt;code&gt;monaco-editor&lt;/code&gt; npm module.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/5047891/94183711-290c0780-fea3-11ea-90e3-c88ff9d21bd6.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt; 
&lt;h2&gt;Try it out&lt;/h2&gt; 
&lt;p&gt;Try the editor out &lt;a href=&quot;https://microsoft.github.io/monaco-editor/index.html&quot;&gt;on our website&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Installing&lt;/h2&gt; 
&lt;pre&gt;&lt;code&gt;$ npm install monaco-editor
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You will get:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;inside &lt;code&gt;esm&lt;/code&gt;: ESM version of the editor (compatible with e.g. webpack)&lt;/li&gt; 
 &lt;li&gt;inside &lt;code&gt;dev&lt;/code&gt;: AMD bundled, not minified&lt;/li&gt; 
 &lt;li&gt;inside &lt;code&gt;min&lt;/code&gt;: AMD bundled, and minified&lt;/li&gt; 
 &lt;li&gt;inside &lt;code&gt;min-maps&lt;/code&gt;: source maps for &lt;code&gt;min&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;monaco.d.ts&lt;/code&gt;: this specifies the API of the editor (this is what is actually versioned, everything else is considered private and might break with any release).&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is recommended to develop against the &lt;code&gt;dev&lt;/code&gt; version, and in production to use the &lt;code&gt;min&lt;/code&gt; version.&lt;/p&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Learn how to integrate the editor with these &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/monaco-editor/main/samples/&quot;&gt;complete samples&lt;/a&gt;. 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/monaco-editor/main/docs/integrate-amd.md&quot;&gt;Integrate the AMD version&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/monaco-editor/main/docs/integrate-esm.md&quot;&gt;Integrate the ESM version&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Learn how to use the editor API and try out your own customizations in the &lt;a href=&quot;https://microsoft.github.io/monaco-editor/playground.html&quot;&gt;playground&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Explore the &lt;a href=&quot;https://microsoft.github.io/monaco-editor/api/index.html&quot;&gt;API docs&lt;/a&gt; or read them straight from &lt;a href=&quot;https://github.com/microsoft/monaco-editor/raw/main/website/typedoc/monaco.d.ts&quot;&gt;&lt;code&gt;monaco.d.ts&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Read &lt;a href=&quot;https://github.com/microsoft/monaco-editor/wiki/Accessibility-Guide-for-Integrators&quot;&gt;this guide&lt;/a&gt; to ensure the editor is accessible to all your users!&lt;/li&gt; 
 &lt;li&gt;Create a Monarch tokenizer for a new programming language &lt;a href=&quot;https://microsoft.github.io/monaco-editor/monarch.html&quot;&gt;in the Monarch playground&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Ask questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/monaco-editor&quot;&gt;StackOverflow&lt;/a&gt;! Search open and closed issues, there are a lot of tips in there!&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Issues&lt;/h2&gt; 
&lt;p&gt;Create &lt;a href=&quot;https://github.com/microsoft/monaco-editor/issues&quot;&gt;issues&lt;/a&gt; in this repository for anything related to the Monaco Editor. Always mention &lt;strong&gt;the version&lt;/strong&gt; of the editor when creating issues and &lt;strong&gt;the browser&lt;/strong&gt; you&#39;re having trouble in. Please search for existing issues to avoid duplicates.&lt;/p&gt; 
&lt;h2&gt;FAQ&lt;/h2&gt; 
&lt;p&gt;â &lt;strong&gt;What is the relationship between VS Code and the Monaco Editor?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;The Monaco Editor is generated straight from VS Code&#39;s sources with some shims around services the code needs to make it run in a web browser outside of its home.&lt;/p&gt; 
&lt;p&gt;â &lt;strong&gt;What is the relationship between VS Code&#39;s version and the Monaco Editor&#39;s version?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;None. The Monaco Editor is a library and it reflects directly the source code.&lt;/p&gt; 
&lt;p&gt;â &lt;strong&gt;I&#39;ve written an extension for VS Code, will it work on the Monaco Editor in a browser?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;No.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If the extension is fully based on the &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;LSP&lt;/a&gt; and if the language server is authored in JavaScript, then it would be possible.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;â &lt;strong&gt;Why all these web workers and why should I care?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Language services create web workers to compute heavy stuff outside of the UI thread. They cost hardly anything in terms of resource overhead and you shouldn&#39;t worry too much about them, as long as you get them to work (see above the cross-domain case).&lt;/p&gt; 
&lt;p&gt;â &lt;strong&gt;What is this &lt;code&gt;loader.js&lt;/code&gt;? Can I use &lt;code&gt;require.js&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;It is an AMD loader that we use in VS Code. Yes.&lt;/p&gt; 
&lt;p&gt;â &lt;strong&gt;I see the warning &quot;Could not create web worker&quot;. What should I do?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;HTML5 does not allow pages loaded on &lt;code&gt;file://&lt;/code&gt; to create web workers. Please load the editor with a web server on &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt; schemes.&lt;/p&gt; 
&lt;p&gt;â &lt;strong&gt;Is the editor supported in mobile browsers or mobile web app frameworks?&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;No.&lt;/p&gt; 
&lt;p&gt;â &lt;strong&gt;Why doesn&#39;t the editor support TextMate grammars?&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Please see &lt;a href=&quot;https://github.com/bolinfest/monaco-tm&quot;&gt;https://github.com/bolinfest/monaco-tm&lt;/a&gt; which puts together &lt;code&gt;monaco-editor&lt;/code&gt;, &lt;code&gt;vscode-oniguruma&lt;/code&gt; and &lt;code&gt;vscode-textmate&lt;/code&gt; to get TM grammar support in the editor.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;â &lt;strong&gt;What about IE 11 support?&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The Monaco Editor no longer supports IE 11. The last version that was tested on IE 11 is &lt;code&gt;0.18.1&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Development setup&lt;/h2&gt; 
&lt;p&gt;Please see &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/monaco-editor/main/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Code of Conduct&lt;/h2&gt; 
&lt;p&gt;This project has adopted the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/&quot;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/faq/&quot;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&quot;mailto:opencode@microsoft.com&quot;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Licensed under the &lt;a href=&quot;https://github.com/microsoft/monaco-editor/raw/main/LICENSE.txt&quot;&gt;MIT&lt;/a&gt; License.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenZeppelin/openzeppelin-contracts</title>
      <link>https://github.com/OpenZeppelin/openzeppelin-contracts</link>
      <description>&lt;p&gt;OpenZeppelin Contracts is a library for secure smart contract development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/logo.svg?sanitize=true&quot; alt=&quot;OpenZeppelin&quot; height=&quot;40px&quot;&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://docs.openzeppelin.com/contracts&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/docs-%F0%9F%93%84-blue&quot; alt=&quot;Docs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.org/package/@openzeppelin/contracts&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/@openzeppelin/contracts.svg?sanitize=true&quot; alt=&quot;NPM Package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/OpenZeppelin/openzeppelin-contracts&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/OpenZeppelin/openzeppelin-contracts/graph/badge.svg?sanitize=true&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;A library for secure smart contract development.&lt;/strong&gt; Build on a solid foundation of community-vetted code.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Implementations of standards like &lt;a href=&quot;https://docs.openzeppelin.com/contracts/erc20&quot;&gt;ERC20&lt;/a&gt; and &lt;a href=&quot;https://docs.openzeppelin.com/contracts/erc721&quot;&gt;ERC721&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Flexible &lt;a href=&quot;https://docs.openzeppelin.com/contracts/access-control&quot;&gt;role-based permissioning&lt;/a&gt; scheme.&lt;/li&gt; 
 &lt;li&gt;Reusable &lt;a href=&quot;https://docs.openzeppelin.com/contracts/utilities&quot;&gt;Solidity components&lt;/a&gt; to build custom contracts and complex decentralized systems.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span&gt;ð§&lt;/span&gt; &lt;strong&gt;Not sure how to get started?&lt;/strong&gt; Check out &lt;a href=&quot;https://wizard.openzeppelin.com/&quot;&gt;Contracts Wizard&lt;/a&gt; â an interactive smart contract generator.&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install @openzeppelin/contracts
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;OpenZeppelin Contracts features a &lt;a href=&quot;https://docs.openzeppelin.com/contracts/releases-stability#api-stability&quot;&gt;stable API&lt;/a&gt;, which means your contracts won&#39;t break unexpectedly when upgrading to a newer minor version.&lt;/p&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;Once installed, you can use the contracts in the library by importing them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-solidity&quot;&gt;pragma solidity ^0.8.0;

import &quot;@openzeppelin/contracts/token/ERC721/ERC721.sol&quot;;

contract MyCollectible is ERC721 {
    constructor() ERC721(&quot;MyCollectible&quot;, &quot;MCO&quot;) {
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;em&gt;If you&#39;re new to smart contract development, head to &lt;a href=&quot;https://docs.openzeppelin.com/learn/developing-smart-contracts&quot;&gt;Developing Smart Contracts&lt;/a&gt; to learn about creating a new project and compiling your contracts.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;To keep your system secure, you should &lt;strong&gt;always&lt;/strong&gt; use the installed code as-is, and neither copy-paste it from online sources, nor modify it yourself. The library is designed so that only the contracts and functions you use are deployed, so you don&#39;t need to worry about it needlessly increasing gas costs.&lt;/p&gt; 
&lt;h2&gt;Learn More&lt;/h2&gt; 
&lt;p&gt;The guides in the &lt;a href=&quot;https://docs.openzeppelin.com/contracts&quot;&gt;docs site&lt;/a&gt; will teach about different concepts, and how to use the related contracts that OpenZeppelin Contracts provides:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openzeppelin.com/contracts/access-control&quot;&gt;Access Control&lt;/a&gt;: decide who can perform each of the actions on your system.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openzeppelin.com/contracts/tokens&quot;&gt;Tokens&lt;/a&gt;: create tradeable assets or collectives, and distribute them via &lt;a href=&quot;https://docs.openzeppelin.com/contracts/crowdsales&quot;&gt;Crowdsales&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openzeppelin.com/contracts/gsn&quot;&gt;Gas Station Network&lt;/a&gt;: let your users interact with your contracts without having to pay for gas themselves.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.openzeppelin.com/contracts/utilities&quot;&gt;Utilities&lt;/a&gt;: generic useful tools, including non-overflowing math, signature verification, and trustless paying systems.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The &lt;a href=&quot;https://docs.openzeppelin.com/contracts/api/token/ERC20&quot;&gt;full API&lt;/a&gt; is also thoroughly documented, and serves as a great reference when developing your smart contract application. You can also ask for help or follow Contracts&#39;s development in the &lt;a href=&quot;https://forum.openzeppelin.com&quot;&gt;community forum&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Finally, you may want to take a look at the &lt;a href=&quot;https://blog.openzeppelin.com/guides&quot;&gt;guides on our blog&lt;/a&gt;, which cover several common use cases and good practices.. The following articles provide great background reading, though please note, some of the referenced tools have changed as the tooling in the ecosystem continues to rapidly evolve.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.openzeppelin.com/the-hitchhikers-guide-to-smart-contracts-in-ethereum-848f08001f05&quot;&gt;The Hitchhikerâs Guide to Smart Contracts in Ethereum&lt;/a&gt; will help you get an overview of the various tools available for smart contract development, and help you set up your environment.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://blog.openzeppelin.com/a-gentle-introduction-to-ethereum-programming-part-1-783cc7796094&quot;&gt;A Gentle Introduction to Ethereum Programming, Part 1&lt;/a&gt; provides very useful information on an introductory level, including many basic concepts from the Ethereum platform.&lt;/li&gt; 
 &lt;li&gt;For a more in-depth dive, you may read the guide &lt;a href=&quot;https://blog.openzeppelin.com/designing-the-architecture-for-your-ethereum-application-9cec086f8317&quot;&gt;Designing the Architecture for Your Ethereum Application&lt;/a&gt;, which discusses how to better structure your application and its relationship to the real world.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;This project is maintained by &lt;a href=&quot;https://openzeppelin.com&quot;&gt;OpenZeppelin&lt;/a&gt;, and developed following our high standards for code quality and security. OpenZeppelin Contracts is meant to provide tested and community-audited code, but please use common sense when doing anything that deals with real money! We take no responsibility for your implementation decisions and any security problems you might experience.&lt;/p&gt; 
&lt;p&gt;The core development principles and strategies that OpenZeppelin Contracts is based on include: security in depth, simple and modular code, clarity-driven naming conventions, comprehensive unit testing, pre-and-post-condition sanity checks, code consistency, and regular audits.&lt;/p&gt; 
&lt;p&gt;The latest audit was done on October 2018 on version 2.0.0.&lt;/p&gt; 
&lt;p&gt;We have a &lt;a href=&quot;https://www.immunefi.com/bounty/openzeppelin&quot;&gt;&lt;strong&gt;bug bounty program&lt;/strong&gt; on Immunefi&lt;/a&gt;. Please report any security issues you find through the Immunefi dashboard, or reach out to &lt;a href=&quot;mailto:security@openzeppelin.com&quot;&gt;security@openzeppelin.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Critical bug fixes will be backported to past major releases.&lt;/p&gt; 
&lt;h2&gt;Contribute&lt;/h2&gt; 
&lt;p&gt;OpenZeppelin Contracts exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the &lt;a href=&quot;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt;!&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;OpenZeppelin Contracts is released under the &lt;a href=&quot;https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sequelize/sequelize</title>
      <link>https://github.com/sequelize/sequelize</link>
      <description>&lt;p&gt;An easy-to-use and promise-based multi SQL dialects ORM tool for Node.js&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/sequelize/sequelize/main/docs/images/logo-small.png&quot; width=&quot;100&quot;&gt; &lt;/p&gt;
&lt;h1 align=&quot;center&quot;&gt;Sequelize&lt;/h1&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/sequelize&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/v/sequelize&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sequelize/sequelize/actions?query=workflow%3ACI&quot;&gt;&lt;img src=&quot;https://github.com/sequelize/sequelize/workflows/CI/badge.svg?sanitize=true&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/sequelize&quot;&gt;&lt;img src=&quot;https://badgen.net/npm/dm/sequelize&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://opencollective.com/sequelize&quot;&gt;&lt;img src=&quot;https://img.shields.io/opencollective/all/sequelize?label=sponsors&quot; alt=&quot;sponsor&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/sequelize/sequelize&quot;&gt;&lt;img src=&quot;https://badgen.net/github/merged-prs/sequelize/sequelize&quot; alt=&quot;Merged PRs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true&quot; alt=&quot;semantic-release&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Sequelize is a promise-based &lt;a href=&quot;https://nodejs.org/en/about/&quot;&gt;Node.js&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM tool&lt;/a&gt; for &lt;a href=&quot;https://en.wikipedia.org/wiki/PostgreSQL&quot;&gt;Postgres&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/MySQL&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/MariaDB&quot;&gt;MariaDB&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/SQLite&quot;&gt;SQLite&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_SQL_Server&quot;&gt;Microsoft SQL Server&lt;/a&gt;. It features solid transaction support, relations, eager and lazy loading, read replication and more.&lt;/p&gt; 
&lt;p&gt;Sequelize follows &lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt; and supports Node v10 and above.&lt;/p&gt; 
&lt;p&gt;New to Sequelize? Take a look at the &lt;a href=&quot;https://sequelize.org/master&quot;&gt;Tutorials and Guides&lt;/a&gt;. You might also be interested in the &lt;a href=&quot;https://sequelize.org/master/identifiers&quot;&gt;API Reference&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Would you like to contribute? Read &lt;a href=&quot;https://github.com/sequelize/sequelize/raw/main/CONTRIBUTING.md&quot;&gt;our contribution guidelines&lt;/a&gt; to know more. There are many ways to help.&lt;/p&gt; 
&lt;h3&gt;v6 Release&lt;/h3&gt; 
&lt;p&gt;You can find the detailed changelog &lt;a href=&quot;https://github.com/sequelize/sequelize/raw/main/docs/manual/other-topics/upgrade-to-v6.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Supporting the project&lt;/h2&gt; 
&lt;p&gt;Do you like Sequelize and would like to give back to the engineering team behind it?&lt;/p&gt; 
&lt;p&gt;We have recently created an &lt;a href=&quot;https://opencollective.com/sequelize&quot;&gt;OpenCollective based money pool&lt;/a&gt; which is shared amongst all core maintainers based on their contributions. Every support is wholeheartedly welcome. â¤ï¸&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ npm i sequelize # This will install v6

# And one of the following:
$ npm i pg pg-hstore # Postgres
$ npm i mysql2
$ npm i mariadb
$ npm i sqlite3
$ npm i tedious # Microsoft SQL Server
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org/master&quot;&gt;v6 Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org&quot;&gt;v5/v4/v3 Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sequelize/sequelize/raw/main/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Responsible disclosure&lt;/h2&gt; 
&lt;p&gt;If you have security issues to report, please refer to our &lt;a href=&quot;https://github.com/sequelize/sequelize/raw/main/SECURITY.md&quot;&gt;Responsible Disclosure Policy&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h2&gt;Resources&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sequelize/sequelize/releases&quot;&gt;Changelog&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://sequelize-slack.herokuapp.com/&quot;&gt;Slack Inviter&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/tagged/sequelize.js&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Tools&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/sequelize/cli&quot;&gt;CLI&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org/master/manual/typescript.html&quot;&gt;With TypeScript&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/RobinBuschmann/sequelize-typescript&quot;&gt;Enhanced TypeScript with decorators&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/mickhansen/graphql-sequelize&quot;&gt;For GraphQL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cockroachdb/sequelize-cockroachdb&quot;&gt;For CockroachDB&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org/master/manual/resources.html&quot;&gt;Plugins&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Translations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://sequelize.org/master&quot;&gt;English&lt;/a&gt; (OFFICIAL)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/demopark/sequelize-docs-Zh-CN&quot;&gt;ä¸­æææ¡£&lt;/a&gt; (UNOFFICIAL)&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>YMFE/yapi</title>
      <link>https://github.com/YMFE/yapi</link>
      <description>&lt;p&gt;YApi æ¯ä¸ä¸ªå¯æ¬å°é¨ç½²çãæéååç«¯åQAçãå¯è§åçæ¥å£ç®¡çå¹³å°&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;YApi å¯è§åæ¥å£ç®¡çå¹³å°&lt;/h2&gt; 
&lt;p&gt;ä½éªå°åï¼&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://yapi.smart-xwork.cn/&quot;&gt;http://yapi.smart-xwork.cn/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ææ¡£ï¼&lt;/p&gt; 
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://hellosean1025.github.io/yapi&quot;&gt;hellosean1025.github.io/yapi&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;å¹³å°ä»ç»&lt;/h3&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/YMFE/yapi/master/yapi-base-flow.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt; 
&lt;p&gt;YApi æ¯&lt;strong&gt;é«æ&lt;/strong&gt;ã&lt;strong&gt;æç¨&lt;/strong&gt;ã&lt;strong&gt;åè½å¼ºå¤§&lt;/strong&gt;ç api ç®¡çå¹³å°ï¼æ¨å¨ä¸ºå¼åãäº§åãæµè¯äººåæä¾æ´ä¼éçæ¥å£ç®¡çæå¡ãå¯ä»¥å¸®å©å¼åèè½»æ¾åå»ºãåå¸ãç»´æ¤ APIï¼YApi è¿ä¸ºç¨æ·æä¾äºä¼ç§çäº¤äºä½éªï¼å¼åäººååªéå©ç¨å¹³å°æä¾çæ¥å£æ°æ®åå¥å·¥å·ä»¥åç®åçç¹å»æä½å°±å¯ä»¥å®ç°æ¥å£çç®¡çã&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;QQäº¤æµç¾¤&lt;/strong&gt;:&lt;/p&gt; 
&lt;p&gt;644642474 &lt;strong&gt;ä¸»ç¾¤å¯è½å·²æ»¡&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;941802405 &lt;strong&gt;ç¾¤2æ¬¢è¿å å¥&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;ç¹æ§&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;åºäº Json5 å Mockjs å®ä¹æ¥å£è¿åæ°æ®çç»æåææ¡£ï¼æçæåå¤å&lt;/li&gt; 
 &lt;li&gt;æå¹³åæéè®¾è®¡ï¼å³ä¿è¯äºå¤§åä¼ä¸çº§é¡¹ç®çç®¡çï¼åä¿è¯äºæç¨æ§&lt;/li&gt; 
 &lt;li&gt;ç±»ä¼¼ postman çæ¥å£è°è¯&lt;/li&gt; 
 &lt;li&gt;èªå¨åæµè¯, æ¯æå¯¹ Response æ­è¨&lt;/li&gt; 
 &lt;li&gt;MockServer é¤æ¯ææ®éçéæº mock å¤ï¼è¿å¢å äº Mock ææåè½ï¼æ ¹æ®è®¾ç½®çè¯·æ±è¿æ»¤è§åï¼è¿åæææ°æ®&lt;/li&gt; 
 &lt;li&gt;æ¯æ postman, har, swagger æ°æ®å¯¼å¥&lt;/li&gt; 
 &lt;li&gt;åè´¹å¼æºï¼åç½é¨ç½²ï¼ä¿¡æ¯åä¹ä¸ææ³é²äº&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;åç½é¨ç½²&lt;/h3&gt; 
&lt;h4&gt;ç¯å¢è¦æ±&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;nodejsï¼7.6+)&lt;/li&gt; 
 &lt;li&gt;mongodbï¼2.6+ï¼&lt;/li&gt; 
 &lt;li&gt;git&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;å®è£&lt;/h4&gt; 
&lt;p&gt;ä½¿ç¨æä»¬æä¾ç yapi-cli å·¥å·ï¼é¨ç½² YApi å¹³å°æ¯éå¸¸å®¹æçãæ§è¡ yapi server å¯å¨å¯è§åé¨ç½²ç¨åºï¼è¾å¥ç¸åºçéç½®åç¹å»å¼å§é¨ç½²ï¼å°±è½å®ææ´ä¸ªç½ç«çé¨ç½²ãé¨ç½²å®æä¹åï¼å¯æç§æç¤ºä¿¡æ¯ï¼æ§è¡ node/{ç½ç«è·¯å¾/server/app.js} å¯å¨æå¡å¨ãå¨æµè§å¨æå¼æå®url, ç¹å»ç»å½è¾å¥æ¨åæè®¾ç½®çç®¡çåé®ç®±ï¼é»è®¤å¯ç ä¸º ymfe.org ç»å½ç³»ç»ï¼é»è®¤å¯ç å¯å¨ä¸ªäººä¸­å¿ä¿®æ¹ï¼ã&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install -g yapi-cli --registry https://registry.npm.taobao.org
yapi server 
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;æå¡ç®¡ç&lt;/h4&gt; 
&lt;p&gt;å©ç¨pm2æ¹ä¾¿æå¡ç®¡çç»´æ¤ã&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install pm2 -g  //å®è£pm2
cd  {é¡¹ç®ç®å½}
pm2 start &quot;vendors/server/app.js&quot; --name yapi //pm2ç®¡çyapiæå¡
pm2 info yapi //æ¥çæå¡ä¿¡æ¯
pm2 stop yapi //åæ­¢æå¡
pm2 restart yapi //éå¯æå¡
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;åçº§&lt;/h4&gt; 
&lt;p&gt;åçº§é¡¹ç®çæ¬æ¯éå¸¸å®¹æçï¼å¹¶ä¸ä¸ä¼å½±åå·²æçé¡¹ç®æ°æ®ï¼åªä¼åæ­¥ vendors ç®å½ä¸çæºç æä»¶ã&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;cd  {é¡¹ç®ç®å½}
yapi ls //æ¥ççæ¬å·åè¡¨
yapi update //æ´æ°å°ææ°çæ¬
yapi update -v {Version} //æ´æ°å°æå®çæ¬
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;æç¨&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5acc879f6fb9a028c42e8822&quot;&gt;ä½¿ç¨ YApi ç®¡ç API ææ¡£ï¼æµè¯ï¼ mock&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5af500e251882567096140dd&quot;&gt;èªå¨æ´æ° Swagger æ¥å£æ°æ®å° YApi å¹³å°&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5a388892f265da430e4f4681&quot;&gt;èªå¨åæµè¯&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/z66f7bRX8aAOppAtBIB7Uw&quot;&gt;GTest(åºäºYApi)æ¥å£ç åæè½æå10å å®æ&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;YApi æä»¶&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/YMFE/yapi-plugin-qsso&quot;&gt;yapi sso ç»å½æä»¶&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wsfe/yapi-plugin-cas&quot;&gt;yapi cas ç»å½æä»¶&lt;/a&gt; By wsfe&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/cyj0122/yapi-plugin-gitlab&quot;&gt;yapi gitlabéææä»¶&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/xwxsee2014/yapi-plugin-oauth2&quot;&gt;oauth2.0ç»å½&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/wxxcarl/yapi-plugin-import-rap&quot;&gt;rapå¹³å°æ°æ®å¯¼å¥&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/zgs225/yapi-plugin-dding&quot;&gt;dingding&lt;/a&gt; ééæºå¨äººæ¨éæä»¶&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/inceptiongt/Yapi-plugin-export-docx-data&quot;&gt;export-docx-data&lt;/a&gt; æ°æ®å¯¼åºdocxææ¡£&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shouldnotappearcalm/yapi-plugin-interface-oauth2-token&quot;&gt;interface-oauth-token&lt;/a&gt; å®æ¶èªå¨è·åé´ætokençæä»¶&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/follow-my-heart/yapi-plugin-import-swagger-customize&quot;&gt;import-swagger-customize&lt;/a&gt; å¯¼å¥æå®swaggeræ¥å£&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;ä»£ç çæ&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fjc0k/yapi-to-typescript&quot;&gt;yapi-to-typescriptï¼æ ¹æ® YApi çæ¥å£å®ä¹çæ TypeScript çè¯·æ±å½æ°&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hellosean1025/yapi-gen-js-code&quot;&gt;yapi-gen-js-code: æ ¹æ® YApi çæ¥å£å®ä¹çæ javascript çè¯·æ±å½æ°&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/CodeOcenS/SwiftJSONModeler&quot;&gt;SwiftJSONModeler:æ ¹æ® YApi çæ¥å£çæ Swift æ¨¡åä»£ç &lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;YApi dockeré¨ç½²ï¼éå®æ¹ï¼&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/a97d2efb23c5&quot;&gt;ä½¿ç¨ alpine ç docker éåå¿«éé¨ç½² yapi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Ryan-Miao/docker-yapi&quot;&gt;docker-yapi: åºäºå®æ¹yapi-cliçdocker-composeæ¹æ¡&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jinfeijie/yapi&quot;&gt;docker-composeä¸é®é¨ç½²yapi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fjc0k/docker-YApi&quot;&gt;docker-YApi: æ´æç¨ç YApi éå&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/MyHerux/daily-code/raw/master/Program/%E5%B7%A5%E5%85%B7%E7%AF%87/Yapi/%E4%BD%BF%E7%94%A8DockerCompose%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2Yapi.md&quot;&gt;ä½¿ç¨DockerComposeæå»ºé¨ç½²Yapi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/williamlsh/yapi-docker&quot;&gt;yapi-docker: dockerized yapi deployment all in one&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;YApi ä¸äºå·¥å·&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/Forgus/api-generator&quot;&gt;Api Generator&lt;/a&gt; æ¥å£ææ¡£èªå¨çææä»¶ï¼é¶å¥ä¾µï¼&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hellosean1025/http-mysql-server&quot;&gt;mysqlæå¡httpå·¥å·,å¯éååèªå¨åæµè¯&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/diwand/YapiIdeaUploadPlugin&quot;&gt;idea ä¸é®ä¸ä¼ æ¥å£å°yapiæä»¶&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://easyyapi.com/&quot;&gt;idea æ¥å£ä¸ä¼ è°è¯æä»¶ easy-yapi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/shouldnotappearcalm/http-postgres-server&quot;&gt;æ§è¡ postgres sql çæå¡&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/NoBugBoy/YDoc&quot;&gt;SpringBootä¾èµèªå¨çæYApi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/jetplugins/yapix&quot;&gt;Yapi X ä¸é®çææ¥å£ææ¡£, ä¸ä¼ å°yapi, rap2, eolinkerç­ï¼IDEAæä»¶ï¼&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;YApi çä¸äºå®¢æ·&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;å»åªå¿&lt;/li&gt; 
 &lt;li&gt;æºç¨&lt;/li&gt; 
 &lt;li&gt;èºé¾&lt;/li&gt; 
 &lt;li&gt;ç¾å¢&lt;/li&gt; 
 &lt;li&gt;ç¾åº¦&lt;/li&gt; 
 &lt;li&gt;è¾è®¯&lt;/li&gt; 
 &lt;li&gt;é¿éå·´å·´&lt;/li&gt; 
 &lt;li&gt;äº¬ä¸&lt;/li&gt; 
 &lt;li&gt;ä»æ¥å¤´æ¡&lt;/li&gt; 
 &lt;li&gt;å¯åæ¯ä»&lt;/li&gt; 
 &lt;li&gt;é¾å®¶ç½&lt;/li&gt; 
 &lt;li&gt;å¿«æ&lt;/li&gt; 
 &lt;li&gt;ä¾¿å©è&lt;/li&gt; 
 &lt;li&gt;ä¸­åæ æ°&lt;/li&gt; 
 &lt;li&gt;æ°æµª&lt;/li&gt; 
 &lt;li&gt;VIPKID&lt;/li&gt; 
 &lt;li&gt;é©¬èçª&lt;/li&gt; 
 &lt;li&gt;ä¼´é±¼&lt;/li&gt; 
 &lt;li&gt;æ·è§ç§æ&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Authors&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/hellosean1025&quot;&gt;hellosean1025&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/gaoxiaomumu&quot;&gt;gaoxiaomumu&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/amnsss&quot;&gt;zwjamnsss&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dwb1994&quot;&gt;dwb1994&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fungezi&quot;&gt;fungezi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/ariesly15&quot;&gt;ariesly15&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;Apache License 2.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gatsbyjs/gatsby</title>
      <link>https://github.com/gatsbyjs/gatsby</link>
      <description>&lt;p&gt;Build blazing fast, modern apps and websites with React&lt;/p&gt;&lt;hr&gt;&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.gatsbyjs.com&quot;&gt; &lt;img alt=&quot;Gatsby&quot; src=&quot;https://www.gatsbyjs.com/Gatsby-Monogram.svg?sanitize=true&quot; width=&quot;60&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h1 align=&quot;center&quot;&gt; Gatsby v4 &lt;/h1&gt; 
&lt;p align=&quot;center&quot;&gt; âï¸ ð ð &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;strong&gt; Static. That. Scales. &lt;/strong&gt; &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; Gatsby is a free and open source framework based on React that helps developers build blazing fast websites and apps. &lt;br&gt; It combines the control and scalability of dynamically rendered sites with the speed of static-site generation, creating a whole new web of possibilities. &lt;/p&gt; 
&lt;p align=&quot;center&quot;&gt; &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/raw/master/LICENSE&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&quot; alt=&quot;Gatsby is released under the MIT license.&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/gatsbyjs/gatsby&quot;&gt; &lt;img src=&quot;https://circleci.com/gh/gatsbyjs/gatsby.svg?style=shield&quot; alt=&quot;Current CircleCI build status.&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/gatsby&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/v/gatsby.svg?sanitize=true&quot; alt=&quot;Current npm package version.&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://npmcharts.com/compare/gatsby?minimal=true&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dm/gatsby.svg?sanitize=true&quot; alt=&quot;Downloads per month on npm.&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://npmcharts.com/compare/gatsby?minimal=true&quot;&gt; &lt;img src=&quot;https://img.shields.io/npm/dt/gatsby.svg?sanitize=true&quot; alt=&quot;Total downloads on npm.&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://gatsbyjs.com/contributing/how-to-contribute/&quot;&gt; &lt;img src=&quot;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&quot; alt=&quot;PRs welcome!&quot;&gt; &lt;/a&gt; &lt;a href=&quot;https://twitter.com/intent/follow?screen_name=gatsbyjs&quot;&gt; &lt;img src=&quot;https://img.shields.io/twitter/follow/gatsbyjs.svg?label=Follow%20@gatsbyjs&quot; alt=&quot;Follow @GatsbyJS&quot;&gt; &lt;/a&gt; &lt;/p&gt; 
&lt;h2 align=&quot;center&quot;&gt; &lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;Quickstart&lt;/a&gt; &lt;span&gt; Â· &lt;/span&gt; &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;Tutorial&lt;/a&gt; &lt;span&gt; Â· &lt;/span&gt; &lt;a href=&quot;https://www.gatsbyjs.com/plugins/&quot;&gt;Plugins&lt;/a&gt; &lt;span&gt; Â· &lt;/span&gt; &lt;a href=&quot;https://www.gatsbyjs.com/starters/&quot;&gt;Starters&lt;/a&gt; &lt;span&gt; Â· &lt;/span&gt; &lt;a href=&quot;https://www.gatsbyjs.com/showcase/&quot;&gt;Showcase&lt;/a&gt; &lt;span&gt; Â· &lt;/span&gt; &lt;a href=&quot;https://www.gatsbyjs.com/contributing/how-to-contribute/&quot;&gt;Contribute&lt;/a&gt; &lt;br&gt; Support: &lt;a href=&quot;https://twitter.com/AskGatsbyJS&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/discussions&quot;&gt;Discussions&lt;/a&gt; &lt;span&gt; &amp;amp; &lt;/span&gt; &lt;a href=&quot;https://gatsby.dev/discord&quot;&gt;Discord&lt;/a&gt; &lt;/h2&gt; 
&lt;p&gt;Gatsby is a modern web framework for blazing fast websites.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Go Beyond Static Websites.&lt;/strong&gt; Get all the benefits of static websites with none of the limitations. Gatsby sites are fully functional React apps, so you can create high-quality, dynamic web apps, from blogs to e-commerce sites to user dashboards.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Choose your Rendering Option.&lt;/strong&gt; You can choose alternative &lt;a href=&quot;https://gatsbyjs.com/docs/conceptual/rendering-options/&quot;&gt;rendering options&lt;/a&gt;, namely Deferred Static Generation (DSG) and Server-Side Rendering (SSR), in addition to Static Site Generation (SSG) â on a per-page basis. This type of granular control allows you to optimize for performance and productivity without sacrificing one for the other.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use a Modern Stack for Every Site.&lt;/strong&gt; No matter where the data comes from, Gatsby sites are built using React and GraphQL. Build a uniform workflow for you and your team, regardless of whether the data is coming from the same backend.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Load Data From Anywhere.&lt;/strong&gt; Gatsby pulls in data from any data source, whether itâs Markdown files, a headless CMS like Contentful or WordPress, or a REST or GraphQL API. Use source plugins to load your data, then develop using Gatsbyâs uniform GraphQL interface.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance Is Baked In.&lt;/strong&gt; Ace your performance audits by default. Gatsby automates code splitting, image optimization, inlining critical styles, lazy-loading, prefetching resources, and more to ensure your site is fast â no manual tuning required.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Host at Scale for Pennies.&lt;/strong&gt; Gatsby sites donât require servers, so you can host your entire site on a CDN for a fraction of the cost of a server-rendered site. Many Gatsby sites can be hosted entirely free on &lt;a href=&quot;https://www.gatsbyjs.com/cloud/&quot;&gt;Gatsby Cloud&lt;/a&gt; and other similar services.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;&lt;strong&gt;Learn how to use Gatsby for your next project.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Whatâs In This Document&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-get-up-and-running-in-5-minutes&quot;&gt;Get Up and Running in 5 Minutes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-learning-gatsby&quot;&gt;Learning Gatsby&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-release-notes&quot;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-migration-guides&quot;&gt;Migration Guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-how-to-contribute&quot;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-license&quot;&gt;License&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/#-thanks&quot;&gt;Thanks to Our Contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;ð Get Up and Running in 5 Minutes&lt;/h2&gt; 
&lt;p&gt;You can get a new Gatsby site up and running on your local dev environment in 5 minutes with these four steps:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the Gatsby CLI.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install -g gatsby-cli
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Gatsby site from a Gatsby starter.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Get your Gatsby blog set up in a single command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;# Create a new Gatsby site using the interactive setup wizard
# Give it this name: My Gatsby site
gatsby new
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start the site in &lt;code&gt;develop&lt;/code&gt; mode.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Next, move into your new siteâs directory and start it up:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;cd my-gatsby-site/
gatsby develop
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open the source code and start editing!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Your site is now running at &lt;code&gt;http://localhost:8000&lt;/code&gt;. Open the &lt;code&gt;my-gatsby-site&lt;/code&gt; directory in your code editor of choice and edit &lt;code&gt;src/pages/index.js&lt;/code&gt;. Save your changes, and the browser will update in real time!&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;At this point, youâve got a fully functional Gatsby website. For additional information on how you can customize your Gatsby site, see our &lt;a href=&quot;https://gatsbyjs.com/plugins/&quot;&gt;plugins&lt;/a&gt; and &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;the official tutorial&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;ð Learning Gatsby&lt;/h2&gt; 
&lt;p&gt;Full documentation for Gatsby lives &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;on the website&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;For most developers, we recommend starting with our &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;in-depth tutorial for creating a site with Gatsby&lt;/a&gt;.&lt;/strong&gt; It starts with zero assumptions about your level of ability and walks through every step of the process.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;To dive straight into code samples head &lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;to our documentation&lt;/a&gt;.&lt;/strong&gt; In particular, check out the â&lt;i&gt;How-to Guides&lt;/i&gt;â, â&lt;i&gt;Reference&lt;/i&gt;â, and â&lt;i&gt;Conceptual Guides&lt;/i&gt;â sections in the sidebar.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;We welcome suggestions for improving our docs. See the &lt;a href=&quot;https://www.gatsbyjs.com/contributing/how-to-contribute/&quot;&gt;âhow to contributeâ&lt;/a&gt; documentation for more details.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Start Learning Gatsby: &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;Follow the Tutorial&lt;/a&gt; Â· &lt;a href=&quot;https://www.gatsbyjs.com/docs/&quot;&gt;Read the Docs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;ð¢ Release Notes&lt;/h2&gt; 
&lt;p&gt;Wondering what we&#39;ve shipped recently? Check out our &lt;a href=&quot;https://www.gatsbyjs.com/docs/reference/release-notes&quot;&gt;release notes&lt;/a&gt; for key highlights, performance improvements, new features, and notable bugfixes.&lt;/p&gt; 
&lt;p&gt;Also, read our &lt;a href=&quot;https://www.gatsbyjs.com/docs/reference/release-notes/gatsby-version-support/&quot;&gt;documentation on version support&lt;/a&gt; to understand our plans for each version of Gatsby.&lt;/p&gt; 
&lt;h2&gt;ð¼ Migration Guides&lt;/h2&gt; 
&lt;p&gt;Already have a Gatsby site? These handy guides will help you add the improvements of Gatsby v4 to your site without starting from scratch!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v3-to-v4/&quot;&gt;Migrate from v3 to v4&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/docs/reference/release-notes/migrating-from-v2-to-v3/&quot;&gt;Migrate from v2 to v3&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;â Code of Conduct&lt;/h2&gt; 
&lt;p&gt;Gatsby is dedicated to building a welcoming, diverse, safe community. We expect everyone participating in the Gatsby community to abide by our &lt;a href=&quot;https://www.gatsbyjs.com/contributing/code-of-conduct/&quot;&gt;&lt;strong&gt;Code of Conduct&lt;/strong&gt;&lt;/a&gt;. Please read it. Please follow it. In the Gatsby community, we work hard to build each other up and create amazing things together. ðªð&lt;/p&gt; 
&lt;h2&gt;ð¤ How to Contribute&lt;/h2&gt; 
&lt;p&gt;Whether you&#39;re helping us fix bugs, improve the docs, or spread the word, we&#39;d love to have you as part of the Gatsby community!&lt;/p&gt; 
&lt;p&gt;Check out our &lt;a href=&quot;https://www.gatsbyjs.com/contributing/how-to-contribute/&quot;&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/a&gt; for ideas on contributing and setup steps for getting our repositories up and running on your local machine.&lt;/p&gt; 
&lt;h3&gt;A note on how this repository is organized&lt;/h3&gt; 
&lt;p&gt;This repository is a &lt;a href=&quot;https://trunkbaseddevelopment.com/monorepos/&quot;&gt;monorepo&lt;/a&gt; managed using &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt;Lerna&lt;/a&gt;. This means there are &lt;a href=&quot;https://github.com/gatsbyjs/gatsby/tree/master/packages&quot;&gt;multiple packages&lt;/a&gt; managed in this codebase, even though we publish them to NPM as separate packages.&lt;/p&gt; 
&lt;h3&gt;Contributing to Gatsby v3&lt;/h3&gt; 
&lt;p&gt;We are only accepting critical security patches for Gatsby v3.&lt;/p&gt; 
&lt;h2&gt;ð License&lt;/h2&gt; 
&lt;p&gt;Licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;ð Thanks&lt;/h2&gt; 
&lt;p&gt;Thanks go out to all our many contributors creating plugins, starters, videos, and blog posts. And a special appreciation for our community members helping with issues and PRs, or answering questions on Discord and GitHub Discussions.&lt;/p&gt; 
&lt;p&gt;A big part of what makes Gatsby great is each and every one of you in the community. Your contributions enrich the Gatsby experience and make it better every day.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microsoft/BotBuilder-Samples</title>
      <link>https://github.com/microsoft/BotBuilder-Samples</link>
      <description>&lt;p&gt;Welcome to the Bot Framework samples repository. Here you will find task-focused samples in C#, JavaScript and TypeScript to help you get started with the Bot Framework SDK!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/docs/media/BotFrameworkSamples_header.png&quot; alt=&quot;Bot Framework Samples&quot;&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;a href=&quot;https://github.com/microsoft/botframework-sdk/raw/master/README.md&quot;&gt;Click here to find out what&#39;s new with Bot Framework&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;This branch contains samples for the released version of the &lt;strong&gt;Microsoft Bot Framework V4 SDK&lt;/strong&gt; for &lt;a href=&quot;https://github.com/Microsoft/botbuilder-dotnet&quot;&gt;.NET&lt;/a&gt;, &lt;a href=&quot;https://github.com//microsoft/botbuilder-js&quot;&gt;JS&lt;/a&gt; and &lt;a href=&quot;https://github.com//microsoft/botbuilder-python&quot;&gt;Python&lt;/a&gt;. If you need samples for the Bot Framework &lt;em&gt;V3&lt;/em&gt; SDK, go &lt;a href=&quot;https://github.com/Microsoft/BotBuilder-Samples/tree/v3-sdk-samples&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting the samples&lt;/h2&gt; 
&lt;p&gt;To use the samples, clone this GitHub repository using Git.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;    git clone https://github.com/Microsoft/BotBuilder-Samples.git
    cd BotBuilder-Samples
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Sample lists&lt;/h2&gt; 
&lt;p&gt;Samples are designed to illustrate functionality you&#39;ll need to implement to build great bots!&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#bot-essentials&quot;&gt;Bot essentials&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#advanced-bots&quot;&gt;Advanced bots&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#authentication-samples&quot;&gt;Authentication samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#qna-maker-samples&quot;&gt;QnA Maker samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#teams-samples&quot;&gt;Teams samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#skills-samples&quot;&gt;Skills samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#custom-adapter-samples&quot;&gt;Custom adapter samples&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#experimental--preview-samples&quot;&gt;Experimental / preview samples&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Bot essentials&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Sample Name&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;.NET&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;JavaScript&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Python&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Java&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;2&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Echo bot&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to receive and send messages.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/02.echo-bot&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/02.echo-bot&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/02.echo-bot&quot;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/02.echo-bot&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/02.echo-bot&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;3&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Welcome user&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Introduces activity types and provides a welcome message on conversation update activity.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/03.welcome-user&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/03.welcome-users&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/03.welcome-users&quot;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/03.welcome-user&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/03.welcome-user&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;5&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Multi&amp;nbsp;turn&amp;nbsp;prompts&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to use waterfall dialog, prompts, and component dialog to create a simple interaction that asks the user for name, age, and prints back that information.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/05.multi-turn-prompt&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/05.multi-turn-prompt&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/05.multi-turn-prompt&quot;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/05.multi-turn-prompt&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/05.multi-turn-prompt&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;6&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Using cards&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Introduces all card types including thumbnail, audio, media etc. Builds on Welcoming user + multi-prompt bot by presenting a card with buttons in welcome message that route to appropriate dialog.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/06.using-cards&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/06.using-cards&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/06.using-cards&quot;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/06.using-cards&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/06.using-cards&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;7&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Adaptive cards&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how the multi-turn dialog can use a card to get user input for name and age.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/07.using-adaptive-cards&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/07.using-adaptive-cards&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/07.using-adaptive-cards&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/07.using-adaptive-cards&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;8&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Suggested actions&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to enable your bot to present buttons that the user can tap to provide input.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/08.suggested-actions&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/08.suggested-actions&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/08.suggested-actions&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/08.suggested-actions&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;13&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Core bot&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Core bot shows how to use cards, dialog, and Language Understanding (LUIS).&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/13.core-bot&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_webapi/13.core-bot&quot;&gt;.NET&amp;nbsp;Web&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/13.core-bot&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/13.core-bot&quot;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/13.core-bot&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/13.core-bot&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;14&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;NLP with dispatch&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to dispatch across LUIS and QnA Maker.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/14.nlp-with-orchestrator&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/14.nlp-with-orchestrator&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/14.nlp-with-dispatch&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/14.nlp-with-dispatch&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;15&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Handling&amp;nbsp;attachments&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to listen for/handle user provided attachments.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/15.handling-attachments&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/15.handling-attachments&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/15.handling-attachments&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/15.handling-attachments&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;40&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;TIMEX resolution&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates various ways to parse and manipulate the TIMEX expressions you get from LUIS and the &lt;a href=&quot;https://github.com/Microsoft/recognizers-text&quot;&gt;DateTimeRecognizer&lt;/a&gt; used by the DateTimePrompt.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/40.timex-resolution&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/40.timex-resolution&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/40.timex-resolution&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/40.timex-resolution&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;43&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Complex dialogs&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates different ways for composing dialogs.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/43.complex-dialog&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/43.complex-dialog&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/43.complex-dialog&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/43.complex-dialog&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;45&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;State management&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to use state management and storage objects to manage and persist state.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/45.state-management&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/45.state-management&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/45.state-management&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/45.state-management&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Advanced bots&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Sample Name&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;.NET&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;JavaScript&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Python&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Java&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Console&amp;nbsp;echo&amp;nbsp;bot&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Introduces the concept of adapter and demonstrates a simple echo bot on console adapter and how to send a reply and access the incoming message.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/01.console-echo&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/01.console-echo&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/01.console-echo&quot;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/01.console-echo&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;1&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Browser echo bot&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to host a bot in the browser using Web Chat and a custom Web Chat Adapter.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_es6/01.browser-echo&quot;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;16&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Proactive&amp;nbsp;messages&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to send proactive messages to users.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/16.proactive-messages&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/16.proactive-messages&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/16.proactive-messages&quot;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/16.proactive-messages&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/16.proactive-messages&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;17&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Multilingual bot&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Using translate middleware to support a multi-lingual bot. Demonstrates custom middleware.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/17.multilingual-bot&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/17.multilingual-bot&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/17.multilingual-bot&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/17.multilingual-bot&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;19&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Custom dialogs&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates complex conversation flow using the Dialogs library.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/19.custom-dialogs&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/19.custom-dialogs&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/19.custom-dialogs&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/19.custom-dialogs&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;21&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Application&amp;nbsp;Insights&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to add telemetry logging to your bot, storing telemetry within Application Insights.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/21.corebot-app-insights&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/21.corebot-app-insights&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/21.corebot-app-insights&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;23&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Facebook events&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Integrate and consume Facebook specific payloads, such as post-backs, quick replies and opt-in events.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/23.facebook-events&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/23.facebook-events&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/23.facebook-events&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/23.facebook-events&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;42&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Scale out&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how you can build your own state solution from the ground up that supports scaled out deployment with ETag based optimistic locking.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/42.scaleout&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/42.scaleout&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/42.scaleout&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;44&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Basic custom prompts&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to implement your own &lt;em&gt;basic&lt;/em&gt; prompts to ask the user for information.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/44.prompt-users-for-input&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/44.prompt-for-user-input&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/44.prompt-for-user-input&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/44.prompt-users-for-input&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;47&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Inspection&amp;nbsp;middleware&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to use middleware to allow the Bot Framework Emulator to debug traffic into and out of the bot in addition to looking at the current state of the bot.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/47.inspection&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/47.inspection&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/47.inspection&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/47.inspection&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;70&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Styling webchat&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;This sample shows how to create a web page with custom Web Chat component.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_es6/70.styling-webchat&quot;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Authentication samples&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Sample Name&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;.NET&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;JavaScript&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Python&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Java&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;18&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;OAuth authentication&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Bot that demonstrates how to integrate OAuth providers.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/18.bot-authentication&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/18.bot-authentication&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/18.bot-authentication&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/18.bot-authentication&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;24&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;MSGraph&amp;nbsp;authentication&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates bot authentication capabilities of Azure Bot Service. Demonstrates utilizing the Microsoft Graph API to retrieve data about the user.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/24.bot-authentication-msgraph&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/24.bot-authentication-msgraph&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/24.bot-authentication-msgraph&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/24.bot-authentication-msgraph&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;46&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Teams authentication&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to use authentication for a bot running in Microsoft Teams.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/46.teams-auth&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/46.teams-auth&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/46.teams-auth&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/46.teams-auth&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;QnA Maker samples&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Sample Name&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;.NET&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;JavaScript&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Python&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Java&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;11&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;QnA Maker (simple)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to use QnA Maker to have simple single-turn conversations&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/11.qnamaker&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/11.qnamaker&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/11.qnamaker&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/11.qnamaker&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;49&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;QnA&amp;nbsp;Maker&amp;nbsp;(advanced)&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to integrate Multiturn and Active learning in a QnA Maker bot. This also demonstrates the QnAMakerDialog class.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/49.qnamaker-all-features&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/49.qnamaker-all-features&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/49.qnamaker-all-features&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Teams samples&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Sample Name&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;.NET&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;JavaScript&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Python&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Java&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;25&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Message Reactions&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to create a simple bot that responds to Message Reactions&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/25.message-reaction&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/25.message-reaction&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/25.message-reaction&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;46&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Authentication&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to use authentication for a bot running in Microsoft Teams.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/46.teams-auth&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/46.teams-auth&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/46.teams-auth&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/46.teams-auth&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;50&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Messaging&amp;nbsp;extensions&amp;nbsp;- search&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A Messaging Extension that accepts search requests and returns results.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/50.teams-messaging-extensions-search&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/50.teams-messaging-extensions-search&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/50.teams-messaging-extensions-search&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/50.teams-messaging-extensions-search&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;51&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Messaging&amp;nbsp;extensions&amp;nbsp;- action&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A Messaging Extension that accepts parameters and returns a card. Also, how to receive a forwarded message as a parameter in a Messaging Extension.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/51.teams-messaging-extensions-action&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/51.teams-messaging-extensions-action&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/51.teams-messaging-extensions-action&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/51.teams-messaging-extensions-action&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;52&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Messaging&amp;nbsp;extensions&amp;nbsp;- auth and config&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A Messaging Extension that has a configuration page, accepts search requests and returns results after the user has signed in.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/52.teams-messaging-extensions-search-auth-config&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/52.teams-messaging-extensions-search-auth-config&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/52.teams-messaging-extensions-search-auth-config&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;53&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Messaging&amp;nbsp;extensions&amp;nbsp;- action preview&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to create a Preview and Edit flow for a Messaging Extension.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/53.teams-messaging-extensions-action-preview&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/53.teams-messaging-extensions-action-preview&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/53.teams-messaging-extensions-action-preview&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/53.teams-messaging-extensions-action-preview&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;54&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Task module&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to retrieve a Task Module, and values from cards in the Task Module, for a Messaging Extension.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/54.teams-task-module&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/54.teams-task-module&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/54.teams-task-module&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/54.teams-task-module&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;55&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Link unfurling&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;A Messaging Extension that performs link unfurling.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/55.teams-link-unfurling&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/55.teams-link-unfurling&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/55.teams-link-unfurling&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/55.teams-link-unfurling&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;56&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;File upload&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates how to obtain file consent, and upload files to Teams from a bot. Also, how to receive a file sent to a bot.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/56.teams-file-upload&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/56.teams-file-upload&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/56.teams-file-upload&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/56.teams-file-upload&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;57&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Conversation bot&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates various features of bots on Teams: message all members in a Team or Channel, @mention a user from a bot, update previously sent messages, etc.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/57.teams-conversation-bot&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/57.teams-conversation-bot&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/57.teams-conversation-bot&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/57.teams-conversation-bot&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;58&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Start new thread in a channel&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates creating a new thread in a channel.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/58.teams-start-new-thread-in-channel&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/58.teams-start-new-thread-in-channel&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/58.teams-start-thread-in-channel&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/58.teams-start-new-thread-in-channel&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Custom adapter samples&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Sample Name&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;.NET&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;JavaScript&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Python&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Java&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;60&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Slack&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates the use of the custom adapter for Slack.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/60.slack-adapter&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/60.slack-adapter&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;61&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Facebook&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates the use of the custom adapter for Facebook.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/61.facebook-adapter&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;62&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Webex&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates the use of the custom adapter for Webex Teams.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/62.webex-adapter&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;63&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Twilio&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Demonstrates the use of the custom adapter for Twilio.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/63.twilio-adapter&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Skills samples&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Sample Name&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;.NET&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;JavaScript&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Python&lt;/th&gt; 
   &lt;th align=&quot;left&quot;&gt;Java&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;80&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Skills&amp;nbsp;-&amp;nbsp;simple&amp;nbsp;bot&amp;nbsp;to&amp;nbsp;bot&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;This sample shows how to connect a skill to a skill consumer.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/80.skills-simple-bot-to-bot&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/80.skills-simple-bot-to-bot&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/80.skills-simple-bot-to-bot&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/80.skills-simple-bot-to-bot&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;81&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;Skills - skill dialog&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;This sample shows how to connect a skill to a skill dialog consumer.&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/81.skills-skilldialog&quot;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/81.skills-skilldialog&quot;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/81.skills-skilldialog&quot;&gt;Python&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/81.skills-skilldialog&quot;&gt;Java&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Experimental / preview samples&lt;/h3&gt; 
&lt;p&gt;A &lt;a href=&quot;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/experimental&quot;&gt;collection of &lt;strong&gt;experimental&lt;/strong&gt; samples&lt;/a&gt; exist, intended to provide samples for features currently in preview or as a way to solicit feedback on a given design, approach, or technology being considered by the Bot Framework Team.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&quot;https://cla.microsoft.com&quot;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/&quot;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/faq/&quot;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&quot;mailto:opencode@microsoft.com&quot;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; 
&lt;h2&gt;Reporting security issues&lt;/h2&gt; 
&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) at &lt;a href=&quot;mailto:secure@microsoft.com&quot;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the &lt;a href=&quot;https://technet.microsoft.com/en-us/security/dn606155&quot;&gt;MSRC PGP&lt;/a&gt; key, can be found in the &lt;a href=&quot;https://technet.microsoft.com/en-us/security/default&quot;&gt;Security TechCenter&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Copyright (c) Microsoft Corporation. All rights reserved.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>goldbergyoni/nodebestpractices</title>
      <link>https://github.com/goldbergyoni/nodebestpractices</link>
      <description>&lt;p&gt;â The Node.js best practices list (December 2021)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Best Practices&lt;/h1&gt; 
&lt;h1 align=&quot;center&quot;&gt; &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/banner-2.jpg&quot; alt=&quot;Node.js Best Practices&quot;&gt; &lt;/h1&gt; 
&lt;br&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://img.shields.io/badge/â%20Item%20count%20-%20102%20Best%20Practices-blue.svg&quot; alt=&quot;102 items&quot;&gt; 
 &lt;img id=&quot;last-update-badge&quot; src=&quot;https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20November%2030%2C%202021-green.svg?sanitize=true&quot; alt=&quot;Last update: November 30, 2021&quot;&gt; 
 &lt;img src=&quot;https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2014.0.0-brightgreen.svg&quot; alt=&quot;Updated for Node 14.0.0&quot;&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nodepractices/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/twitter-s.png&quot; alt=&quot;nodepractices&quot;&gt;&lt;/a&gt; &lt;strong&gt;Follow us on Twitter!&lt;/strong&gt; &lt;a href=&quot;https://twitter.com/nodepractices/&quot;&gt;&lt;strong&gt;@nodepractices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;p&gt;Read in a different language: &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.chinese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/CN.png&quot; alt=&quot;CN&quot;&gt;&lt;strong&gt;CN&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.french.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/FR.png&quot; alt=&quot;FR&quot;&gt;&lt;strong&gt;FR&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.brazilian-portuguese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/BR.png&quot; alt=&quot;BR&quot;&gt;&lt;strong&gt;BR&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.russian.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/RU.png&quot; alt=&quot;RU&quot;&gt;&lt;strong&gt;RU&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.polish.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/PL.png&quot; alt=&quot;PL&quot;&gt;&lt;strong&gt;PL&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.japanese.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/JA.png&quot; alt=&quot;JA&quot;&gt;&lt;strong&gt;JA&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.basque.md&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png&quot; alt=&quot;EU&quot;&gt;&lt;strong&gt;EU&lt;/strong&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translations&quot;&gt;(&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/ES.png&quot; alt=&quot;ES&quot;&gt;&lt;strong&gt;ES&lt;/strong&gt;, &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/HE.png&quot; alt=&quot;HE&quot;&gt;&lt;strong&gt;HE&lt;/strong&gt;, &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/KR.png&quot; alt=&quot;KR&quot;&gt;&lt;strong&gt;KR&lt;/strong&gt; and &lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/TR.png&quot; alt=&quot;TR&quot;&gt;&lt;strong&gt;TR&lt;/strong&gt; in progress! )&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;h6&gt;Built and maintained by our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#steering-committee&quot;&gt;Steering Committee&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#collaborators&quot;&gt;Collaborators&lt;/a&gt;&lt;/h6&gt; 
&lt;h1&gt;Latest Best Practices and News&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ð New menu and tags&lt;/strong&gt;: Our menu is collapsible now and include &lt;code&gt;#tags&lt;/code&gt;. New visitors can read &lt;code&gt;#strategic&lt;/code&gt; items first. Returning visitors can focus on &lt;code&gt;#new&lt;/code&gt; content. Seniors can filter for &lt;code&gt;#advanced&lt;/code&gt; items. Courtesy of the one and only &lt;a href=&quot;https://github.com/rubek-joshi@rubek-joshi&quot;&gt;Rubek Joshi&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;ð¨âð©âð§âð¦ New family member!&lt;/strong&gt;: A new repository joins our family - &lt;a href=&quot;https://github.com/testjavascript/nodejs-integration-tests-best-practices&quot;&gt;Node.js Integration Tests Best Practices â¨&lt;/a&gt;. It includes 40+ best practices for writing awesome and performant Node.js component tests&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/FR.png&quot; alt=&quot;FR&quot;&gt; French translation!1! :&lt;/strong&gt; The latest translation that joins our international guide is French. Bienvenue&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;Welcome! 3 Things You Ought To Know First&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;1. You are reading dozens of the best Node.js articles -&lt;/strong&gt; this repository is a summary and curation of the top-ranked content on Node.js best practices, as well as content written here by collaborators&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;2. It is the largest compilation, and it is growing every week -&lt;/strong&gt; currently, more than 80 best practices, style guides, and architectural tips are presented. New issues and pull requests are created every day to keep this live book updated. We&#39;d love to see you contributing here, whether that is fixing code mistakes, helping with translations, or suggesting brilliant new ideas. See our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/writing-guidelines.md&quot;&gt;writing guidelines here&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;3. Best practices have additional info -&lt;/strong&gt; most bullets include a &lt;strong&gt;ðRead More&lt;/strong&gt; link that expands on the practice with code examples, quotes from selected blogs, and more information&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;Table of Contents&lt;/h2&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#1-project-structure-practices&quot;&gt;1. Project Structure Practices (5)&lt;/a&gt; &lt;/summary&gt; 
 &lt;p&gt;ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-11-structure-your-solution-by-components&quot;&gt;1.1 Structure your solution by components &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-12-layer-your-components-keep-the-web-layer-within-its-boundaries&quot;&gt;1.2 Layer your components, keep the web layer within its boundaries &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-13-wrap-common-utilities-as-npm-packages&quot;&gt;1.3 Wrap common utilities as npm packages&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-14-separate-express-app-and-server&quot;&gt;1.4 Separate Express &#39;app&#39; and &#39;server&#39;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-15-use-environment-aware-secure-and-hierarchical-config&quot;&gt;1.5 Use environment aware, secure and hierarchical config &lt;code&gt;#modified-recently&lt;/code&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#2-error-handling-practices&quot;&gt;2. Error Handling Practices (12)&lt;/a&gt; &lt;/summary&gt; 
 &lt;p&gt;ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-21-use-async-await-or-promises-for-async-error-handling&quot;&gt;2.1 Use Async-Await or promises for async error handling&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-22-use-only-the-built-in-error-object&quot;&gt;2.2 Use only the built-in Error object &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-23-distinguish-operational-vs-programmer-errors&quot;&gt;2.3 Distinguish operational vs programmer errors &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-24-handle-errors-centrally-not-within-a-middleware&quot;&gt;2.4 Handle errors centrally, not within a middleware &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-25-document-api-errors-using-swagger-or-graphql&quot;&gt;2.5 Document API errors using Swagger or GraphQL &lt;code&gt;#modified-recently&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-26-exit-the-process-gracefully-when-a-stranger-comes-to-town&quot;&gt;2.6 Exit the process gracefully when a stranger comes to town &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-27-use-a-mature-logger-to-increase-error-visibility&quot;&gt;2.7 Use a mature logger to increase error visibility&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-28-test-error-flows-using-your-favorite-test-framework&quot;&gt;2.8 Test error flows using your favorite test framework&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-29-discover-errors-and-downtime-using-apm-products&quot;&gt;2.9 Discover errors and downtime using APM products&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-210-catch-unhandled-promise-rejections&quot;&gt;2.10 Catch unhandled promise rejections &lt;code&gt;#modified-recently&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-211-fail-fast-validate-arguments-using-a-dedicated-library&quot;&gt;2.11 Fail fast, validate arguments using a dedicated library&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-212-always-await-promises-before-returning-to-avoid-a-partial-stacktrace&quot;&gt;2.12 Always await promises before returning to avoid a partial stacktrace &lt;code&gt;#new&lt;/code&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#3-code-style-practices&quot;&gt;3. Code Style Practices (12)&lt;/a&gt; &lt;/summary&gt; 
 &lt;p&gt;ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-31-use-eslint&quot;&gt;3.1 Use ESLint &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-32-nodejs-specific-plugins&quot;&gt;3.2 Node.js specific plugins&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-33-start-a-codeblocks-curly-braces-on-the-same-line&quot;&gt;3.3 Start a Codeblock&#39;s Curly Braces on the Same Line&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-34-separate-your-statements-properly&quot;&gt;3.4 Separate your statements properly&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-35-name-your-functions&quot;&gt;3.5 Name your functions&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-36-use-naming-conventions-for-variables-constants-functions-and-classes&quot;&gt;3.6 Use naming conventions for variables, constants, functions and classes&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-37-prefer-const-over-let-ditch-the-var&quot;&gt;3.7 Prefer const over let. Ditch the var&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-38-require-modules-first-not-inside-functions&quot;&gt;3.8 Require modules first, not inside functions&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-39-require-modules-by-folders-as-opposed-to-the-files-directly&quot;&gt;3.9 Require modules by folders, as opposed to the files directly&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-310-use-the--operator&quot;&gt;3.10 Use the === operator&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-311-use-async-await-avoid-callbacks&quot;&gt;3.11 Use Async Await, avoid callbacks &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-312-use-arrow-function-expressions-&quot;&gt;3.12 Use arrow function expressions (=&amp;gt;)&lt;/a&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#4-testing-and-overall-quality-practices&quot;&gt;4. Testing And Overall Quality Practices (13)&lt;/a&gt; &lt;/summary&gt; 
 &lt;p&gt;ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-41-at-the-very-least-write-api-component-testing&quot;&gt;4.1 At the very least, write API (component) testing &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-42-include-3-parts-in-each-test-name&quot;&gt;4.2 Include 3 parts in each test name &lt;code&gt;#new&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-43-structure-tests-by-the-aaa-pattern&quot;&gt;4.3 Structure tests by the AAA pattern &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-44-detect-code-issues-with-a-linter&quot;&gt;4.4 Detect code issues with a linter&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-45-avoid-global-test-fixtures-and-seeds-add-data-per-test&quot;&gt;4.5 Avoid global test fixtures and seeds, add data per-test &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-46-constantly-inspect-for-vulnerable-dependencies&quot;&gt;4.6 Constantly inspect for vulnerable dependencies&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-47-tag-your-tests&quot;&gt;4.7 Tag your tests &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-48-check-your-test-coverage-it-helps-to-identify-wrong-test-patterns&quot;&gt;4.8 Check your test coverage, it helps to identify wrong test patterns&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-49-inspect-for-outdated-packages&quot;&gt;4.9 Inspect for outdated packages&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-410-use-production-like-environment-for-e2e-testing&quot;&gt;4.10 Use production-like environment for e2e testing&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-411-refactor-regularly-using-static-analysis-tools&quot;&gt;4.11 Refactor regularly using static analysis tools&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-412-carefully-choose-your-ci-platform-jenkins-vs-circleci-vs-travis-vs-rest-of-the-world&quot;&gt;4.12 Carefully choose your CI platform (Jenkins vs CircleCI vs Travis vs Rest of the world)&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-413-test-your-middlewares-in-isolation&quot;&gt;4.13 Test your middlewares in isolation&lt;/a&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#5-going-to-production-practices&quot;&gt;5. Going To Production Practices (19)&lt;/a&gt; &lt;/summary&gt; 
 &lt;p&gt;ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-51-monitoring&quot;&gt;5.1. Monitoring &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-52-increase-transparency-using-smart-logging&quot;&gt;5.2. Increase transparency using smart logging &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-53-delegate-anything-possible-eg-gzip-ssl-to-a-reverse-proxy&quot;&gt;5.3. Delegate anything possible (e.g. gzip, SSL) to a reverse proxy &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-54-lock-dependencies&quot;&gt;5.4. Lock dependencies&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-55-guard-process-uptime-using-the-right-tool&quot;&gt;5.5. Guard process uptime using the right tool&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-56-utilize-all-cpu-cores&quot;&gt;5.6. Utilize all CPU cores&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-57-create-a-maintenance-endpoint&quot;&gt;5.7. Create a âmaintenance endpointâ&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-58-discover-errors-and-downtime-using-apm-products&quot;&gt;5.8. Discover errors and downtime using APM products &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-59-make-your-code-production-ready&quot;&gt;5.9. Make your code production-ready&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-510-measure-and-guard-the-memory-usage&quot;&gt;5.10. Measure and guard the memory usage &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-511-get-your-frontend-assets-out-of-node&quot;&gt;5.11. Get your frontend assets out of Node&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-512-be-stateless-kill-your-servers-almost-every-day&quot;&gt;5.12. Be stateless, kill your servers almost every day&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-513-use-tools-that-automatically-detect-vulnerabilities&quot;&gt;5.13. Use tools that automatically detect vulnerabilities&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-514-assign-a-transaction-id-to-each-log-statement&quot;&gt;5.14. Assign a transaction id to each log statement &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-515-set-node_envproduction&quot;&gt;5.15. Set NODE_ENV=production&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-516-design-automated-atomic-and-zero-downtime-deployments&quot;&gt;5.16. Design automated, atomic and zero-downtime deployments &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-517-use-an-lts-release-of-nodejs&quot;&gt;5.17. Use an LTS release of Node.js&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-518-dont-route-logs-within-the-app&quot;&gt;5.18. Don&#39;t route logs within the app&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-519-install-your-packages-with-npm-ci&quot;&gt;5.19. Install your packages with npm ci &lt;code&gt;#new&lt;/code&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#6-security-best-practices&quot;&gt;6. Security Practices (25)&lt;/a&gt; &lt;/summary&gt; 
 &lt;p&gt;ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-61-embrace-linter-security-rules&quot;&gt;6.1. Embrace linter security rules&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-62-limit-concurrent-requests-using-a-middleware&quot;&gt;6.2. Limit concurrent requests using a middleware&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-63-extract-secrets-from-config-files-or-use-packages-to-encrypt-them&quot;&gt;6.3 Extract secrets from config files or use packages to encrypt them &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-64-prevent-query-injection-vulnerabilities-with-ormodm-libraries&quot;&gt;6.4. Prevent query injection vulnerabilities with ORM/ODM libraries &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-65-collection-of-generic-security-best-practices&quot;&gt;6.5. Collection of generic security best practices&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-66-adjust-the-http-response-headers-for-enhanced-security&quot;&gt;6.6. Adjust the HTTP response headers for enhanced security&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-67-constantly-and-automatically-inspect-for-vulnerable-dependencies&quot;&gt;6.7. Constantly and automatically inspect for vulnerable dependencies &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-68-protect-users-passwordssecrets-using-bcrypt-or-scrypt&quot;&gt;6.8. Protect Users&#39; Passwords/Secrets using bcrypt or scrypt &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-69-escape-html-js-and-css-output&quot;&gt;6.9. Escape HTML, JS and CSS output&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-610-validate-incoming-json-schemas&quot;&gt;6.10. Validate incoming JSON schemas &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-611-support-blocklisting-jwts&quot;&gt;6.11. Support blocklisting JWTs&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-612-prevent-brute-force-attacks-against-authorization&quot;&gt;6.12. Prevent brute-force attacks against authorization &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-613-run-nodejs-as-non-root-user&quot;&gt;6.13. Run Node.js as non-root user&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-614-limit-payload-size-using-a-reverse-proxy-or-a-middleware&quot;&gt;6.14. Limit payload size using a reverse-proxy or a middleware&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-615-avoid-javascript-eval-statements&quot;&gt;6.15. Avoid JavaScript eval statements&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-616-prevent-evil-regex-from-overloading-your-single-thread-execution&quot;&gt;6.16. Prevent evil RegEx from overloading your single thread execution&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-617-avoid-module-loading-using-a-variable&quot;&gt;6.17. Avoid module loading using a variable&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-618-run-unsafe-code-in-a-sandbox&quot;&gt;6.18. Run unsafe code in a sandbox&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-619-take-extra-care-when-working-with-child-processes&quot;&gt;6.19. Take extra care when working with child processes &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-620-hide-error-details-from-clients&quot;&gt;6.20. Hide error details from clients&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-621-configure-2fa-for-npm-or-yarn&quot;&gt;6.21. Configure 2FA for npm or Yarn &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-622-modify-session-middleware-settings&quot;&gt;6.22. Modify session middleware settings&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-623-avoid-dos-attacks-by-explicitly-setting-when-a-process-should-crash&quot;&gt;6.23. Avoid DOS attacks by explicitly setting when a process should crash &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-624-prevent-unsafe-redirects&quot;&gt;6.24. Prevent unsafe redirects&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-625-avoid-publishing-secrets-to-the-npm-registry&quot;&gt;6.25. Avoid publishing secrets to the npm registry&lt;/a&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#7-draft-performance-best-practices&quot;&gt;7. Performance Practices (2) (Work In Progressï¸ âï¸)&lt;/a&gt; &lt;/summary&gt; 
 &lt;p&gt;ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-71-dont-block-the-event-loop&quot;&gt;7.1. Don&#39;t block the event loop&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-72-prefer-native-js-methods-over-user-land-utils-like-lodash&quot;&gt;7.2. Prefer native JS methods over user-land utils like Lodash&lt;/a&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;details&gt; 
 &lt;summary&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#8-docker-best-practices&quot;&gt;8. Docker Practices (15)&lt;/a&gt; &lt;/summary&gt; 
 &lt;p&gt;ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-81-use-multi-stage-builds-for-leaner-and-more-secure-docker-images&quot;&gt;8.1 Use multi-stage builds for leaner and more secure Docker images &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-82-bootstrap-using-node-command-avoid-npm-start&quot;&gt;8.2. Bootstrap using node command, avoid npm start&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-83-let-the-docker-runtime-handle-replication-and-uptime&quot;&gt;8.3. Let the Docker runtime handle replication and uptime &lt;code&gt;#strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-84-use-dockerignore-to-prevent-leaking-secrets&quot;&gt;8.4. Use .dockerignore to prevent leaking secrets&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-85-clean-up-dependencies-before-production&quot;&gt;8.5. Clean-up dependencies before production&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-86-shutdown-smartly-and-gracefully&quot;&gt;8.6. Shutdown smartly and gracefully &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-87-set-memory-limits-using-both-docker-and-v8&quot;&gt;8.7. Set memory limits using both Docker and v8 &lt;code&gt;#advanced #strategic&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-88-plan-for-efficient-caching&quot;&gt;8.8. Plan for efficient caching&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-89-use-explicit-image-reference-avoid-latest-tag&quot;&gt;8.9. Use explicit image reference, avoid latest tag&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-810-prefer-smaller-docker-base-images&quot;&gt;8.10. Prefer smaller Docker base images&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-811-clean-out-build-time-secrets-avoid-secrets-in-args&quot;&gt;8.11. Clean-out build-time secrets, avoid secrets in args &lt;code&gt;#strategic #new&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-812-scan-images-for-multi-layers-of-vulnerabilities&quot;&gt;8.12. Scan images for multi layers of vulnerabilities &lt;code&gt;#advanced&lt;/code&gt;&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-813-clean-node_module-cache&quot;&gt;8.13 Clean NODE_MODULE cache&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-814-generic-docker-practices&quot;&gt;8.14. Generic Docker practices&lt;/a&gt;&lt;br&gt; ââ&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#-815-lint-your-dockerfile&quot;&gt;8.15. Lint your Dockerfile &lt;code&gt;#new&lt;/code&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; 
&lt;/details&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;1. Project Structure Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 1.1 Structure your solution by components&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The worst large applications pitfall is maintaining a huge code base with hundreds of dependencies - such a monolith slows down developers as they try to incorporate new features. Instead, partition your code into components, each gets its folder or a dedicated codebase, and ensure that each unit is kept small and simple. Visit &#39;Read More&#39; below to see examples of correct project structure&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When developers who code new features struggle to realize the impact of their change and fear to break other dependent components - deployments become slower and riskier. It&#39;s also considered harder to scale-out when all the business units are not separated&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/breakintcomponents.md&quot;&gt;&lt;strong&gt;Read More: structure by components&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 1.2 Layer your components, keep the web layer within its boundaries&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Each component should contain &#39;layers&#39; - a dedicated object for the web, logic, and data access code. This not only draws a clean separation of concerns but also significantly eases mocking and testing the system. Though this is a very common pattern, API developers tend to mix layers by passing the web layer objects (e.g. Express req, res) to business logic and data layers - this makes your application dependent on and accessible only by specific web frameworks&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; App that mixes web objects with other layers cannot be accessed by testing code, CRON jobs, triggers from message queues, etc&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/createlayers.md&quot;&gt;&lt;strong&gt;Read More: layer your app&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 1.3 Wrap common utilities as npm packages&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In a large app that constitutes a large codebase, cross-cutting-concern utilities like a logger, encryption and alike, should be wrapped by your code and exposed as private npm packages. This allows sharing them among multiple codebases and projects&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You&#39;ll have to invent your deployment and the dependency wheel&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/wraputilities.md&quot;&gt;&lt;strong&gt;Read More: Structure by feature&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 1.4 Separate Express &#39;app&#39; and &#39;server&#39;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid the nasty habit of defining the entire &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; app in a single huge file - separate your &#39;Express&#39; definition to at least two files: the API declaration (app.js) and the networking concerns (WWW). For even better structure, locate your API declaration within components&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your API will be accessible for testing via HTTP calls only (slower and much harder to generate coverage reports). It probably won&#39;t be a big pleasure to maintain hundreds of lines of code in a single file&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/separateexpress.md&quot;&gt;&lt;strong&gt;Read More: separate Express &#39;app&#39; and &#39;server&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 1.5 Use environment aware, secure and hierarchical config&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A perfect and flawless configuration setup should ensure (a) keys can be read from file AND from environment variable (b) secrets are kept outside committed code (c) config is hierarchical for easier findability. There are a few packages that can help tick most of those boxes like &lt;a href=&quot;https://www.npmjs.com/package/rc&quot;&gt;rc&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/nconf&quot;&gt;nconf&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/config&quot;&gt;config&lt;/a&gt;, and &lt;a href=&quot;https://www.npmjs.com/package/convict&quot;&gt;convict&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failing to satisfy any of the config requirements will simply bog down the development or DevOps team. Probably both&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/projectstructre/configguide.md&quot;&gt;&lt;strong&gt;Read More: configuration best practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#table-of-contents&quot;&gt;â¬ Return to top&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;2. Error Handling Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.1 Use Async-Await or promises for async error handling&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Handling async errors in callback style is probably the fastest way to hell (a.k.a the pyramid of doom). The best gift you can give to your code is using a reputable promise library or async-await instead which enables a much more compact and familiar code syntax like try-catch&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Node.js callback style, function(err, response), is a promising way to un-maintainable code due to the mix of error handling with casual code, excessive nesting, and awkward coding patterns&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/asyncerrorhandling.md&quot;&gt;&lt;strong&gt;Read More: avoiding callbacks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.2 Use only the built-in Error object&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Many throw errors as a string or as some custom type â this complicates the error handling logic and the interoperability between modules. Whether you reject a promise, throw an exception or emit an error â using only the built-in Error object (or an object that extends the built-in Error object) will increase uniformity and prevent loss of information. There is &lt;code&gt;no-throw-literal&lt;/code&gt; ESLint rule that strictly checks that (although it have some &lt;a href=&quot;https://eslint.org/docs/rules/no-throw-literal&quot;&gt;limitations&lt;/a&gt; which can be solved when using TypeScript and setting the &lt;code&gt;@typescript-eslint/no-throw-literal&lt;/code&gt; rule)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When invoking some component, being uncertain which type of errors come in return â it makes proper error handling much harder. Even worse, using custom types to describe errors might lead to loss of critical error information like the stack trace!&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/useonlythebuiltinerror.md&quot;&gt;&lt;strong&gt;Read More: using the built-in error object&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.3 Distinguish operational vs programmer errors&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Operational errors (e.g. API received an invalid input) refer to known cases where the error impact is fully understood and can be handled thoughtfully. On the other hand, programmer error (e.g. trying to read an undefined variable) refers to unknown code failures that dictate to gracefully restart the application&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may always restart the application when an error appears, but why let ~5000 online users down because of a minor, predicted, operational error? the opposite is also not ideal â keeping the application up when an unknown issue (programmer error) occurred might lead to an unpredicted behavior. Differentiating the two allows acting tactfully and applying a balanced approach based on the given context&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/operationalvsprogrammererror.md&quot;&gt;&lt;strong&gt;Read More: operational vs programmer error&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.4 Handle errors centrally, not within a middleware&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Error handling logic such as mail to admin and logging should be encapsulated in a dedicated and centralized object that all endpoints (e.g. Express middleware, cron jobs, unit-testing) call when an error comes in&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Not handling errors within a single place will lead to code duplication and probably to improperly handled errors&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/centralizedhandling.md&quot;&gt;&lt;strong&gt;Read More: handling errors in a centralized place&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.5 Document API errors using Swagger or GraphQL&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Let your API callers know which errors might come in return so they can handle these thoughtfully without crashing. For RESTful APIs, this is usually done with documentation frameworks like Swagger. If you&#39;re using GraphQL, you can utilize your schema and comments as well.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An API client might decide to crash and restart only because it received back an error it couldnât understand. Note: the caller of your API might be you (very typical in a microservice environment)&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/documentingusingswagger.md&quot;&gt;&lt;strong&gt;Read More: documenting API errors in Swagger or GraphQL&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.6 Exit the process gracefully when a stranger comes to town&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When an unknown error occurs (a developer error, see best practice 2.3) - there is uncertainty about the application healthiness. Common practice suggests restarting the process carefully using a process management tool like &lt;a href=&quot;https://www.npmjs.com/package/forever&quot;&gt;Forever&lt;/a&gt; or &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When an unfamiliar exception occurs, some object might be in a faulty state (e.g. an event emitter which is used globally and not firing events anymore due to some internal failure) and all future requests might fail or behave crazily&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/shuttingtheprocess.md&quot;&gt;&lt;strong&gt;Read More: shutting the process&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.7 Use a mature logger to increase error visibility&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A set of mature logging tools like &lt;a href=&quot;https://github.com/pinojs/pino&quot;&gt;Pino&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/log4js&quot;&gt;Log4js&lt;/a&gt;, will speed-up error discovery and understanding. So forget about console.log&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Skimming through console.logs or manually through messy text file without querying tools or a decent log viewer might keep you busy at work until late&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/usematurelogger.md&quot;&gt;&lt;strong&gt;Read More: using a mature logger&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.8 Test error flows using your favorite test framework&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Whether professional automated QA or plain manual developer testing â Ensure that your code not only satisfies positive scenarios but also handles and returns the right errors. Testing frameworks like Mocha &amp;amp; Chai can handle this easily (see code examples within the &quot;Gist popup&quot;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Without testing, whether automatically or manually, you canât rely on your code to return the right errors. Without meaningful errors â thereâs no error handling&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/testingerrorflows.md&quot;&gt;&lt;strong&gt;Read More: testing error flows&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.9 Discover errors and downtime using APM products&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Monitoring and performance products (a.k.a APM) proactively gauge your codebase or API so they can automagically highlight errors, crashes, and slow parts that you were missing&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You might spend great effort on measuring API performance and downtimes, probably youâll never be aware which are your slowest code parts under real-world scenario and how these affect the UX&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/apmproducts.md&quot;&gt;&lt;strong&gt;Read More: using APM products&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.10 Catch unhandled promise rejections&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Any exception thrown within a promise will get swallowed and discarded unless a developer didnât forget to explicitly handle it. Even if your code is subscribed to &lt;code&gt;process.uncaughtException&lt;/code&gt;! Overcome this by registering to the event &lt;code&gt;process.unhandledRejection&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your errors will get swallowed and leave no trace. Nothing to worry about&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/catchunhandledpromiserejection.md&quot;&gt;&lt;strong&gt;Read More: catching unhandled promise rejection&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.11 Fail fast, validate arguments using a dedicated library&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Assert API input to avoid nasty bugs that are much harder to track later. The validation code is usually tedious unless you are using a very cool helper library like &lt;a href=&quot;https://www.npmjs.com/package/ajv&quot;&gt;ajv&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/joi&quot;&gt;Joi&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Consider this â your function expects a numeric argument âDiscountâ which the caller forgets to pass, later on, your code checks if Discount!=0 (amount of allowed discount is greater than zero), then it will allow the user to enjoy a discount. OMG, what a nasty bug. Can you see it?&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/failfast.md&quot;&gt;&lt;strong&gt;Read More: failing fast&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 2.12 Always await promises before returning to avoid a partial stacktrace&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Always do &lt;code&gt;return await&lt;/code&gt; when returning a promise to benefit full error stacktrace. If a function returns a promise, that function must be declared as &lt;code&gt;async&lt;/code&gt; function and explicitly &lt;code&gt;await&lt;/code&gt; the promise before returning it&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The function that returns a promise without awaiting won&#39;t appear in the stacktrace. Such missing frames would probably complicate the understanding of the flow that leads to the error, especially if the cause of the abnormal behavior is inside of the missing function&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/errorhandling/returningpromises.md&quot;&gt;&lt;strong&gt;Read More: returning promises&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#table-of-contents&quot;&gt;â¬ Return to top&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;3. Code Style Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.1 Use ESLint&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &lt;a href=&quot;https://eslint.org&quot;&gt;ESLint&lt;/a&gt; is the de-facto standard for checking possible code errors and fixing code style, not only to identify nitty-gritty spacing issues but also to detect serious code anti-patterns like developers throwing errors without classification. Though ESLint can automatically fix code styles, other tools like &lt;a href=&quot;https://www.npmjs.com/package/prettier&quot;&gt;prettier&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/js-beautify&quot;&gt;beautify&lt;/a&gt; are more powerful in formatting the fix and work in conjunction with ESLint&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Developers will focus on tedious spacing and line-width concerns and time might be wasted overthinking the project&#39;s code style&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/codestylepractices/eslint_prettier.md&quot;&gt;&lt;strong&gt;Read More: Using ESLint and Prettier&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.2 Node.js specific plugins&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; On top of ESLint standard rules that cover vanilla JavaScript, add Node.js specific plugins like &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-node&quot;&gt;eslint-plugin-node&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-mocha&quot;&gt;eslint-plugin-mocha&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-security&quot;&gt;eslint-plugin-node-security&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Many faulty Node.js code patterns might escape under the radar. For example, developers might require(variableAsPath) files with a variable given as a path which allows attackers to execute any JS script. Node.js linters can detect such patterns and complain early&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.3 Start a Codeblock&#39;s Curly Braces on the Same Line&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The opening curly braces of a code block should be on the same line as the opening statement&lt;/p&gt; 
&lt;h3&gt;Code Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
function someFunction() {
  // code block
}

// Avoid
function someFunction() 
{
  // code block
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Deferring from this best practice might lead to unexpected results, as seen in the StackOverflow thread below:&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;Why do results vary based on curly brace placement?&quot; (StackOverflow)&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.4 Separate your statements properly&lt;/h2&gt; 
&lt;p&gt;No matter if you use semicolons or not to separate your statements, knowing the common pitfalls of improper linebreaks or automatic semicolon insertion, will help you to eliminate regular syntax errors.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use ESLint to gain awareness about separation concerns. &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt; or &lt;a href=&quot;https://standardjs.com/&quot;&gt;Standardjs&lt;/a&gt; can automatically resolve these issues.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; As seen in the previous section, JavaScript&#39;s interpreter automatically adds a semicolon at the end of a statement if there isn&#39;t one, or considers a statement as not ended where it should, which might lead to some undesired results. You can use assignments and avoid using immediately invoked function expressions to prevent most of the unexpected errors.&lt;/p&gt; 
&lt;h3&gt;Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
function doThing() {
    // ...
}

doThing()

// Do

const items = [1, 2, 3]
items.forEach(console.log)

// Avoid â throws exception
const m = new Map()
const a = [1,2,3]
[...m.values()].forEach(console.log)
&amp;gt; [...m.values()].forEach(console.log)
&amp;gt;  ^^^
&amp;gt; SyntaxError: Unexpected token ...

// Avoid â throws exception
const count = 2 // it tries to run 2(), but 2 is not a function
(function doSomething() {
  // do something amazing
}())
// put a semicolon before the immediate invoked function, after the const definition, save the return value of the anonymous function to a variable or avoid IIFEs altogether
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://eslint.org/docs/rules/semi&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;Semi ESLint rule&quot;&lt;/a&gt; ð &lt;a href=&quot;https://eslint.org/docs/rules/no-unexpected-multiline&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; &quot;No unexpected multiline ESLint rule&quot;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.5 Name your functions&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Name all functions, including closures and callbacks. Avoid anonymous functions. This is especially useful when profiling a node app. Naming all functions will allow you to easily understand what you&#39;re looking at when checking a memory snapshot&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Debugging production issues using a core dump (memory snapshot) might become challenging as you notice significant memory consumption from anonymous functions&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.6 Use naming conventions for variables, constants, functions and classes&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use &lt;strong&gt;&lt;em&gt;lowerCamelCase&lt;/em&gt;&lt;/strong&gt; when naming constants, variables and functions, &lt;strong&gt;&lt;em&gt;UpperCamelCase&lt;/em&gt;&lt;/strong&gt; (capital first letter as well) when naming classes and &lt;strong&gt;&lt;em&gt;UPPER_SNAKE_CASE&lt;/em&gt;&lt;/strong&gt; when naming global or static variables. This will help you to easily distinguish between plain variables, functions, classes that require instantiation and variables declared at global module scope. Use descriptive names, but try to keep them short&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; JavaScript is the only language in the world that allows invoking a constructor (&quot;Class&quot;) directly without instantiating it first. Consequently, Classes and function-constructors are differentiated by starting with UpperCamelCase&lt;/p&gt; 
&lt;h3&gt;3.6 Code Example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// for global variables names we use the const/let keyword and UPPER_SNAKE_CASE
let MUTABLE_GLOBAL = &quot;mutable value&quot;
const GLOBAL_CONSTANT = &quot;immutable value&quot;;
const CONFIG = {
  key: &quot;value&quot;,
};

// examples of UPPER_SNAKE_CASE convetion in nodejs/javascript ecosystem
// in javascript Math.PI module
const PI = 3.141592653589793;

// https://github.com/nodejs/node/blob/b9f36062d7b5c5039498e98d2f2c180dca2a7065/lib/internal/http2/core.js#L303
// in nodejs http2 module
const HTTP_STATUS_OK = 200;
const HTTP_STATUS_CREATED = 201;

// for class name we use UpperCamelCase
class SomeClassExample {
  // for static class properties we use UPPER_SNAKE_CASE
  static STATIC_PROPERTY = &quot;value&quot;;
}

// for functions names we use lowerCamelCase
function doSomething() {
  // for scoped variable names we use the const/let keyword and lowerCamelCase
  const someConstExample = &quot;immutable value&quot;;
  let someMutableExample = &quot;mutable value&quot;;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.7 Prefer const over let. Ditch the var&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Using &lt;code&gt;const&lt;/code&gt; means that once a variable is assigned, it cannot be reassigned. Preferring &lt;code&gt;const&lt;/code&gt; will help you to not be tempted to use the same variable for different uses, and make your code clearer. If a variable needs to be reassigned, in a for loop, for example, use &lt;code&gt;let&lt;/code&gt; to declare it. Another important aspect of &lt;code&gt;let&lt;/code&gt; is that a variable declared using it is only available in the block scope in which it was defined. &lt;code&gt;var&lt;/code&gt; is function scoped, not block-scoped, and &lt;a href=&quot;https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70&quot;&gt;shouldn&#39;t be used in ES6&lt;/a&gt; now that you have &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; at your disposal&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Debugging becomes way more cumbersome when following a variable that frequently changes&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75&quot;&gt;&lt;strong&gt;Read more: JavaScript ES6+: var, let, or const?&lt;/strong&gt; &lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.8 Require modules first, not inside functions&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Require modules at the beginning of each file, before and outside of any functions. This simple best practice will not only help you easily and quickly tell the dependencies of a file right at the top but also avoids a couple of potential problems&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Requires are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. Also, if a required module or any of its dependencies throw an error and crash the server, it is best to find out about it as soon as possible, which might not be the case if that module is required from within a function&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.9 Require modules by folders, as opposed to the files directly&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When developing a module/library in a folder, place an index.js file that exposes the module&#39;s internals so every consumer will pass through it. This serves as an &#39;interface&#39; to your module and eases future changes without breaking the contract&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Changing the internal structure of files or the signature may break the interface with clients&lt;/p&gt; 
&lt;h3&gt;3.9 Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Do
module.exports.SMSProvider = require(&quot;./SMSProvider&quot;);
module.exports.SMSNumberResolver = require(&quot;./SMSNumberResolver&quot;);

// Avoid
module.exports.SMSProvider = require(&quot;./SMSProvider/SMSProvider.js&quot;);
module.exports.SMSNumberResolver = require(&quot;./SMSNumberResolver/SMSNumberResolver.js&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.10 Use the &lt;code&gt;===&lt;/code&gt; operator&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Prefer the strict equality operator &lt;code&gt;===&lt;/code&gt; over the weaker abstract equality operator &lt;code&gt;==&lt;/code&gt;. &lt;code&gt;==&lt;/code&gt; will compare two variables after converting them to a common type. There is no type conversion in &lt;code&gt;===&lt;/code&gt;, and both variables must be of the same type to be equal&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Unequal variables might return true when compared with the &lt;code&gt;==&lt;/code&gt; operator&lt;/p&gt; 
&lt;h3&gt;3.10 Code example&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;&quot; == &quot;0&quot;; // false
0 == &quot;&quot;; // true
0 == &quot;0&quot;; // true

false == &quot;false&quot;; // false
false == &quot;0&quot;; // true

false == undefined; // false
false == null; // false
null == undefined; // true

&quot; \t\r\n &quot; == 0; // true
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All statements above will return false if used with &lt;code&gt;===&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.11 Use Async Await, avoid callbacks&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node 8 LTS now has full support for Async-await. This is a new way of dealing with asynchronous code which supersedes callbacks and promises. Async-await is non-blocking, and it makes asynchronous code look synchronous. The best gift you can give to your code is using async-await which provides a much more compact and familiar code syntax like try-catch&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Handling async errors in callback style are probably the fastest way to hell - this style forces to check errors all over, deal with awkward code nesting, and makes it difficult to reason about the code flow&lt;/p&gt; 
&lt;p&gt;ð&lt;a href=&quot;https://github.com/yortus/asyncawait&quot;&gt;&lt;strong&gt;Read more:&lt;/strong&gt; Guide to async-await 1.0&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 3.12 Use arrow function expressions (=&amp;gt;)&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Though it&#39;s recommended to use async-await and avoid function parameters when dealing with older APIs that accept promises or callbacks - arrow functions make the code structure more compact and keep the lexical context of the root function (i.e. &lt;code&gt;this&lt;/code&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Longer code (in ES5 functions) is more prone to bugs and cumbersome to read&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75&quot;&gt;&lt;strong&gt;Read more: Itâs Time to Embrace Arrow Functions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#table-of-contents&quot;&gt;â¬ Return to top&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;4. Testing And Overall Quality Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.1 At the very least, write API (component) testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Most projects just don&#39;t have any automated testing due to short timetables or often the &#39;testing project&#39; ran out of control and was abandoned. For that reason, prioritize and start with API testing which is the easiest way to write and provides more coverage than unit testing (you may even craft API tests without code using tools like &lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;). Afterward, should you have more resources and time, continue with advanced test types like unit testing, DB testing, performance testing, etc&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may spend long days on writing unit tests to find out that you got only 20% system coverage&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.2 Include 3 parts in each test name&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Make the test speak at the requirements level so it&#39;s self-explanatory also to QA engineers and developers who are not familiar with the code internals. State in the test name what is being tested (unit under test), under what circumstances, and what is the expected result&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A deployment just failed, a test named âAdd productâ failed. Does this tell you what exactly is malfunctioning?&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/3-parts-in-name.md&quot;&gt;&lt;strong&gt;Read More: Include 3 parts in each test name&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.3 Structure tests by the AAA pattern&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Structure your tests with 3 well-separated sections: Arrange, Act &amp;amp; Assert (AAA). The first part includes the test setup, then the execution of the unit under test, and finally the assertion phase. Following this structure guarantees that the reader spends no brain CPU on understanding the test plan&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Not only you spend long daily hours on understanding the main code, but now also what should have been the simple part of the day (testing) stretches your brain&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/aaa.md&quot;&gt;&lt;strong&gt;Read More: Structure tests by the AAA pattern&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.4 Detect code issues with a linter&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use a code linter to check the basic quality and detect anti-patterns early. Run it before any test and add it as a pre-commit git-hook to minimize the time needed to review and correct any issue. Also check &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#3-code-style-practices&quot;&gt;Section 3&lt;/a&gt; on Code Style Practices&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You may let pass some anti-pattern and possible vulnerable code to your production environment.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.5 Avoid global test fixtures and seeds, add data per-test&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; To prevent test coupling and easily reason about the test flow, each test should add and act on its own set of DB rows. Whenever a test needs to pull or assume the existence of some DB data - it must explicitly add that data and avoid mutating any other records&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Consider a scenario where deployment is aborted due to failing tests, team is now going to spend precious investigation time that ends in a sad conclusion: the system works well, the tests however interfere with each other and break the build&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/avoid-global-test-fixture.md&quot;&gt;&lt;strong&gt;Read More: Avoid global test fixtures&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.6 Constantly inspect for vulnerable dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Even the most reputable dependencies such as Express have known vulnerabilities. This can get easily tamed using community and commercial tools such as ð &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;npm audit&lt;/a&gt; and ð &lt;a href=&quot;https://snyk.io&quot;&gt;snyk.io&lt;/a&gt; that can be invoked from your CI on every build&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Keeping your code clean from vulnerabilities without dedicated tools will require to constantly follow online publications about new threats. Quite tedious&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.7 Tag your tests&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Different tests must run on different scenarios: quick smoke, IO-less, tests should run when a developer saves or commits a file, full end-to-end tests usually run when a new pull request is submitted, etc. This can be achieved by tagging tests with keywords like #cold #api #sanity so you can grep with your testing harness and invoke the desired subset. For example, this is how you would invoke only the sanity test group with &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;: mocha --grep &#39;sanity&#39;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Running all the tests, including tests that perform dozens of DB queries, any time a developer makes a small change can be extremely slow and keeps developers away from running tests&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.8 Check your test coverage, it helps to identify wrong test patterns&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Code coverage tools like &lt;a href=&quot;https://github.com/istanbuljs/istanbuljs&quot;&gt;Istanbul&lt;/a&gt;/&lt;a href=&quot;https://github.com/istanbuljs/nyc&quot;&gt;NYC&lt;/a&gt; are great for 3 reasons: it comes for free (no effort is required to benefit this reports), it helps to identify a decrease in testing coverage, and last but not least it highlights testing mismatches: by looking at colored code coverage reports you may notice, for example, code areas that are never tested like catch clauses (meaning that tests only invoke the happy paths and not how the app behaves on errors). Set it to fail builds if the coverage falls under a certain threshold&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; There won&#39;t be any automated metric telling you when a large portion of your code is not covered by testing&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.9 Inspect for outdated packages&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use your preferred tool (e.g. &lt;code&gt;npm outdated&lt;/code&gt; or &lt;a href=&quot;https://www.npmjs.com/package/npm-check-updates&quot;&gt;npm-check-updates&lt;/a&gt;) to detect installed outdated packages, inject this check into your CI pipeline and even make a build fail in a severe scenario. For example, a severe scenario might be when an installed package is 5 patch commits behind (e.g. local version is 1.3.1 and repository version is 1.3.8) or it is tagged as deprecated by its author - kill the build and prevent deploying this version&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your production will run packages that have been explicitly tagged by their author as risky&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.10 Use production-like environment for e2e testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; End to end (e2e) testing which includes live data used to be the weakest link of the CI process as it depends on multiple heavy services like DB. Use an environment which is as close to your real production environment as possible like a-continue (Missed -continue here, needs content. Judging by the &lt;strong&gt;Otherwise&lt;/strong&gt; clause, this should mention docker-compose)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Without docker-compose, teams must maintain a testing DB for each testing environment including developers&#39; machines, keep all those DBs in sync so test results won&#39;t vary across environments&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.11 Refactor regularly using static analysis tools&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Using static analysis tools helps by giving objective ways to improve code quality and keeps your code maintainable. You can add static analysis tools to your CI build to fail when it finds code smells. Its main selling points over plain linting are the ability to inspect quality in the context of multiple files (e.g. detect duplications), perform advanced analysis (e.g. code complexity), and follow the history and progress of code issues. Two examples of tools you can use are &lt;a href=&quot;https://www.sonarqube.org/&quot;&gt;Sonarqube&lt;/a&gt; (2,600+ &lt;a href=&quot;https://github.com/SonarSource/sonarqube&quot;&gt;stars&lt;/a&gt;) and &lt;a href=&quot;https://codeclimate.com/&quot;&gt;Code Climate&lt;/a&gt; (1,500+ &lt;a href=&quot;https://github.com/codeclimate/codeclimate&quot;&gt;stars&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; With poor code quality, bugs and performance will always be an issue that no shiny new library or state of the art features can fix&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/refactoring.md&quot;&gt;&lt;strong&gt;Read More: Refactoring!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.12 Carefully choose your CI platform (Jenkins vs CircleCI vs Travis vs Rest of the world)&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your continuous integration platform (CICD) will host all the quality tools (e.g. test, lint) so it should come with a vibrant ecosystem of plugins. &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; used to be the default for many projects as it has the biggest community along with a very powerful platform at the price of a complex setup that demands a steep learning curve. Nowadays, it has become much easier to set up a CI solution using SaaS tools like &lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt; and others. These tools allow crafting a flexible CI pipeline without the burden of managing the whole infrastructure. Eventually, it&#39;s a trade-off between robustness and speed - choose your side carefully&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Choosing some niche vendor might get you blocked once you need some advanced customization. On the other hand, going with Jenkins might burn precious time on infrastructure setup&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/citools.md&quot;&gt;&lt;strong&gt;Read More: Choosing CI platform&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 4.13 Test your middlewares in isolation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When a middleware holds some immense logic that spans many requests, it is worth testing it in isolation without waking up the entire web framework. This can be easily achieved by stubbing and spying on the {req, res, next} objects&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A bug in Express middleware === a bug in all or most requests&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/testingandquality/test-middlewares.md&quot;&gt;&lt;strong&gt;Read More: Test middlewares in isolation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#table-of-contents&quot;&gt;â¬ Return to top&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;5. Going To Production Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.1. Monitoring&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Monitoring is a game of finding out issues before customers do â obviously this should be assigned unprecedented importance. The market is overwhelmed with offers thus consider starting with defining the basic metrics you must follow (my suggestions inside), then go over additional fancy features and choose the solution that ticks all boxes. Click âThe Gistâ below for an overview of the solutions&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failure === disappointed customers. Simple&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/monitoring.md&quot;&gt;&lt;strong&gt;Read More: Monitoring!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.2. Increase transparency using smart logging&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Logs can be a dumb warehouse of debug statements or the enabler of a beautiful dashboard that tells the story of your app. Plan your logging platform from day 1: how logs are collected, stored and analyzed to ensure that the desired information (e.g. error rate, following an entire transaction through services and servers, etc) can really be extracted&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You end up with a black box that is hard to reason about, then you start re-writing all logging statements to add additional information&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/smartlogging.md&quot;&gt;&lt;strong&gt;Read More: Increase transparency using smart logging&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.3. Delegate anything possible (e.g. gzip, SSL) to a reverse proxy&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node is awfully bad at doing CPU intensive tasks like gzipping, SSL termination, etc. You should use ârealâ middleware services like nginx, HAproxy or cloud vendor services instead&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your poor single thread will stay busy doing infrastructural tasks instead of dealing with your application core and performance will degrade accordingly&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/delegatetoproxy.md&quot;&gt;&lt;strong&gt;Read More: Delegate anything possible (e.g. gzip, SSL) to a reverse proxy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.4. Lock dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your code must be identical across all environments, but amazingly npm lets dependencies drift across environments by default â when you install packages at various environments it tries to fetch packagesâ latest patch version. Overcome this by using npm config files, .npmrc, that tell each environment to save the exact (not the latest) version of each package. Alternatively, for finer grained control use &lt;code&gt;npm shrinkwrap&lt;/code&gt;. *Update: as of NPM5, dependencies are locked by default. The new package manager in town, Yarn, also got us covered by default&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/lockdependencies.md&quot;&gt;&lt;strong&gt;Read More: Lock dependencies&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.5. Guard process uptime using the right tool&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The process must go on and get restarted upon failures. For simple scenarios, process management tools like PM2 might be enough but in today&#39;s âdockerizedâ world, cluster management tools should be considered as well&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Running dozens of instances without a clear strategy and too many tools together (cluster management, docker, PM2) might lead to DevOps chaos&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/guardprocess.md&quot;&gt;&lt;strong&gt;Read More: Guard process uptime using the right tool&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.6. Utilize all CPU cores&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; At its basic form, a Node app runs on a single CPU core while all others are left idling. Itâs your duty to replicate the Node process and utilize all CPUs â For small-medium apps you may use Node Cluster or PM2. For a larger app consider replicating the process using some Docker cluster (e.g. K8S, ECS) or deployment scripts that are based on Linux init system (e.g. systemd)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your app will likely utilize only 25% of its available resources(!) or even less. Note that a typical server has 4 CPU cores or more, naive deployment of Node.js utilizes only 1 (even using PaaS services like AWS beanstalk!)&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/utilizecpu.md&quot;&gt;&lt;strong&gt;Read More: Utilize all CPU cores&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.7. Create a âmaintenance endpointâ&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Expose a set of system-related information, like memory usage and REPL, etc in a secured API. Although itâs highly recommended to rely on standard and battle-tested tools, some valuable information and operations are easier done using code&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Youâll find that youâre performing many âdiagnostic deploysâ â shipping code to production only to extract some information for diagnostic purposes&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/createmaintenanceendpoint.md&quot;&gt;&lt;strong&gt;Read More: Create a âmaintenance endpointâ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.8. Discover errors and downtime using APM products&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Application monitoring and performance products (a.k.a. APM) proactively gauge codebase and API so they can auto-magically go beyond traditional monitoring and measure the overall user-experience across services and tiers. For example, some APM products can highlight a transaction that loads too slow on the end-user&#39;s side while suggesting the root cause&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You might spend great effort on measuring API performance and downtimes, probably youâll never be aware which is your slowest code parts under real-world scenario and how these affect the UX&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/apmproducts.md&quot;&gt;&lt;strong&gt;Read More: Discover errors and downtime using APM products&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.9. Make your code production-ready&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Code with the end in mind, plan for production from day 1. This sounds a bit vague so Iâve compiled a few development tips that are closely related to production maintenance (click Gist below)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A world champion IT/DevOps guy wonât save a system that is badly written&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/productioncode.md&quot;&gt;&lt;strong&gt;Read More: Make your code production-ready&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.10. Measure and guard the memory usage&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Node.js has controversial relationships with memory: the v8 engine has soft limits on memory usage (1.4GB) and there are known paths to leak memory in Nodeâs code â thus watching Nodeâs process memory is a must. In small apps, you may gauge memory periodically using shell commands but in medium-large apps consider baking your memory watch into a robust monitoring system&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your process memory might leak a hundred megabytes a day like how it happened at &lt;a href=&quot;https://www.joyent.com/blog/walmart-node-js-memory-leak&quot;&gt;Walmart&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/measurememory.md&quot;&gt;&lt;strong&gt;Read More: Measure and guard the memory usage&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.11. Get your frontend assets out of Node&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Serve frontend content using dedicated middleware (nginx, S3, CDN) because Node performance really gets hurt when dealing with many static files due to its single-threaded model&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your single Node thread will be busy streaming hundreds of html/images/angular/react files instead of allocating all its resources for the task it was born for â serving dynamic content&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/frontendout.md&quot;&gt;&lt;strong&gt;Read More: Get your frontend assets out of Node&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.12. Be stateless, kill your servers almost every day&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Store any type of data (e.g. user sessions, cache, uploaded files) within external data stores. Consider âkillingâ your servers periodically or use âserverlessâ platform (e.g. AWS Lambda) that explicitly enforces a stateless behavior&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Failure at a given server will result in application downtime instead of just killing a faulty machine. Moreover, scaling-out elasticity will get more challenging due to the reliance on a specific server&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/bestateless.md&quot;&gt;&lt;strong&gt;Read More: Be stateless, kill your Servers almost every day&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.13. Use tools that automatically detect vulnerabilities&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Even the most reputable dependencies such as Express have known vulnerabilities (from time to time) that can put a system at risk. This can be easily tamed using community and commercial tools that constantly check for vulnerabilities and warn (locally or at GitHub), some can even patch them immediately&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Keeping your code clean from vulnerabilities without dedicated tools will require you to constantly follow online publications about new threats. Quite tedious&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/detectvulnerabilities.md&quot;&gt;&lt;strong&gt;Read More: Use tools that automatically detect vulnerabilities&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.14. Assign a transaction id to each log statement&lt;/h2&gt; 
&lt;p&gt;Also known as correlation id / transit id / tracing id / request id / request context / etc.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Assign the same identifier, transaction-id: {some value}, to each log entry within a single request. Then when inspecting errors in logs, easily conclude what happened before and after. Until version 14 of Node, this was not easy to achieve due to Node&#39;s async nature, but since AsyncLocalStorage came to town, this became possible and easy than ever. see code examples inside&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Looking at a production error log without the context â what happened before â makes it much harder and slower to reason about the issue&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/assigntransactionid.md&quot;&gt;&lt;strong&gt;Read More: Assign âTransactionIdâ to each log statement&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.15. Set &lt;code&gt;NODE_ENV=production&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Set the environment variable &lt;code&gt;NODE_ENV&lt;/code&gt; to âproductionâ or âdevelopmentâ to flag whether production optimizations should get activated â many npm packages determine the current environment and optimize their code for production&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Omitting this simple property might greatly degrade performance. For example, when using Express for server-side rendering omitting &lt;code&gt;NODE_ENV&lt;/code&gt; makes it slower by a factor of three!&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/setnodeenv.md&quot;&gt;&lt;strong&gt;Read More: Set NODE_ENV=production&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.16. Design automated, atomic and zero-downtime deployments&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Research shows that teams who perform many deployments lower the probability of severe production issues. Fast and automated deployments that donât require risky manual steps and service downtime significantly improve the deployment process. You should probably achieve this using Docker combined with CI tools as they became the industry standard for streamlined deployment&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Long deployments -&amp;gt; production downtime &amp;amp; human-related error -&amp;gt; team unconfident in making deployment -&amp;gt; fewer deployments and features&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.17. Use an LTS release of Node.js&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Ensure you are using an LTS version of Node.js to receive critical bug fixes, security updates and performance improvements&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Newly discovered bugs or vulnerabilities could be used to exploit an application running in production, and your application may become unsupported by various modules and harder to maintain&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/LTSrelease.md&quot;&gt;&lt;strong&gt;Read More: Use an LTS release of Node.js&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.18. Don&#39;t route logs within the app&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Log destinations should not be hard-coded by developers within the application code, but instead should be defined by the execution environment the application runs in. Developers should write logs to &lt;code&gt;stdout&lt;/code&gt; using a logger utility and then let the execution environment (container, server, etc.) pipe the &lt;code&gt;stdout&lt;/code&gt; stream to the appropriate destination (i.e. Splunk, Graylog, ElasticSearch, etc.).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Application handling log routing === hard to scale, loss of logs, poor separation of concerns&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/logrouting.md&quot;&gt;&lt;strong&gt;Read More: Log Routing&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 5.19. Install your packages with &lt;code&gt;npm ci&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; You have to be sure that production code uses the exact version of the packages you have tested it with. Run &lt;code&gt;npm ci&lt;/code&gt; to strictly do a clean install of your dependencies matching package.json and package-lock.json. Using this command is recommended in automated environments such as continuous integration pipelines.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/production/installpackageswithnpmci.md&quot;&gt;&lt;strong&gt;Read More: Use npm ci&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#table-of-contents&quot;&gt;â¬ Return to top&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;6. Security Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;img src=&quot;https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg?sanitize=true&quot; alt=&quot;54 items&quot;&gt; 
&lt;/div&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.1. Embrace linter security rules&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Make use of security-related linter plugins such as &lt;a href=&quot;https://github.com/nodesecurity/eslint-plugin-security&quot;&gt;eslint-plugin-security&lt;/a&gt; to catch security vulnerabilities and issues as early as possible, preferably while they&#39;re being coded. This can help catching security weaknesses like using eval, invoking a child process or importing a module with a string literal (e.g. user input). Click &#39;Read more&#39; below to see code examples that will get caught by a security linter&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; What could have been a straightforward security weakness during development becomes a major issue in production. Also, the project may not follow consistent code security practices, leading to vulnerabilities being introduced, or sensitive secrets committed into remote repositories&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/lintrules.md&quot;&gt;&lt;strong&gt;Read More: Lint rules&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.2. Limit concurrent requests using a middleware&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Denial_of_Service&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; DOS attacks are very popular and relatively easy to conduct. Implement rate limiting using an external service such as cloud load balancers, cloud firewalls, nginx, &lt;a href=&quot;https://www.npmjs.com/package/rate-limiter-flexible&quot;&gt;rate-limiter-flexible&lt;/a&gt; package, or (for smaller and less critical apps) a rate-limiting middleware (e.g. &lt;a href=&quot;https://www.npmjs.com/package/express-rate-limit&quot;&gt;express-rate-limit&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An application could be subject to an attack resulting in a denial of service where real users receive a degraded or unavailable service.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/limitrequests.md&quot;&gt;&lt;strong&gt;Read More: Implement rate limiting&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.3 Extract secrets from config files or use packages to encrypt them&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Never store plain-text secrets in configuration files or source code. Instead, make use of secret-management systems like Vault products, Kubernetes/Docker Secrets, or using environment variables. As a last resort, secrets stored in source control must be encrypted and managed (rolling keys, expiring, auditing, etc). Make use of pre-commit/push hooks to prevent committing secrets accidentally&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Source control, even for private repositories, can mistakenly be made public, at which point all secrets are exposed. Access to source control for an external party will inadvertently provide access to related systems (databases, apis, services, etc).&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/secretmanagement.md&quot;&gt;&lt;strong&gt;Read More: Secret management&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.4. Prevent query injection vulnerabilities with ORM/ODM libraries&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; To prevent SQL/NoSQL injection and other malicious attacks, always make use of an ORM/ODM or a database library that escapes data or supports named or indexed parameterized queries, and takes care of validating user input for expected types. Never just use JavaScript template strings or string concatenation to inject values into queries as this opens your application to a wide spectrum of vulnerabilities. All the reputable Node.js data access libraries (e.g. &lt;a href=&quot;https://github.com/sequelize/sequelize&quot;&gt;Sequelize&lt;/a&gt;, &lt;a href=&quot;https://github.com/tgriesser/knex&quot;&gt;Knex&lt;/a&gt;, &lt;a href=&quot;https://github.com/Automattic/mongoose&quot;&gt;mongoose&lt;/a&gt;) have built-in protection against injection attacks.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Unvalidated or unsanitized user input could lead to operator injection when working with MongoDB for NoSQL, and not using a proper sanitization system or ORM will easily allow SQL injection attacks, creating a giant vulnerability.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/ormodmusage.md&quot;&gt;&lt;strong&gt;Read More: Query injection prevention using ORM/ODM libraries&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.5. Collection of generic security best practices&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; This is a collection of security advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/commonsecuritybestpractices.md&quot;&gt;&lt;strong&gt;Read More: Common security best practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.6. Adjust the HTTP response headers for enhanced security&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Your application should be using secure headers to prevent attackers from using common attacks like cross-site scripting (XSS), clickjacking and other malicious attacks. These can be configured easily using modules like &lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Attackers could perform direct attacks on your application&#39;s users, leading to huge security vulnerabilities&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/secureheaders.md&quot;&gt;&lt;strong&gt;Read More: Using secure headers in your application&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.7. Constantly and automatically inspect for vulnerable dependencies&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; With the npm ecosystem it is common to have many dependencies for a project. Dependencies should always be kept in check as new vulnerabilities are found. Use tools like &lt;a href=&quot;https://docs.npmjs.com/cli/audit&quot;&gt;npm audit&lt;/a&gt; or &lt;a href=&quot;https://snyk.io/&quot;&gt;snyk&lt;/a&gt; to track, monitor and patch vulnerable dependencies. Integrate these tools with your CI setup so you catch a vulnerable dependency before it makes it to production.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker could detect your web framework and attack all its known vulnerabilities.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/dependencysecurity.md&quot;&gt;&lt;strong&gt;Read More: Dependency security&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.8. Protect Users&#39; Passwords/Secrets using bcrypt or scrypt&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Passwords or secrets (e.g. API keys) should be stored using a secure hash + salt function like &lt;code&gt;bcrypt&lt;/code&gt;,&lt;code&gt;scrypt&lt;/code&gt;, or worst case &lt;code&gt;pbkdf2&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Passwords and secrets that are stored without using a secure function are vulnerable to brute forcing and dictionary attacks that will lead to their disclosure eventually.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/userpasswords.md&quot;&gt;&lt;strong&gt;Read More: User Passwords&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.9. Escape HTML, JS and CSS output&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Untrusted data that is sent down to the browser might get executed instead of just being displayed, this is commonly referred as a cross-site-scripting (XSS) attack. Mitigate this by using dedicated libraries that explicitly mark the data as pure content that should never get executed (i.e. encoding, escaping)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker might store malicious JavaScript code in your DB which will then be sent as-is to the poor clients&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/escape-output.md&quot;&gt;&lt;strong&gt;Read More: Escape output&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.10. Validate incoming JSON schemas&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Validate the incoming requests&#39; body payload and ensure it meets expectations, fail fast if it doesn&#39;t. To avoid tedious validation coding within each route you may use lightweight JSON-based validation schemas such as &lt;a href=&quot;https://www.npmjs.com/package/jsonschema&quot;&gt;jsonschema&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/joi&quot;&gt;joi&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your generosity and permissive approach greatly increases the attack surface and encourages the attacker to try out many inputs until they find some combination to crash the application&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/validation.md&quot;&gt;&lt;strong&gt;Read More: Validate incoming JSON schemas&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.11. Support blocklisting JWTs&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When using JSON Web Tokens (for example, with &lt;a href=&quot;https://github.com/jaredhanson/passport&quot;&gt;Passport.js&lt;/a&gt;), by default there&#39;s no mechanism to revoke access from issued tokens. Once you discover some malicious user activity, there&#39;s no way to stop them from accessing the system as long as they hold a valid token. Mitigate this by implementing a blocklist of untrusted tokens that are validated on each request.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Expired, or misplaced tokens could be used maliciously by a third party to access an application and impersonate the owner of the token.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/expirejwt.md&quot;&gt;&lt;strong&gt;Read More: Blocklist JSON Web Tokens&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.12. Prevent brute-force attacks against authorization&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; A simple and powerful technique is to limit authorization attempts using two metrics:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;The first is number of consecutive failed attempts by the same user unique ID/name and IP address.&lt;/li&gt; 
 &lt;li&gt;The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker can issue unlimited automated password attempts to gain access to privileged accounts on an application&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/login-rate-limit.md&quot;&gt;&lt;strong&gt;Read More: Login rate limiting&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.13. Run Node.js as non-root user&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; There is a common scenario where Node.js runs as a root user with unlimited permissions. For example, this is the default behaviour in Docker containers. It&#39;s recommended to create a non-root user and either bake it into the Docker image (examples given below) or run the process on this user&#39;s behalf by invoking the container with the flag &quot;-u username&quot;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; An attacker who manages to run a script on the server gets unlimited power over the local machine (e.g. change iptable and re-route traffic to their server)&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/non-root-user.md&quot;&gt;&lt;strong&gt;Read More: Run Node.js as non-root user&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.14. Limit payload size using a reverse-proxy or a middleware&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The bigger the body payload is, the harder your single thread works in processing it. This is an opportunity for attackers to bring servers to their knees without tremendous amount of requests (DOS/DDOS attacks). Mitigate this limiting the body size of incoming requests on the edge (e.g. firewall, ELB) or by configuring &lt;a href=&quot;https://github.com/expressjs/body-parser&quot;&gt;express body parser&lt;/a&gt; to accept only small-size payloads&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your application will have to deal with large requests, unable to process the other important work it has to accomplish, leading to performance implications and vulnerability towards DOS attacks&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/requestpayloadsizelimit.md&quot;&gt;&lt;strong&gt;Read More: Limit payload size&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.15. Avoid JavaScript eval statements&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; &lt;code&gt;eval&lt;/code&gt; is evil as it allows executing custom JavaScript code during run time. This is not just a performance concern but also an important security concern due to malicious JavaScript code that may be sourced from user input. Another language feature that should be avoided is &lt;code&gt;new Function&lt;/code&gt; constructor. &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; should never be passed dynamic JavaScript code either.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Malicious JavaScript code finds a way into text passed into &lt;code&gt;eval&lt;/code&gt; or other real-time evaluating JavaScript language functions, and will gain complete access to JavaScript permissions on the page. This vulnerability is often manifested as an XSS attack.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/avoideval.md&quot;&gt;&lt;strong&gt;Read More: Avoid JavaScript eval statements&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.16. Prevent evil RegEx from overloading your single thread execution&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Denial_of_Service&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Regular Expressions, while being handy, pose a real threat to JavaScript applications at large, and the Node.js platform in particular. A user input for text to match might require an outstanding amount of CPU cycles to process. RegEx processing might be inefficient to an extent that a single request that validates 10 words can block the entire event loop for 6 seconds and set the CPU on ð¥. For that reason, prefer third-party validation packages like &lt;a href=&quot;https://github.com/chriso/validator.js&quot;&gt;validator.js&lt;/a&gt; instead of writing your own Regex patterns, or make use of &lt;a href=&quot;https://github.com/substack/safe-regex&quot;&gt;safe-regex&lt;/a&gt; to detect vulnerable regex patterns&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Poorly written regexes could be susceptible to Regular Expression DoS attacks that will block the event loop completely. For example, the popular &lt;code&gt;moment&lt;/code&gt; package was found vulnerable with malicious RegEx usage in November of 2017&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/regex.md&quot;&gt;&lt;strong&gt;Read More: Prevent malicious RegEx&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.17. Avoid module loading using a variable&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid requiring/importing another file with a path that was given as parameter due to the concern that it could have originated from user input. This rule can be extended for accessing files in general (i.e. &lt;code&gt;fs.readFile()&lt;/code&gt;) or other sensitive resource access with dynamic variables originating from user input. &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-security&quot;&gt;Eslint-plugin-security&lt;/a&gt; linter can catch such patterns and warn early enough&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Malicious user input could find its way to a parameter that is used to require tampered files, for example, a previously uploaded file on the file system, or access already existing system files.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/safemoduleloading.md&quot;&gt;&lt;strong&gt;Read More: Safe module loading&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.18. Run unsafe code in a sandbox&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When tasked to run external code that is given at run-time (e.g. plugin), use any sort of &#39;sandbox&#39; execution environment that isolates and guards the main code against the plugin. This can be achieved using a dedicated process (e.g. &lt;code&gt;cluster.fork()&lt;/code&gt;), serverless environment or dedicated npm packages that act as a sandbox&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A plugin can attack through an endless variety of options like infinite loops, memory overloading, and access to sensitive process environment variables&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/sandbox.md&quot;&gt;&lt;strong&gt;Read More: Run unsafe code in a sandbox&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.19. Take extra care when working with child processes&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid using child processes when possible and validate and sanitize input to mitigate shell injection attacks if you still have to. Prefer using &lt;code&gt;child_process.execFile&lt;/code&gt; which by definition will only execute a single command with a set of attributes and will not allow shell parameter expansion.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Naive use of child processes could result in remote command execution or shell injection attacks due to malicious user input passed to an unsanitized system command.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/childprocesses.md&quot;&gt;&lt;strong&gt;Read More: Be cautious when working with child processes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.20. Hide error details from clients&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; An integrated express error handler hides the error details by default. However, great are the chances that you implement your own error handling logic with custom Error objects (considered by many as a best practice). If you do so, ensure not to return the entire Error object to the client, which might contain some sensitive application details&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Sensitive application details such as server file paths, third party modules in use, and other internal workflows of the application which could be exploited by an attacker, could be leaked from information found in a stack trace&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/hideerrors.md&quot;&gt;&lt;strong&gt;Read More: Hide error details from client&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.21. Configure 2FA for npm or Yarn&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Any step in the development chain should be protected with MFA (multi-factor authentication), npm/Yarn are a sweet opportunity for attackers who can get their hands on some developer&#39;s password. Using developer credentials, attackers can inject malicious code into libraries that are widely installed across projects and services. Maybe even across the web if published in public. Enabling 2-factor-authentication in npm leaves almost zero chances for attackers to alter your package code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; &lt;a href=&quot;https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8&quot;&gt;Have you heard about the eslint developer whose password was hijacked?&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.22. Modify session middleware settings&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Each web framework and technology has its known weaknessesâ-âtelling an attacker which web framework we use is a great help for them. Using the default settings for session middlewares can expose your app to module- and framework-specific hijacking attacks in a similar way to the &lt;code&gt;X-Powered-By&lt;/code&gt; header. Try hiding anything that identifies and reveals your tech stack (E.g. Node.js, express)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Cookies could be sent over insecure connections, and an attacker might use session identification to identify the underlying framework of the web application, as well as module-specific vulnerabilities&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/sessions.md&quot;&gt;&lt;strong&gt;Read More: Cookie and session security&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.23. Avoid DOS attacks by explicitly setting when a process should crash&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Denial_of_Service&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; The Node process will crash when errors are not handled. Many best practices even recommend to exit even though an error was caught and got handled. Express, for example, will crash on any asynchronous errorâ-âunless you wrap routes with a catch clause. This opens a very sweet attack spot for attackers who recognize what input makes the process crash and repeatedly send the same request. There&#39;s no instant remedy for this but a few techniques can mitigate the pain: Alert with critical severity anytime a process crashes due to an unhandled error, validate the input and avoid crashing the process due to invalid user input, wrap all routes with a catch and consider not to crash when an error originated within a request (as opposed to what happens globally)&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; This is just an educated guess: given many Node.js applications, if we try passing an empty JSON body to all POST requestsâ-âa handful of applications will crash. At that point, we can just repeat sending the same request to take down the applications with ease&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.24. Prevent unsafe redirects&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A1-Injection&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Redirects that do not validate user input can enable attackers to launch phishing scams, steal user credentials, and perform other malicious actions.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; If an attacker discovers that you are not validating external, user-supplied input, they may exploit this vulnerability by posting specially-crafted links on forums, social media, and other public places to get users to click it.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/saferedirects.md&quot;&gt;&lt;strong&gt;Read More: Prevent unsafe redirects&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 6.25. Avoid publishing secrets to the npm registry&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg?sanitize=true&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Precautions should be taken to avoid the risk of accidentally publishing secrets to public npm registries. An &lt;code&gt;.npmignore&lt;/code&gt; file can be used to ignore specific files or folders, or the &lt;code&gt;files&lt;/code&gt; array in &lt;code&gt;package.json&lt;/code&gt; can act as an allow list.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your project&#39;s API keys, passwords or other secrets are open to be abused by anyone who comes across them, which may result in financial loss, impersonation, and other risks.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/security/avoid_publishing_secrets.md&quot;&gt;&lt;strong&gt;Read More: Avoid publishing secrets&lt;/strong&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#table-of-contents&quot;&gt;â¬ Return to top&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;7. Draft: Performance Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;h2&gt;Our contributors are working on this section. &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/256&quot;&gt;Would you like to join?&lt;/a&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 7.1. Don&#39;t block the event loop&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid CPU intensive tasks as they will block the mostly single-threaded Event Loop and offload those to a dedicated thread, process or even a different technology based on the context.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; As the Event Loop is blocked, Node.js will be unable to handle other request thus causing delays for concurrent users. &lt;strong&gt;3000 users are waiting for a response, the content is ready to be served, but one single request blocks the server from dispatching the results back&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/performance/block-loop.md&quot;&gt;&lt;strong&gt;Read More: Do not block the event loop&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 7.2. Prefer native JS methods over user-land utils like Lodash&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; It&#39;s often more penalising to use utility libraries like &lt;code&gt;lodash&lt;/code&gt; and &lt;code&gt;underscore&lt;/code&gt; over native methods as it leads to unneeded dependencies and slower performance. Bear in mind that with the introduction of the new V8 engine alongside the new ES standards, native methods were improved in such a way that it&#39;s now about 50% more performant than utility libraries.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; You&#39;ll have to maintain less performant projects where you could have simply used what was &lt;strong&gt;already&lt;/strong&gt; available or dealt with a few more lines in exchange of a few more files.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/performance/nativeoverutil.md&quot;&gt;&lt;strong&gt;Read More: Native over user land utils&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#table-of-contents&quot;&gt;â¬ Return to top&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;&lt;code&gt;8. Docker Best Practices&lt;/code&gt;&lt;/h1&gt; 
&lt;p&gt;ð Many thanks to &lt;a href=&quot;https://github.com/BretFisher&quot;&gt;Bret Fisher&lt;/a&gt; from whom we learned many of the following practices&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.1 Use multi-stage builds for leaner and more secure Docker images&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Use multi-stage build to copy only necessary production artifacts. A lot of build-time dependencies and files are not needed for running your application. With multi-stage builds these resources can be used during build while the runtime environment contains only what&#39;s necessary. Multi-stage builds are an easy way to get rid of overweight and security threats.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Larger images will take longer to build and ship, build-only tools might contain vulnerabilities and secrets only meant for the build phase might be leaked.&lt;/p&gt; 
&lt;h3&gt;Example Dockerfile for multi-stage builds&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;FROM node:14.4.0 AS build

COPY . .
RUN npm ci &amp;amp;&amp;amp; npm run build


FROM node:slim-14.4.0

USER node
EXPOSE 8080

COPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./
RUN npm ci --production

CMD [ &quot;node&quot;, &quot;dist/app.js&quot; ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/multi_stage_builds.md&quot;&gt;&lt;strong&gt;Read More: Use multi-stage builds&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.2. Bootstrap using &lt;code&gt;node&lt;/code&gt; command, avoid &lt;code&gt;npm start&lt;/code&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; use &lt;code&gt;CMD [&#39;node&#39;,&#39;server.js&#39;]&lt;/code&gt; to start your app, avoid using npm scripts which don&#39;t pass OS signals to the code. This prevents problems with child-processes, signal handling, graceful shutdown and having zombie processes.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; When no signals are passed, your code will never be notified about shutdowns. Without this, it will lose its chance to close properly possibly losing current requests and/or data.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/bootstrap-using-node.md&quot;&gt;&lt;strong&gt;Read More: Bootstrap container using node command, avoid npm start&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.3. Let the Docker runtime handle replication and uptime&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; When using a Docker run time orchestrator (e.g., Kubernetes), invoke the Node.js process directly without intermediate process managers or custom code that replicate the process (e.g. PM2, Cluster module). The runtime platform has the highest amount of data and visibility for making placement decision - It knows best how many processes are needed, how to spread them and what to do in case of crashes&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Container keeps crashing due to lack of resources will get restarted indefinitely by the process manager. Should Kubernetes be aware of that, it could relocate it to a different roomy instance&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/restart-and-replicate-processes.md&quot;&gt;&lt;strong&gt;Read More: Let the Docker orchestrator restart and replicate processes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.4. Use .dockerignore to prevent leaking secrets&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Include a &lt;code&gt;.dockerignore&lt;/code&gt; file that filters out common secret files and development artifacts. By doing so, you might prevent secrets from leaking into the image. As a bonus the build time will significantly decrease. Also, ensure not to copy all files recursively rather explicitly choose what should be copied to Docker&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise&lt;/strong&gt;: Common personal secret files like &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;.aws&lt;/code&gt; and &lt;code&gt;.npmrc&lt;/code&gt; will be shared with anybody with access to the image (e.g. Docker repository)&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/docker-ignore.md&quot;&gt;&lt;strong&gt;Read More: Use .dockerignore&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.5. Clean-up dependencies before production&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Although Dev-Dependencies are sometimes needed during the build and test life-cycle, eventually the image that is shipped to production should be minimal and clean from development dependencies. Doing so guarantees that only necessary code is shipped and the amount of potential attacks (i.e. attack surface) is minimized. When using multi-stage build (see dedicated bullet) this can be achieved by installing all dependencies first and finally running &lt;code&gt;npm ci --production&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Many of the infamous npm security breaches were found within development packages (e.g. &lt;a href=&quot;https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes&quot;&gt;eslint-scope&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;ð Read More: &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/install-for-production.md&quot;&gt;Remove development dependencies&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.6. Shutdown smartly and gracefully&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Handle the process SIGTERM event and clean-up all existing connection and resources. This should be done while responding to ongoing requests. In Dockerized runtimes shutting down containers is not a rare event, rather a frequent occurrence that happen as part of routine work. Achieving this demands some thoughtful code to orchestrate several moving parts: The load balancer, keep-alive connections, the HTTP server and other resources&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Dying immediately means not responding to thousands of disappointed users&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/graceful-shutdown.md&quot;&gt;&lt;strong&gt;Read More: Graceful shutdown&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.7. Set memory limits using both Docker and v8&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Always configure a memory limit using both Docker and the JavaScript runtime flags. The Docker limit is needed to make thoughtful container placement decision, the --v8&#39;s flag max-old-space is needed to kick off the GC on time and prevent under utilization of memory. Practically, set the v8&#39;s old space memory to be a just bit less than the container limit&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The docker definition is needed to perform thoughtful scaling decision and prevent starving other citizens. Without also defining the v8&#39;s limits, it will under utilize the container resources - Without explicit instructions it crashes when utilizing ~50-60% of its host resources&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/memory-limit.md&quot;&gt;&lt;strong&gt;Read More: Set memory limits using Docker only&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.8. Plan for efficient caching&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Rebuilding a whole docker image from cache can be nearly instantaneous if done correctly. The less updated instructions should be at the top of your Dockerfile and the ones constantly changing (like app code) should be at the bottom.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Docker build will be very long and consume lot of resources even when making tiny changes&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/use-cache-for-shorter-build-time.md&quot;&gt;&lt;strong&gt;Read More: Leverage caching to reduce build times&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.9. Use explicit image reference, avoid &lt;code&gt;latest&lt;/code&gt; tag&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Specify an explicit image digest or versioned label, never refer to &lt;code&gt;latest&lt;/code&gt;. Developers are often led to believe that specifying the &lt;code&gt;latest&lt;/code&gt; tag will provide them with the most recent image in the repository however this is not the case. Using a digest guarantees that every instance of the service is running exactly the same code.&lt;/p&gt; 
&lt;p&gt;In addition, referring to an image tag means that the base image is subject to change, as image tags cannot be relied upon for a deterministic install. Instead, if a deterministic install is expected, a SHA256 digest can be used to reference an exact image.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; A new version of a base image could be deployed into production with breaking changes, causing unintended application behaviour.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/image-tags.md&quot;&gt;&lt;strong&gt;Read More: Understand image tags and use the &quot;latest&quot; tag with caution&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.10. Prefer smaller Docker base images&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Large images lead to higher exposure to vulnerabilities and increased resource consumption. Using leaner Docker images, such as Slim and Alpine Linux variants, mitigates this issue.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Building, pushing, and pulling images will take longer, unknown attack vectors can be used by malicious actors and more resources are consumed.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/smaller_base_images.md&quot;&gt;&lt;strong&gt;Read More: Prefer smaller images&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.11. Clean-out build-time secrets, avoid secrets in args&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Avoid secrets leaking from the Docker build environment. A Docker image is typically shared in multiple environment like CI and a registry that are not as sanitized as production. A typical example is an npm token which is usually passed to a dockerfile as argument. This token stays within the image long after it is needed and allows the attacker indefinite access to a private npm registry. This can be avoided by coping a secret file like &lt;code&gt;.npmrc&lt;/code&gt; and then removing it using multi-stage build (beware, build history should be deleted as well) or by using Docker build-kit secret feature which leaves zero traces&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Everyone with access to the CI and docker registry will also get access to some precious organization secrets as a bonus&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/avoid-build-time-secrets.md&quot;&gt;&lt;strong&gt;Read More: Clean-out build-time secrets&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.12. Scan images for multi layers of vulnerabilities&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Besides checking code dependencies vulnerabilities also scan the final image that is shipped to production. Docker image scanners check the code dependencies but also the OS binaries. This E2E security scan covers more ground and verifies that no bad guy injected bad things during the build. Consequently, it is recommended running this as the last step before deployment. There are a handful of free and commercial scanners that also provide CI/CD plugins&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Your code might be entirely free from vulnerabilities. However it might still get hacked due to vulnerable version of OS-level binaries (e.g. OpenSSL, TarBall) that are commonly being used by applications&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/scan-images.md&quot;&gt;&lt;strong&gt;Read More: Scan the entire image before production&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.13 Clean NODE_MODULE cache&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; After installing dependencies in a container remove the local cache. It doesn&#39;t make any sense to duplicate the dependencies for faster future installs since there won&#39;t be any further installs - A Docker image is immutable. Using a single line of code tens of MB (typically 10-50% of the image size) are shaved off&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; The image that will get shipped to production will weigh 30% more due to files that will never get used&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/clean-cache.md&quot;&gt;&lt;strong&gt;Read More: Clean NODE_MODULE cache&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.14. Generic Docker practices&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; This is a collection of Docker advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/generic-tips.md&quot;&gt;&lt;strong&gt;Read More: Generic Docker practices&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/checkbox-small-blue.png&quot; alt=&quot;â&quot;&gt; 8.15. Lint your Dockerfile&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Linting your Dockerfile is an important step to identify issues in your Dockerfile which differ from best practices. By checking for potential flaws using a specialised Docker linter, performance and security improvements can be easily identified, saving countless hours of wasted time or security issues in production code.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Otherwise:&lt;/strong&gt; Mistakenly the Dockerfile creator left Root as the production user, and also used an image from unknown source repository. This could be avoided with with just a simple linter.&lt;/p&gt; 
&lt;p&gt;ð &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/sections/docker/lint-dockerfile.md&quot;&gt;&lt;strong&gt;Read More: Lint your Dockerfile&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;p align=&quot;right&quot;&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#table-of-contents&quot;&gt;â¬ Return to top&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Milestones&lt;/h1&gt; 
&lt;p&gt;To maintain this guide and keep it up to date, we are constantly updating and improving the guidelines and best practices with the help of the community. You can follow our &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/milestones&quot;&gt;milestones&lt;/a&gt; and join the working groups if you want to contribute to this project&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Translations&lt;/h2&gt; 
&lt;p&gt;All translations are contributed by the community. We will be happy to get any help with either completed, ongoing or new translations!&lt;/p&gt; 
&lt;h3&gt;Completed translations&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/BR.png&quot; alt=&quot;BR&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.brazilian-portuguese.md&quot;&gt;Brazilian Portuguese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/marcelosdm&quot;&gt;Marcelo Melo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/CN.png&quot; alt=&quot;CN&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.chinese.md&quot;&gt;Chinese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mattjin&quot;&gt;Matt Jin&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/RU.png&quot; alt=&quot;RU&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.russian.md&quot;&gt;Russian&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/contributorpw&quot;&gt;Alex Ivanov&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/PL.png&quot; alt=&quot;PL&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.polish.md&quot;&gt;Polish&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/mbiesiad&quot;&gt;Michal Biesiada&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/JA.png&quot; alt=&quot;JA&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.japanese.md&quot;&gt;Japanese&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/YukiOta&quot;&gt;Yuki Ota&lt;/a&gt;, &lt;a href=&quot;https://github.com/YA21&quot;&gt;Yuta Azumi&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/EU.png&quot; alt=&quot;EU&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.basque.md&quot;&gt;Basque&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/anediaz&quot;&gt;Ane Diaz de Tuesta&lt;/a&gt; &amp;amp; Joxefe Diaz de Tuesta&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Translations in progress&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/FR.png&quot; alt=&quot;FR&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.french.md&quot;&gt;French&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/129&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/HE.png&quot; alt=&quot;HE&quot;&gt; Hebrew (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/156&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/KR.png&quot; alt=&quot;KR&quot;&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/README.korean.md&quot;&gt;Korean&lt;/a&gt; - Courtesy of &lt;a href=&quot;https://github.com/uronly14me&quot;&gt;Sangbeom Han&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/94&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/ES.png&quot; alt=&quot;ES&quot;&gt; &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/raw/spanish-translation/README.spanish.md&quot;&gt;Spanish&lt;/a&gt; (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/95&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/flags/TR.png&quot; alt=&quot;TR&quot;&gt; Turkish (&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/issues/139&quot;&gt;Discussion&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; 
&lt;h2&gt;Steering Committee&lt;/h2&gt; 
&lt;p&gt;Meet the steering committee members - the people who work together to provide guidance and future direction to the project. In addition, each member of the committee leads a project tracked under our &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/projects&quot;&gt;GitHub projects&lt;/a&gt;.&lt;/p&gt; 
&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/yoni.png&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/goldbergyoni&quot;&gt;Yoni Goldberg&lt;/a&gt; &lt;a href=&quot;https://twitter.com/goldbergyoni&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/twitter-s.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://goldbergyoni.com&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/www.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Independent Node.js consultant who works with customers in the USA, Europe, and Israel on building large-scale Node.js applications. Many of the best practices above were first published at &lt;a href=&quot;https://goldbergyoni.com&quot;&gt;goldbergyoni.com&lt;/a&gt;. Reach Yoni at &lt;a href=&quot;https://github.com/goldbergyoni&quot;&gt;@goldbergyoni&lt;/a&gt; or &lt;a href=&quot;mailto:me@goldbergyoni.com&quot;&gt;me@goldbergyoni.com&lt;/a&gt;&lt;/p&gt; 
&lt;br&gt; 
&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/bruno.png&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/BrunoScheufler&quot;&gt;Bruno Scheufler&lt;/a&gt; &lt;a href=&quot;https://brunoscheufler.com/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/www.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;ð» full-stack web engineer, Node.js &amp;amp; GraphQL enthusiast&lt;/p&gt; 
&lt;br&gt; 
&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/kyle.png&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/js-kyle&quot;&gt;Kyle Martin&lt;/a&gt; &lt;a href=&quot;https://twitter.com/kylemartin_93&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/twitter-s.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/in/kylemartinnz&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/linkedin.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Full Stack Developer &amp;amp; Site Reliability Engineer based in New Zealand, interested in web application security, and architecting and building Node.js applications to perform at global scale.&lt;/p&gt; 
&lt;br&gt; 
&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/kevyn.png&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/kevynb&quot;&gt;Kevyn Bruyere&lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/in/kevynbruyere/&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/linkedin.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Independent full-stack developer with a taste for Ops and automation.&lt;/p&gt; 
&lt;br&gt; 
&lt;h3&gt;Steering Committee Emeriti&lt;/h3&gt; 
&lt;img align=&quot;left&quot; width=&quot;100&quot; height=&quot;100&quot; src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/sagir.png&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/sagirk&quot;&gt;Sagir Khan&lt;/a&gt; &lt;a href=&quot;https://twitter.com/sagir_k&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/twitter-s.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://linkedin.com/in/sagirk&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/linkedin.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sagirk.com&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/www.png&quot; width=&quot;16&quot; height=&quot;16&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Deep specialist in JavaScript and its ecosystem â React, Node.js, TypeScript, GraphQL, MongoDB, pretty much anything that involves JS/JSON in any layer of the system â building products using the web platform for the worldâs most recognized brands. Individual Member of the Node.js Foundation.&lt;/p&gt; 
&lt;br&gt; 
&lt;h2&gt;Collaborators&lt;/h2&gt; 
&lt;p&gt;Thank you to all our collaborators! ð&lt;/p&gt; 
&lt;p&gt;Our collaborators are members who are contributing to the repository on a regular basis, through suggesting new best practices, triaging issues, reviewing pull requests and more. If you are interested in helping us guide thousands of people to craft better Node.js applications, please read our &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/CONTRIBUTING.md&quot;&gt;contributor guidelines&lt;/a&gt; ð&lt;/p&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/idori&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/ido.png&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/TheHollidayInn&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/keith.png&quot; width=&quot;75&quot; height=&quot;75&quot;&gt;&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/rluvaton&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/raz-luvaton.jpg&quot; width=&quot;75&quot; height=&quot;75&quot; alt=&quot;Raz Luvaton&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt;&lt;/th&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/josh-hemphill&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/jhemphill.jpg&quot; width=&quot;75&quot; height=&quot;75&quot; alt=&quot;Josh Hemphill&quot; loading=&quot;lazy&quot;&gt;&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/idori&quot;&gt;Ido Richter (Founder)&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/TheHollidayInn&quot;&gt;Keith Holliday&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/rluvaton&quot;&gt;Raz Luvaton&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/josh-hemphill&quot;&gt;Josh Hemphill&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h3&gt;Collaborator Emeriti&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/refack&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/assets/images/members/refael.png&quot; width=&quot;50&quot; height=&quot;50&quot;&gt;&lt;/a&gt;&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/refack&quot;&gt;Refael Ackermann&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;br&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If you&#39;ve ever wanted to contribute to open source, now is your chance! See the &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/.operations/CONTRIBUTING.md&quot;&gt;contributing docs&lt;/a&gt; for more information.&lt;/p&gt; 
&lt;h2&gt;Contributors â¨&lt;/h2&gt; 
&lt;p&gt;Thanks goes to these wonderful people who have contributed to this repository!&lt;/p&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; 
&lt;!-- prettier-ignore-start --&gt; 
&lt;!-- markdownlint-disable --&gt; 
&lt;table&gt; 
 &lt;tbody&gt;
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/kevinrambaud&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/7501477?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kevin Rambaud&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kevinrambaud&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/mfine15&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1286554?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Michael Fine&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-mfine15&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://squgeim.github.io&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/4996818?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shreya Dahal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-squgeim&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://matheusrocha89.com&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/3718366?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Matheus Cruz Rocha&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-matheusrocha89&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://bityog.github.io/Portfolio/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/28219178?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yog Mehta&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-BitYog&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://kudapara.co.zw&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/13519184?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kudakwashe Paradzayi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kudapara&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.t1st3.com/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1469638?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;t1st3&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-t1st3&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/mulijordan1976&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/33382022?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;mulijordan1976&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-mulijordan1976&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/matchai&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/4658208?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Matan Kushner&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-matchai&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://fabiothiroki.github.io&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/670057?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Fabio Hiroki&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-fabiothiroki&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://james.sumners.info/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/321201?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;James Sumners&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-jsumners&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/_DanGamble&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/7152041?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dan Gamble&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-dan-gamble&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/trainorpj&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/13276704?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;PJ Trainor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-trainorpj&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/reod&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/3164299?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Remek Ambroziak&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-reod&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://ca.non.co.il&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1829789?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yoni Jah&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-yonjah&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/hazolsky&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1270790?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Misha Khokhlov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-hazolsky&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://plus.google.com/+ÐÐ²Ð³ÐµÐ½Ð¸Ð¹ÐÑÐµÑÐ¾Ð²/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/8045060?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Evgeny Orekhov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-EvgenyOrekhov&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/gediminasml&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/19854105?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;-&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-gediminasml&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://hisaac.net&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/923876?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Isaac Halvorson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-hisaac&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.vedrankaracic.com&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/2808092?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Vedran KaraÄiÄ&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-vkaracic&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/lallenlowe&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/10761165?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;lallenlowe&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-lallenlowe&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/nwwells&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/1039473?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nathan Wells&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-nwwells&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/paulovitin&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/125503?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Paulo Reis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-paulovitin&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://snap.simpego.ch&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/1989646?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;syzer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-syzer&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://sancho.dev&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/3763599?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;David Sancho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-davesnx&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://apiforge.it&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/4929965?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Robert Manolea&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-pupix&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://jumptoglide.com&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/708395?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Xavier Ho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-spaxe&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.ocular-rhythm.io&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2738518?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aaron&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ocularrhythm&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://septa97.me&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/13742634?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jan Charles Maghirang Adona&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-septa97&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.cakeresume.com/allenfang&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/5351390?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Allen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-AllenFang&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/leonardovillela&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/8650543?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Leonardo Villela&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-leonardovillela&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://michalzalecki.com&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/3136577?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;MichaÅ ZaÅÄcki&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-MichalZalecki&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.wealthbar.com&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/156449?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Chris Nicola&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-chrisnicola&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/aecorredor&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/9114987?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alejandro Corredor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-aecorredor&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/cwar&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/272843?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;cwar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-cwar&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/keyfoxth&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/10647132?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yuwei&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-keyfoxth&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://bigcodenerd.org&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/10895594?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Utkarsh Bhatt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-utkarshbhatt12&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/duartemendes&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/12852058?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Duarte Mendes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-duartemendes&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://jasonkim.ca&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/103456?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jason Kim&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-serv&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Max101&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/2124249?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mitja O.&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Max101&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://sandromiguel.com&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/6423157?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sandro Miguel Marques&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-SandroMiguel&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/GabeKuslansky&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/9855482?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Gabe&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-GabeKuslansky&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://ripper234.com/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/172282?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ron Gross&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ripper234&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.thecodebarbarian.com&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/1620265?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Valeri Karpov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-vkarpov15&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://sergiobernal.com&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/20087388?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sergio Bernal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-imsergiobernal&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ntelkedzhiev&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/7332371?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nikola Telkedzhiev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ntelkedzhiev&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/vitordagamagodoy&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/26370059?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Vitor Godoy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-vitordagamagodoy&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.manishsaraan.com/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/19797340?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Manish Saraan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-manishsaraan&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/uronly14me&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/5186814?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sangbeom Han&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-uronly14me&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://blackmatch.github.io&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/12443954?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;blackmatch&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-blackmatch&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://simmsreeve.com&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/5173131?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Joe Reeve&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ISNIT0&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/BusbyActual&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/14985016?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ryan Busby&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-BusbyActual&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://jsdecorator.com&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/4482199?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Iman Mohamadi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ImanMh&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/HeeL&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/287769?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sergii Paryzhskyi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-HeeL&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/kapilepatel&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/25738473?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kapil Patel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kapilepatel&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/justjavac&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/359395?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;è¿·æ¸¡&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-justjavac&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/hozefaj&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/2084833?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Hozefa&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-hozefaj&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/el-ethan&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/10249884?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ethan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-el-ethan&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/milkdeliver&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/3108407?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sam&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-milkdeliver&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ArlindXh&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/19508764?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Arlind&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ArlindXh&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ttous&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/19815440?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Teddy Toussaint&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ttous&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://ardern.io&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/2419690?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lewis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-LewisArdern&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://gabriellidenor.com/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/765963?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Gabriel Lidenor &lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-GabrielLidenor&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/animir&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/4623196?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Roman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-animir&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Francozeira&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/47419763?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Francozeira&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Francozeira&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/invvard&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/7305493?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Invvard&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Invvard&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://romulogarofalo.github.io/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/18492592?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;RÃ´mulo Garofalo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-romulogarofalo&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://thoqbk.github.io/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1491103?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tho Q Luong&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-thoqbk&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Qeneke&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/20271568?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Burak Shen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Qeneke&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.happy-css.com&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2950505?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Martin Muzatko&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-MartinMuzatko&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/autoboxer&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/2757601?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jared Collier&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-autoboxer&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://hiltonmeyer.com&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/4545860?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Hilton Meyer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-bikingbadger&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://kr.vuejs.org&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1451365?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ChangJoo Park(ë°ì°½ì£¼)&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ChangJoo-Park&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/MasahiroSakaguchi&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/16427431?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Masahiro Sakaguchi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-MasahiroSakaguchi&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/TheHollidayInn&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/1253400?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Keith Holliday&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-TheHollidayInn&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.coreycleary.me&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/1485356?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;coreyc&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-coreyc&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://maxcubing.wordpress.com&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/8260834?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Maximilian Berkmann&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Berkmann18&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/DouglasMV&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/32845487?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Douglas Mariano Valero&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-DouglasMV&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/marcelosdm&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/18266600?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Marcelo Melo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-marcelosdm&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/mperk_&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/3465794?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mehmet Perk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-mperk&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ryanouyang&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/360426?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ryan ouyang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ryanouyang&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/shabeer-mdy&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/26842535?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shabeer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-shabeer-mdy&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/halfzebra&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/3983879?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Eduard Kyvenko&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-halfzebra&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://deyvisonrocha.com&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/686067?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Deyvison Rocha&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-deyvisonrocha&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://twitter.com/georgemamer&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/20108934?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;George Mamer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-georgem3&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/leimonio&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1969742?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Konstantinos Leimonis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-leimonio&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Zybax&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/22094453?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Oliver Lluberes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-Zybax&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/story/tiendq&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/815910?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tien Do&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-tiendq&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://singh1114.github.io/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/11356398?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ranvir Singh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-singh1114&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/collierrgbsitisfise&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/13496126?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Vadim Nicolaev&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-collierrgbsitisfise&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-collierrgbsitisfise&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/germangamboa95&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/28633849?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;German Gamboa Gonzalez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-germangamboa95&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/AbdelrahmanHafez&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/19984935?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Hafez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-AbdelrahmanHafez&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://linkedin.com/in/chandiran-dmc&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/42678579?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Chandiran&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-chandiran-dmc&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/VinayaSathyanarayana&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/16976677?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;VinayaSathyanarayana&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-VinayaSathyanarayana&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.kimkern.de&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/2671139?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kim Kern&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kiwikern&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://kennethfreitas.github.io/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/55669043?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kenneth Freitas&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kennethfreitas&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/songe&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/1531561?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;songe&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-songe&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://ksed.dev&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/30693707?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kirill Shekhovtsov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Ksedline&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/SerzN1&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2534649?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Serge&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-SerzN1&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/keyrwinz&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/21241761?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;keyrwinz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-keyrwinz&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/nDmitry&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2134568?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dmitry Nikitenko&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-nDmitry&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://bushuai.cc&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1875256?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;bushuai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Abushuai&quot; title=&quot;Reviewed Pull Requests&quot;&gt;ð&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-bushuai&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://stackoverflow.com/users/1348195/benjamin-gruenbaum&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/1315533?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Benjamin Gruenbaum&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-benjamingr&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/byeze&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/7424138?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ezequiel&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-byeze&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/juaoose&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/994594?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Juan JosÃ© RodrÃ­guez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-juaoose&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/OrBin&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/6897234?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Or Bin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-OrBin&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/andreoav07&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/508827?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Andreo Vieira&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-andreoav&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/mikicho&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/11459632?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Michael Solomon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-mikicho&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jimmycallin&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/2225828?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jimmy Callin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-jimmycallin&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/siddharthofficial/&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/26025955?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Siddharth&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-w01fS&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://ryansmith.tech/&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/1578766?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ryan Smith&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ryan3E0&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://de.linkedin.com/in/tom-boettger&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/49961674?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tom Boettger&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-bttger&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jormaechea&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/5612500?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JoaquÃ­n Ormaechea&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-jormaechea&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/dfrzuz&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/71859096?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;dfrzuz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-dfrzuz&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/victor-homyakov&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/121449?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Victor Homyakov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-victor-homyakov&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://joshuahemphill.com&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/46608115?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Josh&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-josh-hemphill&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#security-josh-hemphill&quot; title=&quot;Security&quot;&gt;ð¡ï¸&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/alec-francis&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/32949882?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alec Francis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-alec-francis&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/arjun6610&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/61268891?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;arjun6610&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-arjun6610&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/jan-osch&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/11651780?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jan Osch&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-jan-osch&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/thiagotrs&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/32005779?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Thiago Rotondo Sampaio&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-thiagotrs&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Alexsey&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/6392013?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alexsey&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Alexsey&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/13luismb&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/32210483?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Luis A. Acurero&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-13luismb&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://lromano97.github.io/&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/22394847?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lucas Romano&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-lromano97&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/denisecase&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/13016516?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Denise Case&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-denisecase&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/story/elektronik&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/1078554?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nick Ribal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-elektronik2k5&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt; &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Aelektronik2k5&quot; title=&quot;Reviewed Pull Requests&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/0xflotus&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/26602940?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;0xflotus&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-0xflotus&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.dijonkitchen.org/&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/11434205?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jonathan Chen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-dijonkitchen&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/dilansri&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/5089728?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dilan Srilal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-dilansri&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://vectree.ru&quot;&gt;&lt;img src=&quot;https://avatars3.githubusercontent.com/u/4215285?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;vladthelittleone&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-vladthelittleone&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.nikolaso.com&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/60047271?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nik Osvalds&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-nosvalds&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/kdaniel21&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/39854385?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Daniel Kiss&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/commits?author=kdaniel21&quot; title=&quot;Documentation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://twitter.com/forresst17&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/163352?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Forresst&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-forresst&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/svenheden&quot;&gt;&lt;img src=&quot;https://avatars1.githubusercontent.com/u/76098?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jonathan Svenheden&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-svenheden&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/AustrisC&quot;&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/12381652?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;AustrisC&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-AustrisC&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/cisco0808&quot;&gt;&lt;img src=&quot;https://avatars0.githubusercontent.com/u/60251188?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;kyeongtae kim&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-cisco0808&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://keybase.io/651z9pz968v2accj&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/65741741?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;007&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-6gx7iycn53ioq2e8apk1j1ypwov4giui&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.anediaz.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17216937?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ane Diaz de Tuesta&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-anediaz&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-anediaz&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://yukioh.net&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/23182489?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;YukiOta&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-YukiOta&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.yeovilhospital.co.uk/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43814140?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Frazer Smith&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Fdawgs&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/rluvaton&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16746759?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Raz Luvaton&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-rluvaton&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/YA21&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/37298463?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yuta Azumi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-YA21&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/andrewjbarbour&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/77080074?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;andrewjbarbour&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-andrewjbarbour&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://MasujimaRyohei.jp&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17163541?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;mr&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-MasujimaRyohei&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/kubanac95&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16191931?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aleksandar&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kubanac95&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://vincentjonathan.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/32597776?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Owl&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-SuspiciousLookingOwl&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/yedidyas&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/36074789?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yedidya Schwartz&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-yedidyas&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#example-yedidyas&quot; title=&quot;Examples&quot;&gt;ð¡&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/ariel-diaz&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/20423540?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ari&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ariel-diaz&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.koenigthomas.de/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7080389?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Thomas KÃ¶nig&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Vispercept&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/coocos&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1397804?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kalle LÃ¤msÃ¤&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-coocos&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://math.cat&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10328430?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Wyatt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-ZhyMC&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://libkhadir.fr&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/45130488?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;KHADIR Tayeb&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-tkhadir&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/shankarregmi&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7703345?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shankar Regmi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-shankarregmi&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/codebyshubham&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/10389723?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shubham&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-codebyshubham&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://lucalves.me/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17712401?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lucas Alves&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-lucalves&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/benjaminudoh10&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/9018331?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Benjamin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-benjaminudoh10&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.yjoer.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/47742486?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yeoh Joer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-yjoer&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://blog.miigon.net&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/16161991?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Miigon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Miigon&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://brainstorage.me/Egregor2011&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3630318?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rostislav Bogorad&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Egregor2011&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/Flouse&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/1297478?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Flouse&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-Flouse&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://taranttini.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/6922125?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tarantini Pereira&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-taranttini&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/kzmat&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/34614358?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kazuki Matsuo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kzmat&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/burkybang&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/927886?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Adam Smith&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-burkybang&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://codekodo.tistory.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/33795856?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dohyeon Ko&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-k906506&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/vlad99902&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/67615003?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Vladislav Legkov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-vlad99902&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://kerolloz.github.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/36763164?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kerollos Magdy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kerolloz&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/erez-lieberman-b90b7219/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/3277260?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Erez Lieberman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-erezLieberman&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/48841329?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Breno Macedo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-breno404&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/JFernando122&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/40414805?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Fernando Flores&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-JFernando122&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/rafaelconcept/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/43880669?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rafael Brito&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-rafaelconcept&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://emiliano-peralta-portfolio.vercel.app/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/63617637?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Emiliano Peralta&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#translation-emiperalta&quot; title=&quot;Translation&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://lannex.github.io&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/7369541?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shin, SJ&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-lannex&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;http://www.benjaminforster.com&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/12589522?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Benjamin Forster&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-e-e-e&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/DanieleFedeli&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/37077048?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Daniele Fedeli&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-DanieleFedeli&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/djob195&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/17146669?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;djob195&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-djob195&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/antspk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/78955792?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;antspk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-antspk&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://jjy0821.tistory.com/&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/88075341?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ì ì§ì&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-jjy821&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/kkk-cashwalk&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/91455122?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;kkk-cashwalk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-kkk-cashwalk&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
   &lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/apainintheneck&quot;&gt;&lt;img src=&quot;https://avatars.githubusercontent.com/u/42982186?v=4?s=100&quot; width=&quot;100px;&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;apainintheneck&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://raw.githubusercontent.com/goldbergyoni/nodebestpractices/master/#content-apainintheneck&quot; title=&quot;Content&quot;&gt;ð&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt;
&lt;/table&gt; 
&lt;!-- markdownlint-restore --&gt; 
&lt;!-- prettier-ignore-end --&gt; 
&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt;</description>
    </item>
    
    <item>
      <title>sudheerj/reactjs-interview-questions</title>
      <link>https://github.com/sudheerj/reactjs-interview-questions</link>
      <description>&lt;p&gt;List of top 500 ReactJS Interview Questions &amp; Answers....Coding exercise questions are coming soon!!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Interview Questions &amp;amp; Answers&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Click &lt;span&gt;â­&lt;/span&gt;if you like the project. Pull Request are highly appreciated. Follow me &lt;a href=&quot;https://twitter.com/SudheerJonna&quot;&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;hr&gt; 
&lt;div align=&quot;center&quot;&gt; 
 &lt;a href=&quot;https://www.fullstack.cafe/?utm_source=github&amp;amp;utm_medium=sud&quot;&gt; 3600 Tech Interview Questions. &lt;b&gt;Answered&lt;/b&gt;. 
  &lt;div&gt; 
   &lt;img src=&quot;https://user-images.githubusercontent.com/13550565/76382460-cc784d80-6393-11ea-8837-2b89265ac853.png&quot; width=&quot;150&quot; alt=&quot;FullStack.Cafe&quot;&gt; 
  &lt;/div&gt; &lt;/a&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;div&gt;
  Learn to code and get hired with 
 &lt;a href=&quot;https://zerotomastery.io/?utm_source=github&amp;amp;utm_medium=sponsor&amp;amp;utm_campaign=reactjs-interview-questions&quot;&gt;Zero To Mastery:&lt;/a&gt; 
 &lt;ol&gt; 
  &lt;li&gt;This &lt;a href=&quot;https://links.zerotomastery.io/react_sudheer&quot;&gt;React course&lt;/a&gt; is good if youâre struggling to learn React beyond the basics&lt;/li&gt; 
  &lt;li&gt;This &lt;a href=&quot;http://links.zerotomastery.io/mci_sudheer&quot;&gt;coding interview bootcamp&lt;/a&gt; is helpful if youâre serious about getting hired as a developer&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt; 
&lt;hr&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repository is specific to ReactJS. Please check &lt;a href=&quot;https://github.com/sudheerj/javascript-interview-questions&quot;&gt;Javascript Interview questions&lt;/a&gt; for core javascript questions.&lt;/p&gt; 
&lt;h2&gt;Downloading PDF/Epub formats&lt;/h2&gt; 
&lt;p&gt;You can download the PDF and Epub version of this repository from the latest run on the &lt;a href=&quot;https://github.com/sudheerj/reactjs-interview-questions/actions&quot;&gt;actions tab&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Table of Contents&lt;/h3&gt; 
&lt;table&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;th&gt;No.&lt;/th&gt; 
   &lt;th&gt;Questions&lt;/th&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Core React&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;1&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react&quot;&gt;What is React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;2&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-major-features-of-react&quot;&gt;What are the major features of React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;3&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jsx&quot;&gt;What is JSX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;4&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-element-and-component&quot;&gt;What is the difference between Element and Component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;5&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-components-in-react&quot;&gt;How to create components in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;6&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-to-use-a-class-component-over-a-function-component&quot;&gt;When to use a Class Component over a Function Component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;7&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-pure-components&quot;&gt;What are Pure Components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;8&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-in-react&quot;&gt;What is state in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;9&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-props-in-react&quot;&gt;What are props in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;10&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-state-and-props&quot;&gt;What is the difference between state and props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;11&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-we-not-update-the-state-directly&quot;&gt;Why should we not update the state directly?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;12&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-callback-function-as-an-argument-of-setstate&quot;&gt;What is the purpose of callback function as an argument of setState()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;13&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-html-and-react-event-handling&quot;&gt;What is the difference between HTML and React event handling?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;14&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-bind-methods-or-event-handlers-in-jsx-callbacks&quot;&gt;How to bind methods or event handlers in JSX callbacks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;15&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-a-parameter-to-an-event-handler-or-callback&quot;&gt;How to pass a parameter to an event handler or callback?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;16&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-synthetic-events-in-react&quot;&gt;What are synthetic events in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;17&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-inline-conditional-expressions&quot;&gt;What are inline conditional expressions?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;18&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-key-prop-and-what-is-the-benefit-of-using-it-in-arrays-of-elements&quot;&gt;What is &quot;key&quot; prop and what is the benefit of using it in arrays of elements?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;19&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-refs&quot;&gt;What is the use of refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;20&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-refs&quot;&gt;How to create refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;21&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-forward-refs&quot;&gt;What are forward refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;22&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#which-is-preferred-option-with-in-callback-refs-and-finddomnode&quot;&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;23&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-string-refs-legacy&quot;&gt;Why are String Refs legacy?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;24&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-virtual-dom&quot;&gt;What is Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;25&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-virtual-dom-works&quot;&gt;How Virtual DOM works?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;26&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-shadow-dom-and-virtual-dom&quot;&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;27&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-fiber&quot;&gt;What is React Fiber?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;28&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-goal-of-react-fiber&quot;&gt;What is the main goal of React Fiber?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;29&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-controlled-components&quot;&gt;What are controlled components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;30&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-uncontrolled-components&quot;&gt;What are uncontrolled components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;31&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-createelement-and-cloneelement&quot;&gt;What is the difference between createElement and cloneElement?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;32&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-lifting-state-up-in-react&quot;&gt;What is Lifting State Up in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;33&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-phases-of-component-lifecycle&quot;&gt;What are the different phases of component lifecycle?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;34&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-of-react&quot;&gt;What are the lifecycle methods of React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;35&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-higher-order-components&quot;&gt;What are Higher-Order components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;36&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-props-proxy-for-hoc-component&quot;&gt;How to create props proxy for HOC component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;37&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-context&quot;&gt;What is context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;38&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-children-prop&quot;&gt;What is children prop?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;39&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-write-comments-in-react&quot;&gt;How to write comments in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;40&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-using-super-constructor-with-props-argument&quot;&gt;What is the purpose of using super constructor with props argument?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;41&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reconciliation&quot;&gt;What is reconciliation?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;42&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-state-with-a-dynamic-key-name&quot;&gt;How to set state with a dynamic key name?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;43&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-would-be-the-common-mistake-of-function-being-called-every-time-the-component-renders&quot;&gt;What would be the common mistake of function being called every time the component renders?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;44&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-lazy-function-supports-named-exports&quot;&gt;Is lazy function supports named exports?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;45&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-uses-classname-over-class-attribute&quot;&gt;Why React uses className over class attribute?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;46&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-fragments&quot;&gt;What are fragments?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;47&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-fragments-are-better-than-container-divs&quot;&gt;Why fragments are better than container divs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;48&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-portals-in-react&quot;&gt;What are portals in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;49&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateless-components&quot;&gt;What are stateless components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;50&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateful-components&quot;&gt;What are stateful components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;51&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-apply-validation-on-props-in-react&quot;&gt;How to apply validation on props in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;52&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react&quot;&gt;What are the advantages of React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;53&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-of-react&quot;&gt;What are the limitations of React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;54&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-error-boundaries-in-react-v16&quot;&gt;What are error boundaries in React v16&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;55&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-error-boundaries-handled-in-react-v15&quot;&gt;How error boundaries handled in React v15?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;56&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-recommended-ways-for-static-type-checking&quot;&gt;What are the recommended ways for static type checking?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;57&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-react-dom-package&quot;&gt;What is the use of react-dom package?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;58&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-render-method-of-react-dom&quot;&gt;What is the purpose of render method of react-dom?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;59&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reactdomserver&quot;&gt;What is ReactDOMServer?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;60&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-innerhtml-in-react&quot;&gt;How to use InnerHtml in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;61&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-styles-in-react&quot;&gt;How to use styles in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;62&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-events-are-different-in-react&quot;&gt;How events are different in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;63&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-setstate-in-constructor&quot;&gt;What will happen if you use setState in constructor?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;64&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-impact-of-indexes-as-keys&quot;&gt;What is the impact of indexes as keys?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;65&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-setstate-in-componentwillmount-method&quot;&gt;Is it good to use setState() in componentWillMount() method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;66&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-props-in-initial-state&quot;&gt;What will happen if you use props in initial state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;67&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-conditionally-render-components&quot;&gt;How do you conditionally render components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;68&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-be-careful-when-spreading-props-on-dom-elements&quot;&gt;Why we need to be careful when spreading props on DOM elements??&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;69&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-use-decorators-in-react&quot;&gt;How you use decorators in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;70&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-memoize-a-component&quot;&gt;How do you memoize a component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;71&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-implement-server-side-rendering-or-ssr&quot;&gt;How you implement Server-Side Rendering or SSR?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;72&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-enable-production-mode-in-react&quot;&gt;How to enable production mode in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;73&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-cra-and-its-benefits&quot;&gt;What is CRA and its benefits?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;74&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-lifecycle-methods-order-in-mounting&quot;&gt;What is the lifecycle methods order in mounting?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;75&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-going-to-be-deprecated-in-react-v16&quot;&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;76&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromprops-lifecycle-method&quot;&gt;What is the purpose of getDerivedStateFromProps() lifecycle method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;77&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getsnapshotbeforeupdate-lifecycle-method&quot;&gt;What is the purpose of getSnapshotBeforeUpdate() lifecycle method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;78&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-hooks-replace-render-props-and-higher-order-components&quot;&gt;Do Hooks replace render props and higher order components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;79&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-way-for-naming-components&quot;&gt;What is the recommended way for naming components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;80&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-ordering-of-methods-in-component-class&quot;&gt;What is the recommended ordering of methods in component class?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;81&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-switching-component&quot;&gt;What is a switching component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;82&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-pass-a-function-to-setstate&quot;&gt;Why we need to pass a function to setState()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;83&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-strict-mode-in-react&quot;&gt;What is strict mode in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;84&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-mixins&quot;&gt;What are React Mixins?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;85&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-ismounted-an-anti-pattern-and-what-is-the-proper-solution&quot;&gt;Why is isMounted() an anti-pattern and what is the proper solution?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;86&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-pointer-events-supported-in-react&quot;&gt;What are the Pointer Events supported in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;87&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-component-names-start-with-capital-letter&quot;&gt;Why should component names start with capital letter?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;88&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-custom-dom-attributes-supported-in-react-v16&quot;&gt;Are custom DOM attributes supported in React v16?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;89&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-constructor-and-getinitialstate&quot;&gt;What is the difference between constructor and getInitialState?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;90&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-force-a-component-to-re-render-without-calling-setstate&quot;&gt;Can you force a component to re-render without calling setState?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;91&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-super-and-superprops-in-react-using-es6-classes&quot;&gt;What is the difference between super() and super(props) in React using ES6 classes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;92&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-loop-inside-jsx&quot;&gt;How to loop inside JSX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;93&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-props-in-attribute-quotes&quot;&gt;How do you access props in attribute quotes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;94&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-proptype-array-with-shape&quot;&gt;What is React PropType array with shape?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;95&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-conditionally-apply-class-attributes&quot;&gt;How to conditionally apply class attributes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;96&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-reactdom&quot;&gt;What is the difference between React and ReactDOM?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;97&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-reactdom-is-separated-from-react&quot;&gt;Why ReactDOM is separated from React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;98&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-react-label-element&quot;&gt;How to use React label element?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;99&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-combine-multiple-inline-style-objects&quot;&gt;How to combine multiple inline style objects?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;100&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-re-render-the-view-when-the-browser-is-resized&quot;&gt;How to re-render the view when the browser is resized?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;101&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-setstate-and-replacestate-methods&quot;&gt;What is the difference between setState and replaceState methods?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;102&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-listen-to-state-changes&quot;&gt;How to listen to state changes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;103&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-approach-of-removing-an-array-element-in-react-state&quot;&gt;What is the recommended approach of removing an array element in react state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;104&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-rendering-html&quot;&gt;Is it possible to use React without rendering HTML?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;105&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pretty-print-json-with-react&quot;&gt;How to pretty print JSON with React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;106&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-cant-update-props-in-react&quot;&gt;Why you can&#39;t update props in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;107&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-focus-an-input-element-on-page-load&quot;&gt;How to focus an input element on page load?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;108&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-ways-of-updating-objects-in-state&quot;&gt;What are the possible ways of updating objects in state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;110&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-can-we-find-the-version-of-react-at-runtime-in-the-browser&quot;&gt;How can we find the version of React at runtime in the browser?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;111&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-approaches-to-include-polyfills-in-your-create-react-app&quot;&gt;What are the approaches to include polyfills in your create-react-app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;112&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-https-instead-of-http-in-create-react-app&quot;&gt;How to use https instead of http in create-react-app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;113&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-avoid-using-relative-path-imports-in-create-react-app&quot;&gt;How to avoid using relative path imports in create-react-app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;114&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-google-analytics-for-react-router&quot;&gt;How to add Google Analytics for react-router?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;115&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-update-a-component-every-second&quot;&gt;How to update a component every second?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;116&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-apply-vendor-prefixes-to-inline-styles-in-react&quot;&gt;How do you apply vendor prefixes to inline styles in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;117&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-import-and-export-components-using-react-and-es6&quot;&gt;How to import and export components using react and ES6?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;118&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-exceptions-on-react-component-naming&quot;&gt;What are the exceptions on React component naming?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;119&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-a-component-constructor-called-only-once&quot;&gt;Why is a component constructor called only once?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;120&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-define-constants-in-react&quot;&gt;How to define constants in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;121&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-programmatically-trigger-click-event-in-react&quot;&gt;How to programmatically trigger click event in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;122&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-asyncawait-in-plain-react&quot;&gt;Is it possible to use async/await in plain React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;123&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-common-folder-structures-for-react&quot;&gt;What are the common folder structures for React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;124&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-packages-for-animation&quot;&gt;What are the popular packages for animation?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;125&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-styles-modules&quot;&gt;What is the benefit of styles modules?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;126&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-react-specific-linters&quot;&gt;What are the popular React-specific linters?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;127&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-call-and-in-which-component-lifecycle-methods-should-i-make-an-ajax-call&quot;&gt;How to make AJAX call and In which component lifecycle methods should I make an AJAX call?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;128&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-render-props&quot;&gt;What are render props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Router&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;129&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-router&quot;&gt;What is React Router?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;130&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-router-is-different-from-history-library&quot;&gt;How React Router is different from history library?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;131&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-router-components-of-react-router-v4&quot;&gt;What are the &amp;lt;Router&amp;gt; components of React Router v4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;132&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-push-and-replace-methods-of-history&quot;&gt;What is the purpose of push and replace methods of history?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;133&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-programmatically-navigate-using-react-router-v4&quot;&gt;How do you programmatically navigate using React router v4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;134&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-query-parameters-in-react-router-v4&quot;&gt;How to get query parameters in React Router v4&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;135&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-get-router-may-have-only-one-child-element-warning&quot;&gt;Why you get &quot;Router may have only one child element&quot; warning?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;136&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-params-to-historypush-method-in-react-router-v4&quot;&gt;How to pass params to history.push method in React Router v4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;137&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-implement-default-or-notfound-page&quot;&gt;How to implement default or NotFound page?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;138&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-history-on-react-router-v4&quot;&gt;How to get history on React Router v4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;139&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-perform-automatic-redirect-after-login&quot;&gt;How to perform automatic redirect after login?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Internationalization&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;140&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-intl&quot;&gt;What is React-Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;141&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-react-intl&quot;&gt;What are the main features of React Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;142&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-two-ways-of-formatting-in-react-intl&quot;&gt;What are the two ways of formatting in React Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;143&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-formattedmessage-as-placeholder-using-react-intl&quot;&gt;How to use FormattedMessage as placeholder using React Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;144&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-current-locale-with-react-intl&quot;&gt;How to access current locale with React Intl&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;145&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-format-date-using-react-intl&quot;&gt;How to format date using React Intl?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Testing&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;146&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-shallow-renderer-in-react-testing&quot;&gt;What is Shallow Renderer in React testing?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;147&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-testrenderer-package-in-react&quot;&gt;What is TestRenderer package in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;148&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-reacttestutils-package&quot;&gt;What is the purpose of ReactTestUtils package?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;149&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jest&quot;&gt;What is Jest?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;150&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-jest-over-jasmine&quot;&gt;What are the advantages of Jest over Jasmine?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;151&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-a-simple-example-of-jest-test-case&quot;&gt;Give a simple example of Jest test case&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Redux&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;152&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flux&quot;&gt;What is Flux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;153&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux&quot;&gt;What is Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;154&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-core-principles-of-redux&quot;&gt;What are the core principles of Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;155&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-downsides-of-redux-compared-to-flux&quot;&gt;What are the downsides of Redux compared to Flux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;156&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-mapstatetoprops-and-mapdispatchtoprops&quot;&gt;What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;157&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-dispatch-an-action-in-reducer&quot;&gt;Can I dispatch an action in reducer?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;158&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-redux-store-outside-a-component&quot;&gt;How to access Redux store outside a component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;159&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-drawbacks-of-mvw-pattern&quot;&gt;What are the drawbacks of MVW pattern&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;160&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-there-any-similarities-between-redux-and-rxjs&quot;&gt;Are there any similarities between Redux and RxJS?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;161&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-dispatch-an-action-on-load&quot;&gt;How to dispatch an action on load?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;162&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-connect-from-react-redux&quot;&gt;How to use connect from React Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;163&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-reset-state-in-redux&quot;&gt;How to reset state in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;164&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#whats-the-purpose-of-at-symbol-in-the-redux-connect-decorator&quot;&gt;Whats the purpose of at symbol in the redux connect decorator?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;165&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-context-and-react-redux&quot;&gt;What is the difference between React context and React Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;166&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-redux-state-functions-called-reducers&quot;&gt;Why are Redux state functions called reducers?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;167&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-request-in-redux&quot;&gt;How to make AJAX request in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;168&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-keep-all-components-state-in-redux-store&quot;&gt;Should I keep all component&#39;s state in Redux store?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;169&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-way-to-access-redux-store&quot;&gt;What is the proper way to access Redux store?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;170&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-component-and-container-in-react-redux&quot;&gt;What is the difference between component and container in React Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;171&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-the-constants-in-redux&quot;&gt;What is the purpose of the constants in Redux? &lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;172&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-ways-to-write-mapdispatchtoprops&quot;&gt;What are the different ways to write mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;173&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-the-ownprops-parameter-in-mapstatetoprops-and-mapdispatchtoprops&quot;&gt;What is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;174&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-structure-redux-top-level-directories&quot;&gt;How to structure Redux top level directories?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;175&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-saga&quot;&gt;What is redux-saga?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;176&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-mental-model-of-redux-saga&quot;&gt;What is the mental model of redux-saga?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;177&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-call-and-put-in-redux-saga&quot;&gt;What are the differences between call and put in redux-saga&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;178&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-thunk&quot;&gt;What is Redux Thunk?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;179&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-saga-and-redux-thunk&quot;&gt;What are the differences between redux-saga and redux-thunk&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;180&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-devtools&quot;&gt;What is Redux DevTools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;181&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-redux-devtools&quot;&gt;What are the features of Redux DevTools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;182&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-redux-selectors-and-why-to-use-them&quot;&gt;What are Redux selectors and Why to use them?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;183&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-form&quot;&gt;What is Redux Form?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;184&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-redux-form&quot;&gt;What are the main features of Redux Form?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;185&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-multiple-middlewares-to-redux&quot;&gt;How to add multiple middlewares to Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;186&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-initial-state-in-redux&quot;&gt;How to set initial state in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;187&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-relay-is-different-from-redux&quot;&gt;How Relay is different from Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;188&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-an-action-in-redux&quot;&gt;What is an action in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;188&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-native-and-react&quot;&gt;What is the difference between React Native and React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;189&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-test-react-native-apps&quot;&gt;How to test React Native apps?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;190&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-do-logging-in-react-native&quot;&gt;How to do logging in React Native?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;191&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-your-react-native&quot;&gt;How to debug your React Native?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;React supported libraries and Integration&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;192&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reselect-and-how-it-works&quot;&gt;What is reselect and how it works?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;193&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flow&quot;&gt;What is Flow?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;194&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-flow-and-proptypes&quot;&gt;What is the difference between Flow and PropTypes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;195&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-font-awesome-icons-in-react&quot;&gt;How to use font-awesome icons in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;196&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-dev-tools&quot;&gt;What is React Dev Tools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;197&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-devtools-not-loading-in-chrome-for-local-files&quot;&gt;Why is DevTools not loading in Chrome for local files?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;198&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-polymer-in-react&quot;&gt;How to use Polymer in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;199&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react-over-vuejs&quot;&gt;What are the advantages of React over Vue.js?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;200&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-angular&quot;&gt;What is the difference between React and Angular?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;201&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-tab-is-not-showing-up-in-devtools&quot;&gt;Why React tab is not showing up in DevTools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;202&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-styled-components&quot;&gt;What are styled components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;203&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-styled-components&quot;&gt;Give an example of Styled Components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;204&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-relay&quot;&gt;What is Relay?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;205&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-typescript-in-create-react-app-application&quot;&gt;How to use TypeScript in create-react-app application?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;206&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-reselect-library&quot;&gt;What are the main features of reselect library?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;207&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-reselect-usage&quot;&gt;Give an example of reselect usage?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;209&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-the-statics-object-work-with-es6-classes-in-react&quot;&gt;Does the statics object work with ES6 classes in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;210&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-redux-only-be-used-with-react&quot;&gt;Can Redux only be used with React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;211&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-you-need-to-have-a-particular-build-tool-to-use-redux&quot;&gt;Do you need to have a particular build tool to use Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;212&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-redux-form-initialvalues-get-updated-from-state&quot;&gt;How Redux Form initialValues get updated from state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;213&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-proptypes-allow-different-types-for-one-prop&quot;&gt;How React PropTypes allow different type for one prop?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;214&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-import-an-svg-file-as-react-component&quot;&gt;Can I import an SVG file as react component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;215&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-inline-ref-callbacks-or-functions-not-recommended&quot;&gt;Why are inline ref callbacks or functions not recommended?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;216&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-render-hijacking-in-react&quot;&gt;What is render hijacking in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;217&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hoc-factory-implementations&quot;&gt;What are HOC factory implementations?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;218&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-numbers-to-react-component&quot;&gt;How to pass numbers to React component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;219&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-keep-all-my-state-into-redux-should-i-ever-use-react-internal-state&quot;&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;220&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-registerserviceworker-in-react&quot;&gt;What is the purpose of registerServiceWorker in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;221&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-memo-function&quot;&gt;What is React memo function?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;222&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-lazy-function&quot;&gt;What is React lazy function?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;223&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-unnecessary-updates-using-setstate&quot;&gt;How to prevent unnecessary updates using setState?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;224&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-render-array-strings-and-numbers-in-react-16-version&quot;&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;225&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-class-field-declarations-syntax-in-react-classes&quot;&gt;How to use class field declarations syntax in React classes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;226&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hooks&quot;&gt;What are hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;227&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-needs-to-follow-for-hooks&quot;&gt;What are the rules needs to follow for hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;228&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-ensure-hooks-followed-the-rules-in-your-project&quot;&gt;How to ensure hooks followed the rules in your project?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;229&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-flux-and-redux&quot;&gt;What are the differences between Flux and Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;230&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-react-router-v4&quot;&gt;What are the benefits of React Router V4?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;231&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-describe-about-componentdidcatch-lifecycle-method-signature&quot;&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;232&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#in-which-scenarios-error-boundaries-do-not-catch-errors&quot;&gt;In which scenarios error boundaries do not catch errors?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;233&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-need-error-boundaries-for-event-handlers&quot;&gt;Why do you not need error boundaries for event handlers?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;234&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-try-catch-block-and-error-boundaries&quot;&gt;What is the difference between try catch block and error boundaries?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;235&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-behavior-of-uncaught-errors-in-react-16&quot;&gt;What is the behavior of uncaught errors in react 16?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;236&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-placement-for-error-boundaries&quot;&gt;What is the proper placement for error boundaries?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;237&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-component-stack-trace-from-error-boundary&quot;&gt;What is the benefit of component stack trace from error boundary?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;238&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-required-method-to-be-defined-for-a-class-component&quot;&gt;What is the required method to be defined for a class component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;239&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-return-types-of-render-method&quot;&gt;What are the possible return types of render method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;240&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-purpose-of-constructor&quot;&gt;What is the main purpose of constructor?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;241&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-mandatory-to-define-constructor-for-react-component&quot;&gt;Is it mandatory to define constructor for React component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;242&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-default-props&quot;&gt;What are default props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;243&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-not-call-setstate-in-componentwillunmount&quot;&gt;Why should not call setState in componentWillUnmount?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;244&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromerror&quot;&gt;What is the purpose of getDerivedStateFromError?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;245&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-methods-order-when-component-re-rendered&quot;&gt;What is the methods order when component re-rendered?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;246&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-methods-invoked-during-error-handling&quot;&gt;What are the methods invoked during error handling?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;247&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-displayname-class-property&quot;&gt;What is the purpose of displayName class property?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;248&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-browser-support-for-react-applications&quot;&gt;What is the browser support for react applications?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;249&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-unmountcomponentatnode-method&quot;&gt;What is the purpose of unmountComponentAtNode method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;250&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-code-splitting&quot;&gt;What is code-splitting?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;251&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-strict-mode&quot;&gt;What is the benefit of strict mode?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;252&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-keyed-fragments&quot;&gt;What are Keyed Fragments?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;253&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-react-support-all-html-attributes&quot;&gt;Does React support all HTML attributes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;254&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-with-hocs&quot;&gt;What are the limitations with HOCs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;255&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-forwardrefs-in-devtools&quot;&gt;How to debug forwardRefs in DevTools?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;256&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-component-props-defaults-to-true&quot;&gt;When component props defaults to true?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;257&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-nextjs-and-major-features-of-it&quot;&gt;What is NextJS and major features of it?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;258&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-an-event-handler-to-a-component&quot;&gt;How do you pass an event handler to a component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;259&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-arrow-functions-in-render-methods&quot;&gt;Is it good to use arrow functions in render methods?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;260&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-a-function-from-being-called-multiple-times&quot;&gt;How to prevent a function from being called multiple times?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;261&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-jsx-prevents-injection-attacks&quot;&gt;How JSX prevents Injection Attacks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;262&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-update-rendered-elements&quot;&gt;How do you update rendered elements?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;263&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-props-are-read-only&quot;&gt;How do you say that props are read only?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;264&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-state-updates-are-merged&quot;&gt;How do you say that state updates are merged?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;265&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-arguments-to-an-event-handler&quot;&gt;How do you pass arguments to an event handler?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;266&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-component-from-rendering&quot;&gt;How to prevent component from rendering?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;267&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-conditions-to-safely-use-the-index-as-a-key&quot;&gt;What are the conditions to safely use the index as a key?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;268&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-keys-should-be-globally-unique&quot;&gt;Is it keys should be globally unique?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;269&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-popular-choice-for-form-handling&quot;&gt;What is the popular choice for form handling?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;270&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-formik-over-redux-form-library&quot;&gt;What are the advantages of formik over redux form library?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;271&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-required-to-use-inheritance&quot;&gt;Why do you not required to use inheritance?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;272&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-web-components-in-react-application&quot;&gt;Can I use web components in react application?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;273&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-dynamic-import&quot;&gt;What is dynamic import?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;274&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-loadable-components&quot;&gt;What are loadable components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;275&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-suspense-component&quot;&gt;What is suspense component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;276&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-route-based-code-splitting&quot;&gt;What is route based code splitting?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;277&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-on-how-to-use-context&quot;&gt;Give an example on How to use context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;278&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-default-value-in-context&quot;&gt;What is the purpose of default value in context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;279&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-use-contexttype&quot;&gt;How do you use contextType?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;280&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-consumer&quot;&gt;What is a consumer?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;281&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-solve-performance-corner-cases-while-using-context&quot;&gt;How do you solve performance corner cases while using context?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;282&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-forward-ref-in-hocs&quot;&gt;What is the purpose of forward ref in HOCs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;283&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-ref-argument-available-for-all-functions-or-class-components&quot;&gt;Is it ref argument available for all functions or class components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;284&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-need-additional-care-for-component-libraries-while-using-forward-refs&quot;&gt;Why do you need additional care for component libraries while using forward refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;285&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-react-class-components-without-es6&quot;&gt;How to create react class components without ES6?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;286&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-jsx&quot;&gt;Is it possible to use react without JSX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;287&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-diffing-algorithm&quot;&gt;What is diffing algorithm?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;288&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-covered-by-diffing-algorithm&quot;&gt;What are the rules covered by diffing algorithm?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;289&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-do-you-need-to-use-refs&quot;&gt;When do you need to use refs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;290&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-prop-must-be-named-as-render-for-render-props&quot;&gt;Is it prop must be named as render for render props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;291&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-problems-of-using-render-props-with-pure-components&quot;&gt;What are the problems of using render props with pure components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;292&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-create-hoc-using-render-props&quot;&gt;How do you create HOC using render props?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;293&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-windowing-technique&quot;&gt;What is windowing technique?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;294&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-print-falsy-values-in-jsx&quot;&gt;How do you print falsy values in JSX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;295&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-typical-use-case-of-portals?&quot;&gt;What is the typical use case of portals?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;296&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-set-default-value-for-uncontrolled-component&quot;&gt;How do you set default value for uncontrolled component?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;297&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-your-favorite-react-stack&quot;&gt;What is your favorite React stack?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;298&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-real-dom-and-virtual-dom&quot;&gt;What is the difference between Real DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;299&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-bootstrap-to-a-react-application&quot;&gt;How to add Bootstrap to a react application?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;300&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-list-down-top-websites-or-applications-using-react-as-front-end-framework&quot;&gt;Can you list down top websites or applications using react as front end framework?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;301&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-recommended-to-use-css-in-js-technique-in-react&quot;&gt;Is it recommended to use CSS In JS technique in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;302&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-rewrite-all-my-class-components-with-hooks&quot;&gt;Do I need to rewrite all my class components with hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;303&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-fetch-data-with-react-hooks&quot;&gt;How to fetch data with React Hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;304&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-hooks-cover-all-use-cases-for-classes&quot;&gt;Is Hooks cover all use cases for classes?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;305&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-stable-release-for-hooks-support&quot;&gt;What is the stable release for hooks support?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;306&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-we-use-array-destructuring-square-brackets-notation-in-usestate&quot;&gt;Why do we use array destructuring (square brackets notation) in useState?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;307&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-sources-used-for-introducing-hooks&quot;&gt;What are the sources used for introducing hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;308&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-imperative-api-of-web-components&quot;&gt;How do you access imperative API of web components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;309&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-formik&quot;&gt;What is formik?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;310&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-typical-middleware-choices-for-handling-asynchronous-calls-in-redux&quot;&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;311&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-browsers-understand-jsx-code&quot;&gt;Do browsers understand JSX code?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;312&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#describe-about-data-flow-in-react&quot;&gt;Describe about data flow in react?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;313&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-scripts&quot;&gt;What is react scripts?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;314&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-create-react-app&quot;&gt;What are the features of create react app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;315&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-rendertonodestream-method&quot;&gt;What is the purpose of renderToNodeStream method?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;316&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-mobx&quot;&gt;What is MobX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;317&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-and-mobx&quot;&gt;What are the differences between Redux and MobX?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;318&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-learn-es6-before-learning-reactjs&quot;&gt;Should I learn ES6 before learning ReactJS?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;319&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-concurrent-rendering&quot;&gt;What is Concurrent Rendering?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;320&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-async-mode-and-concurrent-mode&quot;&gt;What is the difference between async mode and concurrent mode?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;321&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-javascript-urls-in-react169&quot;&gt;Can I use javascript urls in react16.9?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;322&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-eslint-plugin-for-hooks&quot;&gt;What is the purpose of eslint plugin for hooks?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;323&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-imperative-and-declarative-in-react&quot;&gt;What is the difference between Imperative and Declarative in React?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;324&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-using-typescript-with-reactjs&quot;&gt;What are the benefits of using typescript with reactjs?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;325&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-make-sure-that-user-remains-authenticated-on-page-refresh-while-using-context-api-state-management&quot;&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;326&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-new-jsx-transform&quot;&gt;What are the benefits of new JSX transform?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;327&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-does-new-jsx-transform-different-from-old-transform&quot;&gt;How does new JSX transform different from old transform?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;328&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-get-redux-scaffolding-using-create-react-app&quot;&gt;How do you get redux scaffolding using create-react-app?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;329&lt;/td&gt; 
   &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-server-components&quot;&gt;What are React Server components?&lt;/a&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;Core React&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;h3&gt;What is React?&lt;/h3&gt; &lt;p&gt;React is an &lt;strong&gt;open-source frontend JavaScript library&lt;/strong&gt; which is used for building user interfaces especially for single page applications. It is used for handling view layer for web and mobile apps. React was created by &lt;a href=&quot;https://github.com/jordwalke&quot;&gt;Jordan Walke&lt;/a&gt;, a software engineer working for Facebook. React was first deployed on Facebook&#39;s News Feed in 2011 and on Instagram in 2012.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the major features of React?&lt;/h3&gt; &lt;p&gt;The major features of React are:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;It uses &lt;strong&gt;VirtualDOM&lt;/strong&gt; instead of RealDOM considering that RealDOM manipulations are expensive.&lt;/li&gt; 
   &lt;li&gt;Supports &lt;strong&gt;server-side rendering&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Follows &lt;strong&gt;Unidirectional&lt;/strong&gt; data flow or data binding.&lt;/li&gt; 
   &lt;li&gt;Uses &lt;strong&gt;reusable/composable&lt;/strong&gt; UI components to develop the view.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is JSX?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;JSX&lt;/em&gt; is a XML-like syntax extension to ECMAScript (the acronym stands for &lt;em&gt;JavaScript XML&lt;/em&gt;). Basically it just provides syntactic sugar for the &lt;code&gt;React.createElement()&lt;/code&gt; function, giving us expressiveness of JavaScript along with HTML like template syntax.&lt;/p&gt; &lt;p&gt;In the example below text inside &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is returned as JavaScript function to the render function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class App extends React.Component {
  render() {
    return(
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{&#39;Welcome to React world!&#39;}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Element and Component?&lt;/h3&gt; &lt;p&gt;An &lt;em&gt;Element&lt;/em&gt; is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. &lt;em&gt;Elements&lt;/em&gt; can contain other &lt;em&gt;Elements&lt;/em&gt; in their props. Creating a React element is cheap. Once an element is created, it is never mutated.&lt;/p&gt; &lt;p&gt;The object representation of React Element would be as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const element = React.createElement(
  &#39;div&#39;,
  {id: &#39;login-btn&#39;},
  &#39;Login&#39;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above &lt;code&gt;React.createElement()&lt;/code&gt; function returns an object:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{
  type: &#39;div&#39;,
  props: {
    children: &#39;Login&#39;,
    id: &#39;login-btn&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And finally it renders to the DOM using &lt;code&gt;ReactDOM.render()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div id=&#39;login-btn&#39;&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas a &lt;strong&gt;component&lt;/strong&gt; can be declared in several different ways. It can be a class with a &lt;code&gt;render()&lt;/code&gt; method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Button = ({ onLogin }) =&amp;gt;
  &amp;lt;div id={&#39;login-btn&#39;} onClick={onLogin}&amp;gt;Login&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then JSX gets transpiled to a &lt;code&gt;React.createElement()&lt;/code&gt; function tree:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Button = ({ onLogin }) =&amp;gt; React.createElement(
  &#39;div&#39;,
  { id: &#39;login-btn&#39;, onClick: onLogin },
  &#39;Login&#39;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How to create components in React?&lt;/h3&gt; &lt;p&gt;There are two possible ways to create a component.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function Components:&lt;/strong&gt; This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function Greeting({ message }) {
  return &amp;lt;h1&amp;gt;{`Hello, ${message}`}&amp;lt;/h1&amp;gt;

}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Class Components:&lt;/strong&gt; You can also use ES6 class to define a component. The above function component can be written as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class Greeting extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;{`Hello, ${this.props.message}`}&amp;lt;/h1&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;When to use a Class Component over a Function Component?&lt;/h3&gt; &lt;p&gt;If the component needs &lt;em&gt;state or lifecycle methods&lt;/em&gt; then use class component otherwise use function component. &lt;em&gt;However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are Pure Components?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/em&gt; is exactly the same as &lt;em&gt;&lt;code&gt;React.Component&lt;/code&gt;&lt;/em&gt; except that it handles the &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; method for you. When props or state changes, &lt;em&gt;PureComponent&lt;/em&gt; will do a shallow comparison on both props and state. &lt;em&gt;Component&lt;/em&gt; on the other hand won&#39;t compare current props and state to next out of the box. Thus, the component will re-render by default whenever &lt;code&gt;shouldComponentUpdate&lt;/code&gt; is called.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is state in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;State&lt;/em&gt; of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.&lt;/p&gt; &lt;p&gt;Let&#39;s create a user component with message state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class User extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      message: &#39;Welcome to React world&#39;
    }
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/state.jpg&quot; alt=&quot;state&quot;&gt;&lt;/p&gt; &lt;p&gt;State is similar to props, but it is private and fully controlled by the component. i.e, It is not accessible to any other component til the owner component decides to pass it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are props in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Props&lt;/em&gt; are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.&lt;/p&gt; &lt;p&gt;The primary purpose of props in React is to provide following component functionality:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Pass custom data to your component.&lt;/li&gt; 
   &lt;li&gt;Trigger state changes.&lt;/li&gt; 
   &lt;li&gt;Use via &lt;code&gt;this.props.reactProp&lt;/code&gt; inside component&#39;s &lt;code&gt;render()&lt;/code&gt; method.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, let us create an element with &lt;code&gt;reactProp&lt;/code&gt; property:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Element reactProp={&#39;1&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This &lt;code&gt;reactProp&lt;/code&gt; (or whatever you came up with) name then becomes a property attached to React&#39;s native props object which originally already exists on all components created using React library.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;props.reactProp
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between state and props?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;props&lt;/em&gt; and &lt;em&gt;state&lt;/em&gt; are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;11&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should we not update the state directly?&lt;/h3&gt; &lt;p&gt;If you try to update the state directly then it won&#39;t re-render the component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Wrong
this.state.message = &#39;Hello world&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead use &lt;code&gt;setState()&lt;/code&gt; method. It schedules an update to a component&#39;s state object. When state changes, the component responds by re-rendering.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Correct
this.setState({ message: &#39;Hello World&#39; })
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can directly assign to the state object either in &lt;em&gt;constructor&lt;/em&gt; or using latest javascript&#39;s class field declaration syntax.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;12&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;The callback function is invoked when setState finished and the component gets rendered. Since &lt;code&gt;setState()&lt;/code&gt; is &lt;strong&gt;asynchronous&lt;/strong&gt; the callback function is used for any post action.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is recommended to use lifecycle method rather than this callback function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;setState({ name: &#39;John&#39; }, () =&amp;gt; console.log(&#39;The name has updated and component re-rendered&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;13&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; &lt;p&gt;Below are some of the main differences between HTML and React event handling,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, the event name usually represents in &lt;em&gt;lowercase&lt;/em&gt; as a convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onclick=&#39;activateLasers()&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React it follows &lt;em&gt;camelCase&lt;/em&gt; convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={activateLasers}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, you can return &lt;code&gt;false&lt;/code&gt; to prevent default behavior:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&#39;#&#39; onclick=&#39;console.log(&quot;The link was clicked.&quot;); return false;&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React you must call &lt;code&gt;preventDefault()&lt;/code&gt; explicitly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function handleClick(event) {
  event.preventDefault()
  console.log(&#39;The link was clicked.&#39;)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;In HTML, you need to invoke the function by appending &lt;code&gt;()&lt;/code&gt; Whereas in react you should not append &lt;code&gt;()&lt;/code&gt; with the function name. (refer &quot;activateLasers&quot; function in the first point for example)&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;14&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to bind methods or event handlers in JSX callbacks?&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to achieve this:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Binding in Constructor:&lt;/strong&gt; In JavaScript classes, the methods are not bound by default. The same thing applies for React event handlers defined as class methods. Normally we bind them in constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Foo extends Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    console.log(&#39;Click happened&#39;);
  }
  render() {
    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
  }
}

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Public class fields syntax:&lt;/strong&gt; If you don&#39;t like to use bind approach then &lt;em&gt;public class fields syntax&lt;/em&gt; can be used to correctly bind callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;handleClick = () =&amp;gt; {
  console.log(&#39;this is:&#39;, this)
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;
  {&#39;Click me&#39;}
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arrow functions in callbacks:&lt;/strong&gt; You can use &lt;em&gt;arrow functions&lt;/em&gt; directly in the callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;handleClick() {
    console.log(&#39;Click happened&#39;);
}
render() {
    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with &lt;code&gt;.bind()&lt;/code&gt; or &lt;em&gt;public class fields syntax&lt;/em&gt; approach considering performance.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;15&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass a parameter to an event handler or callback?&lt;/h3&gt; &lt;p&gt;You can use an &lt;em&gt;arrow function&lt;/em&gt; to wrap around an &lt;em&gt;event handler&lt;/em&gt; and pass parameters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={() =&amp;gt; this.handleClick(id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is an equivalent to calling &lt;code&gt;.bind&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick.bind(this, id)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apart from these two approaches, you can also pass arguments to a function which is defined as arrow function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button onClick={this.handleClick(id)} /&amp;gt;
handleClick = (id) =&amp;gt; () =&amp;gt; {
    console.log(&quot;Hello, your ticket number is&quot;, id)
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;16&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are synthetic events in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SyntheticEvent&lt;/code&gt; is a cross-browser wrapper around the browser&#39;s native event. It&#39;s API is same as the browser&#39;s native event, including &lt;code&gt;stopPropagation()&lt;/code&gt; and &lt;code&gt;preventDefault()&lt;/code&gt;, except the events work identically across all browsers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;17&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are inline conditional expressions?&lt;/h3&gt; &lt;p&gt;You can use either &lt;em&gt;if statements&lt;/em&gt; or &lt;em&gt;ternary expressions&lt;/em&gt; which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
{
    messages.length &amp;gt; 0 &amp;amp;&amp;amp; !isLogin?
      &amp;lt;h2&amp;gt;
          You have {messages.length} unread messages.
      &amp;lt;/h2&amp;gt;
      :
      &amp;lt;h2&amp;gt;
          You don&#39;t have unread messages.
      &amp;lt;/h2&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;18&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is &quot;key&quot; prop and what is the benefit of using it in arrays of elements?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;key&lt;/code&gt; is a special string attribute you &lt;strong&gt;should&lt;/strong&gt; include when creating arrays of elements. &lt;em&gt;Key&lt;/em&gt; prop helps React identify which items have changed, are added, or are removed.&lt;/p&gt; &lt;p&gt;Most often we use ID from our data as &lt;em&gt;key&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const todoItems = todos.map((todo) =&amp;gt;
  &amp;lt;li key={todo.id}&amp;gt;
    {todo.text}
  &amp;lt;/li&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you don&#39;t have stable IDs for rendered items, you may use the item &lt;em&gt;index&lt;/em&gt; as a &lt;em&gt;key&lt;/em&gt; as a last resort:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const todoItems = todos.map((todo, index) =&amp;gt;
  &amp;lt;li key={index}&amp;gt;
    {todo.text}
  &amp;lt;/li&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using &lt;em&gt;indexes&lt;/em&gt; for &lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;not recommended&lt;/strong&gt; if the order of items may change. This can negatively impact performance and may cause issues with component state.&lt;/li&gt; 
   &lt;li&gt;If you extract list item as separate component then apply &lt;em&gt;keys&lt;/em&gt; on list component instead of &lt;code&gt;li&lt;/code&gt; tag.&lt;/li&gt; 
   &lt;li&gt;There will be a warning message in the console if the &lt;code&gt;key&lt;/code&gt; prop is not present on list items.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;19&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of refs?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;ref&lt;/em&gt; is used to return a reference to the element. They &lt;em&gt;should be avoided&lt;/em&gt; in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;20&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create refs?&lt;/h3&gt; &lt;p&gt;There are two approaches&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;This is a recently added approach. &lt;em&gt;Refs&lt;/em&gt; are created using &lt;code&gt;React.createRef()&lt;/code&gt; method and attached to React elements via the &lt;code&gt;ref&lt;/code&gt; attribute. In order to use &lt;em&gt;refs&lt;/em&gt; throughout the component, just assign the &lt;em&gt;ref&lt;/em&gt; to the instance property within constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.myRef = React.createRef()
  }
  render() {
    return &amp;lt;div ref={this.myRef} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use ref callbacks approach regardless of React version. For example, the search bar component&#39;s input element accessed as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class SearchBar extends Component {
   constructor(props) {
      super(props);
      this.txtSearch = null;
      this.state = { term: &#39;&#39; };
      this.setInputSearchRef = e =&amp;gt; {
         this.txtSearch = e;
      }
   }
   onInputChange(event) {
      this.setState({ term: this.txtSearch.value });
   }
   render() {
      return (
         &amp;lt;input
            value={this.state.term}
            onChange={this.onInputChange.bind(this)}
            ref={this.setInputSearchRef} /&amp;gt;
      );
   }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;You can also use &lt;em&gt;refs&lt;/em&gt; in function components using &lt;strong&gt;closures&lt;/strong&gt;. &lt;strong&gt;Note&lt;/strong&gt;: You can also use inline ref callbacks even though it is not a recommended approach&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;21&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are forward refs?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Ref forwarding&lt;/em&gt; is a feature that lets some components take a &lt;em&gt;ref&lt;/em&gt; they receive, and pass it further down to a child.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ButtonElement = React.forwardRef((props, ref) =&amp;gt; (
  &amp;lt;button ref={ref} className=&quot;CustomButton&quot;&amp;gt;
    {props.children}
  &amp;lt;/button&amp;gt;
));

// Create ref to the DOM button:
const ref = React.createRef();
&amp;lt;ButtonElement ref={ref}&amp;gt;{&#39;Forward Ref&#39;}&amp;lt;/ButtonElement&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;22&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/h3&gt; &lt;p&gt;It is preferred to use &lt;em&gt;callback refs&lt;/em&gt; over &lt;code&gt;findDOMNode()&lt;/code&gt; API. Because &lt;code&gt;findDOMNode()&lt;/code&gt; prevents certain improvements in React in the future.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;legacy&lt;/strong&gt; approach of using &lt;code&gt;findDOMNode&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends Component {
  componentDidMount() {
    findDOMNode(this).scrollIntoView()
  }

  render() {
    return &amp;lt;div /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The recommended approach is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends Component {
  constructor(props){
    super(props);
    this.node = createRef();
  }
  componentDidMount() {
    this.node.current.scrollIntoView();
  }

  render() {
    return &amp;lt;div ref={this.node} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;23&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are String Refs legacy?&lt;/h3&gt; &lt;p&gt;If you worked with React before, you might be familiar with an older API where the &lt;code&gt;ref&lt;/code&gt; attribute is a string, like &lt;code&gt;ref={&#39;textInput&#39;}&lt;/code&gt;, and the DOM node is accessed as &lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because &lt;em&gt;string refs have below issues&lt;/em&gt;, and are considered legacy. String refs were &lt;strong&gt;removed in React v16&lt;/strong&gt;.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;They &lt;em&gt;force React to keep track of currently executing component&lt;/em&gt;. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.&lt;/li&gt; 
   &lt;li&gt;They are &lt;em&gt;not composable&lt;/em&gt; â if a library puts a ref on the passed child, the user can&#39;t put another ref on it. Callback refs are perfectly composable.&lt;/li&gt; 
   &lt;li&gt;They &lt;em&gt;don&#39;t work with static analysis&lt;/em&gt; like Flow. Flow can&#39;t guess the magic that framework does to make the string ref appear on &lt;code&gt;this.refs&lt;/code&gt;, as well as its type (which could be different). Callback refs are friendlier to static analysis.&lt;/li&gt; 
   &lt;li&gt;It doesn&#39;t work as most people would expect with the &quot;render callback&quot; pattern (e.g. 
    &lt;datagrid renderRow=&quot;{this.renderRow}&quot; /&gt;) &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends Component {
  renderRow = (index) =&amp;gt; {
    // This won&#39;t work. Ref will get attached to DataTable rather than MyComponent:
    return &amp;lt;input ref={&#39;input-&#39; + index} /&amp;gt;;

    // This would work though! Callback refs are awesome.
    return &amp;lt;input ref={input =&amp;gt; this[&#39;input-&#39; + index] = input} /&amp;gt;;
  }

  render() {
    return &amp;lt;DataTable data={this.props.data} renderRow={this.renderRow} /&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;24&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; (VDOM) is an in-memory representation of &lt;em&gt;Real DOM&lt;/em&gt;. The representation of a UI is kept in memory and synced with the &quot;real&quot; DOM. It&#39;s a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;25&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Virtual DOM works?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; works in three simple steps.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom1.png&quot; alt=&quot;vdom&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Then the difference between the previous DOM representation and the new one is calculated.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom2.png&quot; alt=&quot;vdom2&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Once the calculations are done, the real DOM will be updated with only the things that have actually changed.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom3.png&quot; alt=&quot;vdom3&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;26&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Shadow DOM&lt;/em&gt; is a browser technology designed primarily for scoping variables and CSS in &lt;em&gt;web components&lt;/em&gt;. The &lt;em&gt;Virtual DOM&lt;/em&gt; is a concept implemented by libraries in JavaScript on top of browser APIs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;27&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Fiber?&lt;/h3&gt; &lt;p&gt;Fiber is the new &lt;em&gt;reconciliation&lt;/em&gt; engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;28&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main goal of React Fiber?&lt;/h3&gt; &lt;p&gt;The goal of &lt;em&gt;React Fiber&lt;/em&gt; is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is &lt;strong&gt;incremental rendering&lt;/strong&gt;: the ability to split rendering work into chunks and spread it out over multiple frames.&lt;/p&gt; &lt;p&gt;&lt;em&gt;from documentation&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Its main goals are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Ability to split interruptible work in chunks.&lt;/li&gt; 
   &lt;li&gt;Ability to prioritize, rebase and reuse work in progress.&lt;/li&gt; 
   &lt;li&gt;Ability to yield back and forth between parents and children to support layout in React.&lt;/li&gt; 
   &lt;li&gt;Ability to return multiple elements from render().&lt;/li&gt; 
   &lt;li&gt;Better support for error boundaries.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;29&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are controlled components?&lt;/h3&gt; &lt;p&gt;A component that controls the input elements within the forms on subsequent user input is called &lt;strong&gt;Controlled Component&lt;/strong&gt;, i.e, every state mutation will have an associated handler function.&lt;/p&gt; &lt;p&gt;For example, to write all the names in uppercase letters, we use handleChange as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;handleChange(event) {
  this.setState({value: event.target.value.toUpperCase()})
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;30&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are uncontrolled components?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Uncontrolled Components&lt;/strong&gt; are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.&lt;/p&gt; &lt;p&gt;In the below UserProfile component, the &lt;code&gt;name&lt;/code&gt; input is accessed using ref.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserProfile extends React.Component {
  constructor(props) {
    super(props)
    this.handleSubmit = this.handleSubmit.bind(this)
    this.input = React.createRef()
  }

  handleSubmit(event) {
    alert(&#39;A name was submitted: &#39; + this.input.current.value)
    event.preventDefault()
  }

  render() {
    return (
      &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
        &amp;lt;label&amp;gt;
          {&#39;Name:&#39;}
          &amp;lt;input type=&quot;text&quot; ref={this.input} /&amp;gt;
        &amp;lt;/label&amp;gt;
        &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In most cases, it&#39;s recommend to use controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;31&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between createElement and cloneElement?&lt;/h3&gt; &lt;p&gt;JSX elements will be transpiled to &lt;code&gt;React.createElement()&lt;/code&gt; functions to create React elements which are going to be used for the object representation of UI. Whereas &lt;code&gt;cloneElement&lt;/code&gt; is used to clone an element and pass it new props.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;32&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Lifting State Up in React?&lt;/h3&gt; &lt;p&gt;When several components need to share the same changing data then it is recommended to &lt;em&gt;lift the shared state up&lt;/em&gt; to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;33&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different phases of component lifecycle?&lt;/h3&gt; &lt;p&gt;The component lifecycle has three distinct lifecycle phases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mounting:&lt;/strong&gt; The component is ready to mount in the browser DOM. This phase covers initialization from &lt;code&gt;constructor()&lt;/code&gt;, &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, and &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Updating:&lt;/strong&gt; In this phase, the component gets updated in two ways, sending the new props and updating the state either from &lt;code&gt;setState()&lt;/code&gt; or &lt;code&gt;forceUpdate()&lt;/code&gt;. This phase covers &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; and &lt;code&gt;componentDidUpdate()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unmounting:&lt;/strong&gt; In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes &lt;code&gt;componentWillUnmount()&lt;/code&gt; lifecycle method.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;It&#39;s worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Render&lt;/strong&gt; The component will render without any side-effects. This applies for Pure components and in this phase, React can pause, abort, or restart the render.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pre-commit&lt;/strong&gt; Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Commit&lt;/strong&gt; React works with the DOM and executes the final lifecycles respectively &lt;code&gt;componentDidMount()&lt;/code&gt; for mounting, &lt;code&gt;componentDidUpdate()&lt;/code&gt; for updating, and &lt;code&gt;componentWillUnmount()&lt;/code&gt; for unmounting.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;React 16.3+ Phases (or an &lt;a href=&quot;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot;&gt;interactive version&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases16.4.png&quot; alt=&quot;phases 16.4+&quot;&gt;&lt;/p&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases.png&quot; alt=&quot;phases 16.2&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;34&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the lifecycle methods of React?&lt;/h3&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillMount:&lt;/strong&gt; Executed before rendering and is used for App level configuration in your root component.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillReceiveProps:&lt;/strong&gt; Executed when particular prop updates to trigger state transitions.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn&#39;t need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUpdate:&lt;/strong&gt; Executed before re-rendering the component when there are props &amp;amp; state changes confirmed by &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; which returns true.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUnmount:&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;React 16.3+&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;strong&gt;getDerivedStateFromProps:&lt;/strong&gt; Invoked right before calling &lt;code&gt;render()&lt;/code&gt; and is invoked on &lt;em&gt;every&lt;/em&gt; render. This exists for rare use cases where you need derived state. Worth reading &lt;a href=&quot;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&quot;&gt;if you need derived state&lt;/a&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn&#39;t need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;getSnapshotBeforeUpdate:&lt;/strong&gt; Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into &lt;code&gt;componentDidUpdate()&lt;/code&gt;. This is useful to capture information from the DOM i.e. scroll position.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes. This will not fire if &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;componentWillUnmount&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;35&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Higher-Order Components?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;higher-order component&lt;/em&gt; (&lt;em&gt;HOC&lt;/em&gt;) is a function that takes a component and returns a new component. Basically, it&#39;s a pattern that is derived from React&#39;s compositional nature.&lt;/p&gt; &lt;p&gt;We call them &lt;strong&gt;pure components&lt;/strong&gt; because they can accept any dynamically provided child component but they won&#39;t modify or copy any behavior from their input components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const EnhancedComponent = higherOrderComponent(WrappedComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;HOC can be used for many use cases:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Code reuse, logic and bootstrap abstraction.&lt;/li&gt; 
   &lt;li&gt;Render hijacking.&lt;/li&gt; 
   &lt;li&gt;State abstraction and manipulation.&lt;/li&gt; 
   &lt;li&gt;Props manipulation.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;36&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create props proxy for HOC component?&lt;/h3&gt; &lt;p&gt;You can add/edit props passed to the component using &lt;em&gt;props proxy&lt;/em&gt; pattern like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function HOC(WrappedComponent) {
  return class Test extends Component {
    render() {
      const newProps = {
        title: &#39;New Header&#39;,
        footer: false,
        showFeatureX: false,
        showFeatureY: true
      }

      return &amp;lt;WrappedComponent {...this.props} {...newProps} /&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;37&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is context?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Context&lt;/em&gt; provides a way to pass data through the component tree without having to pass props down manually at every level.&lt;/p&gt; &lt;p&gt;For example, authenticated user, locale preference, UI theme need to be accessed in the application by many components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const {Provider, Consumer} = React.createContext(defaultValue)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;38&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is children prop?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Children&lt;/em&gt; is a prop (&lt;code&gt;this.props.children&lt;/code&gt;) that allow you to pass components as data to other components, just like any other prop you use. Component tree put between component&#39;s opening and closing tag will be passed to that component as &lt;code&gt;children&lt;/code&gt; prop.&lt;/p&gt; &lt;p&gt;There are a number of methods available in the React API to work with this prop. These include &lt;code&gt;React.Children.map&lt;/code&gt;, &lt;code&gt;React.Children.forEach&lt;/code&gt;, &lt;code&gt;React.Children.count&lt;/code&gt;, &lt;code&gt;React.Children.only&lt;/code&gt;, &lt;code&gt;React.Children.toArray&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A simple usage of children prop looks as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyDiv = React.createClass({
  render: function() {
    return &amp;lt;div&amp;gt;{this.props.children}&amp;lt;/div&amp;gt;
  }
})

ReactDOM.render(
  &amp;lt;MyDiv&amp;gt;
    &amp;lt;span&amp;gt;{&#39;Hello&#39;}&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;{&#39;World&#39;}&amp;lt;/span&amp;gt;
  &amp;lt;/MyDiv&amp;gt;,
  node
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;39&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to write comments in React?&lt;/h3&gt; &lt;p&gt;The comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Single-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div&amp;gt;
  {/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(//)) */}
  {`Welcome ${user}, let&#39;s play React`}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Multi-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div&amp;gt;
  {/* Multi-line comments for more than
   one line */}
  {`Welcome ${user}, let&#39;s play React`}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;40&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of using super constructor with props argument?&lt;/h3&gt; &lt;p&gt;A child class constructor cannot make use of &lt;code&gt;this&lt;/code&gt; reference until &lt;code&gt;super()&lt;/code&gt; method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to &lt;code&gt;super()&lt;/code&gt; call is to access &lt;code&gt;this.props&lt;/code&gt; in your child constructors.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Not passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super()

    console.log(this.props) // prints undefined

    // but props parameter is still available
    console.log(props) // prints { name: &#39;John&#39;, age: 42 }
  }

  render() {
    // no difference outside constructor
    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code snippets reveals that &lt;code&gt;this.props&lt;/code&gt; is different only within the constructor. It would be the same outside the constructor.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;41&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is reconciliation?&lt;/h3&gt; &lt;p&gt;When a component&#39;s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;42&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to set state with a dynamic key name?&lt;/h3&gt; &lt;p&gt;If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with &lt;em&gt;computed property names&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;handleInputChange(event) {
  this.setState({ [event.target.id]: event.target.value })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;43&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What would be the common mistake of function being called every time the component renders?&lt;/h3&gt; &lt;p&gt;You need to make sure that function is not being called while passing the function as a parameter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  // Wrong: handleClick is called instead of passed as a reference!
  return &amp;lt;button onClick={this.handleClick()}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead, pass the function itself without parenthesis:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  // Correct: handleClick is passed as a reference!
  return &amp;lt;button onClick={this.handleClick}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;44&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is lazy function supports named exports?&lt;/h3&gt; No, currently &lt;code&gt;React.lazy&lt;/code&gt; function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and donât pull unused components. Let&#39;s take a component file which exports multiple named components, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// MoreComponents.js
export const SomeComponent = /* ... */;
export const UnusedComponent = /* ... */;
&lt;/code&gt;&lt;/pre&gt; and reexport &lt;code&gt;MoreComponents.js&lt;/code&gt; components in an intermediate file &lt;code&gt;IntermediateComponent.js&lt;/code&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// IntermediateComponent.js
export { SomeComponent as default } from &quot;./MoreComponents.js&quot;;
&lt;/code&gt;&lt;/pre&gt; Now you can import the module using lazy function as below, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { lazy } from &#39;react&#39;;
const SomeComponent = lazy(() =&amp;gt; import(&quot;./IntermediateComponent.js&quot;));
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;45&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why React uses &lt;code&gt;className&lt;/code&gt; over &lt;code&gt;class&lt;/code&gt; attribute?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;class&lt;/code&gt; is a keyword in JavaScript, and JSX is an extension of JavaScript. That&#39;s the principal reason why React uses &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;. Pass a string as the &lt;code&gt;className&lt;/code&gt; prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;span className={&#39;menu navigation-menu&#39;}&amp;gt;{&#39;Menu&#39;}&amp;lt;/span&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;46&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are fragments?&lt;/h3&gt; &lt;p&gt;It&#39;s a common pattern in React which is used for a component to return multiple elements. &lt;em&gt;Fragments&lt;/em&gt; let you group a list of children without adding extra nodes to the DOM.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is also a &lt;em&gt;shorter syntax&lt;/em&gt;, but it&#39;s not supported in many tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;ChildA /&amp;gt;
      &amp;lt;ChildB /&amp;gt;
      &amp;lt;ChildC /&amp;gt;
    &amp;lt;/&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;47&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why fragments are better than container divs?&lt;/h3&gt; &lt;p&gt;Below are the list of reasons,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.&lt;/li&gt; 
   &lt;li&gt;Some CSS mechanisms like &lt;em&gt;Flexbox&lt;/em&gt; and &lt;em&gt;CSS Grid&lt;/em&gt; have a special parent-child relationships, and adding divs in the middle makes it hard to keep the desired layout.&lt;/li&gt; 
   &lt;li&gt;The DOM Inspector is less cluttered.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;48&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are portals in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Portal&lt;/em&gt; is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactDOM.createPortal(child, container)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;49&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are stateless components?&lt;/h3&gt; &lt;p&gt;If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the &lt;code&gt;this&lt;/code&gt; keyword altogether.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;50&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are stateful components?&lt;/h3&gt; &lt;p&gt;If the behaviour of a component is dependent on the &lt;em&gt;state&lt;/em&gt; of the component then it can be termed as stateful component. These &lt;em&gt;stateful components&lt;/em&gt; are always &lt;em&gt;class components&lt;/em&gt; and have a state that gets initialized in the &lt;code&gt;constructor&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends Component {
  constructor(props) {
    super(props)
    this.state = { count: 0 }
  }

  render() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;React 16.8 Update:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Hooks let you use state and other React features without writing classes.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; import React, {useState} from &#39;react&#39;;

 const App = (props) =&amp;gt; {
   const [count, setCount] = useState(0);

   return (
     // JSX
   )
 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;51&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to apply validation on props in React?&lt;/h3&gt; &lt;p&gt;When the application is running in &lt;em&gt;development mode&lt;/em&gt;, React will automatically check all props that we set on components to make sure they have &lt;em&gt;correct type&lt;/em&gt;. If the type is incorrect, React will generate warning messages in the console. It&#39;s disabled in &lt;em&gt;production mode&lt;/em&gt; due to performance impact. The mandatory props are defined with &lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The set of predefined prop types:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.number&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.string&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.array&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.object&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.func&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.node&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.element&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.bool&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.symbol&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;PropTypes.any&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;We can define &lt;code&gt;propTypes&lt;/code&gt; for &lt;code&gt;User&lt;/code&gt; component as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import PropTypes from &#39;prop-types&#39;

class User extends React.Component {
  static propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }

  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;h1&amp;gt;{`Welcome, ${this.props.name}`}&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;{`Age, ${this.props.age}`}&amp;lt;/h2&amp;gt;
      &amp;lt;/&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In React v15.5 &lt;em&gt;PropTypes&lt;/em&gt; were moved from &lt;code&gt;React.PropTypes&lt;/code&gt; to &lt;code&gt;prop-types&lt;/code&gt; library.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import PropTypes from &#39;prop-types&#39;

function User({name, age}) {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;{`Welcome, ${name}`}&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;{`Age, ${age}`}&amp;lt;/h2&amp;gt;
    &amp;lt;/&amp;gt;
  )
}

User.propTypes = {
    name: PropTypes.string.isRequired,
    age: PropTypes.number.isRequired
  }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;52&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of React?&lt;/h3&gt; &lt;p&gt;Below are the list of main advantages of React,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Increases the application&#39;s performance with &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/li&gt; 
   &lt;li&gt;JSX makes code easy to read and write.&lt;/li&gt; 
   &lt;li&gt;It renders both on client and server side (&lt;em&gt;SSR&lt;/em&gt;).&lt;/li&gt; 
   &lt;li&gt;Easy to integrate with frameworks (Angular, Backbone) since it is only a view library.&lt;/li&gt; 
   &lt;li&gt;Easy to write unit and integration tests with tools such as Jest.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;53&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the limitations of React?&lt;/h3&gt; &lt;p&gt;Apart from the advantages, there are few limitations of React too,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React is just a view library, not a full framework.&lt;/li&gt; 
   &lt;li&gt;There is a learning curve for beginners who are new to web development.&lt;/li&gt; 
   &lt;li&gt;Integrating React into a traditional MVC framework requires some additional configuration.&lt;/li&gt; 
   &lt;li&gt;The code complexity increases with inline templating and JSX.&lt;/li&gt; 
   &lt;li&gt;Too many smaller components leading to over engineering or boilerplate.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;54&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are error boundaries in React v16?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Error boundaries&lt;/em&gt; are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.&lt;/p&gt; &lt;p&gt;A class component becomes an error boundary if it defines a new lifecycle method called &lt;code&gt;componentDidCatch(error, info)&lt;/code&gt; or &lt;code&gt;static getDerivedStateFromError() &lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props)
    this.state = { hasError: false }
  }

  componentDidCatch(error, info) {
    // You can also log the error to an error reporting service
    logErrorToMyService(error, info)
  }

  static getDerivedStateFromError(error) {
     // Update state so the next render will show the fallback UI.
     return { hasError: true };
   }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;{&#39;Something went wrong.&#39;}&amp;lt;/h1&amp;gt;
    }
    return this.props.children
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that use it as a regular component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;ErrorBoundary&amp;gt;
  &amp;lt;MyWidget /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;55&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How error boundaries handled in React v15?&lt;/h3&gt; &lt;p&gt;React v15 provided very basic support for &lt;em&gt;error boundaries&lt;/em&gt; using &lt;code&gt;unstable_handleError&lt;/code&gt; method. It has been renamed to &lt;code&gt;componentDidCatch&lt;/code&gt; in React v16.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;56&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the recommended ways for static type checking?&lt;/h3&gt; &lt;p&gt;Normally we use &lt;em&gt;PropTypes library&lt;/em&gt; (&lt;code&gt;React.PropTypes&lt;/code&gt; moved to a &lt;code&gt;prop-types&lt;/code&gt; package since React v15.5) for &lt;em&gt;type checking&lt;/em&gt; in the React applications. For large code bases, it is recommended to use &lt;em&gt;static type checkers&lt;/em&gt; such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;57&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of &lt;code&gt;react-dom&lt;/code&gt; package?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-dom&lt;/code&gt; package provides &lt;em&gt;DOM-specific methods&lt;/em&gt; that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;hydrate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;unmountComponentAtNode()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;findDOMNode()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;createPortal()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;58&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of render method of &lt;code&gt;react-dom&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;This method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ReactDOM.render(element, container[, callback])
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the optional callback is provided, it will be executed after the component is rendered or updated.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;59&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is ReactDOMServer?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;ReactDOMServer&lt;/code&gt; object enables you to render components to static markup (typically used on node server). This object is mainly used for &lt;em&gt;server-side rendering&lt;/em&gt; (SSR). The following methods can be used in both the server and browser environments:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;renderToString()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;renderToStaticMarkup()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;For example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call &lt;code&gt;renderToString&lt;/code&gt; to render your root component to a string, which you then send as response.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// using Express
import { renderToString } from &#39;react-dom/server&#39;
import MyPage from &#39;./MyPage&#39;

app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  res.write(&#39;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;My Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&#39;)
  res.write(&#39;&amp;lt;div id=&quot;content&quot;&amp;gt;&#39;)
  res.write(renderToString(&amp;lt;MyPage/&amp;gt;))
  res.write(&#39;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;)
  res.end()
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;60&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use innerHTML in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute is React&#39;s replacement for using &lt;code&gt;innerHTML&lt;/code&gt; in the browser DOM. Just like &lt;code&gt;innerHTML&lt;/code&gt;, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a &lt;code&gt;__html&lt;/code&gt; object as key and HTML text as value.&lt;/p&gt; &lt;p&gt;In this example MyComponent uses &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute for setting HTML markup:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function createMarkup() {
  return { __html: &#39;First &amp;amp;middot; Second&#39; }
}

function MyComponent() {
  return &amp;lt;div dangerouslySetInnerHTML={createMarkup()} /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;61&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use styles in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;style&lt;/code&gt; attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const divStyle = {
  color: &#39;blue&#39;,
  backgroundImage: &#39;url(&#39; + imgUrl + &#39;)&#39;
};

function HelloWorldComponent() {
  return &amp;lt;div style={divStyle}&amp;gt;Hello World!&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. &lt;code&gt;node.style.backgroundImage&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;62&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How events are different in React?&lt;/h3&gt; &lt;p&gt;Handling events in React elements has some syntactic differences:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React event handlers are named using camelCase, rather than lowercase.&lt;/li&gt; 
   &lt;li&gt;With JSX you pass a function as the event handler, rather than a string.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;63&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen if you use &lt;code&gt;setState()&lt;/code&gt; in constructor?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt;, then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: &lt;em&gt;Can only update a mounted or mounting component.&lt;/em&gt; So we need to use &lt;code&gt;this.state&lt;/code&gt; to initialize variables inside constructor.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;64&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the impact of indexes as keys?&lt;/h3&gt; &lt;p&gt;Keys should be stable, predictable, and unique so that React can keep track of elements.&lt;/p&gt; &lt;p&gt;In the below code snippet each element&#39;s key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;{todos.map((todo, index) =&amp;gt;
  &amp;lt;Todo
    {...todo}
    key={index}
  /&amp;gt;
)}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;{todos.map((todo) =&amp;gt;
  &amp;lt;Todo {...todo}
    key={todo.id} /&amp;gt;
)}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;65&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it good to use &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillMount()&lt;/code&gt; method?&lt;/h3&gt; &lt;p&gt;Yes, it is safe to use &lt;code&gt;setState()&lt;/code&gt; inside &lt;code&gt;componentWillMount()&lt;/code&gt; method. But at the same it is recommended to avoid async initialization in &lt;code&gt;componentWillMount()&lt;/code&gt; lifecycle method. &lt;code&gt;componentWillMount()&lt;/code&gt; is invoked immediately before mounting occurs. It is called before &lt;code&gt;render()&lt;/code&gt;, therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in &lt;code&gt;componentDidMount()&lt;/code&gt; instead of &lt;code&gt;componentWillMount()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;componentDidMount() {
  axios.get(`api/todos`)
    .then((result) =&amp;gt; {
      this.setState({
        messages: [...result.data]
      })
    })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;66&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What will happen if you use props in initial state?&lt;/h3&gt; &lt;p&gt;If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.&lt;/p&gt; &lt;p&gt;The below component won&#39;t display the updated input value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      records: [],
      inputValue: this.props.inputValue
    };
  }

  render() {
    return &amp;lt;div&amp;gt;{this.state.inputValue}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using props inside render method will update the value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)

    this.state = {
      record: []
    }
  }

  render() {
    return &amp;lt;div&amp;gt;{this.props.inputValue}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;67&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you conditionally render components?&lt;/h3&gt; &lt;p&gt;In some cases you want to render different components depending on some state. JSX does not render &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, so you can use conditional &lt;em&gt;short-circuiting&lt;/em&gt; to render a given part of your component only if a certain condition is true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = ({ name, address }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;
    {address &amp;amp;&amp;amp;
      &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;
    }
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need an &lt;code&gt;if-else&lt;/code&gt; condition then use &lt;em&gt;ternary operator&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = ({ name, address }) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;
    {address
      ? &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;
      : &amp;lt;p&amp;gt;{&#39;Address is not available&#39;}&amp;lt;/p&amp;gt;
    }
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;68&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why we need to be careful when spreading props on DOM elements?&lt;/h3&gt; &lt;p&gt;When we &lt;em&gt;spread props&lt;/em&gt; we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with &lt;code&gt;...rest&lt;/code&gt; operator, so it will add only required props.&lt;/p&gt; &lt;p&gt;For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ComponentA = () =&amp;gt;
  &amp;lt;ComponentB isDisplay={true} className={&#39;componentStyle&#39;} /&amp;gt;

const ComponentB = ({ isDisplay, ...domProps }) =&amp;gt;
  &amp;lt;div {...domProps}&amp;gt;{&#39;ComponentB&#39;}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;69&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How you use decorators in React?&lt;/h3&gt; &lt;p&gt;You can &lt;em&gt;decorate&lt;/em&gt; your &lt;em&gt;class&lt;/em&gt; components, which is the same as passing the component into a function. &lt;strong&gt;Decorators&lt;/strong&gt; are flexible and readable way of modifying component functionality.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;@setTitle(&#39;Profile&#39;)
class Profile extends React.Component {
    //....
}

/*
  title is a string that will be set as a document title
  WrappedComponent is what our decorator will receive when
  put directly above a component class as seen in the example above
*/
const setTitle = (title) =&amp;gt; (WrappedComponent) =&amp;gt; {
  return class extends React.Component {
    componentDidMount() {
      document.title = title
    }

    render() {
      return &amp;lt;WrappedComponent {...this.props} /&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Decorators are a feature that didn&#39;t make it into ES7, but are currently a &lt;em&gt;stage 2 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;70&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you memoize a component?&lt;/h3&gt; &lt;p&gt;There are memoize libraries available which can be used on function components.&lt;/p&gt; &lt;p&gt;For example &lt;code&gt;moize&lt;/code&gt; library can memoize the component in another component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import moize from &#39;moize&#39;
import Component from &#39;./components/Component&#39; // this module exports a non-memoized component

const MemoizedFoo = moize.react(Component)

const Consumer = () =&amp;gt; {
  &amp;lt;div&amp;gt;
    {&#39;I will memoize the following entry:&#39;}
    &amp;lt;MemoizedFoo/&amp;gt;
  &amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Since React v16.6.0, we have a &lt;code&gt;React.memo&lt;/code&gt;. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  const MemoComponent = React.memo(function MemoComponent(props) {
    /* render using props */
  });
  OR
  export default React.memo(MyFunctionComponent);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;71&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How you implement Server Side Rendering or SSR?&lt;/h3&gt; &lt;p&gt;React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ReactDOMServer from &#39;react-dom/server&#39;
import App from &#39;./App&#39;

ReactDOMServer.renderToString(&amp;lt;App /&amp;gt;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;72&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to enable production mode in React?&lt;/h3&gt; &lt;p&gt;You should use Webpack&#39;s &lt;code&gt;DefinePlugin&lt;/code&gt; method to set &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify&#39;s dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;73&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is CRA and its benefits?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;create-react-app&lt;/code&gt; CLI tool allows you to quickly create &amp;amp; run React applications with no configuration step.&lt;/p&gt; &lt;p&gt;Let&#39;s create Todo App using &lt;em&gt;CRA&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;# Installation
$ npm install -g create-react-app

# Create new project
$ create-react-app todo-app
$ cd todo-app

# Build, test and run
$ npm run build
$ npm run test
$ npm start
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It includes everything we need to build a React app:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React, JSX, ES6, and Flow syntax support.&lt;/li&gt; 
   &lt;li&gt;Language extras beyond ES6 like the object spread operator.&lt;/li&gt; 
   &lt;li&gt;Autoprefixed CSS, so you donât need -webkit- or other prefixes.&lt;/li&gt; 
   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting.&lt;/li&gt; 
   &lt;li&gt;A live development server that warns about common mistakes.&lt;/li&gt; 
   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;74&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the lifecycle methods order in mounting?&lt;/h3&gt; &lt;p&gt;The lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;static getDerivedStateFromProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;75&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/h3&gt; &lt;p&gt;The following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;Starting with React v16.3 these methods are aliased with &lt;code&gt;UNSAFE_&lt;/code&gt; prefix, and the unprefixed version will be removed in React v17.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;76&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new static &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or &lt;code&gt;null&lt;/code&gt; to indicate that the new props do not require any state updates.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  static getDerivedStateFromProps(props, state) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillReceiveProps()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;77&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to &lt;code&gt;componentDidUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  getSnapshotBeforeUpdate(prevProps, prevState) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;78&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do Hooks replace render props and higher order components?&lt;/h3&gt; &lt;p&gt;Both render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;79&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended way for naming components?&lt;/h3&gt; &lt;p&gt;It is recommended to name the component by reference instead of using &lt;code&gt;displayName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Using &lt;code&gt;displayName&lt;/code&gt; for naming component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default React.createClass({
  displayName: &#39;TodoApp&#39;,
  // ...
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;strong&gt;recommended&lt;/strong&gt; approach:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class TodoApp extends React.Component {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;80&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended ordering of methods in component class?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt; ordering of methods from &lt;em&gt;mounting&lt;/em&gt; to &lt;em&gt;render stage&lt;/em&gt;:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;static&lt;/code&gt; methods&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;getChildContext()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentDidUpdate()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;click handlers or event handlers like &lt;code&gt;onClickSubmit()&lt;/code&gt; or &lt;code&gt;onChangeDescription()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;getter methods for render like &lt;code&gt;getSelectReason()&lt;/code&gt; or &lt;code&gt;getFooterContent()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;optional render methods like &lt;code&gt;renderNavigation()&lt;/code&gt; or &lt;code&gt;renderProfilePicture()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;81&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is a switching component?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;switching component&lt;/em&gt; is a component that renders one of many components. We need to use object to map prop values to components.&lt;/p&gt; &lt;p&gt;For example, a switching component to display different pages based on &lt;code&gt;page&lt;/code&gt; prop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import HomePage from &#39;./HomePage&#39;
import AboutPage from &#39;./AboutPage&#39;
import ServicesPage from &#39;./ServicesPage&#39;
import ContactPage from &#39;./ContactPage&#39;

const PAGES = {
  home: HomePage,
  about: AboutPage,
  services: ServicesPage,
  contact: ContactPage
}

const Page = (props) =&amp;gt; {
  const Handler = PAGES[props.page] || ContactPage

  return &amp;lt;Handler {...props} /&amp;gt;
}

// The keys of the PAGES object can be used in the prop types to catch dev-time errors.
Page.propTypes = {
  page: PropTypes.oneOf(Object.keys(PAGES)).isRequired
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;82&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why we need to pass a function to setState()?&lt;/h3&gt; &lt;p&gt;The reason behind for this is that &lt;code&gt;setState()&lt;/code&gt; is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after &lt;code&gt;setState()&lt;/code&gt; is called. That means you should not rely on the current state when calling &lt;code&gt;setState()&lt;/code&gt;âsince you can&#39;t be sure what that state will be. The solution is to pass a function to &lt;code&gt;setState()&lt;/code&gt;, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&#39;s say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// assuming this.state.count === 0
this.setState({ count: this.state.count + 1 })
this.setState({ count: this.state.count + 1 })
this.setState({ count: this.state.count + 1 })
// this.state.count === 0, not 3
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we pass a function to &lt;code&gt;setState()&lt;/code&gt;, the count gets incremented correctly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.setState((prevState, props) =&amp;gt; ({
  count: prevState.count + props.increment
}))
// this.state.count === 3 as expected
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;h3&gt;Why function is preferred over object for &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;React may batch multiple &lt;code&gt;setState()&lt;/code&gt; calls into a single update for performance. Because &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; may be updated asynchronously, you should not rely on their values for calculating the next state.&lt;/p&gt; &lt;p&gt;This counter example will fail to update as expected:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Wrong
this.setState({
  counter: this.state.counter + this.props.increment,
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The preferred approach is to call &lt;code&gt;setState()&lt;/code&gt; with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Correct
this.setState((prevState, props) =&amp;gt; ({
  counter: prevState.counter + props.increment
}))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;83&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is strict mode in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;React.StrictMode&lt;/code&gt; is a useful component for highlighting potential problems in an application. Just like &lt;code&gt;&amp;lt;Fragment&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;StrictMode&amp;gt;&lt;/code&gt; does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for &lt;em&gt;development mode&lt;/em&gt; only.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;

function ExampleApplication() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Header /&amp;gt;
      &amp;lt;React.StrictMode&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;ComponentOne /&amp;gt;
          &amp;lt;ComponentTwo /&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/React.StrictMode&amp;gt;
      &amp;lt;Header /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the example above, the &lt;em&gt;strict mode&lt;/em&gt; checks apply to &lt;code&gt;&amp;lt;ComponentOne&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ComponentTwo&amp;gt;&lt;/code&gt; components only.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;84&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are React Mixins?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Mixins&lt;/em&gt; are a way to totally separate components to have a common functionality. Mixins &lt;strong&gt;should not be used&lt;/strong&gt; and can be replaced with &lt;em&gt;higher-order components&lt;/em&gt; or &lt;em&gt;decorators&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;One of the most commonly used mixins is &lt;code&gt;PureRenderMixin&lt;/code&gt;. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const PureRenderMixin = require(&#39;react-addons-pure-render-mixin&#39;)

const Button = React.createClass({
  mixins: [PureRenderMixin],
  // ...
})
&lt;/code&gt;&lt;/pre&gt; 
  &lt;!-- TODO: mixins are deprecated --&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;85&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is &lt;code&gt;isMounted()&lt;/code&gt; an anti-pattern and what is the proper solution?&lt;/h3&gt; &lt;p&gt;The primary use case for &lt;code&gt;isMounted()&lt;/code&gt; is to avoid calling &lt;code&gt;setState()&lt;/code&gt; after a component has been unmounted, because it will emit a warning.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (this.isMounted()) {
  this.setState({...})
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Checking &lt;code&gt;isMounted()&lt;/code&gt; before calling &lt;code&gt;setState()&lt;/code&gt; does eliminate the warning, but it also defeats the purpose of the warning. Using &lt;code&gt;isMounted()&lt;/code&gt; is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.&lt;/p&gt; &lt;p&gt;An optimal solution would be to find places where &lt;code&gt;setState()&lt;/code&gt; might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in &lt;code&gt;componentWillUnmount()&lt;/code&gt;, prior to unmounting.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;86&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the Pointer Events supported in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Pointer Events&lt;/em&gt; provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don&#39;t correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the &lt;em&gt;Pointer Events&lt;/em&gt; specification.&lt;/p&gt; &lt;p&gt;The following event types are now available in &lt;em&gt;React DOM&lt;/em&gt;:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;onPointerDown&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerMove&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerUp&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerCancel&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onGotPointerCapture&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onLostPointerCapture&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerEnter&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerLeave&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerOver&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;onPointerOut&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;87&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should component names start with capital letter?&lt;/h3&gt; &lt;p&gt;If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class SomeComponent extends Component {
 // Code goes here
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can define component class which name starts with lowercase letter, but when it&#39;s imported it should have capital letter. Here lowercase is fine:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class myComponent extends Component {
  render() {
    return &amp;lt;div /&amp;gt;
  }
}

export default myComponent
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While when imported in another file it should start with capital letter:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import MyComponent from &#39;./MyComponent&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;What are the exceptions on React component naming?&lt;/h4&gt; &lt;p&gt;The component names should start with a uppercase letter but there are few exceptions on this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names. For example the below tag can be compiled to a valid component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;     render() {
          return (
            &amp;lt;obj.component/&amp;gt; // `React.createElement(obj.component)`
          )
    }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;88&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Are custom DOM attributes supported in React v16?&lt;/h3&gt; &lt;p&gt;Yes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn&#39;t recognize, React would just skip it.&lt;/p&gt; &lt;p&gt;For example, let&#39;s take a look at the below attribute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div mycustomattribute={&#39;something&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Would render an empty div to the DOM with React v15:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In React v16 any unknown attributes will end up in the DOM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div mycustomattribute=&#39;something&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;89&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between constructor and getInitialState?&lt;/h3&gt; &lt;p&gt;You should initialize state in the constructor when using ES6 classes, and &lt;code&gt;getInitialState()&lt;/code&gt; method when using &lt;code&gt;React.createClass()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using ES6 classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.state = { /* initial state */ }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const MyComponent = React.createClass({
  getInitialState() {
    return { /* initial state */ }
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.createClass()&lt;/code&gt; is deprecated and removed in React v16. Use plain JavaScript classes instead.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;90&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you force a component to re-render without calling setState?&lt;/h3&gt; &lt;p&gt;By default, when your component&#39;s state or props change, your component will re-render. If your &lt;code&gt;render()&lt;/code&gt; method depends on some other data, you can tell React that the component needs re-rendering by calling &lt;code&gt;forceUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;component.forceUpdate(callback)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;91&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;super()&lt;/code&gt; and &lt;code&gt;super(props)&lt;/code&gt; in React using ES6 classes?&lt;/h3&gt; &lt;p&gt;When you want to access &lt;code&gt;this.props&lt;/code&gt; in &lt;code&gt;constructor()&lt;/code&gt; then you should pass props to &lt;code&gt;super()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super(props)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    console.log(this.props) // { name: &#39;John&#39;, ... }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super()
    console.log(this.props) // undefined
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Outside &lt;code&gt;constructor()&lt;/code&gt; both will display same value for &lt;code&gt;this.props&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;92&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to loop inside JSX?&lt;/h3&gt; &lt;p&gt;You can simply use &lt;code&gt;Array.prototype.map&lt;/code&gt; with ES6 &lt;em&gt;arrow function&lt;/em&gt; syntax.&lt;/p&gt; &lt;p&gt;For example, the &lt;code&gt;items&lt;/code&gt; array of objects is mapped into an array of components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;tbody&amp;gt;
  {items.map(item =&amp;gt; &amp;lt;SomeComponent key={item.id} name={item.name} /&amp;gt;)}
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can&#39;t iterate using &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;tbody&amp;gt;
  for (let i = 0; i &amp;lt; items.length; i++) {
    &amp;lt;SomeComponent key={items[i].id} name={items[i].name} /&amp;gt;
  }
&amp;lt;/tbody&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is because JSX tags are transpiled into &lt;em&gt;function calls&lt;/em&gt;, and you can&#39;t use statements inside expressions. This may change thanks to &lt;code&gt;do&lt;/code&gt; expressions which are &lt;em&gt;stage 1 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;93&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access props in attribute quotes?&lt;/h3&gt; &lt;p&gt;React (or JSX) doesn&#39;t support variable interpolation inside an attribute value. The below representation won&#39;t work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src=&#39;images/{this.props.image}&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src={&#39;images/&#39; + this.props.image} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;em&gt;template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;img className=&#39;image&#39; src={`images/${this.props.image}`} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;94&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React proptype array with shape?&lt;/h3&gt; &lt;p&gt;If you want to pass an array of objects to a component with a particular shape then use &lt;code&gt;React.PropTypes.shape()&lt;/code&gt; as an argument to &lt;code&gt;React.PropTypes.arrayOf()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactComponent.propTypes = {
  arrayWithShape: React.PropTypes.arrayOf(React.PropTypes.shape({
    color: React.PropTypes.string.isRequired,
    fontSize: React.PropTypes.number.isRequired
  })).isRequired
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;95&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to conditionally apply class attributes?&lt;/h3&gt; &lt;p&gt;You shouldn&#39;t use curly braces inside quotes because it is going to be evaluated as a string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className=&quot;btn-panel {this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead you need to move curly braces outside (don&#39;t forget to include spaces between class names):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className={&#39;btn-panel &#39; + (this.props.visible ? &#39;show&#39; : &#39;hidden&#39;)}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div className={`btn-panel ${this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}`}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;96&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React and ReactDOM?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react&lt;/code&gt; package contains &lt;code&gt;React.createElement()&lt;/code&gt;, &lt;code&gt;React.Component&lt;/code&gt;, &lt;code&gt;React.Children&lt;/code&gt;, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The &lt;code&gt;react-dom&lt;/code&gt; package contains &lt;code&gt;ReactDOM.render()&lt;/code&gt;, and in &lt;code&gt;react-dom/server&lt;/code&gt; we have &lt;em&gt;server-side rendering&lt;/em&gt; support with &lt;code&gt;ReactDOMServer.renderToString()&lt;/code&gt; and &lt;code&gt;ReactDOMServer.renderToStaticMarkup()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;97&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why ReactDOM is separated from React?&lt;/h3&gt; &lt;p&gt;The React team worked on extracting all DOM-related features into a separate library called &lt;em&gt;ReactDOM&lt;/em&gt;. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, &lt;code&gt;react-native&lt;/code&gt;, &lt;code&gt;react-art&lt;/code&gt;, &lt;code&gt;react-canvas&lt;/code&gt;, and &lt;code&gt;react-three&lt;/code&gt;, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.&lt;/p&gt; &lt;p&gt;To build more environments that React can render to, React team planned to split the main React package into two: &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;. This paves the way to writing components that can be shared between the web version of React and React Native.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;98&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use React label element?&lt;/h3&gt; &lt;p&gt;If you try to render a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element bound to a text input using the standard &lt;code&gt;for&lt;/code&gt; attribute, then it produces HTML missing that attribute and prints a warning to the console.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;label for={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;
&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since &lt;code&gt;for&lt;/code&gt; is a reserved keyword in JavaScript, use &lt;code&gt;htmlFor&lt;/code&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;label htmlFor={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;
&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;99&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to combine multiple inline style objects?&lt;/h3&gt; &lt;p&gt;You can use &lt;em&gt;spread operator&lt;/em&gt; in regular React:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt; &amp;lt;button style={{...styles.panel.button, ...styles.panel.submitButton}}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re using React Native then you can use the array notation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;button style={[styles.panel.button, styles.panel.submitButton]}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;100&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to re-render the view when the browser is resized?&lt;/h3&gt; &lt;p&gt;You can listen to the &lt;code&gt;resize&lt;/code&gt; event in &lt;code&gt;componentDidMount()&lt;/code&gt; and then update the dimensions (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;). You should remove the listener in &lt;code&gt;componentWillUnmount()&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class WindowDimensions extends React.Component {
  constructor(props){
    super(props);
    this.updateDimensions = this.updateDimensions.bind(this);
  }
   
  componentWillMount() {
    this.updateDimensions()
  }

  componentDidMount() {
    window.addEventListener(&#39;resize&#39;, this.updateDimensions)
  }

  componentWillUnmount() {
    window.removeEventListener(&#39;resize&#39;, this.updateDimensions)
  }

  updateDimensions() {
    this.setState({width: window.innerWidth, height: window.innerHeight})
  }

  render() {
    return &amp;lt;span&amp;gt;{this.state.width} x {this.state.height}&amp;lt;/span&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;101&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;setState()&lt;/code&gt; and &lt;code&gt;replaceState()&lt;/code&gt; methods?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt; the current and previous states are merged. &lt;code&gt;replaceState()&lt;/code&gt; throws out the current state, and replaces it with only what you provide. Usually &lt;code&gt;setState()&lt;/code&gt; is used unless you really need to remove all previous keys for some reason. You can also set state to &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt; in &lt;code&gt;setState()&lt;/code&gt; instead of using &lt;code&gt;replaceState()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;102&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to listen to state changes?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;componentDidUpdate&lt;/code&gt; lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;componentDidUpdate(object prevProps, object prevState)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The previous releases of ReactJS also uses &lt;code&gt;componentWillUpdate(object nextProps, object nextState)&lt;/code&gt; for state changes. It has been deprecated in latest releases.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;103&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the recommended approach of removing an array element in React state?&lt;/h3&gt; &lt;p&gt;The better approach is to use &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;For example, let&#39;s create a &lt;code&gt;removeItem()&lt;/code&gt; method for updating the state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;removeItem(index) {
  this.setState({
    data: this.state.data.filter((item, i) =&amp;gt; i !== index)
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;104&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use React without rendering HTML?&lt;/h3&gt; &lt;p&gt;It is possible with latest version (&amp;gt;=16.2). Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return false
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return null
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return []
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;React.Fragment&amp;gt;&amp;lt;/React.Fragment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Returning &lt;code&gt;undefined&lt;/code&gt; won&#39;t work.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;105&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pretty print JSON with React?&lt;/h3&gt; &lt;p&gt;We can use &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag so that the formatting of the &lt;code&gt;JSON.stringify()&lt;/code&gt; is retained:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const data = { name: &#39;John&#39;, age: 42 }

class User extends React.Component {
  render() {
    return (
      &amp;lt;pre&amp;gt;
        {JSON.stringify(data, null, 2)}
      &amp;lt;/pre&amp;gt;
    )
  }
}

React.render(&amp;lt;User /&amp;gt;, document.getElementById(&#39;container&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;106&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why you can&#39;t update props in React?&lt;/h3&gt; &lt;p&gt;The React philosophy is that props should be &lt;em&gt;immutable&lt;/em&gt; and &lt;em&gt;top-down&lt;/em&gt;. This means that a parent can send any prop values to a child, but the child can&#39;t modify received props.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;107&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to focus an input element on page load?&lt;/h3&gt; &lt;p&gt;You can do it by creating &lt;em&gt;ref&lt;/em&gt; for &lt;code&gt;input&lt;/code&gt; element and using it in &lt;code&gt;componentDidMount()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class App extends React.Component{
  componentDidMount() {
    this.nameInput.focus()
  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;input
          defaultValue={&#39;Won\&#39;t focus&#39;}
        /&amp;gt;
        &amp;lt;input
          ref={(input) =&amp;gt; this.nameInput = input}
          defaultValue={&#39;Will focus&#39;}
        /&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;108&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible ways of updating objects in state?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with an object to merge with state:&lt;/strong&gt;&lt;/p&gt; 
    &lt;ul&gt; 
     &lt;li&gt; &lt;p&gt;Using &lt;code&gt;Object.assign()&lt;/code&gt; to create a copy of the object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = Object.assign({}, this.state.user, { age: 42 })
this.setState({ user })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
     &lt;li&gt; &lt;p&gt;Using &lt;em&gt;spread operator&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const user = { ...this.state.user, age: 42 }
this.setState({ user })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with a function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.setState(prevState =&amp;gt; ({
  user: {
    ...prevState.user,
    age: 42
  }
}))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;110&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How can we find the version of React at runtime in the browser?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;React.version&lt;/code&gt; to get the version.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const REACT_VERSION = React.version

ReactDOM.render(
  &amp;lt;div&amp;gt;{`React version: ${REACT_VERSION}`}&amp;lt;/div&amp;gt;,
  document.getElementById(&#39;app&#39;)
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;111&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the approaches to include polyfills in your &lt;code&gt;create-react-app&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are approaches to include polyfills in create-react-app,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual import from &lt;code&gt;core-js&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a file called (something like) &lt;code&gt;polyfills.js&lt;/code&gt; and import it into root &lt;code&gt;index.js&lt;/code&gt; file. Run &lt;code&gt;npm install core-js&lt;/code&gt; or &lt;code&gt;yarn add core-js&lt;/code&gt; and import your specific required features.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &#39;core-js/fn/array/find&#39;
import &#39;core-js/fn/array/includes&#39;
import &#39;core-js/fn/number/is-nan&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Polyfill service:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&#39;https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes&#39;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above script we had to explicitly request the &lt;code&gt;Array.prototype.includes&lt;/code&gt; feature as it is not included in the default feature set.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;112&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use https instead of http in create-react-app?&lt;/h3&gt; &lt;p&gt;You just need to use &lt;code&gt;HTTPS=true&lt;/code&gt; configuration. You can edit your &lt;code&gt;package.json&lt;/code&gt; scripts section:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;scripts&quot;: {
  &quot;start&quot;: &quot;set HTTPS=true &amp;amp;&amp;amp; react-scripts start&quot;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or just run &lt;code&gt;set HTTPS=true &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;113&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to avoid using relative path imports in create-react-app?&lt;/h3&gt; &lt;p&gt;Create a file called &lt;code&gt;.env&lt;/code&gt; in the project root and write the import path:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NODE_PATH=src/app
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that restart the development server. Now you should be able to import anything inside &lt;code&gt;src/app&lt;/code&gt; without relative paths.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;114&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add Google Analytics for React Router?&lt;/h3&gt; &lt;p&gt;Add a listener on the &lt;code&gt;history&lt;/code&gt; object to record each page view:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;history.listen(function (location) {
  window.ga(&#39;set&#39;, &#39;page&#39;, location.pathname + location.search)
  window.ga(&#39;send&#39;, &#39;pageview&#39;, location.pathname + location.search)
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;115&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to update a component every second?&lt;/h3&gt; &lt;p&gt;You need to use &lt;code&gt;setInterval()&lt;/code&gt; to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;componentDidMount() {
  this.interval = setInterval(() =&amp;gt; this.setState({ time: Date.now() }), 1000)
}

componentWillUnmount() {
  clearInterval(this.interval)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;116&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you apply vendor prefixes to inline styles in React?&lt;/h3&gt; &lt;p&gt;React &lt;em&gt;does not&lt;/em&gt; apply &lt;em&gt;vendor prefixes&lt;/em&gt; automatically. You need to add vendor prefixes manually.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;div style={{
  transform: &#39;rotate(90deg)&#39;,
  WebkitTransform: &#39;rotate(90deg)&#39;, // note the capital &#39;W&#39; here
  msTransform: &#39;rotate(90deg)&#39; // &#39;ms&#39; is the only lowercase vendor prefix
}} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;117&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to import and export components using React and ES6?&lt;/h3&gt; &lt;p&gt;You should use default for exporting the components&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import User from &#39;user&#39;

export default class MyProfile extends React.Component {
  render(){
    return (
      &amp;lt;User type=&quot;customer&quot;&amp;gt;
        //...
      &amp;lt;/User&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;119&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is a component constructor called only once?&lt;/h3&gt; &lt;p&gt;React&#39;s &lt;em&gt;reconciliation&lt;/em&gt; algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it&#39;s the same component as before, so reuses the previous instance rather than creating a new one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;120&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to define constants in React?&lt;/h3&gt; &lt;p&gt;You can use ES7 &lt;code&gt;static&lt;/code&gt; field to define constant.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  static DEFAULT_PAGINATION = 10
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Static fields&lt;/em&gt; are part of the &lt;em&gt;Class Fields&lt;/em&gt; stage 3 proposal.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;121&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to programmatically trigger click event in React?&lt;/h3&gt; &lt;p&gt;You could use the ref prop to acquire a reference to the underlying &lt;code&gt;HTMLInputElement&lt;/code&gt; object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the &lt;code&gt;HTMLElement.click&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;This can be done in two steps:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create ref in render method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;input ref={input =&amp;gt; this.inputElement = input} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Apply click event in your event handler:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.inputElement.click()
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;122&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use async/await in plain React?&lt;/h3&gt; &lt;p&gt;If you want to use &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; in React, you will need &lt;em&gt;Babel&lt;/em&gt; and &lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator&quot;&gt;transform-async-to-generator&lt;/a&gt; plugin. React Native ships with Babel and a set of transforms.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;123&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the common folder structures for React?&lt;/h3&gt; &lt;p&gt;There are two common practices for React project file structure.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by features or routes:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;One common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;common/
ââ Avatar.js
ââ Avatar.css
ââ APIUtils.js
ââ APIUtils.test.js
feed/
ââ index.js
ââ Feed.js
ââ Feed.css
ââ FeedStory.js
ââ FeedStory.test.js
ââ FeedAPI.js
profile/
ââ index.js
ââ Profile.js
ââ ProfileHeader.js
ââ ProfileHeader.css
ââ ProfileAPI.js
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by file type:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Another popular way to structure projects is to group similar files together.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;api/
ââ APIUtils.js
ââ APIUtils.test.js
ââ ProfileAPI.js
ââ UserAPI.js
components/
ââ Avatar.js
ââ Avatar.css
ââ Feed.js
ââ Feed.css
ââ FeedStory.js
ââ FeedStory.test.js
ââ Profile.js
ââ ProfileHeader.js
ââ ProfileHeader.css
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;124&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the popular packages for animation?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Transition Group&lt;/em&gt; and &lt;em&gt;React Motion&lt;/em&gt; are popular animation packages in React ecosystem.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;125&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of styles modules?&lt;/h3&gt; &lt;p&gt;It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.&lt;/p&gt; &lt;p&gt;For example, these styles could be extracted into a separate component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export const colors = {
  white,
  black,
  blue
}

export const space = [
  0,
  8,
  16,
  32,
  64
]
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then imported individually in other components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { space, colors } from &#39;./styles&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;126&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the popular React-specific linters?&lt;/h3&gt; &lt;p&gt;ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called &lt;code&gt;eslint-plugin-react&lt;/code&gt;. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.&lt;/p&gt; &lt;p&gt;Another popular plugin is &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with &lt;code&gt;alt&lt;/code&gt; text and &lt;code&gt;tabindex&lt;/code&gt;, for example, will not be picked up by regular plugins.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;127&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to make AJAX call and in which component lifecycle methods should I make an AJAX call?&lt;/h3&gt; &lt;p&gt;You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in &lt;code&gt;fetch&lt;/code&gt;. You should fetch data in the &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle method. This is so you can use &lt;code&gt;setState()&lt;/code&gt; to update your component when the data is retrieved.&lt;/p&gt; &lt;p&gt;For example, the employees list fetched from API and set local state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      employees: [],
      error: null
    }
  }

  componentDidMount() {
    fetch(&#39;https://api.example.com/items&#39;)
      .then(res =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            employees: result.employees
          })
        },
        (error) =&amp;gt; {
          this.setState({ error })
        }
      )
  }

  render() {
    const { error, employees } = this.state
    if (error) {
      return &amp;lt;div&amp;gt;Error: {error.message}&amp;lt;/div&amp;gt;;
    } else {
      return (
        &amp;lt;ul&amp;gt;
          {employees.map(employee =&amp;gt; (
            &amp;lt;li key={employee.name}&amp;gt;
              {employee.name}-{employee.experience}
            &amp;lt;/li&amp;gt;
          ))}
        &amp;lt;/ul&amp;gt;
      )
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;128&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are render props?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Render Props&lt;/strong&gt; is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;DataProvider render={data =&amp;gt; (
  &amp;lt;h1&amp;gt;{`Hello ${data.target}`}&amp;lt;/h1&amp;gt;
)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Libraries such as React Router and DownShift are using this pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Router&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;129&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Router?&lt;/h3&gt; &lt;p&gt;React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what&#39;s being displayed on the page.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;130&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How React Router is different from history library?&lt;/h3&gt; &lt;p&gt;React Router is a wrapper around the &lt;code&gt;history&lt;/code&gt; library which handles interaction with the browser&#39;s &lt;code&gt;window.history&lt;/code&gt; with its browser and hash histories. It also provides memory history which is useful for environments that don&#39;t have global history, such as mobile app development (React Native) and unit testing with Node.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;131&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components of React Router v4?&lt;/h3&gt; &lt;p&gt;React Router v4 provides below 3 &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;HashRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;&amp;lt;MemoryRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The above components will create &lt;em&gt;browser&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, and &lt;em&gt;memory&lt;/em&gt; history instances. React Router v4 makes the properties and methods of the &lt;code&gt;history&lt;/code&gt; instance associated with your router available through the context in the &lt;code&gt;router&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;132&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods of &lt;code&gt;history&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;A history instance has two methods for navigation purpose.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;If you think of the history as an array of visited locations, &lt;code&gt;push()&lt;/code&gt; will add a new location to the array and &lt;code&gt;replace()&lt;/code&gt; will replace the current location in the array with the new one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;133&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you programmatically navigate using React Router v4?&lt;/h3&gt; &lt;p&gt;There are three different ways to achieve programmatic routing/navigation within components.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using the &lt;code&gt;withRouter()&lt;/code&gt; higher-order function:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;withRouter()&lt;/code&gt; higher-order function will inject the history object as a prop of the component. This object provides &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods to avoid the usage of context.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { withRouter } from &#39;react-router-dom&#39; // this also works with &#39;react-router-native&#39;

const Button = withRouter(({ history }) =&amp;gt; (
  &amp;lt;button
    type=&#39;button&#39;
    onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}
  &amp;gt;
    {&#39;Click Me!&#39;}
  &amp;lt;/button&amp;gt;
))
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component and render props pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component passes the same props as &lt;code&gt;withRouter()&lt;/code&gt;, so you will be able to access the history methods through the history prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { Route } from &#39;react-router-dom&#39;

const Button = () =&amp;gt; (
  &amp;lt;Route render={({ history }) =&amp;gt; (
    &amp;lt;button
      type=&#39;button&#39;
      onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}
    &amp;gt;
      {&#39;Click Me!&#39;}
    &amp;lt;/button&amp;gt;
  )} /&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using context:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This option is not recommended and treated as unstable API.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const Button = (props, context) =&amp;gt; (
  &amp;lt;button
    type=&#39;button&#39;
    onClick={() =&amp;gt; {
      context.history.push(&#39;/new-location&#39;)
    }}
  &amp;gt;
    {&#39;Click Me!&#39;}
  &amp;lt;/button&amp;gt;
)

Button.contextTypes = {
  history: React.PropTypes.shape({
    push: React.PropTypes.func.isRequired
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;134&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to get query parameters in React Router v4?&lt;/h3&gt; &lt;p&gt;The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const queryString = require(&#39;query-string&#39;);
const parsed = queryString.parse(props.location.search);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use &lt;code&gt;URLSearchParams&lt;/code&gt; if you want something native:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const params = new URLSearchParams(props.location.search)
const foo = params.get(&#39;name&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should use a &lt;em&gt;polyfill&lt;/em&gt; for IE11.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;135&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why you get &quot;Router may have only one child element&quot; warning?&lt;/h3&gt; &lt;p&gt;You have to wrap your Route&#39;s in a &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block because &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; is unique in that it renders a route exclusively.&lt;/p&gt; &lt;p&gt;At first you need to add &lt;code&gt;Switch&lt;/code&gt; to your imports:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Switch, Router, Route } from &#39;react-router&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then define the routes within &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Router&amp;gt;
  &amp;lt;Switch&amp;gt;
    &amp;lt;Route {/* ... */} /&amp;gt;
    &amp;lt;Route {/* ... */} /&amp;gt;
  &amp;lt;/Switch&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;136&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass params to &lt;code&gt;history.push&lt;/code&gt; method in React Router v4?&lt;/h3&gt; &lt;p&gt;While navigating you can pass props to the &lt;code&gt;history&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.props.history.push({
  pathname: &#39;/template&#39;,
  search: &#39;?name=sudheer&#39;,
  state: { detail: response.data }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;search&lt;/code&gt; property is used to pass query params in &lt;code&gt;push()&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;137&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to implement &lt;em&gt;default&lt;/em&gt; or &lt;em&gt;NotFound&lt;/em&gt; page?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; renders the first child &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; that matches. A &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; with no path always matches. So you just need to simply drop path attribute as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Switch&amp;gt;
  &amp;lt;Route exact path=&quot;/&quot; component={Home}/&amp;gt;
  &amp;lt;Route path=&quot;/user&quot; component={User}/&amp;gt;
  &amp;lt;Route component={NotFound} /&amp;gt;
&amp;lt;/Switch&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;138&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to get history on React Router v4?&lt;/h3&gt; &lt;p&gt;Below are the list of steps to get history object on React Router v4,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create a module that exports a &lt;code&gt;history&lt;/code&gt; object and import this module across the project.&lt;/p&gt; &lt;p&gt;For example, create &lt;code&gt;history.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createBrowserHistory } from &#39;history&#39;

export default createBrowserHistory({
  /* pass a configuration object here if needed */
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You should use the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; component instead of built-in routers. Imported the above &lt;code&gt;history.js&lt;/code&gt; inside &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { Router } from &#39;react-router-dom&#39;
import history from &#39;./history&#39;
import App from &#39;./App&#39;

ReactDOM.render((
  &amp;lt;Router history={history}&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/Router&amp;gt;
), holder)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;You can also use push method of &lt;code&gt;history&lt;/code&gt; object similar to built-in history object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// some-other-file.js
import history from &#39;./history&#39;

history.push(&#39;/go-here&#39;)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;139&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to perform automatic redirect after login?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-router&lt;/code&gt; package provides &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; component in React Router. Rendering a &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;
import { Redirect } from &#39;react-router&#39;

export default class LoginComponent extends Component {
  render() {
    if (this.state.isLoggedIn === true) {
      return &amp;lt;Redirect to=&quot;/your/redirect/page&quot; /&amp;gt;
    } else {
      return &amp;lt;div&amp;gt;{&#39;Login Please&#39;}&amp;lt;/div&amp;gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Internationalization&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;140&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;React Intl&lt;/em&gt; library makes internalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of &lt;em&gt;FormatJS&lt;/em&gt; which provides bindings to React via its components and API.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;141&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of React Intl?&lt;/h3&gt; &lt;p&gt;Below are the main features of React Intl,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Display numbers with separators.&lt;/li&gt; 
   &lt;li&gt;Display dates and times correctly.&lt;/li&gt; 
   &lt;li&gt;Display dates relative to &quot;now&quot;.&lt;/li&gt; 
   &lt;li&gt;Pluralize labels in strings.&lt;/li&gt; 
   &lt;li&gt;Support for 150+ languages.&lt;/li&gt; 
   &lt;li&gt;Runs in the browser and Node.&lt;/li&gt; 
   &lt;li&gt;Built on standards.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;142&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the two ways of formatting in React Intl?&lt;/h3&gt; &lt;p&gt;The library provides two ways to format strings, numbers, and dates:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using react components:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;FormattedMessage
  id={&#39;account&#39;}
  defaultMessage={&#39;The amount is less than minimum balance.&#39;}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using an API:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const messages = defineMessages({
  accountMessage: {
    id: &#39;account&#39;,
    defaultMessage: &#39;The amount is less than minimum balance.&#39;,
  }
})

formatMessage(messages.accountMessage)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;143&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;&amp;lt;FormattedMessage&amp;gt;&lt;/code&gt; as placeholder using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Formatted... /&amp;gt;&lt;/code&gt; components from &lt;code&gt;react-intl&lt;/code&gt; return elements, not plain text, so they can&#39;t be used for placeholders, alt text, etc. In that case, you should use lower level API &lt;code&gt;formatMessage()&lt;/code&gt;. You can inject the &lt;code&gt;intl&lt;/code&gt; object into your component using &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component and then format the message using &lt;code&gt;formatMessage()&lt;/code&gt; available on that object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import { injectIntl, intlShape } from &#39;react-intl&#39;

const MyComponent = ({ intl }) =&amp;gt; {
  const placeholder = intl.formatMessage({id: &#39;messageId&#39;})
  return &amp;lt;input placeholder={placeholder} /&amp;gt;
}

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;144&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to access current locale with React Intl?&lt;/h3&gt; &lt;p&gt;You can get the current locale in any component of your application using &lt;code&gt;injectIntl()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;

const MyComponent = ({ intl }) =&amp;gt; (
  &amp;lt;div&amp;gt;{`The current locale is ${intl.locale}`}&amp;lt;/div&amp;gt;
)

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;145&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to format date using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component will give you access to the &lt;code&gt;formatDate()&lt;/code&gt; method via the props in your component. The method is used internally by instances of &lt;code&gt;FormattedDate&lt;/code&gt; and it returns the string representation of the formatted date.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;

const stringDate = this.props.intl.formatDate(date, {
  year: &#39;numeric&#39;,
  month: &#39;numeric&#39;,
  day: &#39;numeric&#39;
})

const MyComponent = ({intl}) =&amp;gt; (
  &amp;lt;div&amp;gt;{`The formatted date is ${stringDate}`}&amp;lt;/div&amp;gt;
)

MyComponent.propTypes = {
  intl: intlShape.isRequired
}

export default injectIntl(MyComponent)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Testing&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;146&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Shallow Renderer in React testing?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Shallow rendering&lt;/em&gt; is useful for writing unit test cases in React. It lets you render a component &lt;em&gt;one level deep&lt;/em&gt; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.&lt;/p&gt; &lt;p&gt;For example, if you have the following component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;
      &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then you can assert as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ShallowRenderer from &#39;react-test-renderer/shallow&#39;

// in your test
const renderer = new ShallowRenderer()
renderer.render(&amp;lt;MyComponent /&amp;gt;)

const result = renderer.getRenderOutput()

expect(result.type).toBe(&#39;div&#39;)
expect(result.props.children).toEqual([
  &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;,
  &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;
])
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;147&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is &lt;code&gt;TestRenderer&lt;/code&gt; package in React?&lt;/h3&gt; &lt;p&gt;This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or &lt;code&gt;jsdom&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import TestRenderer from &#39;react-test-renderer&#39;

const Link = ({page, children}) =&amp;gt; &amp;lt;a href={page}&amp;gt;{children}&amp;lt;/a&amp;gt;

const testRenderer = TestRenderer.create(
  &amp;lt;Link page={&#39;https://www.facebook.com/&#39;}&amp;gt;{&#39;Facebook&#39;}&amp;lt;/Link&amp;gt;
)

console.log(testRenderer.toJSON())
// {
//   type: &#39;a&#39;,
//   props: { href: &#39;https://www.facebook.com/&#39; },
//   children: [ &#39;Facebook&#39; ]
// }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;148&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of ReactTestUtils package?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;ReactTestUtils&lt;/em&gt; are provided in the &lt;code&gt;with-addons&lt;/code&gt; package and allow you to perform actions against a simulated DOM for the purpose of unit testing.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;149&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Jest?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Jest&lt;/em&gt; is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a &lt;code&gt;jsdom&lt;/code&gt; environment. It&#39;s often used for testing components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;150&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of Jest over Jasmine?&lt;/h3&gt; &lt;p&gt;There are couple of advantages compared to Jasmine:&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Automatically finds tests to execute in your source code.&lt;/li&gt; 
   &lt;li&gt;Automatically mocks dependencies when running your tests.&lt;/li&gt; 
   &lt;li&gt;Allows you to test asynchronous code synchronously.&lt;/li&gt; 
   &lt;li&gt;Runs your tests with a fake DOM implementation (via &lt;code&gt;jsdom&lt;/code&gt;) so that your tests can be run on the command line.&lt;/li&gt; 
   &lt;li&gt;Runs tests in parallel processes so that they finish sooner.&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;151&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give a simple example of Jest test case&lt;/h3&gt; &lt;p&gt;Let&#39;s write a test for a function that adds two numbers in &lt;code&gt;sum.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const sum = (a, b) =&amp;gt; a + b

export default sum
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a file named &lt;code&gt;sum.test.js&lt;/code&gt; which contains actual test:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import sum from &#39;./sum&#39;

test(&#39;adds 1 + 2 to equal 3&#39;, () =&amp;gt; {
  expect(sum(1, 2)).toBe(3)
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then add the following section to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;jest&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, run &lt;code&gt;yarn test&lt;/code&gt; or &lt;code&gt;npm test&lt;/code&gt; and Jest will print a result:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ yarn test
PASS ./sum.test.js
â adds 1 + 2 to equal 3 (2ms)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React Redux&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;152&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is flux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flux&lt;/em&gt; is an &lt;em&gt;application design paradigm&lt;/em&gt; used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React.&lt;/p&gt; &lt;p&gt;The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/flux.png&quot; alt=&quot;flux&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;153&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux&lt;/em&gt; is a predictable state container for JavaScript apps based on the &lt;em&gt;Flux design pattern&lt;/em&gt;. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;154&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the core principles of Redux?&lt;/h3&gt; &lt;p&gt;Redux follows three fundamental principles:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Single source of truth:&lt;/strong&gt; The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;State is read-only:&lt;/strong&gt; The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Changes are made with pure functions:&lt;/strong&gt; To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;155&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the downsides of Redux compared to Flux?&lt;/h3&gt; &lt;p&gt;Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;You will need to learn to avoid mutations:&lt;/strong&gt; Flux is un-opinionated about mutating data, but Redux doesn&#39;t like mutations and many packages complementary to Redux assume you never mutate the state. You can enforce this with dev-only packages like &lt;code&gt;redux-immutable-state-invariant&lt;/code&gt;, Immutable.js, or instructing your team to write non-mutating code.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;You&#39;re going to have to carefully pick your packages:&lt;/strong&gt; While Flux explicitly doesn&#39;t try to solve problems such as undo/redo, persistence, or forms, Redux has extension points such as middleware and store enhancers, and it has spawned a rich ecosystem.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;There is no nice Flow integration yet:&lt;/strong&gt; Flux currently lets you do very impressive static type checks which Redux doesn&#39;t support yet.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;156&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;mapStateToProps()&lt;/code&gt; is a utility which helps your component get updated state (which is updated by some other components):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapStateToProps = (state) =&amp;gt; {
  return {
    todos: getVisibleTodos(state.todos, state.visibilityFilter)
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;mapDispatchToProps()&lt;/code&gt; is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; {
  return {
    onTodoClick: (id) =&amp;gt; {
      dispatch(toggleTodo(id))
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Recommend always using the âobject shorthandâ form for the &lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Redux wrap it in another function that looks like (â¦args) =&amp;gt; dispatch(onTodoClick(â¦args)), and pass that wrapper function as a prop to your component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; const mapDispatchToProps = ({
   onTodoClick
 })
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;157&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I dispatch an action in reducer?&lt;/h3&gt; &lt;p&gt;Dispatching an action within a reducer is an &lt;strong&gt;anti-pattern&lt;/strong&gt;. Your reducer should be &lt;em&gt;without side effects&lt;/em&gt;, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;158&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to access Redux store outside a component?&lt;/h3&gt; &lt;p&gt;You just need to export the store from the module where it created with &lt;code&gt;createStore()&lt;/code&gt;. Also, it shouldn&#39;t pollute the global window object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;store = createStore(myReducer)

export default store
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;159&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the drawbacks of MVW pattern?&lt;/h3&gt; 
  &lt;ol&gt; 
   &lt;li&gt;DOM manipulation is very expensive which causes applications to behave slow and inefficient.&lt;/li&gt; 
   &lt;li&gt;Due to circular dependencies, a complicated model was created around models and views.&lt;/li&gt; 
   &lt;li&gt;Lot of data changes happens for collaborative applications(like Google Docs).&lt;/li&gt; 
   &lt;li&gt;No way to do undo (travel back in time) easily without adding so much extra code.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;160&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Are there any similarities between Redux and RxJS?&lt;/h3&gt; &lt;p&gt;These libraries are very different for very different purposes, but there are some vague similarities.&lt;/p&gt; &lt;p&gt;Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;161&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to dispatch an action on load?&lt;/h3&gt; &lt;p&gt;You can dispatch an action in &lt;code&gt;componentDidMount()&lt;/code&gt; method and in &lt;code&gt;render()&lt;/code&gt; method you can verify the data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends Component {
  componentDidMount() {
    this.props.fetchData()
  }

  render() {
    return this.props.isLoaded
      ? &amp;lt;div&amp;gt;{&#39;Loaded&#39;}&amp;lt;/div&amp;gt;
      : &amp;lt;div&amp;gt;{&#39;Not Loaded&#39;}&amp;lt;/div&amp;gt;
  }
}

const mapStateToProps = (state) =&amp;gt; ({
  isLoaded: state.isLoaded
})

const mapDispatchToProps = { fetchData }

export default connect(mapStateToProps, mapDispatchToProps)(App)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;162&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;connect()&lt;/code&gt; from React Redux?&lt;/h3&gt; &lt;p&gt;You need to follow two steps to use your store in your container:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use &lt;code&gt;mapStateToProps()&lt;/code&gt;:&lt;/strong&gt; It maps the state variables from your store to the props that you specify.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect the above props to your container:&lt;/strong&gt; The object returned by the &lt;code&gt;mapStateToProps&lt;/code&gt; function is connected to the container. You can import &lt;code&gt;connect()&lt;/code&gt; from &lt;code&gt;react-redux&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import React from &#39;react&#39;
import { connect } from &#39;react-redux&#39;

class App extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;{this.props.containerData}&amp;lt;/div&amp;gt;
  }
}

function mapStateToProps(state) {
  return { containerData: state.data }
}

export default connect(mapStateToProps)(App)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;163&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to reset state in Redux?&lt;/h3&gt; &lt;p&gt;You need to write a &lt;em&gt;root reducer&lt;/em&gt; in your application which delegate handling the action to the reducer generated by &lt;code&gt;combineReducers()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take &lt;code&gt;rootReducer()&lt;/code&gt; to return the initial state after &lt;code&gt;USER_LOGOUT&lt;/code&gt; action. As we know, reducers are supposed to return the initial state when they are called with &lt;code&gt;undefined&lt;/code&gt; as the first argument, no matter the action.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const appReducer = combineReducers({
  /* your app&#39;s top-level reducers */
})

const rootReducer = (state, action) =&amp;gt; {
  if (action.type === &#39;USER_LOGOUT&#39;) {
    state = undefined
  }

  return appReducer(state, action)
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case of using &lt;code&gt;redux-persist&lt;/code&gt;, you may also need to clean your storage. &lt;code&gt;redux-persist&lt;/code&gt; keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const appReducer = combineReducers({
  /* your app&#39;s top-level reducers */
})

const rootReducer = (state, action) =&amp;gt; {
  if (action.type === &#39;USER_LOGOUT&#39;) {
    Object.keys(state).forEach(key =&amp;gt; {
      storage.removeItem(`persist:${key}`)
    })

    state = undefined
  }

  return appReducer(state, action)
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;164&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Whats the purpose of &lt;code&gt;at&lt;/code&gt; symbol in the Redux connect decorator?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;@&lt;/strong&gt; symbol is in fact a JavaScript expression used to signify decorators. &lt;em&gt;Decorators&lt;/em&gt; make it possible to annotate and modify classes and properties at design time.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example setting up Redux without and with a decorator.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Without decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import * as actionCreators from &#39;./actionCreators&#39;
import { bindActionCreators } from &#39;redux&#39;
import { connect } from &#39;react-redux&#39;

function mapStateToProps(state) {
  return { todos: state.todos }
}

function mapDispatchToProps(dispatch) {
  return { actions: bindActionCreators(actionCreators, dispatch) }
}

class MyApp extends React.Component {
  // ...define your main app here
}

export default connect(mapStateToProps, mapDispatchToProps)(MyApp)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;With decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import * as actionCreators from &#39;./actionCreators&#39;
import { bindActionCreators } from &#39;redux&#39;
import { connect } from &#39;react-redux&#39;

function mapStateToProps(state) {
  return { todos: state.todos }
}

function mapDispatchToProps(dispatch) {
  return { actions: bindActionCreators(actionCreators, dispatch) }
}

@connect(mapStateToProps, mapDispatchToProps)
export default class MyApp extends React.Component {
  // ...define your main app here
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;The above examples are almost similar except the usage of decorator. The decorator syntax isn&#39;t built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;165&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React context and React Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;strong&gt;Context&lt;/strong&gt; in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.&lt;/p&gt; &lt;p&gt;Whereas &lt;strong&gt;Redux&lt;/strong&gt; is much more powerful and provides a large number of features that the Context API doesn&#39;t provide. Also, React Redux uses context internally but it doesn&#39;t expose this fact in the public API.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;166&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are Redux state functions called reducers?&lt;/h3&gt; &lt;p&gt;Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could &lt;em&gt;reduce&lt;/em&gt; a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;167&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to make AJAX request in Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;redux-thunk&lt;/code&gt; middleware which allows you to define async actions.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of fetching specific account as an AJAX call using &lt;em&gt;fetch API&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export function fetchAccount(id) {
  return dispatch =&amp;gt; {
    dispatch(setLoadingAccountState()) // Show a loading spinner
    fetch(`/account/${id}`, (response) =&amp;gt; {
      dispatch(doneFetchingAccount()) // Hide loading spinner
      if (response.status === 200) {
        dispatch(setAccount(response.json)) // Use a normal function to set the received state
      } else {
        dispatch(someError)
      }
    })
  }
}

function setAccount(data) {
 return { type: &#39;SET_Account&#39;, data: data }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;168&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Should I keep all component&#39;s state in Redux store?&lt;/h3&gt; &lt;p&gt;Keep your data in the Redux store, and the UI related state internally in the component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;169&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the proper way to access Redux store?&lt;/h3&gt; &lt;p&gt;The best way to access your store in a component is to use the &lt;code&gt;connect()&lt;/code&gt; function, that creates a new component that wraps around your existing one. This pattern is called &lt;em&gt;Higher-Order Components&lt;/em&gt;, and is generally the preferred way of extending a component&#39;s functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of &lt;code&gt;&amp;lt;FilterLink&amp;gt;&lt;/code&gt; component using connect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { connect } from &#39;react-redux&#39;
import { setVisibilityFilter } from &#39;../actions&#39;
import Link from &#39;../components/Link&#39;

const mapStateToProps = (state, ownProps) =&amp;gt; ({
  active: ownProps.filter === state.visibilityFilter
})

const mapDispatchToProps = (dispatch, ownProps) =&amp;gt; ({
  onClick: () =&amp;gt; dispatch(setVisibilityFilter(ownProps.filter))
})

const FilterLink = connect(
  mapStateToProps,
  mapDispatchToProps
)(Link)

export default FilterLink
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using &lt;code&gt;connect()&lt;/code&gt; over accessing the store directly (using context API).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent {
  someMethod() {
    doSomethingWith(this.context.store)
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;170&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between component and container in React Redux?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Component&lt;/strong&gt; is a class or function component that describes the presentational part of your application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is an informal term for a component that is connected to a Redux store. Containers &lt;em&gt;subscribe&lt;/em&gt; to Redux state updates and &lt;em&gt;dispatch&lt;/em&gt; actions, and they usually don&#39;t render DOM elements; they delegate rendering to presentational child components.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;171&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of the constants in Redux?&lt;/h3&gt; &lt;p&gt;Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos â in which case, you will get a &lt;code&gt;ReferenceError&lt;/code&gt; immediately.&lt;/p&gt; &lt;p&gt;Normally we will save them in a single file (&lt;code&gt;constants.js&lt;/code&gt; or &lt;code&gt;actionTypes.js&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export const ADD_TODO = &#39;ADD_TODO&#39;
export const DELETE_TODO = &#39;DELETE_TODO&#39;
export const EDIT_TODO = &#39;EDIT_TODO&#39;
export const COMPLETE_TODO = &#39;COMPLETE_TODO&#39;
export const COMPLETE_ALL = &#39;COMPLETE_ALL&#39;
export const CLEAR_COMPLETED = &#39;CLEAR_COMPLETED&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In Redux, you use them in two places:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;During action creation:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let&#39;s take &lt;code&gt;actions.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;;

export function addTodo(text) {
  return { type: ADD_TODO, text }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;In reducers:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let&#39;s create &lt;code&gt;reducer.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;

export default (state = [], action) =&amp;gt; {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ];
    default:
      return state
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;172&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to write &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are a few ways of binding &lt;em&gt;action creators&lt;/em&gt; to &lt;code&gt;dispatch()&lt;/code&gt; in &lt;code&gt;mapDispatchToProps()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
 action: () =&amp;gt; dispatch(action())
})
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({
 action: bindActionCreators(action, dispatch)
})
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mapDispatchToProps = { action }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The third option is just a shorthand for the first one.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;173&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the use of the &lt;code&gt;ownProps&lt;/code&gt; parameter in &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;If the &lt;code&gt;ownProps&lt;/code&gt; parameter is specified, React Redux will pass the props that were passed to the component into your &lt;em&gt;connect&lt;/em&gt; functions. So, if you use a connected component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import ConnectedComponent from &#39;./containers/ConnectedComponent&#39;;

&amp;lt;ConnectedComponent user={&#39;john&#39;} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;ownProps&lt;/code&gt; inside your &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt; functions will be an object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{ user: &#39;john&#39; }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use this object to decide what to return from those functions.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;174&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to structure Redux top level directories?&lt;/h3&gt; &lt;p&gt;Most of the applications has several top-level directories as below:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: Used for &lt;em&gt;dumb&lt;/em&gt; components unaware of Redux.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Used for &lt;em&gt;smart&lt;/em&gt; components connected to Redux.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;: Used for all action creators, where file names correspond to part of the app.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Reducers&lt;/strong&gt;: Used for all reducers, where files name correspond to state key.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: Used for store initialization.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;This structure works well for small and medium size apps.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;175&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;redux-saga&lt;/code&gt; is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.&lt;/p&gt; &lt;p&gt;It is available in NPM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install --save redux-saga
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;176&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the mental model of redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Saga&lt;/em&gt; is like a separate thread in your application, that&#39;s solely responsible for side effects. &lt;code&gt;redux-saga&lt;/code&gt; is a redux &lt;em&gt;middleware&lt;/em&gt;, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;177&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; in redux-saga?&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; are effect creator functions. &lt;code&gt;call()&lt;/code&gt; function is used to create effect description, which instructs middleware to call the promise. &lt;code&gt;put()&lt;/code&gt; function creates an effect, which instructs middleware to dispatch an action to the store.&lt;/p&gt; &lt;p&gt;Let&#39;s take example of how these effects work for fetching particular user data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* fetchUserSaga(action) {
  // `call` function accepts rest arguments, which will be passed to `api.fetchUser` function.
  // Instructing middleware to call promise, it resolved value will be assigned to `userData` variable
  const userData = yield call(api.fetchUser, action.userId)

  // Instructing middleware to dispatch corresponding action.
  yield put({
    type: &#39;FETCH_USER_SUCCESS&#39;,
    userData
  })
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;178&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux Thunk?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Thunk&lt;/em&gt; middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;getState()&lt;/code&gt; as parameters.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;179&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;redux-saga&lt;/code&gt; and &lt;code&gt;redux-thunk&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;Redux Thunk&lt;/em&gt; and &lt;em&gt;Redux Saga&lt;/em&gt; take care of dealing with side effects. In most of the scenarios, Thunk uses &lt;em&gt;Promises&lt;/em&gt; to deal with them, whereas Saga uses &lt;em&gt;Generators&lt;/em&gt;. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;180&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux DevTools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux DevTools&lt;/em&gt; is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don&#39;t want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;181&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the features of Redux DevTools?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux DevTools are below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Lets you inspect every state and action payload.&lt;/li&gt; 
   &lt;li&gt;Lets you go back in time by &lt;em&gt;cancelling&lt;/em&gt; actions.&lt;/li&gt; 
   &lt;li&gt;If you change the reducer code, each &lt;em&gt;staged&lt;/em&gt; action will be re-evaluated.&lt;/li&gt; 
   &lt;li&gt;If the reducers throw, you will see during which action this happened, and what the error was.&lt;/li&gt; 
   &lt;li&gt;With &lt;code&gt;persistState()&lt;/code&gt; store enhancer, you can persist debug sessions across page reloads.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;182&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Redux selectors and why to use them?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Selectors&lt;/em&gt; are functions that take Redux state as an argument and return some data to pass to the component.&lt;/p&gt; &lt;p&gt;For example, to get user details from the state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const getUserData = state =&amp;gt; state.user.data
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These selectors have two main benefits,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The selector can compute derived data, allowing Redux to store the minimal possible state&lt;/li&gt; 
   &lt;li&gt;The selector is not recomputed unless one of its arguments changes&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;183&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Redux Form?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Form&lt;/em&gt; works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;184&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of Redux Form?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux Form are:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Field values persistence via Redux store.&lt;/li&gt; 
   &lt;li&gt;Validation (sync/async) and submission.&lt;/li&gt; 
   &lt;li&gt;Formatting, parsing and normalization of field values.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;185&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add multiple middlewares to Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;applyMiddleware()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, you can add &lt;code&gt;redux-thunk&lt;/code&gt; and &lt;code&gt;logger&lt;/code&gt; passing them as arguments to &lt;code&gt;applyMiddleware()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;
const createStoreWithMiddleware = applyMiddleware(ReduxThunk, logger)(createStore)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;186&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to set initial state in Redux?&lt;/h3&gt; &lt;p&gt;You need to pass initial state as second argument to createStore:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const rootReducer = combineReducers({
  todos: todos,
  visibilityFilter: visibilityFilter
})

const initialState = {
  todos: [{ id: 123, name: &#39;example&#39;, completed: false }]
}

const store = createStore(
  rootReducer,
  initialState
)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;187&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Relay is different from Redux?&lt;/h3&gt; &lt;p&gt;Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via &lt;em&gt;GraphQL&lt;/em&gt; queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is an action in Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Actions&lt;/em&gt; are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.&lt;/p&gt; &lt;p&gt;For example, let&#39;s take an action which represents adding a new todo item:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{
  type: ADD_TODO,
  text: &#39;Add todo item&#39;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;h2&gt;React Native&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;188&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React Native and React?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;React Native&lt;/strong&gt; is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;189&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to test React Native apps?&lt;/h3&gt; &lt;p&gt;React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (&lt;a href=&quot;https://expo.io&quot;&gt;https://expo.io&lt;/a&gt;) Where it syncs using QR code, your mobile and computer should be in same wireless network.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;190&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to do logging in React Native?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, etc. As of React Native v0.29 you can simply run the following to see logs in the console:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ react-native log-ios
$ react-native log-android
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;191&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to debug your React Native?&lt;/h3&gt; &lt;p&gt;Follow the below steps to debug React Native app:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Run your application in the iOS simulator.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;Command + D&lt;/code&gt; and a webpage should open up at &lt;code&gt;http://localhost:8081/debugger-ui&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;Enable &lt;em&gt;Pause On Caught Exceptions&lt;/em&gt; for a better debugging experience.&lt;/li&gt; 
   &lt;li&gt;Press &lt;code&gt;Command + Option + I&lt;/code&gt; to open the Chrome Developer tools, or open it via &lt;code&gt;View&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer Tools&lt;/code&gt;.&lt;/li&gt; 
   &lt;li&gt;You should now be able to debug as you normally would.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;React supported libraries &amp;amp; Integration&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;192&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is reselect and how it works?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Reselect&lt;/em&gt; is a &lt;strong&gt;selector library&lt;/strong&gt; (for Redux) which uses &lt;em&gt;memoization&lt;/em&gt; concept. It was originally written to compute derived data from Redux-like applications state, but it can&#39;t be tied to any architecture or library.&lt;/p&gt; &lt;p&gt;Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It&#39;s memoization and cache are fully customizable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;193&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Flow?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flow&lt;/em&gt; is a &lt;em&gt;static type checker&lt;/em&gt; designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving &lt;code&gt;null&lt;/code&gt;, unlike most type systems.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;194&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Flow and PropTypes?&lt;/h3&gt; &lt;p&gt;Flow is a &lt;em&gt;static analysis tool&lt;/em&gt; (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.&lt;/p&gt; &lt;p&gt;PropTypes is a &lt;em&gt;basic type checker&lt;/em&gt; (runtime checker) which has been patched onto React. It can&#39;t check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;195&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use Font Awesome icons in React?&lt;/h3&gt; &lt;p&gt;The below steps followed to include Font Awesome in React:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Install &lt;code&gt;font-awesome&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;$ npm install --save font-awesome
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Import &lt;code&gt;font-awesome&lt;/code&gt; in your &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &#39;font-awesome/css/font-awesome.min.css&#39;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Add Font Awesome classes in &lt;code&gt;className&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  return &amp;lt;div&amp;gt;&amp;lt;i className={&#39;fa fa-spinner&#39;} /&amp;gt;&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;196&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React Dev Tools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Developer Tools&lt;/em&gt; let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).&lt;/p&gt; &lt;p&gt;The official extensions available for different browsers or environments.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Chrome extension&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Firefox extension&lt;/strong&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Standalone app&lt;/strong&gt; (Safari, React Native, etc)&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;197&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why is DevTools not loading in Chrome for local files?&lt;/h3&gt; &lt;p&gt;If you opened a local HTML file in your browser (&lt;code&gt;file://...&lt;/code&gt;) then you must first open &lt;em&gt;Chrome Extensions&lt;/em&gt; and check &lt;code&gt;Allow access to file URLs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;198&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use Polymer in React?&lt;/h3&gt; &lt;p&gt;You need to follow below steps to use Polymer in React,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Create a Polymer element:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;../../bower_components/polymer/polymer.html&#39; /&amp;gt;
Polymer({
  is: &#39;calender-element&#39;,
  ready: function() {
    this.textContent = &#39;I am a calender&#39;
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Create the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the &lt;code&gt;index.html&lt;/code&gt; of your React application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;./src/polymer-components/calender-element.html&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Use that element in the JSX file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;

class MyComponent extends React.Component {
  render() {
    return (
      &amp;lt;calender-element /&amp;gt;
    )
  }
}

export default MyComponent
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;199&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of React over Vue.js?&lt;/h3&gt; &lt;p&gt;React has the following advantages over Vue.js:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Gives more flexibility in large apps developing.&lt;/li&gt; 
   &lt;li&gt;Easier to test.&lt;/li&gt; 
   &lt;li&gt;Suitable for mobile apps creating.&lt;/li&gt; 
   &lt;li&gt;More information and solutions available.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;200&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between React and Angular?&lt;/h3&gt; &lt;p&gt;Let&#39;s see the difference between React and Angular in a table format.&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;React&lt;/th&gt; 
     &lt;th&gt;Angular&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React is a library and has only the View layer&lt;/td&gt; 
     &lt;td&gt;Angular is a framework and has complete MVC functionality&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React handles rendering on the server side&lt;/td&gt; 
     &lt;td&gt;AngularJS renders only on the client side but Angular 2 and above renders on the server side&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React uses JSX that looks like HTML in JS which can be confusing&lt;/td&gt; 
     &lt;td&gt;Angular follows the template approach for HTML, which makes code shorter and easy to understand&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React Native, which is a React type to build mobile applications are faster and more stable&lt;/td&gt; 
     &lt;td&gt;Ionic, Angular&#39;s mobile native app is relatively less stable and slower&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;In React, data flows only in one way and hence debugging is easy&lt;/td&gt; 
     &lt;td&gt;In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;201&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why React tab is not showing up in DevTools?&lt;/h3&gt; &lt;p&gt;When the page loads, &lt;em&gt;React DevTools&lt;/em&gt; sets a global named &lt;code&gt;__REACT_DEVTOOLS_GLOBAL_HOOK__&lt;/code&gt;, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won&#39;t show up the tab.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;202&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Styled Components?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt; is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;203&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example of Styled Components?&lt;/h3&gt; &lt;p&gt;Lets create &lt;code&gt;&amp;lt;Title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Wrapper&amp;gt;&lt;/code&gt; components with specific styles for each.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React from &#39;react&#39;
import styled from &#39;styled-components&#39;

// Create a &amp;lt;Title&amp;gt; component that renders an &amp;lt;h1&amp;gt; which is centered, red and sized at 1.5em
const Title = styled.h1`
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
`

// Create a &amp;lt;Wrapper&amp;gt; component that renders a &amp;lt;section&amp;gt; with some padding and a papayawhip background
const Wrapper = styled.section`
  padding: 4em;
  background: papayawhip;
`
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These two variables, &lt;code&gt;Title&lt;/code&gt; and &lt;code&gt;Wrapper&lt;/code&gt;, are now components that you can render just like any other react component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;&amp;lt;Wrapper&amp;gt;
  &amp;lt;Title&amp;gt;{&#39;Lets start first styled component!&#39;}&amp;lt;/Title&amp;gt;
&amp;lt;/Wrapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;204&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Relay?&lt;/h3&gt; &lt;p&gt;Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;205&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use TypeScript in &lt;code&gt;create-react-app&lt;/code&gt; application?&lt;/h3&gt; &lt;p&gt;Starting from react-scripts@2.1.0 or higher, there is a built-in support for typescript. i.e, &lt;code&gt;create-react-app&lt;/code&gt; now supports typescript natively. You can just pass &lt;code&gt;--typescript&lt;/code&gt; option as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx create-react-app my-app --typescript

# or

yarn create react-app my-app --typescript
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But for lower versions of react scripts, just supply &lt;code&gt;--scripts-version&lt;/code&gt; option as &lt;code&gt;react-scripts-ts&lt;/code&gt; while you create a new project. &lt;code&gt;react-scripts-ts&lt;/code&gt; is a set of adjustments to take the standard &lt;code&gt;create-react-app&lt;/code&gt; project pipeline and bring TypeScript into the mix.&lt;/p&gt; &lt;p&gt;Now the project layout should look like the following:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;my-app/
ââ .gitignore
ââ images.d.ts
ââ node_modules/
ââ public/
ââ src/
â  ââ ...
ââ package.json
ââ tsconfig.json
ââ tsconfig.prod.json
ââ tsconfig.test.json
ââ tslint.json
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Miscellaneous&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;206&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the main features of Reselect library?&lt;/h3&gt; &lt;p&gt;Let&#39;s see the main features of Reselect library,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Selectors can compute derived data, allowing Redux to store the minimal possible state.&lt;/li&gt; 
   &lt;li&gt;Selectors are efficient. A selector is not recomputed unless one of its arguments changes.&lt;/li&gt; 
   &lt;li&gt;Selectors are composable. They can be used as input to other selectors.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h4&gt;Give an example of Reselect usage?&lt;/h4&gt; &lt;p&gt;Let&#39;s take calculations and different amounts of a shipment order with the simplified usage of Reselect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createSelector } from &#39;reselect&#39;

const shopItemsSelector = state =&amp;gt; state.shop.items
const taxPercentSelector = state =&amp;gt; state.shop.taxPercent

const subtotalSelector = createSelector(
  shopItemsSelector,
  items =&amp;gt; items.reduce((acc, item) =&amp;gt; acc + item.value, 0)
)

const taxSelector = createSelector(
  subtotalSelector,
  taxPercentSelector,
  (subtotal, taxPercent) =&amp;gt; subtotal * (taxPercent / 100)
)

export const totalSelector = createSelector(
  subtotalSelector,
  taxSelector,
  (subtotal, tax) =&amp;gt; ({ total: subtotal + tax })
)

let exampleState = {
  shop: {
    taxPercent: 8,
    items: [
      { name: &#39;apple&#39;, value: 1.20 },
      { name: &#39;orange&#39;, value: 0.95 },
    ]
  }
}

console.log(subtotalSelector(exampleState)) // 2.15
console.log(taxSelector(exampleState))      // 0.172
console.log(totalSelector(exampleState))    // { total: 2.322 }
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;209&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Does the statics object work with ES6 classes in React?&lt;/h3&gt; &lt;p&gt;No, &lt;code&gt;statics&lt;/code&gt; only works with &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;someComponent= React.createClass({
  statics: {
    someMethod: function() {
      // ..
    }
  }
})
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can write statics inside ES6+ classes as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Component extends React.Component {
  static propTypes = {
    // ...
  }

  static someMethod() {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or writing them outside class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Component extends React.Component {
   ....
}

Component.propTypes = {...}
Component.someMethod = function(){....}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;210&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can Redux only be used with React?&lt;/h3&gt; &lt;p&gt;Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;211&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do you need to have a particular build tool to use Redux?&lt;/h3&gt; &lt;p&gt;Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;212&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How Redux Form &lt;code&gt;initialValues&lt;/code&gt; get updated from state?&lt;/h3&gt; &lt;p&gt;You need to add &lt;code&gt;enableReinitialize : true&lt;/code&gt; setting.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const InitializeFromStateForm = reduxForm({
  form: &#39;initializeFromState&#39;,
  enableReinitialize : true
})(UserEdit)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your &lt;code&gt;initialValues&lt;/code&gt; prop gets updated, your form will update too.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;213&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How React PropTypes allow different types for one prop?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;oneOfType()&lt;/code&gt; method of &lt;code&gt;PropTypes&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, the height property can be defined with either &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; type as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Component.propTypes = {
  size: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number
  ])
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;214&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I import an SVG file as react component?&lt;/h3&gt; &lt;p&gt;You can import SVG directly as component instead of loading it as a file. This feature is available with &lt;code&gt;react-scripts@2.0.0&lt;/code&gt; and higher.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { ReactComponent as Logo } from &#39;./logo.svg&#39;

const App = () =&amp;gt; (
  &amp;lt;div&amp;gt;
    {/* Logo is an actual react component */}
    &amp;lt;Logo /&amp;gt;
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don&#39;t forget about the curly braces in the import.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;215&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why are inline ref callbacks or functions not recommended?&lt;/h3&gt; &lt;p&gt;If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserForm extends Component {
  handleSubmit = () =&amp;gt; {
    console.log(&quot;Input Value is: &quot;, this.input.value)
  }


  render () {
   return (
     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
       &amp;lt;input
         type=&#39;text&#39;
         ref={(input) =&amp;gt; this.input = input} /&amp;gt; // Access DOM input in handle submit
       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;
     &amp;lt;/form&amp;gt;
   )
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class UserForm extends Component {
 handleSubmit = () =&amp;gt; {
   console.log(&quot;Input Value is: &quot;, this.input.value)
 }

 setSearchInput = (input) =&amp;gt; {
   this.input = input
 }

 render () {
   return (
     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
       &amp;lt;input
         type=&#39;text&#39;
         ref={this.setSearchInput} /&amp;gt; // Access DOM input in handle submit
       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;
     &amp;lt;/form&amp;gt;
   )
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code&gt;**Note:** In React v16.3,
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;216&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is render hijacking in react?&lt;/h3&gt; &lt;p&gt;The concept of render hijacking is the ability to control what a component will output from another component. It actually means that you decorate your component by wrapping it into a Higher-Order component. By wrapping you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enables hijacking, but by using HOC you make your component behave in different way.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;217&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are HOC factory implementations?&lt;/h3&gt; &lt;p&gt;There are two main ways of implementing HOCs in React.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Props Proxy (PP) and&lt;/li&gt; 
   &lt;li&gt;Inheritance Inversion (II).&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;But they follow different approaches for manipulating the &lt;em&gt;WrappedComponent&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Props Proxy&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name &lt;strong&gt;Props Proxy&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;
function ppHOC(WrappedComponent) {
 return class PP extends React.Component {
   render() {
     return &amp;lt;WrappedComponent {...this.props}/&amp;gt;
   }
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Inheritance Inversion&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems &lt;strong&gt;inverse&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;function iiHOC(WrappedComponent) {
 return class Enhancer extends WrappedComponent {
   render() {
     return super.render()
   }
 }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;218&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to pass numbers to React component?&lt;/h3&gt; &lt;p&gt;You should be passing the numbers via curly braces({}) where as strings in quotes&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;   React.render(&amp;lt;User age={30} department={&quot;IT&quot;} /&amp;gt;, document.getElementById(&#39;container&#39;));
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;219&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/h3&gt; &lt;p&gt;It is up to developer decision. i.e, It is developer job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as âis this dropdown currently openâ, inside a component&#39;s internal state.&lt;/p&gt; &lt;p&gt;Below are the thumb rules to determine what kind of data should be put into Redux&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Do other parts of the application care about this data?&lt;/li&gt; 
   &lt;li&gt;Do you need to be able to create further derived data based on this original data?&lt;/li&gt; 
   &lt;li&gt;Is the same data being used to drive multiple components?&lt;/li&gt; 
   &lt;li&gt;Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?&lt;/li&gt; 
   &lt;li&gt;Do you want to cache the data (i.e, use what&#39;s in state if it&#39;s already there instead of re-requesting it)?&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;220&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of registerServiceWorker in React?&lt;/h3&gt; &lt;p&gt;React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that&#39;s what you should know about service worker&#39;s for now. It&#39;s all about adding offline capabilities to your site.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;   import React from &#39;react&#39;;
   import ReactDOM from &#39;react-dom&#39;;
   import App from &#39;./App&#39;;
   import registerServiceWorker from &#39;./registerServiceWorker&#39;;

   ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;root&#39;));
   registerServiceWorker();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;221&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React memo function?&lt;/h3&gt; &lt;p&gt;Class components can be restricted from rendering when their input props are the same using &lt;strong&gt;PureComponent or shouldComponentUpdate&lt;/strong&gt;. Now you can do the same with function components by wrapping them in &lt;strong&gt;React.memo&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const MyComponent = React.memo(function MyComponent(props) {
 /* only rerenders if props change */
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;222&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is React lazy function?&lt;/h3&gt; The &lt;code&gt;React.lazy&lt;/code&gt; function lets you render an dynamic import as a regular component. It will automatically load the bundle containing the OtherComponent when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component. &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));

function MyComponent() {
 return (
   &amp;lt;div&amp;gt;
     &amp;lt;OtherComponent /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; React.lazy and Suspense is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;223&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent unnecessary updates using setState?&lt;/h3&gt; &lt;p&gt;You can compare current value of the state with an existing state value and decide whether to rerender the page or not. If the values are same then you need to return &lt;strong&gt;null&lt;/strong&gt; to stop re-rendering otherwise return the latest state value.&lt;/p&gt; &lt;p&gt;For example, the user profile information is conditionally rendered as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;getUserProfile = user =&amp;gt; {
  const latestAddress = user.address;
  this.setState(state =&amp;gt; {
    if (state.address === latestAddress) {
      return null;
    } else {
      return { title: latestAddress };
    }
  });
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;224&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;: Unlike older releases, you don&#39;t need to make sure &lt;strong&gt;render&lt;/strong&gt; method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.&lt;/p&gt; &lt;p&gt;For example, let us take the below list of developers,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const ReactJSDevs = () =&amp;gt; {
  return [
    &amp;lt;li key=&quot;1&quot;&amp;gt;John&amp;lt;/li&amp;gt;,
    &amp;lt;li key=&quot;2&quot;&amp;gt;Jackie&amp;lt;/li&amp;gt;,
    &amp;lt;li key=&quot;3&quot;&amp;gt;Jordan&amp;lt;/li&amp;gt;
  ];
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also merge this array of items in another array component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;const JSDevs = () =&amp;gt; {
  return (
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;Brad&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;Brodge&amp;lt;/li&amp;gt;
      &amp;lt;ReactJSDevs/&amp;gt;
      &amp;lt;li&amp;gt;Brandon&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Strings and Numbers:&lt;/strong&gt; You can also return string and number type from the render method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;render() {
 return &#39;Welcome to ReactJS questions&#39;;
}
// Number
render() {
 return 2018;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;225&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to use class field declarations syntax in React classes?&lt;/h3&gt; &lt;p&gt;React Class Components can be made much more concise using the class field declarations. You can initialize local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.&lt;/p&gt; &lt;p&gt;Let&#39;s take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class Counter extends Component {
  state = { value: 0 };

  handleIncrement = () =&amp;gt; {
    this.setState(prevState =&amp;gt; ({
      value: prevState.value + 1
    }));
  };

  handleDecrement = () =&amp;gt; {
    this.setState(prevState =&amp;gt; ({
      value: prevState.value - 1
    }));
  };

  render() {
    return (
      &amp;lt;div&amp;gt;
        {this.state.value}

        &amp;lt;button onClick={this.handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
        &amp;lt;button onClick={this.handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;226&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are hooks?&lt;/h3&gt; &lt;p&gt;Hooks is a new feature(React 16.8) that lets you use state and other React features without writing a class.&lt;/p&gt; &lt;p&gt;Let&#39;s see an example of useState hook example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;import { useState } from &#39;react&#39;;

function Example() {
  // Declare a new state variable, which we&#39;ll call &quot;count&quot;
  const [count, setCount] = useState(0);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;
        Click me
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;227&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the rules needs to follow for hooks?&lt;/h3&gt; &lt;p&gt;You need to follow two rules in order to use hooks,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Call Hooks only at the top level of your react functions. i.e, You shouldnât call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple useState and useEffect calls.&lt;/li&gt; 
   &lt;li&gt;Call Hooks from React Functions only. i.e, You shouldnât call Hooks from regular JavaScript functions.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;228&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to ensure hooks followed the rules in your project?&lt;/h3&gt; React team released an ESLint plugin called &lt;strong&gt;eslint-plugin-react-hooks&lt;/strong&gt; that enforces these two rules. You can add this plugin to your project using the below command, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install eslint-plugin-react-hooks@next
&lt;/code&gt;&lt;/pre&gt; And apply the below config in your ESLint config file, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Your ESLint configuration
{
  &quot;plugins&quot;: [
    // ...
    &quot;react-hooks&quot;
  ],
  &quot;rules&quot;: {
    // ...
    &quot;react-hooks/rules-of-hooks&quot;: &quot;error&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; This plugin is intended to use in Create React App by default.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;229&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Flux and Redux?&lt;/h3&gt; &lt;p&gt;Below are the major differences between Flux and Redux&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Flux&lt;/th&gt; 
     &lt;th&gt;Redux&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;State is mutable&lt;/td&gt; 
     &lt;td&gt;State is immutable&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;The Store contains both state and change logic&lt;/td&gt; 
     &lt;td&gt;The Store and change logic are separate&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;There are multiple stores exist&lt;/td&gt; 
     &lt;td&gt;There is only one store exist&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;All the stores are disconnected and flat&lt;/td&gt; 
     &lt;td&gt;Single store with hierarchical reducers&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It has a singleton dispatcher&lt;/td&gt; 
     &lt;td&gt;There is no concept of dispatcher&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;React components subscribe to the store&lt;/td&gt; 
     &lt;td&gt;Container components uses connect function&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;230&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of React Router V4?&lt;/h3&gt; &lt;p&gt;Below are the main benefits of React Router V4 module,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;In React Router v4(version 4), the API is completely about components. A router can be visualized as a single component(&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;) which wraps specific child router components(&lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt;).&lt;/li&gt; 
   &lt;li&gt;You don&#39;t need to manually set history. The router module will take care history by wrapping routes with &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; component.&lt;/li&gt; 
   &lt;li&gt;The application size is reduced by adding only the specific router module(Web, core, or native)&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;231&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;error: - The error object which was thrown&lt;/li&gt; 
   &lt;li&gt;info: - An object with a componentStack key contains the information about which component threw the error.&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The method structure would be as follows&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;componentDidCatch(error, info)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;232&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;In which scenarios error boundaries do not catch errors?&lt;/h3&gt; &lt;p&gt;Below are the cases in which error boundaries doesn&#39;t work,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Inside Event handlers&lt;/li&gt; 
   &lt;li&gt;Asynchronous code using &lt;strong&gt;setTimeout or requestAnimationFrame&lt;/strong&gt; callbacks&lt;/li&gt; 
   &lt;li&gt;During Server side rendering&lt;/li&gt; 
   &lt;li&gt;When errors thrown in the error boundary code itself&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;233&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you not need error boundaries for event handlers?&lt;/h3&gt; &lt;p&gt;Error boundaries do not catch errors inside event handlers.&lt;/p&gt; &lt;p&gt;React doesnât need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers donât happen during rendering. So if they throw, React still knows what to display on the screen.&lt;/p&gt; &lt;p&gt;If you need to catch an error inside an event handler, use the regular JavaScript try / catch statement:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    try {
      // Do something that could throw
    } catch (error) {
      this.setState({ error });
    }
  }

  render() {
    if (this.state.error) {
      return &amp;lt;h1&amp;gt;Caught an error.&amp;lt;/h1&amp;gt;
    }
    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the above example is demonstrating regular JavaScript behavior and doesnât use error boundaries.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;234&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between try catch block and error boundaries?&lt;/h3&gt; &lt;p&gt;Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.&lt;/p&gt; &lt;p&gt;For example, the try catch block used for below imperative code&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  showButton();
} catch (error) {
  // ...
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas error boundaries wrap declarative code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ErrorBoundary&amp;gt;
  &amp;lt;MyComponent /&amp;gt;
&amp;lt;/ErrorBoundary&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So if an error occurs in a &lt;strong&gt;componentDidUpdate&lt;/strong&gt; method caused by a &lt;strong&gt;setState&lt;/strong&gt; somewhere deep in the tree, it will still correctly propagate to the closest error boundary.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;235&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the behavior of uncaught errors in react 16?&lt;/h3&gt; In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;236&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the proper placement for error boundaries?&lt;/h3&gt; The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches, 
  &lt;ol&gt; 
   &lt;li&gt;You can wrap top-level route components to display a generic error message for the entire application.&lt;/li&gt; 
   &lt;li&gt;You can also wrap individual components in an error boundary to protect them from crashing the rest of the application.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;237&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of component stack trace from error boundary?&lt;/h3&gt; &lt;p&gt;Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.&lt;/p&gt; &lt;p&gt;For example, BuggyCounter component displays the component stack trace as below,&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/error_boundary.png&quot; alt=&quot;stacktrace&quot;&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;238&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the required method to be defined for a class component?&lt;/h3&gt; The &lt;code&gt;render()&lt;/code&gt; method is the only required method in a class component. i.e, All methods other than render method are optional for a class component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;239&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the possible return types of render method?&lt;/h3&gt; &lt;p&gt;Below are the list of following types used and return from render method,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;React elements:&lt;/strong&gt; Elements that instruct React to render a DOM node. It includes html elements such as &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; and user defined elements.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Arrays and fragments:&lt;/strong&gt; Return multiple elements to render as Arrays and Fragments to wrap multiple elements&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Portals:&lt;/strong&gt; Render children into a different DOM subtree.&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;String and numbers:&lt;/strong&gt; Render both Strings and Numbers as text nodes in the DOM&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Booleans or null:&lt;/strong&gt; Doesn&#39;t render anything but these types are used to conditionally render content.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;240&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the main purpose of constructor?&lt;/h3&gt; &lt;p&gt;The constructor is mainly used for two purposes,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;To initialize local state by assigning object to this.state&lt;/li&gt; 
   &lt;li&gt;For binding event handler methods to the instance For example, the below code covers both the above cases,&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;constructor(props) {
  super(props);
  // Don&#39;t call this.setState() here!
  this.state = { counter: 0 };
  this.handleClick = this.handleClick.bind(this);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;241&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it mandatory to define constructor for React component?&lt;/h3&gt; No, it is not mandatory. i.e, If you donât initialize state and you donât bind methods, you donât need to implement a constructor for your React component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;242&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are default props?&lt;/h3&gt; &lt;p&gt;The defaultProps are defined as a property on the component class to set the default props for the class. This is used for undefined props, but not for null props.&lt;/p&gt; &lt;p&gt;For example, let us create color default prop for the button component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyButton extends React.Component {
  // ...
}

MyButton.defaultProps = {
  color: &#39;red&#39;
};

&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If props.color is not provided then it will set the default value to &#39;red&#39;. i.e, Whenever you try to access the color prop it uses default value&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
   return &amp;lt;MyButton /&amp;gt; ; // props.color will be set to red
 }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you provide null value then it remains null value.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;243&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why should not call setState in componentWillUnmount?&lt;/h3&gt; You should not call &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillUnmount()&lt;/code&gt; because once a component instance is unmounted, it will never be mounted again.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;244&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of getDerivedStateFromError?&lt;/h3&gt; &lt;p&gt;This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.&lt;/p&gt; &lt;p&gt;The signature of the lifecycle method is as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;static getDerivedStateFromError(error)
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let us take error boundary use case with the above lifecycle method for demonstration purpose,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return &amp;lt;h1&amp;gt;Something went wrong.&amp;lt;/h1&amp;gt;;
    }

    return this.props.children;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;245&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the methods order when component re-rendered?&lt;/h3&gt; &lt;p&gt;An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt; 
   &lt;li&gt;shouldComponentUpdate()&lt;/li&gt; 
   &lt;li&gt;render()&lt;/li&gt; 
   &lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt; 
   &lt;li&gt;componentDidUpdate()&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;246&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the methods invoked during error handling?&lt;/h3&gt; &lt;p&gt;Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;static getDerivedStateFromError()&lt;/li&gt; 
   &lt;li&gt;componentDidCatch()&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;247&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of displayName class property?&lt;/h3&gt; &lt;p&gt;The displayName string is used in debugging messages. Usually, you donât need to set it explicitly because itâs inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.&lt;/p&gt; &lt;p&gt;For example, To ease debugging, choose a display name that communicates that itâs the result of a withSubscription HOC.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function withSubscription(WrappedComponent) {
  class WithSubscription extends React.Component {/* ... */}
  WithSubscription.displayName = `WithSubscription(${getDisplayName(WrappedComponent)})`;
  return WithSubscription;
}
function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || &#39;Component&#39;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;248&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the browser support for react applications?&lt;/h3&gt; React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use &lt;strong&gt;es5-shim and es5-sham&lt;/strong&gt; polyfill then it even support old browsers that doesn&#39;t support ES5 methods.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;249&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of unmountComponentAtNode method?&lt;/h3&gt; &lt;p&gt;This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.&lt;/p&gt; &lt;p&gt;The method signature would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ReactDOM.unmountComponentAtNode(container)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;250&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is code-splitting?&lt;/h3&gt; &lt;p&gt;Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.&lt;/p&gt; &lt;p&gt;For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the &#39;Load&#39; button. &lt;strong&gt;moduleA.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const moduleA = &#39;Hello&#39;;

export { moduleA };
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;;

class App extends Component {
  handleClick = () =&amp;gt; {
    import(&#39;./moduleA&#39;)
      .then(({ moduleA }) =&amp;gt; {
        // Use moduleA
      })
      .catch(err =&amp;gt; {
        // Handle failure
      });
  };

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;Load&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

export default App;

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;251&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the benefit of strict mode?&lt;/h3&gt; &lt;p&gt;The 
   &lt;strictmode&gt;
     will be helpful in the below cases
   &lt;/strictmode&gt;&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Identifying components with &lt;strong&gt;unsafe lifecycle methods&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Warning about &lt;strong&gt;legacy string ref&lt;/strong&gt; API usage.&lt;/li&gt; 
   &lt;li&gt;Detecting unexpected &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/li&gt; 
   &lt;li&gt;Detecting &lt;strong&gt;legacy context&lt;/strong&gt; API.&lt;/li&gt; 
   &lt;li&gt;Warning about deprecated findDOMNode usage&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;252&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are Keyed Fragments?&lt;/h3&gt; &lt;p&gt;The Fragments declared with the explicit &amp;lt;React.Fragment&amp;gt; syntax may have keys. The general use case is mapping a collection to an array of fragments as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Glossary(props) {
  return (
    &amp;lt;dl&amp;gt;
      {props.items.map(item =&amp;gt; (
        // Without the `key`, React will fire a key warning
        &amp;lt;React.Fragment key={item.id}&amp;gt;
          &amp;lt;dt&amp;gt;{item.term}&amp;lt;/dt&amp;gt;
          &amp;lt;dd&amp;gt;{item.description}&amp;lt;/dd&amp;gt;
        &amp;lt;/React.Fragment&amp;gt;
      ))}
    &amp;lt;/dl&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;253&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Does React support all HTML attributes?&lt;/h3&gt; &lt;p&gt;As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.&lt;/p&gt; &lt;p&gt;Let us take few props with respect to standard HTML attributes,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div tabIndex=&quot;-1&quot; /&amp;gt;      // Just like node.tabIndex DOM API
&amp;lt;div className=&quot;Button&quot; /&amp;gt; // Just like node.className DOM API
&amp;lt;input readOnly={true} /&amp;gt;  // Just like node.readOnly DOM API
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;254&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the limitations with HOCs?&lt;/h3&gt; &lt;p&gt;Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Donât use HOCs inside the render method:&lt;/strong&gt; It is not recommended to apply a HOC to a component within the render method of a component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  // A new version of EnhancedComponent is created on every render
  // EnhancedComponent1 !== EnhancedComponent2
  const EnhancedComponent = enhance(MyComponent);
  // That causes the entire subtree to unmount/remount each time!
  return &amp;lt;EnhancedComponent /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code impact performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.&lt;/p&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static methods must be copied over:&lt;/strong&gt; When you apply a HOC to a component the new component does not have any of the static methods of the original component&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Define a static method
WrappedComponent.staticMethod = function() {/*...*/}
// Now apply a HOC
const EnhancedComponent = enhance(WrappedComponent);

// The enhanced component has no static method
typeof EnhancedComponent.staticMethod === &#39;undefined&#39; // true
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can overcome this by copying the methods onto the container before returning it,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function enhance(WrappedComponent) {
  class Enhance extends React.Component {/*...*/}
  // Must know exactly which method(s) to copy :(
  Enhance.staticMethod = WrappedComponent.staticMethod;
  return Enhance;
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refs arenât passed through:&lt;/strong&gt; For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;255&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to debug forwardRefs in DevTools?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React.forwardRef&lt;/strong&gt; accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.&lt;/p&gt; &lt;p&gt;For example, If you don&#39;t name the render function or not using displayName property then it will appear as âForwardRefâ in the DevTools,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const WrappedComponent = React.forwardRef((props, ref) =&amp;gt; {
  return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But If you name the render function then it will appear as &lt;strong&gt;âForwardRef(myFunction)â&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const WrappedComponent = React.forwardRef(
  function myFunction(props, ref) {
    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
  }
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As an alternative, You can also set displayName property for forwardRef function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function logProps(Component) {
  class LogProps extends React.Component {
    // ...
  }

  function forwardRef(props, ref) {
    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
  }

  // Give this component a more helpful display name in DevTools.
  // e.g. &quot;ForwardRef(logProps(MyComponent))&quot;
  const name = Component.displayName || Component.name;
  forwardRef.displayName = `logProps(${name})`;

  return React.forwardRef(forwardRef);
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;256&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;When component props defaults to true?&lt;/h3&gt; &lt;p&gt;If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.&lt;/p&gt; &lt;p&gt;For example, below expressions are equivalent,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;MyInput autocomplete /&amp;gt;

&amp;lt;MyInput autocomplete={true} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, &lt;code&gt;{name}&lt;/code&gt; which is short for &lt;code&gt;{name: name}&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;257&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is NextJS and major features of it?&lt;/h3&gt; &lt;p&gt;Next.js is a popular and lightweight framework for static and serverârendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Server-rendered by default&lt;/li&gt; 
   &lt;li&gt;Automatic code splitting for faster page loads&lt;/li&gt; 
   &lt;li&gt;Simple client-side routing (page based)&lt;/li&gt; 
   &lt;li&gt;Webpack-based dev environment which supports (HMR)&lt;/li&gt; 
   &lt;li&gt;Able to implement with Express or any other Node.js HTTP server&lt;/li&gt; 
   &lt;li&gt;Customizable with your own Babel and Webpack configurations&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;258&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you pass an event handler to a component?&lt;/h3&gt; &lt;p&gt;You can pass event handlers and other functions as props to child components. It can be used in child component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;259&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it good to use arrow functions in render methods?&lt;/h3&gt; &lt;p&gt;Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Foo extends Component {
  handleClick() {
    console.log(&#39;Click happened&#39;);
  }
  render() {
    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using an arrow function in render method creates a new function each time the component renders, which may have performance implications&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;260&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent a function from being called multiple times?&lt;/h3&gt; &lt;p&gt;If you use an event handler such as &lt;strong&gt;onClick or onScroll&lt;/strong&gt; and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Throttling:&lt;/strong&gt; Changes based on a time based frequency. For example, it can be used using _.throttle lodash function&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;Debouncing:&lt;/strong&gt; Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function&lt;/li&gt; 
   &lt;li&gt;&lt;strong&gt;RequestAnimationFrame throttling:&lt;/strong&gt; Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;261&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How JSX prevents Injection Attacks?&lt;/h3&gt; &lt;p&gt;React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything thatâs not explicitly written in your application. Everything is converted to a string before being rendered.&lt;/p&gt; &lt;p&gt;For example, you can embed user input as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const name = response.potentiallyMaliciousInput;
const element = &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way you can prevent XSS(Cross-site-scripting) attacks in the application.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;262&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you update rendered elements?&lt;/h3&gt; &lt;p&gt;You can update UI(represented by rendered element) by passing the newly created element to ReactDOM&#39;s render method.&lt;/p&gt; &lt;p&gt;For example, lets take a ticking clock example, where it updates the time by calling render method multiple times,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function tick() {
  const element = (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;It is {new Date().toLocaleTimeString()}.&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  );
  ReactDOM.render(element, document.getElementById(&#39;root&#39;));
}

setInterval(tick, 1000);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;263&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you say that props are read only?&lt;/h3&gt; &lt;p&gt;When you declare a component as a function or a class, it must never modify its own props.&lt;/p&gt; &lt;p&gt;Let us take a below capital function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function capital(amount, interest) {
   return amount + interest;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above function is called âpureâ because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying &quot;All React components must act like pure functions with respect to their props.&quot;&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;264&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you say that state updates are merged?&lt;/h3&gt; &lt;p&gt;When you call setState() in the component, React merges the object you provide into the current state.&lt;/p&gt; &lt;p&gt;For example, let us take a facebook user with posts and comments details as state variables,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  constructor(props) {
    super(props);
    this.state = {
      posts: [],
      comments: []
    };
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can update them independently with separate &lt;code&gt;setState()&lt;/code&gt; calls as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; componentDidMount() {
    fetchPosts().then(response =&amp;gt; {
      this.setState({
        posts: response.posts
      });
    });

    fetchComments().then(response =&amp;gt; {
      this.setState({
        comments: response.comments
      });
    });
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code snippets, &lt;code&gt;this.setState({comments})&lt;/code&gt; updates only comments variable without modifying or replacing posts variable.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;265&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you pass arguments to an event handler?&lt;/h3&gt; &lt;p&gt;During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.&lt;/p&gt; &lt;p&gt;Let us take an example of user details updated in a grid,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;button onClick={(e) =&amp;gt; this.updateUser(userId, e)}&amp;gt;Update User details&amp;lt;/button&amp;gt;
&amp;lt;button onClick={this.updateUser.bind(this, userId)}&amp;gt;Update User details&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In both the approaches, the synthetic argument e is passed as a second argument. You need to pass it explicitly for arrow functions and it forwarded automatically for bind method.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;266&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to prevent component from rendering?&lt;/h3&gt; &lt;p&gt;You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Greeting(props) {
  if (!props.loggedIn) {
    return null;
  }

  return (
    &amp;lt;div className=&quot;greeting&quot;&amp;gt;
      welcome, {props.name}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class User extends React.Component {
  constructor(props) {
    super(props);
    this.state = {loggedIn: false, name: &#39;John&#39;};
  }

  render() {
   return (
       &amp;lt;div&amp;gt;
         //Prevent component render if it is not loggedIn
         &amp;lt;Greeting loggedIn={this.state.loggedIn} /&amp;gt;
         &amp;lt;UserDetails name={this.state.name}&amp;gt;
       &amp;lt;/div&amp;gt;
   );
  }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, the greeting component skips its rendering section by applying condition and returning null value.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;267&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the conditions to safely use the index as a key?&lt;/h3&gt; &lt;p&gt;There are three conditions to make sure, it is safe use the index as a key.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The list and items are staticâ they are not computed and do not change&lt;/li&gt; 
   &lt;li&gt;The items in the list have no ids&lt;/li&gt; 
   &lt;li&gt;The list is never reordered or filtered.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;268&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it keys should be globally unique?&lt;/h3&gt; &lt;p&gt;Keys used within arrays should be unique among their siblings but they donât need to be globally unique. i.e, You can use the same keys with two different arrays.&lt;/p&gt; &lt;p&gt;For example, the below book component uses two arrays with different arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Book(props) {
  const index = (
    &amp;lt;ul&amp;gt;
      {props.pages.map((page) =&amp;gt;
        &amp;lt;li key={page.id}&amp;gt;
          {page.title}
        &amp;lt;/li&amp;gt;
      )}
    &amp;lt;/ul&amp;gt;
  );
  const content = props.pages.map((page) =&amp;gt;
    &amp;lt;div key={page.id}&amp;gt;
      &amp;lt;h3&amp;gt;{page.title}&amp;lt;/h3&amp;gt;
      &amp;lt;p&amp;gt;{page.content}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;{page.pageNumber}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
  return (
    &amp;lt;div&amp;gt;
      {index}
      &amp;lt;hr /&amp;gt;
      {content}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;269&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the popular choice for form handling?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Formik&lt;/code&gt; is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.&lt;/p&gt; &lt;p&gt;In detail, You can categorize them as follows,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; 
   &lt;li&gt;Validation and error messages&lt;/li&gt; 
   &lt;li&gt;Handling form submission&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;It is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;270&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the advantages of formik over redux form library?&lt;/h3&gt; &lt;p&gt;Below are the main reasons to recommend formik over redux form library,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;The form state is inherently short-term and local, so tracking it in Redux (or any kind of Flux library) is unnecessary.&lt;/li&gt; 
   &lt;li&gt;Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY SINGLE KEYSTROKE. This way it increases input latency for large apps.&lt;/li&gt; 
   &lt;li&gt;Redux-Form is 22.5 kB minified gzipped whereas Formik is 12.7 kB&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;271&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you not required to use inheritance?&lt;/h3&gt; In React, it is recommend using composition instead of inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a componentâs look and behavior in an explicit and safe way. Whereas, If you want to reuse non-UI functionality between components, it is suggested to extracting it into a separate JavaScript module. Later components import it and use that function, object, or a class, without extending it.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;272&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use web components in react application?&lt;/h3&gt; &lt;p&gt;Yes, you can use web components in a react application. Even though many developers won&#39;t use this combination, it may require especially if you are using third-party UI components that are written using Web Components.&lt;/p&gt; &lt;p&gt;For example, let us use &lt;code&gt;Vaadin&lt;/code&gt; date picker web component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { Component } from &#39;react&#39;;
import &#39;./App.css&#39;;
import &#39;@vaadin/vaadin-date-picker&#39;;
class App extends Component {
  render() {
    return (
      &amp;lt;div className=&quot;App&quot;&amp;gt;
        &amp;lt;vaadin-date-picker label=&quot;When were you born?&quot;&amp;gt;&amp;lt;/vaadin-date-picker&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;273&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is dynamic import?&lt;/h3&gt; &lt;p&gt;The dynamic import() syntax is a ECMAScript proposal not currently part of the language standard. It is expected to be accepted in the near future. You can achieve code-splitting into your app using dynamic import.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of addition,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Normal Import&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { add } from &#39;./math&#39;;
console.log(add(10, 20));
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start=&quot;2&quot;&gt; 
   &lt;li&gt;&lt;strong&gt;Dynamic Import&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import(&quot;./math&quot;).then(math =&amp;gt; {
  console.log(math.add(10, 20));
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;274&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are loadable components?&lt;/h3&gt; &lt;p&gt;If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.&lt;/p&gt; &lt;p&gt;Lets take an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import loadable from &#39;@loadable/component&#39;

const OtherComponent = loadable(() =&amp;gt; import(&#39;./OtherComponent&#39;))

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;OtherComponent /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now OtherComponent will be loaded in a separated bundle&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;275&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is suspense component?&lt;/h3&gt; &lt;p&gt;If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while youâre waiting for it to load using a loading indicator. This can be done using &lt;strong&gt;Suspense&lt;/strong&gt; component.&lt;/p&gt; &lt;p&gt;For example, the below code uses suspense component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));

function MyComponent() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;
        &amp;lt;OtherComponent /&amp;gt;
      &amp;lt;/Suspense&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code, Suspense is wrapped above the lazy component.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;276&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is route based code splitting?&lt;/h3&gt; &lt;p&gt;One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won&#39;t be disturbed.&lt;/p&gt; &lt;p&gt;Let us take an example of route based website using libraries like React Router with React.lazy,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { BrowserRouter as Router, Route, Switch } from &#39;react-router-dom&#39;;
import React, { Suspense, lazy } from &#39;react&#39;;

const Home = lazy(() =&amp;gt; import(&#39;./routes/Home&#39;));
const About = lazy(() =&amp;gt; import(&#39;./routes/About&#39;));

const App = () =&amp;gt; (
  &amp;lt;Router&amp;gt;
    &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route exact path=&quot;/&quot; component={Home}/&amp;gt;
        &amp;lt;Route path=&quot;/about&quot; component={About}/&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/Suspense&amp;gt;
  &amp;lt;/Router&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, the code splitting will happen at each route level.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;277&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Give an example on How to use context?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt; is designed to share data that can be considered &lt;strong&gt;global&lt;/strong&gt; for a tree of React components.&lt;/p&gt; &lt;p&gt;For example, in the code below lets manually thread through a âthemeâ prop in order to style the Button component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//Lets create a context with a default theme value &quot;luna&quot;
const ThemeContext = React.createContext(&#39;luna&#39;);
// Create App component where it uses provider to pass theme value in the tree
class App extends React.Component {
  render() {
    return (
      &amp;lt;ThemeContext.Provider value=&quot;nova&quot;&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/ThemeContext.Provider&amp;gt;
    );
  }
}
// A middle component where you don&#39;t need to pass theme prop anymore
function Toolbar(props) {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;ThemedButton /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
// Lets read theme value in the button component to use
class ThemedButton extends React.Component {
  static contextType = ThemeContext;
  render() {
    return &amp;lt;Button theme={this.context} /&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;278&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of default value in context?&lt;/h3&gt; &lt;p&gt;The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.&lt;/p&gt; &lt;p&gt;Below code snippet provides default theme value as Luna.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const MyContext = React.createContext(defaultValue);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;279&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you use contextType?&lt;/h3&gt; &lt;p&gt;ContextType is used to consume the context object. The contextType property can be used in two ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;contextType as property of class:&lt;/strong&gt; The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function.&lt;/p&gt; &lt;p&gt;Lets assign contextType property on MyClass as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyClass extends React.Component {
  componentDidMount() {
    let value = this.context;
    /* perform a side-effect at mount using the value of MyContext */
  }
  componentDidUpdate() {
    let value = this.context;
    /* ... */
  }
  componentWillUnmount() {
    let value = this.context;
    /* ... */
  }
  render() {
    let value = this.context;
    /* render something based on the value of MyContext */
  }
}
MyClass.contextType = MyContext;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static field&lt;/strong&gt; You can use a static class field to initialize your contextType using public class field syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class MyClass extends React.Component {
  static contextType = MyContext;
  render() {
    let value = this.context;
    /* render something based on the value */
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;280&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is a consumer?&lt;/h3&gt; &lt;p&gt;A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.&lt;/p&gt; &lt;p&gt;Lets take a simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;MyContext.Consumer&amp;gt;
  {value =&amp;gt; /* render something based on the context value */}
&amp;lt;/MyContext.Consumer&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;281&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you solve performance corner cases while using context?&lt;/h3&gt; &lt;p&gt;The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a providerâs parent re-renders.&lt;/p&gt; &lt;p&gt;For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends React.Component {
  render() {
    return (
      &amp;lt;Provider value={{something: &#39;something&#39;}}&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can be solved by lifting up the value to parent state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: {something: &#39;something&#39;},
    };
  }

  render() {
    return (
      &amp;lt;Provider value={this.state.value}&amp;gt;
        &amp;lt;Toolbar /&amp;gt;
      &amp;lt;/Provider&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;282&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of forward ref in HOCs?&lt;/h3&gt; &lt;p&gt;Refs will not get passed through because ref is not a prop. It handled differently by React just like &lt;strong&gt;key&lt;/strong&gt;. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.&lt;/p&gt; &lt;p&gt;The below HOC logs all props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    function logProps(Component) {
      class LogProps extends React.Component {
        componentDidUpdate(prevProps) {
          console.log(&#39;old props:&#39;, prevProps);
          console.log(&#39;new props:&#39;, this.props);
        }

        render() {
          const {forwardedRef, ...rest} = this.props;

          // Assign the custom prop &quot;forwardedRef&quot; as a ref
          return &amp;lt;Component ref={forwardedRef} {...rest} /&amp;gt;;
        }
      }

      return React.forwardRef((props, ref) =&amp;gt; {
        return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;
      });
    }
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s use this HOC to log all props that get passed to our âfancy buttonâ component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    class FancyButton extends React.Component {
      focus() {
        // ...
      }

      // ...
    }
    export default logProps(FancyButton);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now lets create a ref and pass it to FancyButton component. In this case, you can set focus to button element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    import FancyButton from &#39;./FancyButton&#39;;

    const ref = React.createRef();
    ref.current.focus();
    &amp;lt;FancyButton
      label=&quot;Click Me&quot;
      handleClick={handleClick}
      ref={ref}
    /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;283&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it ref argument available for all functions or class components?&lt;/h3&gt; Regular function or class components donât receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;284&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do you need additional care for component libraries while using forward refs?&lt;/h3&gt; When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;285&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to create react class components without ES6?&lt;/h3&gt; &lt;p&gt;If you donât use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var Greeting = createReactClass({
  getDefaultProps: function() {
      return {
        name: &#39;Jhohn&#39;
      };
    },
  getInitialState: function() {
      return {message: this.props.message};
    },
  handleClick: function() {
     console.log(this.state.message);
  },
  render: function() {
    return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;;
  }
});
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use createReactClass then auto binding is available for all methods. i.e, You don&#39;t need to use &lt;code&gt;.bind(this)&lt;/code&gt; with in constructor for event handlers.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;286&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it possible to use react without JSX?&lt;/h3&gt; &lt;p&gt;Yes, JSX is not mandatory for using React. Actually it is convenient when you donât want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take a greeting example with JSX,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Greeting extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;Hello {this.props.message}&amp;lt;/div&amp;gt;;
  }
}

ReactDOM.render(
  &amp;lt;Greeting message=&quot;World&quot; /&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the same code without JSX as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Greeting extends React.Component {
  render() {
    return React.createElement(&#39;div&#39;, null, `Hello ${this.props.message}`);
  }
}

ReactDOM.render(
  React.createElement(Greeting, {message: &#39;World&#39;}, null),
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;287&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is diffing algorithm?&lt;/h3&gt; &lt;p&gt;React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.&lt;/p&gt; &lt;p&gt;In this case, for displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Two elements of different types will produce different trees.&lt;/li&gt; 
   &lt;li&gt;The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;288&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the rules covered by diffing algorithm?&lt;/h3&gt; &lt;p&gt;When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Elements Of Different Types:&lt;/strong&gt; Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. For example, elements &lt;a&gt; to &lt;img&gt;, or from 
     &lt;article&gt;
       to 
      &lt;comment&gt;
        of different types lead a full rebuild.
      &lt;/comment&gt;
     &lt;/article&gt;&lt;/a&gt;&lt;/li&gt;
   &lt;a&gt; &lt;li&gt;&lt;strong&gt;DOM Elements Of The Same Type:&lt;/strong&gt; When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute, &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div className=&quot;show&quot; title=&quot;ReactJS&quot; /&amp;gt;

&amp;lt;div className=&quot;hide&quot; title=&quot;ReactJS&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Component Elements Of The Same Type:&lt;/strong&gt; When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Recursing On Children:&lt;/strong&gt; when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever thereâs a difference. For example, when adding an element at the end of the children, converting between these two trees works well. &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Handling keys:&lt;/strong&gt; React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient,&lt;/li&gt; &lt;/a&gt;
  &lt;/ol&gt;&lt;a&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li key=&quot;2015&quot;&amp;gt;Duke&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2016&quot;&amp;gt;Villanova&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li key=&quot;2014&quot;&amp;gt;Connecticut&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2015&quot;&amp;gt;Duke&amp;lt;/li&amp;gt;
  &amp;lt;li key=&quot;2016&quot;&amp;gt;Villanova&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&lt;/li&gt;
 &lt;a&gt; &lt;/a&gt;
&lt;/ol&gt;
&lt;a&gt; &lt;/a&gt;
&lt;p&gt;&lt;a&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;289&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;When do you need to use refs?&lt;/h3&gt; &lt;p&gt;There are few use cases to go for refs,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Managing focus, text selection, or media playback.&lt;/li&gt; 
   &lt;li&gt;Triggering imperative animations.&lt;/li&gt; 
   &lt;li&gt;Integrating with third-party DOM libraries.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;290&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it prop must be named as render for render props?&lt;/h3&gt; &lt;p&gt;Even though the pattern named render props, you donât have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a ârender propâ. Lets take an example with the children prop for render props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;Mouse children={mouse =&amp;gt; (
  &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Actually children prop doesnât need to be named in the list of âattributesâ in JSX element. Instead, you can keep it directly inside element,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;Mouse&amp;gt;
  {mouse =&amp;gt; (
    &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;
  )}
&amp;lt;/Mouse&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While using this above technique(without any name), explicitly state that children should be a function in your propTypes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Mouse.propTypes = {
  children: PropTypes.func.isRequired
};
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;291&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the problems of using render props with pure components?&lt;/h3&gt; If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;292&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you create HOC using render props?&lt;/h3&gt; &lt;p&gt;You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a 
   &lt;mouse&gt;
     component, you could easily create one using a regular 
    &lt;mouse&gt;
      with a render prop.
    &lt;/mouse&gt;
   &lt;/mouse&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function withMouse(Component) {
  return class extends React.Component {
    render() {
      return (
        &amp;lt;Mouse render={mouse =&amp;gt; (
          &amp;lt;Component {...this.props} mouse={mouse} /&amp;gt;
        )}/&amp;gt;
      );
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way render props gives the flexibility of using either pattern.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;293&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is windowing technique?&lt;/h3&gt; Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;294&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you print falsy values in JSX?&lt;/h3&gt; &lt;p&gt;The falsy values such as false, null, undefined, and true are valid children but they don&#39;t render anything. If you still want to display them then you need to convert it to string. Let&#39;s take an example on how to convert to a string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;div&amp;gt;
  My JavaScript variable is {String(myVariable)}.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;295&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the typical use case of portals?&lt;/h3&gt; &lt;p&gt;React portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context(z-index,position,opacity etc styles) and you need to visually âbreak outâ of its container.&lt;/p&gt; &lt;p&gt;For example, dialogs, global message notifications, hovercards, and tooltips.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;296&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you set default value for uncontrolled component?&lt;/h3&gt; &lt;p&gt;In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a &lt;strong&gt;defaultValue&lt;/strong&gt; attribute instead of &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;render() {
  return (
    &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;
      &amp;lt;label&amp;gt;
        User Name:
        &amp;lt;input
          defaultValue=&quot;John&quot;
          type=&quot;text&quot;
          ref={this.input} /&amp;gt;
      &amp;lt;/label&amp;gt;
      &amp;lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The same applies for &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;textArea&lt;/code&gt; inputs. But you need to use &lt;strong&gt;defaultChecked&lt;/strong&gt; for &lt;code&gt;checkbox&lt;/code&gt; and &lt;code&gt;radio&lt;/code&gt; inputs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;297&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is your favorite React stack?&lt;/h3&gt; Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel. You can clone the project &lt;a href=&quot;https://github.com/react-boilerplate/react-boilerplate&quot;&gt;https://github.com/react-boilerplate/react-boilerplate&lt;/a&gt; and start working on any new react project.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;298&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Real DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Real DOM and Virtual DOM,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Real DOM&lt;/th&gt; 
     &lt;th&gt;Virtual DOM&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Updates are slow&lt;/td&gt; 
     &lt;td&gt;Updates are fast&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;DOM manipulation is very expensive.&lt;/td&gt; 
     &lt;td&gt;DOM manipulation is very easy&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;You can update HTML directly.&lt;/td&gt; 
     &lt;td&gt;You Canât directly update HTML&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;It causes too much of memory wastage&lt;/td&gt; 
     &lt;td&gt;There is no memory wastage&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Creates a new DOM if element updates&lt;/td&gt; 
     &lt;td&gt;It updates the JSX if element update&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;299&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to add Bootstrap to a react application?&lt;/h3&gt; &lt;p&gt;Bootstrap can be added to your React app in a three possible ways,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Using the Bootstrap CDN: This is the easiest way to add bootstrap. Add both bootstrap CSS and JS resources in a head tag.&lt;/li&gt; 
   &lt;li&gt;Bootstrap as Dependency: If you are using a build tool or a module bundler such as Webpack, then this is the preferred option for adding Bootstrap to your React application &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install bootstrap
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;React Bootstrap Package: In this case, you can add Bootstrap to our React app is by using a package that has rebuilt Bootstrap components to work particularly as React components. Below packages are popular in this category, 
    &lt;ol&gt; 
     &lt;li&gt;react-bootstrap&lt;/li&gt; 
     &lt;li&gt;reactstrap&lt;/li&gt; 
    &lt;/ol&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;300&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can you list down top websites or applications using react as front end framework?&lt;/h3&gt; &lt;p&gt;Below are the &lt;code&gt;top 10 websites&lt;/code&gt; using React as their front-end framework,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Facebook&lt;/li&gt; 
   &lt;li&gt;Uber&lt;/li&gt; 
   &lt;li&gt;Instagram&lt;/li&gt; 
   &lt;li&gt;WhatsApp&lt;/li&gt; 
   &lt;li&gt;Khan Academy&lt;/li&gt; 
   &lt;li&gt;Airbnb&lt;/li&gt; 
   &lt;li&gt;Dropbox&lt;/li&gt; 
   &lt;li&gt;Flipboard&lt;/li&gt; 
   &lt;li&gt;Netflix&lt;/li&gt; 
   &lt;li&gt;PayPal&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;301&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is it recommended to use CSS In JS technique in React?&lt;/h3&gt; React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;302&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do I need to rewrite all my class components with hooks?&lt;/h3&gt; No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;303&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How to fetch data with React Hooks?&lt;/h3&gt; &lt;p&gt;The effect hook called &lt;code&gt;useEffect&lt;/code&gt; is used to fetch the data with axios from the API and to set the data in the local state of the component with the state hookâs update function.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example in which it fetches list of react articles from the API&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import React, { useState, useEffect } from &#39;react&#39;;
import axios from &#39;axios&#39;;

function App() {
  const [data, setData] = useState({ hits: [] });

  useEffect(() =&amp;gt; {
    (async () =&amp;gt; {
      const result = await axios(
        &#39;http://hn.algolia.com/api/v1/search?query=react&#39;,
      );

      setData(result.data);
    })()
  }, []);

  return (
    &amp;lt;ul&amp;gt;
      {data.hits.map(item =&amp;gt; (
        &amp;lt;li key={item.objectID}&amp;gt;
          &amp;lt;a href={item.url}&amp;gt;{item.title}&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember we provided an empty array as second argument to the effect hook to avoid activating it on component updates but only for the mounting of the component. i.e, It fetches only for component mount.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;304&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Is Hooks cover all use cases for classes?&lt;/h3&gt; Hooks doesn&#39;t cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon &lt;strong&gt;getSnapshotBeforeUpdate&lt;/strong&gt; and &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycles yet.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;305&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the stable release for hooks support?&lt;/h3&gt; &lt;p&gt;React includes a stable implementation of React Hooks in 16.8 release for below packages&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React DOM&lt;/li&gt; 
   &lt;li&gt;React DOM Server&lt;/li&gt; 
   &lt;li&gt;React Test Renderer&lt;/li&gt; 
   &lt;li&gt;React Shallow Renderer&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;306&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Why do we use array destructuring (square brackets notation) in &lt;code&gt;useState&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;When we declare a state variable with &lt;code&gt;useState&lt;/code&gt;, it returns a pair â an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.&lt;/p&gt; &lt;p&gt;For example, the array index access would look as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt; var userStateVariable = useState(&#39;userProfile&#39;); // Returns an array pair
 var user = userStateVariable[0]; // Access first item
 var setUser = userStateVariable[1]; // Access second item
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas with array destructuring the variables can be accessed as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const [user, setUser] = useState(&#39;userProfile&#39;);
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the sources used for introducing hooks?&lt;/h3&gt; &lt;p&gt;Hooks got the ideas from several different sources. Below are some of them,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Previous experiments with functional APIs in the react-future repository&lt;/li&gt; 
   &lt;li&gt;Community experiments with render prop APIs such as Reactions Component&lt;/li&gt; 
   &lt;li&gt;State variables and state cells in DisplayScript.&lt;/li&gt; 
   &lt;li&gt;Subscriptions in Rx.&lt;/li&gt; 
   &lt;li&gt;Reducer components in ReasonReact.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;308&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;How do you access imperative API of web components?&lt;/h3&gt; Web Components often expose an imperative API to implement its functions. You will need to use a &lt;strong&gt;ref&lt;/strong&gt; to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a &lt;strong&gt;wrapper&lt;/strong&gt; for your Web Component.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;309&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is formik?&lt;/h3&gt; &lt;p&gt;Formik is a small react form library that helps you with the three major problems,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; 
   &lt;li&gt;Validation and error messages&lt;/li&gt; 
   &lt;li&gt;Handling form submission&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;310&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/h3&gt; Some of the popular middleware choices for handling asynchronous calls in Redux eco system are &lt;code&gt;Redux Thunk, Redux Promise, Redux Saga&lt;/code&gt;.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;311&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Do browsers understand JSX code?&lt;/h3&gt; No, browsers can&#39;t understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;312&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Describe about data flow in react?&lt;/h3&gt; React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;313&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is react scripts?&lt;/h3&gt; The &lt;code&gt;react-scripts&lt;/code&gt; package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The &lt;code&gt;react-scripts start&lt;/code&gt; command sets up the development environment and starts a server, as well as hot module reloading.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;314&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the features of create react app?&lt;/h3&gt; &lt;p&gt;Below are the list of some of the features provided by create react app.&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;React, JSX, ES6, Typescript and Flow syntax support.&lt;/li&gt; 
   &lt;li&gt;Autoprefixed CSS&lt;/li&gt; 
   &lt;li&gt;CSS Reset/Normalize&lt;/li&gt; 
   &lt;li&gt;A live development server&lt;/li&gt; 
   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting&lt;/li&gt; 
   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps&lt;/li&gt; 
   &lt;li&gt;An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;315&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of renderToNodeStream method?&lt;/h3&gt; The &lt;code&gt;ReactDOMServer#renderToNodeStream&lt;/code&gt; method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes. &lt;strong&gt;Note:&lt;/strong&gt; Remember this method is not available in the browser but only server.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;316&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is MobX?&lt;/h3&gt; MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For reactJs application, you need to install below packages, &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mobx --save
npm install mobx-react --save
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;317&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the differences between Redux and MobX?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Redux and MobX,&lt;/p&gt; 
  &lt;table&gt; 
   &lt;thead&gt; 
    &lt;tr&gt; 
     &lt;th&gt;Topic&lt;/th&gt; 
     &lt;th&gt;Redux&lt;/th&gt; 
     &lt;th&gt;MobX&lt;/th&gt; 
    &lt;/tr&gt; 
   &lt;/thead&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Definition&lt;/td&gt; 
     &lt;td&gt;It is a javascript library for managing the application state&lt;/td&gt; 
     &lt;td&gt;It is a library for reactively managing the state of your applications&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Programming&lt;/td&gt; 
     &lt;td&gt;It is mainly written in ES6&lt;/td&gt; 
     &lt;td&gt;It is written in JavaScript(ES5)&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Data Store&lt;/td&gt; 
     &lt;td&gt;There is only one large store exist for data storage&lt;/td&gt; 
     &lt;td&gt;There is more than one store for storage&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Usage&lt;/td&gt; 
     &lt;td&gt;Mainly used for large and complex applications&lt;/td&gt; 
     &lt;td&gt;Used for simple applications&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;Performance&lt;/td&gt; 
     &lt;td&gt;Need to be improved&lt;/td&gt; 
     &lt;td&gt;Provides better performance&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;How it stores&lt;/td&gt; 
     &lt;td&gt;Uses JS Object to store&lt;/td&gt; 
     &lt;td&gt;Uses observable to store the data&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;318&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Should I learn ES6 before learning ReactJS?&lt;/h3&gt; &lt;p&gt;No, you donât have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let&#39;s see some of the frequently used ES6 features,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Destructuring:&lt;/strong&gt; To get props and use them in a component &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// in es 5
 var someData = this.props.someData
 var dispatch = this.props.dispatch

// in es6
const { someData, dispatch } = this.props
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Spread operator: Helps in passing props down into a component &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// in es 5
&amp;lt;SomeComponent someData={this.props.someData} dispatch={this.props.dispatch} /&amp;gt;

// in es6
&amp;lt;SomeComponent {...this.props} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt;Arrow functions: Makes compact syntax &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// es 5
var users = usersList.map(function (user) {
 return &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;
})
// es 6
const users = usersList.map(user =&amp;gt; &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;319&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is Concurrent Rendering?&lt;/h3&gt; &lt;p&gt;The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there&#39;s something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// 1. Part of an app by wrapping with ConcurrentMode
&amp;lt;React.unstable_ConcurrentMode&amp;gt;
  &amp;lt;Something /&amp;gt;
&amp;lt;/React.unstable_ConcurrentMode&amp;gt;

// 2. Whole app using createRoot
ReactDOM.unstable_createRoot(domNode).render(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;320&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between async mode and concurrent mode?&lt;/h3&gt; Both refers the same thing. Previously concurrent Mode being referred to as &quot;Async Mode&quot; by React team. The name has been changed to highlight Reactâs ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;321&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;Can I use javascript urls in react16.9?&lt;/h3&gt; &lt;p&gt;Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; and create a security hole.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const companyProfile = {
  website: &quot;javascript: alert(&#39;Your website is hacked&#39;)&quot;,
};
// It will log a warning
&amp;lt;a href={companyProfile.website}&amp;gt;More details&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember that the future versions will throw an error for javascript URLs.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;322&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the purpose of eslint plugin for hooks?&lt;/h3&gt; &lt;p&gt;The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with âuseâ and a capital letter right after it is a Hook. In particular, the rule enforces that,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Calls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook).&lt;/li&gt; 
   &lt;li&gt;Hooks are called in the same order on every render.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;323&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What is the difference between Imperative and Declarative in React?&lt;/h3&gt; &lt;p&gt;Imagine a simple UI component, such as a &quot;Like&quot; button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.&lt;/p&gt; &lt;p&gt;The imperative way of doing this would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if( user.likes() ) {
    if( hasBlue() ) {
        removeBlue();
        addGrey();
    } else {
        removeGrey();
        addBlue();
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.&lt;/p&gt; &lt;p&gt;In contrast, the declarative approach would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if( this.state.liked ) {
    return &amp;lt;blueLike /&amp;gt;;
} else {
    return &amp;lt;greyLike /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a sepecific state, and is therefore much simpler to understand.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;324&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of using typescript with reactjs?&lt;/h3&gt; &lt;p&gt;Below are some of the benefits of using typescript with Reactjs,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is possible to use latest JavaScript features&lt;/li&gt; 
   &lt;li&gt;Use of interfaces for complex type definitions&lt;/li&gt; 
   &lt;li&gt;IDEs such as VS Code was made for TypeScript&lt;/li&gt; 
   &lt;li&gt;Avoid bugs with the ease of readability and Validation&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {loadUser}  from &#39;../actions/auth&#39;;
store.dispatch(loadUser());
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;But while using &lt;strong&gt;Context API&lt;/strong&gt;, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as &lt;strong&gt;loadUser&lt;/strong&gt; action will be triggered on each re-render.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import App from &#39;./App&#39;;
import AuthState from &#39;./context/auth/AuthState&#39;

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;AuthState&amp;gt;
      &amp;lt;App /&amp;gt;
    &amp;lt;/AuthState&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById(&#39;root&#39;)
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  const authContext = useContext(AuthContext);

  const { loadUser } = authContext;

  useEffect(() =&amp;gt; {
    loadUser();
  },[])
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;loadUser&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;    const loadUser = async () =&amp;gt; {
        const token = sessionStorage.getItem(&#39;token&#39;);

        if(!token){
            dispatch({
                type: ERROR
            })
        }
        setAuthToken(token);

        try {
            const res = await axios(&#39;/api/auth&#39;); 

            dispatch({
                type: USER_LOADED,
                payload: res.data.data
            })
            
        } catch (err) {
           console.error(err); 
        }
    }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&quot;&gt;â¬ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;ol start=&quot;326&quot;&gt; 
 &lt;li&gt; &lt;h3&gt;What are the benefits of new JSX transform?&lt;/h3&gt; &lt;p&gt;There are three major benefits of new JSX transform,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It is possible to use JSX without importing React packages&lt;/li&gt; 
   &lt;li&gt;The compiled output might improve the bundle size in a small amount&lt;/li&gt; 
   &lt;li&gt;The future improvements provides the flexibility to reduce the number of concepts to learn React.&lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How does new JSX transform different from old transform?&lt;/h3&gt; &lt;p&gt;The new JSX transform doesnât require React to be in scope. i.e, You don&#39;t need to import React package for simple scenarios.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example to look at the main differences between the old and the new transform,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Old Transform:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;

function App() {
  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now JSX transform convert the above code into regular JavaScript as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import React from &#39;react&#39;;

function App() {
  return React.createElement(&#39;h1&#39;, null, &#39;Good morning!!&#39;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;New Transform:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The new JSX transform doesn&#39;t require any React imports&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function App() {
  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Under the hood JSX transform compiles to below code&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import {jsx as _jsx} from &#39;react/jsx-runtime&#39;;

function App() {
  return _jsx(&#39;h1&#39;, { children: &#39;Good morning!!&#39; });
}
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You still need to import React to use Hooks.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;How do you get redux scaffolding using create-react-app?&lt;/h3&gt; &lt;p&gt;Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;Redux Toolkit and React-Redux dependencies&lt;/li&gt; 
   &lt;li&gt;Create and configure Redux store&lt;/li&gt; 
   &lt;li&gt;React-Redux &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; passing the store to React components&lt;/li&gt; 
   &lt;li&gt;Small &quot;counter&quot; example to demo how to add redux logic and React-Redux hooks API to interact with the store from components&lt;/li&gt; 
  &lt;/ol&gt; &lt;p&gt;The below commands need to be executed along with template option as below,&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt;&lt;strong&gt;Javascript template:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npx create-react-app my-app --template redux
&lt;/code&gt;&lt;/pre&gt; 
  &lt;ol start=&quot;2&quot;&gt; 
   &lt;li&gt;&lt;strong&gt;Typescript template:&lt;/strong&gt;&lt;/li&gt; 
  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npx create-react-app my-app --template redux-typescript
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are React Server components?&lt;/h3&gt; &lt;p&gt;React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; React Server Components is still under development and not recommended for production yet.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What is prop drilling?&lt;/h3&gt; &lt;p&gt;Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;h3&gt;What are the different ways to prevent state mutation?&lt;/h3&gt; &lt;/li&gt; 
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>
