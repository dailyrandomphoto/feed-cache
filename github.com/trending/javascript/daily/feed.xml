<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>GitHub JavaScript Daily Trending</title>
    <description>Daily Trending of JavaScript in GitHub</description>
    <pubDate>Wed, 09 Dec 2020 01:36:55 GMT</pubDate>
    <link>http://mshibanami.github.io/GitHubTrendingRSS</link>
    
    <item>
      <title>grommet/grommet</title>
      <link>https://github.com/grommet/grommet</link>
      <description>&lt;p&gt;a react-based framework that provides accessibility, modularity, responsiveness, and theming in a tidy package&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grommet: focus on the essential experience&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/grommet/grommet/master/CONTRIBUTING.md&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/pr&#39;s-welcome-7d4cdb.svg&quot; alt=&quot;PRs Welcome&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://slack-invite.grommet.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/join%20the%20community-slack-fd6fff.svg&quot; alt=&quot;slack&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://twitter.com/grommet_io&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/follow/grommet_io.svg?label=follow%20&amp;amp;style=social&quot; alt=&quot;follow&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://medium.com/grommet-io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/view%20blogs%20on-medium-000000.svg&quot; alt=&quot;blogs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/grommet&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/grommet.svg?color=ffca58&quot; alt=&quot;npm package&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/grommet&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/grommet.svg?color=3d138d&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/prettier/prettier&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/styled_with-prettier-ff69b4.svg&quot; alt=&quot;styled with prettier&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Visit the &lt;a href=&quot;https://grommet.io/&quot;&gt;Grommet&lt;/a&gt; website for more information.&lt;/p&gt; 
&lt;h2&gt;Support / Contributing&lt;/h2&gt; 
&lt;p&gt;Before opening an issue or pull request, please read the &lt;a href=&quot;https://raw.githubusercontent.com/grommet/grommet/master/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt; guide.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;p&gt;You can install Grommet using either of the methods given below.&lt;/p&gt; 
&lt;p&gt;For npm users:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;  $ npm install grommet styled-components --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For Yarn users:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;  $ yarn add grommet styled-components
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There are more detailed instructions in the &lt;a href=&quot;https://github.com/grommet/grommet-starter-new-app&quot;&gt;Grommet Starter&lt;/a&gt; app tutorial for new apps. For incorporating Grommet into an existing app, see the &lt;a href=&quot;https://github.com/grommet/grommet-starter-existing-app&quot;&gt;Existing App&lt;/a&gt; version.&lt;/p&gt; 
&lt;h2&gt;Explore&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://storybook.grommet.io&quot;&gt;Storybook&lt;/a&gt; examples per component, you can create them locally by running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;  $ npm run storybook
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;  $ yarn storybook
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Basic &lt;a href=&quot;https://codesandbox.io/s/github/grommet/grommet-sandbox&quot;&gt;code-sandbox playgrounds&lt;/a&gt; for each component.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://codesandbox.io/u/grommetux/sandboxes&quot;&gt;Templates, patterns, and starters&lt;/a&gt;: feel free to share with us more pattern ideas on &lt;a href=&quot;https://slack-invite.grommet.io&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;End-to-end project examples from our community in the &lt;a href=&quot;https://slack-invite.grommet.io&quot;&gt;#i-made-this Slack channel&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Read more from the Grommet team on &lt;a href=&quot;https://medium.com/grommet-io&quot;&gt;Medium&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Stable&lt;/h2&gt; 
&lt;p&gt;grommet is also available on a stable branch that is built with the content of the &#39;master&#39; branch. From your package.json point to stable.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&quot;grommet&quot;: &quot;https://github.com/grommet/grommet/tarball/stable&quot;,
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more info, read the &lt;a href=&quot;https://github.com/grommet/grommet/wiki/What-is-grommet-stable-and-how-to-use-it%3F&quot;&gt;stable wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Release History&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://github.com/grommet/grommet/wiki/Change-Log&quot;&gt;Change Log&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Tools Behind Grommet&lt;/h2&gt; 
&lt;p&gt;Grommet is produced using this great tool:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.browserstack.com/&quot;&gt;BrowserStack&lt;/a&gt; for browser emulators and simulators.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://circleci.com/gh/grommet/grommet/&quot;&gt;Circle CI&lt;/a&gt; for continuous integration.&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>react-native-mapbox-gl/maps</title>
      <link>https://github.com/react-native-mapbox-gl/maps</link>
      <description>&lt;p&gt;A Mapbox GL react native module for creating custom maps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mapbox Maps SDK for React Native&lt;/h1&gt; 
&lt;p&gt;&lt;em&gt;An unofficial React Native library for building maps with the &lt;a href=&quot;https://www.mapbox.com/ios-sdk/&quot;&gt;Mapbox Maps SDK for iOS&lt;/a&gt; and &lt;a href=&quot;https://www.mapbox.com/android-sdk/&quot;&gt;Mapbox Maps SDK for Android&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://badge.fury.io/js/%40react-native-mapbox-gl%2Fmaps&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/%40react-native-mapbox-gl%2Fmaps.svg&quot; alt=&quot;npm version&quot;&gt;&lt;/a&gt; &lt;img src=&quot;https://travis-ci.org/react-native-mapbox-gl/maps.svg?branch=master&quot; alt=&quot;build_status&quot;&gt; &lt;a href=&quot;https://depfu.com/github/react-native-mapbox-gl/maps?project_id=8248&quot;&gt;&lt;img src=&quot;https://badges.depfu.com/badges/2eac6b62372619718b7f55ebbf8e9d8f/overview.svg&quot; alt=&quot;Depfu&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;Prerequisit&lt;/h3&gt; 
&lt;p&gt;On Android we support from version 6 (API 23) upwards&lt;/p&gt; 
&lt;h3&gt;Dependencies&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;node&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt; (0.60+)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Git&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;git clone git@github.com:react-native-mapbox-gl/maps.git
cd maps
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Yarn&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;yarn add @react-native-mapbox-gl/maps
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Npm&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;npm install @react-native-mapbox-gl/maps --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation Guides&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/android/install.md&quot;&gt;Android&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/ios/install.md&quot;&gt;iOS&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/GettingStarted.md&quot;&gt;Getting Started&lt;/a&gt;&lt;/h2&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;h3&gt;Components&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/MapView.md&quot;&gt;MapView&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/Light.md&quot;&gt;Light&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/StyleSheet.md&quot;&gt;StyleSheet&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/PointAnnotation.md&quot;&gt;PointAnnotation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/MarkerView.md&quot;&gt;MarkerView&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/Callout.md&quot;&gt;Callout&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/Camera.md&quot;&gt;Camera&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/UserLocation.md&quot;&gt;UserLocation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/Images.md&quot;&gt;Images&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Sources&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/VectorSource.md&quot;&gt;VectorSource&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/ShapeSource.md&quot;&gt;ShapeSource&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/RasterSource.md&quot;&gt;RasterSource&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Layers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/BackgroundLayer.md&quot;&gt;BackgroundLayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/CircleLayer.md&quot;&gt;CircleLayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/FillExtrusionLayer.md&quot;&gt;FillExtrusionLayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/FillLayer.md&quot;&gt;FillLayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/LineLayer.md&quot;&gt;LineLayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/RasterLayer.md&quot;&gt;RasterLayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/SymbolLayer.md&quot;&gt;SymbolLayer&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/HeatmapLayer.md&quot;&gt;HeatmapLayer&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Offline&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/OfflineManager.md&quot;&gt;OfflineManager&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/snapshotManager.md&quot;&gt;SnapshotManager&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Misc&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/MapboxGL.md&quot;&gt;MapboxGL&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/react-native-mapbox-gl/maps/master/docs/CustomHttpHeaders.md&quot;&gt;CustomHttpHeaders&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Expo Support&lt;/h2&gt; 
&lt;p&gt;We have a feature request open with Expo if you want to see it get in show your support https://expo.canny.io/feature-requests/p/add-mapbox-gl-support&lt;/p&gt; 
&lt;h2&gt;Testing with Jest&lt;/h2&gt; 
&lt;p&gt;This library provides some mocks which are necessary for running tests.&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&quot;jest&quot;: {
  &quot;preset&quot;: &quot;react-native&quot;,
  &quot;setupFilesAfterEnv&quot;: [&quot;@react-native-mapbox-gl/maps/setup-jest&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Developer Group&lt;/h2&gt; 
&lt;p&gt;Have a question or need some help? Join our &lt;a href=&quot;https://gitter.im/react-native-mapbox-gl/Lobby&quot;&gt;Gitter developer group&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>benmosher/eslint-plugin-import</title>
      <link>https://github.com/benmosher/eslint-plugin-import</link>
      <description>&lt;p&gt;ESLint plugin with rules that help validate proper imports.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eslint-plugin-import&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/benmosher/eslint-plugin-import&quot;&gt;&lt;img src=&quot;https://travis-ci.org/benmosher/eslint-plugin-import.svg?branch=master&quot; alt=&quot;build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/benmosher/eslint-plugin-import?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/benmosher/eslint-plugin-import/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://ci.appveyor.com/project/benmosher/eslint-plugin-import/branch/master&quot;&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/3mw2fifalmjlqf56/branch/master?svg=true&quot; alt=&quot;win32 build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/eslint-plugin-import&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/eslint-plugin-import.svg&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.npmtrends.com/eslint-plugin-import&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/eslint-plugin-import.svg?maxAge=2592000&quot; alt=&quot;npm downloads&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;This plugin intends to support linting of ES2015+ (ES6+) import/export syntax, and prevent issues with misspelling of file paths and import names. All the goodness that the ES2015+ static module syntax intends to provide, marked up in your editor.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;IF YOU ARE USING THIS WITH SUBLIME&lt;/strong&gt;: see the &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/#sublimelinter-eslint&quot;&gt;bottom section&lt;/a&gt; for important info.&lt;/p&gt; 
&lt;h2&gt;Rules&lt;/h2&gt; 
&lt;h3&gt;Static analysis&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure imports point to a file/module that can be resolved. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unresolved.md&quot;&gt;&lt;code&gt;no-unresolved&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure named imports correspond to a named export in the remote file. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/named.md&quot;&gt;&lt;code&gt;named&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure a default export is present, given a default import. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/default.md&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure imported namespaces contain dereferenced properties as they are dereferenced. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/namespace.md&quot;&gt;&lt;code&gt;namespace&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Restrict which files can be imported in a given folder (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-restricted-paths.md&quot;&gt;&lt;code&gt;no-restricted-paths&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid import of modules using absolute paths (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-absolute-path.md&quot;&gt;&lt;code&gt;no-absolute-path&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid &lt;code&gt;require()&lt;/code&gt; calls with expressions (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-dynamic-require.md&quot;&gt;&lt;code&gt;no-dynamic-require&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prevent importing the submodules of other modules (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-internal-modules.md&quot;&gt;&lt;code&gt;no-internal-modules&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid webpack loader syntax in imports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-webpack-loader-syntax.md&quot;&gt;&lt;code&gt;no-webpack-loader-syntax&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid a module from importing itself (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-self-import.md&quot;&gt;&lt;code&gt;no-self-import&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid a module from importing a module with a dependency path back to itself (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-cycle.md&quot;&gt;&lt;code&gt;no-cycle&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prevent unnecessary path segments in import and require statements (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-useless-path-segments.md&quot;&gt;&lt;code&gt;no-useless-path-segments&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid importing modules from parent directories (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-relative-parent-imports.md&quot;&gt;&lt;code&gt;no-relative-parent-imports&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Helpful warnings&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Report any invalid exports, i.e. re-export of the same name (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/export.md&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report use of exported name as identifier of default export (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-named-as-default.md&quot;&gt;&lt;code&gt;no-named-as-default&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report use of exported name as property of default export (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-named-as-default-member.md&quot;&gt;&lt;code&gt;no-named-as-default-member&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report imported names marked with &lt;code&gt;@deprecated&lt;/code&gt; documentation tag (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-deprecated.md&quot;&gt;&lt;code&gt;no-deprecated&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid the use of extraneous packages (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-extraneous-dependencies.md&quot;&gt;&lt;code&gt;no-extraneous-dependencies&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid the use of mutable exports with &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-mutable-exports.md&quot;&gt;&lt;code&gt;no-mutable-exports&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report modules without exports, or exports without matching import in another module (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unused-modules.md&quot;&gt;&lt;code&gt;no-unused-modules&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Module systems&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Report potentially ambiguous parse goal (&lt;code&gt;script&lt;/code&gt; vs. &lt;code&gt;module&lt;/code&gt;) (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/unambiguous.md&quot;&gt;&lt;code&gt;unambiguous&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report CommonJS &lt;code&gt;require&lt;/code&gt; calls and &lt;code&gt;module.exports&lt;/code&gt; or &lt;code&gt;exports.*&lt;/code&gt;. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-commonjs.md&quot;&gt;&lt;code&gt;no-commonjs&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report AMD &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;define&lt;/code&gt; calls. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-amd.md&quot;&gt;&lt;code&gt;no-amd&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;No Node.js builtin modules. (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-nodejs-modules.md&quot;&gt;&lt;code&gt;no-nodejs-modules&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Style guide&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure all imports appear before other statements (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/first.md&quot;&gt;&lt;code&gt;first&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure all exports appear after other statements (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/exports-last.md&quot;&gt;&lt;code&gt;exports-last&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Report repeated import of the same module in multiple places (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-duplicates.md&quot;&gt;&lt;code&gt;no-duplicates&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid namespace (a.k.a. &quot;wildcard&quot; &lt;code&gt;*&lt;/code&gt;) imports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-namespace.md&quot;&gt;&lt;code&gt;no-namespace&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Ensure consistent use of file extension within the import path (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/extensions.md&quot;&gt;&lt;code&gt;extensions&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Enforce a convention in module import order (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/order.md&quot;&gt;&lt;code&gt;order&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Enforce a newline after import statements (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/newline-after-import.md&quot;&gt;&lt;code&gt;newline-after-import&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prefer a default export if module exports a single name (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/prefer-default-export.md&quot;&gt;&lt;code&gt;prefer-default-export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Limit the maximum number of dependencies a module can have (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/max-dependencies.md&quot;&gt;&lt;code&gt;max-dependencies&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid unassigned imports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unassigned-import.md&quot;&gt;&lt;code&gt;no-unassigned-import&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid named default exports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-named-default.md&quot;&gt;&lt;code&gt;no-named-default&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid default exports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-default-export.md&quot;&gt;&lt;code&gt;no-default-export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid named exports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-named-export.md&quot;&gt;&lt;code&gt;no-named-export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Forbid anonymous values as default exports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-anonymous-default-export.md&quot;&gt;&lt;code&gt;no-anonymous-default-export&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Prefer named exports to be grouped together in a single export declaration (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/group-exports.md&quot;&gt;&lt;code&gt;group-exports&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Enforce a leading comment with the webpackChunkName for dynamic imports (&lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/dynamic-import-chunkname.md&quot;&gt;&lt;code&gt;dynamic-import-chunkname&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;&lt;code&gt;eslint-plugin-import&lt;/code&gt; for enterprise&lt;/h2&gt; 
&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; 
&lt;p&gt;The maintainers of &lt;code&gt;eslint-plugin-import&lt;/code&gt; and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&quot;https://tidelift.com/subscription/pkg/npm-eslint-plugin-import?utm_source=npm-eslint-plugin-import&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&quot;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install eslint-plugin-import -g
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or if you manage ESLint as a dev dependency:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;# inside your project&#39;s working tree
npm install eslint-plugin-import --save-dev
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All rules are off by default. However, you may configure them manually in your &lt;code&gt;.eslintrc.(yml|json|js)&lt;/code&gt;, or extend one of the canned configs:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
extends:
  - eslint:recommended
  - plugin:import/errors
  - plugin:import/warnings

# or configure manually:
plugins:
  - import

rules:
  import/no-unresolved: [2, {commonjs: true, amd: true}]
  import/named: 2
  import/namespace: 2
  import/default: 2
  import/export: 2
  # etc...
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;TypeScript&lt;/h1&gt; 
&lt;p&gt;You may use the following shortcut or assemble your own config using the granular settings described below.&lt;/p&gt; 
&lt;p&gt;Make sure you have installed &lt;a href=&quot;https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser&quot;&gt;&lt;code&gt;@typescript-eslint/parser&lt;/code&gt;&lt;/a&gt; which is used in the following configuration. Unfortunately NPM does not allow to list optional peer dependencies.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;extends:
  - eslint:recommended
  - plugin:import/errors
  - plugin:import/warnings
  - plugin:import/typescript # this line does the trick
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Resolvers&lt;/h1&gt; 
&lt;p&gt;With the advent of module bundlers and the current state of modules and module syntax specs, it&#39;s not always obvious where &lt;code&gt;import x from &#39;module&#39;&lt;/code&gt; should look to find the file behind &lt;code&gt;module&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Up through v0.10ish, this plugin has directly used substack&#39;s &lt;a href=&quot;https://www.npmjs.com/package/resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; plugin, which implements Node&#39;s import behavior. This works pretty well in most cases.&lt;/p&gt; 
&lt;p&gt;However, webpack allows a number of things in import module source strings that Node does not, such as loaders (&lt;code&gt;import &#39;file!./whatever&#39;&lt;/code&gt;) and a number of aliasing schemes, such as &lt;a href=&quot;http://webpack.github.io/docs/library-and-externals.html&quot;&gt;&lt;code&gt;externals&lt;/code&gt;&lt;/a&gt;: mapping a module id to a global name at runtime (allowing some modules to be included more traditionally via script tags).&lt;/p&gt; 
&lt;p&gt;In the interest of supporting both of these, v0.11 introduces resolvers.&lt;/p&gt; 
&lt;p&gt;Currently &lt;a href=&quot;https://www.npmjs.com/package/eslint-import-resolver-node&quot;&gt;Node&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/eslint-import-resolver-webpack&quot;&gt;webpack&lt;/a&gt; resolution have been implemented, but the resolvers are just npm packages, so &lt;a href=&quot;https://github.com/benmosher/eslint-plugin-import/wiki/Resolvers&quot;&gt;third party packages are supported&lt;/a&gt; (and encouraged!).&lt;/p&gt; 
&lt;p&gt;You can reference resolvers in several ways (in order of precedence):&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;as a conventional &lt;code&gt;eslint-import-resolver&lt;/code&gt; name, like &lt;code&gt;eslint-import-resolver-foo&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  # uses &#39;eslint-import-resolver-foo&#39;:
  import/resolver: foo
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .eslintrc.js
module.exports = {
  settings: {
    &#39;import/resolver&#39;: {
      foo: { someConfig: value }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;with a full npm module name, like &lt;code&gt;my-awesome-npm-module&lt;/code&gt;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/resolver: &#39;my-awesome-npm-module&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .eslintrc.js
module.exports = {
  settings: {
    &#39;import/resolver&#39;: {
      &#39;my-awesome-npm-module&#39;: { someConfig: value }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;with a filesystem path to resolver, defined in this example as a &lt;code&gt;computed property&lt;/code&gt; name:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// .eslintrc.js
module.exports = {
  settings: {
    &#39;import/resolver&#39;: {
      [path.resolve(&#39;../../../my-resolver&#39;)]: { someConfig: value }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Relative paths will be resolved relative to the source&#39;s nearest &lt;code&gt;package.json&lt;/code&gt; or the process&#39;s current working directory if no &lt;code&gt;package.json&lt;/code&gt; is found.&lt;/p&gt; 
&lt;p&gt;If you are interesting in writing a resolver, see the &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/resolvers/README.md&quot;&gt;spec&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;h1&gt;Settings&lt;/h1&gt; 
&lt;p&gt;You may set the following settings in your &lt;code&gt;.eslintrc&lt;/code&gt;:&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/extensions&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A list of file extensions that will be parsed as modules and inspected for &lt;code&gt;export&lt;/code&gt;s.&lt;/p&gt; 
&lt;p&gt;This defaults to &lt;code&gt;[&#39;.js&#39;]&lt;/code&gt;, unless you are using the &lt;code&gt;react&lt;/code&gt; shared config, in which case it is specified as &lt;code&gt;[&#39;.js&#39;, &#39;.jsx&#39;]&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;settings&quot;: {
  &quot;import/extensions&quot;: [
    &quot;.js&quot;,
    &quot;.jsx&quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you require more granular extension definitions, you can use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;settings&quot;: {
  &quot;import/resolver&quot;: {
    &quot;node&quot;: {
      &quot;extensions&quot;: [
        &quot;.js&quot;,
        &quot;.jsx&quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that this is different from (and likely a subset of) any &lt;code&gt;import/resolver&lt;/code&gt; extensions settings, which may include &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.coffee&lt;/code&gt;, etc. which will still factor into the &lt;code&gt;no-unresolved&lt;/code&gt; rule.&lt;/p&gt; 
&lt;p&gt;Also, the following &lt;code&gt;import/ignore&lt;/code&gt; patterns will overrule this list.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/ignore&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A list of regex strings that, if matched by a path, will not report the matching module if no &lt;code&gt;export&lt;/code&gt;s are found. In practice, this means rules other than &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unresolved.md#ignore&quot;&gt;&lt;code&gt;no-unresolved&lt;/code&gt;&lt;/a&gt; will not report on any &lt;code&gt;import&lt;/code&gt;s with (absolute filesystem) paths matching this pattern.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;no-unresolved&lt;/code&gt; has its own &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/docs/rules/no-unresolved.md#ignore&quot;&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt; setting.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;settings:
  import/ignore:
    - \.coffee$          # fraught with parse errors
    - \.(scss|less|css)$ # can&#39;t parse unprocessed CSS modules, either
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;import/core-modules&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;An array of additional modules to consider as &quot;core&quot; modules--modules that should be considered resolved but have no path on the filesystem. Your resolver may already define some of these (for example, the Node resolver knows about &lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt;), so you need not redefine those.&lt;/p&gt; 
&lt;p&gt;For example, Electron exposes an &lt;code&gt;electron&lt;/code&gt; module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import &#39;electron&#39;  // without extra config, will be flagged as unresolved!
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;that would otherwise be unresolved. To avoid this, you may provide &lt;code&gt;electron&lt;/code&gt; as a core module:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/core-modules: [ electron ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In Electron&#39;s specific case, there is a shared config named &lt;code&gt;electron&lt;/code&gt; that specifies this for you.&lt;/p&gt; 
&lt;p&gt;Contribution of more such shared configs for other platforms are welcome!&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/external-module-folders&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;An array of folders. Resolved modules only from those folders will be considered as &quot;external&quot;. By default - &lt;code&gt;[&quot;node_modules&quot;]&lt;/code&gt;. Makes sense if you have configured your path or webpack to handle your internal paths differently and want to consider modules from some folders, for example &lt;code&gt;bower_components&lt;/code&gt; or &lt;code&gt;jspm_modules&lt;/code&gt;, as &quot;external&quot;.&lt;/p&gt; 
&lt;p&gt;This option is also useful in a monorepo setup: list here all directories that contain monorepo&#39;s packages and they will be treated as external ones no matter which resolver is used.&lt;/p&gt; 
&lt;p&gt;Each item in this array is either a folder&#39;s name, its subpath, or its absolute prefix path:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;jspm_modules&lt;/code&gt; will match any file or folder named &lt;code&gt;jspm_modules&lt;/code&gt; or which has a direct or non-direct parent named &lt;code&gt;jspm_modules&lt;/code&gt;, e.g. &lt;code&gt;/home/me/project/jspm_modules&lt;/code&gt; or &lt;code&gt;/home/me/project/jspm_modules/some-pkg/index.js&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;packages/core&lt;/code&gt; will match any path that contains these two segments, for example &lt;code&gt;/home/me/project/packages/core/src/utils.js&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;/home/me/project/packages&lt;/code&gt; will only match files and directories inside this directory, and the directory itself.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Please note that incomplete names are not allowed here so &lt;code&gt;components&lt;/code&gt; won&#39;t match &lt;code&gt;bower_components&lt;/code&gt; and &lt;code&gt;packages/ui&lt;/code&gt; won&#39;t match &lt;code&gt;packages/ui-utils&lt;/code&gt; (but will match &lt;code&gt;packages/ui/utils&lt;/code&gt;).&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/parsers&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A map from parsers to file extension arrays. If a file extension is matched, the dependency parser will require and use the map key as the parser instead of the configured ESLint parser. This is useful if you&#39;re inter-op-ing with TypeScript directly using webpack, for example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/parsers:
    @typescript-eslint/parser: [ .ts, .tsx ]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In this case, &lt;a href=&quot;https://www.npmjs.com/package/@typescript-eslint/parser&quot;&gt;&lt;code&gt;@typescript-eslint/parser&lt;/code&gt;&lt;/a&gt; must be installed and require-able from the running &lt;code&gt;eslint&lt;/code&gt; module&#39;s location (i.e., install it as a peer of ESLint).&lt;/p&gt; 
&lt;p&gt;This is currently only tested with &lt;code&gt;@typescript-eslint/parser&lt;/code&gt; (and its predecessor, &lt;code&gt;typescript-eslint-parser&lt;/code&gt;) but should theoretically work with any moderately ESTree-compliant parser.&lt;/p&gt; 
&lt;p&gt;It&#39;s difficult to say how well various plugin features will be supported, too, depending on how far down the rabbit hole goes. Submit an issue if you find strange behavior beyond here, but steel your heart against the likely outcome of closing with &lt;code&gt;wontfix&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/resolver&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/#resolvers&quot;&gt;resolvers&lt;/a&gt;.&lt;/p&gt; 
&lt;h4&gt;&lt;code&gt;import/cache&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;Settings for cache behavior. Memoization is used at various levels to avoid the copious amount of &lt;code&gt;fs.statSync&lt;/code&gt;/module parse calls required to correctly report errors.&lt;/p&gt; 
&lt;p&gt;For normal &lt;code&gt;eslint&lt;/code&gt; console runs, the cache lifetime is irrelevant, as we can strongly assume that files should not be changing during the lifetime of the linter process (and thus, the cache in memory)&lt;/p&gt; 
&lt;p&gt;For long-lasting processes, like &lt;a href=&quot;https://www.npmjs.com/package/eslint_d&quot;&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/eslint-loader&quot;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt;, however, it&#39;s important that there be some notion of staleness.&lt;/p&gt; 
&lt;p&gt;If you never use &lt;a href=&quot;https://www.npmjs.com/package/eslint_d&quot;&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/eslint-loader&quot;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt;, you may set the cache lifetime to &lt;code&gt;Infinity&lt;/code&gt; and everything should be fine:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/cache:
    lifetime: ∞  # or Infinity
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Otherwise, set some integer, and cache entries will be evicted after that many seconds have elapsed:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/cache:
    lifetime: 5  # 30 is the default
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;&lt;code&gt;import/internal-regex&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;A regex for packages should be treated as internal. Useful when you are utilizing a monorepo setup or developing a set of packages that depend on each other.&lt;/p&gt; 
&lt;p&gt;By default, any package referenced from &lt;a href=&quot;https://raw.githubusercontent.com/benmosher/eslint-plugin-import/master/#importexternal-module-folders&quot;&gt;&lt;code&gt;import/external-module-folders&lt;/code&gt;&lt;/a&gt; will be considered as &quot;external&quot;, including packages in a monorepo like yarn workspace or lerna environment. If you want to mark these packages as &quot;internal&quot; this will be useful.&lt;/p&gt; 
&lt;p&gt;For example, if your packages in a monorepo are all in &lt;code&gt;@scope&lt;/code&gt;, you can configure &lt;code&gt;import/internal-regex&lt;/code&gt; like this&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# .eslintrc.yml
settings:
  import/internal-regex: ^@scope/
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;SublimeLinter-eslint&lt;/h2&gt; 
&lt;p&gt;SublimeLinter-eslint introduced a change to support &lt;code&gt;.eslintignore&lt;/code&gt; files which altered the way file paths are passed to ESLint when linting during editing. This change sends a relative path instead of the absolute path to the file (as ESLint normally provides), which can make it impossible for this plugin to resolve dependencies on the filesystem.&lt;/p&gt; 
&lt;p&gt;This workaround should no longer be necessary with the release of ESLint 2.0, when &lt;code&gt;.eslintignore&lt;/code&gt; will be updated to work more like a &lt;code&gt;.gitignore&lt;/code&gt;, which should support proper ignoring of absolute paths via &lt;code&gt;--stdin-filename&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In the meantime, see &lt;a href=&quot;https://github.com/roadhump/SublimeLinter-eslint/issues/58&quot;&gt;roadhump/SublimeLinter-eslint#58&lt;/a&gt; for more details and discussion, but essentially, you may find you need to add the following &lt;code&gt;SublimeLinter&lt;/code&gt; config to your Sublime project file:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;folders&quot;:
    [
        {
            &quot;path&quot;: &quot;code&quot;
        }
    ],
    &quot;SublimeLinter&quot;:
    {
        &quot;linters&quot;:
        {
            &quot;eslint&quot;:
            {
                &quot;chdir&quot;: &quot;${project}/code&quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that &lt;code&gt;${project}/code&lt;/code&gt; matches the &lt;code&gt;code&lt;/code&gt; provided at &lt;code&gt;folders[0].path&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The purpose of the &lt;code&gt;chdir&lt;/code&gt; setting, in this case, is to set the working directory from which ESLint is executed to be the same as the directory on which SublimeLinter-eslint bases the relative path it provides.&lt;/p&gt; 
&lt;p&gt;See the SublimeLinter docs on &lt;a href=&quot;http://www.sublimelinter.com/en/latest/linter_settings.html#chdir&quot;&gt;&lt;code&gt;chdir&lt;/code&gt;&lt;/a&gt; for more information, in case this does not work with your project.&lt;/p&gt; 
&lt;p&gt;If you are not using &lt;code&gt;.eslintignore&lt;/code&gt;, or don&#39;t have a Sublime project file, you can also do the following via a &lt;code&gt;.sublimelinterrc&lt;/code&gt; file in some ancestor directory of your code:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;linters&quot;: {
    &quot;eslint&quot;: {
      &quot;args&quot;: [&quot;--stdin-filename&quot;, &quot;@&quot;]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I also found that I needed to set &lt;code&gt;rc_search_limit&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;, which removes the file hierarchy search limit when looking up the directory tree for &lt;code&gt;.sublimelinterrc&lt;/code&gt;:&lt;/p&gt; 
&lt;p&gt;In Package Settings / SublimeLinter / User Settings:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;user&quot;: {
    &quot;rc_search_limit&quot;: null
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;I believe this defaults to &lt;code&gt;3&lt;/code&gt;, so you may not need to alter it depending on your project folder max depth.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cocos-creator/engine</title>
      <link>https://github.com/cocos-creator/engine</link>
      <description>&lt;p&gt;Cocos Creator is a complete package of game development tools and workflow, including a game engine, resource management, scene editing, game preview, debug and publish one project to multiple platforms.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cocos Creator&lt;/h1&gt; 
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1503156/67261891-3cfdfb00-f4d5-11e9-9b2d-15ff2cb015f4.png&quot; alt=&quot;2.2.0 Main Window&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Cocos Creator is a complete package of game development tools and workflow, including a game engine, resource management, scene editing, game preview, debug and publish one project to multiple platforms. Cocos Creator focused on content creation, which has realized features like thorough scriptability, componentization and data driven, etc. on the basis of Cocos2d-x. With JavaScript, you can scripting your component in no time. The editor and engine extension is also made with JavaScript so you can make games and refine your tool in a single programming language. Cocos Creator is an provides an innovative, easy to use toolset such as the UI system and Animation editor. The toolset will be expanding continuously and quickly, thanks to the open editor extension system.&lt;/p&gt; 
&lt;p&gt;This repo is the engine framework for Cocos Creator. Cocos Creator&#39;s in-editor scene view and web runtime share the same framework, which is the content of this repo. It&#39;s originally forked from &lt;a href=&quot;https://github.com/cocos2d/cocos2d-html5/&quot;&gt;Cocos2d-html5&lt;/a&gt;, we build up an Entity Component architecture on it to meet the needs of Cocos Creator.&lt;/p&gt; 
&lt;p&gt;This framework is a cross-platform game engine written in JavaScript and licensed under MIT. It supports major desktop and mobile browsers, it&#39;s also compatible with &lt;a href=&quot;https://github.com/cocos-creator/cocos2d-x-lite&quot;&gt;Cocos2d Javascript Binding engine&lt;/a&gt; to support native platforms like iOS, Android, Win32, macOS.&lt;/p&gt; 
&lt;p&gt;The framework is naturally integrated with Cocos Creator, so it&#39;s not designed to be used independently.&lt;/p&gt; 
&lt;h2&gt;Developer&lt;/h2&gt; 
&lt;h3&gt;Prerequisite&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://nodejs.org/&quot;&gt;node.js v8.0.0+&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Install &lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md&quot;&gt;gulp-cli v3.9.0+&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Install&lt;/h3&gt; 
&lt;p&gt;In cloned project folder, run the following command to setup dev environment:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Initialize gulp task dependencies
# npm is a builtin CLI when you install Node.js
npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This is all you have to do to set engine development environment.&lt;/p&gt; 
&lt;h3&gt;Build&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gulp build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If the compilation process encounters a &quot;JavaScript heap out memory&quot; warning, you can use the following command line&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gulp build --max-old-space-size=8192
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Test&lt;/h3&gt; 
&lt;h4&gt;Prerequisite&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;Install &lt;a href=&quot;http://expressjs.com/&quot;&gt;express&lt;/a&gt;: &lt;code&gt;npm install express&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Install gulp-qunit: &lt;code&gt;npm install gulp-qunit&lt;/code&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Unit Test&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Test in CLI&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm test
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Test in browser&lt;/p&gt; 
  &lt;ol&gt; 
   &lt;li&gt; &lt;p&gt;Build for testing.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;gulp build-test
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Start express in cloned project folder.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node test/qunit/server.js
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
   &lt;li&gt; &lt;p&gt;Open &lt;a href=&quot;http://localhost:8511/bin/qunit-runner.html&quot;&gt;http://localhost:8511/bin/qunit-runner.html&lt;/a&gt; in your browser.&lt;/p&gt; &lt;/li&gt; 
  &lt;/ol&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Online one-click Setup&lt;/h3&gt; 
&lt;p&gt;You can use Gitpod(an online IDE which is free for Open Source) for developing the project online. With a single click it will launch a workspace and automatically:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;clone the &lt;code&gt;Cocos Creator&lt;/code&gt; repo.&lt;/li&gt; 
 &lt;li&gt;install all the dependencies mentioned above.&lt;/li&gt; 
 &lt;li&gt;run &lt;code&gt;gulp build&lt;/code&gt;, &lt;code&gt;npm test&lt;/code&gt; in separate terminals.&lt;/li&gt; 
 &lt;li&gt;start the express server and open &lt;a href=&quot;http://localhost:8511/bin/qunit-runner.html&quot;&gt;http://localhost:8511/bin/qunit-runner.html&lt;/a&gt; in the right corner of the IDE.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitpod.io/from-referrer/&quot;&gt;&lt;img src=&quot;https://gitpod.io/button/open-in-gitpod.svg&quot; alt=&quot;Open in Gitpod&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;DebugInfos&lt;/h3&gt; 
&lt;p&gt;View &lt;a href=&quot;https://github.com/cocos-creator/engine/blob/master/EngineErrorMap.md&quot;&gt;EngineErrorMap.md&lt;/a&gt; All the debug infos are defined in file EngineErrorMap.md. The file DebugInfos.json will be generated based on EngineErrorMap.md, when run &lt;code&gt;gulp build&lt;/code&gt; command.&lt;/p&gt; 
&lt;p&gt;For details below:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;Define log in EngineErrorMap.md&lt;/p&gt; &lt;p&gt;example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;### 1001

cocos2d: removeAction: Target not found
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Define deprecated log in EngineErrorMap.md The log should be marked as DEPRECATED when then logId is no longer referenced in the project.&lt;/p&gt; &lt;p&gt;example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;### 1000

&amp;lt;!-- DEPRECATED --&amp;gt;
cc.ActionManager.addAction(): action must be non-null
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Useful links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.cocos.com/products#CocosCreator&quot;&gt;Official site&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.cocos.com/creator&quot;&gt;Download&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.cocos.com/creator/manual/&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://docs.cocos.com/creator/api/&quot;&gt;API References&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discuss.cocos2d-x.org/c/creator&quot;&gt;Forum&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>flot/flot</title>
      <link>https://github.com/flot/flot</link>
      <description>&lt;p&gt;Attractive JavaScript charts for jQuery&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flot &lt;a href=&quot;https://travis-ci.org/flot/flot&quot;&gt;&lt;img src=&quot;https://travis-ci.org/flot/flot.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://circleci.com/gh/flot/flot&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/flot/flot.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/flot/flot?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/github/flot/flot/badge.svg?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://greenkeeper.io/&quot;&gt;&lt;img src=&quot;https://badges.greenkeeper.io/flot/flot.svg&quot; alt=&quot;Greenkeeper badge&quot;&gt;&lt;/a&gt;&lt;/h1&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;flot is a JavaScript plotting library for engineering and scientific applications derived from Flot: &lt;a href=&quot;http://www.flotcharts.org/&quot;&gt;http://www.flotcharts.org/&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Take a look at the the examples in examples/index.html; they should give a good impression of what flot can do, and the source code of the examples is probably the fastest way to learn how to use flot.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Just include the JavaScript file after you&#39;ve included jQuery.&lt;/p&gt; 
&lt;p&gt;Generally, all modern browsers are supported.&lt;/p&gt; 
&lt;p&gt;You need at least jQuery 1.2.6, but try at least 1.3.2 for interactive charts because of performance improvements in event handling.&lt;/p&gt; 
&lt;h2&gt;Basic usage&lt;/h2&gt; 
&lt;p&gt;Create a placeholder div to put the graph in:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div id=&quot;placeholder&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You need to set the width and height of this div, otherwise the plot library doesn&#39;t know how to scale the graph. You can do it inline like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div id=&quot;placeholder&quot; style=&quot;width:600px;height:300px&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also do it with an external stylesheet. Make sure that the placeholder isn&#39;t within something with a display:none CSS property - in that case, Flot has trouble measuring label dimensions which results in garbled looks and might have trouble measuring the placeholder dimensions which is fatal (it&#39;ll throw an exception).&lt;/p&gt; 
&lt;p&gt;Then when the div is ready in the DOM, which is usually on document ready, run the plot function:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$.plot($(&quot;#placeholder&quot;), data, options);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Here, data is an array of data series and options is an object with settings if you want to customize the plot. Take a look at the examples for some ideas of what to put in or look at the &lt;a href=&quot;https://raw.githubusercontent.com/flot/flot/master/API.md&quot;&gt;API reference&lt;/a&gt;. Here&#39;s a quick example that&#39;ll draw a line from (0, 0) to (1, 1):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$.plot($(&quot;#placeholder&quot;), [ [[0, 0], [1, 1]] ], { yaxis: { max: 1 } });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The plot function immediately draws the chart and then returns a plot object with a couple of methods.&lt;/p&gt; 
&lt;h2&gt;Documentation and examples&lt;/h2&gt; 
&lt;p&gt;API Documentation is available here: &lt;a href=&quot;https://raw.githubusercontent.com/flot/flot/master/docs/API.md&quot;&gt;API reference&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;About how the plugins work: &lt;a href=&quot;https://raw.githubusercontent.com/flot/flot/master/docs/PLUGINS.md&quot;&gt;Plugins&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;High level overview on how interactions are handled internally: &lt;a href=&quot;https://raw.githubusercontent.com/flot/flot/master/docs/interactions.md&quot;&gt;Interactions&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Examples are included in the examples folder of this repository, but they can be tried out online as well: &lt;a href=&quot;https://rawgit.com/flot/flot/master/examples/index.html&quot;&gt;Examples&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;CircleCI&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt; is used in this repo to run &lt;a href=&quot;https://www.npmjs.com/package/dont-break&quot;&gt;dont-break&lt;/a&gt;, which checks if the current version of flot breaks unit tests on specified dependent projects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lerna/lerna</title>
      <link>https://github.com/lerna/lerna</link>
      <description>&lt;p&gt;🐉 A tool for managing JavaScript projects with multiple packages.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#getting-started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#how-it-works&quot;&gt;How It Works&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Commands 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/publish#readme&quot;&gt;&lt;code&gt;lerna publish&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/version#readme&quot;&gt;&lt;code&gt;lerna version&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/bootstrap#readme&quot;&gt;&lt;code&gt;lerna bootstrap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/list#readme&quot;&gt;&lt;code&gt;lerna list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/changed#readme&quot;&gt;&lt;code&gt;lerna changed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/diff#readme&quot;&gt;&lt;code&gt;lerna diff&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/exec#readme&quot;&gt;&lt;code&gt;lerna exec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/run#readme&quot;&gt;&lt;code&gt;lerna run&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/init#readme&quot;&gt;&lt;code&gt;lerna init&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/add#readme&quot;&gt;&lt;code&gt;lerna add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/clean#readme&quot;&gt;&lt;code&gt;lerna clean&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/import#readme&quot;&gt;&lt;code&gt;lerna import&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/link#readme&quot;&gt;&lt;code&gt;lerna link&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/create#readme&quot;&gt;&lt;code&gt;lerna create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/info#readme&quot;&gt;&lt;code&gt;lerna info&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#concepts&quot;&gt;Concepts&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/#lernajson&quot;&gt;Lerna.json&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/core/global-options&quot;&gt;Global Flags&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/core/filter-options&quot;&gt;Filter Flags&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;Splitting up large codebases into separate independently versioned packages is extremely useful for code sharing. However, making changes across many repositories is &lt;em&gt;messy&lt;/em&gt; and difficult to track, and testing across repositories becomes complicated very quickly.&lt;/p&gt; 
&lt;p&gt;To solve these (and many other) problems, some projects will organize their codebases into multi-package repositories (sometimes called &lt;a href=&quot;https://github.com/babel/babel/blob/master/doc/design/monorepo.md&quot;&gt;monorepos&lt;/a&gt;). Projects like &lt;a href=&quot;https://github.com/babel/babel/tree/master/packages&quot;&gt;Babel&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/react/tree/master/packages&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://github.com/angular/angular/tree/master/modules&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/emberjs/ember.js/tree/master/packages&quot;&gt;Ember&lt;/a&gt;, &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages&quot;&gt;Meteor&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/jest/tree/master/packages&quot;&gt;Jest&lt;/a&gt;, and many others develop all of their packages within a single repository.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Lerna can also reduce the time and space requirements for numerous copies of packages in development and build environments - normally a downside of dividing a project into many separate NPM packages. See the &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/doc/hoist.md&quot;&gt;hoist documentation&lt;/a&gt; for details.&lt;/p&gt; 
&lt;h3&gt;What does a Lerna repo look like?&lt;/h3&gt; 
&lt;p&gt;There&#39;s actually very little to it. You have a file structure that looks like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;my-lerna-repo/
  package.json
  packages/
    package-1/
      package.json
    package-2/
      package.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;What can Lerna do?&lt;/h3&gt; 
&lt;p&gt;The two primary commands in Lerna are &lt;code&gt;lerna bootstrap&lt;/code&gt; and &lt;code&gt;lerna publish&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; will link dependencies in the repo together. &lt;code&gt;publish&lt;/code&gt; will help publish any updated packages.&lt;/p&gt; 
&lt;h3&gt;What can&#39;t Lerna do?&lt;/h3&gt; 
&lt;p&gt;Lerna is not a deployment tool for serverless monorepos. Hoisting might be incompatible with traditional serverless monorepo deployment techniques.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;The instructions below are for Lerna 3.x. We recommend using it instead of 2.x for a new Lerna project.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Let&#39;s start by installing Lerna as a dev dependency of your project with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;$ mkdir lerna-repo &amp;amp;&amp;amp; cd $_
$ npx lerna init
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This will create a &lt;code&gt;lerna.json&lt;/code&gt; configuration file as well as a &lt;code&gt;packages&lt;/code&gt; folder, so your folder should now look like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;lerna-repo/
  packages/
  package.json
  lerna.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;How It Works&lt;/h2&gt; 
&lt;p&gt;Lerna allows you to manage your project using one of two modes: Fixed or Independent.&lt;/p&gt; 
&lt;h3&gt;Fixed/Locked mode (default)&lt;/h3&gt; 
&lt;p&gt;Fixed mode Lerna projects operate on a single version line. The version is kept in the &lt;code&gt;lerna.json&lt;/code&gt; file at the root of your project under the &lt;code&gt;version&lt;/code&gt; key. When you run &lt;code&gt;lerna publish&lt;/code&gt;, if a module has been updated since the last time a release was made, it will be updated to the new version you&#39;re releasing. This means that you only publish a new version of a package when you need to.&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Note: If you have a major version zero, all updates are &lt;a href=&quot;https://semver.org/#spec-item-4&quot;&gt;considered breaking&lt;/a&gt;. Because of that, running &lt;code&gt;lerna publish&lt;/code&gt; with a major version zero and choosing any non-prerelease version number will cause new versions to be published for all packages, even if not all packages have changed since the last release.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;This is the mode that &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; is currently using. Use this if you want to automatically tie all package versions together. One issue with this approach is that a major change in any package will result in all packages having a new major version.&lt;/p&gt; 
&lt;h3&gt;Independent mode&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;lerna init --independent&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Independent mode Lerna projects allows maintainers to increment package versions independently of each other. Each time you publish, you will get a prompt for each package that has changed to specify if it&#39;s a patch, minor, major or custom change.&lt;/p&gt; 
&lt;p&gt;Independent mode allows you to more specifically update versions for each package and makes sense for a group of components. Combining this mode with something like &lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot;&gt;semantic-release&lt;/a&gt; would make it less painful. (There is work on this already at &lt;a href=&quot;https://github.com/atlassian/lerna-semantic-release&quot;&gt;atlassian/lerna-semantic-release&lt;/a&gt;).&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Set the &lt;code&gt;version&lt;/code&gt; key in &lt;code&gt;lerna.json&lt;/code&gt; to &lt;code&gt;independent&lt;/code&gt; to run in independent mode.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;If you encounter any issues while using Lerna please check out our &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/doc/troubleshooting.md&quot;&gt;Troubleshooting&lt;/a&gt; document where you might find the answer to your problem.&lt;/p&gt; 
&lt;h2&gt;Frequently asked questions&lt;/h2&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/FAQ.md&quot;&gt;FAQ.md&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Concepts&lt;/h2&gt; 
&lt;p&gt;Lerna will log to a &lt;code&gt;lerna-debug.log&lt;/code&gt; file (same as &lt;code&gt;npm-debug.log&lt;/code&gt;) when it encounters an error running a command.&lt;/p&gt; 
&lt;p&gt;Lerna also has support for &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped packages&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Run &lt;code&gt;lerna --help&lt;/code&gt; to see all available commands and options.&lt;/p&gt; 
&lt;h3&gt;lerna.json&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;version&quot;: &quot;1.1.3&quot;,
  &quot;npmClient&quot;: &quot;npm&quot;,
  &quot;command&quot;: {
    &quot;publish&quot;: {
      &quot;ignoreChanges&quot;: [&quot;ignored-file&quot;, &quot;*.md&quot;],
      &quot;message&quot;: &quot;chore(release): publish&quot;,
      &quot;registry&quot;: &quot;https://npm.pkg.github.com&quot;
    },
    &quot;bootstrap&quot;: {
      &quot;ignore&quot;: &quot;component-*&quot;,
      &quot;npmClientArgs&quot;: [&quot;--no-package-lock&quot;]
    }
  },
  &quot;packages&quot;: [&quot;packages/*&quot;]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;version&lt;/code&gt;: the current version of the repository.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npmClient&lt;/code&gt;: an option to specify a specific client to run commands with (this can also be specified on a per command basis). Change to &lt;code&gt;&quot;yarn&quot;&lt;/code&gt; to run all commands with yarn. Defaults to &quot;npm&quot;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.ignoreChanges&lt;/code&gt;: an array of globs that won&#39;t be included in &lt;code&gt;lerna changed/publish&lt;/code&gt;. Use this to prevent publishing a new version unnecessarily for changes, such as fixing a &lt;code&gt;README.md&lt;/code&gt; typo.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.message&lt;/code&gt;: a custom commit message when performing version updates for publication. See &lt;a href=&quot;https://raw.githubusercontent.com/lerna/lerna/main/commands/version#--message-msg&quot;&gt;@lerna/version&lt;/a&gt; for more details.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.publish.registry&lt;/code&gt;: use it to set a custom registry url to publish to instead of npmjs.org, you must already be authenticated if required.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.ignore&lt;/code&gt;: an array of globs that won&#39;t be bootstrapped when running the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.npmClientArgs&lt;/code&gt;: array of strings that will be passed as arguments directly to &lt;code&gt;npm install&lt;/code&gt; during the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;command.bootstrap.scope&lt;/code&gt;: an array of globs that restricts which packages will be bootstrapped when running the &lt;code&gt;lerna bootstrap&lt;/code&gt; command.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;packages&lt;/code&gt;: Array of globs to use as package locations.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The packages config in &lt;code&gt;lerna.json&lt;/code&gt; is a list of globs that match directories containing a &lt;code&gt;package.json&lt;/code&gt;, which is how lerna recognizes &quot;leaf&quot; packages (vs the &quot;root&quot; &lt;code&gt;package.json&lt;/code&gt;, which is intended to manage the dev dependencies and scripts for the entire repo).&lt;/p&gt; 
&lt;p&gt;By default, lerna initializes the packages list as &lt;code&gt;[&quot;packages/*&quot;]&lt;/code&gt;, but you can also use another directory such as &lt;code&gt;[&quot;modules/*&quot;]&lt;/code&gt;, or &lt;code&gt;[&quot;package1&quot;, &quot;package2&quot;]&lt;/code&gt;. The globs defined are relative to the directory that &lt;code&gt;lerna.json&lt;/code&gt; lives in, which is usually the repository root. The only restriction is that you can&#39;t directly nest package locations, but this is a restriction shared by &quot;normal&quot; npm packages as well.&lt;/p&gt; 
&lt;p&gt;For example, &lt;code&gt;[&quot;packages/*&quot;, &quot;src/**&quot;]&lt;/code&gt; matches this tree:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;packages/
├── foo-pkg
│   └── package.json
├── bar-pkg
│   └── package.json
├── baz-pkg
│   └── package.json
└── qux-pkg
    └── package.json
src/
├── admin
│   ├── my-app
│   │   └── package.json
│   ├── stuff
│   │   └── package.json
│   └── things
│       └── package.json
├── profile
│   └── more-things
│       └── package.json
├── property
│   ├── more-stuff
│   │   └── package.json
│   └── other-things
│       └── package.json
└── upload
    └── other-stuff
        └── package.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Locating leaf packages under &lt;code&gt;packages/*&lt;/code&gt; is considered a &quot;best-practice&quot;, but is not a requirement for using Lerna.&lt;/p&gt; 
&lt;h4&gt;Legacy Fields&lt;/h4&gt; 
&lt;p&gt;Some &lt;code&gt;lerna.json&lt;/code&gt; fields are no longer in use. Those of note include:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lerna&lt;/code&gt;: originally used to indicate the current version of Lerna. &lt;a href=&quot;https://github.com/lerna/lerna/pull/1122&quot;&gt;Made obsolete&lt;/a&gt; and &lt;a href=&quot;https://github.com/lerna/lerna/pull/1225&quot;&gt;removed&lt;/a&gt; in v3&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Common &lt;code&gt;devDependencies&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Most &lt;code&gt;devDependencies&lt;/code&gt; can be pulled up to the root of a Lerna repo with &lt;code&gt;lerna link convert&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;The above command will automatically hoist things and use relative &lt;code&gt;file:&lt;/code&gt; specifiers.&lt;/p&gt; 
&lt;p&gt;Hoisting has a few benefits:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;All packages use the same version of a given dependency&lt;/li&gt; 
 &lt;li&gt;Can keep dependencies at the root up-to-date with an automated tool such as &lt;a href=&quot;https://greenkeeper.io/&quot;&gt;GreenKeeper&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dependency installation time is reduced&lt;/li&gt; 
 &lt;li&gt;Less storage is needed&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Note that &lt;code&gt;devDependencies&lt;/code&gt; providing &quot;binary&quot; executables that are used by npm scripts still need to be installed directly in each package where they&#39;re used.&lt;/p&gt; 
&lt;p&gt;For example the &lt;code&gt;nsp&lt;/code&gt; dependency is necessary in this case for &lt;code&gt;lerna run nsp&lt;/code&gt; (and &lt;code&gt;npm run nsp&lt;/code&gt; within the package&#39;s directory) to work correctly:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;scripts&quot;: {
    &quot;nsp&quot;: &quot;nsp&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;nsp&quot;: &quot;^2.3.3&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Git Hosted Dependencies&lt;/h3&gt; 
&lt;p&gt;Lerna allows target versions of local dependent packages to be written as a &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;git remote url&lt;/a&gt; with a &lt;code&gt;committish&lt;/code&gt; (e.g., &lt;code&gt;#v1.0.0&lt;/code&gt; or &lt;code&gt;#semver:^1.0.0&lt;/code&gt;) instead of the normal numeric version range. This allows packages to be distributed via git repositories when packages must be private and a &lt;a href=&quot;https://www.dotconferences.com/2016/05/fabien-potencier-monolithic-repositories-vs-many-repositories&quot;&gt;private npm registry is not desired&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Please note that lerna does &lt;em&gt;not&lt;/em&gt; perform the actual splitting of git history into the separate read-only repositories. This is the responsibility of the user. (See &lt;a href=&quot;https://github.com/lerna/lerna/pull/1033#issuecomment-335894690&quot;&gt;this comment&lt;/a&gt; for implementation details)&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;// packages/pkg-1/package.json
{
  name: &quot;pkg-1&quot;,
  version: &quot;1.0.0&quot;,
  dependencies: {
    &quot;pkg-2&quot;: &quot;github:example-user/pkg-2#v1.0.0&quot;
  }
}

// packages/pkg-2/package.json
{
  name: &quot;pkg-2&quot;,
  version: &quot;1.0.0&quot;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;In the example above,&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;lerna bootstrap&lt;/code&gt; will properly symlink &lt;code&gt;pkg-2&lt;/code&gt; into &lt;code&gt;pkg-1&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;lerna publish&lt;/code&gt; will update the committish (&lt;code&gt;#v1.0.0&lt;/code&gt;) in &lt;code&gt;pkg-1&lt;/code&gt; when &lt;code&gt;pkg-2&lt;/code&gt; changes.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;README Badge&lt;/h3&gt; 
&lt;p&gt;Using Lerna? Add a README badge to show it off: &lt;a href=&quot;https://lerna.js.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg&quot; alt=&quot;lerna&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Wizard&lt;/h3&gt; 
&lt;p&gt;If you prefer some guidance for cli (in case you&#39;re about to start using lerna or introducing it to a new team), you might like &lt;a href=&quot;https://github.com/szarouski/lerna-wizard&quot;&gt;lerna-wizard&lt;/a&gt;. It will lead you through a series of well-defined steps:&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/szarouski/lerna-wizard/2e269fb5a3af7100397a1f874cea3fa78089486e/demo.png&quot; alt=&quot;lerna-wizard demo image&quot;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KhronosGroup/Vulkan-Docs</title>
      <link>https://github.com/KhronosGroup/Vulkan-Docs</link>
      <description>&lt;p&gt;The Vulkan API Specification and related tools&lt;/p&gt;&lt;hr&gt;&lt;p&gt;// Copyright (c) 2017-2020 The Khronos Group Inc. // // SPDX-License-Identifier: CC-BY-4.0&lt;/p&gt; 
&lt;p&gt;ifdef::env-github[] :note-caption: :information_source: endif::[]&lt;/p&gt; 
&lt;p&gt;= Vulkan^(R)^ API Documentation Project&lt;/p&gt; 
&lt;p&gt;This repository contains sources for the formal documentation of the Vulkan API. This includes:&lt;/p&gt; 
&lt;p&gt;[options=&quot;compact&quot;]&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The Vulkan API Specification&lt;/li&gt; 
 &lt;li&gt;Specification of Vulkan extensions&lt;/li&gt; 
 &lt;li&gt;API reference (&quot;&lt;code&gt;man&lt;/code&gt;&quot;) pages&lt;/li&gt; 
 &lt;li&gt;The XML API Registry (also mirrored at link:https://github.com/KhronosGroup/Vulkan-Headers[Vulkan-Headers])&lt;/li&gt; 
 &lt;li&gt;Vulkan header files (also mirrored at link:https://github.com/KhronosGroup/Vulkan-Headers[Vulkan-Headers])&lt;/li&gt; 
 &lt;li&gt;Related tools and scripts.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The authoritative public repository is located at link:https://github.com/KhronosGroup/Vulkan-Docs/[Vulkan-Docs]. It hosts a public Issue tracker, and outside developers can file proposed changes (Pull Requests) against the Specification, subject to approval by Khronos.&lt;/p&gt; 
&lt;p&gt;If in doubt where to submit your Issue, consult the link:https://github.com/KhronosGroup/Vulkan-Ecosystem[Vulkan-Ecosystem] repository.&lt;/p&gt; 
&lt;p&gt;== External Contributions&lt;/p&gt; 
&lt;p&gt;Khronos welcomes feedback in Github Issues, and proposed changes in Github Pull Requests (PRs), but will not necessarily accept all such changes.&lt;/p&gt; 
&lt;p&gt;Please keep your issues and pull requests focused on solving a single problem. Broader feedback that tries to solve multiple problems, or touches many parts of the Specification at once, is difficult for the Vulkan Working Group to review in a timely fashion.&lt;/p&gt; 
&lt;p&gt;== Branch Structure&lt;/p&gt; 
&lt;p&gt;The current Specification is maintained in the default branch (currently &lt;code&gt;main&lt;/code&gt;) of the repository. From this branch it is possible to generate Specifications for any published version of Vulkan (1.2, 1.1, and 1.0), and incorporating any desired set of extensions. Each published update is tagged in the form &lt;code&gt;1.2.*release*&lt;/code&gt; where &lt;em&gt;release&lt;/em&gt; is a constantly incrementing release number and &lt;code&gt;1.2&lt;/code&gt; is the latest published version of the API. The last public spec update prior to Vulkan 1.2 is tagged &lt;code&gt;v1.1.130&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The last state of the default branch in Khronos&#39; internal gitlab server, before 1.2 content was merged into it, is tagged &lt;code&gt;1.1-archive&lt;/code&gt; (this tag is not in github).&lt;/p&gt; 
&lt;p&gt;== Directory Structure&lt;/p&gt; 
&lt;p&gt;The directory structure is as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;README.adoc           This file
BUILD.adoc            Documents how to build the specifications and reference pages
CONTRIBUTING.adoc     Requirements for external contributions to the repository
COPYING.adoc          Copyright and licensing information
CODE_OF_CONDUCT.adoc  Code of Conduct
LICENSE.adoc          Summary of licenses used by files in the repository
ChangeLog.txt         Change log summary for each public spec update
Makefile, make*       Makefile and helper build scripts (see BUILD.adoc)
appendices/           Specification appendices
chapters/             Specification chapters
config/               Asciidoctor configuration, CSS, and index generator
images/               Images (figures, diagrams, icons)
gen/out/              Default directory for the generated documents
scripts/              Helper scripts used in specification, header, and reference page generation
style/                Sources for &quot;styleguide&quot; (Vulkan Documentation and Extensions: Procedures and Conventions)
xml/                  XML API Registry (vk.xml)
registry.txt          Sources for documentation of the vk.xml format
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;== Building the Specification and Reference Pages&lt;/p&gt; 
&lt;p&gt;The document sources are marked up in Asciidoctor format, and we use &lt;code&gt;asciidoctor&lt;/code&gt; and related toolchain components to generate output documents. See link:BUILD.adoc[BUILD.adoc] for more information on installing the toolchain and building the Specification.&lt;/p&gt; 
&lt;p&gt;== Generating Headers and Related Files&lt;/p&gt; 
&lt;p&gt;See link:xml/README.adoc[xml/README.adoc].&lt;/p&gt; 
&lt;p&gt;The header files (&lt;code&gt;include/vulkan/vulkan*.h&lt;/code&gt;) and many parts of the specification and reference page documents are generated from descriptions in the XML API Registry (link:xml/vk.xml[&lt;code&gt;xml/vk.xml&lt;/code&gt;]). The generated files are not checked into the repository. If you change &lt;code&gt;vk.xml&lt;/code&gt;, you can regenerate the headers by going into &lt;code&gt;xml/&lt;/code&gt; and running:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ make clean install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The other generated files are built as required via dependencies in the top-level &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fengyuanchen/cropper</title>
      <link>https://github.com/fengyuanchen/cropper</link>
      <description>&lt;p&gt;⚠️ [Deprecated] No longer maintained, please use https://github.com/fengyuanchen/jquery-cropper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cropper&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/fengyuanchen/cropper&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/fengyuanchen/cropper.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/cropper&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/cropper.svg&quot; alt=&quot;Downloads&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/cropper&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/cropper.svg&quot; alt=&quot;Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/cropper&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/fengyuanchen/cropper.svg&quot; alt=&quot;Dependencies&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A simple jQuery image cropping plugin. As of v4.0.0, the core code of Cropper is replaced with &lt;a href=&quot;https://github.com/fengyuanchen/cropperjs&quot;&gt;Cropper.js&lt;/a&gt;.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://fengyuanchen.github.io/cropper&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fengyuanchen/cropperjs&quot;&gt;Cropper.js&lt;/a&gt; - JavaScript image cropper (&lt;strong&gt;recommended&lt;/strong&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/fengyuanchen/jquery-cropper&quot;&gt;jquery-cropper&lt;/a&gt; - A jQuery plugin wrapper for Cropper.js (&lt;strong&gt;recommended&lt;/strong&gt; for jQuery users to use this instead of Cropper)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Main&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;dist/
├── cropper.css
├── cropper.min.css   (compressed)
├── cropper.js        (UMD)
├── cropper.min.js    (UMD, compressed)
├── cropper.common.js (CommonJS, default)
└── cropper.esm.js    (ES Module)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;h3&gt;Installation&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install cropper jquery
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Include files:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;/path/to/jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;!-- jQuery is required --&amp;gt;
&amp;lt;link  href=&quot;/path/to/cropper.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;script src=&quot;/path/to/cropper.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Usage&lt;/h3&gt; 
&lt;p&gt;Initialize with &lt;code&gt;$.fn.cropper&lt;/code&gt; method.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Wrap the image or canvas element with a block element (container) --&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;img id=&quot;image&quot; src=&quot;picture.jpg&quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Limit image width to avoid overflow the container */
img {
  max-width: 100%; /* This rule is very important, please do not ignore this! */
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var $image = $(&#39;#image&#39;);

$image.cropper({
  aspectRatio: 16 / 9,
  crop: function(event) {
    console.log(event.detail.x);
    console.log(event.detail.y);
    console.log(event.detail.width);
    console.log(event.detail.height);
    console.log(event.detail.rotate);
    console.log(event.detail.scaleX);
    console.log(event.detail.scaleY);
  }
});

// Get the Cropper.js instance after initialized
var cropper = $image.data(&#39;cropper&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Options&lt;/h2&gt; 
&lt;p&gt;See the available &lt;a href=&quot;https://github.com/fengyuanchen/cropperjs#options&quot;&gt;options&lt;/a&gt; of Cropper.js.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(&#39;img&#39;).cropper(options);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Methods&lt;/h2&gt; 
&lt;p&gt;See the available &lt;a href=&quot;https://github.com/fengyuanchen/cropperjs#methods&quot;&gt;methods&lt;/a&gt; of Cropper.js.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(&#39;img&#39;).once(&#39;ready&#39;, function () {
  $(this).cropper(&#39;method&#39;, argument1, , argument2, ..., argumentN);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Events&lt;/h2&gt; 
&lt;p&gt;See the available &lt;a href=&quot;https://github.com/fengyuanchen/cropperjs#events&quot;&gt;events&lt;/a&gt; of Cropper.js.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(&#39;img&#39;).on(&#39;event&#39;, handler);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;No conflict&lt;/h2&gt; 
&lt;p&gt;If you have to use other plugin with the same namespace, just call the &lt;code&gt;$.fn.cropper.noConflict&lt;/code&gt; method to revert to it.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;other-plugin.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;cropper.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  $.fn.cropper.noConflict();
  // Code that uses other plugin&#39;s &quot;$(&#39;img&#39;).cropper&quot; can follow here.
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Browser support&lt;/h2&gt; 
&lt;p&gt;It is the same as the &lt;a href=&quot;https://github.com/fengyuanchen/cropperjs#browser-support&quot;&gt;browser support of Cropper.js&lt;/a&gt;. As a jQuery plugin, you also need to see the &lt;a href=&quot;https://jquery.com/browser-support/&quot;&gt;jQuery Browser Support&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Please read through our &lt;a href=&quot;https://raw.githubusercontent.com/fengyuanchen/cropper/master/.github/CONTRIBUTING.md&quot;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Versioning&lt;/h2&gt; 
&lt;p&gt;Maintained under the &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt; © &lt;a href=&quot;https://chenfengyuan.com/&quot;&gt;Chen Fengyuan&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ecomfe/vue-echarts</title>
      <link>https://github.com/ecomfe/vue-echarts</link>
      <description>&lt;p&gt;Apache ECharts (incubating) component for Vue.js.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vue-ECharts&lt;/h1&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;Apache ECharts (incubating) component for Vue.js.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/ecomfe/vue-echarts/master/README.zh_CN.md&quot;&gt;🇨🇳 中文版&lt;/a&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Built upon &lt;a href=&quot;https://echarts.apache.org&quot;&gt;Apache ECharts (incubating)&lt;/a&gt; &lt;code&gt;v4.1.0&lt;/code&gt;+ and depends on &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; &lt;code&gt;v2.2.6&lt;/code&gt;+.&lt;/p&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;npm (Recommended)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install echarts vue-echarts
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;CDN&lt;/h3&gt; 
&lt;p&gt;Include &lt;code&gt;echarts&lt;/code&gt; and &lt;code&gt;vue-echarts&lt;/code&gt; in your HTML file like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/echarts@4.1.0/dist/echarts.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue-echarts@4.0.2&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;ES Modules with npm &amp;amp; Vue Loader (Recommended)&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import Vue from &#39;vue&#39;
import ECharts from &#39;vue-echarts&#39; // refers to components/ECharts.vue in webpack

// import ECharts modules manually to reduce bundle size
import &#39;echarts/lib/chart/bar&#39;
import &#39;echarts/lib/component/tooltip&#39;

// If you want to use ECharts extensions, just import the extension package, and it will work
// Taking ECharts-GL as an example:
// You only need to install the package with `npm install --save echarts-gl` and import it as follows
import &#39;echarts-gl&#39;

// register component to use
Vue.component(&#39;v-chart&#39;, ECharts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;⚠️ Heads up&lt;/h4&gt; 
&lt;h5&gt;Importing the source version&lt;/h5&gt; 
&lt;p&gt;Vue-ECharts offers an untranspiled version for webpack by default. If you are using official Vue CLI to create your project, you may encounter the problem that the default configuration will exclude &lt;code&gt;node_modules&lt;/code&gt; from files to be transpiled by Babel. You need to modify the configuration as follows:&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;Vue CLI 3+&lt;/strong&gt;, add &lt;code&gt;vue-echarts&lt;/code&gt; and &lt;code&gt;resize-detector&lt;/code&gt; into &lt;code&gt;transpileDependencies&lt;/code&gt; in &lt;code&gt;vue.config.js&lt;/code&gt; like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// vue.config.js
module.exports = {
  transpileDependencies: [
    &#39;vue-echarts&#39;,
    &#39;resize-detector&#39;
  ]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;strong&gt;Vue CLI 2&lt;/strong&gt; with the &lt;code&gt;webpack&lt;/code&gt; template, modify &lt;code&gt;build/webpack.base.conf.js&lt;/code&gt; like this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;      {
        test: /\.js$/,
        loader: &#39;babel-loader&#39;,
-       include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;)]
+       include: [
+         resolve(&#39;src&#39;),
+         resolve(&#39;test&#39;),
+         resolve(&#39;node_modules/vue-echarts&#39;),
+         resolve(&#39;node_modules/resize-detector&#39;)
+       ]
      }
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you are using bare webpack config, just do similar modifications to make it work.&lt;/p&gt; 
&lt;h5&gt;Using with Nuxt.js&lt;/h5&gt; 
&lt;p&gt;When using Vue-ECharts on the server-side with Nuxt.js, it may not be properly transpiled because Nuxt.js prevents files under &lt;code&gt;node_modules&lt;/code&gt; from being bundled into the server bundle with only a few exceptions by default. We need to whitelist &lt;code&gt;vue-echarts&lt;/code&gt; manually.&lt;/p&gt; 
&lt;p&gt;For &lt;strong&gt;Nuxt.js v2&lt;/strong&gt;, modify &lt;code&gt;nuxt.config.js&lt;/code&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = {
  build: {
    transpile: [&#39;vue-echarts&#39;, &#39;resize-detector&#39;]
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For &lt;strong&gt;Nuxt.js v1&lt;/strong&gt;, modify &lt;code&gt;nuxt.config.js&lt;/code&gt; as follows:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Don&#39;t forget to
// npm i --save-dev webpack-node-externals
const nodeExternals = require(&#39;webpack-node-externals&#39;)

module.exports = {
  // ...
  build: {
    extend (config, { isServer }) {
      // ...
      if (isServer) {
        config.externals = [
          nodeExternals({
            // default value for `whitelist` is
            // [/es6-promise|\.(?!(?:js|json)$).{1,5}$/i]
            whitelist: [/es6-promise|\.(?!(?:js|json)$).{1,5}$/i, /^vue-echarts/]
          })
        ]
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;AMD&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;require.config({
  paths: {
    &#39;vue&#39;: &#39;path/to/vue&#39;,
    &#39;echarts&#39;: &#39;path/to/echarts&#39;,
    &#39;vue-echarts&#39;: &#39;path/to/vue-echarts&#39;
  }
})

require([&#39;vue&#39;, &#39;vue-echarts&#39;], function (Vue, ECharts) {
  // register component to use...
  Vue.component(&#39;v-chart&#39;, ECharts)
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Global variable&lt;/h3&gt; 
&lt;p&gt;Without any module system, the component is exposed as &lt;code&gt;window.VueECharts&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// register component to use
Vue.component(&#39;v-chart&#39;, VueECharts)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Using the component&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
&amp;lt;v-chart :options=&quot;polar&quot;/&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;style&amp;gt;
/**
 * The default size is 600px×400px, for responsive charts
 * you may need to set percentage values as follows (also
 * don&#39;t forget to provide a size for the container).
 */
.echarts {
  width: 100%;
  height: 100%;
}
&amp;lt;/style&amp;gt;

&amp;lt;script&amp;gt;
import ECharts from &#39;vue-echarts&#39;
import &#39;echarts/lib/chart/line&#39;
import &#39;echarts/lib/component/polar&#39;

export default {
  components: {
    &#39;v-chart&#39;: ECharts
  },
  data () {
    let data = []

    for (let i = 0; i &amp;lt;= 360; i++) {
        let t = i / 180 * Math.PI
        let r = Math.sin(2 * t) * Math.cos(2 * t)
        data.push([r, i])
    }

    return {
      polar: {
        title: {
          text: &#39;极坐标双数值轴&#39;
        },
        legend: {
          data: [&#39;line&#39;]
        },
        polar: {
          center: [&#39;50%&#39;, &#39;54%&#39;]
        },
        tooltip: {
          trigger: &#39;axis&#39;,
          axisPointer: {
            type: &#39;cross&#39;
          }
        },
        angleAxis: {
          type: &#39;value&#39;,
          startAngle: 0
        },
        radiusAxis: {
          min: 0
        },
        series: [
          {
            coordinateSystem: &#39;polar&#39;,
            name: &#39;line&#39;,
            type: &#39;line&#39;,
            showSymbol: false,
            data: data
          }
        ],
        animationDuration: 2000
      }
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See more examples &lt;a href=&quot;https://github.com/ecomfe/vue-echarts/tree/master/src/demo&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Props &lt;em&gt;(all reactive)&lt;/em&gt;&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;initOptions&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Used to initialize ECharts instance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;theme&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The theme used for current ECharts instance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;options&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Used to update data for ECharts instance. Modifying this prop will trigger ECharts&#39; &lt;code&gt;setOption&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;If you mutate the data bound to &lt;code&gt;options&lt;/code&gt; while retaining the object reference, &lt;code&gt;setOption&lt;/code&gt; will be called with &lt;code&gt;notMerge: false&lt;/code&gt;. Otherwise, if you bind a new object to &lt;code&gt;options&lt;/code&gt;, &lt;code&gt;setOption&lt;/code&gt; will be called with &lt;code&gt;notMerge: true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, if we have the following template:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;v-chart :options=&quot;data&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;this.data = newObject // setOption(this.options, true)
this.data.title.text = &#39;Trends&#39; // setOption(this.options, false)
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;group&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This prop is automatically bound to the same prop of the ECharts instance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;autoresize&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;This prop indicates ECharts instance should be resized automatically whenever its root is resized.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;manual-update&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;For critical performance scenarios (having a large dataset) we&#39;d better bypass Vue&#39;s reactivity system for &lt;code&gt;options&lt;/code&gt; prop. By specifying &lt;code&gt;manual-update&lt;/code&gt; prop with &lt;code&gt;true&lt;/code&gt; and not providing &lt;code&gt;options&lt;/code&gt; prop, the dataset won&#39;t be watched anymore. After doing so, you need to retrieve the component instance with &lt;code&gt;ref&lt;/code&gt; and manually call &lt;code&gt;mergeOptions&lt;/code&gt; method to update the chart.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Computed&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;width&lt;/code&gt; &lt;strong&gt;[readonly]&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Used to retrieve the current width of the ECharts instance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;height&lt;/code&gt; &lt;strong&gt;[readonly]&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Used to retrieve the current height of the ECharts instance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;computedOptions&lt;/code&gt; &lt;strong&gt;[readonly]&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Used to retrieve the actual options calculated by ECharts after updating &lt;code&gt;options&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Methods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;mergeOptions&lt;/code&gt; (use &lt;code&gt;setOption&lt;/code&gt; in ECharts under the hood)&lt;/p&gt; &lt;p&gt;&lt;em&gt;Provides a better method name to describe the actual behavior of &lt;code&gt;setOption&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;appendData&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dispatchAction&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;showLoading&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;hideLoading&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;convertToPixel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;convertFromPixel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;containPixel&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;getDataURL&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;getConnectedDataURL&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;dispose&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Static Methods&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;disconnect&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;registerMap&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;registerTheme&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;graphic.clipPointsByRect&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;graphic.clipRectByRect&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Events&lt;/h3&gt; 
&lt;p&gt;Vue-ECharts support the following events:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;legendselectchanged&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;legendselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;legendunselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;legendscroll&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datazoom&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;datarangeselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;timelinechanged&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;timelineplaychanged&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;restore&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;dataviewchanged&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;magictypechanged&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;geoselectchanged&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;geoselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;geounselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pieselectchanged&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pieselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;pieunselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mapselectchanged&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mapselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;mapunselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;axisareaselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;focusnodeadjacency&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;unfocusnodeadjacency&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;brush&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;brushselected&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;rendered&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;finished&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;Mouse events 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;click&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;dblclick&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mouseover&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mouseout&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mousemove&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mousedown&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mouseup&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;globalout&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;contextmenu&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;ZRender events &lt;em&gt;(since v4.1.0)&lt;/em&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;click&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mousedown&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mouseup&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;mousewheel&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;dblclick&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;contextmenu&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For further details, see &lt;a href=&quot;https://echarts.apache.org/en/api.html&quot;&gt;ECharts&#39; API documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Local development&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm i
$ npm run serve 
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Open &lt;code&gt;http://localhost:8080/demo&lt;/code&gt; to see the demo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>handsontable/handsontable</title>
      <link>https://github.com/handsontable/handsontable</link>
      <description>&lt;p&gt;Handsontable is a JavaScript/HTML5 data grid with spreadsheet look &amp; feel. Available for React, Vue and Angular.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Handsontable&lt;/strong&gt; is a JavaScript/HTML5 data grid component with spreadsheet look &amp;amp; feel. 
 &lt;!-- raw HTML omitted --&gt; It provides easy data binding, data validation, filtering, sorting and CRUD operations.&lt;/p&gt; 
&lt;p&gt;Handsontable works with &lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/vue-handsontable-official&quot;&gt;Vue&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/react-handsontable&quot;&gt;React&lt;/a&gt; and &lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/angular-handsontable&quot;&gt;Angular&lt;/a&gt;. 
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt; &lt;a href=&quot;https://raw.githubusercontent.com/npmjs.com/package/handsontable&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dt/handsontable.svg&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://raw.githubusercontent.com/npmjs.com/package/handsontable&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/handsontable.svg&quot; alt=&quot;npm&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.codeship.com/projects/26649&quot;&gt;&lt;img src=&quot;https://app.codeship.com/projects/1ec34290-ed0a-0131-911c-1a47c8fbcce0/status?branch=master&quot; alt=&quot;Build status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://app.fossa.io/projects/git%2Bgithub.com%2Fhandsontable%2Fhandsontable?ref=badge_shield&quot;&gt;&lt;img src=&quot;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fhandsontable%2Fhandsontable.svg?type=shield&quot; alt=&quot;FOSSA Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://snyk.io/test/github/handsontable/handsontable?targetFile=package.json&quot;&gt;&lt;img src=&quot;https://snyk.io/test/github/handsontable/handsontable/badge.svg?targetFile=package.json&quot; alt=&quot;Known Vulnerabilities&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.jsdelivr.com/package/npm/handsontable&quot;&gt;&lt;img src=&quot;https://data.jsdelivr.com/v1/package/npm/handsontable/badge?style=rounded&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;Use npm to install the latest version.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install handsontable
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can use Yarn, NuGet or &lt;a href=&quot;https://raw.githubusercontent.com/handsontable.com/download&quot;&gt;other methods&lt;/a&gt; as well. You can load it directly from &lt;a href=&quot;https://raw.githubusercontent.com/www.jsdelivr.com/package/npm/handsontable&quot;&gt;jsDelivr&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Create a placeholder - an HTML element holding a place for a data grid.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div id=&quot;example&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Import Handsontable and its stylesheet.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import Handsontable from &quot;handsontable&quot;;
import &#39;handsontable/dist/handsontable.full.css&#39;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Alternatively, you can simply embed it in your HTML file.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;link href=&quot;https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now turn your placeholder into a data grid with sample data.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const data = [
  [&#39;&#39;, &#39;Tesla&#39;, &#39;Volvo&#39;, &#39;Toyota&#39;, &#39;Ford&#39;],
  [&#39;2019&#39;, 10, 11, 12, 13],
  [&#39;2020&#39;, 20, 11, 14, 13],
  [&#39;2021&#39;, 30, 15, 12, 13]
];

const container = document.getElementById(&#39;example&#39;);
const hot = new Handsontable(container, {
  data: data,
  rowHeaders: true,
  colHeaders: true
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;&lt;a href=&quot;https://raw.githubusercontent.com/handsontable.com/examples&quot;&gt;See the live demo&lt;/a&gt;&lt;/h5&gt; 
&lt;h2&gt;Features&lt;/h2&gt; 
&lt;p&gt;A list of some of the most popular features:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Multiple column sorting&lt;/li&gt; 
 &lt;li&gt;Non-contiguous selection&lt;/li&gt; 
 &lt;li&gt;Filtering data&lt;/li&gt; 
 &lt;li&gt;Export to file&lt;/li&gt; 
 &lt;li&gt;Validating data&lt;/li&gt; 
 &lt;li&gt;Conditional formatting&lt;/li&gt; 
 &lt;li&gt;Merging cells&lt;/li&gt; 
 &lt;li&gt;Custom cell types&lt;/li&gt; 
 &lt;li&gt;Freezing rows/columns&lt;/li&gt; 
 &lt;li&gt;Moving rows/columns&lt;/li&gt; 
 &lt;li&gt;Resizing rows/columns&lt;/li&gt; 
 &lt;li&gt;Hiding rows/columns&lt;/li&gt; 
 &lt;li&gt;Context menu&lt;/li&gt; 
 &lt;li&gt;Comments&lt;/li&gt; 
 &lt;li&gt;Auto-fill option&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Framework support&lt;/h2&gt; 
&lt;p&gt;Use one of the available wrappers to use Handsontable with your favorite framework:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/vue-handsontable-official&quot;&gt;Handsontable for Vue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/react-handsontable&quot;&gt;Handsontable for React&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/angular-handsontable&quot;&gt;Handsontable for Angular&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/handsontable.com/docs&quot;&gt;Developer guides&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/handsontable.com/docs/Core.html&quot;&gt;API Reference&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/handsontable.com/docs/tutorial-release-notes.html&quot;&gt;Release notes&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/twitter.com/handsontable&quot;&gt;Twitter&lt;/a&gt; (News and updates)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Support and contribution&lt;/h2&gt; 
&lt;p&gt;We provide support for all users through &lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/handsontable/issues&quot;&gt;GitHub issues&lt;/a&gt;. If you have a commercial license then you can add a new ticket through the &lt;a href=&quot;https://raw.githubusercontent.com/handsontable.com/contact?category=technical_support&quot;&gt;contact form&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you would like to contribute to this project, make sure you first read the &lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/handsontable/blob/master/CONTRIBUTING.md&quot;&gt;guide for contributors&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Browser compatibility&lt;/h2&gt; 
&lt;p&gt;Handsontable is compatible with modern browsers such as Chrome, Firefox, Safari, Opera, and Edge. It also supports Internet Explorer 9 to 11 but with limited performance.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Handsontable is dual-licensed. You can either use a free license for all your non-commercial projects or purchase a commercial license. See the table below for a comparison of these two.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;License key&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;The license key is obligatory since &lt;a href=&quot;https://raw.githubusercontent.com/github.com/handsontable/handsontable/releases/tag/7.0.0&quot;&gt;Handsontable 7.0.0&lt;/a&gt; (released in March 2019).&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;If you use Handsontable for purposes not intended toward monetary compensation such as, but not limited to, teaching, academic research, evaluation, testing and experimentation, pass the phrase &lt;code&gt;&#39;non-commercial-and-evaluation&#39;&lt;/code&gt;, as presented below:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const hot = new Handsontable(container, {
  data: data,
  rowHeaders: true,
  colHeaders: true,
  licenseKey: &#39;non-commercial-and-evaluation&#39;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If, on the other hand, you use Handsontable in a project that supports your commercial activity, then you must purchase the license key at &lt;a href=&quot;https://raw.githubusercontent.com/handsontable.com/pricing&quot;&gt;handsontable.com&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;The license key is validated in an offline mode. No connection is made to any server. &lt;a href=&quot;https://raw.githubusercontent.com/handsontable.com/docs/tutorial-license-key.html&quot;&gt;Learn more&lt;/a&gt; about how it works.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Created by &lt;a href=&quot;https://raw.githubusercontent.com/handsoncode.net&quot;&gt;Handsoncode&lt;/a&gt; with ❤ and ☕ in &lt;a href=&quot;https://raw.githubusercontent.com/en.wikipedia.org/wiki/Tricity,_Poland&quot;&gt;Tricity&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>woocommerce/FlexSlider</title>
      <link>https://github.com/woocommerce/FlexSlider</link>
      <description>&lt;p&gt;An awesome, fully responsive jQuery slider plugin&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&quot;https://gitter.im/woothemes/FlexSlider&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/woothemes/FlexSlider.png&quot; alt=&quot;Gitter chat&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;FlexSlider 2.7.2&lt;/h1&gt; 
&lt;p&gt;http://www.woocommerce.com/flexslider/ - Copyright (c) 2015 WooThemes&lt;/p&gt; 
&lt;h2&gt;Releases&lt;/h2&gt; 
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch of this repository is always the latest development version of FlexSlider. Please view the &lt;a href=&quot;https://github.com/woocommerce/FlexSlider/releases&quot;&gt;Releases&lt;/a&gt; section for a list of official FlexSlider builds.&lt;/p&gt; 
&lt;h3&gt;Contributing&lt;/h3&gt; 
&lt;p&gt;We encourage contributions to FlexSlider and will review all pull requests submitted.&lt;/p&gt; 
&lt;p&gt;Before contributing, please see our &lt;a href=&quot;https://github.com/woocommerce/FlexSlider/blob/master/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Roadmap&lt;/h3&gt; 
&lt;p&gt;To keep up to date with how FlexSlider&#39;s development roadmap looks, please see our &lt;a href=&quot;https://github.com/woocommerce/FlexSlider/wiki/Roadmap&quot;&gt;development roadmap&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Updates&lt;/h2&gt; 
&lt;p&gt;** Version 2.7.2 **&lt;/p&gt; 
&lt;p&gt;** Refactor jQuery HTML output for img attributes.&lt;/p&gt; 
&lt;p&gt;** Version 2.7.1 **&lt;/p&gt; 
&lt;p&gt;** RTL fixes for Firefox browser.&lt;/p&gt; 
&lt;p&gt;** Version 2.7.0 **&lt;/p&gt; 
&lt;p&gt;** Fixes resize method call for orientationchange. Adds RTL feature - param &quot;rtl&quot; added. **&lt;/p&gt; 
&lt;p&gt;** Version 2.6.3 **&lt;/p&gt; 
&lt;p&gt;** Rollback fade fixes, due to harsh fade reports. **&lt;/p&gt; 
&lt;p&gt;** Version 2.6.2 **&lt;/p&gt; 
&lt;p&gt;** Minor update to fix issues with varying heights and overflow onto content below the slider. Fixes the visibility of the pagination and the navigation in the &quot;fade&quot; mode. **&lt;/p&gt; 
&lt;p&gt;** Version 2.6.1 **&lt;/p&gt; 
&lt;p&gt;** SmoothHeight now uses innerHeight() instead of height() to account for padding in calculation. Defining var altText to prevent error. bower.json add fonts folder on main field. Changed true to false in order to make sure whether or not to allow a slider comprised of a single slide. **&lt;/p&gt; 
&lt;p&gt;** Version 2.6.0 **&lt;/p&gt; 
&lt;p&gt;** Adds composer json file, scope fix for focused keyword, fixes bower demo folder exclusion, z-index fix for disabled nav arrow, play/pause accessibility fix, itemMargin fix for slider items, fixes accessibility for in focus elements and pagination controls, firefox fix for text selection on slider carousel, adds data-thumb-alt image alt attribute. **&lt;/p&gt; 
&lt;p&gt;** Version 2.5.0 **&lt;/p&gt; 
&lt;p&gt;** Bumped compatibility support starting with jQuery 1.7+. pausePlay icon fix. Firefox touch event fix. Adds customDirectionNav param. **&lt;/p&gt; 
&lt;p&gt;** Version 2.4.0 **&lt;/p&gt; 
&lt;p&gt;** Update for improved standards. Adds classes to li nav elements. Reset for li elements in stylesheet. **&lt;/p&gt; 
&lt;p&gt;** Version 2.3.0 **&lt;/p&gt; 
&lt;p&gt;** Fixes pauseInvisible attribute issue with Chrome and the Page Visibility API. **&lt;/p&gt; 
&lt;p&gt;** Version 2.2.2 **&lt;/p&gt; 
&lt;p&gt;** Fixes minified JavaScript file to remove merge conflicts. **&lt;/p&gt; 
&lt;p&gt;** Version 2.2.0 **&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Fixed event handler conflicts with devices that are both click and touch enabled. e.g., Windows 8.&lt;/li&gt; 
 &lt;li&gt;Made all slider variables public, stored in &lt;code&gt;slider.vars&lt;/code&gt;. This allows manipulation of &lt;code&gt;slider.vars.minItems&lt;/code&gt; and &lt;code&gt;slider.vars.maxItems&lt;/code&gt; on the fly to create different fluid grids at certain breakpoints. &lt;a href=&quot;http://flexslider.woothemes.com/dynamic-carousel-min-max.html&quot;&gt;Check out this example demonstrating a basic technique&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Fixed calculations that were causing strange issues with paging and certain FlexSliders to move out of alignment.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;em&gt;Be sure to test v2.2.0 with your current slider, before pushing live, to ensure everything is playing nicely.&lt;/em&gt;&lt;/p&gt; 
&lt;hr&gt; 
&lt;h2&gt;General Notes&lt;/h2&gt; 
&lt;p&gt;FlexSlider is no longer licensed under the MIT license. FlexSlider now uses the license, GPLv2 and later.&lt;/p&gt; 
&lt;p&gt;In an effort to move the plugin forward, support for jQuery 1.4.2 has been dropped. The plugin now requires jQuery 1.7.0+. If you don&#39;t have access to the later versions of jQuery, &lt;a href=&quot;https://github.com/woocommerce/FlexSlider/tree/flexslider1&quot;&gt;FlexSlider 1.8&lt;/a&gt; should be a perfectly suitable substitute for your needs!&lt;/p&gt; 
&lt;p&gt;Your old styles and properties &lt;em&gt;might not work out of the box&lt;/em&gt;. Some property names have been changed, noted below, as well as namespacing prefixes being applied to all elements. This means that &lt;code&gt;.flex-direction-nav .next&lt;/code&gt; is now &lt;code&gt;.flex-direction-nav .flex-next&lt;/code&gt; by default. The namespacing property is exposed, free for you to change.&lt;/p&gt; 
&lt;p&gt;No more overflow hidden woes! The plugin now generates a viewport element to handle the tedious task of working around overflow hidden. Yay!&lt;/p&gt; 
&lt;p&gt;The slider element is now accessible outside of the callback API via the jQuery .data() method. Example use: &lt;code&gt;$(&#39;#slider&#39;).data(&#39;flexslider&#39;)&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;Helper strings have been added for performing actions quickly on FlexSlider elements. Example uses:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;$(&#39;#slider&#39;).flexslider(&quot;play&quot;) //Play slideshow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$(&#39;#slider&#39;).flexslider(&quot;pause&quot;) //Pause slideshow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$(&#39;#slider&#39;).flexslider(&quot;stop&quot;) //Stop slideshow&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$(&#39;#slider&#39;).flexslider(&quot;next&quot;) //Go to next slide&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$(&#39;#slider&#39;).flexslider(&quot;prev&quot;) //Go to previous slide&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;$(&#39;#slider&#39;).flexslider(3) //Go fourth slide&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Two new methods are available for adding/removing slides, &lt;code&gt;slider.addSlide()&lt;/code&gt; and &lt;code&gt;slider.removeSlide()&lt;/code&gt;. More details about this coming soon.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;slider.addSlide(obj, pos)&lt;/code&gt; accepts two parameters, a string/jQuery object and an index.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;slider.removeSlide(obj)&lt;/code&gt; accepts one parameter, either an object to be removed, or an index.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/&quot;&gt;Basic Slider&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/basic-slider-with-custom-direction-nav.html&quot;&gt;Basic Slider customDirectionNav&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/basic-slider-with-caption.html&quot;&gt;Basic Slider with Simple Caption&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/thumbnail-controlnav.html&quot;&gt;Slider w/thumbnail controlNav pattern&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/thumbnail-slider.html&quot;&gt;Slider w/thumbnail slider&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/basic-carousel.html&quot;&gt;Basic Carousel&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/carousel-min-max.html&quot;&gt;Carousel with min and max ranges&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/dynamic-carousel-min-max.html&quot;&gt;Carousel with min and max ranges&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/video.html&quot;&gt;Video with Vimeo API&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/video-wistia.html&quot;&gt;Video with Wistia API&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;RTL Examples&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/index-rtl.html&quot;&gt;Basic Slider&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/asnavfor-rtl.html&quot;&gt;Slider with Simple Caption w/thumbnail slider&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://flexslider.woothemes.com/basic-carousel-rtl.html&quot;&gt;Basic Slider with Simple Caption&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Properties&lt;/h2&gt; 
&lt;h3&gt;namespace: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;namespace&lt;/code&gt; controls the prefixes attached to elements created by the plugin. In previous releases, only certain elements were tagged with a prefix class, which was causing class generalization issues for some users. FlexSlider now prefixes all generated elements with the appropriate namespace.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Hint: &lt;code&gt;namespace&lt;/code&gt; can be an empty string.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;selector: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;The markup structure for FlexSlider has been limited to a &quot;ul.slide li&quot; pattern in previous versions of FlexSlider; no longer. You can now take full control of the markup structure used for your FlexSlider. The &lt;code&gt;selector&lt;/code&gt; pattern &quot;{container} &amp;gt; {slide}&quot; is mandatory, allowing the plugin to predictably interpret the selector property. Omitting the &quot;&amp;gt;&quot; from the selector is not suggested, but is possible if your markup doesn&#39;t follow the immediate descendant pattern.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Examples: &quot;section &amp;gt; article&quot;, &quot;.slides &amp;gt; .slide&quot;, &quot;#hero .slide&quot;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;easing: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;easing&lt;/code&gt; allows support for jQuery easing! Default options provided by jQuery are &quot;swing&quot; and &quot;linear,&quot; but more can be used by included the jQuery Easing plugin. &lt;em&gt;If you chose a non-existent easing method, the slider will break.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Note: You need to set &lt;code&gt;useCSS: false&lt;/code&gt; to force transitions in browsers that support translate3d.&lt;/em&gt; &lt;em&gt;Optional: &lt;a href=&quot;http://gsgd.co.uk/sandbox/jquery/easing/&quot;&gt;jQuery Easing Plugin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;direction: &lt;em&gt;{changed}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Previously called &quot;slideDirection&quot; in v1.8 and below.&lt;/p&gt; 
&lt;h3&gt;reverse: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt; will reverse the animation direction of the slider. Meaning, horizontal sliders can move from right to left, and vertical sliders can move bottom to top.&lt;/p&gt; 
&lt;h3&gt;smoothHeight: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;smoothHeight&lt;/code&gt; allows for smooth height transitions between slides. This property currently works for the fade and horizontal slide animation. The property has no effect on horizontal sliding carousels, however.&lt;/p&gt; 
&lt;h3&gt;startAt: &lt;em&gt;{changed}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Previously called &quot;slideToStart&quot; in v1.8 and below.&lt;/p&gt; 
&lt;h3&gt;animationSpeed: &lt;em&gt;{changed}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Previously called &quot;animationDuration&quot; in v1.8 and below.&lt;/p&gt; 
&lt;h3&gt;initDelay: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;initDelay&lt;/code&gt; will delay the initial slideshow of a slider, given in milliseconds. The slider will still initialize, generating controls and displaying the first image, but the slideshow will wait until the &lt;code&gt;initDelay&lt;/code&gt; time has completed before starting the slideshow.&lt;/p&gt; 
&lt;h3&gt;useCSS: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;useCSS&lt;/code&gt; allow users to override using CSS3 for animation. Translate3d still has numerous bugs that can crop up and wreak havoc, so this is a great property to play with if you are experiencing unexplainable issues in Webkit browsers.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Hint: Use conditionals to enable/disable the use of CSS3 on desktops and mobile devices. Mobile devices, in my experience, do not share many of the translate3d bugs seen on desktop browsers.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;touch: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; allows users to exclude touch swipe functionality from their sliders.&lt;/p&gt; 
&lt;h3&gt;keyboard: &lt;em&gt;{changed}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Previously called &quot;keyboardNav&quot; in v1.8 and below.&lt;/p&gt; 
&lt;h3&gt;multipleKeyboard &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;multipleKeyboard&lt;/code&gt; allows users to override the default plugin keyboard behavior, enabling keyboard control of more than one slider on the page. This means that all visible sliders will animate, at the same time, via keyboard input.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Hint: You can use &lt;code&gt;multipleKeyboard&lt;/code&gt; to allow keyboard navigation on pages where multiple sliders are present, but only one is visible.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;mousewheel: &lt;em&gt;{updated}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;mousewheel&lt;/code&gt; now requires the jQuery Mousewheel plugin. There are a few reasons for this, but primarily because there is no need for FlexSlider itself to reinvent the awkward complexity of mousewheel interactivity that is handled perfectly by the Mousewheel plugin.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Required: &lt;a href=&quot;https://github.com/brandonaaron/jquery-mousewheel&quot;&gt;jQuery Mousewheel Plugin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;controlsContainer: &lt;em&gt;{updated}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;controlsContainer&lt;/code&gt; is one of the more painstaking, potentially confusing properties within FlexSlider. First, the property is no longer required to workaround &lt;code&gt;overflow: hidden&lt;/code&gt; on slide animation. Second, the property now accepts a &lt;strong&gt;jQuery object&lt;/strong&gt;, giving you precise control over the object you want. The plugin no longer attempts to guess what element you are selecting.&lt;/p&gt; 
&lt;h3&gt;customDirectionNav: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;customDirectionNav&lt;/code&gt; allows the ability to add custom directional navigation elements. Can be used in conjunction with controlsContainer for pagination controls container.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://flexslider.woothemes.com/basic-slider-with-custom-direction-nav.html&quot;&gt;Example of customDirectionNav being used&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;sync: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;sync&lt;/code&gt; is a new property that will allow other slider(s) to hook into the current slider via a given selector. The selector should describe an object that has already been initialized as a FlexSlider. Right now, &lt;code&gt;sync&lt;/code&gt; will synchronize animation, play, and pause behaviors. More behaviors can be added in the future as the property matures.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://flex.madebymufffin.com/examples/basic-carousel.html&quot;&gt;Example of sync being used&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;asNavFor: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Description to be added.&lt;/p&gt; 
&lt;h3&gt;itemWidth: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;itemWidth&lt;/code&gt; is the primary property for the new carousel options. Without this property, your slider is not considered a carousel. To use &lt;code&gt;itemWidth&lt;/code&gt;, give an integer value of the width of your individual slides. This should include borders and paddings applied to your slides; a total width measurement.&lt;/p&gt; 
&lt;h3&gt;itemMargin: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;itemMargin&lt;/code&gt; describes the gutter between the slide elements. If each slide has a margin-left of 10px, your itemMargin value would be 10. If elements have margin: 0 10px, your itemMargin would be 20.&lt;/p&gt; 
&lt;h3&gt;minItems: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;minItems&lt;/code&gt; describes the minimum number of slide elements that should be visible in the carousel. When the slider reaches the minimum item count, the slides will resize fluidly with the slider.&lt;/p&gt; 
&lt;h3&gt;maxItems: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;maxItems&lt;/code&gt; describes the maximum number of slide elements that should be visible in the carousel. When the slider reaches the maximum item count, the slides will resize fluidly with the sider.&lt;/p&gt; 
&lt;h3&gt;move: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;move&lt;/code&gt; determines how many slides should be animated within the carousel. When left at 0, the slider will animate the number of visible slides. If any value greater than 0 is given, the slider will animate that number of slides in the carousel on each animation interval.&lt;/p&gt; 
&lt;p&gt;&lt;em&gt;Hint: The move property will be ignored if the value is higher than the number of visible slides, which can be utilized in responsive design.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;added: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;added()&lt;/code&gt; is a new callback event fired in the new slider.addSlide() function.&lt;/p&gt; 
&lt;h3&gt;removed: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;&lt;code&gt;removed()&lt;/code&gt; is a new callback event fired in the new slider.removeSlide() function.&lt;/p&gt; 
&lt;h3&gt;allowOneSlide: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Boolean. Whether or not you&#39;d like FlexSlider to initialize as usual if only one slide is present.&lt;/p&gt; 
&lt;h3&gt;rtl: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Boolean. False by default. Supports RTL functionality in the slider. &lt;em&gt;Note: you must add &lt;code&gt;style=&quot;direction:rtl&quot;&lt;/code&gt; to your container div in order for this to work.&lt;/em&gt;&lt;/p&gt; 
&lt;h3&gt;isFirefox: &lt;em&gt;{new}&lt;/em&gt;&lt;/h3&gt; 
&lt;p&gt;Boolean. False by default. Set to true if the Firefox browser is in use. &lt;em&gt;Note: used for RTL compatibility logic.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gothinkster/react-redux-realworld-example-app</title>
      <link>https://github.com/gothinkster/react-redux-realworld-example-app</link>
      <description>&lt;p&gt;Exemplary real world application built with React + Redux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gothinkster/react-redux-realworld-example-app/master/project-logo.png&quot; alt=&quot;React + Redux Example App&quot;&gt;&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;http://realworld.io&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/realworld-frontend-%23783578.svg&quot; alt=&quot;RealWorld Frontend&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;h3&gt;React + Redux codebase containing real world examples (CRUD, auth, advanced patterns, etc) that adheres to the &lt;a href=&quot;https://github.com/gothinkster/realworld-example-apps&quot;&gt;RealWorld&lt;/a&gt; spec and API.&lt;/h3&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&amp;nbsp;&amp;nbsp;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a href=&quot;https://react-redux.realworld.io&quot;&gt;Demo&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://github.com/gothinkster/realworld&quot;&gt;RealWorld&lt;/a&gt;&lt;/h3&gt; 
&lt;p&gt;Originally created for this &lt;a href=&quot;https://github.com/reactjs/redux/issues/1353&quot;&gt;GH issue&lt;/a&gt;. The codebase is now feature complete; please submit bug fixes via pull requests &amp;amp; feedback via issues.&lt;/p&gt; 
&lt;p&gt;We also have notes in &lt;a href=&quot;https://github.com/gothinkster/react-redux-realworld-example-app/wiki&quot;&gt;&lt;strong&gt;our wiki&lt;/strong&gt;&lt;/a&gt; about how the various patterns used in this codebase and how they work (thanks &lt;a href=&quot;https://github.com/thejmazz&quot;&gt;@thejmazz&lt;/a&gt;!)&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;You can view a live demo over at https://react-redux.realworld.io/&lt;/p&gt; 
&lt;p&gt;To get the frontend running locally:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clone this repo&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; to install all req&#39;d dependencies&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;npm start&lt;/code&gt; to start the local server (this project uses create-react-app)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Local web server will use port 4100 instead of standard React&#39;s port 3000 to prevent conflicts with some backends like Node or Rails. You can configure port in scripts section of &lt;code&gt;package.json&lt;/code&gt;: we use &lt;a href=&quot;https://github.com/kentcdodds/cross-env&quot;&gt;cross-env&lt;/a&gt; to set environment variable PORT for React scripts, this is Windows-compatible way of setting environment variables.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can add &lt;code&gt;.env&lt;/code&gt; file in the root folder of project to set environment variables (use PORT to change webserver&#39;s port). This file will be ignored by git, so it is suitable for API keys and other sensitive stuff. Refer to &lt;a href=&quot;https://github.com/motdotla/dotenv&quot;&gt;dotenv&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-development-environment-variables-in-env&quot;&gt;React&lt;/a&gt; documentation for more details. Also, please remove setting variable via script section of &lt;code&gt;package.json&lt;/code&gt; - &lt;code&gt;dotenv&lt;/code&gt; never override variables if they are already set.&lt;/p&gt; 
&lt;h3&gt;Making requests to the backend API&lt;/h3&gt; 
&lt;p&gt;For convenience, we have a live API server running at https://conduit.productionready.io/api for the application to make requests against. You can view &lt;a href=&quot;https://github.com/GoThinkster/productionready/blob/master/api&quot;&gt;the API spec here&lt;/a&gt; which contains all routes &amp;amp; responses for the server.&lt;/p&gt; 
&lt;p&gt;The source code for the backend server (available for Node, Rails and Django) can be found in the &lt;a href=&quot;https://github.com/gothinkster/realworld&quot;&gt;main RealWorld repo&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you want to change the API URL to a local server, simply edit &lt;code&gt;src/agent.js&lt;/code&gt; and change &lt;code&gt;API_ROOT&lt;/code&gt; to the local server&#39;s URL (i.e. &lt;code&gt;http://localhost:3000/api&lt;/code&gt;)&lt;/p&gt; 
&lt;h2&gt;Functionality overview&lt;/h2&gt; 
&lt;p&gt;The example application is a social blogging site (i.e. a Medium.com clone) called &quot;Conduit&quot;. It uses a custom API for all requests, including authentication. You can view a live demo over at https://redux.productionready.io/&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;General functionality:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Authenticate users via JWT (login/signup pages + logout button on settings page)&lt;/li&gt; 
 &lt;li&gt;CRU* users (sign up &amp;amp; settings page - no deleting required)&lt;/li&gt; 
 &lt;li&gt;CRUD Articles&lt;/li&gt; 
 &lt;li&gt;CR*D Comments on articles (no updating required)&lt;/li&gt; 
 &lt;li&gt;GET and display paginated lists of articles&lt;/li&gt; 
 &lt;li&gt;Favorite articles&lt;/li&gt; 
 &lt;li&gt;Follow other users&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;The general page breakdown looks like this:&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Home page (URL: /#/ ) 
  &lt;ul&gt; 
   &lt;li&gt;List of tags&lt;/li&gt; 
   &lt;li&gt;List of articles pulled from either Feed, Global, or by Tag&lt;/li&gt; 
   &lt;li&gt;Pagination for list of articles&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Sign in/Sign up pages (URL: /#/login, /#/register ) 
  &lt;ul&gt; 
   &lt;li&gt;Use JWT (store the token in localStorage)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Settings page (URL: /#/settings )&lt;/li&gt; 
 &lt;li&gt;Editor page to create/edit articles (URL: /#/editor, /#/editor/article-slug-here )&lt;/li&gt; 
 &lt;li&gt;Article page (URL: /#/article/article-slug-here ) 
  &lt;ul&gt; 
   &lt;li&gt;Delete article button (only shown to article&#39;s author)&lt;/li&gt; 
   &lt;li&gt;Render markdown from server client side&lt;/li&gt; 
   &lt;li&gt;Comments section at bottom of page&lt;/li&gt; 
   &lt;li&gt;Delete comment button (only shown to comment&#39;s author)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Profile page (URL: /#/@username, /#/@username/favorites ) 
  &lt;ul&gt; 
   &lt;li&gt;Show basic user info&lt;/li&gt; 
   &lt;li&gt;List of articles populated from author&#39;s created articles or author&#39;s favorited articles&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://thinkster.io&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/gothinkster/realworld/master/media/end.png&quot; alt=&quot;Brought to you by Thinkster&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tannerlinsley/react-table</title>
      <link>https://github.com/tannerlinsley/react-table</link>
      <description>&lt;p&gt;⚛️ Hooks for building fast and extendable tables and datagrids for React&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/tannerlinsley/react-table/raw/master/media/repo-dark.png&quot; alt=&quot;React Table Header&quot;&gt;&lt;/p&gt; 
&lt;p&gt;Hooks for building &lt;strong&gt;lightweight, fast and extendable datagrids&lt;/strong&gt; for React&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Enjoy this library? Try them all! &lt;a href=&quot;https://github.com/tannerlinsley/react-query&quot;&gt;React Query&lt;/a&gt;, &lt;a href=&quot;https://github.com/tannerlinsley/react-form&quot;&gt;React Form&lt;/a&gt;, &lt;a href=&quot;https://github.com/tannerlinsley/react-charts&quot;&gt;React Charts&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Visit &lt;a href=&quot;https://react-table.tanstack.com&quot;&gt;react-table.tanstack.com&lt;/a&gt; for docs, guides, API and more!&lt;/h2&gt; 
&lt;h2&gt;Quick Features&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lightweight (5kb - 14kb+ depending on features used and tree-shaking)&lt;/li&gt; 
 &lt;li&gt;Headless (100% customizable, Bring-your-own-UI)&lt;/li&gt; 
 &lt;li&gt;Auto out of the box, fully controllable API&lt;/li&gt; 
 &lt;li&gt;Sorting (Multi and Stable)&lt;/li&gt; 
 &lt;li&gt;Filters&lt;/li&gt; 
 &lt;li&gt;Pivoting &amp;amp; Aggregation&lt;/li&gt; 
 &lt;li&gt;Row Selection&lt;/li&gt; 
 &lt;li&gt;Row Expansion&lt;/li&gt; 
 &lt;li&gt;Column Ordering&lt;/li&gt; 
 &lt;li&gt;Animatable&lt;/li&gt; 
 &lt;li&gt;Virtualizable&lt;/li&gt; 
 &lt;li&gt;Resizable&lt;/li&gt; 
 &lt;li&gt;Server-side/controlled data/state&lt;/li&gt; 
 &lt;li&gt;Extensible via hook-based plugin system&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;&lt;a href=&quot;https://github.com/sponsors/tannerlinsley/&quot;&gt;Become a Sponsor&lt;/a&gt;&lt;/h3&gt; 
&lt;h2&gt;Previous Versions&lt;/h2&gt; 
&lt;h3&gt;Version 6&lt;/h3&gt; 
&lt;p&gt;v6 is a great library and while it is still available to install and use, I am no longer offering any long-term support for it. If you intend to keep using v6, I recommend maintaining your own fork of the library and keeping it up to date for your version of React.&lt;/p&gt; 
&lt;h4&gt;Where are the docs for the older v6 version?&lt;/h4&gt; 
&lt;p&gt;Please &lt;a href=&quot;https://github.com/tannerlinsley/react-table/tree/v6&quot;&gt;visit the v6 branch&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;I want to migrate from v6 to v7. How do I do that?&lt;/h4&gt; 
&lt;p&gt;The differences between the 2 versions are incredibly massive. Unfortunately, I cannot write a one-to-one upgrade guide for any of v6&#39;s API, simply because much of it is irrelevant with v7&#39;s headless approach. The best approach for migrating to v7 is to learn its API by reading the documentation and then following some of the examples to begin building your own table component.&lt;/p&gt; 
&lt;p&gt;In case you would need to have both v6 and v7 in one app during the migration process (large codebase, complex use cases), you can either (1) fork and maintain your own local version of React Table v6 or (2) install the &lt;a href=&quot;https://www.npmjs.com/package/react-table-6&quot;&gt;&lt;code&gt;react-table-6&lt;/code&gt; alias package&lt;/a&gt; for use alongside the &lt;code&gt;react-table&lt;/code&gt; package.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automattic/wp-calypso</title>
      <link>https://github.com/Automattic/wp-calypso</link>
      <description>&lt;p&gt;The JavaScript and API powered WordPress.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Calypso&lt;/h1&gt; 
&lt;p&gt;&lt;a href=&quot;https://renovateapp.com/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/renovate-enabled-brightgreen.svg&quot; alt=&quot;Renovate enabled&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Calypso is the new WordPress.com front-end – a beautiful redesign of the WordPress dashboard using a single-page web application, powered by the WordPress.com REST API. Calypso is built for reading, writing, and managing all of your WordPress sites in one place.&lt;/p&gt; 
&lt;p&gt;&lt;img src=&quot;https://cldup.com/zBBkP721le.png&quot; alt=&quot;beautiful screenshot&quot;&gt;&lt;/p&gt; 
&lt;p&gt;It’s built with JavaScript – a very light &lt;a href=&quot;https://nodejs.org/&quot;&gt;node&lt;/a&gt; plus &lt;a href=&quot;https://expressjs.com/&quot;&gt;express&lt;/a&gt; server, &lt;a href=&quot;https://reactjs.org/&quot;&gt;React.js&lt;/a&gt;, &lt;a href=&quot;https://redux.js.org/&quot;&gt;Redux&lt;/a&gt;, &lt;a href=&quot;https://wpcomjs.com/&quot;&gt;wpcom.js&lt;/a&gt;, and many other wonderful libraries on the front-end.&lt;/p&gt; 
&lt;p&gt;You can read more about Calypso at &lt;a href=&quot;https://developer.wordpress.com/calypso/&quot;&gt;developer.wordpress.com/calypso&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;You can try out the user-side of Calypso on &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress.com&lt;/a&gt; (a lot of the logged-in area is Calypso; if in doubt, view source), you can poke around the code here on GitHub, or you can install it and run it locally. The latter is the most fun.&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Make sure you have &lt;a href=&quot;https://git-scm.com/&quot;&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/&quot;&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://classic.yarnpkg.com/en/docs/install&quot;&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt; installed.&lt;/li&gt; 
 &lt;li&gt;Clone this repository locally.&lt;/li&gt; 
 &lt;li&gt;Add &lt;code&gt;127.0.0.1 calypso.localhost&lt;/code&gt; to your local &lt;code&gt;hosts&lt;/code&gt; file.&lt;/li&gt; 
 &lt;li&gt;Execute &lt;code&gt;yarn&lt;/code&gt; and then &lt;code&gt;yarn start&lt;/code&gt; from the root directory of the repository.&lt;/li&gt; 
 &lt;li&gt;Open &lt;a href=&quot;http://calypso.localhost:3000/&quot;&gt;&lt;code&gt;calypso.localhost:3000&lt;/code&gt;&lt;/a&gt; in your browser.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Need more detailed installation instructions? &lt;a href=&quot;https://raw.githubusercontent.com/Automattic/wp-calypso/trunk/docs/install.md&quot;&gt;We have them&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;If Calypso sparks your interest, don’t hesitate to send a pull request, send a suggestion, file a bug, or just ask a question. We promise we’ll be nice. Just don’t forget to check out our &lt;a href=&quot;https://raw.githubusercontent.com/Automattic/wp-calypso/trunk/docs/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; doc – it includes a few technical details that will make the process a lot smoother.&lt;/p&gt; 
&lt;p&gt;Calypso welcomes – and indeed has been built by – contributors from all walks of life, with different backgrounds, and with a wide range of experience. We&#39;re committed to doing our part to make both Calypso and the wider WordPress community welcoming to everyone.&lt;/p&gt; 
&lt;p&gt;You can contribute in many ways. You can help reporting, testing, and detailing bugs, and also test new features we release in our &quot;beta&quot; program for testing on &lt;a href=&quot;https://horizonfeedback.wordpress.com/&quot;&gt;Horizon&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;To clarify these expectations, Calypso has adopted the code of conduct defined by the Contributor Covenant. It can be read in full &lt;a href=&quot;https://raw.githubusercontent.com/Automattic/wp-calypso/trunk/CODE-OF-CONDUCT.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Security&lt;/h2&gt; 
&lt;p&gt;Need to report a security vulnerability? Go to &lt;a href=&quot;https://automattic.com/security/&quot;&gt;https://automattic.com/security/&lt;/a&gt; or directly to our security bug bounty site &lt;a href=&quot;https://hackerone.com/automattic/&quot;&gt;https://hackerone.com/automattic&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Browser Support&lt;/h2&gt; 
&lt;p&gt;We support the latest two versions of all major browsers, except IE, where we currently only support 11 and Edge. (see &lt;a href=&quot;https://browsehappy.com/&quot;&gt;Browse Happy&lt;/a&gt; for current latest versions).&lt;/p&gt; 
&lt;h2&gt;Troubleshooting&lt;/h2&gt; 
&lt;p&gt;If you have any problems running Calypso, &lt;a href=&quot;https://raw.githubusercontent.com/Automattic/wp-calypso/trunk/docs/troubleshooting.md&quot;&gt;please see most common issues&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;Calypso is licensed under &lt;a href=&quot;https://raw.githubusercontent.com/Automattic/wp-calypso/trunk/LICENSE.md&quot;&gt;GNU General Public License v2 (or later)&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dash-Industry-Forum/dash.js</title>
      <link>https://github.com/Dash-Industry-Forum/dash.js</link>
      <description>&lt;p&gt;A reference client implementation for the playback of MPEG DASH via Javascript and compliant browsers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Build status (CircleCI): &lt;a href=&quot;https://circleci.com/gh/Dash-Industry-Forum/dash.js/tree/development&quot;&gt;&lt;img src=&quot;https://circleci.com/gh/Dash-Industry-Forum/dash.js/tree/development.svg?style=svg&quot; alt=&quot;CircleCI&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://join.slack.com/t/dashif/shared_invite/zt-egme869x-JH%7EUPUuLoKJB26fw7wj3Gg&quot;&gt;Join #dashjs on Slack!&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Overview&lt;/h2&gt; 
&lt;p&gt;A reference client implementation for the playback of MPEG DASH via JavaScript and &lt;a href=&quot;http://caniuse.com/#feat=mediasource&quot;&gt;compliant browsers&lt;/a&gt;. Learn more about DASH IF Reference Client on our &lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/wiki&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If your intent is to use the player code without contributing back to this project, then use the MASTER branch which holds the approved and stable public releases.&lt;/p&gt; 
&lt;p&gt;If your goal is to improve or extend the code and contribute back to this project, then you should make your changes in, and submit a pull request against, the DEVELOPMENT branch. Read our &lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/blob/development/CONTRIBUTING.md&quot;&gt;CONTRIBUTION.md&lt;/a&gt; file for a walk-through of the contribution process.&lt;/p&gt; 
&lt;p&gt;All new work should be in the development branch. Master is now reserved for tagged builds.&lt;/p&gt; 
&lt;h2&gt;Demo and reference players&lt;/h2&gt; 
&lt;p&gt;All these reference builds and minified files are available under both http and https.&lt;/p&gt; 
&lt;h3&gt;Samples&lt;/h3&gt; 
&lt;p&gt;Multiple &lt;a href=&quot;https://reference.dashif.org/dash.js/latest/samples/index.html&quot;&gt;dash.js samples&lt;/a&gt; covering a wide set of common use cases.&lt;/p&gt; 
&lt;h3&gt;Reference players&lt;/h3&gt; 
&lt;p&gt;The released &lt;a href=&quot;http://reference.dashif.org/dash.js/&quot;&gt;pre-built reference players &lt;/a&gt; if you want direct access without writing any Javascript.&lt;/p&gt; 
&lt;p&gt;The &lt;a href=&quot;http://reference.dashif.org/dash.js/nightly/samples/dash-if-reference-player/index.html&quot;&gt;nightly build of the /dev branch reference player&lt;/a&gt;, is pre-release but contains the latest fixes. It is a good place to start if you are debugging playback problems.&lt;/p&gt; 
&lt;h3&gt;CDN hosted files&lt;/h3&gt; 
&lt;p&gt;The latest minified files have been hosted on a global CDN and are free to use in production:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://cdn.dashjs.org/latest/dash.all.min.js&quot;&gt;dash.all.min.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://cdn.dashjs.org/latest/dash.all.debug.js&quot;&gt;dash.all.debug.js&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In addition, all the releases are available under the following urls. Replace &quot;vx.x.x&quot; with the release version, for instance &quot;v3.1.0&quot;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://cdn.dashjs.org/v3.1.0/dash.all.min.js&quot;&gt;http://cdn.dashjs.org/vx.x.x/dash.all.min.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://cdn.dashjs.org/v3.1.0/dash.all.debug.js&quot;&gt;http://cdn.dashjs.org/vx.x.x/dash.all.debug.js&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;Full &lt;a href=&quot;http://cdn.dashjs.org/latest/jsdoc/module-MediaPlayer.html&quot;&gt;API Documentation&lt;/a&gt; is available describing all public methods, interfaces, properties, and events.&lt;/p&gt; 
&lt;p&gt;For help, join our &lt;a href=&quot;https://dashif-slack.azurewebsites.net&quot;&gt;Slack channel&lt;/a&gt;, our &lt;a href=&quot;https://groups.google.com/d/forum/dashjs&quot;&gt;email list&lt;/a&gt; and read our &lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/wiki&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;If you are migrating from dash.js v2.x to dash.js v3.x please read the migration document found &lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/wiki/Migration-3.0&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Getting Started&lt;/h2&gt; 
&lt;p&gt;The standard setup method uses javascript to initialize and provide video details to dash.js. &lt;code&gt;MediaPlayerFactory&lt;/code&gt; provides an alternative declarative setup syntax.&lt;/p&gt; 
&lt;h3&gt;Standard Setup&lt;/h3&gt; 
&lt;p&gt;Create a video element somewhere in your html. For our purposes, make sure the controls attribute is present.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;video id=&quot;videoPlayer&quot; controls&amp;gt;&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add dash.all.min.js to the end of the body.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body&amp;gt;
  ...
  &amp;lt;script src=&quot;yourPathToDash/dash.all.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now comes the good stuff. We need to create a MediaPlayer and initialize it.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;
var url = &quot;https://dash.akamaized.net/envivio/EnvivioDash3/manifest.mpd&quot;;
var player = dashjs.MediaPlayer().create();
player.initialize(document.querySelector(&quot;#videoPlayer&quot;), url, true);

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When it is all done, it should look similar to this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Dash.js Rocks&amp;lt;/title&amp;gt;
        &amp;lt;style&amp;gt;
            video {
                width: 640px;
                height: 360px;
            }
        &amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;video id=&quot;videoPlayer&quot; controls&amp;gt;&amp;lt;/video&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;script src=&quot;yourPathToDash/dash.all.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script&amp;gt;
            (function(){
                var url = &quot;https://dash.akamaized.net/envivio/EnvivioDash3/manifest.mpd&quot;;
                var player = dashjs.MediaPlayer().create();
                player.initialize(document.querySelector(&quot;#videoPlayer&quot;), url, true);
            })();
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Module Setup&lt;/h3&gt; 
&lt;p&gt;We publish dash.js to &lt;a href=&quot;https://www.npmjs.com/package/dashjs&quot;&gt;npm&lt;/a&gt;. Examples of how to use dash.js in different module bundlers can be found in the &lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/tree/development/samples/modules&quot;&gt;&lt;code&gt;samples/modules&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; 
&lt;h3&gt;MediaPlayerFactory Setup&lt;/h3&gt; 
&lt;p&gt;An alternative way to build a Dash.js player in your web page is to use the MediaPlayerFactory. The MediaPlayerFactory will automatically instantiate and initialize the MediaPlayer module on appropriately tagged video elements.&lt;/p&gt; 
&lt;p&gt;Create a video element somewhere in your html and provide the path to your &lt;code&gt;mpd&lt;/code&gt; file as src. Also ensure that your video element has the &lt;code&gt;data-dashjs-player&lt;/code&gt; attribute on it.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;video data-dashjs-player autoplay src=&quot;https://dash.akamaized.net/envivio/EnvivioDash3/manifest.mpd&quot; controls&amp;gt;
&amp;lt;/video&amp;gt;

&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Add dash.all.min.js to the end of the body.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body&amp;gt;
  ...
  &amp;lt;script src=&quot;yourPathToDash/dash.all.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When it is all done, it should look similar to this:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Dash.js Rocks&amp;lt;/title&amp;gt;
        &amp;lt;style&amp;gt;
            video {
                width: 640px;
                height: 360px;
            }
        &amp;lt;/style&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;video data-dashjs-player autoplay src=&quot;https://dash.akamaized.net/envivio/EnvivioDash3/manifest.mpd&quot; controls&amp;gt;
            &amp;lt;/video&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;script src=&quot;yourPathToDash/dash.all.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Quick Start for Developers&lt;/h2&gt; 
&lt;ol&gt; 
 &lt;li&gt;Install Core Dependencies 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;install nodejs&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;http://gruntjs.com/getting-started&quot;&gt;install grunt&lt;/a&gt; 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;npm install -g grunt-cli&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Checkout project repository (default branch: development) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;git clone https://github.com/Dash-Industry-Forum/dash.js.git&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Install dependencies 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;Build, watch file changes and launch samples page, which has links that point to reference player and to other examples (basic examples, captioning, ads, live, etc). 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;grunt dev&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;Other Grunt Tasks to Build / Run Tests on Commandline.&lt;/h3&gt; 
&lt;ol&gt; 
 &lt;li&gt;Individual tasks: 
  &lt;ul&gt; 
   &lt;li&gt;Quickest build 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;grunt debug&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Lint 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;grunt lint&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Run unit tests 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;grunt test&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Build distribution files (minification included) 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;grunt dist&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
   &lt;li&gt;Build distribution files, lint, run unit tests and generate documentation 
    &lt;ul&gt; 
     &lt;li&gt;&lt;code&gt;grunt release&lt;/code&gt;&lt;/li&gt; 
    &lt;/ul&gt; &lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;GruntFile.js default task (equivalent to &lt;code&gt;grunt dist &amp;amp;&amp;amp; grunt test&lt;/code&gt;) 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;grunt&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;License&lt;/h3&gt; 
&lt;p&gt;dash.js is released under &lt;a href=&quot;https://github.com/Dash-Industry-Forum/dash.js/blob/development/LICENSE.md&quot;&gt;BSD license&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Tested With&lt;/h3&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.browserstack.com/&quot;&gt;
  &lt;!-- raw HTML omitted --&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>protobufjs/protobuf.js</title>
      <link>https://github.com/protobufjs/protobuf.js</link>
      <description>&lt;p&gt;Protocol Buffers for JavaScript (&amp; TypeScript).&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Protocol Buffers&lt;/strong&gt; are a language-neutral, platform-neutral, extensible way of serializing structured data for use in communications protocols, data storage, and more, originally designed at Google (&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;see&lt;/a&gt;).&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;protobuf.js&lt;/strong&gt; is a pure JavaScript implementation with &lt;a href=&quot;https://www.typescriptlang.org&quot;&gt;TypeScript&lt;/a&gt; support for &lt;a href=&quot;https://nodejs.org&quot;&gt;node.js&lt;/a&gt; and the browser. It&#39;s easy to use, blazingly fast and works out of the box with &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/proto&quot;&gt;.proto&lt;/a&gt; files!&lt;/p&gt; 
&lt;h2&gt;Contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#installation&quot;&gt;Installation&lt;/a&gt;
   &lt;!-- raw HTML omitted --&gt; How to include protobuf.js in your project.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#usage&quot;&gt;Usage&lt;/a&gt;
   &lt;!-- raw HTML omitted --&gt; A brief introduction to using the toolset.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#valid-message&quot;&gt;Valid Message&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#toolset&quot;&gt;Toolset&lt;/a&gt;
    &lt;!-- raw HTML omitted --&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#examples&quot;&gt;Examples&lt;/a&gt;
   &lt;!-- raw HTML omitted --&gt; A few examples to get you started.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-proto-files&quot;&gt;Using .proto files&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-json-descriptors&quot;&gt;Using JSON descriptors&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-reflection-only&quot;&gt;Using reflection only&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-custom-classes&quot;&gt;Using custom classes&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-services&quot;&gt;Using services&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#usage-with-typescript&quot;&gt;Usage with TypeScript&lt;/a&gt;
    &lt;!-- raw HTML omitted --&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#command-line&quot;&gt;Command line&lt;/a&gt;
   &lt;!-- raw HTML omitted --&gt; How to use the command line utility.&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#pbjs-for-javascript&quot;&gt;pbjs for JavaScript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#pbts-for-typescript&quot;&gt;pbts for TypeScript&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#reflection-vs-static-code&quot;&gt;Reflection vs. static code&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#command-line-api&quot;&gt;Command line API&lt;/a&gt;
    &lt;!-- raw HTML omitted --&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#additional-documentation&quot;&gt;Additional documentation&lt;/a&gt;
   &lt;!-- raw HTML omitted --&gt; A list of available documentation resources.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#performance&quot;&gt;Performance&lt;/a&gt;
   &lt;!-- raw HTML omitted --&gt; A few internals and a benchmark on performance.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#compatibility&quot;&gt;Compatibility&lt;/a&gt;
   &lt;!-- raw HTML omitted --&gt; Notes on compatibility regarding browsers and optional libraries.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#building&quot;&gt;Building&lt;/a&gt;
   &lt;!-- raw HTML omitted --&gt; How to build the library and its components yourself.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;h3&gt;node.js&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; npm install protobufjs [--save --save-prefix=~]
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var protobuf = require(&quot;protobufjs&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this library&#39;s versioning scheme is not semver-compatible for historical reasons. For guaranteed backward compatibility, always depend on &lt;code&gt;~6.A.B&lt;/code&gt; instead of &lt;code&gt;^6.A.B&lt;/code&gt; (hence the &lt;code&gt;--save-prefix&lt;/code&gt; above).&lt;/p&gt; 
&lt;h3&gt;Browsers&lt;/h3&gt; 
&lt;p&gt;Development:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;//cdn.rawgit.com/dcodeIO/protobuf.js/6.X.X/dist/protobuf.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Production:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&quot;//cdn.rawgit.com/dcodeIO/protobuf.js/6.X.X/dist/protobuf.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;Remember&lt;/strong&gt; to replace the version tag with the exact &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/tags&quot;&gt;release&lt;/a&gt; your project depends upon.&lt;/p&gt; 
&lt;p&gt;The library supports CommonJS and AMD loaders and also exports globally as &lt;code&gt;protobuf&lt;/code&gt;.&lt;/p&gt; 
&lt;h3&gt;Distributions&lt;/h3&gt; 
&lt;p&gt;Where bundle size is a factor, there are additional stripped-down versions of the &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/tree/master/dist&quot;&gt;full library&lt;/a&gt; (~19kb gzipped) available that exclude certain functionality:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;When working with JSON descriptors (i.e. generated by &lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#pbjs-for-javascript&quot;&gt;pbjs&lt;/a&gt;) and/or reflection only, see the &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/tree/master/dist/light&quot;&gt;light library&lt;/a&gt; (~16kb gzipped) that excludes the parser. CommonJS entry point is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var protobuf = require(&quot;protobufjs/light&quot;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;When working with statically generated code only, see the &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/tree/master/dist/minimal&quot;&gt;minimal library&lt;/a&gt; (~6.5kb gzipped) that also excludes reflection. CommonJS entry point is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var protobuf = require(&quot;protobufjs/minimal&quot;);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;Because JavaScript is a dynamically typed language, protobuf.js introduces the concept of a &lt;strong&gt;valid message&lt;/strong&gt; in order to provide the best possible &lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#performance&quot;&gt;performance&lt;/a&gt; (and, as a side product, proper typings):&lt;/p&gt; 
&lt;h3&gt;Valid message&lt;/h3&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;A valid message is an object (1) not missing any required fields and (2) exclusively composed of JS types understood by the wire format writer.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;There are two possible types of valid messages and the encoder is able to work with both of these for convenience:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Message instances&lt;/strong&gt; (explicit instances of message classes with default values on their prototype) always (have to) satisfy the requirements of a valid message by design and&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Plain JavaScript objects&lt;/strong&gt; that just so happen to be composed in a way satisfying the requirements of a valid message as well.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;In a nutshell, the wire format writer understands the following types:&lt;/p&gt; 
&lt;p&gt;| Field type | Expected JS type (create, encode) | Conversion (fromObject) |------------|-----------------------------------|------------------------ | s-/u-/int32
 &lt;!-- raw HTML omitted --&gt;s-/fixed32 | &lt;code&gt;number&lt;/code&gt; (32 bit integer) | 
 &lt;!-- raw HTML omitted --&gt;value | 0
 &lt;!-- raw HTML omitted --&gt; if signed
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;value &amp;gt;&amp;gt;&amp;gt; 0&lt;/code&gt; if unsigned | s-/u-/int64
 &lt;!-- raw HTML omitted --&gt;s-/fixed64 | &lt;code&gt;Long&lt;/code&gt;-like (optimal)
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;number&lt;/code&gt; (53 bit integer) | &lt;code&gt;Long.fromValue(value)&lt;/code&gt; with long.js
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;parseInt(value, 10)&lt;/code&gt; otherwise | float
 &lt;!-- raw HTML omitted --&gt;double | &lt;code&gt;number&lt;/code&gt; | &lt;code&gt;Number(value)&lt;/code&gt; | bool | &lt;code&gt;boolean&lt;/code&gt; | &lt;code&gt;Boolean(value)&lt;/code&gt; | string | &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;String(value)&lt;/code&gt; | bytes | &lt;code&gt;Uint8Array&lt;/code&gt; (optimal)
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;Buffer&lt;/code&gt; (optimal under node)
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;Array.&amp;lt;number&amp;gt;&lt;/code&gt; (8 bit integers) | &lt;code&gt;base64.decode(value)&lt;/code&gt; if a &lt;code&gt;string&lt;/code&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;code&gt;Object&lt;/code&gt; with non-zero &lt;code&gt;.length&lt;/code&gt; is assumed to be buffer-like | enum | &lt;code&gt;number&lt;/code&gt; (32 bit integer) | Looks up the numeric id if a &lt;code&gt;string&lt;/code&gt; | message | Valid message | &lt;code&gt;Message.fromObject(value)&lt;/code&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Explicit &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are considered as not set if the field is optional.&lt;/li&gt; 
 &lt;li&gt;Repeated fields are &lt;code&gt;Array.&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt; 
 &lt;li&gt;Map fields are &lt;code&gt;Object.&amp;lt;string,T&amp;gt;&lt;/code&gt; with the key being the string representation of the respective value or an 8 characters long binary hash string for &lt;code&gt;Long&lt;/code&gt;-likes.&lt;/li&gt; 
 &lt;li&gt;Types marked as &lt;em&gt;optimal&lt;/em&gt; provide the best performance because no conversion step (i.e. number to low and high bits or base64 string to buffer) is required.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Toolset&lt;/h3&gt; 
&lt;p&gt;With that in mind and again for performance reasons, each message class provides a distinct set of methods with each method doing just one thing. This avoids unnecessary assertions / redundant operations where performance is a concern but also forces a user to perform verification (of plain JavaScript objects that &lt;em&gt;might&lt;/em&gt; just so happen to be a valid message) explicitly where necessary - for example when dealing with user input.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that &lt;code&gt;Message&lt;/code&gt; below refers to any message class.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.verify&lt;/strong&gt;(message: &lt;code&gt;Object&lt;/code&gt;): &lt;code&gt;null|string&lt;/code&gt;
   &lt;!-- raw HTML omitted --&gt; verifies that a &lt;strong&gt;plain JavaScript object&lt;/strong&gt; satisfies the requirements of a valid message and thus can be encoded without issues. Instead of throwing, it returns the error message as a string, if any.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var payload = &quot;invalid (not an object)&quot;;
var err = AwesomeMessage.verify(payload);
if (err)
  throw Error(err);
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.encode&lt;/strong&gt;(message: &lt;code&gt;Message|Object&lt;/code&gt; [, writer: &lt;code&gt;Writer&lt;/code&gt;]): &lt;code&gt;Writer&lt;/code&gt;
   &lt;!-- raw HTML omitted --&gt; encodes a &lt;strong&gt;message instance&lt;/strong&gt; or valid &lt;strong&gt;plain JavaScript object&lt;/strong&gt;. This method does not implicitly verify the message and it&#39;s up to the user to make sure that the payload is a valid message.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var buffer = AwesomeMessage.encode(message).finish();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.encodeDelimited&lt;/strong&gt;(message: &lt;code&gt;Message|Object&lt;/code&gt; [, writer: &lt;code&gt;Writer&lt;/code&gt;]): &lt;code&gt;Writer&lt;/code&gt;
   &lt;!-- raw HTML omitted --&gt; works like &lt;code&gt;Message.encode&lt;/code&gt; but additionally prepends the length of the message as a varint.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.decode&lt;/strong&gt;(reader: &lt;code&gt;Reader|Uint8Array&lt;/code&gt;): &lt;code&gt;Message&lt;/code&gt;
   &lt;!-- raw HTML omitted --&gt; decodes a buffer to a &lt;strong&gt;message instance&lt;/strong&gt;. If required fields are missing, it throws a &lt;code&gt;util.ProtocolError&lt;/code&gt; with an &lt;code&gt;instance&lt;/code&gt; property set to the so far decoded message. If the wire format is invalid, it throws an &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;try {
  var decodedMessage = AwesomeMessage.decode(buffer);
} catch (e) {
    if (e instanceof protobuf.util.ProtocolError) {
      // e.instance holds the so far decoded message with missing required fields
    } else {
      // wire format is invalid
    }
}
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.decodeDelimited&lt;/strong&gt;(reader: &lt;code&gt;Reader|Uint8Array&lt;/code&gt;): &lt;code&gt;Message&lt;/code&gt;
   &lt;!-- raw HTML omitted --&gt; works like &lt;code&gt;Message.decode&lt;/code&gt; but additionally reads the length of the message prepended as a varint.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.create&lt;/strong&gt;(properties: &lt;code&gt;Object&lt;/code&gt;): &lt;code&gt;Message&lt;/code&gt;
   &lt;!-- raw HTML omitted --&gt; creates a new &lt;strong&gt;message instance&lt;/strong&gt; from a set of properties that satisfy the requirements of a valid message. Where applicable, it is recommended to prefer &lt;code&gt;Message.create&lt;/code&gt; over &lt;code&gt;Message.fromObject&lt;/code&gt; because it doesn&#39;t perform possibly redundant conversion.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var message = AwesomeMessage.create({ awesomeField: &quot;AwesomeString&quot; });
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.fromObject&lt;/strong&gt;(object: &lt;code&gt;Object&lt;/code&gt;): &lt;code&gt;Message&lt;/code&gt;
   &lt;!-- raw HTML omitted --&gt; converts any non-valid &lt;strong&gt;plain JavaScript object&lt;/strong&gt; to a &lt;strong&gt;message instance&lt;/strong&gt; using the conversion steps outlined within the table above.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var message = AwesomeMessage.fromObject({ awesomeField: 42 });
// converts awesomeField to a string
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.toObject&lt;/strong&gt;(message: &lt;code&gt;Message&lt;/code&gt; [, options: &lt;code&gt;ConversionOptions&lt;/code&gt;]): &lt;code&gt;Object&lt;/code&gt;
   &lt;!-- raw HTML omitted --&gt; converts a &lt;strong&gt;message instance&lt;/strong&gt; to an arbitrary &lt;strong&gt;plain JavaScript object&lt;/strong&gt; for interoperability with other libraries or storage. The resulting plain JavaScript object &lt;em&gt;might&lt;/em&gt; still satisfy the requirements of a valid message depending on the actual conversion options specified, but most of the time it does not.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var object = AwesomeMessage.toObject(message, {
  enums: String,  // enums as string names
  longs: String,  // longs as strings (requires long.js)
  bytes: String,  // bytes as base64 encoded strings
  defaults: true, // includes default values
  arrays: true,   // populates empty arrays (repeated fields) even if defaults=false
  objects: true,  // populates empty objects (map fields) even if defaults=false
  oneofs: true    // includes virtual oneof fields set to the present field&#39;s name
});
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For reference, the following diagram aims to display relationships between the different methods and the concept of a valid message:&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;In other words: &lt;code&gt;verify&lt;/code&gt; indicates that calling &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;encode&lt;/code&gt; directly on the plain object will [result in a valid message respectively] succeed. &lt;code&gt;fromObject&lt;/code&gt;, on the other hand, does conversion from a broader range of plain objects to create valid messages. (&lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/issues/748#issuecomment-291925749&quot;&gt;ref&lt;/a&gt;)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Examples&lt;/h2&gt; 
&lt;h3&gt;Using .proto files&lt;/h3&gt; 
&lt;p&gt;It is possible to load existing .proto files using the full library, which parses and compiles the definitions to ready to use (reflection-based) message classes:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-protobuf&quot;&gt;// awesome.proto
package awesomepackage;
syntax = &quot;proto3&quot;;

message AwesomeMessage {
    string awesome_field = 1; // becomes awesomeField
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;protobuf.load(&quot;awesome.proto&quot;, function(err, root) {
    if (err)
        throw err;

    // Obtain a message type
    var AwesomeMessage = root.lookupType(&quot;awesomepackage.AwesomeMessage&quot;);

    // Exemplary payload
    var payload = { awesomeField: &quot;AwesomeString&quot; };

    // Verify the payload if necessary (i.e. when possibly incomplete or invalid)
    var errMsg = AwesomeMessage.verify(payload);
    if (errMsg)
        throw Error(errMsg);

    // Create a new message
    var message = AwesomeMessage.create(payload); // or use .fromObject if conversion is necessary

    // Encode a message to an Uint8Array (browser) or Buffer (node)
    var buffer = AwesomeMessage.encode(message).finish();
    // ... do something with buffer

    // Decode an Uint8Array (browser) or Buffer (node) to a message
    var message = AwesomeMessage.decode(buffer);
    // ... do something with message

    // If the application uses length-delimited buffers, there is also encodeDelimited and decodeDelimited.

    // Maybe convert the message back to a plain object
    var object = AwesomeMessage.toObject(message, {
        longs: String,
        enums: String,
        bytes: String,
        // see ConversionOptions
    });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additionally, promise syntax can be used by omitting the callback, if preferred:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;protobuf.load(&quot;awesome.proto&quot;)
    .then(function(root) {
       ...
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using JSON descriptors&lt;/h3&gt; 
&lt;p&gt;The library utilizes JSON descriptors that are equivalent to a .proto definition. For example, the following is identical to the .proto definition seen above:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// awesome.json
{
  &quot;nested&quot;: {
    &quot;awesomepackage&quot;: {
      &quot;nested&quot;: {
        &quot;AwesomeMessage&quot;: {
          &quot;fields&quot;: {
            &quot;awesomeField&quot;: {
              &quot;type&quot;: &quot;string&quot;,
              &quot;id&quot;: 1
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;JSON descriptors closely resemble the internal reflection structure:&lt;/p&gt; 
&lt;p&gt;| Type (T) | Extends | Type-specific properties |--------------------|--------------------|------------------------- | &lt;em&gt;ReflectionObject&lt;/em&gt; | | options | &lt;em&gt;Namespace&lt;/em&gt; | &lt;em&gt;ReflectionObject&lt;/em&gt; | nested | Root | &lt;em&gt;Namespace&lt;/em&gt; | &lt;strong&gt;nested&lt;/strong&gt; | Type | &lt;em&gt;Namespace&lt;/em&gt; | &lt;strong&gt;fields&lt;/strong&gt; | Enum | &lt;em&gt;ReflectionObject&lt;/em&gt; | &lt;strong&gt;values&lt;/strong&gt; | Field | &lt;em&gt;ReflectionObject&lt;/em&gt; | rule, &lt;strong&gt;type&lt;/strong&gt;, &lt;strong&gt;id&lt;/strong&gt; | MapField | Field | &lt;strong&gt;keyType&lt;/strong&gt; | OneOf | &lt;em&gt;ReflectionObject&lt;/em&gt; | &lt;strong&gt;oneof&lt;/strong&gt; (array of field names) | Service | &lt;em&gt;Namespace&lt;/em&gt; | &lt;strong&gt;methods&lt;/strong&gt; | Method | &lt;em&gt;ReflectionObject&lt;/em&gt; | type, &lt;strong&gt;requestType&lt;/strong&gt;, &lt;strong&gt;responseType&lt;/strong&gt;, requestStream, responseStream&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;Bold properties&lt;/strong&gt; are required. &lt;em&gt;Italic types&lt;/em&gt; are abstract.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;T.fromJSON(name, json)&lt;/code&gt; creates the respective reflection object from a JSON descriptor&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;T#toJSON()&lt;/code&gt; creates a JSON descriptor from the respective reflection object (its name is used as the key within the parent)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Exclusively using JSON descriptors instead of .proto files enables the use of just the light library (the parser isn&#39;t required in this case).&lt;/p&gt; 
&lt;p&gt;A JSON descriptor can either be loaded the usual way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;protobuf.load(&quot;awesome.json&quot;, function(err, root) {
    if (err) throw err;

    // Continue at &quot;Obtain a message type&quot; above
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or it can be loaded inline:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var jsonDescriptor = require(&quot;./awesome.json&quot;); // exemplary for node

var root = protobuf.Root.fromJSON(jsonDescriptor);

// Continue at &quot;Obtain a message type&quot; above
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using reflection only&lt;/h3&gt; 
&lt;p&gt;Both the full and the light library include full reflection support. One could, for example, define the .proto definitions seen in the examples above using just reflection:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;...
var Root  = protobuf.Root,
    Type  = protobuf.Type,
    Field = protobuf.Field;

var AwesomeMessage = new Type(&quot;AwesomeMessage&quot;).add(new Field(&quot;awesomeField&quot;, 1, &quot;string&quot;));

var root = new Root().define(&quot;awesomepackage&quot;).add(AwesomeMessage);

// Continue at &quot;Create a new message&quot; above
...
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Detailed information on the reflection structure is available within the &lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#additional-documentation&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Using custom classes&lt;/h3&gt; 
&lt;p&gt;Message classes can also be extended with custom functionality and it is also possible to register a custom constructor with a reflected message type:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;...

// Define a custom constructor
function AwesomeMessage(properties) {
    // custom initialization code
    ...
}

// Register the custom constructor with its reflected type (*)
root.lookupType(&quot;awesomepackage.AwesomeMessage&quot;).ctor = AwesomeMessage;

// Define custom functionality
AwesomeMessage.customStaticMethod = function() { ... };
AwesomeMessage.prototype.customInstanceMethod = function() { ... };

// Continue at &quot;Create a new message&quot; above
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;(*) Besides referencing its reflected type through &lt;code&gt;AwesomeMessage.$type&lt;/code&gt; and &lt;code&gt;AwesomeMesage#$type&lt;/code&gt;, the respective custom class is automatically populated with:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;AwesomeMessage.create&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AwesomeMessage.encode&lt;/code&gt; and &lt;code&gt;AwesomeMessage.encodeDelimited&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AwesomeMessage.decode&lt;/code&gt; and &lt;code&gt;AwesomeMessage.decodeDelimited&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AwesomeMessage.verify&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;AwesomeMessage.fromObject&lt;/code&gt;, &lt;code&gt;AwesomeMessage.toObject&lt;/code&gt; and &lt;code&gt;AwesomeMessage#toJSON&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Afterwards, decoded messages of this type are &lt;code&gt;instanceof AwesomeMessage&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Alternatively, it is also possible to reuse and extend the internal constructor if custom initialization code is not required:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;...

// Reuse the internal constructor
var AwesomeMessage = root.lookupType(&quot;awesomepackage.AwesomeMessage&quot;).ctor;

// Define custom functionality
AwesomeMessage.customStaticMethod = function() { ... };
AwesomeMessage.prototype.customInstanceMethod = function() { ... };

// Continue at &quot;Create a new message&quot; above
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Using services&lt;/h3&gt; 
&lt;p&gt;The library also supports consuming services but it doesn&#39;t make any assumptions about the actual transport channel. Instead, a user must provide a suitable RPC implementation, which is an asynchronous function that takes the reflected service method, the binary request and a node-style callback as its parameters:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function rpcImpl(method, requestData, callback) {
    // perform the request using an HTTP request or a WebSocket for example
    var responseData = ...;
    // and call the callback with the binary response afterwards:
    callback(null, responseData);
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Below is a working example with a typescript implementation using grpc npm package.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const grpc = require(&#39;grpc&#39;)

const Client = grpc.makeGenericClientConstructor({})
const client = new Client(
  grpcServerUrl,
  grpc.credentials.createInsecure()
)

const rpcImpl = function(method, requestData, callback) {
  client.makeUnaryRequest(
    method.name,
    arg =&amp;gt; arg,
    arg =&amp;gt; arg,
    requestData,
    callback
  )
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-protobuf&quot;&gt;// greeter.proto
syntax = &quot;proto3&quot;;

service Greeter {
    rpc SayHello (HelloRequest) returns (HelloReply) {}
}

message HelloRequest {
    string name = 1;
}

message HelloReply {
    string message = 1;
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;...
var Greeter = root.lookup(&quot;Greeter&quot;);
var greeter = Greeter.create(/* see above */ rpcImpl, /* request delimited? */ false, /* response delimited? */ false);

greeter.sayHello({ name: &#39;you&#39; }, function(err, response) {
    console.log(&#39;Greeting:&#39;, response.message);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Services also support promises:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;greeter.sayHello({ name: &#39;you&#39; })
    .then(function(response) {
        console.log(&#39;Greeting:&#39;, response.message);
    });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is also an &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/examples/streaming-rpc.js&quot;&gt;example for streaming RPC&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Note that the service API is meant for clients. Implementing a server-side endpoint pretty much always requires transport channel (i.e. http, websocket, etc.) specific code with the only common denominator being that it decodes and encodes messages.&lt;/p&gt; 
&lt;h3&gt;Usage with TypeScript&lt;/h3&gt; 
&lt;p&gt;The library ships with its own &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/index.d.ts&quot;&gt;type definitions&lt;/a&gt; and modern editors like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; will automatically detect and use them for code completion.&lt;/p&gt; 
&lt;p&gt;The npm package depends on &lt;a href=&quot;https://www.npmjs.com/package/@types/node&quot;&gt;@types/node&lt;/a&gt; because of &lt;code&gt;Buffer&lt;/code&gt; and &lt;a href=&quot;https://www.npmjs.com/package/@types/long&quot;&gt;@types/long&lt;/a&gt; because of &lt;code&gt;Long&lt;/code&gt;. If you are not building for node and/or not using long.js, it should be safe to exclude them manually.&lt;/p&gt; 
&lt;h4&gt;Using the JS API&lt;/h4&gt; 
&lt;p&gt;The API shown above works pretty much the same with TypeScript. However, because everything is typed, accessing fields on instances of dynamically generated message classes requires either using bracket-notation (i.e. &lt;code&gt;message[&quot;awesomeField&quot;]&lt;/code&gt;) or explicit casts. Alternatively, it is possible to use a &lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#pbts-for-typescript&quot;&gt;typings file generated for its static counterpart&lt;/a&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { load } from &quot;protobufjs&quot;; // respectively &quot;./node_modules/protobufjs&quot;

load(&quot;awesome.proto&quot;, function(err, root) {
  if (err)
    throw err;

  // example code
  const AwesomeMessage = root.lookupType(&quot;awesomepackage.AwesomeMessage&quot;);

  let message = AwesomeMessage.create({ awesomeField: &quot;hello&quot; });
  console.log(`message = ${JSON.stringify(message)}`);

  let buffer = AwesomeMessage.encode(message).finish();
  console.log(`buffer = ${Array.prototype.toString.call(buffer)}`);

  let decoded = AwesomeMessage.decode(buffer);
  console.log(`decoded = ${JSON.stringify(decoded)}`);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using generated static code&lt;/h4&gt; 
&lt;p&gt;If you generated static code to &lt;code&gt;bundle.js&lt;/code&gt; using the CLI and its type definitions to &lt;code&gt;bundle.d.ts&lt;/code&gt;, then you can just do:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { AwesomeMessage } from &quot;./bundle.js&quot;;

// example code
let message = AwesomeMessage.create({ awesomeField: &quot;hello&quot; });
let buffer  = AwesomeMessage.encode(message).finish();
let decoded = AwesomeMessage.decode(buffer);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Using decorators&lt;/h4&gt; 
&lt;p&gt;The library also includes an early implementation of &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;decorators&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that decorators are an experimental feature in TypeScript and that declaration order is important depending on the JS target. For example, &lt;code&gt;@Field.d(2, AwesomeArrayMessage)&lt;/code&gt; requires that &lt;code&gt;AwesomeArrayMessage&lt;/code&gt; has been defined earlier when targeting &lt;code&gt;ES5&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;import { Message, Type, Field, OneOf } from &quot;protobufjs/light&quot;; // respectively &quot;./node_modules/protobufjs/light.js&quot;

export class AwesomeSubMessage extends Message&amp;lt;AwesomeSubMessage&amp;gt; {

  @Field.d(1, &quot;string&quot;)
  public awesomeString: string;

}

export enum AwesomeEnum {
  ONE = 1,
  TWO = 2
}

@Type.d(&quot;SuperAwesomeMessage&quot;)
export class AwesomeMessage extends Message&amp;lt;AwesomeMessage&amp;gt; {

  @Field.d(1, &quot;string&quot;, &quot;optional&quot;, &quot;awesome default string&quot;)
  public awesomeField: string;

  @Field.d(2, AwesomeSubMessage)
  public awesomeSubMessage: AwesomeSubMessage;

  @Field.d(3, AwesomeEnum, &quot;optional&quot;, AwesomeEnum.ONE)
  public awesomeEnum: AwesomeEnum;

  @OneOf.d(&quot;awesomeSubMessage&quot;, &quot;awesomeEnum&quot;)
  public which: string;

}

// example code
let message = new AwesomeMessage({ awesomeField: &quot;hello&quot; });
let buffer  = AwesomeMessage.encode(message).finish();
let decoded = AwesomeMessage.decode(buffer);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Supported decorators are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Type.d(typeName?: &lt;code&gt;string&lt;/code&gt;)&lt;/strong&gt; &amp;nbsp; &lt;em&gt;(optional)&lt;/em&gt;
   &lt;!-- raw HTML omitted --&gt; annotates a class as a protobuf message type. If &lt;code&gt;typeName&lt;/code&gt; is not specified, the constructor&#39;s runtime function name is used for the reflected type.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Field.d&amp;lt;T&amp;gt;(fieldId: &lt;code&gt;number&lt;/code&gt;, fieldType: &lt;code&gt;string | Constructor&amp;lt;T&amp;gt;&lt;/code&gt;, fieldRule?: &lt;code&gt;&quot;optional&quot; | &quot;required&quot; | &quot;repeated&quot;&lt;/code&gt;, defaultValue?: &lt;code&gt;T&lt;/code&gt;)&lt;/strong&gt;
   &lt;!-- raw HTML omitted --&gt; annotates a property as a protobuf field with the specified id and protobuf type.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;MapField.d&amp;lt;T extends { [key: string]: any }&amp;gt;(fieldId: &lt;code&gt;number&lt;/code&gt;, fieldKeyType: &lt;code&gt;string&lt;/code&gt;, fieldValueType. &lt;code&gt;string | Constructor&amp;lt;{}&amp;gt;&lt;/code&gt;)&lt;/strong&gt;
   &lt;!-- raw HTML omitted --&gt; annotates a property as a protobuf map field with the specified id, protobuf key and value type.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;OneOf.d&amp;lt;T extends string&amp;gt;(...fieldNames: &lt;code&gt;string[]&lt;/code&gt;)&lt;/strong&gt;
   &lt;!-- raw HTML omitted --&gt; annotates a property as a protobuf oneof covering the specified fields.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Other notes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Decorated types reside in &lt;code&gt;protobuf.roots[&quot;decorated&quot;]&lt;/code&gt; using a flat structure, so no duplicate names.&lt;/li&gt; 
 &lt;li&gt;Enums are copied to a reflected enum with a generic name on decorator evaluation because referenced enum objects have no runtime name the decorator could use.&lt;/li&gt; 
 &lt;li&gt;Default values must be specified as arguments to the decorator instead of using a property initializer for proper prototype behavior.&lt;/li&gt; 
 &lt;li&gt;Property names on decorated classes must not be renamed on compile time (i.e. by a minifier) because decorators just receive the original field name as a string.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;ProTip!&lt;/strong&gt; Not as pretty, but you can &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/examples/js-decorators.js&quot;&gt;use decorators in plain JavaScript&lt;/a&gt; as well.&lt;/p&gt; 
&lt;h2&gt;Command line&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that moving the CLI to &lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/cli&quot;&gt;its own package&lt;/a&gt; is a work in progress. At the moment, it&#39;s still part of the main package.&lt;/p&gt; 
&lt;p&gt;The command line interface (CLI) can be used to translate between file formats and to generate static code as well as TypeScript definitions.&lt;/p&gt; 
&lt;h3&gt;pbjs for JavaScript&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;Translates between file formats and generates static code.

  -t, --target     Specifies the target format. Also accepts a path to require a custom target.

                   json          JSON representation
                   json-module   JSON representation as a module
                   proto2        Protocol Buffers, Version 2
                   proto3        Protocol Buffers, Version 3
                   static        Static code without reflection (non-functional on its own)
                   static-module Static code without reflection as a module

  -p, --path       Adds a directory to the include path.

  -o, --out        Saves to a file instead of writing to stdout.

  --sparse         Exports only those types referenced from a main file (experimental).

  Module targets only:

  -w, --wrap       Specifies the wrapper to use. Also accepts a path to require a custom wrapper.

                   default   Default wrapper supporting both CommonJS and AMD
                   commonjs  CommonJS wrapper
                   amd       AMD wrapper
                   es6       ES6 wrapper (implies --es6)
                   closure   A closure adding to protobuf.roots where protobuf is a global

  -r, --root       Specifies an alternative protobuf.roots name.

  -l, --lint       Linter configuration. Defaults to protobuf.js-compatible rules:

                   eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins

  --es6            Enables ES6 syntax (const/let instead of var)

  Proto sources only:

  --keep-case      Keeps field casing instead of converting to camel case.

  Static targets only:

  --no-create      Does not generate create functions used for reflection compatibility.
  --no-encode      Does not generate encode functions.
  --no-decode      Does not generate decode functions.
  --no-verify      Does not generate verify functions.
  --no-convert     Does not generate convert functions like from/toObject
  --no-delimited   Does not generate delimited encode/decode functions.
  --no-beautify    Does not beautify generated code.
  --no-comments    Does not output any JSDoc comments.

  --force-long     Enforces the use of &#39;Long&#39; for s-/u-/int64 and s-/fixed64 fields.
  --force-number   Enforces the use of &#39;number&#39; for s-/u-/int64 and s-/fixed64 fields.
  --force-message  Enforces the use of message instances instead of plain objects.

usage: pbjs [options] file1.proto file2.json ...  (or pipe)  other | pbjs [options] -
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For production environments it is recommended to bundle all your .proto files to a single .json file, which minimizes the number of network requests and avoids any parser overhead (hint: works with just the &lt;strong&gt;light&lt;/strong&gt; library):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; pbjs -t json file1.proto file2.proto &amp;gt; bundle.json
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now, either include this file in your final bundle:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var root = protobuf.Root.fromJSON(require(&quot;./bundle.json&quot;));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or load it the usual way:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;protobuf.load(&quot;bundle.json&quot;, function(err, root) {
    ...
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Generated static code, on the other hand, works with just the &lt;strong&gt;minimal&lt;/strong&gt; library. For example&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; pbjs -t static-module -w commonjs -o compiled.js file1.proto file2.proto
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;will generate static code for definitions within &lt;code&gt;file1.proto&lt;/code&gt; and &lt;code&gt;file2.proto&lt;/code&gt; to a CommonJS module &lt;code&gt;compiled.js&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;ProTip!&lt;/strong&gt; Documenting your .proto files with &lt;code&gt;/** ... */&lt;/code&gt;-blocks or (trailing) &lt;code&gt;/// ...&lt;/code&gt; lines translates to generated static code.&lt;/p&gt; 
&lt;h3&gt;pbts for TypeScript&lt;/h3&gt; 
&lt;pre&gt;&lt;code&gt;Generates TypeScript definitions from annotated JavaScript files.

  -o, --out       Saves to a file instead of writing to stdout.

  -g, --global    Name of the global object in browser environments, if any.

  --no-comments   Does not output any JSDoc comments.

  Internal flags:

  -n, --name      Wraps everything in a module of the specified name.

  -m, --main      Whether building the main library without any imports.

usage: pbts [options] file1.js file2.js ...  (or)  other | pbts [options] -
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Picking up on the example above, the following not only generates static code to a CommonJS module &lt;code&gt;compiled.js&lt;/code&gt; but also its respective TypeScript definitions to &lt;code&gt;compiled.d.ts&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; pbjs -t static-module -w commonjs -o compiled.js file1.proto file2.proto
$&amp;gt; pbts -o compiled.d.ts compiled.js
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Additionally, TypeScript definitions of static modules are compatible with their reflection-based counterparts (i.e. as exported by JSON modules), as long as the following conditions are met:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Instead of using &lt;code&gt;new SomeMessage(...)&lt;/code&gt;, always use &lt;code&gt;SomeMessage.create(...)&lt;/code&gt; because reflection objects do not provide a constructor.&lt;/li&gt; 
 &lt;li&gt;Types, services and enums must start with an uppercase letter to become available as properties of the reflected types as well (i.e. to be able to use &lt;code&gt;MyMessage.MyEnum&lt;/code&gt; instead of &lt;code&gt;root.lookup(&quot;MyMessage.MyEnum&quot;)&lt;/code&gt;).&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;For example, the following generates a JSON module &lt;code&gt;bundle.js&lt;/code&gt; and a &lt;code&gt;bundle.d.ts&lt;/code&gt;, but no static code:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; pbjs -t json-module -w commonjs -o bundle.js file1.proto file2.proto
$&amp;gt; pbjs -t static-module file1.proto file2.proto | pbts -o bundle.d.ts -
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Reflection vs. static code&lt;/h3&gt; 
&lt;p&gt;While using .proto files directly requires the full library respectively pure reflection/JSON the light library, pretty much all code but the relatively short descriptors is shared.&lt;/p&gt; 
&lt;p&gt;Static code, on the other hand, requires just the minimal library, but generates additional source code without any reflection features. This also implies that there is a break-even point where statically generated code becomes larger than descriptor-based code once the amount of code generated exceeds the size of the full respectively light library.&lt;/p&gt; 
&lt;p&gt;There is no significant difference performance-wise as the code generated statically is pretty much the same as generated at runtime and both are largely interchangeable as seen in the previous section.&lt;/p&gt; 
&lt;p&gt;| Source | Library | Advantages | Tradeoffs |--------|---------|------------|----------- | .proto | full | Easily editable
 &lt;!-- raw HTML omitted --&gt;Interoperability with other libraries
 &lt;!-- raw HTML omitted --&gt;No compile step | Some parsing and possibly network overhead | JSON | light | Easily editable
 &lt;!-- raw HTML omitted --&gt;No parsing overhead
 &lt;!-- raw HTML omitted --&gt;Single bundle (no network overhead) | protobuf.js specific
 &lt;!-- raw HTML omitted --&gt;Has a compile step | static | minimal | Works where &lt;code&gt;eval&lt;/code&gt; access is restricted
 &lt;!-- raw HTML omitted --&gt;Fully documented
 &lt;!-- raw HTML omitted --&gt;Small footprint for small protos | Can be hard to edit
 &lt;!-- raw HTML omitted --&gt;No reflection
 &lt;!-- raw HTML omitted --&gt;Has a compile step&lt;/p&gt; 
&lt;h3&gt;Command line API&lt;/h3&gt; 
&lt;p&gt;Both utilities can be used programmatically by providing command line arguments and a callback to their respective &lt;code&gt;main&lt;/code&gt; functions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var pbjs = require(&quot;protobufjs/cli/pbjs&quot;); // or require(&quot;protobufjs/cli&quot;).pbjs / .pbts

pbjs.main([ &quot;--target&quot;, &quot;json-module&quot;, &quot;path/to/myproto.proto&quot; ], function(err, output) {
    if (err)
        throw err;
    // do something with output
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Additional documentation&lt;/h2&gt; 
&lt;h4&gt;Protocol Buffers&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/overview&quot;&gt;Google&#39;s Developer Guide&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;protobuf.js&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://protobufjs.github.io/protobuf.js&quot;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/wiki&quot;&gt;Frequently asked questions&lt;/a&gt; on our wiki&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h4&gt;Community&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/search?tab=newest&amp;amp;q=protobuf.js&quot;&gt;Questions and answers&lt;/a&gt; on StackOverflow&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Performance&lt;/h2&gt; 
&lt;p&gt;The package includes a benchmark that compares protobuf.js performance to native JSON (as far as this is possible) and &lt;a href=&quot;https://github.com/google/protobuf/tree/master/js&quot;&gt;Google&#39;s JS implementation&lt;/a&gt;. On an i7-2600K running node 6.9.1 it yields:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;benchmarking encoding performance ...

protobuf.js (reflect) x 541,707 ops/sec ±1.13% (87 runs sampled)
protobuf.js (static) x 548,134 ops/sec ±1.38% (89 runs sampled)
JSON (string) x 318,076 ops/sec ±0.63% (93 runs sampled)
JSON (buffer) x 179,165 ops/sec ±2.26% (91 runs sampled)
google-protobuf x 74,406 ops/sec ±0.85% (86 runs sampled)

   protobuf.js (static) was fastest
  protobuf.js (reflect) was 0.9% ops/sec slower (factor 1.0)
          JSON (string) was 41.5% ops/sec slower (factor 1.7)
          JSON (buffer) was 67.6% ops/sec slower (factor 3.1)
        google-protobuf was 86.4% ops/sec slower (factor 7.3)

benchmarking decoding performance ...

protobuf.js (reflect) x 1,383,981 ops/sec ±0.88% (93 runs sampled)
protobuf.js (static) x 1,378,925 ops/sec ±0.81% (93 runs sampled)
JSON (string) x 302,444 ops/sec ±0.81% (93 runs sampled)
JSON (buffer) x 264,882 ops/sec ±0.81% (93 runs sampled)
google-protobuf x 179,180 ops/sec ±0.64% (94 runs sampled)

  protobuf.js (reflect) was fastest
   protobuf.js (static) was 0.3% ops/sec slower (factor 1.0)
          JSON (string) was 78.1% ops/sec slower (factor 4.6)
          JSON (buffer) was 80.8% ops/sec slower (factor 5.2)
        google-protobuf was 87.0% ops/sec slower (factor 7.7)

benchmarking combined performance ...

protobuf.js (reflect) x 275,900 ops/sec ±0.78% (90 runs sampled)
protobuf.js (static) x 290,096 ops/sec ±0.96% (90 runs sampled)
JSON (string) x 129,381 ops/sec ±0.77% (90 runs sampled)
JSON (buffer) x 91,051 ops/sec ±0.94% (90 runs sampled)
google-protobuf x 42,050 ops/sec ±0.85% (91 runs sampled)

   protobuf.js (static) was fastest
  protobuf.js (reflect) was 4.7% ops/sec slower (factor 1.0)
          JSON (string) was 55.3% ops/sec slower (factor 2.2)
          JSON (buffer) was 68.6% ops/sec slower (factor 3.2)
        google-protobuf was 85.5% ops/sec slower (factor 6.9)
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;These results are achieved by&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;generating type-specific encoders, decoders, verifiers and converters at runtime&lt;/li&gt; 
 &lt;li&gt;configuring the reader/writer interface according to the environment&lt;/li&gt; 
 &lt;li&gt;using node-specific functionality where beneficial and, of course&lt;/li&gt; 
 &lt;li&gt;avoiding unnecessary operations through splitting up &lt;a href=&quot;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#toolset&quot;&gt;the toolset&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can also run &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/bench/index.js&quot;&gt;the benchmark&lt;/a&gt; ...&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run bench
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/bench/prof.js&quot;&gt;the profiler&lt;/a&gt; yourself (the latter requires a recent version of node):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run prof &amp;lt;encode|decode|encode-browser|decode-browser&amp;gt; [iterations=10000000]
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Note that as of this writing, the benchmark suite performs significantly slower on node 7.2.0 compared to 6.9.1 because moths.&lt;/p&gt; 
&lt;h2&gt;Compatibility&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;Works in all modern and not-so-modern browsers except IE8.&lt;/li&gt; 
 &lt;li&gt;Because the internals of this package do not rely on &lt;code&gt;google/protobuf/descriptor.proto&lt;/code&gt;, options are parsed and presented literally.&lt;/li&gt; 
 &lt;li&gt;If typed arrays are not supported by the environment, plain arrays will be used instead.&lt;/li&gt; 
 &lt;li&gt;Support for pre-ES5 environments (except IE8) can be achieved by &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/scripts/polyfill.js&quot;&gt;using a polyfill&lt;/a&gt;.&lt;/li&gt; 
 &lt;li&gt;Support for &lt;a href=&quot;https://w3c.github.io/webappsec-csp/&quot;&gt;Content Security Policy&lt;/a&gt;-restricted environments (like Chrome extensions without &lt;a href=&quot;https://developer.chrome.com/extensions/contentSecurityPolicy#relaxing-eval&quot;&gt;unsafe-eval&lt;/a&gt;) can be achieved by generating and using static code instead.&lt;/li&gt; 
 &lt;li&gt;If a proper way to work with 64 bit values (uint64, int64 etc.) is required, just install &lt;a href=&quot;https://github.com/dcodeIO/long.js&quot;&gt;long.js&lt;/a&gt; alongside this library. All 64 bit numbers will then be returned as a &lt;code&gt;Long&lt;/code&gt; instance instead of a possibly unsafe JavaScript number (&lt;a href=&quot;https://github.com/dcodeIO/long.js&quot;&gt;see&lt;/a&gt;).&lt;/li&gt; 
 &lt;li&gt;For descriptor.proto interoperability, see &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/tree/master/ext/descriptor&quot;&gt;ext/descriptor&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Building&lt;/h2&gt; 
&lt;p&gt;To build the library or its components yourself, clone it from GitHub and install the development dependencies:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; git clone https://github.com/dcodeIO/protobuf.js.git
$&amp;gt; cd protobuf.js
$&amp;gt; npm install
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Building the respective development and production versions with their respective source maps to &lt;code&gt;dist/&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run build
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Building the documentation to &lt;code&gt;docs/&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run docs
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Building the TypeScript definition to &lt;code&gt;index.d.ts&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run types
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Browserify integration&lt;/h3&gt; 
&lt;p&gt;By default, protobuf.js integrates into any browserify build-process without requiring any optional modules. Hence:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;If int64 support is required, explicitly require the &lt;code&gt;long&lt;/code&gt; module somewhere in your project as it will be excluded otherwise. This assumes that a global &lt;code&gt;require&lt;/code&gt; function is present that protobuf.js can call to obtain the long module.&lt;/p&gt; &lt;p&gt;If there is no global &lt;code&gt;require&lt;/code&gt; function present after bundling, it&#39;s also possible to assign the long module programmatically:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var Long = ...;

protobuf.util.Long = Long;
protobuf.configure();
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you have any special requirements, there is &lt;a href=&quot;https://github.com/dcodeIO/protobuf.js/blob/master/scripts/bundle.js&quot;&gt;the bundler&lt;/a&gt; for reference.&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;License:&lt;/strong&gt; &lt;a href=&quot;https://opensource.org/licenses/BSD-3-Clause&quot;&gt;BSD 3-Clause License&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>winstonjs/winston</title>
      <link>https://github.com/winstonjs/winston</link>
      <description>&lt;p&gt;A logger for just about everything.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;winston&lt;/h1&gt; 
&lt;p&gt;A logger for just about everything.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/winston.svg?style=flat-square&quot; alt=&quot;Version npm&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://npmcharts.com/compare/winston?minimal=true&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/winston.svg?style=flat-square&quot; alt=&quot;npm Downloads&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://travis-ci.org/winstonjs/winston&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/winstonjs/winston/master.svg?style=flat-square&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://david-dm.org/winstonjs/winston&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/winstonjs/winston.svg?style=flat-square&quot; alt=&quot;Dependencies&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://nodei.co/npm/winston/&quot;&gt;&lt;img src=&quot;https://nodei.co/npm/winston.png?downloads=true&amp;amp;downloadRank=true&quot; alt=&quot;NPM&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/winstonjs/winston?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg&quot; alt=&quot;Join the chat at https://gitter.im/winstonjs/winston&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;winston@3&lt;/h2&gt; 
&lt;p&gt;See the &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/UPGRADE-3.0.md&quot;&gt;Upgrade Guide&lt;/a&gt; for more information. Bug reports and PRs welcome!&lt;/p&gt; 
&lt;h2&gt;Looking for &lt;code&gt;winston@2.x&lt;/code&gt; documentation?&lt;/h2&gt; 
&lt;p&gt;Please note that the documentation below is for &lt;code&gt;winston@3&lt;/code&gt;. &lt;a href=&quot;https://github.com/winstonjs/winston/tree/2.x&quot;&gt;Read the &lt;code&gt;winston@2.x&lt;/code&gt; documentation&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Motivation&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each &lt;code&gt;winston&lt;/code&gt; logger can have multiple transports (see: &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#transports&quot;&gt;Transports&lt;/a&gt;) configured at different levels (see: &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#logging-levels&quot;&gt;Logging levels&lt;/a&gt;). For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; aims to decouple parts of the logging process to make it more flexible and extensible. Attention is given to supporting flexibility in log formatting (see: &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#formats&quot;&gt;Formats&lt;/a&gt;) &amp;amp; levels (see: &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#using-custom-logging-levels&quot;&gt;Using custom logging levels&lt;/a&gt;), and ensuring those APIs decoupled from the implementation of transport logging (i.e. how the logs are stored / indexed, see: &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#adding-custom-transports&quot;&gt;Adding Custom Transports&lt;/a&gt;) to the API that they exposed to the programmer.&lt;/p&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;p&gt;TL;DR? Check out the &lt;a href=&quot;https://github.com/winstonjs/winston/blob/master/examples/quick-start.js&quot;&gt;quick start example&lt;/a&gt; in &lt;code&gt;./examples/&lt;/code&gt;. There are a number of other examples in &lt;a href=&quot;https://github.com/winstonjs/winston/tree/master/examples&quot;&gt;&lt;code&gt;./examples/*.js&lt;/code&gt;&lt;/a&gt;. Don&#39;t see an example you think should be there? Submit a pull request to add it!&lt;/p&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;p&gt;The recommended way to use &lt;code&gt;winston&lt;/code&gt; is to create your own logger. The simplest way to do this is using &lt;code&gt;winston.createLogger&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const winston = require(&#39;winston&#39;);

const logger = winston.createLogger({
  level: &#39;info&#39;,
  format: winston.format.json(),
  defaultMeta: { service: &#39;user-service&#39; },
  transports: [
    //
    // - Write all logs with level `error` and below to `error.log`
    // - Write all logs with level `info` and below to `combined.log`
    //
    new winston.transports.File({ filename: &#39;error.log&#39;, level: &#39;error&#39; }),
    new winston.transports.File({ filename: &#39;combined.log&#39; }),
  ],
});

//
// If we&#39;re not in production then log to the `console` with the format:
// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `
//
if (process.env.NODE_ENV !== &#39;production&#39;) {
  logger.add(new winston.transports.Console({
    format: winston.format.simple(),
  }));
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may also log directly via the default logger exposed by &lt;code&gt;require(&#39;winston&#39;)&lt;/code&gt;, but this merely intended to be a convenient shared logger to use throughout your application if you so choose.&lt;/p&gt; 
&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#quick-start&quot;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#logging&quot;&gt;Logging&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#creating-your-own-logger&quot;&gt;Creating your logger&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#streams-objectmode-and-info-objects&quot;&gt;Streams, &lt;code&gt;objectMode&lt;/code&gt;, and &lt;code&gt;info&lt;/code&gt; objects&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#formats&quot;&gt;Formats&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#combining-formats&quot;&gt;Combining formats&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#string-interpolation&quot;&gt;String interpolation&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#filtering-info-objects&quot;&gt;Filtering &lt;code&gt;info&lt;/code&gt; Objects&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#creating-custom-formats&quot;&gt;Creating custom formats&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#logging-levels&quot;&gt;Logging levels&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#using-logging-levels&quot;&gt;Using logging levels&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#using-custom-logging-levels&quot;&gt;Using custom logging levels&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#transports&quot;&gt;Transports&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#multiple-transports-of-the-same-type&quot;&gt;Multiple transports of the same type&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#adding-custom-transports&quot;&gt;Adding Custom Transports&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#common-transport-options&quot;&gt;Common Transport options&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#exceptions&quot;&gt;Exceptions&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#handling-uncaught-exceptions-with-winston&quot;&gt;Handling Uncaught Exceptions with winston&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#to-exit-or-not-to-exit&quot;&gt;To Exit or Not to Exit&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#rejections&quot;&gt;Rejections&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#handling-uncaught-promise-rejections-with-winston&quot;&gt;Handling Uncaught Promise Rejections with winston&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#profiling&quot;&gt;Profiling&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#streaming-logs&quot;&gt;Streaming Logs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#querying-logs&quot;&gt;Querying Logs&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#further-reading&quot;&gt;Further Reading&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#using-the-default-logger&quot;&gt;Using the default logger&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#awaiting-logs-to-be-written-in-winston&quot;&gt;Awaiting logs to be written in &lt;code&gt;winston&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#working-with-multiple-loggers-in-winston&quot;&gt;Working with multiple Loggers in &lt;code&gt;winston&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#run-tests&quot;&gt;Run Tests&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Logging&lt;/h2&gt; 
&lt;p&gt;Logging levels in &lt;code&gt;winston&lt;/code&gt; conform to the severity ordering specified by &lt;a href=&quot;https://tools.ietf.org/html/rfc5424&quot;&gt;RFC5424&lt;/a&gt;: &lt;em&gt;severity of all levels is assumed to be numerically &lt;strong&gt;ascending&lt;/strong&gt; from most important to least important.&lt;/em&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const levels = { 
  error: 0,
  warn: 1,
  info: 2,
  http: 3,
  verbose: 4,
  debug: 5,
  silly: 6
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Creating your own Logger&lt;/h3&gt; 
&lt;p&gt;You get started by creating a logger using &lt;code&gt;winston.createLogger&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: &#39;combined.log&#39; })
  ]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;A logger accepts&amp;nbsp;the following parameters:&lt;/p&gt; 
&lt;p&gt;| Name | Default | Description | | ------------- | --------------------------- | --------------- | | &lt;code&gt;level&lt;/code&gt; | &lt;code&gt;&#39;info&#39;&lt;/code&gt; | Log only if &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#streams-objectmode-and-info-objects&quot;&gt;&lt;code&gt;info.level&lt;/code&gt;&lt;/a&gt; less than or equal to this level |&lt;br&gt; | &lt;code&gt;levels&lt;/code&gt; | &lt;code&gt;winston.config.npm.levels&lt;/code&gt; | Levels (and colors) representing log priorities | | &lt;code&gt;format&lt;/code&gt; | &lt;code&gt;winston.format.json&lt;/code&gt; | Formatting for &lt;code&gt;info&lt;/code&gt; messages (see: &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#formats&quot;&gt;Formats&lt;/a&gt;) | | &lt;code&gt;transports&lt;/code&gt; | &lt;code&gt;[]&lt;/code&gt; &lt;em&gt;(No transports)&lt;/em&gt; | Set of logging targets for &lt;code&gt;info&lt;/code&gt; messages | | &lt;code&gt;exitOnError&lt;/code&gt; | &lt;code&gt;true&lt;/code&gt; | If false, handled exceptions will not cause &lt;code&gt;process.exit&lt;/code&gt; | | &lt;code&gt;silent&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; | If true, all logs are suppressed |&lt;/p&gt; 
&lt;p&gt;The levels provided to &lt;code&gt;createLogger&lt;/code&gt; will be defined as convenience methods on the &lt;code&gt;logger&lt;/code&gt; returned.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//
// Logging
//
logger.log({
  level: &#39;info&#39;,
  message: &#39;Hello distributed log files!&#39;
});

logger.info(&#39;Hello again distributed logs&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can add or remove transports from the &lt;code&gt;logger&lt;/code&gt; once it has been provided to you from &lt;code&gt;winston.createLogger&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const files = new winston.transports.File({ filename: &#39;combined.log&#39; });
const console = new winston.transports.Console();

logger
  .clear()          // Remove all transports
  .add(console)     // Add console transport
  .add(files)       // Add file transport
  .remove(console); // Remove console transport
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also wholesale reconfigure a &lt;code&gt;winston.Logger&lt;/code&gt; instance using the &lt;code&gt;configure&lt;/code&gt; method:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({
  level: &#39;info&#39;,
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: &#39;combined.log&#39; })
  ]
});

//
// Replaces the previous transports with those in the
// new configuration wholesale.
//
const DailyRotateFile = require(&#39;winston-daily-rotate-file&#39;);
logger.configure({
  level: &#39;verbose&#39;,
  transports: [
    new DailyRotateFile(opts)
  ]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Creating child loggers&lt;/h3&gt; 
&lt;p&gt;You can create child loggers from existing loggers to pass metadata overrides:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({
  transports: [
    new winston.transports.Console(),
  ]
});

const childLogger = logger.child({ requestId: &#39;451&#39; });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Streams, &lt;code&gt;objectMode&lt;/code&gt;, and &lt;code&gt;info&lt;/code&gt; objects&lt;/h3&gt; 
&lt;p&gt;In &lt;code&gt;winston&lt;/code&gt;, both &lt;code&gt;Logger&lt;/code&gt; and &lt;code&gt;Transport&lt;/code&gt; instances are treated as &lt;a href=&quot;https://nodejs.org/api/stream.html#stream_object_mode&quot;&gt;&lt;code&gt;objectMode&lt;/code&gt;&lt;/a&gt; streams that accept an &lt;code&gt;info&lt;/code&gt; object.&lt;/p&gt; 
&lt;p&gt;The &lt;code&gt;info&lt;/code&gt; parameter provided to a given format represents a single log message. The object itself is mutable. Every &lt;code&gt;info&lt;/code&gt; must have at least the &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; properties:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const info = {
  level: &#39;info&#39;,                 // Level of the logging message  
  message: &#39;Hey! Log something?&#39; // Descriptive message being logged.
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Properties &lt;strong&gt;besides level and message&lt;/strong&gt; are considered as &quot;&lt;code&gt;meta&lt;/code&gt;&quot;. i.e.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { level, message, ...meta } = info;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Several of the formats in &lt;code&gt;logform&lt;/code&gt; itself add additional properties:&lt;/p&gt; 
&lt;p&gt;| Property | Format added by | Description | | ----------- | --------------- | ----------- | | &lt;code&gt;splat&lt;/code&gt; | &lt;code&gt;splat()&lt;/code&gt; | String interpolation splat for &lt;code&gt;%d %s&lt;/code&gt;-style messages. | | &lt;code&gt;timestamp&lt;/code&gt; | &lt;code&gt;timestamp()&lt;/code&gt; | timestamp the message was received. | | &lt;code&gt;label&lt;/code&gt; | &lt;code&gt;label()&lt;/code&gt; | Custom label associated with each message. | | &lt;code&gt;ms&lt;/code&gt; | &lt;code&gt;ms()&lt;/code&gt; | Number of milliseconds since the previous log message. |&lt;/p&gt; 
&lt;p&gt;As a consumer you may add whatever properties you wish –&amp;nbsp;&lt;em&gt;internal state is maintained by &lt;code&gt;Symbol&lt;/code&gt; properties:&lt;/em&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;Symbol.for(&#39;level&#39;)&lt;/code&gt; &lt;em&gt;&lt;strong&gt;(READ-ONLY)&lt;/strong&gt;:&lt;/em&gt; equal to &lt;code&gt;level&lt;/code&gt; property. &lt;strong&gt;Is treated as immutable by all code.&lt;/strong&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Symbol.for(&#39;message&#39;):&lt;/code&gt; complete string message set by &quot;finalizing formats&quot;: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;code&gt;json&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;logstash&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;prettyPrint&lt;/code&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;code&gt;simple&lt;/code&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;Symbol.for(&#39;splat&#39;)&lt;/code&gt;: additional string interpolation arguments. &lt;em&gt;Used exclusively by &lt;code&gt;splat()&lt;/code&gt; format.&lt;/em&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;These Symbols are stored in another package: &lt;code&gt;triple-beam&lt;/code&gt; so that all consumers of &lt;code&gt;logform&lt;/code&gt; can have the same Symbol reference. i.e.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { LEVEL, MESSAGE, SPLAT } = require(&#39;triple-beam&#39;);

console.log(LEVEL === Symbol.for(&#39;level&#39;));
// true

console.log(MESSAGE === Symbol.for(&#39;message&#39;));
// true

console.log(SPLAT === Symbol.for(&#39;splat&#39;));
// true
&lt;/code&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; any &lt;code&gt;{ message&amp;nbsp;}&lt;/code&gt; property in a &lt;code&gt;meta&lt;/code&gt; object provided will automatically be concatenated to any &lt;code&gt;msg&lt;/code&gt; already provided: For example the below will concatenate &#39;world&#39; onto &#39;hello&#39;:&lt;/p&gt; 
 &lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;logger.log(&#39;error&#39;, &#39;hello&#39;, { message: &#39;world&#39; });
logger.info(&#39;hello&#39;, { message: &#39;world&#39; });
&lt;/code&gt;&lt;/pre&gt; 
&lt;/blockquote&gt; 
&lt;h2&gt;Formats&lt;/h2&gt; 
&lt;p&gt;Formats in &lt;code&gt;winston&lt;/code&gt; can be accessed from &lt;code&gt;winston.format&lt;/code&gt;. They are implemented in &lt;a href=&quot;https://github.com/winstonjs/logform&quot;&gt;&lt;code&gt;logform&lt;/code&gt;&lt;/a&gt;, a separate module from &lt;code&gt;winston&lt;/code&gt;. This allows flexibility when writing your own transports in case you wish to include a default format with your transport.&lt;/p&gt; 
&lt;p&gt;In modern versions of &lt;code&gt;node&lt;/code&gt; template strings are very performant and are the recommended way for doing most end-user formatting. If you want to bespoke format your logs, &lt;code&gt;winston.format.printf&lt;/code&gt; is for you:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { createLogger, format, transports } = require(&#39;winston&#39;);
const { combine, timestamp, label, printf } = format;

const myFormat = printf(({ level, message, label, timestamp }) =&amp;gt; {
  return `${timestamp} [${label}] ${level}: ${message}`;
});

const logger = createLogger({
  format: combine(
    label({ label: &#39;right meow!&#39; }),
    timestamp(),
    myFormat
  ),
  transports: [new transports.Console()]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To see what built-in formats are available and learn more about creating your own custom logging formats, see &lt;a href=&quot;https://github.com/winstonjs/logform#readme&quot;&gt;&lt;code&gt;logform&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;h3&gt;Combining formats&lt;/h3&gt; 
&lt;p&gt;Any number of formats may be combined into a single format using &lt;code&gt;format.combine&lt;/code&gt;. Since &lt;code&gt;format.combine&lt;/code&gt; takes no &lt;code&gt;opts&lt;/code&gt;, as a convenience it returns pre-created instance of the combined format.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { createLogger, format, transports } = require(&#39;winston&#39;);
const { combine, timestamp, label, prettyPrint } = format;

const logger = createLogger({
  format: combine(
    label({ label: &#39;right meow!&#39; }),
    timestamp(),
    prettyPrint()
  ),
  transports: [new transports.Console()]
})

logger.log({
  level: &#39;info&#39;,
  message: &#39;What time is the testing at?&#39;
});
// Outputs:
// { level: &#39;info&#39;,
//   message: &#39;What time is the testing at?&#39;,
//   label: &#39;right meow!&#39;,
//   timestamp: &#39;2017-09-30T03:57:26.875Z&#39; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;String interpolation&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;log&lt;/code&gt; method provides the string interpolation using &lt;a href=&quot;https://nodejs.org/dist/latest/docs/api/util.html#util_util_format_format_args&quot;&gt;util.format&lt;/a&gt;. &lt;strong&gt;It must be enabled using &lt;code&gt;format.splat()&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Below is an example that defines a format with string interpolation of messages using &lt;code&gt;format.splat&lt;/code&gt; and then serializes the entire &lt;code&gt;info&lt;/code&gt; message using &lt;code&gt;format.simple&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { createLogger, format, transports } = require(&#39;winston&#39;);
const logger = createLogger({
  format: format.combine(
    format.splat(),
    format.simple()
  ),
  transports: [new transports.Console()]
});

//&amp;nbsp;info: test message my string {}
logger.log(&#39;info&#39;, &#39;test message %s&#39;, &#39;my string&#39;);

//&amp;nbsp;info: test message 123 {}
logger.log(&#39;info&#39;, &#39;test message %d&#39;, 123);

// info: test message first second {number: 123}
logger.log(&#39;info&#39;, &#39;test message %s, %s&#39;, &#39;first&#39;, &#39;second&#39;, { number: 123 });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Filtering &lt;code&gt;info&lt;/code&gt; Objects&lt;/h3&gt; 
&lt;p&gt;If you wish to filter out a given &lt;code&gt;info&lt;/code&gt; Object completely when logging then simply return a falsey value.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { createLogger, format, transports } = require(&#39;winston&#39;);

// Ignore log messages if they have { private: true }
const ignorePrivate = format((info, opts) =&amp;gt; {
  if (info.private) { return false; }
  return info;
});

const logger = createLogger({
  format: format.combine(
    ignorePrivate(),
    format.json()
  ),
  transports: [new transports.Console()]
});

// Outputs: {&quot;level&quot;:&quot;error&quot;,&quot;message&quot;:&quot;Public error to share&quot;}
logger.log({
  level: &#39;error&#39;,
  message: &#39;Public error to share&#39;
});

// Messages with { private: true } will not be written when logged.
logger.log({
  private: true,
  level: &#39;error&#39;,
  message: &#39;This is super secret - hide it.&#39;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Use of &lt;code&gt;format.combine&lt;/code&gt; will respect any falsey values return and stop evaluation of later formats in the series. For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { format } = require(&#39;winston&#39;);
const { combine, timestamp, label } = format;

const willNeverThrow = format.combine(
  format(info =&amp;gt; { return false })(), // Ignores everything
  format(info =&amp;gt; { throw new Error(&#39;Never reached&#39;) })()
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Creating custom formats&lt;/h3&gt; 
&lt;p&gt;Formats are prototypal objects (i.e. class instances) that define a single method: &lt;code&gt;transform(info, opts)&lt;/code&gt; and return the mutated &lt;code&gt;info&lt;/code&gt;:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;info&lt;/code&gt;: an object representing the log message.&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;opts&lt;/code&gt;: setting specific to the current instance of the format.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;They are expected to return one of two things:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;An &lt;code&gt;info&lt;/code&gt; Object&lt;/strong&gt; representing the modified &lt;code&gt;info&lt;/code&gt; argument. Object references need not be preserved&amp;nbsp;if immutability is preferred. All current built-in formats consider &lt;code&gt;info&lt;/code&gt; mutable, but [immutablejs] is being considered for future releases.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;A falsey value&lt;/strong&gt; indicating that the &lt;code&gt;info&lt;/code&gt; argument should be ignored by the caller. (See: &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/#filtering-info-objects&quot;&gt;Filtering &lt;code&gt;info&lt;/code&gt; Objects&lt;/a&gt;) below.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;code&gt;winston.format&lt;/code&gt; is designed to be as simple as possible. To define a new format simple pass it a &lt;code&gt;transform(info, opts)&lt;/code&gt; function to get a new &lt;code&gt;Format&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;The named &lt;code&gt;Format&lt;/code&gt; returned can be used to create as many copies of the given &lt;code&gt;Format&lt;/code&gt; as desired:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { format } = require(&#39;winston&#39;);

const volume = format((info, opts) =&amp;gt; {
  if (opts.yell) {
    info.message = info.message.toUpperCase();
  } else if (opts.whisper) {
    info.message = info.message.toLowerCase();
  }

  return info;
});

// `volume` is now a function that returns instances of the format.
const scream = volume({ yell: true });
console.dir(scream.transform({
  level: &#39;info&#39;,
  message: `sorry for making you YELL in your head!`
}, scream.options));
// {
//   level: &#39;info&#39;
//   message: &#39;SORRY FOR MAKING YOU YELL IN YOUR HEAD!&#39;
// }

// `volume` can be used multiple times to create different formats.
const whisper = volume({ whisper: true });
console.dir(whisper.transform({
  level: &#39;info&#39;,
  message: `WHY ARE THEY MAKING US YELL SO MUCH!`
}, whisper.options));
// {
//   level: &#39;info&#39;
//   message: &#39;why are they making us yell so much!&#39;
// }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Logging Levels&lt;/h2&gt; 
&lt;p&gt;Logging levels in &lt;code&gt;winston&lt;/code&gt; conform to the severity ordering specified by &lt;a href=&quot;https://tools.ietf.org/html/rfc5424&quot;&gt;RFC5424&lt;/a&gt;: &lt;em&gt;severity of all levels is assumed to be numerically &lt;strong&gt;ascending&lt;/strong&gt; from most important to least important.&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;Each &lt;code&gt;level&lt;/code&gt; is given a specific integer priority. The higher the priority the more important the message is considered to be, and the lower the corresponding integer priority. For example, as specified exactly in RFC5424 the &lt;code&gt;syslog&lt;/code&gt; levels are prioritized from 0 to 7 (highest to lowest).&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{ 
  emerg: 0, 
  alert: 1, 
  crit: 2, 
  error: 3, 
  warning: 4, 
  notice: 5, 
  info: 6, 
  debug: 7
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Similarly, &lt;code&gt;npm&lt;/code&gt; logging levels are prioritized from 0 to 6 (highest to lowest):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{ 
  error: 0, 
  warn: 1, 
  info: 2, 
  http: 3,
  verbose: 4, 
  debug: 5, 
  silly: 6 
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you do not explicitly define the levels that &lt;code&gt;winston&lt;/code&gt; should use, the &lt;code&gt;npm&lt;/code&gt; levels above will be used.&lt;/p&gt; 
&lt;h3&gt;Using Logging Levels&lt;/h3&gt; 
&lt;p&gt;Setting the level for your logging message can be accomplished in one of two ways. You can pass a string representing the logging level to the log() method or use the level specified methods defined on every winston Logger.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//
// Any logger instance
//
logger.log(&#39;silly&#39;, &quot;127.0.0.1 - there&#39;s no place like home&quot;);
logger.log(&#39;debug&#39;, &quot;127.0.0.1 - there&#39;s no place like home&quot;);
logger.log(&#39;verbose&#39;, &quot;127.0.0.1 - there&#39;s no place like home&quot;);
logger.log(&#39;info&#39;, &quot;127.0.0.1 - there&#39;s no place like home&quot;);
logger.log(&#39;warn&#39;, &quot;127.0.0.1 - there&#39;s no place like home&quot;);
logger.log(&#39;error&#39;, &quot;127.0.0.1 - there&#39;s no place like home&quot;);
logger.info(&quot;127.0.0.1 - there&#39;s no place like home&quot;);
logger.warn(&quot;127.0.0.1 - there&#39;s no place like home&quot;);
logger.error(&quot;127.0.0.1 - there&#39;s no place like home&quot;);

//
// Default logger
//
winston.log(&#39;info&#39;, &quot;127.0.0.1 - there&#39;s no place like home&quot;);
winston.info(&quot;127.0.0.1 - there&#39;s no place like home&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; allows you to define a &lt;code&gt;level&lt;/code&gt; property on each transport which specifies the &lt;strong&gt;maximum&lt;/strong&gt; level of messages that a transport should log. For example, using the &lt;code&gt;syslog&lt;/code&gt; levels you could log only &lt;code&gt;error&lt;/code&gt; messages to the console and everything &lt;code&gt;info&lt;/code&gt; and below to a file (which includes &lt;code&gt;error&lt;/code&gt; messages):&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({
  levels: winston.config.syslog.levels,
  transports: [
    new winston.transports.Console({ level: &#39;error&#39; }),
    new winston.transports.File({
      filename: &#39;combined.log&#39;,
      level: &#39;info&#39;
    })
  ]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You may also dynamically change the log level of a transport:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const transports = {
  console: new winston.transports.Console({ level: &#39;warn&#39; }),
  file: new winston.transports.File({ filename: &#39;combined.log&#39;, level: &#39;error&#39; })
};

const logger = winston.createLogger({
  transports: [
    transports.console,
    transports.file
  ]
});

logger.info(&#39;Will not be logged in either transport!&#39;);
transports.console.level = &#39;info&#39;;
transports.file.level = &#39;info&#39;;
logger.info(&#39;Will be logged in both transports!&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; supports customizable logging levels, defaulting to npm style logging levels. Levels must be specified at the time of creating your logger.&lt;/p&gt; 
&lt;h3&gt;Using Custom Logging Levels&lt;/h3&gt; 
&lt;p&gt;In addition to the predefined &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;syslog&lt;/code&gt;, and &lt;code&gt;cli&lt;/code&gt; levels available in &lt;code&gt;winston&lt;/code&gt;, you can also choose to define your own:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const myCustomLevels = {
  levels: {
    foo: 0,
    bar: 1,
    baz: 2,
    foobar: 3
  },
  colors: {
    foo: &#39;blue&#39;,
    bar: &#39;green&#39;,
    baz: &#39;yellow&#39;,
    foobar: &#39;red&#39;
  }
};

const customLevelLogger = winston.createLogger({
  levels: myCustomLevels.levels
});

customLevelLogger.foobar(&#39;some foobar level-ed message&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Although there is slight repetition in this data structure, it enables simple encapsulation if you do not want to have colors. If you do wish to have colors, in addition to passing the levels to the Logger itself, you must make winston aware of them:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;winston.addColors(myCustomLevels.colors);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This enables loggers using the &lt;code&gt;colorize&lt;/code&gt; formatter to appropriately color and style the output of custom levels.&lt;/p&gt; 
&lt;p&gt;Additionally, you can also change background color and font style. For example,&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;baz: &#39;italic yellow&#39;,
foobar: &#39;bold red cyanBG&#39;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Possible options are below.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;Font styles: &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;dim&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt;, &lt;code&gt;inverse&lt;/code&gt;, &lt;code&gt;hidden&lt;/code&gt;, &lt;code&gt;strikethrough&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Font foreground colors: &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;gray&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Background colors: &lt;code&gt;blackBG&lt;/code&gt;, &lt;code&gt;redBG&lt;/code&gt;, &lt;code&gt;greenBG&lt;/code&gt;, &lt;code&gt;yellowBG&lt;/code&gt;, &lt;code&gt;blueBG&lt;/code&gt; &lt;code&gt;magentaBG&lt;/code&gt;, &lt;code&gt;cyanBG&lt;/code&gt;, &lt;code&gt;whiteBG&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Colorizing Standard logging levels&lt;/h3&gt; 
&lt;p&gt;To colorize the standard logging level add&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;winston.format.combine(
  winston.format.colorize(),
  winston.format.json()
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;where &lt;code&gt;winston.format.json()&lt;/code&gt; is whatever other formatter you want to use. The &lt;code&gt;colorize&lt;/code&gt; formatter must come before any formatters adding text you wish to color.&lt;/p&gt; 
&lt;h2&gt;Transports&lt;/h2&gt; 
&lt;p&gt;There are several &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/docs/transports.md#winston-core&quot;&gt;core transports&lt;/a&gt; included in &lt;code&gt;winston&lt;/code&gt;, which leverage the built-in networking and file I/O offered by Node.js core. In addition, there are &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/docs/transports.md#additional-transports&quot;&gt;additional transports&lt;/a&gt; written by members of the community.&lt;/p&gt; 
&lt;h2&gt;Multiple transports of the same type&lt;/h2&gt; 
&lt;p&gt;It is possible to use multiple transports of the same type e.g. &lt;code&gt;winston.transports.File&lt;/code&gt; when you construct the transport.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({
  transports: [
    new winston.transports.File({
      filename: &#39;combined.log&#39;,
      level: &#39;info&#39;
    }),
    new winston.transports.File({
      filename: &#39;errors.log&#39;,
      level: &#39;error&#39;
    })
  ]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you later want to remove one of these transports you can do so by using the transport itself. e.g.:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const combinedLogs = logger.transports.find(transport =&amp;gt; {
  return transport.filename === &#39;combined.log&#39;
});

logger.remove(combinedLogs);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Adding Custom Transports&lt;/h2&gt; 
&lt;p&gt;Adding a custom transport is easy. All you need to do is accept any options you need, implement a log() method, and consume it with &lt;code&gt;winston&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Transport = require(&#39;winston-transport&#39;);
const util = require(&#39;util&#39;);

//
// Inherit from `winston-transport` so you can take advantage
// of the base functionality and `.exceptions.handle()`.
//
module.exports = class YourCustomTransport extends Transport {
  constructor(opts) {
    super(opts);
    //
    // Consume any custom options here. e.g.:
    // - Connection information for databases
    // - Authentication information for APIs (e.g. loggly, papertrail, 
    //   logentries, etc.).
    //
  }

  log(info, callback) {
    setImmediate(() =&amp;gt; {
      this.emit(&#39;logged&#39;, info);
    });

    // Perform the writing to the remote service
    callback();
  }
};
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Common Transport options&lt;/h2&gt; 
&lt;p&gt;As every transport inherits from &lt;a href=&quot;https://github.com/winstonjs/winston-transport&quot;&gt;winston-transport&lt;/a&gt;, it&#39;s possible to set a custom format and a custom log level on each transport separately:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({
  transports: [
    new winston.transports.File({
      filename: &#39;error.log&#39;,
      level: &#39;error&#39;,
      format: winston.format.json()
    }),
    new transports.Http({
      level: &#39;warn&#39;,
      format: winston.format.json()
    }),
    new transports.Console({
      level: &#39;info&#39;,
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      )
    })
  ]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Exceptions&lt;/h2&gt; 
&lt;h3&gt;Handling Uncaught Exceptions with winston&lt;/h3&gt; 
&lt;p&gt;With &lt;code&gt;winston&lt;/code&gt;, it is possible to catch and log &lt;code&gt;uncaughtException&lt;/code&gt; events from your process. With your own logger instance you can enable this behavior when it&#39;s created or later on in your applications lifecycle:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { createLogger, transports } = require(&#39;winston&#39;);

// Enable exception handling when you create your logger.
const logger = createLogger({
  transports: [
    new transports.File({ filename: &#39;combined.log&#39; }) 
  ],
  exceptionHandlers: [
    new transports.File({ filename: &#39;exceptions.log&#39; })
  ]
});

// Or enable it later on by adding a transport or using `.exceptions.handle`
const logger = createLogger({
  transports: [
    new transports.File({ filename: &#39;combined.log&#39; }) 
  ]
});

// Call exceptions.handle with a transport to handle exceptions
logger.exceptions.handle(
  new transports.File({ filename: &#39;exceptions.log&#39; })
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to use this feature with the default logger, simply call &lt;code&gt;.exceptions.handle()&lt;/code&gt; with a transport instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//
// You can add a separate exception logger by passing it to `.exceptions.handle`
//
winston.exceptions.handle(
  new winston.transports.File({ filename: &#39;path/to/exceptions.log&#39; })
);

//
// Alternatively you can set `handleExceptions` to true when adding transports
// to winston.
//
winston.add(new winston.transports.File({
  filename: &#39;path/to/combined.log&#39;,
  handleExceptions: true
}));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;To Exit or Not to Exit&lt;/h3&gt; 
&lt;p&gt;By default, winston will exit after logging an uncaughtException. If this is not the behavior you want, set &lt;code&gt;exitOnError = false&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({ exitOnError: false });

//
// or, like this:
//
logger.exitOnError = false;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When working with custom logger instances, you can pass in separate transports to the &lt;code&gt;exceptionHandlers&lt;/code&gt; property or set &lt;code&gt;handleExceptions&lt;/code&gt; on any transport.&lt;/p&gt; 
&lt;h5&gt;Example 1&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({
  transports: [
    new winston.transports.File({ filename: &#39;path/to/combined.log&#39; })
  ],
  exceptionHandlers: [
    new winston.transports.File({ filename: &#39;path/to/exceptions.log&#39; })
  ]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Example 2&lt;/h5&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const logger = winston.createLogger({
  transports: [
    new winston.transports.Console({
      handleExceptions: true
    })
  ],
  exitOnError: false
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The &lt;code&gt;exitOnError&lt;/code&gt; option can also be a function to prevent exit on only certain types of errors:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function ignoreEpipe(err) {
  return err.code !== &#39;EPIPE&#39;;
}

const logger = winston.createLogger({ exitOnError: ignoreEpipe });

//
// or, like this:
//
logger.exitOnError = ignoreEpipe;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Rejections&lt;/h2&gt; 
&lt;h3&gt;Handling Uncaught Promise Rejections with winston&lt;/h3&gt; 
&lt;p&gt;With &lt;code&gt;winston&lt;/code&gt;, it is possible to catch and log &lt;code&gt;uncaughtRejection&lt;/code&gt; events from your process. With your own logger instance you can enable this behavior when it&#39;s created or later on in your applications lifecycle:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { createLogger, transports } = require(&#39;winston&#39;);

// Enable rejection handling when you create your logger.
const logger = createLogger({
  transports: [
    new transports.File({ filename: &#39;combined.log&#39; }) 
  ],
  rejectionHandlers: [
    new transports.File({ filename: &#39;rejections.log&#39; })
  ]
});

// Or enable it later on by adding a transport or using `.rejections.handle`
const logger = createLogger({
  transports: [
    new transports.File({ filename: &#39;combined.log&#39; }) 
  ]
});

// Call rejections.handle with a transport to handle rejections
logger.rejections.handle(
  new transports.File({ filename: &#39;rejections.log&#39; })
);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you want to use this feature with the default logger, simply call &lt;code&gt;.rejections.handle()&lt;/code&gt; with a transport instance.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//
// You can add a separate rejection logger by passing it to `.rejections.handle`
//
winston.rejections.handle(
  new winston.transports.File({ filename: &#39;path/to/rejections.log&#39; })
);

//
// Alternatively you can set `handleRejections` to true when adding transports
// to winston.
//
winston.add(new winston.transports.File({
  filename: &#39;path/to/combined.log&#39;,
  handleRejections: true
}));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Profiling&lt;/h2&gt; 
&lt;p&gt;In addition to logging messages and metadata, &lt;code&gt;winston&lt;/code&gt; also has a simple profiling mechanism implemented for any logger:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//
// Start profile of &#39;test&#39;
//
logger.profile(&#39;test&#39;);

setTimeout(function () {
  //
  // Stop profile of &#39;test&#39;. Logging will now take place:
  //   &#39;17 Jan 21:00:00 - info: test duration=1000ms&#39;
  //
  logger.profile(&#39;test&#39;);
}, 1000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Also you can start a timer and keep a reference that you can call `.done()`` on:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt; // Returns an object corresponding to a specific timing. When done
 // is called the timer will finish and log the duration. e.g.:
 //
 const profiler = logger.startTimer();
 setTimeout(function () {
   profiler.done({ message: &#39;Logging message&#39; });
 }, 1000);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All profile messages are set to &#39;info&#39; level by default, and both message and metadata are optional. For individual profile messages, you can override the default log level by supplying a metadata object with a &lt;code&gt;level&lt;/code&gt; property:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;logger.profile(&#39;test&#39;, { level: &#39;debug&#39; });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Querying Logs&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; supports querying of logs with Loggly-like options. &lt;a href=&quot;https://www.loggly.com/docs/api-retrieving-data/&quot;&gt;See Loggly Search API&lt;/a&gt;. Specifically: &lt;code&gt;File&lt;/code&gt;, &lt;code&gt;Couchdb&lt;/code&gt;, &lt;code&gt;Redis&lt;/code&gt;, &lt;code&gt;Loggly&lt;/code&gt;, &lt;code&gt;Nssocket&lt;/code&gt;, and &lt;code&gt;Http&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const options = {
  from: new Date() - (24 * 60 * 60 * 1000),
  until: new Date(),
  limit: 10,
  start: 0,
  order: &#39;desc&#39;,
  fields: [&#39;message&#39;]
};

//
// Find items logged between today and yesterday.
//
logger.query(options, function (err, results) {
  if (err) {
    /* TODO: handle me */
    throw err;
  }

  console.log(results);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Streaming Logs&lt;/h2&gt; 
&lt;p&gt;Streaming allows you to stream your logs back from your chosen transport.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//
// Start at the end.
//
winston.stream({ start: -1 }).on(&#39;log&#39;, function(log) {
  console.log(log);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Further Reading&lt;/h2&gt; 
&lt;h3&gt;Using the Default Logger&lt;/h3&gt; 
&lt;p&gt;The default logger is accessible through the &lt;code&gt;winston&lt;/code&gt; module directly. Any method that you could call on an instance of a logger is available on the default logger:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const winston = require(&#39;winston&#39;);

winston.log(&#39;info&#39;, &#39;Hello distributed log files!&#39;);
winston.info(&#39;Hello again distributed logs&#39;);

winston.level = &#39;debug&#39;;
winston.log(&#39;debug&#39;, &#39;Now my debug messages are written to console!&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;By default, no transports are set on the default logger. You must add or remove transports via the &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;remove()&lt;/code&gt; methods:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const files = new winston.transports.File({ filename: &#39;combined.log&#39; });
const console = new winston.transports.Console();

winston.add(console);
winston.add(files);
winston.remove(console);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or do it with one call to configure():&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;winston.configure({
  transports: [
    new winston.transports.File({ filename: &#39;somefile.log&#39; })
  ]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;For more documentation about working with each individual transport supported by &lt;code&gt;winston&lt;/code&gt; see the &lt;a href=&quot;https://raw.githubusercontent.com/winstonjs/winston/master/docs/transports.md&quot;&gt;&lt;code&gt;winston&lt;/code&gt; Transports&lt;/a&gt; document.&lt;/p&gt; 
&lt;h3&gt;Awaiting logs to be written in &lt;code&gt;winston&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Often it is useful to wait for your logs to be written before exiting the process. Each instance of &lt;code&gt;winston.Logger&lt;/code&gt; is also a [Node.js stream]. A &lt;code&gt;finish&lt;/code&gt; event will be raised when all logs have flushed to all transports after the stream has been ended.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const transport = new winston.transports.Console();
const logger = winston.createLogger({
  transports: [transport]
});

logger.on(&#39;finish&#39;, function (info) {
  // All `info` log messages has now been logged
});

logger.info(&#39;CHILL WINSTON!&#39;, { seriously: true });
logger.end();
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;It is also worth mentioning that the logger also emits an &#39;error&#39; event which you should handle or suppress if you don&#39;t want unhandled exceptions:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;//
// Handle errors
//
logger.on(&#39;error&#39;, function (err) { /* Do Something */ });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Working with multiple Loggers in winston&lt;/h3&gt; 
&lt;p&gt;Often in larger, more complex, applications it is necessary to have multiple logger instances with different settings. Each logger is responsible for a different feature area (or category). This is exposed in &lt;code&gt;winston&lt;/code&gt; in two ways: through &lt;code&gt;winston.loggers&lt;/code&gt; and instances of &lt;code&gt;winston.Container&lt;/code&gt;. In fact, &lt;code&gt;winston.loggers&lt;/code&gt; is just a predefined instance of &lt;code&gt;winston.Container&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const winston = require(&#39;winston&#39;);
const { format } = winston;
const { combine, label, json } = format;

//
// Configure the logger for `category1`
//
winston.loggers.add(&#39;category1&#39;, {
  format: combine(
    label({ label: &#39;category one&#39; }),
    json()
  ),
  transports: [
    new winston.transports.Console({ level: &#39;silly&#39; }),
    new winston.transports.File({ filename: &#39;somefile.log&#39; })
  ]
});

//
// Configure the logger for `category2`
//
winston.loggers.add(&#39;category2&#39;, {
  format: combine(
    label({ label: &#39;category two&#39; }),
    json()
  ),
  transports: [
    new winston.transports.Http({ host: &#39;localhost&#39;, port:8080 })
  ]
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Now that your loggers are setup, you can require winston &lt;em&gt;in any file in your application&lt;/em&gt; and access these pre-configured loggers:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const winston = require(&#39;winston&#39;);

//
// Grab your preconfigured loggers
//
const category1 = winston.loggers.get(&#39;category1&#39;);
const category2 = winston.loggers.get(&#39;category2&#39;);

category1.info(&#39;logging to file and console transports&#39;);
category2.info(&#39;logging to http transport&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you prefer to manage the &lt;code&gt;Container&lt;/code&gt; yourself, you can simply instantiate one:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const winston = require(&#39;winston&#39;);
const { format } = winston;
const { combine, label, json } = format;

const container = new winston.Container();

container.add(&#39;category1&#39;, {
  format: combine(
    label({ label: &#39;category one&#39; }),
    json()
  ),
  transports: [
    new winston.transports.Console({ level: &#39;silly&#39; }),
    new winston.transports.File({ filename: &#39;somefile.log&#39; })
  ]
});

const category1 = container.get(&#39;category1&#39;);
category1.info(&#39;logging to file and console transports&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install winston
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yarn add winston
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Run Tests&lt;/h2&gt; 
&lt;p&gt;All of the winston tests are written with &lt;a href=&quot;https://mochajs.org&quot;&gt;&lt;code&gt;mocha&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/istanbuljs/nyc&quot;&gt;&lt;code&gt;nyc&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/bigpipe/assume&quot;&gt;&lt;code&gt;assume&lt;/code&gt;&lt;/a&gt;. They can be run with &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm test
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Author: &lt;a href=&quot;http://github.com/indexzero&quot;&gt;Charlie Robbins&lt;/a&gt;&lt;/h4&gt; 
&lt;h4&gt;Contributors: &lt;a href=&quot;https://github.com/jcrugzz&quot;&gt;Jarrett Cruger&lt;/a&gt;, &lt;a href=&quot;https://github.com/dabh&quot;&gt;David Hyde&lt;/a&gt;, &lt;a href=&quot;https://github.com/chrisalderson&quot;&gt;Chris Alderson&lt;/a&gt;&lt;/h4&gt;</description>
    </item>
    
    <item>
      <title>knockout/knockout</title>
      <link>https://github.com/knockout/knockout</link>
      <description>&lt;p&gt;Knockout makes it easier to create rich, responsive UIs with JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Knockout&lt;/h1&gt; 
&lt;p&gt;&lt;strong&gt;Knockout&lt;/strong&gt; is a JavaScript &lt;a href=&quot;http://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;MVVM&lt;/a&gt; (a modern variant of MVC) library that makes it easier to create rich, desktop-like user interfaces with JavaScript and HTML. It uses &lt;em&gt;observers&lt;/em&gt; to make your UI automatically stay in sync with an underlying data model, along with a powerful and extensible set of &lt;em&gt;declarative bindings&lt;/em&gt; to enable productive development.&lt;/p&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;https://gitter.im/knockout/knockout?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg&quot; alt=&quot;Join the chat at https://gitter.im/knockout/knockout&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Totally new to Knockout?&lt;/strong&gt; The most fun place to start is the &lt;a href=&quot;http://learn.knockoutjs.com/&quot;&gt;online interactive tutorials&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For more details, see&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Documentation on &lt;a href=&quot;http://knockoutjs.com/documentation/introduction.html&quot;&gt;the project&#39;s website&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Online examples at &lt;a href=&quot;http://knockoutjs.com/examples/&quot;&gt;http://knockoutjs.com/examples/&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Downloading Knockout&lt;/h2&gt; 
&lt;p&gt;You can &lt;a href=&quot;http://knockoutjs.com/downloads/&quot;&gt;download released versions of Knockout&lt;/a&gt; from the project&#39;s website.&lt;/p&gt; 
&lt;p&gt;For Node.js developers, Knockout is also available from &lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt; - just run &lt;code&gt;npm install knockout&lt;/code&gt;.&lt;/p&gt; 
&lt;h2&gt;Building Knockout from sources&lt;/h2&gt; 
&lt;p&gt;If you prefer to build the library yourself:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repo from GitHub&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/knockout/knockout.git
cd knockout
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Acquire build dependencies.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Make sure you have &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; and &lt;a href=&quot;https://www.java.com/en/&quot;&gt;Java&lt;/a&gt; installed on your workstation. These are only needed to &lt;em&gt;build&lt;/em&gt; Knockout from sources. Knockout itself has no dependency on Node.js or Java once it is built (it works with any server technology or none). Now run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run the build tool&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm run grunt
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you&#39;ll find the built files in &lt;code&gt;build/output/&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To run a single task, use &lt;code&gt;--&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;npm run grunt -- build:debug
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;Running the tests&lt;/h2&gt; 
&lt;p&gt;If you have &lt;a href=&quot;http://phantomjs.org/download.html&quot;&gt;phantomjs&lt;/a&gt; installed, then the &lt;code&gt;grunt&lt;/code&gt; script will automatically run the specification suite and report its results.&lt;/p&gt; 
&lt;p&gt;Or, if you want to run the specs in a browser (e.g., for debugging), simply open &lt;code&gt;spec/runner.html&lt;/code&gt; in your browser.&lt;/p&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;MIT license - &lt;a href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt;http://www.opensource.org/licenses/mit-license.php&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hjnilsson/country-flags</title>
      <link>https://github.com/hjnilsson/country-flags</link>
      <description>&lt;p&gt;SVG and PNG renders of all countries&#39; flags.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;country-flags&lt;/h1&gt; 
&lt;p&gt;You can view all the flags here: http://hjnilsson.github.io/country-flags/&lt;/p&gt; 
&lt;p&gt;This repository contains renders of all the worlds flags in SVG and PNG format.&lt;/p&gt; 
&lt;p&gt;The source files were taken from Wikipedia and are not under copyright protection since flags are effectively in public domain (there may be other restrictions on how the flag can be used though).&lt;/p&gt; 
&lt;p&gt;The flags are named by their 2-letter ISO-3166 country code, except for the constituent countries of Great Britain which have 6-letter codes &quot;GB-ENG&quot; etc).&lt;/p&gt; 
&lt;p&gt;Kosovo uses the user-assigned country code &lt;code&gt;XK&lt;/code&gt;, which is not part of the ISO standard, but in use by several multinational organizations.&lt;/p&gt; 
&lt;p&gt;Also included is a JSON file that maps the ISO country code to the name of the country.&lt;/p&gt; 
&lt;p&gt;You can also install this as a NPM module:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install --save svg-country-flags
&lt;/code&gt;&lt;/pre&gt; 
&lt;h1&gt;Arbitrary Width&lt;/h1&gt; 
&lt;p&gt;If you would like the flags in a different width than 100px, 250px or 1000px, you can run the node script &#39;build-pngs&#39;, you must first install the modules &lt;code&gt;svgexport&lt;/code&gt; and &lt;code&gt;imagemin-cli&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;npm install -g svgexport imagemin-cli
npm run build-pngs -- 1000:
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Replace &lt;code&gt;1000:&lt;/code&gt; with whatever width you want (note the &lt;code&gt;:&lt;/code&gt;), or type &lt;code&gt;:200&lt;/code&gt; to get PNGs with a height of 200px.&lt;/p&gt; 
&lt;h1&gt;Arbitrary Width Manually&lt;/h1&gt; 
&lt;p&gt;If you cannot run the node script above, you can do the same steps manually.&lt;/p&gt; 
&lt;p&gt;Use a combination of &lt;code&gt;svgexport&lt;/code&gt; and &lt;code&gt;imagemin-cli&lt;/code&gt; from NPM to get that. &lt;code&gt;imagemin&lt;/code&gt; is very important because &lt;code&gt;svgexport&lt;/code&gt; produces uncompressed PNGs which are several MB each.&lt;/p&gt; 
&lt;p&gt;Run the following commands in the &lt;code&gt;svg/&lt;/code&gt; directory to get PNGs of a desired width:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;for file in *.svg; do svgexport $file &quot;`basename $file svg`png&quot; pad 1000: ; done
imagemin *.png --out-dir=../compressed-pngs/
rm *.png
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The resultant files will be in the &lt;code&gt;compressed-pngs&lt;/code&gt; folder. As before, &lt;code&gt;1000:&lt;/code&gt; is the dimensions to export.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fabricjs/fabric.js</title>
      <link>https://github.com/fabricjs/fabric.js</link>
      <description>&lt;p&gt;Javascript Canvas Library, SVG-to-Canvas (&amp; canvas-to-SVG) Parser&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Fabric.js&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;http://travis-ci.org/#!/kangax/fabric.js&quot;&gt;&lt;img src=&quot;https://secure.travis-ci.org/fabricjs/fabric.js.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://codeclimate.com/github/kangax/fabric.js&quot;&gt;&lt;img src=&quot;https://d3s6mut3hikguw.cloudfront.net/github/kangax/fabric.js/badges/gpa.svg&quot; alt=&quot;Code Climate&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/r/kangax/fabric.js?branch=master&quot;&gt;&lt;img src=&quot;https://coveralls.io/repos/fabricjs/fabric.js/badge.png?branch=master&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://gitpod.io/#https://github.com/fabricjs/fabric.js&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&quot; alt=&quot;Gitpod Ready-to-Code&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;http://badge.fury.io/bo/fabric&quot;&gt;&lt;img src=&quot;https://badge.fury.io/bo/fabric.svg&quot; alt=&quot;Bower version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://badge.fury.io/js/fabric&quot;&gt;&lt;img src=&quot;https://badge.fury.io/js/fabric.svg&quot; alt=&quot;NPM version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.org/package/fabric&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/dm/fabric.svg&quot; alt=&quot;Downloads per month&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cdnjs.com/libraries/fabric.js&quot;&gt;&lt;img src=&quot;https://img.shields.io/cdnjs/v/fabric.js.svg&quot; alt=&quot;CDNJS version&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://david-dm.org/kangax/fabric.js&quot;&gt;&lt;img src=&quot;https://david-dm.org/kangax/fabric.js.svg?theme=shields.io&quot; alt=&quot;Dependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/kangax/fabric.js#info=devDependencies&quot;&gt;&lt;img src=&quot;https://david-dm.org/kangax/fabric.js/dev-status.svg?theme=shields.io&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.bountysource.com/trackers/23217-fabric-js?utm_source=23217&amp;amp;utm_medium=shield&amp;amp;utm_campaign=TRACKER_BADGE&quot;&gt;&lt;img src=&quot;https://api.bountysource.com/badge/tracker?tracker_id=23217&quot; alt=&quot;Bountysource&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://flattr.com/submit/auto?user_id=kangax&amp;amp;url=http://github.com/kangax/fabric.js&amp;amp;title=Fabric.js&amp;amp;language=&amp;amp;tags=github&amp;amp;category=software&quot;&gt;&lt;img src=&quot;http://api.flattr.com/button/flattr-badge-large.png&quot; alt=&quot;Flattr this git repo&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Fabric.js&lt;/strong&gt; is a framework that makes it easy to work with HTML5 canvas element. It is an &lt;strong&gt;interactive object model&lt;/strong&gt; on top of canvas element. It is also an &lt;strong&gt;SVG-to-canvas parser&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Using Fabric.js, you can create and populate objects on canvas; objects like simple geometrical shapes — rectangles, circles, ellipses, polygons, or more complex shapes consisting of hundreds or thousands of simple paths. You can then scale, move, and rotate these objects with the mouse; modify their properties — color, transparency, z-index, etc. You can also manipulate these objects altogether — grouping them with a simple mouse selection.&lt;/p&gt; 
&lt;h3&gt;Non-Technical Introduction to Fabric&lt;/h3&gt; 
&lt;p&gt;Fabric.js allows you to easily create simple shapes like rectangles, circles, triangles and other polygons or more complex shapes made up of many paths, onto the HTML &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element on a webpage using JavaScript. Fabric.js will then allow you to manipulate the size, position and rotation of these objects with a mouse. It’s also possible to change some of the attributes of these objects such as their color, transparency, depth position on the webpage or selecting groups of these objects using the Fabric.js library. Fabric.js will also allow you to convert an SVG image into JavaScript data that can be used for putting it onto the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element.&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/kangax/fabric.js/wiki/Love-Fabric%3F-Help-us-by...&quot;&gt;Contributions&lt;/a&gt; are very much welcome!&lt;/p&gt; 
&lt;h3&gt;Goals&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Unit tested (1150+ tests at the moment, 79%+ coverage)&lt;/li&gt; 
 &lt;li&gt;Modular (~60 small &lt;a href=&quot;http://fabricjs.com/docs/&quot;&gt;&quot;classes&quot;, modules, mixins&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Cross-browser&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kangax/fabric.js/wiki/Focus-on-speed&quot;&gt;Fast&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Encapsulated in one object&lt;/li&gt; 
 &lt;li&gt;No browser sniffing for critical functionality&lt;/li&gt; 
 &lt;li&gt;Runs under ES5 strict mode&lt;/li&gt; 
 &lt;li&gt;Runs on a server under &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; (active stable releases and latest of current) (see &lt;a href=&quot;https://github.com/kangax/fabric.js/wiki/Fabric-limitations-in-node.js&quot;&gt;Node.js limitations&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;Follows &lt;a href=&quot;http://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Supported browsers&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;Firefox 2+&lt;/li&gt; 
 &lt;li&gt;Safari 3+&lt;/li&gt; 
 &lt;li&gt;Opera 9.64+&lt;/li&gt; 
 &lt;li&gt;Chrome (all versions)&lt;/li&gt; 
 &lt;li&gt;IE10, IE11, Edge&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;You can &lt;a href=&quot;http://fabricjs.com/test/unit/&quot;&gt;run automated unit tests&lt;/a&gt; right in the browser.&lt;/p&gt; 
&lt;h3&gt;History&lt;/h3&gt; 
&lt;p&gt;Fabric.js started as a foundation for design editor on &lt;a href=&quot;http://printio.ru&quot;&gt;printio.ru&lt;/a&gt; — interactive online store with ability to create your own designs. The idea was to create &lt;a href=&quot;http://printio.ru/ringer_man_tees/new&quot;&gt;Javascript-based editor&lt;/a&gt;, which would make it easy to manipulate vector shapes and images on T-Shirts. Since performance was one of the most critical requirements, we chose canvas over SVG. While SVG is excellent with static shapes, it&#39;s not as performant as canvas when it comes to dynamic manipulation of objects (movement, scaling, rotation, etc.). Fabric.js was heavily inspired by &lt;a href=&quot;http://www.ernestdelgado.com/public-tests/canvasphoto/demo/canvas.html&quot;&gt;Ernest Delgado&#39;s canvas experiment&lt;/a&gt;. In fact, code from Ernest&#39;s experiment was the foundation of an entire framework. Later, Fabric.js grew into a collection of distinct object types and got an SVG-to-canvas parser.&lt;/p&gt; 
&lt;h3&gt;Installation Instructions&lt;/h3&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;pre&gt;&lt;code&gt;$ bower install fabric
&lt;/code&gt;&lt;/pre&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;Note: If you are using Fabric.js in a Node.js script, you will depend from &lt;a href=&quot;https://github.com/Automattic/node-canvas&quot;&gt;node-canvas&lt;/a&gt;.&lt;code&gt;node-canvas&lt;/code&gt; is an html canvas replacement that works on top of native libraries. Please follow the instructions located &lt;a href=&quot;https://github.com/Automattic/node-canvas#compiling&quot;&gt;here&lt;/a&gt; in order to get it up and running.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$ npm install fabric --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;After this, you can import fabric like so:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;const fabric = require(&quot;fabric&quot;).fabric;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Or you can use this instead if your environment supports ES6 imports:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;import { fabric } from &quot;fabric&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/fabricjs/fabric.js/master/#examples-of-use&quot;&gt;the example section&lt;/a&gt; for usage examples.&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/joyent/node/wiki/Installation&quot;&gt;Install Node.js&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Build distribution file &lt;strong&gt;[~77K minified, ~20K gzipped]&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ node build.js
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2.1 Or build a custom distribution file, by passing (comma separated) module names to be included.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   $ node build.js modules=text,serialization,parser
   // or
   $ node build.js modules=text
   // or
   $ node build.js modules=parser,text
   // etc.
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default (when none of the modules are specified) only basic functionality is included. See the list of modules below for more information on each one of them. Note that default distribution has support for &lt;strong&gt;static canvases&lt;/strong&gt; only.&lt;/p&gt; &lt;p&gt;To get minimal distribution with interactivity, make sure to include corresponding module:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   $ node build.js modules=interaction
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2.2 You can also include all modules like so:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   $ node build.js modules=ALL
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2.3 You can exclude a few modules like so:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   $ node build.js modules=ALL exclude=gestures,image_filters
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create a minified distribution file&lt;/p&gt; &lt;pre&gt;&lt;code&gt; # Using YUICompressor (default option)
 $ node build.js modules=... minifier=yui

 # or Google Closure Compiler
 $ node build.js modules=... minifier=closure
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Enable AMD support via require.js (requires uglify)&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ node build.js requirejs modules=...
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Create source map file for better productive debugging (requires uglify or google closure compiler).
   &lt;!-- raw HTML omitted --&gt;More information about &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;source maps&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ node build.js sourcemap modules=...
&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use google closure compiler you have to add &lt;code&gt;sourceMappingURL&lt;/code&gt; manually at the end of the minified file all.min.js (see issue https://code.google.com/p/closure-compiler/issues/detail?id=941).&lt;/p&gt; &lt;pre&gt;&lt;code&gt; //# sourceMappingURL=fabric.min.js.map
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Ensure code guidelines are met (prerequisite: &lt;code&gt;npm -g install eslint&lt;/code&gt;)&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ npm run lint &amp;amp;&amp;amp; npm run lint_tests
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/joyent/node/wiki/Installation&quot;&gt;Install Node.js&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/npm/npm#super-easy-install&quot;&gt;Install NPM, if necessary&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Install NPM packages&lt;/p&gt; &lt;pre&gt;&lt;code&gt; $ npm install
&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;Run test suite&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;Make sure testem is installed&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    $ npm install -g testem
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Run tests Chrome and Node (by default):&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;    $ testem
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See testem docs for more info: https://github.com/testem/testem&lt;/p&gt; 
&lt;h3&gt;Demos&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;http://fabricjs.com/demos/&quot;&gt;Demos&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://fabricjs.com/kitchensink&quot;&gt;Kitchensink demo&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://fabricjs.com/benchmarks/&quot;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;http://trends.builtwith.com/javascript/FabricJS&quot;&gt;Who&#39;s using Fabric?&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;Documentation&lt;/h3&gt; 
&lt;p&gt;Documentation is always available at &lt;a href=&quot;http://fabricjs.com/docs/&quot;&gt;http://fabricjs.com/docs/&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Also see &lt;a href=&quot;http://fabricjs.com/articles&quot;&gt;official 4-part intro series&lt;/a&gt;, &lt;a href=&quot;http://www.slideshare.net/kangax/fabricjs-building-acanvaslibrarybk&quot;&gt;presentation from BK.js&lt;/a&gt; and &lt;a href=&quot;http://www.slideshare.net/kangax/fabric-falsy-values-8067834&quot;&gt;presentation from Falsy Values&lt;/a&gt; for an overview of fabric.js, how it works, and its features.&lt;/p&gt; 
&lt;h3&gt;Optional modules&lt;/h3&gt; 
&lt;p&gt;These are the optional modules that could be specified for inclusion, when building custom version of fabric:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;text&lt;/strong&gt; — Adds support for static text (&lt;code&gt;fabric.Text&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;itext&lt;/strong&gt; — Adds support for interactive text (&lt;code&gt;fabric.IText&lt;/code&gt;, &lt;code&gt;fabric.Textbox&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;serialization&lt;/strong&gt; — Adds support for &lt;code&gt;loadFromJSON&lt;/code&gt;, &lt;code&gt;loadFromDatalessJSON&lt;/code&gt;, and &lt;code&gt;clone&lt;/code&gt; methods on &lt;code&gt;fabric.Canvas&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;interaction&lt;/strong&gt; — Adds support for interactive features of fabric — selecting/transforming objects/groups via mouse/touch devices.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;parser&lt;/strong&gt; — Adds support for &lt;code&gt;fabric.parseSVGDocument&lt;/code&gt;, &lt;code&gt;fabric.loadSVGFromURL&lt;/code&gt;, and &lt;code&gt;fabric.loadSVGFromString&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;image_filters&lt;/strong&gt; — Adds support for image filters, such as grayscale of white removal.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;easing&lt;/strong&gt; — Adds support for animation easing functions&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;node&lt;/strong&gt; — Adds support for running fabric under node.js, with help of &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt; and &lt;a href=&quot;https://github.com/learnboost/node-canvas&quot;&gt;node-canvas&lt;/a&gt; libraries.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;freedrawing&lt;/strong&gt; — Adds support for free drawing&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;gestures&lt;/strong&gt; — Adds support for multitouch gestures with help of &lt;a href=&quot;https://github.com/mudcube/Event.js&quot;&gt;Event.js&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;object_straightening&lt;/strong&gt; — Adds support for rotating an object to one of 0, 90, 180, 270, etc. depending on which is angle is closer.&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;animation&lt;/strong&gt; — Adds support for animation (&lt;code&gt;fabric.util.animate&lt;/code&gt;, &lt;code&gt;fabric.util.requestAnimFrame&lt;/code&gt;, &lt;code&gt;fabric.Object#animate&lt;/code&gt;, &lt;code&gt;fabric.Canvas#fxCenterObjectH/#fxCenterObjectV/#fxRemove&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Additional flags for build script are:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;requirejs&lt;/strong&gt; — Makes fabric requirejs AMD-compatible in &lt;code&gt;dist/fabric.js&lt;/code&gt;. &lt;em&gt;Note:&lt;/em&gt; an unminified, requirejs-compatible version is always created in &lt;code&gt;dist/fabric.require.js&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;no-strict&lt;/strong&gt; — Strips &quot;use strict&quot; directives from source&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;no-svg-export&lt;/strong&gt; — Removes svg exporting functionality&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;sourcemap&lt;/strong&gt; - Generates a sourceMap file and adds the &lt;code&gt;sourceMappingURL&lt;/code&gt; (only if uglifyjs is used) to &lt;code&gt;dist/fabric.min.js&lt;/code&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;For example:&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;node build.js modules=ALL exclude=json no-strict no-svg-export
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Examples of use&lt;/h3&gt; 
&lt;h4&gt;Adding red rectangle to canvas&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&amp;gt;&amp;lt;/canvas&amp;gt;

    &amp;lt;script src=&quot;lib/fabric.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        var canvas = new fabric.Canvas(&#39;canvas&#39;);

        var rect = new fabric.Rect({
            top : 100,
            left : 100,
            width : 60,
            height : 70,
            fill : &#39;red&#39;
        });

        canvas.add(rect);
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Helping Fabric&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.bountysource.com/trackers/23217-fabric-js&quot;&gt;Fabric on Bountysource&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.codetriage.com/kangax/fabric.js&quot;&gt;Fabric on CodeTriage&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Staying in touch&lt;/h3&gt; 
&lt;p&gt;Follow &lt;a href=&quot;http://twitter.com/fabricjs&quot;&gt;@fabric.js&lt;/a&gt;, &lt;a href=&quot;http://twitter.com/kangax&quot;&gt;@kangax&lt;/a&gt; or &lt;a href=&quot;http://twitter.com/AndreaBogazzi&quot;&gt;@AndreaBogazzi&lt;/a&gt; on twitter.&lt;/p&gt; 
&lt;p&gt;Questions, suggestions — &lt;a href=&quot;http://groups.google.com/group/fabricjs&quot;&gt;fabric.js on Google Groups&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;See &lt;a href=&quot;http://stackoverflow.com/questions/tagged/fabricjs&quot;&gt;Fabric questions on Stackoverflow&lt;/a&gt;, Fabric snippets on &lt;a href=&quot;http://jsfiddle.net/user/fabricjs/fiddles/&quot;&gt;jsfiddle&lt;/a&gt; or &lt;a href=&quot;http://codepen.io/tag/fabricjs&quot;&gt;codepen.io&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Fabric on &lt;a href=&quot;http://libknot.ohmztech.com/&quot;&gt;LibKnot&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Get help in Fabric&#39;s IRC channel — irc://irc.freenode.net/#fabric.js&lt;/p&gt; 
&lt;h3&gt;Credits&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/AndreaBogazzi&quot;&gt;Andrea Bogazzi&lt;/a&gt; for help with bugs, new features, documentation, GitHub issues&lt;/li&gt; 
 &lt;li&gt;Ernest Delgado for the original idea of &lt;a href=&quot;http://www.ernestdelgado.com/archive/canvas/&quot;&gt;manipulating images on canvas&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://twitter.com/hakunin&quot;&gt;Maxim &quot;hakunin&quot; Chernyak&lt;/a&gt; for ideas, and help with various parts of the library throughout its life&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://nisnya.com&quot;&gt;Sergey Nisnevich&lt;/a&gt; for help with geometry logic&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://twitter.com/kienzle_s&quot;&gt;Stefan Kienzle&lt;/a&gt; for help with bugs, features, documentation, GitHub issues&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;http://www.shutterstock.com/jobs&quot;&gt;Shutterstock&lt;/a&gt; for the time and resources invested in using and improving fabric.js&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/kangax/fabric.js/graphs/contributors&quot;&gt;And all the other GitHub contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;MIT License&lt;/h3&gt; 
&lt;p&gt;Copyright (c) 2008-2015 Printio (Juriy Zaytsev, Maxim Chernyak)&lt;/p&gt; 
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; 
&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>carbon-design-system/carbon</title>
      <link>https://github.com/carbon-design-system/carbon</link>
      <description>&lt;p&gt;A design system built by IBM&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; 
 &lt;p&gt;Carbon is an open-source design system built by IBM. With the IBM Design Language as its foundation, the system consists of working code, design tools and resources, human interface guidelines, and a vibrant community of contributors.&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Getting started&lt;/h2&gt; 
&lt;p&gt;If you&#39;re just getting started, check out &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/components&quot;&gt;&lt;code&gt;carbon-components&lt;/code&gt;&lt;/a&gt;. If you&#39;re looking for React components, take a look at &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/react&quot;&gt;&lt;code&gt;carbon-components-react&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;We also have community-contributed components for the following technologies:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IBM/carbon-components-angular&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/carbon-design-system/carbon-components-vue&quot;&gt;Vue&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/IBM/carbon-components-svelte&quot;&gt;Svelte&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;If you&#39;re trying to find something specific, here&#39;s a full list of packages that we support!&lt;/p&gt; 
&lt;p&gt;| Package name | Description | | --------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/components&quot;&gt;&lt;code&gt;carbon-components&lt;/code&gt;&lt;/a&gt; | Component styles and Vanilla JavaScript | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/react&quot;&gt;&lt;code&gt;carbon-components-react&lt;/code&gt;&lt;/a&gt; | React components | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/elements&quot;&gt;&lt;code&gt;@carbon/elements&lt;/code&gt;&lt;/a&gt; | IBM Design Language elements like colors, type, iconography, and more | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/colors&quot;&gt;&lt;code&gt;@carbon/colors&lt;/code&gt;&lt;/a&gt; | Work with IBM Design Language colors | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/grid&quot;&gt;&lt;code&gt;@carbon/grid&lt;/code&gt;&lt;/a&gt; | Build layouts using the new 16 column grid system | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/icons&quot;&gt;&lt;code&gt;@carbon/icons&lt;/code&gt;&lt;/a&gt; | Iconography assets. We also offer support in: &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/icons-react&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://github.com/carbon-design-system/carbon-icons-angular&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/icons-vue&quot;&gt;Vue&lt;/a&gt;, and &lt;a href=&quot;https://github.com/IBM/carbon-icons-svelte&quot;&gt;Svelte&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/pictograms&quot;&gt;&lt;code&gt;@carbon/pictograms&lt;/code&gt;&lt;/a&gt; | Pictogram assets. We also offer support in: &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/pictograms-react&quot;&gt;React&lt;/a&gt; and &lt;a href=&quot;https://github.com/IBM/carbon-pictograms-svelte&quot;&gt;Svelte&lt;/a&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/layout&quot;&gt;&lt;code&gt;@carbon/layout&lt;/code&gt;&lt;/a&gt; | Layout-based units and spacing scale | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/motion&quot;&gt;&lt;code&gt;@carbon/motion&lt;/code&gt;&lt;/a&gt; | Productive and expressive motion curves | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/themes&quot;&gt;&lt;code&gt;@carbon/themes&lt;/code&gt;&lt;/a&gt; | Color tokens available in the Carbon Design System, like &lt;code&gt;$interactive-01&lt;/code&gt; | | &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/type&quot;&gt;&lt;code&gt;@carbon/type&lt;/code&gt;&lt;/a&gt; | New type tokens used alongside IBM Plex |&lt;/p&gt; 
&lt;h2&gt;:books: Documentation&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;See our documentation site &lt;a href=&quot;https://www.carbondesignsystem.com/get-started/develop/react&quot;&gt;here&lt;/a&gt; for full how-to docs and guidelines&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/.github/CONTRIBUTING.md&quot;&gt;Contributing&lt;/a&gt;: Guidelines for making contributions to this repo.&lt;/li&gt; 
 &lt;li&gt;🏃‍♀️ Migration Guides 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/components/docs/migration/migrate-to-10.x.md&quot;&gt;v9 to v10 (vanilla)&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/packages/react/docs/migration/migrate-to-7.x.md&quot;&gt;v9 to v10 (v6 to v7 React)&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;🙌 Contributing&lt;/h2&gt; 
&lt;p&gt;We&#39;re always looking for contributors to help us fix bugs, build new features, or help us improve the project documentation. If you&#39;re interested, definitely check out our &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/.github/CONTRIBUTING.md&quot;&gt;Contributing Guide&lt;/a&gt; and our &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/docs/developer-handbook.md&quot;&gt;Developer Guide&lt;/a&gt;! 👀&lt;/p&gt; 
&lt;h2&gt;Contributors&lt;/h2&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;p&gt;This project follows the &lt;a href=&quot;https://github.com/kentcdodds/all-contributors&quot;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt; 
&lt;h2&gt;📝 License&lt;/h2&gt; 
&lt;p&gt;Licensed under the &lt;a href=&quot;https://raw.githubusercontent.com/carbon-design-system/carbon/master/LICENSE&quot;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RobinHerbots/Inputmask</title>
      <link>https://github.com/RobinHerbots/Inputmask</link>
      <description>&lt;p&gt;Input Mask plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Inputmask&lt;/h1&gt; 
&lt;p&gt;Copyright (c) 2010 - 2020 Robin Herbots Licensed under the MIT license (&lt;a href=&quot;http://opensource.org/licenses/mit-license.php&quot;&gt;http://opensource.org/licenses/mit-license.php&lt;/a&gt;)&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ZNR3EB6JTMMSS&quot;&gt;&lt;img src=&quot;https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif&quot; alt=&quot;donate&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/inputmask&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/inputmask.svg&quot; alt=&quot;NPM Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/RobinHerbots/inputmask#info=dependencies&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/RobinHerbots/inputmask.svg&quot; alt=&quot;Dependency Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://david-dm.org/RobinHerbots/inputmask#info=devDependencies&quot;&gt;&lt;img src=&quot;https://img.shields.io/david/dev/RobinHerbots/inputmask.svg&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Inputmask is a javascript library that creates an input mask. Inputmask can run against vanilla javascript, jQuery, and jqlite.&lt;/p&gt; 
&lt;p&gt;An inputmask helps the user with the input by ensuring a predefined format. This can be useful for dates, numerics, phone numbers, ...&lt;/p&gt; 
&lt;p&gt;Highlights:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;easy to use&lt;/li&gt; 
 &lt;li&gt;optional parts anywhere in the mask&lt;/li&gt; 
 &lt;li&gt;possibility to define aliases which hide the complexity&lt;/li&gt; 
 &lt;li&gt;date / DateTime masks&lt;/li&gt; 
 &lt;li&gt;numeric masks&lt;/li&gt; 
 &lt;li&gt;lots of callbacks&lt;/li&gt; 
 &lt;li&gt;non-greedy masks&lt;/li&gt; 
 &lt;li&gt;many features can be enabled/disabled/configured by options&lt;/li&gt; 
 &lt;li&gt;supports read-only/disabled/dir=&quot;rtl&quot; attributes&lt;/li&gt; 
 &lt;li&gt;support data-inputmask attribute(s)&lt;/li&gt; 
 &lt;li&gt;alternator-mask&lt;/li&gt; 
 &lt;li&gt;regex-mask&lt;/li&gt; 
 &lt;li&gt;dynamic-mask&lt;/li&gt; 
 &lt;li&gt;preprocessing-mask&lt;/li&gt; 
 &lt;li&gt;JIT-masking&lt;/li&gt; 
 &lt;li&gt;value formatting / validating without input element&lt;/li&gt; 
 &lt;li&gt;AMD/CommonJS support&lt;/li&gt; 
 &lt;li&gt;dependencyLibs: vanilla javascript, jQuery, jqlite&lt;/li&gt; 
 &lt;li&gt;&amp;lt;input-mask&amp;gt; htmlelenent&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Demo page see &lt;a href=&quot;http://robinherbots.github.io/Inputmask&quot;&gt;http://robinherbots.github.io/Inputmask&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://www.jetbrains.com/?from=inputmask&quot;&gt;Jetbrains&lt;/a&gt; for providing a free license for their excellent Webstorm IDE.&lt;br&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;p&gt;Thanks to &lt;a href=&quot;https://www.browserstack.com&quot;&gt;Browserstack&lt;/a&gt; for providing a free license, so we can start automating test in different browsers and devices.&lt;br&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt; 
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Setup&lt;/h2&gt; 
&lt;h3&gt;dependencyLibs&lt;/h3&gt; 
&lt;p&gt;Inputmask can run against different javascript libraries. You can choose between:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;inputmask.dependencyLib (vanilla)&lt;/li&gt; 
 &lt;li&gt;inputmask.dependencyLib.jquery&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Classic web with &amp;lt;script&amp;gt; tag&lt;/h3&gt; 
&lt;p&gt;Include the js-files which you can find in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt; 
&lt;p&gt;Inputmask with jQuery as dependencylib.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;dist/jquery.inputmask.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Inputmask with vanilla dependencylib.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;dist/inputmask.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;If you like to automatically bind the inputmask to the inputs marked with the data-inputmask- ... attributes you may also want to include the inputmask.binding.js&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;dist/bindings/inputmask.binding.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;webpack&lt;/h3&gt; 
&lt;h4&gt;Install the package&lt;/h4&gt; 
&lt;pre&gt;&lt;code&gt;npm install inputmask --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;h5&gt;Install the latest beta version&lt;/h5&gt; 
&lt;pre&gt;&lt;code&gt;npm install inputmask@next --save
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;In your modules&lt;/h4&gt; 
&lt;p&gt;If you want to include the Inputmask and all extensions.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;var Inputmask = require(&#39;inputmask&#39;);

//es6
import Inputmask from &quot;inputmask&quot;;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Usage&lt;/h2&gt; 
&lt;h3&gt;via Inputmask class&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var selector = document.getElementById(&quot;selector&quot;);

var im = new Inputmask(&quot;99-9999999&quot;);
im.mask(selector);

//or

Inputmask({&quot;mask&quot;: &quot;(999) 999-9999&quot;, ... other_options, ...}).mask(selector);
Inputmask(&quot;9-a{1,3}9{1,3}&quot;).mask(selector);
Inputmask(&quot;9&quot;, { repeat: 10 }).mask(selector);

Inputmask({ regex: &quot;\\d*&quot; }).mask(selector);
Inputmask({ regex: String.raw`\d*` }).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;via jquery plugin&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(selector).inputmask(&quot;99-9999999&quot;);  //static mask
  $(selector).inputmask({&quot;mask&quot;: &quot;(999) 999-9999&quot;}); //specifying options
  $(selector).inputmask(&quot;9-a{1,3}9{1,3}&quot;); //mask with dynamic syntax
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;via data-inputmask attribute&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input data-inputmask=&quot;&#39;alias&#39;: &#39;datetime&#39;&quot; /&amp;gt;
&amp;lt;input data-inputmask=&quot;&#39;mask&#39;: &#39;9&#39;, &#39;repeat&#39;: 10, &#39;greedy&#39; : false&quot; /&amp;gt;
&amp;lt;input data-inputmask=&quot;&#39;mask&#39;: &#39;99-9999999&#39;&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;:input&quot;).inputmask();
  or
  Inputmask().mask(document.querySelectorAll(&quot;input&quot;));
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Any option can also be passed through the use of a data attribute. Use data-inputmask-&amp;lt;&lt;strong&gt;&lt;em&gt;the name of the option&lt;/em&gt;&lt;/strong&gt;&amp;gt;=&quot;value&quot;&lt;/h4&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input id=&quot;example1&quot; data-inputmask-clearmaskonlostfocus=&quot;false&quot; /&amp;gt;
&amp;lt;input id=&quot;example2&quot; data-inputmask-regex=&quot;[a-za-zA-Z0-9!#$%&amp;amp;&#39;*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&amp;amp;&#39;*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#example1&quot;).inputmask(&quot;99-9999999&quot;);
  $(&quot;#example2&quot;).inputmask();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;via &amp;lt;input-mask&amp;gt; element&lt;/h3&gt; 
&lt;p&gt;Use the input-mask element in your HTML code and set the options as attributes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input-mask alias=&quot;currency&quot;&amp;gt;&amp;lt;/input-mask&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Allowed HTML-elements&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;input type=&quot;search&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;input type=&quot;tel&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;input type=&quot;url&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;input type=&quot;password&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;div contenteditable=&quot;true&quot;&amp;gt;&lt;/code&gt; (and all others supported by contenteditable)&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/li&gt; 
 &lt;li&gt;any html-element (mask text content or set maskedvalue with jQuery.val)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;The allowed input types are defined in the supportsInputType option. Also see (&lt;a href=&quot;https://html.spec.whatwg.org/multipage/forms.html#do-not-apply&quot;&gt;input-type-ref&lt;/a&gt;)&lt;/p&gt; 
&lt;h3&gt;Default masking definitions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;code&gt;9&lt;/code&gt; : numeric&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;a&lt;/code&gt; : alphabetical&lt;/li&gt; 
 &lt;li&gt;&lt;code&gt;*&lt;/code&gt; : alphanumeric&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;There are more definitions defined within the extensions.
 &lt;!-- raw HTML omitted --&gt;You can find info within the js-files or by further exploring the options.&lt;/p&gt; 
&lt;h6&gt;Note:&lt;/h6&gt; 
&lt;p&gt;When your new mask is acting strange and replaces some static chars with the mask, then there is a definition that uses the char as a symbol. To solve this you need to &lt;a href=&quot;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#escape-special-mask-chars&quot;&gt;double escape the char&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Masking types&lt;/h2&gt; 
&lt;h3&gt;Static masks&lt;/h3&gt; 
&lt;p&gt;These are the very basics of masking. The mask is defined and will not change during the input.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(selector).inputmask(&quot;aa-9999&quot;);  //static mask
  $(selector).inputmask({mask: &quot;aa-9999&quot;});  //static mask
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Optional masks&lt;/h3&gt; 
&lt;p&gt;It is possible to define some parts in the mask is optional. This is done by using [ ].&lt;/p&gt; 
&lt;p&gt;Example:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;#test&#39;).inputmask(&#39;(99) 9999[9]-9999&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;This mask will allow input like &lt;code&gt;(99) 99999-9999&lt;/code&gt; or &lt;code&gt;(99) 9999-9999&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;Input =&amp;gt; 12123451234 mask =&amp;gt; (12) 12345-1234 (trigger complete)
 &lt;!-- raw HTML omitted --&gt; Input =&amp;gt; 121234-1234 mask =&amp;gt; (12) 1234-1234 (trigger complete)
 &lt;!-- raw HTML omitted --&gt; Input =&amp;gt; 1212341234 mask =&amp;gt; (12) 12341-234_ (trigger incomplete)&lt;/p&gt; 
&lt;h4&gt;skipOptionalPartCharacter&lt;/h4&gt; 
&lt;p&gt;As an extra, there is another configurable character which is used to skip an optional part in the mask.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;skipOptionalPartCharacter: &quot; &quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Input =&amp;gt; 121234 1234 mask =&amp;gt; (12) 1234-1234 (trigger complete)&lt;/p&gt; 
&lt;p&gt;When &lt;code&gt;clearMaskOnLostFocus: true&lt;/code&gt; is set in the options (default), the mask will clear out the optional part when it is not filled in, and this only in case the optional part is at the end of the mask.&lt;/p&gt; 
&lt;p&gt;For example, given:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;#test&#39;).inputmask(&#39;999[-AAA]&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;While the field has focus and is blank, users will see the full mask &lt;code&gt;___-___&lt;/code&gt;. When the required part of the mask is filled and the field loses focus, the user will see &lt;code&gt;123&lt;/code&gt;. When both the required and optional parts of the mask are filled out and the field loses focus, the user will see &lt;code&gt;123-ABC&lt;/code&gt;.&lt;/p&gt; 
&lt;h4&gt;Optional masks with greedy false&lt;/h4&gt; 
&lt;p&gt;When defining an optional mask together with the greedy: false option, the inputmask will show the smallest possible mask as input first.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask({ mask: &quot;9[-9999]&quot;, greedy: false });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;The initial mask shown will be &quot;&lt;strong&gt;_&lt;/strong&gt;&quot; instead of &quot;&lt;strong&gt;_&lt;/strong&gt;-____&quot;.&lt;/p&gt; 
&lt;h3&gt;Dynamic masks&lt;/h3&gt; 
&lt;p&gt;Dynamic masks can change during input. To define a dynamic part use { }.&lt;/p&gt; 
&lt;p&gt;{n} =&amp;gt; n repeats {n|j} =&amp;gt; n repeats, with j jitmasking {n,m} =&amp;gt; from n to m repeats {n,m|j} =&amp;gt; from n to m repeats, with j jitmasking&lt;/p&gt; 
&lt;p&gt;Also {+} and {*} is allowed. + start from 1 and * start from 0.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(selector).inputmask(&quot;aa-9{4}&quot;);  //static mask with dynamic syntax
  $(selector).inputmask(&quot;aa-9{1,4}&quot;);  //dynamic mask ~ the 9 def can be occur 1 to 4 times

  //email mask
  $(selector).inputmask({
    mask: &quot;*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}[.*{2,6}][.*{1,2}]&quot;,
    greedy: false,
    onBeforePaste: function (pastedValue, opts) {
      pastedValue = pastedValue.toLowerCase();
      return pastedValue.replace(&quot;mailto:&quot;, &quot;&quot;);
    },
    definitions: {
      &#39;*&#39;: {
        validator: &quot;[0-9A-Za-z!#$%&amp;amp;&#39;*+/=?^_`{|}~\-]&quot;,
        casing: &quot;lower&quot;
      }
    }
  });
  //decimal mask
   Inputmask(&quot;(.999){+|1},00&quot;, {
        positionCaretOnClick: &quot;radixFocus&quot;,
        radixPoint: &quot;,&quot;,
        _radixDance: true,
        numericInput: true,
        placeholder: &quot;0&quot;,
        definitions: {
            &quot;0&quot;: {
                validator: &quot;[0-9\uFF11-\uFF19]&quot;
            }
        }
   }).mask(selector);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Alternator masks&lt;/h3&gt; 
&lt;p&gt;The alternator syntax is like an &lt;strong&gt;OR&lt;/strong&gt; statement. The mask can be one of the 3 choices specified in the alternator.&lt;/p&gt; 
&lt;p&gt;To define an alternator use the |. ex: &quot;a|9&quot; =&amp;gt; a or 9 &quot;(aaa)|(999)&quot; =&amp;gt; aaa or 999 &quot;(aaa|999|9AA)&quot; =&amp;gt; aaa or 999 or 9AA&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Also make sure to read about the &lt;a href=&quot;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#keepStatic&quot;&gt;keepStatic&lt;/a&gt; option.&lt;/strong&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&quot;selector&quot;).inputmask(&quot;(99.9)|(X)&quot;, {
  definitions: {
    &quot;X&quot;: {
      validator: &quot;[xX]&quot;,
      casing: &quot;upper&quot;
    }
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&quot;selector&quot;).inputmask({
  mask: [&quot;99.9&quot;, &quot;X&quot;],
  definitions: {
    &quot;X&quot;: {
      validator: &quot;[xX]&quot;,
      casing: &quot;upper&quot;
    }
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;Preprocessing masks&lt;/h3&gt; 
&lt;p&gt;You can define the mask as a function that can allow you to preprocess the resulting mask. Example sorting for multiple masks or retrieving mask definitions dynamically through ajax. The preprocessing fn should return a valid mask definition.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask({ mask: function () { /* do stuff */ return [&quot;[1-]AAA-999&quot;, &quot;[1-]999-AAA&quot;]; }});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;JIT Masking&lt;/h3&gt; 
&lt;p&gt;Just in time masking. With the jitMasking option, you can enable jit masking. The mask will only be visible for the user-entered characters. Default: false&lt;/p&gt; 
&lt;p&gt;Value can be true or a threshold number or false.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask(&quot;datetime&quot;, { jitMasking: true }).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Define custom definitions&lt;/h2&gt; 
&lt;p&gt;You can define your own definitions to use in your mask.
 &lt;!-- raw HTML omitted --&gt;Start by choosing a masksymbol.&lt;/p&gt; 
&lt;h3&gt;validator(chrs, maskset, pos, strict, opts)&lt;/h3&gt; 
&lt;p&gt;Next, define your validator. The validator can be a regular expression or a function.&lt;/p&gt; 
&lt;p&gt;The return value of a validator can be true, false, or a command object.&lt;/p&gt; 
&lt;h4&gt;Options of the command object&lt;/h4&gt; 
&lt;ul&gt; 
 &lt;li&gt; &lt;p&gt;pos : position to insert&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;c : character to insert&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;caret : position of the caret&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;remove : position(s) to remove&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;pos or [pos1, pos2]&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;insert : position(s) to add :&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;{ pos : position to insert, c : character to insert, fromIsValid : true/false, strict : true/false }&lt;/li&gt; 
   &lt;li&gt;[{ pos : position to insert, c : character to insert, fromIsValid : true/false, strict : true/false }, { ...}, ... ]&lt;/li&gt; 
  &lt;/ul&gt; &lt;p&gt;fromIsValid &amp;amp; strict defaults to true.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;refreshFromBuffer :&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;true =&amp;gt; refresh validPositions from the complete buffer&lt;/li&gt; 
   &lt;li&gt;{ start: , end: } =&amp;gt; refresh from start to end&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;rewritePosition: rewrite the maskPos within the isvalid function&lt;br&gt; See &lt;a href=&quot;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#preValidation&quot;&gt;preValidation option&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;definitionSymbol&lt;/h3&gt; 
&lt;p&gt;When you insert or delete characters, they are only shifted when the definition type is the same. This behavior can be overridden by giving a definitionSymbol. (see example x, y, z, which can be used for IP-address masking, the validation is different, but it is allowed to shift the characters between the definitions)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask.extendDefinitions({
  &#39;f&#39;: {  //masksymbol
    &quot;validator&quot;: &quot;[0-9\(\)\.\+/ ]&quot;
  },
  &#39;g&#39;: {
    &quot;validator&quot;: function (chrs, buffer, pos, strict, opts) {
      //do some logic and return true, false, or { &quot;pos&quot;: new position, &quot;c&quot;: character to place }
    }
  },
  &#39;j&#39;: { //basic year
    validator: &quot;(19|20)\\d{2}&quot;
  },
  &#39;x&#39;: {
    validator: &quot;[0-2]&quot;,
    definitionSymbol: &quot;i&quot; //this allows shifting values from other definitions, with the same masksymbol or definitionSymbol
  },
  &#39;y&#39;: {
    validator: function (chrs, buffer, pos, strict, opts) {
      var valExp2 = new RegExp(&quot;2[0-5]|[01][0-9]&quot;);
      return valExp2.test(buffer[pos - 1] + chrs);
    },
    definitionSymbol: &quot;i&quot;
  },
  &#39;z&#39;: {
    validator: function (chrs, buffer, pos, strict, opts) {
      var valExp3 = new RegExp(&quot;25[0-5]|2[0-4][0-9]|[01][0-9][0-9]&quot;);
      return valExp3.test(buffer[pos - 2] + buffer[pos - 1] + chrs);
    },
    definitionSymbol: &quot;i&quot;
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;placeholder&lt;/h3&gt; 
&lt;p&gt;Specify a placeholder for a definition. This can also be a function.&lt;/p&gt; 
&lt;h3&gt;set defaults&lt;/h3&gt; 
&lt;p&gt;The defaults can be set as below.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask.extendDefaults({
  &#39;autoUnmask&#39;: true
});
Inputmask.extendDefinitions({
  &#39;A&#39;: {
    validator: &quot;[A-Za-z\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5]&quot;,
    casing: &quot;upper&quot; //auto uppercasing
  },
  &#39;+&#39;: {
    validator: &quot;[0-9A-Za-z\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5]&quot;,
    casing: &quot;upper&quot;
  }
});
Inputmask.extendAliases({
  &#39;numeric&#39;: {
    mask: &quot;r&quot;,
    greedy: false,
    ...
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;But if the property is defined within an alias you need to set it for the alias definition. This is also for default plugin options. If the alias definitions extend on default options, you can only override it at alias level.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask.extendAliases({
  &#39;numeric&#39;: {
    autoUnmask: true,
    allowPlus: false,
    allowMinus: false
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;However, the preferred way to alter properties for an alias is by creating a new alias that inherits from the default alias definition.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask.extendAliases({
  &#39;myNum&#39;: {
    alias: &quot;numeric&quot;,
    placeholder: &#39;&#39;,
    allowPlus: false,
    allowMinus: false
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Once defined, you can call the alias by:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask(&quot;myNum&quot;).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;All callbacks are implemented as options. This means that you can set general implementations for the callbacks by setting a default.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask.extendDefaults({
  onKeyValidation: function(key, result){
    if (!result){
      alert(&#39;Your input is not valid&#39;)
    }
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Methods:&lt;/h2&gt; 
&lt;h3&gt;mask(elems)&lt;/h3&gt; 
&lt;p&gt;Create a mask for the input.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask({ mask: &quot;99-999-99&quot;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask({ mask: &quot;99-999-99&quot;}).mask(document.querySelectorAll(selector));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask(&quot;99-999-99&quot;).mask(document.querySelectorAll(selector));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var im = new Inputmask(&quot;99-999-99&quot;);
im.mask(document.querySelectorAll(selector));
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask(&quot;99-999-99&quot;).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;unmaskedvalue&lt;/h3&gt; 
&lt;p&gt;Get the &lt;code&gt;unmaskedvalue&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask(&#39;unmaskedvalue&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var input = document.getElementById(selector);
if (input.inputmask)
  input.inputmask.unmaskedvalue()
&lt;/code&gt;&lt;/pre&gt; 
&lt;h4&gt;Value unmasking&lt;/h4&gt; 
&lt;p&gt;Unmask a given value against the mask.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var unformattedMask = Inputmask.unmask(&quot;123-45678-90&quot;, { mask: &quot;999-99999-99&quot; }); //1234567890
var unformattedDate = Inputmask.unmask(&quot;23/03/1973&quot;, { alias: &quot;datetime&quot;, inputFormat: &quot;dd/mm/yyyy&quot;, outputFormat: &quot;ddmmyyyy&quot;});//23031973
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;remove&lt;/h3&gt; 
&lt;p&gt;Remove the &lt;code&gt;inputmask&lt;/code&gt;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask(&#39;remove&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var input = document.getElementById(selector);
if (input.inputmask)
  input.inputmask.remove()
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask.remove(document.getElementById(selector));
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;getemptymask&lt;/h3&gt; 
&lt;p&gt;return the default (empty) mask value&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#test&quot;).inputmask(&quot;999-AAA&quot;);
  var initialValue = $(&quot;#test&quot;).inputmask(&quot;getemptymask&quot;);  // initialValue  =&amp;gt; &quot;___-___&quot;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;hasMaskedValue&lt;/h3&gt; 
&lt;p&gt;Check whether the returned value is masked or not; currently only works reliably when using jquery.val fn to retrieve the value&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  function validateMaskedValue(val){}
  function validateValue(val){}

  var val = $(&quot;#test&quot;).val();
  if ($(&quot;#test&quot;).inputmask(&quot;hasMaskedValue&quot;))
    validateMaskedValue(val);
  else
    validateValue(val);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;isComplete&lt;/h3&gt; 
&lt;p&gt;Verify whether the current value is complete or not.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  if ($(selector).inputmask(&quot;isComplete&quot;)){
    //do something
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;getmetadata&lt;/h3&gt; 
&lt;p&gt;The metadata of the actual mask provided in the mask definitions can be obtained by calling getmetadata. If only a mask is provided the mask definition will be returned by the getmetadata.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask(&quot;getmetadata&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;setvalue&lt;/h3&gt; 
&lt;p&gt;The setvalue functionality is to set a value to the inputmask like you would do with jQuery.val, BUT it will trigger the internal event used by the inputmask always, whatever the case. This is particular usefull when cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the first event (mouseenter, focus, ...) the inputmask can detect if it were cloned and can reactivate the masking. However when setting the value with jQuery.val there is none of the events triggered in that case. The setvalue functionality does this for you.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;$(selector).inputmask(&quot;setvalue&quot;, value);

var selector = document.getElementById(&quot;selector&quot;);
selector.inputmask.setValue(value);

Inputmask.setValue(selector, value);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;option(options, noremask)&lt;/h3&gt; 
&lt;p&gt;Get or set an option on an existing inputmask. The option method is intented for adding extra options like callbacks, etc at a later time to the mask.&lt;/p&gt; 
&lt;p&gt;When extra options are set the mask is automatically reapplied, unless you pas true for the noremask argument.&lt;/p&gt; 
&lt;p&gt;Set an option&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.querySelector(&quot;#CellPhone&quot;).inputmask.option({
  onBeforePaste: function (pastedValue, opts) {
    return phoneNumOnPaste(pastedValue, opts);
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&quot;#CellPhone&quot;).inputmask(&quot;option&quot;, {
  onBeforePaste: function (pastedValue, opts) {
    return phoneNumOnPaste(pastedValue, opts);
  }
})
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;format&lt;/h3&gt; 
&lt;p&gt;Instead of masking an input element, it is also possible to use the inputmask for formatting given values. Think of formatting values to show in jqGrid or on other elements then inputs.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var formattedDate = Inputmask.format(&quot;2331973&quot;, { alias: &quot;datetime&quot;, inputFormat: &quot;dd/mm/yyyy&quot;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;isValid&lt;/h3&gt; 
&lt;p&gt;Validate a given value against the mask.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var isValid = Inputmask.isValid(&quot;23/03/1973&quot;, { alias: &quot;datetime&quot;, inputFormat: &quot;dd/mm/yyyy&quot;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Options:&lt;/h2&gt; 
&lt;h3&gt;placeholder&lt;/h3&gt; 
&lt;p&gt;Change the mask placeholder. Default: &quot;_&quot;&lt;/p&gt; 
&lt;p&gt;Instead of &quot;_&quot;, you can change the unfilled characters mask as you like, simply by adding the &lt;code&gt;placeholder&lt;/code&gt; option.
 &lt;!-- raw HTML omitted --&gt; For example, &lt;code&gt;placeholder: &quot; &quot;&lt;/code&gt; will change the default autofill with empty values&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#date&quot;).inputmask(&quot;99/99/9999&quot;,{ &quot;placeholder&quot;: &quot;*&quot; });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or a multi-char placeholder&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#date&quot;).inputmask(&quot;99/99/9999&quot;,{ &quot;placeholder&quot;: &quot;dd/mm/yyyy&quot; });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;optionalmarker&lt;/h3&gt; 
&lt;p&gt;Definition of the symbols used to indicate an optional part in the mask.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;optionalmarker: { start: &quot;[&quot;, end: &quot;]&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;quantifiermarker&lt;/h3&gt; 
&lt;p&gt;Definition of the symbols used to indicate a quantifier in the mask.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;quantifiermarker: { start: &quot;{&quot;, end: &quot;}&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;groupmarker&lt;/h3&gt; 
&lt;p&gt;Definition of the symbols used to indicate a group in the mask.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;groupmarker: { start: &quot;(&quot;, end: &quot;)&quot; }
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;alternatormarker&lt;/h3&gt; 
&lt;p&gt;Definition of the symbols used to indicate an alternator part in the mask.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;alternatormarker: &quot;|&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;escapeChar&lt;/h3&gt; 
&lt;p&gt;Definition of the symbols used to escape a part in the mask.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;escapeChar: &quot;\\&quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;See &lt;a href=&quot;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#escape-special-mask-chars&quot;&gt;escape special mask chars&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;mask&lt;/h3&gt; 
&lt;p&gt;The mask to use.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Inputmask({ mask: &quot;9{*}&quot;).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;regex&lt;/h3&gt; 
&lt;p&gt;Use a regular expression as a mask&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Inputmask({ regex: &quot;[0-9]*&quot; }).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;When using shorthands be aware that you need to double escape or use String.raw with a string literal.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;Inputmask({ regex: &quot;\\d*&quot; }).mask(selector);
~
Inputmask({ regex: String.raw`\d*` }).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;oncomplete&lt;/h3&gt; 
&lt;p&gt;Execute a function when the mask is completed&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#date&quot;).inputmask(&quot;99/99/9999&quot;,{ &quot;oncomplete&quot;: function(){ alert(&#39;inputmask complete&#39;); } });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;onincomplete&lt;/h3&gt; 
&lt;p&gt;Execute a function when the mask is incomplete. Executes on blur.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#date&quot;).inputmask(&quot;99/99/9999&quot;,{ &quot;onincomplete&quot;: function(){ alert(&#39;inputmask incomplete&#39;); } });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;oncleared&lt;/h3&gt; 
&lt;p&gt;Execute a function when the mask is cleared.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#date&quot;).inputmask(&quot;99/99/9999&quot;,{ &quot;oncleared&quot;: function(){ alert(&#39;inputmask cleared&#39;); } });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;repeat&lt;/h3&gt; 
&lt;p&gt;Mask repeat function. Repeat the mask definition x-times.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#number&quot;).inputmask({ &quot;mask&quot;: &quot;9&quot;, &quot;repeat&quot;: 10 });  // ~ mask &quot;9999999999&quot;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;greedy&lt;/h3&gt; 
&lt;p&gt;Default: false Toggle to allocate as much possible or the opposite. Non-greedy repeat function.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#number&quot;).inputmask({ &quot;mask&quot;: &quot;9&quot;, &quot;repeat&quot;: 10, &quot;greedy&quot;: false });  // ~ mask &quot;9&quot; or mask &quot;99&quot; or ... mask &quot;9999999999&quot;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;With the non-greedy option set to false, you can specify * as repeat. This makes an endless repeat.&lt;/p&gt; 
&lt;h3&gt;autoUnmask&lt;/h3&gt; 
&lt;p&gt;Automatically unmask the value when retrieved.
 &lt;!-- raw HTML omitted --&gt;Default: false.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When setting this option to true the plugin also expects the initial value from the server to be unmasked.&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;removeMaskOnSubmit&lt;/h3&gt; 
&lt;p&gt;Remove the mask before submitting the form.
 &lt;!-- raw HTML omitted --&gt;Default: false&lt;/p&gt; 
&lt;h3&gt;clearMaskOnLostFocus&lt;/h3&gt; 
&lt;p&gt;Remove the empty mask on blur or when not empty remove the optional trailing part Default: true&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#ssn&quot;).inputmask(&quot;999-99-9999&quot;,{placeholder:&quot; &quot;, clearMaskOnLostFocus: true }); //default
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;insertMode&lt;/h3&gt; 
&lt;p&gt;Toggle to insert or overwrite input.
 &lt;!-- raw HTML omitted --&gt;Default: true.
 &lt;!-- raw HTML omitted --&gt;This option can be altered by pressing the Insert key.&lt;/p&gt; 
&lt;h4&gt;insertModeVisual&lt;/h4&gt; 
&lt;p&gt;Show selected caret when insertmode = false.&lt;/p&gt; 
&lt;h3&gt;clearIncomplete&lt;/h3&gt; 
&lt;p&gt;Clear the incomplete input on blur&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#date&quot;).inputmask(&quot;99/99/9999&quot;,{ &quot;clearIncomplete&quot;: true });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;aliases&lt;/h3&gt; 
&lt;p&gt;Definitions of aliases.&lt;/p&gt; 
&lt;p&gt;With an alias, you can define a complex mask definition and call it by using an alias name. So this is mainly to simplify the use of your masks. Some aliases found in the extensions are email, currency, decimal, integer, date, DateTime, dd/mm/yyyy, etc.&lt;/p&gt; 
&lt;p&gt;First, you have to create an alias definition. The alias definition can contain options for the mask, custom definitions, the mask to use, etc.&lt;/p&gt; 
&lt;p&gt;When you pass in an alias, the alias is first resolved and then the other options are applied. So you can call an alias and pass another mask to be applied over the alias. This also means that you can write aliases that &quot;inherit&quot; from another alias.&lt;/p&gt; 
&lt;p&gt;Some examples can be found in jquery.inputmask.xxx.extensions.js&lt;/p&gt; 
&lt;p&gt;use:&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&quot;#date&quot;).inputmask(&quot;datetime&quot;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&quot;#date&quot;).inputmask({ alias: &quot;datetime&quot;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also call an alias and extend it with some more options&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&quot;#date&quot;).inputmask(&quot;datetime&quot;, { &quot;clearIncomplete&quot;: true });
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;or&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&quot;#date&quot;).inputmask({ alias: &quot;datetime&quot;, &quot;clearIncomplete&quot;: true });
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;alias&lt;/h3&gt; 
&lt;p&gt;The alias to use.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&quot;#date&quot;).inputmask({ alias: &quot;email&quot;});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;onKeyDown&lt;/h3&gt; 
&lt;p&gt;Callback to implement autocomplete on certain keys for example&lt;/p&gt; 
&lt;p&gt;Function arguments: event, buffer, caretPos, opts
 &lt;!-- raw HTML omitted --&gt;Function return:&lt;/p&gt; 
&lt;h3&gt;onBeforeMask&lt;/h3&gt; 
&lt;p&gt;Executes before masking the initial value to allow preprocessing of the initial value.&lt;/p&gt; 
&lt;p&gt;Function arguments: initialValue, opts
 &lt;!-- raw HTML omitted --&gt;Function return: processedValue&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask({
  alias: &#39;phonebe&#39;,
  onBeforeMask: function (value, opts) {
    var processedValue = value.replace(/^0/g, &quot;&quot;);
    if (processedValue.indexOf(&quot;32&quot;) &amp;gt; 1 ||     processedValue.indexOf(&quot;32&quot;) == -1) {
      processedValue = &quot;32&quot; + processedValue;
    }

    return processedValue;
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;onBeforePaste&lt;/h3&gt; 
&lt;p&gt;This callback allows for preprocessing the pasted value before actually handling the value for masking. This can be useful for stripping away some characters before processing.&lt;/p&gt; 
&lt;p&gt;Function arguments: pastedValue, opts
 &lt;!-- raw HTML omitted --&gt;Function return: processedValue&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask({
  mask: &#39;9999 9999 9999 9999&#39;,
  placeholder: &#39; &#39;,
  showMaskOnHover: false,
  showMaskOnFocus: false,
  onBeforePaste: function (pastedValue, opts) {
    var processedValue = pastedValue;

    //do something with it

    return processedValue;
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;You can also disable pasting a value by returning false in the onBeforePaste call.&lt;/p&gt; 
&lt;p&gt;Default: Calls the onBeforeMask&lt;/p&gt; 
&lt;h3&gt;onBeforeWrite&lt;/h3&gt; 
&lt;p&gt;Executes before writing to the masked element&lt;/p&gt; 
&lt;p&gt;Use this to do some extra processing of the input. This can be useful when implementing an alias, ex. decimal alias, autofill the digits when leaving the inputfield.&lt;/p&gt; 
&lt;p&gt;Function arguments: event, buffer, caretPos, opts
 &lt;!-- raw HTML omitted --&gt;Function return: command object (see &lt;a href=&quot;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#define-custom-definitions&quot;&gt;Define custom definitions&lt;/a&gt;)&lt;/p&gt; 
&lt;h3&gt;onUnMask&lt;/h3&gt; 
&lt;p&gt;Executes after unmasking to allow post-processing of the unmaskedvalue.&lt;/p&gt; 
&lt;p&gt;Function arguments: maskedValue, unmaskedValue
 &lt;!-- raw HTML omitted --&gt;Function return: processedValue&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#number&quot;).inputmask(&quot;decimal&quot;, { onUnMask: function(maskedValue, unmaskedValue) {
    //do something with the value
    return unmaskedValue;
  }});
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;showMaskOnFocus&lt;/h3&gt; 
&lt;p&gt;Shows the mask when the input gets focus. (default = true)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#ssn&quot;).inputmask(&quot;999-99-9999&quot;,{ showMaskOnFocus: true }); //default
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;To make sure no mask is visible on focus also set the showMaskOnHover to false. Otherwise hovering with the mouse will set the mask and will stay on focus.&lt;/p&gt; 
&lt;h3&gt;showMaskOnHover&lt;/h3&gt; 
&lt;p&gt;Shows the mask when hovering the mouse. (default = true)&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#ssn&quot;).inputmask(&quot;999-99-9999&quot;,{ showMaskOnHover: true }); //default
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;onKeyValidation&lt;/h3&gt; 
&lt;p&gt;Callback function is executed on every keyvalidation with the key, result as the parameter.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#ssn&quot;).inputmask(&quot;999-99-9999&quot;, {
    onKeyValidation: function (key, result) {
      console.log(key + &quot; - &quot; + result);
    }
  });
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;skipOptionalPartCharacter&lt;/h3&gt; 
&lt;h3&gt;numericInput&lt;/h3&gt; 
&lt;p&gt;Numeric input direction. Keeps the caret at the end.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(selector).inputmask(&#39;€ 999.999.999,99&#39;, { numericInput: true });    //123456  =&amp;gt;  € ___.__1.234,56
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;rightAlign&lt;/h3&gt; 
&lt;p&gt;Align the input to the right&lt;/p&gt; 
&lt;p&gt;By setting the rightAlign you can specify to right-align an inputmask. This is only applied in combination op the numericInput option or the dir-attribute. The default is true.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(selector).inputmask(&#39;decimal&#39;, { rightAlign: false });  //disables the right alignment of the decimal input
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;undoOnEscape&lt;/h3&gt; 
&lt;p&gt;Make escape behave like undo. (ctrl-Z)
 &lt;!-- raw HTML omitted --&gt;Pressing escape reverts the value to the value before focus.
 &lt;!-- raw HTML omitted --&gt;Default: true&lt;/p&gt; 
&lt;h3&gt;radixPoint (numerics)&lt;/h3&gt; 
&lt;p&gt;Define the radixpoint (decimal separator)
 &lt;!-- raw HTML omitted --&gt;Default: &quot;&quot;&lt;/p&gt; 
&lt;h3&gt;groupSeparator (numerics)&lt;/h3&gt; 
&lt;p&gt;Define the groupseparator
 &lt;!-- raw HTML omitted --&gt;Default: &quot;&quot;&lt;/p&gt; 
&lt;h3&gt;keepStatic&lt;/h3&gt; 
&lt;p&gt;Default: null (~false) Use in combination with the alternator syntax Try to keep the mask static while typing. Decisions to alter the mask will be postponed if possible.&lt;/p&gt; 
&lt;p&gt;ex. $(selector).inputmask({ mask: [&quot;+55-99-9999-9999&quot;, &quot;+55-99-99999-9999&quot;, ], keepStatic: true });&lt;/p&gt; 
&lt;p&gt;typing 1212345123 =&amp;gt; should result in +55-12-1234-5123 type extra 4 =&amp;gt; switch to +55-12-12345-1234&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;When the option is not set, it will default to false, except for multiple masks it will default to true!!&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;positionCaretOnTab&lt;/h3&gt; 
&lt;p&gt;When enabled the caret position is set after the latest valid position on TAB Default: true&lt;/p&gt; 
&lt;h3&gt;tabThrough&lt;/h3&gt; 
&lt;p&gt;Allows for tabbing through the different parts of the masked field.
 &lt;!-- raw HTML omitted --&gt;Default: false&lt;/p&gt; 
&lt;h3&gt;definitions&lt;/h3&gt; 
&lt;p&gt;Pass custom definitions directly in the options.&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;	Inputmask({
			mask: &quot;V{13}9{4}&quot;,
			definitions: {
				&quot;V&quot;: {
					validator: &quot;[A-HJ-NPR-Za-hj-npr-z\\d]&quot;,
					casing: &quot;upper&quot;
				}
			},
			clearIncomplete: true,
			autoUnmask: true
		}).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;isComplete&lt;/h3&gt; 
&lt;p&gt;With this call-in (hook) you can override the default implementation of the isComplete function.
 &lt;!-- raw HTML omitted --&gt;Args =&amp;gt; buffer, opts Return =&amp;gt; true|false&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(selector).inputmask({
  regex: &quot;[0-9]*&quot;,
  isComplete: function(buffer, opts) {
    return new RegExp(opts.regex).test(buffer.join(&#39;&#39;));
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;postValidation&lt;/h3&gt; 
&lt;p&gt;Hook to postValidate the result from isValid. Usefull for validating the entry as a whole. Args =&amp;gt; buffer, pos, c, currentResult, opts, maskset, strict, fromCheckval
 &lt;!-- raw HTML omitted --&gt;Return =&amp;gt; true|false|command object&lt;/p&gt; 
&lt;h3&gt;preValidation&lt;/h3&gt; 
&lt;p&gt;Hook to preValidate the input. Useful for validating regardless of the definition. Args =&amp;gt; buffer, pos, char, isSelection, opts, maskset, caretPos, strict =&amp;gt; return true/false/command object When returning true, the normal validation kicks in, otherwise, it is skipped.&lt;/p&gt; 
&lt;p&gt;When returning a command object the actions are executed and further validation is stopped.&lt;br&gt; If you want to continue further validation, you need to add the rewritePosition action.&lt;/p&gt; 
&lt;h3&gt;staticDefinitionSymbol&lt;/h3&gt; 
&lt;p&gt;The staticDefinitionSymbol option is used to indicate that the static entries in the mask can match a certain definition. Especially useful with alternators so that the static element in the mask can match another alternation.&lt;/p&gt; 
&lt;p&gt;In the example below, we mark the spaces as a possible match for the &quot;i&quot; definition. By doing so the mask can alternate to the second mask even when we typed already &quot;12 3&quot;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask(&quot;(99 99 999999)|(i{+})&quot;, {
  definitions: {
    &quot;i&quot;: {
      validator: &quot;.&quot;,
      definitionSymbol: &quot;*&quot;
    }
  },
  staticDefinitionSymbol: &quot;*&quot;
}).mask(selector);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;nullable&lt;/h3&gt; 
&lt;p&gt;Return nothing when the user hasn&#39;t entered anything. Default: true&lt;/p&gt; 
&lt;h3&gt;noValuePatching&lt;/h3&gt; 
&lt;p&gt;Disable value property patching Default: false&lt;/p&gt; 
&lt;h3&gt;positionCaretOnClick&lt;/h3&gt; 
&lt;p&gt;Positioning of the caret on click.&lt;/p&gt; 
&lt;p&gt;Options:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;none&lt;/li&gt; 
 &lt;li&gt;lvp (based on the last valid position (default)&lt;/li&gt; 
 &lt;li&gt;radixFocus (position caret to radixpoint on initial click)&lt;/li&gt; 
 &lt;li&gt;select (select the whole input)&lt;/li&gt; 
 &lt;li&gt;ignore (ignore the click and continue the mask)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Default: &quot;lvp&quot;&lt;/p&gt; 
&lt;h3&gt;casing&lt;/h3&gt; 
&lt;p&gt;Apply casing at the mask-level. Options: null, &quot;upper&quot;, &quot;lower&quot; or &quot;title&quot; or callback args =&amp;gt; elem, test, pos, validPositions return charValue&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;casing: function(elem, test, pos, validPositions) {
	do some processing || upper/lower input property in the validPositions
	return elem; //upper/lower element
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Default: null&lt;/p&gt; 
&lt;h3&gt;inputmode&lt;/h3&gt; 
&lt;p&gt;Default: &quot;verbatim&quot; Specify the inputmode - already in place for when browsers start to support them https://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute&lt;/p&gt; 
&lt;h3&gt;importDataAttributes&lt;/h3&gt; 
&lt;p&gt;Specify to use the data-inputmask attributes or to ignore them.&lt;/p&gt; 
&lt;p&gt;If you don&#39;t use data attributes you can disable the import by specifying importDataAttributes: false.&lt;/p&gt; 
&lt;p&gt;Default: true&lt;/p&gt; 
&lt;h3&gt;shiftPositions&lt;/h3&gt; 
&lt;p&gt;Alter the behavior of the char shifting on entry or deletion.&lt;/p&gt; 
&lt;p&gt;In some cases shifting the mask entries or deletion should be more restrictive.&lt;br&gt; Ex. date masks. Shifting month to day makes no sense&lt;/p&gt; 
&lt;p&gt;Default: true&lt;/p&gt; 
&lt;p&gt;true = shift on the &quot;def&quot; match false = shift on the &quot;nativeDef&quot; match&lt;/p&gt; 
&lt;h3&gt;usePrototypeDefinitions&lt;/h3&gt; 
&lt;p&gt;Use the default defined definitions from the prototype.&lt;/p&gt; 
&lt;p&gt;Default: true&lt;/p&gt; 
&lt;h2&gt;General&lt;/h2&gt; 
&lt;h3&gt;set a value and apply the mask&lt;/h3&gt; 
&lt;p&gt;this can be done with the traditional jquery.val function (all browsers) or JavaScript value property for browsers which implement lookupGetter or getOwnPropertyDescriptor&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#number&quot;).val(12345);

  var number = document.getElementById(&quot;number&quot;);
  number.value = 12345;
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;with the autoUnmaskoption you can change the return of $.fn.val (or value property) to unmaskedvalue or the maskedvalue&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&#39;#&amp;lt;%= tbDate.ClientID%&amp;gt;&#39;).inputmask({ &quot;mask&quot;: &quot;99/99/9999&quot;, &#39;autoUnmask&#39; : true});    //  value: 23/03/1973
  alert($(&#39;#&amp;lt;%= tbDate.ClientID%&amp;gt;&#39;).val());    // shows 23031973     (autoUnmask: true)

  var tbDate = document.getElementById(&quot;&amp;lt;%= tbDate.ClientID%&amp;gt;&quot;);
  alert(tbDate.value);    // shows 23031973     (autoUnmask: true)
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;escape special mask chars&lt;/h3&gt; 
&lt;p&gt;If you want a mask element to appear as a static element you can escape them by \&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#months&quot;).inputmask(&quot;m \\months&quot;);
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Extra example see https://github.com/RobinHerbots/Inputmask/issues/2251&lt;/p&gt; 
&lt;h3&gt;auto-casing inputmask&lt;/h3&gt; 
&lt;p&gt;You can define within a definition to automatically apply some casing on the entry in input by giving the casing.
 &lt;!-- raw HTML omitted --&gt;Casing can be null, &quot;upper&quot;, &quot;lower&quot; or &quot;title&quot;.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Inputmask.extendDefinitions({
  &#39;A&#39;: {
    validator: &quot;[A-Za-z]&quot;,
    casing: &quot;upper&quot; //auto uppercasing
  },
  &#39;+&#39;: {
    validator: &quot;[A-Za-z\u0410-\u044F\u0401\u04510-9]&quot;,
    casing: &quot;upper&quot;
  }
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;Include jquery.inputmask.extensions.js for using the A and # definitions.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;#test&quot;).inputmask(&quot;999-AAA&quot;);    //   =&amp;gt; 123abc ===&amp;gt; 123-ABC
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Supported markup options&lt;/h2&gt; 
&lt;h3&gt;RTL attribute&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input id=&quot;test&quot; dir=&quot;rtl&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;readonly attribute&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input id=&quot;test&quot; readonly=&quot;readonly&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;disabled attribute&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input id=&quot;test&quot; disabled=&quot;disabled&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;maxlength attribute&lt;/h3&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input id=&quot;test&quot; maxlength=&quot;4&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;data-inputmask attribute&lt;/h3&gt; 
&lt;p&gt;You can also apply an inputmask by using the data-inputmask attribute. In the attribute, you specify the options wanted for the inputmask. This gets parsed with $.parseJSON (for the moment), so be sure to use a well-formed JSON-string without the {}.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input data-inputmask=&quot;&#39;alias&#39;: &#39;datetime&#39;&quot; /&amp;gt;
&amp;lt;input data-inputmask=&quot;&#39;mask&#39;: &#39;9&#39;, &#39;repeat&#39;: 10, &#39;greedy&#39; : false&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;:input&quot;).inputmask();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h3&gt;data-inputmask-&amp;lt;option&amp;gt; attribute&lt;/h3&gt; 
&lt;p&gt;All options can also be passed through data-attributes.&lt;/p&gt; 
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input data-inputmask-mask=&quot;9&quot; data-inputmask-repeat=&quot;10&quot; data-inputmask-greedy=&quot;false&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(document).ready(function(){
  $(&quot;:input&quot;).inputmask();
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;jQuery.clone&lt;/h2&gt; 
&lt;p&gt;When cloning a inputmask, the inputmask reactivates on the first event (mouseenter, focus, ...) that happens to the input. If you want to set a value on the cloned inputmask and you want to directly reactivate the masking you have to use $(input).inputmask(&quot;setvalue&quot;, value)&lt;/p&gt; 
&lt;p&gt;Be sure to pass true in the jQuery.clone fn to clone with data and events and use jQuery as dependencyLib (https://api.jquery.com/clone/)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mediaelement/mediaelement</title>
      <link>https://github.com/mediaelement/mediaelement</link>
      <description>&lt;p&gt;HTML5 &lt;audio&gt; or &lt;video&gt; player with support for MP4, WebM, and MP3 as well as HLS, Dash, YouTube, Facebook, SoundCloud and others with a common HTML5 MediaElement API, enabling a consistent UI in all browsers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/910829/22357262/e6cf32b4-e404-11e6-876b-59afa009f65c.png&quot; alt=&quot;MediaElementJS&quot;&gt;&lt;/h1&gt; 
&lt;p&gt;One file. Any browser. Same UI.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Author: John Dyer &lt;a href=&quot;http://j.hn/&quot;&gt;http://j.hn/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Website: &lt;a href=&quot;http://mediaelementjs.com/&quot;&gt;http://mediaelementjs.com/&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;License: &lt;a href=&quot;http://mediaelement.mit-license.org/&quot;&gt;MIT&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Meaning: Use everywhere, keep copyright, it&#39;d be swell if you&#39;d link back here.&lt;/li&gt; 
 &lt;li&gt;Thanks: my employer, &lt;a href=&quot;http://www.dts.edu/&quot;&gt;Dallas Theological Seminary&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Contributors: &lt;a href=&quot;https://github.com/mediaelement/mediaelement/graphs/contributors&quot;&gt;all contributors&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href=&quot;https://github.com/mediaelement/mediaelement&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/v/mediaelement.svg&quot; alt=&quot;GitHub Version&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/mediaelement/mediaelement&quot;&gt;&lt;img src=&quot;https://img.shields.io/travis/mediaelement/mediaelement.svg&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://coveralls.io/github/mediaelement/mediaelement&quot;&gt;&lt;img src=&quot;https://img.shields.io/coveralls/mediaelement/mediaelement.svg&quot; alt=&quot;Coverage Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://mediaelement.mit-license.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/npm/l/mediaelement.svg&quot; alt=&quot;MIT License&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://cdnjs.com/libraries/mediaelement&quot;&gt;&lt;img src=&quot;https://img.shields.io/cdnjs/v/mediaelement.svg&quot; alt=&quot;CDNJS&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://www.jsdelivr.com/package/npm/mediaelement&quot;&gt;&lt;img src=&quot;https://data.jsdelivr.com/v1/package/npm/mediaelement/badge?style=rounded&quot; alt=&quot;jsDelivr Hits&quot;&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h1&gt;Table of Contents&lt;/h1&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/#intro&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/#migration&quot;&gt;Migrating from &lt;code&gt;2.x&lt;/code&gt; to &lt;code&gt;4.x&lt;/code&gt; version&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/#installation&quot;&gt;Installation and Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/#api&quot;&gt;API and Configuration&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/#guidelines&quot;&gt;Guidelines for Contributors&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/#changelog&quot;&gt;Change Log&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/#todo&quot;&gt;TODO list&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;&lt;em&gt;MediaElementPlayer: HTML5 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; player&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;A complete HTML/CSS audio/video player built on top &lt;code&gt;MediaElement.js&lt;/code&gt;. Many great HTML5 players have a completely separate Flash UI in fallback mode, but MediaElementPlayer.js uses the same HTML/CSS for all players.&lt;/p&gt; 
&lt;p&gt;&lt;code&gt;MediaElement.js&lt;/code&gt; is a set of custom Flash plugins that mimic the HTML5 MediaElement API for browsers that don&#39;t support HTML5 or don&#39;t support the media codecs you&#39;re using. Instead of using Flash as a &lt;em&gt;fallback&lt;/em&gt;, Flash is used to make the browser seem HTML5 compliant and enable codecs like H.264 (via Flash) on all browsers.&lt;/p&gt; 
&lt;p&gt;In general, &lt;code&gt;MediaElement.js&lt;/code&gt; supports &lt;strong&gt;IE11+, MS Edge, Chrome, Firefox, Safari, iOS 8+&lt;/strong&gt; and &lt;strong&gt;Android 4.0+&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;It is strongly recommended to read the entire documentation and check the &lt;code&gt;demo&lt;/code&gt; folder to get the most out of this package&lt;/strong&gt;. Visit &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs&quot;&gt;here&lt;/a&gt; to start.&lt;/p&gt; 
&lt;h2&gt;* IMPORTANT NOTE for Safari users (Jun 8, 2017)&lt;/h2&gt; 
&lt;p&gt;Since Sierra version, &lt;code&gt;autoplay&lt;/code&gt; policies have changed. You may experience an error if you try to execute &lt;code&gt;play&lt;/code&gt; programmatically or via &lt;code&gt;autoplay&lt;/code&gt; attribute with MediaElement, unless &lt;code&gt;muted&lt;/code&gt; attribute is specified.&lt;/p&gt; 
&lt;p&gt;For more information, read https://webkit.org/blog/7734/auto-play-policy-changes-for-macos/&lt;/p&gt; 
&lt;h2&gt;* IMPORTANT CHANGES on &lt;code&gt;4.2.0&lt;/code&gt; version&lt;/h2&gt; 
&lt;p&gt;As part of the continuous improvements the player, we have decided to drop completely support for IE9 and IE10, since market share of those browsers together is 0.4%, according to http://caniuse.com/usage-table.&lt;/p&gt; 
&lt;p&gt;This change is for &lt;code&gt;MediaElement&lt;/code&gt; and &lt;code&gt;MediaElement Plugins&lt;/code&gt; repositories.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;* IMPORTANT: Migrating from &lt;code&gt;2.x&lt;/code&gt; to &lt;code&gt;4.x&lt;/code&gt; version&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;3.x&lt;/code&gt; version has jQuery in the code base, and &lt;code&gt;4.x&lt;/code&gt; is framework-agnostic. So for either &lt;code&gt;3.x&lt;/code&gt; or &lt;code&gt;4.x&lt;/code&gt; versions, the following steps are valid, but it is highly recommended to upgrade to &lt;code&gt;4.x&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;In order to successfully install &lt;code&gt;4.x&lt;/code&gt; in an existing setup, you must consider the following guidelines:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; &lt;p&gt;If your installation relies on the legacy player classes (i.e., &lt;code&gt;mejs-player&lt;/code&gt;, &lt;code&gt;mejs-container&lt;/code&gt;, etc.), you &lt;strong&gt;must&lt;/strong&gt; set up the proper namespace. In &lt;code&gt;2.x&lt;/code&gt;, the default namespace is &lt;code&gt;mejs-&lt;/code&gt; but now is &lt;code&gt;mejs__&lt;/code&gt;. In order to set up a new namespace (or the legacy one), use the &lt;code&gt;classPrefix&lt;/code&gt; configuration, and make sure you use the &lt;code&gt;mediaelementplayer-legacy&lt;/code&gt; stylesheet provided in the &lt;code&gt;/build/&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;By default, &lt;code&gt;MediaElement&lt;/code&gt; has bundled native renderers, such as HLS, M(PEG)-DASH and FLV, as well as YouTube and Flash shims. &lt;strong&gt;If you want to use any other renderer, you MUST refer to the &lt;code&gt;build/renderers&lt;/code&gt; folder and add as many as you want&lt;/strong&gt;. Check &lt;code&gt;demo/index.html&lt;/code&gt; for a better reference.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;You &lt;strong&gt;must&lt;/strong&gt; set up now the path for the Flash shims if they are not in the same folder as the JS files. To do this, set the path via the &lt;code&gt;pluginPath&lt;/code&gt; configuration. In the same topic, if you need to support browsers with JavaScript disabled, you &lt;strong&gt;must&lt;/strong&gt; reference the correct Flash shim, since in &lt;code&gt;2.x&lt;/code&gt; there was only a single Flash shim and in &lt;code&gt;3.x&lt;/code&gt; it was split to target specific media types. Check the &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs/installation.md#disabled-javascript&quot;&gt;Browsers with JavaScript disabled&lt;/a&gt; section for more details.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you want to use Flash shims from a CDN, do the change related to &lt;code&gt;pluginPath&lt;/code&gt; setting the CDN&#39;s URL, and also setting &lt;code&gt;shimScriptAccess&lt;/code&gt; configuration as &lt;strong&gt;&lt;code&gt;always&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;If you need to force the Flash shim, the way to do it in &lt;code&gt;3.x&lt;/code&gt; version is to use the &lt;code&gt;renderers&lt;/code&gt; configuration and list them in an array.&lt;/p&gt; &lt;/li&gt; 
 &lt;li&gt; &lt;p&gt;&lt;code&gt;pluginType&lt;/code&gt; was removed to favor &lt;code&gt;rendererName&lt;/code&gt;. If you rely on that element, just create conditionals based on the renderer ID (all listed &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs/usage.md#renderers-list&quot;&gt;here&lt;/a&gt;). For example:&lt;/p&gt; &lt;/li&gt; 
&lt;/ol&gt; 
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;video, audio&#39;).mediaelementplayer({
	// Configuration
	success: function(media) {
		var isNative = /html5|native/i.test(media.rendererName);

		var isYoutube = ~media.rendererName.indexOf(&#39;youtube&#39;);

		// etc.
	}
});
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Installation and Usage&lt;/h2&gt; 
&lt;p&gt;The full documentation on how to install &lt;code&gt;MediaElement.js&lt;/code&gt; is available at &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs/installation.md&quot;&gt;Installation&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;A brief guide on how to create and use instances of &lt;code&gt;MediaElement&lt;/code&gt; available at &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs/usage.md&quot;&gt;Usage&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Additional features can be found at https://github.com/mediaelement/mediaelement-plugins.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;API and Configuration&lt;/h2&gt; 
&lt;p&gt;&lt;code&gt;MediaElement.js&lt;/code&gt; has many options that you can take advantage from. Visit &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs/api.md&quot;&gt;API and Configuration&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;Also, a &lt;code&gt;Utilities/Features&lt;/code&gt; guide is available for development. Visit &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs/utils.md&quot;&gt;Utilities/Features&lt;/a&gt; for more details.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Guidelines for Contributors&lt;/h2&gt; 
&lt;p&gt;If you want to contribute to improve this package, please read &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs/guidelines.md&quot;&gt;Guidelines&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you would like to contribute with translations, make sure that you also check https://github.com/mediaelement/mediaelement-plugins, and perform the translations for the files suffixed as &lt;code&gt;-i18n&lt;/code&gt;.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Useful resources&lt;/h2&gt; 
&lt;p&gt;A compilation of useful articles can be found &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/docs/resources.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;Change Log&lt;/h2&gt; 
&lt;p&gt;Changes available at &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/changelog.md&quot;&gt;Change Log&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;
 &lt;!-- raw HTML omitted --&gt;
 &lt;!-- raw HTML omitted --&gt;&lt;/p&gt; 
&lt;h2&gt;TODO list&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Before posting an issue, it is strongly encouraged to read the whole documentation since it covers the majority of scenarios exposed in prior issues.&lt;/p&gt; 
&lt;p&gt;New features and pending bugs can be found at &lt;a href=&quot;https://raw.githubusercontent.com/mediaelement/mediaelement/master/TODO.md&quot;&gt;TODO list&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>discordjs/discord.js</title>
      <link>https://github.com/discordjs/discord.js</link>
      <description>&lt;p&gt;A powerful JavaScript library for interacting with the Discord API&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Table of contents&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#installation&quot;&gt;Installation&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#audio-engines&quot;&gt;Audio engines&lt;/a&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#optional-packages&quot;&gt;Optional packages&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#example-usage&quot;&gt;Example Usage&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#links&quot;&gt;Links&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#extensions&quot;&gt;Extensions&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#contributing&quot;&gt;Contributing&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/discordjs/discord.js/master/#help&quot;&gt;Help&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;p&gt;discord.js is a powerful &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; module that allows you to easily interact with the &lt;a href=&quot;https://discord.com/developers/docs/intro&quot;&gt;Discord API&lt;/a&gt;.&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Object-oriented&lt;/li&gt; 
 &lt;li&gt;Predictable abstractions&lt;/li&gt; 
 &lt;li&gt;Performant&lt;/li&gt; 
 &lt;li&gt;100% coverage of the Discord API&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Installation&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Node.js 14.0.0 or newer is required.&lt;/strong&gt;&lt;br&gt; Ignore any warnings about unmet peer dependencies, as they&#39;re all optional.&lt;/p&gt; 
&lt;p&gt;Without voice support: &lt;code&gt;npm install discord.js&lt;/code&gt;&lt;br&gt; With voice support (&lt;a href=&quot;https://www.npmjs.com/package/@discordjs/opus&quot;&gt;@discordjs/opus&lt;/a&gt;): &lt;code&gt;npm install discord.js @discordjs/opus&lt;/code&gt;&lt;br&gt; With voice support (&lt;a href=&quot;https://www.npmjs.com/package/opusscript&quot;&gt;opusscript&lt;/a&gt;): &lt;code&gt;npm install discord.js opusscript&lt;/code&gt;&lt;/p&gt; 
&lt;h3&gt;Audio engines&lt;/h3&gt; 
&lt;p&gt;The preferred audio engine is @discordjs/opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose @discordjs/opus. Using opusscript is only recommended for development environments where @discordjs/opus is tough to get working. For production bots, using @discordjs/opus should be considered a necessity, especially if they&#39;re going to be running on multiple servers.&lt;/p&gt; 
&lt;h3&gt;Optional packages&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/zlib-sync&quot;&gt;zlib-sync&lt;/a&gt; for WebSocket data compression and inflation (&lt;code&gt;npm install zlib-sync&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/discord/erlpack&quot;&gt;erlpack&lt;/a&gt; for significantly faster WebSocket data (de)serialisation (&lt;code&gt;npm install discord/erlpack&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;One of the following packages can be installed for faster voice packet encryption and decryption: 
  &lt;ul&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/sodium&quot;&gt;sodium&lt;/a&gt; (&lt;code&gt;npm install sodium&lt;/code&gt;)&lt;/li&gt; 
   &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/libsodium-wrappers&quot;&gt;libsodium.js&lt;/a&gt; (&lt;code&gt;npm install libsodium-wrappers&lt;/code&gt;)&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/bufferutil&quot;&gt;bufferutil&lt;/a&gt; for a much faster WebSocket connection (&lt;code&gt;npm install bufferutil&lt;/code&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/utf-8-validate&quot;&gt;utf-8-validate&lt;/a&gt; in combination with &lt;code&gt;bufferutil&lt;/code&gt; for much faster WebSocket processing (&lt;code&gt;npm install utf-8-validate&lt;/code&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Example usage&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Discord = require(&#39;discord.js&#39;);
const client = new Discord.Client();

client.on(&#39;ready&#39;, () =&amp;gt; {
  console.log(`Logged in as ${client.user.tag}!`);
});

client.on(&#39;message&#39;, msg =&amp;gt; {
  if (msg.content === &#39;ping&#39;) {
    msg.channel.send(&#39;pong&#39;);
  }
});

client.login(&#39;token&#39;);
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Links&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.js.org/&quot;&gt;Website&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/website&quot;&gt;source&lt;/a&gt;)&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.js.org/#/docs/main/master/general/welcome&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discordjs.guide/&quot;&gt;Guide&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/guide&quot;&gt;source&lt;/a&gt;) - this is still for stable&lt;br&gt; See also the &lt;a href=&quot;https://discordjs.guide/additional-info/changes-in-v12.html&quot;&gt;Update Guide&lt;/a&gt;, including updated and removed items in the library.&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/bRCvFy9&quot;&gt;Discord.js Discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discord.gg/discord-api&quot;&gt;Discord API Discord server&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://github.com/discordjs/discord.js&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/discord.js&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href=&quot;https://discordapi.com/unofficial/libs.html&quot;&gt;Related libraries&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;Extensions&lt;/h3&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/discord-rpc&quot;&gt;RPC&lt;/a&gt; (&lt;a href=&quot;https://github.com/discordjs/RPC&quot;&gt;source&lt;/a&gt;)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Contributing&lt;/h2&gt; 
&lt;p&gt;Before creating an issue, please ensure that it hasn&#39;t already been reported/suggested, and double-check the &lt;a href=&quot;https://discord.js.org/#/docs&quot;&gt;documentation&lt;/a&gt;.&lt;br&gt; See &lt;a href=&quot;https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md&quot;&gt;the contribution guide&lt;/a&gt; if you&#39;d like to submit a PR.&lt;/p&gt; 
&lt;h2&gt;Help&lt;/h2&gt; 
&lt;p&gt;If you don&#39;t understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don&#39;t hesitate to join our official &lt;a href=&quot;https://discord.gg/bRCvFy9&quot;&gt;Discord.js Server&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hug-sun/element3</title>
      <link>https://github.com/hug-sun/element3</link>
      <description>&lt;p&gt;A Vue.js 3.0 UI Toolkit for Web.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;A Vue.js 3.0 UI Toolkit for Web.&lt;/p&gt; 
&lt;h2&gt;Install&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;npm install element3 -S
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;Quick Start&lt;/h2&gt; 
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import { createApp } from &#39;vue&#39;
import App from &#39;./App.vue&#39;
// import style
import &#39;element3/lib/theme-chalk/index.css&#39;
import Element3 from &#39;element3&#39;

// global import
createApp(App).use(Element3).mount(&#39;#app&#39;)

// or according to the need to import
import {
  ElLink,
  ElButton
  // ...
} from &#39;element3&#39;

createApp(App).use(ElLink).use(ElButton)
&lt;/code&gt;&lt;/pre&gt; 
&lt;h2&gt;About&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;base on &lt;a href=&quot;https://github.com/ElemeFE/element&quot;&gt;element-ui&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Table Component base on &lt;a href=&quot;https://github.com/element-plus/element-plus&quot;&gt;element-plus&lt;/a&gt; 
  &lt;ul&gt; 
   &lt;li&gt;rewrite Table is WIP&lt;/li&gt; 
  &lt;/ul&gt; &lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;Documentation&lt;/h2&gt; 
&lt;p&gt;To check out live docs, visit &lt;a href=&quot;https://element3-ui.com/&quot;&gt;website&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Questions&lt;/h2&gt; 
&lt;p&gt;TODO&lt;/p&gt; 
&lt;h2&gt;Issues&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://raw.githubusercontent.com/hug-sun/element3/master/TODO&quot;&gt;Issue Reporting Checklist&lt;/a&gt; before opening an issue. Issues not conforming to the guidelines may be closed immediately.&lt;/p&gt; 
&lt;h2&gt;Changelog&lt;/h2&gt; 
&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&quot;https://github.com/kkbjs/element3/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;Contribution ✨&lt;/h2&gt; 
&lt;p&gt;Please make sure to read the &lt;a href=&quot;https://juejin.im/post/6864462363039531022&quot;&gt;Contributing Guide&lt;/a&gt; before making a pull request. If you have a Element3-related project/component/tool, add it with a pull request to &lt;a href=&quot;https://raw.githubusercontent.com/hug-sun/element3/master/TODO&quot;&gt;this curated list&lt;/a&gt;!&lt;/p&gt; 
&lt;p&gt;Thank you to all the people who already contributed to Element3!&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;Join Discussion Group&lt;/h2&gt; 
&lt;p&gt;Scan the QR code using &lt;a href=&quot;https://www.dingtalk.com/&quot;&gt;Dingtalk App&lt;/a&gt; to join in discussion group :&lt;/p&gt; 
&lt;!-- raw HTML omitted --&gt; 
&lt;h2&gt;License&lt;/h2&gt; 
&lt;p&gt;&lt;a href=&quot;http://opensource.org/licenses/MIT&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
